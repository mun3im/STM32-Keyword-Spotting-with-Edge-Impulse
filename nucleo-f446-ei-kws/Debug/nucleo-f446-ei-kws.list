
nucleo-f446-ei-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c5a8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00022894  0801c778  0801c778  0002c778  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803f00c  0803f00c  00050580  2**0
                  CONTENTS
  4 .ARM          00000008  0803f00c  0803f00c  0004f00c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803f014  0803f014  00050580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803f014  0803f014  0004f014  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0803f01c  0803f01c  0004f01c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  0803f024  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007550  20000580  0803f5a4  00050580  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007ad0  0803f5a4  00057ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050580  2**0
                  CONTENTS, READONLY
 12 .debug_info   000fe91b  00000000  00000000  000505b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000106dd  00000000  00000000  0014eecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004470  00000000  00000000  0015f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004240  00000000  00000000  00163a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003185c  00000000  00000000  00167c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045908  00000000  00000000  001994b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00171bd6  00000000  00000000  001dedbc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00350992  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014c24  00000000  00000000  003509e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000580 	.word	0x20000580
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c760 	.word	0x0801c760

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000584 	.word	0x20000584
 800020c:	0801c760 	.word	0x0801c760

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	ed87 0a01 	vstr	s0, [r7, #4]
 800104e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001052:	f017 f97d 	bl	8018350 <ceilf>
 8001056:	eef0 7a40 	vmov.f32	s15, s0
 800105a:	eeb0 0a67 	vmov.f32	s0, s15
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	ed87 0a01 	vstr	s0, [r7, #4]
 800106e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001072:	f017 fb9f 	bl	80187b4 <expf>
 8001076:	eef0 7a40 	vmov.f32	s15, s0
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	ed87 0a01 	vstr	s0, [r7, #4]
 800108e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001092:	f017 f9df 	bl	8018454 <floorf>
 8001096:	eef0 7a40 	vmov.f32	s15, s0
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b2:	f017 fbbd 	bl	8018830 <sqrtf>
 80010b6:	eef0 7a40 	vmov.f32	s15, s0
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80010d2:	f017 fa25 	bl	8018520 <roundf>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	4798      	blx	r3
    }
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	731a      	strb	r2, [r3, #12]
 8001194:	e00f      	b.n	80011b6 <_ZN2ei9ei_matrixC1EmmPf+0x42>
        }
        else {
            buffer = (float*)calloc(n_rows * n_cols * sizeof(float), 1);
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	2101      	movs	r1, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f019 ff3c 	bl	801b020 <calloc>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float));
            }
#endif
        }
    }
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <_ZN2ei9ei_matrixD1Ev+0x22>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7b1b      	ldrb	r3, [r3, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <_ZN2ei9ei_matrixD1Ev+0x22>
            free(buffer);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f019 ffeb 	bl	801b1c4 <free>
            else {
                ei_dsp_register_matrix_free(rows, cols, sizeof(float));
            }
#endif
        }
    }
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>:
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_dequantization_fn How to dequantize the values in this matrix
     * @param a_buffer Optional: a buffer, if set we won't allocate memory ourselves
     */
    ei_quantized_matrix(uint32_t n_rows,
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
                        const char *file = NULL,
                        int line = 0
#endif
                        )
    {
        if (a_buffer) {
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x22>
            buffer = a_buffer;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	731a      	strb	r2, [r3, #12]
 8001218:	e00e      	b.n	8001238 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x40>
        }
        else {
            buffer = (uint8_t*)calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	2101      	movs	r1, #1
 8001224:	4618      	mov	r0, r3
 8001226:	f019 fefb 	bl	801b020 <calloc>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2201      	movs	r2, #1
 8001236:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
        dequantization_fn = a_dequantization_fn;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	611a      	str	r2, [r3, #16]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(uint8_t));
            }
#endif
        }
    }
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN2ei19ei_quantized_matrixD1Ev>:

    ~ei_quantized_matrix() {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7b1b      	ldrb	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
            free(buffer);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f019 ffa7 	bl	801b1c4 <free>
            else {
                ei_dsp_register_matrix_free(rows, cols, sizeof(uint8_t));
            }
#endif
        }
    }
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
 8001284:	e7fe      	b.n	8001284 <_ZSt25__throw_bad_function_callv+0x4>
	...

08001288 <_ZN2ei5numpy4rollEPfji>:
     * @param input_array
     * @param input_array_size
     * @param shift The number of places by which elements are shifted.
     * @returns EIDSP_OK if OK
     */
    static int roll(float *input_array, size_t input_array_size, int shift) {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
        if (shift < 0) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	da03      	bge.n	80012a2 <_ZN2ei5numpy4rollEPfji+0x1a>
            shift = input_array_size + shift;
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	607b      	str	r3, [r7, #4]
        }

        if (shift == 0) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <_ZN2ei5numpy4rollEPfji+0x24>
            return EIDSP_OK;
 80012a8:	2400      	movs	r4, #0
 80012aa:	e039      	b.n	8001320 <_ZN2ei5numpy4rollEPfji+0x98>
        }

        // so we need to allocate a buffer of the size of shift...
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f107 0010 	add.w	r0, r7, #16
 80012b2:	2300      	movs	r3, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	f7ff ff5d 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10a      	bne.n	80012d6 <_ZN2ei5numpy4rollEPfji+0x4e>
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <_ZN2ei5numpy4rollEPfji+0xa4>)
 80012c2:	491b      	ldr	r1, [pc, #108]	; (8001330 <_ZN2ei5numpy4rollEPfji+0xa8>)
 80012c4:	481b      	ldr	r0, [pc, #108]	; (8001334 <_ZN2ei5numpy4rollEPfji+0xac>)
 80012c6:	f01a fb6b 	bl	801b9a0 <iprintf>
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <_ZN2ei5numpy4rollEPfji+0xb0>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <_ZN2ei5numpy4rollEPfji+0xb4>)
 80012ce:	214a      	movs	r1, #74	; 0x4a
 80012d0:	481b      	ldr	r0, [pc, #108]	; (8001340 <_ZN2ei5numpy4rollEPfji+0xb8>)
 80012d2:	f019 fe81 	bl	801afd8 <__assert_func>

        // we copy from the end of the buffer into the shift buffer
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 80012d6:	6938      	ldr	r0, [r7, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	18d1      	adds	r1, r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	461a      	mov	r2, r3
 80012ea:	f019 ff81 	bl	801b1f0 <memcpy>

        // now we do a memmove to shift the array
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	18d0      	adds	r0, r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	461a      	mov	r2, r3
 8001300:	68f9      	ldr	r1, [r7, #12]
 8001302:	f019 ff83 	bl	801b20c <memmove>

        // and copy the shift buffer back to the beginning of the array
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	461a      	mov	r2, r3
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f019 ff6e 	bl	801b1f0 <memcpy>

        return EIDSP_OK;
 8001314:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff56 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 8001320:	4623      	mov	r3, r4
    }
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	0801c7a0 	.word	0x0801c7a0
 8001330:	fffffc16 	.word	0xfffffc16
 8001334:	0801c7b4 	.word	0x0801c7b4
 8001338:	0801c7c4 	.word	0x0801c7c4
 800133c:	0801c7cc 	.word	0x0801c7cc
 8001340:	0801c7fc 	.word	0x0801c7fc

08001344 <_ZN2ei5numpy3sumEPfj>:

    static float sum(float *input_array, size_t input_array_size) {
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d20f      	bcs.n	8001380 <_ZN2ei5numpy3sumEPfj+0x3c>
            res += input_array[ix];
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001374:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3301      	adds	r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	e7eb      	b.n	8001358 <_ZN2ei5numpy3sumEPfj+0x14>
        }
        return res;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	ee07 3a90 	vmov	s15, r3
    }
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>:
     * @param matrix1_cols matrix1 row size
     * @param matrix2 Pointer to matrix2 (NxK)
     * @param out_matrix Pointer to out matrix (MxK)
     * @returns EIDSP_OK if OK
     */
    static inline int dot_by_row(int i, float *row, size_t matrix1_cols,
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b08b      	sub	sp, #44	; 0x2c
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
        quantized_matrix_t *matrix2, matrix_t *out_matrix)
    {
        if (matrix1_cols != matrix2->rows) {
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d00a      	beq.n	80013c2 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80013ac:	4a3b      	ldr	r2, [pc, #236]	; (800149c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x108>)
 80013ae:	493c      	ldr	r1, [pc, #240]	; (80014a0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x10c>)
 80013b0:	483c      	ldr	r0, [pc, #240]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013b2:	f01a faf5 	bl	801b9a0 <iprintf>
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013b8:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 80013ba:	21e2      	movs	r1, #226	; 0xe2
 80013bc:	483c      	ldr	r0, [pc, #240]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 80013be:	f019 fe0b 	bl	801afd8 <__assert_func>
        }

#if EIDSP_USE_CMSIS_DSP
        EI_DSP_MATRIX(dequantized_matrix, 1, matrix1_cols);
 80013c2:	f107 0014 	add.w	r0, r7, #20
 80013c6:	2300      	movs	r3, #0
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	2101      	movs	r1, #1
 80013cc:	f7ff fed2 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10a      	bne.n	80013ec <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x58>
 80013d6:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x120>)
 80013d8:	4937      	ldr	r1, [pc, #220]	; (80014b8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x124>)
 80013da:	4832      	ldr	r0, [pc, #200]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013dc:	f01a fae0 	bl	801b9a0 <iprintf>
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 80013e4:	21e6      	movs	r1, #230	; 0xe6
 80013e6:	4832      	ldr	r0, [pc, #200]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 80013e8:	f019 fdf6 	bl	801afd8 <__assert_func>
        if (!dequantized_matrix.buffer) {
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x74>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80013f2:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x120>)
 80013f4:	4930      	ldr	r1, [pc, #192]	; (80014b8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x124>)
 80013f6:	482b      	ldr	r0, [pc, #172]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013f8:	f01a fad2 	bl	801b9a0 <iprintf>
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013fe:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 8001400:	21e8      	movs	r1, #232	; 0xe8
 8001402:	482b      	ldr	r0, [pc, #172]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 8001404:	f019 fde8 	bl	801afd8 <__assert_func>
        }
#endif

        for (uint16_t j = 0; j < matrix2->cols; j++) {
 8001408:	2300      	movs	r3, #0
 800140a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800140c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	429a      	cmp	r2, r3
 8001414:	d237      	bcs.n	8001486 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xf2>
#if EIDSP_USE_CMSIS_DSP
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 8001416:	2300      	movs	r3, #0
 8001418:	84bb      	strh	r3, [r7, #36]	; 0x24
 800141a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d919      	bls.n	8001456 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xc2>
                dequantized_matrix.buffer[k] = matrix2->dequantization_fn(matrix2->buffer[k * matrix2->cols + j]);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6811      	ldr	r1, [r2, #0]
 800142a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	6880      	ldr	r0, [r0, #8]
 8001430:	fb00 f002 	mul.w	r0, r0, r2
 8001434:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001436:	4402      	add	r2, r0
 8001438:	440a      	add	r2, r1
 800143a:	7810      	ldrb	r0, [r2, #0]
 800143c:	6979      	ldr	r1, [r7, #20]
 800143e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	188c      	adds	r4, r1, r2
 8001444:	4798      	blx	r3
 8001446:	eef0 7a40 	vmov.f32	s15, s0
 800144a:	edc4 7a00 	vstr	s15, [r4]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 800144e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001454:	e7e1      	b.n	800141a <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x86>
            }

            float result;
            arm_dot_prod_f32(row, dequantized_matrix.buffer, matrix1_cols, &result);
 8001456:	6979      	ldr	r1, [r7, #20]
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f008 fce6 	bl	8009e30 <arm_dot_prod_f32>
            out_matrix->buffer[i * matrix2->cols + j] = result;
 8001464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	fb01 f103 	mul.w	r1, r1, r3
 8001472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001474:	440b      	add	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 800147e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001480:	3301      	adds	r3, #1
 8001482:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001484:	e7c2      	b.n	800140c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x78>
                    row[k] * matrix2->dequantization_fn(matrix2->buffer[k * matrix2->cols + j]);
            }
#endif
        }

        return EIDSP_OK;
 8001486:	2400      	movs	r4, #0
        EI_DSP_MATRIX(dequantized_matrix, 1, matrix1_cols);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe9d 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 8001492:	4623      	mov	r3, r4
    }
 8001494:	4618      	mov	r0, r3
 8001496:	372c      	adds	r7, #44	; 0x2c
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	0801c868 	.word	0x0801c868
 80014a0:	fffffc14 	.word	0xfffffc14
 80014a4:	0801c7b4 	.word	0x0801c7b4
 80014a8:	0801c7c4 	.word	0x0801c7c4
 80014ac:	0801c884 	.word	0x0801c884
 80014b0:	0801c7fc 	.word	0x0801c7fc
 80014b4:	0801c7a0 	.word	0x0801c7a0
 80014b8:	fffffc16 	.word	0xfffffc16

080014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4619      	mov	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	461a      	mov	r2, r3
 80014d4:	f000 f818 	bl	8001508 <_ZN2ei5numpy9transposeEPfii>
 80014d8:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	e00c      	b.n	80014fe <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 80014f0:	893a      	ldrh	r2, [r7, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 80014f6:	897a      	ldrh	r2, [r7, #10]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80014fc:	2300      	movs	r3, #0
    }
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <_ZN2ei5numpy9transposeEPfii>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b08f      	sub	sp, #60	; 0x3c
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800151c:	2300      	movs	r3, #0
 800151e:	f7ff fe29 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10b      	bne.n	8001540 <_ZN2ei5numpy9transposeEPfii+0x38>
 8001528:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <_ZN2ei5numpy9transposeEPfii+0xd8>)
 800152a:	492e      	ldr	r1, [pc, #184]	; (80015e4 <_ZN2ei5numpy9transposeEPfii+0xdc>)
 800152c:	482e      	ldr	r0, [pc, #184]	; (80015e8 <_ZN2ei5numpy9transposeEPfii+0xe0>)
 800152e:	f01a fa37 	bl	801b9a0 <iprintf>
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <_ZN2ei5numpy9transposeEPfii+0xe4>)
 8001534:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <_ZN2ei5numpy9transposeEPfii+0xe8>)
 8001536:	f240 111f 	movw	r1, #287	; 0x11f
 800153a:	482e      	ldr	r0, [pc, #184]	; (80015f4 <_ZN2ei5numpy9transposeEPfii+0xec>)
 800153c:	f019 fd4c 	bl	801afd8 <__assert_func>
        if (!temp_matrix.buffer) {
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10b      	bne.n	800155e <_ZN2ei5numpy9transposeEPfii+0x56>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <_ZN2ei5numpy9transposeEPfii+0xd8>)
 8001548:	4926      	ldr	r1, [pc, #152]	; (80015e4 <_ZN2ei5numpy9transposeEPfii+0xdc>)
 800154a:	4827      	ldr	r0, [pc, #156]	; (80015e8 <_ZN2ei5numpy9transposeEPfii+0xe0>)
 800154c:	f01a fa28 	bl	801b9a0 <iprintf>
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <_ZN2ei5numpy9transposeEPfii+0xe4>)
 8001552:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <_ZN2ei5numpy9transposeEPfii+0xe8>)
 8001554:	f240 1121 	movw	r1, #289	; 0x121
 8001558:	4826      	ldr	r0, [pc, #152]	; (80015f4 <_ZN2ei5numpy9transposeEPfii+0xec>)
 800155a:	f019 fd3d 	bl	801afd8 <__assert_func>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	da03      	bge.n	800156e <_ZN2ei5numpy9transposeEPfii+0x66>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	db01      	blt.n	8001572 <_ZN2ei5numpy9transposeEPfii+0x6a>
            return EIDSP_NARROWING;
 800156e:	4c22      	ldr	r4, [pc, #136]	; (80015f8 <_ZN2ei5numpy9transposeEPfii+0xf0>)
 8001570:	e02c      	b.n	80015cc <_ZN2ei5numpy9transposeEPfii+0xc4>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	b29b      	uxth	r3, r3
 8001576:	83bb      	strh	r3, [r7, #28]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	b29b      	uxth	r3, r3
 800157c:	83fb      	strh	r3, [r7, #30]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	b29b      	uxth	r3, r3
 8001586:	82bb      	strh	r3, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	b29b      	uxth	r3, r3
 800158c:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001590:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001592:	f107 0214 	add.w	r2, r7, #20
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f008 fc75 	bl	8009e8c <arm_mat_trans_f32>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 80015a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <_ZN2ei5numpy9transposeEPfii+0xae>
            return status;
 80015b0:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 80015b4:	e00a      	b.n	80015cc <_ZN2ei5numpy9transposeEPfii+0xc4>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 80015b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	461a      	mov	r2, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f019 fe13 	bl	801b1f0 <memcpy>

        return EIDSP_OK;
 80015ca:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fdfb 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 80015d6:	4623      	mov	r3, r4
    }
 80015d8:	4618      	mov	r0, r3
 80015da:	373c      	adds	r7, #60	; 0x3c
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	0801c7a0 	.word	0x0801c7a0
 80015e4:	fffffc16 	.word	0xfffffc16
 80015e8:	0801c7b4 	.word	0x0801c7b4
 80015ec:	0801c7c4 	.word	0x0801c7c4
 80015f0:	0801c8e4 	.word	0x0801c8e4
 80015f4:	0801c7fc 	.word	0x0801c7fc
 80015f8:	fffffc0c 	.word	0xfffffc0c

080015fc <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>:
     * Return the Discrete Cosine Transform of arbitrary type sequence 2.
     * @param input Input array (of size N)
     * @param N number of items in input and output array
     * @returns EIDSP_OK if OK
     */
    static int dct2(float *input, size_t N, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	ed2d 8b02 	vpush	{d8}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	71fb      	strb	r3, [r7, #7]
        if (N == 0) {
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x1c>
            return EIDSP_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e06f      	b.n	80016f8 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfc>
        }

        int ret = ei::dct::transform(input, N);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f00b fabc 	bl	800cb98 <_ZN2ei3dct9transformEPfj>
 8001620:	6178      	str	r0, [r7, #20]
        if (ret != EIDSP_OK) {
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x44>
            EIDSP_ERR(ret);
 8001628:	4a36      	ldr	r2, [pc, #216]	; (8001704 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x108>)
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	4836      	ldr	r0, [pc, #216]	; (8001708 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x10c>)
 800162e:	f01a f9b7 	bl	801b9a0 <iprintf>
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x110>)
 8001634:	4a36      	ldr	r2, [pc, #216]	; (8001710 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x114>)
 8001636:	f240 1181 	movw	r1, #385	; 0x181
 800163a:	4836      	ldr	r0, [pc, #216]	; (8001714 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x118>)
 800163c:	f019 fccc 	bl	801afd8 <__assert_func>
        }

        // for some reason the output is 2x too low...
        for (size_t ix = 0; ix < N; ix++) {
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d211      	bcs.n	8001670 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x74>
            input[ix] *= 2;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001664:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < N; ix++) {
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3301      	adds	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e7e9      	b.n	8001644 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x48>
        }

        if (normalization == DCT_NORMALIZATION_ORTHO) {
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d13f      	bne.n	80016f6 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfa>
            input[0] = input[0] * sqrt(1.0f / static_cast<float>(4 * N));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	ed93 8a00 	vldr	s16, [r3]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800168c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	f7ff fd06 	bl	80010a4 <_ZSt4sqrtf>
 8001698:	eef0 7a40 	vmov.f32	s15, s0
 800169c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d221      	bcs.n	80016f6 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfa>
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	ed93 8a00 	vldr	s16, [r3]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d2:	eeb0 0a47 	vmov.f32	s0, s14
 80016d6:	f7ff fce5 	bl	80010a4 <_ZSt4sqrtf>
 80016da:	eef0 7a40 	vmov.f32	s15, s0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016ea:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	e7d9      	b.n	80016aa <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xae>
            }
        }

        return EIDSP_OK;
 80016f6:	2300      	movs	r3, #0
    }
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	ecbd 8b02 	vpop	{d8}
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0801c918 	.word	0x0801c918
 8001708:	0801c7b4 	.word	0x0801c7b4
 800170c:	0801c7c4 	.word	0x0801c7c4
 8001710:	0801c91c 	.word	0x0801c91c
 8001714:	0801c7fc 	.word	0x0801c7fc

08001718 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>:
    /**
     * Discrete Cosine Transform of arbitrary type sequence 2 on a matrix.
     * @param matrix
     * @returns EIDSP_OK if OK
     */
    static int dct2(matrix_t *matrix, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	429a      	cmp	r2, r3
 8001730:	d218      	bcs.n	8001764 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4c>
            int r = dct2(matrix->buffer + (row * matrix->cols), matrix->cols, normalization);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	18d0      	adds	r0, r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff ff56 	bl	80015fc <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>
 8001750:	60b8      	str	r0, [r7, #8]
            if (r != EIDSP_OK) {
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x44>
                return r;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	e004      	b.n	8001766 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4e>
        for (size_t row = 0; row < matrix->rows; row++) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e7e1      	b.n	8001728 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x10>
            }
        }

        return EIDSP_OK;
 8001764:	2300      	movs	r3, #0
    }
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <_ZN2ei5numpy17quantize_zero_oneEf>:

    /**
     * Quantize a float value between zero and one
     * @param value Float value
     */
    static uint8_t quantize_zero_one(float value) {
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
        const size_t length = sizeof(quantized_values_one_zero) / sizeof(float);
 800177a:	23e7      	movs	r3, #231	; 0xe7
 800177c:	613b      	str	r3, [r7, #16]

        // look in the table
        for (size_t ix = 0; ix < length; ix++) {
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2be6      	cmp	r3, #230	; 0xe6
 8001786:	d813      	bhi.n	80017b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x40>
            if (quantized_values_one_zero[ix] == value) return ix;
 8001788:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ed97 7a01 	vldr	s14, [r7, #4]
 8001798:	eeb4 7a67 	vcmp.f32	s14, s15
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d102      	bne.n	80017a8 <_ZN2ei5numpy17quantize_zero_oneEf+0x38>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e083      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        for (size_t ix = 0; ix < length; ix++) {
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	3301      	adds	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e7e8      	b.n	8001782 <_ZN2ei5numpy17quantize_zero_oneEf+0x12>
        }

        // no match?

        if (value < quantized_values_one_zero[0]) {
 80017b0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80018c0 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	d508      	bpl.n	80017d4 <_ZN2ei5numpy17quantize_zero_oneEf+0x64>
            return quantized_values_one_zero[0];
 80017c2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80018c0 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 80017c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ca:	edc7 7a00 	vstr	s15, [r7]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	e06d      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }
        if (value > quantized_values_one_zero[length - 1]) {
 80017d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	dd08      	ble.n	80017f8 <_ZN2ei5numpy17quantize_zero_oneEf+0x88>
            return quantized_values_one_zero[length - 1];
 80017e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	edc7 7a00 	vstr	s15, [r7]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e05b      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }

        int lo = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
        int hi = length - 1;
 80017fc:	23e6      	movs	r3, #230	; 0xe6
 80017fe:	617b      	str	r3, [r7, #20]

        while (lo <= hi) {
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	dc35      	bgt.n	8001874 <_ZN2ei5numpy17quantize_zero_oneEf+0x104>
            int mid = (hi + lo) / 2;
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4413      	add	r3, r2
 800180e:	0fda      	lsrs	r2, r3, #31
 8001810:	4413      	add	r3, r2
 8001812:	105b      	asrs	r3, r3, #1
 8001814:	60fb      	str	r3, [r7, #12]

            if (value < quantized_values_one_zero[mid]) {
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ed97 7a01 	vldr	s14, [r7, #4]
 8001826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	d503      	bpl.n	8001838 <_ZN2ei5numpy17quantize_zero_oneEf+0xc8>
                hi = mid - 1;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3b01      	subs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e7e3      	b.n	8001800 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else if (value > quantized_values_one_zero[mid]) {
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed97 7a01 	vldr	s14, [r7, #4]
 8001848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	dd03      	ble.n	800185a <_ZN2ei5numpy17quantize_zero_oneEf+0xea>
                lo = mid + 1;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	e7d2      	b.n	8001800 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else {
                return quantized_values_one_zero[mid];
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186a:	edc7 7a00 	vstr	s15, [r7]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e01d      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
            }
        }

        // lo == hi + 1
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	ed93 7a00 	vldr	s14, [r3]
 8001880:	edd7 7a01 	vldr	s15, [r7, #4]
 8001884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	edd7 6a01 	vldr	s13, [r7, #4]
 8001898:	ee76 7ae7 	vsub.f32	s15, s13, s15
            lo :
            hi;
 800189c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d502      	bpl.n	80018ac <_ZN2ei5numpy17quantize_zero_oneEf+0x13c>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e001      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	b2db      	uxtb	r3, r3
    }
 80018b0:	4618      	mov	r0, r3
 80018b2:	3724      	adds	r7, #36	; 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	0801efd4 	.word	0x0801efd4
 80018c0:	00000000 	.word	0x00000000

080018c4 <_ZN2ei5numpy19dequantize_zero_oneEh>:

    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
        if (value > 247) value = 247;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2bf7      	cmp	r3, #247	; 0xf7
 80018d2:	d901      	bls.n	80018d8 <_ZN2ei5numpy19dequantize_zero_oneEh+0x14>
 80018d4:	23f7      	movs	r3, #247	; 0xf7
 80018d6:	71fb      	strb	r3, [r7, #7]
        return quantized_values_one_zero[value];
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <_ZN2ei5numpy19dequantize_zero_oneEh+0x30>)
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	ee07 3a90 	vmov	s15, r3
    }
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	0801efd4 	.word	0x0801efd4

080018f8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
     * @param output Output matrix of size (M+pad_before+pad_after x N)
     * @param pad_before Number of items to pad before
     * @param pad_after Number of items to pad after
     * @returns 0 if OK
     */
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	460b      	mov	r3, r1
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	4613      	mov	r3, r2
 800190c:	80bb      	strh	r3, [r7, #4]
        if (output->cols != input->cols) {
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	d00b      	beq.n	8001932 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800191a:	4a75      	ldr	r2, [pc, #468]	; (8001af0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1f8>)
 800191c:	4975      	ldr	r1, [pc, #468]	; (8001af4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1fc>)
 800191e:	4876      	ldr	r0, [pc, #472]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 8001920:	f01a f83e 	bl	801b9a0 <iprintf>
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001926:	4a76      	ldr	r2, [pc, #472]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001928:	f240 11e1 	movw	r1, #481	; 0x1e1
 800192c:	4875      	ldr	r0, [pc, #468]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800192e:	f019 fb53 	bl	801afd8 <__assert_func>
        }

        if (output->rows != input->rows + pad_before + pad_after) {
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4419      	add	r1, r3
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	440b      	add	r3, r1
 8001942:	429a      	cmp	r2, r3
 8001944:	d00b      	beq.n	800195e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x66>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001946:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1f8>)
 8001948:	496a      	ldr	r1, [pc, #424]	; (8001af4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1fc>)
 800194a:	486b      	ldr	r0, [pc, #428]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 800194c:	f01a f828 	bl	801b9a0 <iprintf>
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001952:	4a6b      	ldr	r2, [pc, #428]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001954:	f240 11e5 	movw	r1, #485	; 0x1e5
 8001958:	486a      	ldr	r0, [pc, #424]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800195a:	f019 fb3d 	bl	801afd8 <__assert_func>
        }

        if (input->rows == 0) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10b      	bne.n	800197e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x86>
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 8001966:	4a68      	ldr	r2, [pc, #416]	; (8001b08 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x210>)
 8001968:	4968      	ldr	r1, [pc, #416]	; (8001b0c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x214>)
 800196a:	4863      	ldr	r0, [pc, #396]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 800196c:	f01a f818 	bl	801b9a0 <iprintf>
 8001970:	4b62      	ldr	r3, [pc, #392]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001972:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001974:	f240 11e9 	movw	r1, #489	; 0x1e9
 8001978:	4862      	ldr	r0, [pc, #392]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800197a:	f019 fb2d 	bl	801afd8 <__assert_func>
        }

        uint32_t pad_before_index = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
        bool pad_before_direction_up = true;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	3b01      	subs	r3, #1
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db42      	blt.n	8001a1a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x122>
            memcpy(output->buffer + (input->cols * ix),
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	69f9      	ldr	r1, [r7, #28]
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_before_index * input->cols),
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * ix),
 80019be:	461a      	mov	r2, r3
 80019c0:	f019 fc16 	bl	801b1f0 <memcpy>

            if (pad_before_index == 0 && !pad_before_direction_up) {
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe8>
 80019ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ce:	f083 0301 	eor.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe8>
                pad_before_direction_up = true;
 80019d8:	2301      	movs	r3, #1
 80019da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019de:	e018      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>
 80019ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>
                pad_before_direction_up = false;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019fa:	e00a      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else if (pad_before_direction_up) {
 80019fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x114>
                pad_before_index++;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	3301      	adds	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	e002      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else {
                pad_before_index--;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	e7b9      	b.n	800198e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x96>
            }
        }

        memcpy(output->buffer + (input->cols * pad_before),
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	88f9      	ldrh	r1, [r7, #6]
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	18d0      	adds	r0, r2, r3
            input->buffer,
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6819      	ldr	r1, [r3, #0]
            input->rows * input->cols * sizeof(float));
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	6892      	ldr	r2, [r2, #8]
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	009b      	lsls	r3, r3, #2
        memcpy(output->buffer + (input->cols * pad_before),
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f019 fbd6 	bl	801b1f0 <memcpy>

        int32_t pad_after_index = input->rows - 1;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
        bool pad_after_direction_up = false;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]

        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	da43      	bge.n	8001ae4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1ec>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	88f8      	ldrh	r0, [r7, #6]
 8001a66:	6939      	ldr	r1, [r7, #16]
 8001a68:	4401      	add	r1, r0
 8001a6a:	4608      	mov	r0, r1
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	6849      	ldr	r1, [r1, #4]
 8001a70:	4401      	add	r1, r0
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_after_index * input->cols),
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001a92:	461a      	mov	r2, r3
 8001a94:	f019 fbac 	bl	801b1f0 <memcpy>

            if (pad_after_index == 0 && !pad_after_direction_up) {
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b8>
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b8>
                pad_after_direction_up = true;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
 8001aae:	e015      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d105      	bne.n	8001ac8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1d0>
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1d0>
                pad_after_direction_up = false;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
 8001ac6:	e009      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else if (pad_after_direction_up) {
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1de>
                pad_after_index++;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	e002      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else {
                pad_after_index--;
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	e7b7      	b.n	8001a54 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x15c>
            }
        }

        return EIDSP_OK;
 8001ae4:	2300      	movs	r3, #0
    }
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	0801c868 	.word	0x0801c868
 8001af4:	fffffc14 	.word	0xfffffc14
 8001af8:	0801c7b4 	.word	0x0801c7b4
 8001afc:	0801c7c4 	.word	0x0801c7c4
 8001b00:	0801c964 	.word	0x0801c964
 8001b04:	0801c7fc 	.word	0x0801c7fc
 8001b08:	0801c9c0 	.word	0x0801c9c0
 8001b0c:	fffffc12 	.word	0xfffffc12

08001b10 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>:
     * Calculate the mean over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int mean_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
        if (input_matrix->cols != output_matrix->rows) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d00b      	beq.n	8001b3e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xe8>)
 8001b28:	4934      	ldr	r1, [pc, #208]	; (8001bfc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xec>)
 8001b2a:	4835      	ldr	r0, [pc, #212]	; (8001c00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001b2c:	f019 ff38 	bl	801b9a0 <iprintf>
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001b32:	4a35      	ldr	r2, [pc, #212]	; (8001c08 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001b34:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8001b38:	4834      	ldr	r0, [pc, #208]	; (8001c0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001b3a:	f019 fa4d 	bl	801afd8 <__assert_func>
        }

        if (output_matrix->cols != 1) {
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d00b      	beq.n	8001b5e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x4e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xe8>)
 8001b48:	492c      	ldr	r1, [pc, #176]	; (8001bfc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xec>)
 8001b4a:	482d      	ldr	r0, [pc, #180]	; (8001c00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001b4c:	f019 ff28 	bl	801b9a0 <iprintf>
 8001b50:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001b54:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8001b58:	482c      	ldr	r0, [pc, #176]	; (8001c0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001b5a:	f019 fa3d 	bl	801afd8 <__assert_func>
        }

        int ret = transpose(input_matrix);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fcac 	bl	80014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8001b64:	6138      	str	r0, [r7, #16]
        if (ret != EIDSP_OK) {
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00b      	beq.n	8001b84 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x74>
            EIDSP_ERR(ret);
 8001b6c:	4a28      	ldr	r2, [pc, #160]	; (8001c10 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x100>)
 8001b6e:	6939      	ldr	r1, [r7, #16]
 8001b70:	4823      	ldr	r0, [pc, #140]	; (8001c00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001b72:	f019 ff15 	bl	801b9a0 <iprintf>
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001b7a:	f240 21f5 	movw	r1, #757	; 0x2f5
 8001b7e:	4823      	ldr	r0, [pc, #140]	; (8001c0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001b80:	f019 fa2a 	bl	801afd8 <__assert_func>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d21a      	bcs.n	8001bc8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb8>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	6979      	ldr	r1, [r7, #20]
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	18d0      	adds	r0, r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f107 020c 	add.w	r2, r7, #12
 8001bac:	4619      	mov	r1, r3
 8001bae:	f008 f9ae 	bl	8009f0e <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e7df      	b.n	8001b88 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x78>
            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        // retranspose
        ret = transpose(input_matrix);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fc77 	bl	80014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8001bce:	6138      	str	r0, [r7, #16]
        if (ret != EIDSP_OK) {
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xde>
            EIDSP_ERR(ret);
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x100>)
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001bdc:	f019 fee0 	bl	801b9a0 <iprintf>
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001be4:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8001be8:	4808      	ldr	r0, [pc, #32]	; (8001c0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001bea:	f019 f9f5 	bl	801afd8 <__assert_func>
        }

        return EIDSP_OK;
 8001bee:	2300      	movs	r3, #0
    }
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	0801c868 	.word	0x0801c868
 8001bfc:	fffffc14 	.word	0xfffffc14
 8001c00:	0801c7b4 	.word	0x0801c7b4
 8001c04:	0801c7c4 	.word	0x0801c7c4
 8001c08:	0801ca90 	.word	0x0801ca90
 8001c0c:	0801c7fc 	.word	0x0801c7fc
 8001c10:	0801c918 	.word	0x0801c918

08001c14 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>:
     * Calculate the standard deviation over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int std_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
#if EIDSP_USE_CMSIS_DSP
        return std_axis0_CMSIS(input_matrix, output_matrix);
 8001c1e:	6839      	ldr	r1, [r7, #0]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fd4b 	bl	80026bc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
 8001c26:	4603      	mov	r3, r0
            EIDSP_ERR(ret);
        }

        return EIDSP_OK;
#endif
    }
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b098      	sub	sp, #96	; 0x60
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	3301      	adds	r3, #1
 8001c44:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d00b      	beq.n	8001c66 <_ZN2ei5numpy4rfftEPKfjPfjj+0x36>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001c4e:	4a88      	ldr	r2, [pc, #544]	; (8001e70 <_ZN2ei5numpy4rfftEPKfjPfjj+0x240>)
 8001c50:	4988      	ldr	r1, [pc, #544]	; (8001e74 <_ZN2ei5numpy4rfftEPKfjPfjj+0x244>)
 8001c52:	4889      	ldr	r0, [pc, #548]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001c54:	f019 fea4 	bl	801b9a0 <iprintf>
 8001c58:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001c5a:	4a89      	ldr	r2, [pc, #548]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001c5c:	f240 4146 	movw	r1, #1094	; 0x446
 8001c60:	4888      	ldr	r0, [pc, #544]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001c62:	f019 f9b9 	bl	801afd8 <__assert_func>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d901      	bls.n	8001c72 <_ZN2ei5numpy4rfftEPKfjPfjj+0x42>
            src_size = n_fft;
 8001c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c70:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001c72:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001c76:	2300      	movs	r3, #0
 8001c78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	f7ff fa7a 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <_ZN2ei5numpy4rfftEPKfjPfjj+0x6e>
 8001c86:	4a80      	ldr	r2, [pc, #512]	; (8001e88 <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001c88:	4980      	ldr	r1, [pc, #512]	; (8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001c8a:	487b      	ldr	r0, [pc, #492]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001c8c:	f019 fe88 	bl	801b9a0 <iprintf>
 8001c90:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001c92:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001c94:	f240 414f 	movw	r1, #1103	; 0x44f
 8001c98:	487a      	ldr	r0, [pc, #488]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001c9a:	f019 f99d 	bl	801afd8 <__assert_func>
        if (!fft_input.buffer) {
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <_ZN2ei5numpy4rfftEPKfjPfjj+0x8c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ca4:	4a78      	ldr	r2, [pc, #480]	; (8001e88 <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001ca6:	4979      	ldr	r1, [pc, #484]	; (8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001ca8:	4873      	ldr	r0, [pc, #460]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001caa:	f019 fe79 	bl	801b9a0 <iprintf>
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001cb0:	4a73      	ldr	r2, [pc, #460]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001cb2:	f240 4151 	movw	r1, #1105	; 0x451
 8001cb6:	4873      	ldr	r0, [pc, #460]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001cb8:	f019 f98e 	bl	801afd8 <__assert_func>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001cbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	f019 fa93 	bl	801b1f0 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	18d0      	adds	r0, r2, r3
 8001cd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f019 faaf 	bl	801b240 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d030      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d02d      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf0:	2b80      	cmp	r3, #128	; 0x80
 8001cf2:	d02a      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfa:	d026      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d02:	d022      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0a:	d01e      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d12:	d01a      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1a:	d016      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001d1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f000 fb00 	bl	8002328 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001d28:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8093 	beq.w	8001e58 <_ZN2ei5numpy4rfftEPKfjPfjj+0x228>
                EIDSP_ERR(ret);
 8001d32:	4a57      	ldr	r2, [pc, #348]	; (8001e90 <_ZN2ei5numpy4rfftEPKfjPfjj+0x260>)
 8001d34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d36:	4850      	ldr	r0, [pc, #320]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001d38:	f019 fe32 	bl	801b9a0 <iprintf>
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001d3e:	4a50      	ldr	r2, [pc, #320]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001d40:	f240 415e 	movw	r1, #1118	; 0x45e
 8001d44:	484f      	ldr	r0, [pc, #316]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001d46:	f019 f947 	bl	801afd8 <__assert_func>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 8001d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00a fe95 	bl	800ca84 <arm_rfft_fast_init_f32>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (status != ARM_MATH_SUCCESS) {
 8001d60:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <_ZN2ei5numpy4rfftEPKfjPfjj+0x13e>
                return status;
 8001d68:	f997 404f 	ldrsb.w	r4, [r7, #79]	; 0x4f
 8001d6c:	e076      	b.n	8001e5c <_ZN2ei5numpy4rfftEPKfjPfjj+0x22c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001d6e:	f107 0014 	add.w	r0, r7, #20
 8001d72:	2300      	movs	r3, #0
 8001d74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d76:	2101      	movs	r1, #1
 8001d78:	f7ff f9fc 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <_ZN2ei5numpy4rfftEPKfjPfjj+0x16a>
 8001d82:	4a41      	ldr	r2, [pc, #260]	; (8001e88 <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001d84:	4941      	ldr	r1, [pc, #260]	; (8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001d86:	483c      	ldr	r0, [pc, #240]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001d88:	f019 fe0a 	bl	801b9a0 <iprintf>
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001d90:	f240 4169 	movw	r1, #1129	; 0x469
 8001d94:	483b      	ldr	r0, [pc, #236]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001d96:	f019 f91f 	bl	801afd8 <__assert_func>
            if (!fft_output.buffer) {
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x188>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001da0:	4a39      	ldr	r2, [pc, #228]	; (8001e88 <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001da2:	493a      	ldr	r1, [pc, #232]	; (8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001da4:	4834      	ldr	r0, [pc, #208]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001da6:	f019 fdfb 	bl	801b9a0 <iprintf>
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001dac:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001dae:	f240 416b 	movw	r1, #1131	; 0x46b
 8001db2:	4834      	ldr	r0, [pc, #208]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001db4:	f019 f910 	bl	801afd8 <__assert_func>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001db8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f00a fcff 	bl	800c7c4 <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	440b      	add	r3, r1
 8001dde:	6852      	ldr	r2, [r2, #4]
 8001de0:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001de6:	2301      	movs	r3, #1
 8001de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dec:	3b01      	subs	r3, #1
 8001dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d22b      	bcs.n	8001e4c <_ZN2ei5numpy4rfftEPKfjPfjj+0x21c>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f107 0210 	add.w	r2, r7, #16
 8001e00:	2102      	movs	r1, #2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f008 f8b2 	bl	8009f6c <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fbbc 	bl	8000588 <__aeabi_f2d>
 8001e10:	4604      	mov	r4, r0
 8001e12:	460d      	mov	r5, r1
 8001e14:	2002      	movs	r0, #2
 8001e16:	f003 fc02 	bl	800561e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e1a:	ec53 2b10 	vmov	r2, r3, d0
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f7fe fc09 	bl	8000638 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	18d4      	adds	r4, r2, r3
 8001e36:	f7fe fef7 	bl	8000c28 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6023      	str	r3, [r4, #0]

                fft_output_buffer_ix += 2;
 8001e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e40:	3302      	adds	r3, #2
 8001e42:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e46:	3301      	adds	r3, #1
 8001e48:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e4a:	e7ce      	b.n	8001dea <_ZN2ei5numpy4rfftEPKfjPfjj+0x1ba>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f9bb 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 8001e56:	e000      	b.n	8001e5a <_ZN2ei5numpy4rfftEPKfjPfjj+0x22a>
            }
 8001e58:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001e5a:	2400      	movs	r4, #0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001e5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f9b3 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 8001e66:	4623      	mov	r3, r4
    }
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3760      	adds	r7, #96	; 0x60
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e70:	0801cbf8 	.word	0x0801cbf8
 8001e74:	fffffc11 	.word	0xfffffc11
 8001e78:	0801c7b4 	.word	0x0801c7b4
 8001e7c:	0801c7c4 	.word	0x0801c7c4
 8001e80:	0801cc14 	.word	0x0801cc14
 8001e84:	0801c7fc 	.word	0x0801c7fc
 8001e88:	0801c7a0 	.word	0x0801c7a0
 8001e8c:	fffffc16 	.word	0xfffffc16
 8001e90:	0801c918 	.word	0x0801c918

08001e94 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b099      	sub	sp, #100	; 0x64
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d00b      	beq.n	8001eca <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x36>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001eb2:	4a8d      	ldr	r2, [pc, #564]	; (80020e8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x254>)
 8001eb4:	498d      	ldr	r1, [pc, #564]	; (80020ec <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x258>)
 8001eb6:	488e      	ldr	r0, [pc, #568]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8001eb8:	f019 fd72 	bl	801b9a0 <iprintf>
 8001ebc:	4b8d      	ldr	r3, [pc, #564]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8001ebe:	4a8e      	ldr	r2, [pc, #568]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8001ec0:	f240 4193 	movw	r1, #1171	; 0x493
 8001ec4:	488d      	ldr	r0, [pc, #564]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8001ec6:	f019 f887 	bl	801afd8 <__assert_func>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d901      	bls.n	8001ed6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x42>
            src_size = n_fft;
 8001ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed4:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d101      	bne.n	8001ee6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x52>
            fft_input_buffer = (float*)src;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001ee6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001eee:	2101      	movs	r1, #1
 8001ef0:	f7ff f940 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10b      	bne.n	8001f12 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x7e>
 8001efa:	4a81      	ldr	r2, [pc, #516]	; (8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8001efc:	4981      	ldr	r1, [pc, #516]	; (8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8001efe:	487c      	ldr	r0, [pc, #496]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8001f00:	f019 fd4e 	bl	801b9a0 <iprintf>
 8001f04:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8001f06:	4a7c      	ldr	r2, [pc, #496]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8001f08:	f240 41a1 	movw	r1, #1185	; 0x4a1
 8001f0c:	487b      	ldr	r0, [pc, #492]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8001f0e:	f019 f863 	bl	801afd8 <__assert_func>
        if (!fft_input.buffer) {
 8001f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x9c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f18:	4a79      	ldr	r2, [pc, #484]	; (8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8001f1a:	497a      	ldr	r1, [pc, #488]	; (8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8001f1c:	4874      	ldr	r0, [pc, #464]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8001f1e:	f019 fd3f 	bl	801b9a0 <iprintf>
 8001f22:	4b74      	ldr	r3, [pc, #464]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8001f24:	4a74      	ldr	r2, [pc, #464]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8001f26:	f240 41a3 	movw	r1, #1187	; 0x4a3
 8001f2a:	4874      	ldr	r0, [pc, #464]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8001f2c:	f019 f854 	bl	801afd8 <__assert_func>
        }

        if (!fft_input_buffer) {
 8001f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d112      	bne.n	8001f5c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xc8>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001f36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	f019 f956 	bl	801b1f0 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	18d0      	adds	r0, r2, r3
 8001f4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	f019 f972 	bl	801b240 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d030      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d02d      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d02a      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f74:	d026      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7c:	d022      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f84:	d01e      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f8c:	d01a      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f94:	d016      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	f000 fa55 	bl	800244c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8001fa2:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8001fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8091 	beq.w	80020ce <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23a>
                EIDSP_ERR(ret);
 8001fac:	4a56      	ldr	r2, [pc, #344]	; (8002108 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x274>)
 8001fae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fb0:	484f      	ldr	r0, [pc, #316]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8001fb2:	f019 fcf5 	bl	801b9a0 <iprintf>
 8001fb6:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8001fb8:	4a4f      	ldr	r2, [pc, #316]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8001fba:	f240 41b2 	movw	r1, #1202	; 0x4b2
 8001fbe:	484f      	ldr	r0, [pc, #316]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8001fc0:	f019 f80a 	bl	801afd8 <__assert_func>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 8001fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	f107 0320 	add.w	r3, r7, #32
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f00a fd58 	bl	800ca84 <arm_rfft_fast_init_f32>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if (status != ARM_MATH_SUCCESS) {
 8001fda:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x154>
                return status;
 8001fe2:	f997 404b 	ldrsb.w	r4, [r7, #75]	; 0x4b
 8001fe6:	e074      	b.n	80020d2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23e>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001fe8:	f107 0010 	add.w	r0, r7, #16
 8001fec:	2300      	movs	r3, #0
 8001fee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	f7ff f8bf 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x180>
 8001ffc:	4a40      	ldr	r2, [pc, #256]	; (8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8001ffe:	4941      	ldr	r1, [pc, #260]	; (8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8002000:	483b      	ldr	r0, [pc, #236]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002002:	f019 fccd 	bl	801b9a0 <iprintf>
 8002006:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8002008:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 800200a:	f240 41bd 	movw	r1, #1213	; 0x4bd
 800200e:	483b      	ldr	r0, [pc, #236]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8002010:	f018 ffe2 	bl	801afd8 <__assert_func>
            if (!fft_output.buffer) {
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x19e>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800201a:	4a39      	ldr	r2, [pc, #228]	; (8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 800201c:	4939      	ldr	r1, [pc, #228]	; (8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 800201e:	4834      	ldr	r0, [pc, #208]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002020:	f019 fcbe 	bl	801b9a0 <iprintf>
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8002026:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8002028:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800202c:	4833      	ldr	r0, [pc, #204]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 800202e:	f018 ffd3 	bl	801afd8 <__assert_func>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	f107 0020 	add.w	r0, r7, #32
 800203a:	2300      	movs	r3, #0
 800203c:	f00a fbc2 	bl	800c7c4 <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002054:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002058:	3b01      	subs	r3, #1
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	440b      	add	r3, r1
 8002060:	6852      	ldr	r2, [r2, #4]
 8002062:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800206a:	3b01      	subs	r3, #1
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8002078:	2302      	movs	r3, #2
 800207a:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800207c:	2301      	movs	r3, #1
 800207e:	657b      	str	r3, [r7, #84]	; 0x54
 8002080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002082:	3b01      	subs	r3, #1
 8002084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002086:	429a      	cmp	r2, r3
 8002088:	d21b      	bcs.n	80020c2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22e>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	440b      	add	r3, r1
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a2:	3301      	adds	r3, #1
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	441a      	add	r2, r3
 80020a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	440b      	add	r3, r1
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80020b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b6:	3302      	adds	r3, #2
 80020b8:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80020ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020bc:	3301      	adds	r3, #1
 80020be:	657b      	str	r3, [r7, #84]	; 0x54
 80020c0:	e7de      	b.n	8002080 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f880 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 80020cc:	e000      	b.n	80020d0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23c>
            }
 80020ce:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80020d0:	2400      	movs	r4, #0
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 80020d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f878 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 80020dc:	4623      	mov	r3, r4
    }
 80020de:	4618      	mov	r0, r3
 80020e0:	3764      	adds	r7, #100	; 0x64
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	bf00      	nop
 80020e8:	0801cbf8 	.word	0x0801cbf8
 80020ec:	fffffc11 	.word	0xfffffc11
 80020f0:	0801c7b4 	.word	0x0801c7b4
 80020f4:	0801c7c4 	.word	0x0801c7c4
 80020f8:	0801cc60 	.word	0x0801cc60
 80020fc:	0801c7fc 	.word	0x0801c7fc
 8002100:	0801c7a0 	.word	0x0801c7a0
 8002104:	fffffc16 	.word	0xfffffc16
 8002108:	0801c918 	.word	0x0801c918

0800210c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	ed87 0a03 	vstr	s0, [r7, #12]
 8002116:	edc7 0a02 	vstr	s1, [r7, #8]
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10b      	bne.n	8002142 <_ZN2ei5numpy8linspaceEffmPf+0x36>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <_ZN2ei5numpy8linspaceEffmPf+0xc0>)
 800212c:	4928      	ldr	r1, [pc, #160]	; (80021d0 <_ZN2ei5numpy8linspaceEffmPf+0xc4>)
 800212e:	4829      	ldr	r0, [pc, #164]	; (80021d4 <_ZN2ei5numpy8linspaceEffmPf+0xc8>)
 8002130:	f019 fc36 	bl	801b9a0 <iprintf>
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <_ZN2ei5numpy8linspaceEffmPf+0xcc>)
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <_ZN2ei5numpy8linspaceEffmPf+0xd0>)
 8002138:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800213c:	4828      	ldr	r0, [pc, #160]	; (80021e0 <_ZN2ei5numpy8linspaceEffmPf+0xd4>)
 800213e:	f018 ff4b 	bl	801afd8 <__assert_func>
        }

        if (number == 1) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d104      	bne.n	8002152 <_ZN2ei5numpy8linspaceEffmPf+0x46>
            out[0] = start;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e037      	b.n	80021c2 <_ZN2ei5numpy8linspaceEffmPf+0xb6>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8002152:	ed97 7a02 	vldr	s14, [r7, #8]
 8002156:	edd7 7a03 	vldr	s15, [r7, #12]
 800215a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3b01      	subs	r3, #1
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800216a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216e:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3b01      	subs	r3, #1
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	d216      	bcs.n	80021ae <_ZN2ei5numpy8linspaceEffmPf+0xa2>
            out[ix] = start + ix * step;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800218a:	edd7 7a04 	vldr	s15, [r7, #16]
 800218e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	edd7 7a03 	vldr	s15, [r7, #12]
 800219e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e7e3      	b.n	8002176 <_ZN2ei5numpy8linspaceEffmPf+0x6a>
        }

        // last entry always stop
        out[number - 1] = stop;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021b4:	3b01      	subs	r3, #1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80021c0:	2300      	movs	r3, #0
    }
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0801ccb8 	.word	0x0801ccb8
 80021d0:	fffffc10 	.word	0xfffffc10
 80021d4:	0801c7b4 	.word	0x0801c7b4
 80021d8:	0801c7c4 	.word	0x0801c7c4
 80021dc:	0801ccd0 	.word	0x0801ccd0
 80021e0:	0801c7fc 	.word	0x0801c7fc

080021e4 <_ZN2ei5numpy14int16_to_floatEPKsPfj>:
     * @param input
     * @param output
     * @param length
     * @returns 0 if OK
     */
    static int int16_to_float(const EIDSP_i16 *input, float *output, size_t length) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
#if EIDSP_USE_CMSIS_DSP
        arm_q15_to_float(input, output, length);
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f007 ff01 	bl	8009ffc <arm_q15_to_float>
#else
        for (size_t ix = 0; ix < length; ix++) {
            output[ix] = (float)(input[ix]) / 32768;
        }
#endif
        return EIDSP_OK;
 80021fa:	2300      	movs	r3, #0
    }
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZN2ei5numpy3logEPNS_9ei_matrixE>:
    /**
     * Calculate the natural log value of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log(matrix_t *matrix)
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b08d      	sub	sp, #52	; 0x34
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6892      	ldr	r2, [r2, #8]
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	429a      	cmp	r2, r3
 8002220:	d26e      	bcs.n	8002300 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xfc>
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6811      	ldr	r1, [r2, #0]
 8002232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	188c      	adds	r4, r1, r2
 8002238:	60fb      	str	r3, [r7, #12]
        g = (int32_t) * ((int32_t *)&a);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60bb      	str	r3, [r7, #8]
        e = (g - 0x3f2aaaab) & 0xff800000;
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x108>)
 8002246:	4413      	add	r3, r2
 8002248:	0ddb      	lsrs	r3, r3, #23
 800224a:	05db      	lsls	r3, r3, #23
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
        g = g - e;
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	60bb      	str	r3, [r7, #8]
        m = (float) * ((float *)&g);
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002268:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002310 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x10c>
 800226c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002270:	edc7 7a08 	vstr	s15, [r7, #32]
        f = m - 1.0f;
 8002274:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800227c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002280:	edc7 7a07 	vstr	s15, [r7, #28]
        s = f * f;
 8002284:	edd7 7a07 	vldr	s15, [r7, #28]
 8002288:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800228c:	edc7 7a06 	vstr	s15, [r7, #24]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8002290:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8002314 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x110>
 8002294:	edd7 0a07 	vldr	s1, [r7, #28]
 8002298:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002318 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x114>
 800229c:	f016 f91c 	bl	80184d8 <fmaf>
 80022a0:	ed87 0a05 	vstr	s0, [r7, #20]
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80022a4:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800231c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x118>
 80022a8:	edd7 0a07 	vldr	s1, [r7, #28]
 80022ac:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002320 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x11c>
 80022b0:	f016 f912 	bl	80184d8 <fmaf>
 80022b4:	ed87 0a04 	vstr	s0, [r7, #16]
        r = fmaf(r, s, t);
 80022b8:	ed97 1a04 	vldr	s2, [r7, #16]
 80022bc:	edd7 0a06 	vldr	s1, [r7, #24]
 80022c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80022c4:	f016 f908 	bl	80184d8 <fmaf>
 80022c8:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, f);
 80022cc:	ed97 1a07 	vldr	s2, [r7, #28]
 80022d0:	edd7 0a06 	vldr	s1, [r7, #24]
 80022d4:	ed97 0a05 	vldr	s0, [r7, #20]
 80022d8:	f016 f8fe 	bl	80184d8 <fmaf>
 80022dc:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 80022e0:	ed97 1a05 	vldr	s2, [r7, #20]
 80022e4:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002324 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x120>
 80022e8:	ed97 0a08 	vldr	s0, [r7, #32]
 80022ec:	f016 f8f4 	bl	80184d8 <fmaf>
 80022f0:	ed87 0a05 	vstr	s0, [r7, #20]
        return r;
 80022f4:	697b      	ldr	r3, [r7, #20]
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 80022f6:	6023      	str	r3, [r4, #0]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	3301      	adds	r3, #1
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fe:	e787      	b.n	8002210 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 8002300:	2300      	movs	r3, #0
    }
 8002302:	4618      	mov	r0, r3
 8002304:	3734      	adds	r7, #52	; 0x34
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}
 800230a:	bf00      	nop
 800230c:	c0d55555 	.word	0xc0d55555
 8002310:	34000000 	.word	0x34000000
 8002314:	be8ef46d 	.word	0xbe8ef46d
 8002318:	3e6c6078 	.word	0x3e6c6078
 800231c:	beff712d 	.word	0xbeff712d
 8002320:	3ea9e51a 	.word	0x3ea9e51a
 8002324:	3f317218 	.word	0x3f317218

08002328 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4618      	mov	r0, r3
 800233c:	f018 ff3a 	bl	801b1b4 <malloc>
 8002340:	4603      	mov	r3, r0
 8002342:	61bb      	str	r3, [r7, #24]
        if (!fft_output) {
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800234a:	4a3a      	ldr	r2, [pc, #232]	; (8002434 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x10c>)
 800234c:	493a      	ldr	r1, [pc, #232]	; (8002438 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x110>)
 800234e:	483b      	ldr	r0, [pc, #236]	; (800243c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x114>)
 8002350:	f019 fb26 	bl	801b9a0 <iprintf>
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x118>)
 8002356:	4a3b      	ldr	r2, [pc, #236]	; (8002444 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x11c>)
 8002358:	f240 516f 	movw	r1, #1391	; 0x56f
 800235c:	483a      	ldr	r0, [pc, #232]	; (8002448 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x120>)
 800235e:	f018 fe3b 	bl	801afd8 <__assert_func>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	f00b fe4a 	bl	800e008 <kiss_fftr_alloc>
 8002374:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10e      	bne.n	800239a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x72>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 800237c:	69b8      	ldr	r0, [r7, #24]
 800237e:	f018 ff21 	bl	801b1c4 <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002382:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x10c>)
 8002384:	492c      	ldr	r1, [pc, #176]	; (8002438 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x110>)
 8002386:	482d      	ldr	r0, [pc, #180]	; (800243c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x114>)
 8002388:	f019 fb0a 	bl	801b9a0 <iprintf>
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x118>)
 800238e:	4a2d      	ldr	r2, [pc, #180]	; (8002444 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x11c>)
 8002390:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8002394:	482c      	ldr	r0, [pc, #176]	; (8002448 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x120>)
 8002396:	f018 fe1f 	bl	801afd8 <__assert_func>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f00b ff08 	bl	800e1b4 <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d235      	bcs.n	800241c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xf4>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4413      	add	r3, r2
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	2002      	movs	r0, #2
 80023be:	eeb0 0a67 	vmov.f32	s0, s15
 80023c2:	f003 f944 	bl	800564e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023c6:	ec55 4b10 	vmov	r4, r5, d0
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d6:	2002      	movs	r0, #2
 80023d8:	eeb0 0a67 	vmov.f32	s0, s15
 80023dc:	f003 f937 	bl	800564e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023e0:	ec53 2b10 	vmov	r2, r3, d0
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fd ff70 	bl	80002cc <__adddf3>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	ec43 2b17 	vmov	d7, r2, r3
 80023f4:	eeb0 0a47 	vmov.f32	s0, s14
 80023f8:	eef0 0a67 	vmov.f32	s1, s15
 80023fc:	f016 f9a6 	bl	801874c <sqrt>
 8002400:	ec51 0b10 	vmov	r0, r1, d0
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	18d4      	adds	r4, r2, r3
 800240c:	f7fe fc0c 	bl	8000c28 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e7c5      	b.n	80023a8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x80>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800241c:	6978      	ldr	r0, [r7, #20]
 800241e:	f018 fed1 	bl	801b1c4 <free>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002422:	69b8      	ldr	r0, [r7, #24]
 8002424:	f018 fece 	bl	801b1c4 <free>

        return EIDSP_OK;
 8002428:	2300      	movs	r3, #0
    }
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bdb0      	pop	{r4, r5, r7, pc}
 8002432:	bf00      	nop
 8002434:	0801c7a0 	.word	0x0801c7a0
 8002438:	fffffc16 	.word	0xfffffc16
 800243c:	0801c7b4 	.word	0x0801c7b4
 8002440:	0801c7c4 	.word	0x0801c7c4
 8002444:	0801cd10 	.word	0x0801cd10
 8002448:	0801c7fc 	.word	0x0801c7fc

0800244c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	f00b fdce 	bl	800e008 <kiss_fftr_alloc>
 800246c:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x40>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002474:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x5c>)
 8002476:	490d      	ldr	r1, [pc, #52]	; (80024ac <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x60>)
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x64>)
 800247a:	f019 fa91 	bl	801b9a0 <iprintf>
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x68>)
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x6c>)
 8002482:	f240 5192 	movw	r1, #1426	; 0x592
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x70>)
 8002488:	f018 fda6 	bl	801afd8 <__assert_func>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	68f9      	ldr	r1, [r7, #12]
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f00b fe8f 	bl	800e1b4 <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f018 fe94 	bl	801b1c4 <free>

        return EIDSP_OK;
 800249c:	2300      	movs	r3, #0
    }
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	0801c7a0 	.word	0x0801c7a0
 80024ac:	fffffc16 	.word	0xfffffc16
 80024b0:	0801c7b4 	.word	0x0801c7b4
 80024b4:	0801c7c4 	.word	0x0801c7c4
 80024b8:	0801cd54 	.word	0x0801cd54
 80024bc:	0801c7fc 	.word	0x0801c7fc

080024c0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 80024c0:	b480      	push	{r7}
 80024c2:	b08b      	sub	sp, #44	; 0x2c
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d804      	bhi.n	80024ec <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
            return;
 80024ea:	e0e2      	b.n	80026b2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d02f      	beq.n	8002558 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	61ba      	str	r2, [r7, #24]
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ed97 7a08 	vldr	s14, [r7, #32]
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1d1a      	adds	r2, r3, #4
 8002512:	61ba      	str	r2, [r7, #24]
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	ed97 7a08 	vldr	s14, [r7, #32]
 800251c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002520:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1d1a      	adds	r2, r3, #4
 8002528:	61ba      	str	r2, [r7, #24]
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002536:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	61ba      	str	r2, [r7, #24]
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ed97 7a08 	vldr	s14, [r7, #32]
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3b01      	subs	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002556:	e7cc      	b.n	80024f2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00e      	beq.n	8002584 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1d1a      	adds	r2, r3, #4
 800256a:	61ba      	str	r2, [r7, #24]
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ed97 7a08 	vldr	s14, [r7, #32]
 8002574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002578:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3b01      	subs	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002582:	e7ed      	b.n	8002560 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002596:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d057      	beq.n	800265a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	1d1a      	adds	r2, r3, #4
 80025ae:	61ba      	str	r2, [r7, #24]
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	61ba      	str	r2, [r7, #24]
 80025da:	ed93 7a00 	vldr	s14, [r3]
 80025de:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e6:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80025ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80025f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fa:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1d1a      	adds	r2, r3, #4
 8002602:	61ba      	str	r2, [r7, #24]
 8002604:	ed93 7a00 	vldr	s14, [r3]
 8002608:	edd7 7a05 	vldr	s15, [r7, #20]
 800260c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002610:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002614:	edd7 7a04 	vldr	s15, [r7, #16]
 8002618:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800261c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002624:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1d1a      	adds	r2, r3, #4
 800262c:	61ba      	str	r2, [r7, #24]
 800262e:	ed93 7a00 	vldr	s14, [r3]
 8002632:	edd7 7a05 	vldr	s15, [r7, #20]
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800263e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002642:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002646:	ed97 7a07 	vldr	s14, [r7, #28]
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264e:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	3b01      	subs	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002658:	e7a4      	b.n	80025a4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1d1a      	adds	r2, r3, #4
 800266c:	61ba      	str	r2, [r7, #24]
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	edd7 7a05 	vldr	s15, [r7, #20]
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800267e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002682:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002686:	ed97 7a07 	vldr	s14, [r7, #28]
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	3b01      	subs	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002698:	e7e3      	b.n	8002662 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80026a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	edc3 7a00 	vstr	s15, [r3]
    }
 80026b2:	372c      	adds	r7, #44	; 0x2c
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
     * @param      input_matrix   The input matrix
     * @param      output_matrix  The output matrix
     *
     * @return     EIDSP error
     */
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
    {
        arm_matrix_instance_f32 arm_in_matrix, arm_transposed_matrix;

        if (input_matrix->cols != output_matrix->rows) {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d00b      	beq.n	80026ea <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80026d2:	4a54      	ldr	r2, [pc, #336]	; (8002824 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x168>)
 80026d4:	4954      	ldr	r1, [pc, #336]	; (8002828 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x16c>)
 80026d6:	4855      	ldr	r0, [pc, #340]	; (800282c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 80026d8:	f019 f962 	bl	801b9a0 <iprintf>
 80026dc:	4b54      	ldr	r3, [pc, #336]	; (8002830 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 80026de:	4a55      	ldr	r2, [pc, #340]	; (8002834 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 80026e0:	f240 51f9 	movw	r1, #1529	; 0x5f9
 80026e4:	4854      	ldr	r0, [pc, #336]	; (8002838 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 80026e6:	f018 fc77 	bl	801afd8 <__assert_func>
        }

        if (output_matrix->cols != 1) {
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d00b      	beq.n	800270a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80026f2:	4a4c      	ldr	r2, [pc, #304]	; (8002824 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x168>)
 80026f4:	494c      	ldr	r1, [pc, #304]	; (8002828 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x16c>)
 80026f6:	484d      	ldr	r0, [pc, #308]	; (800282c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 80026f8:	f019 f952 	bl	801b9a0 <iprintf>
 80026fc:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 80026fe:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 8002700:	f240 51fd 	movw	r1, #1533	; 0x5fd
 8002704:	484c      	ldr	r0, [pc, #304]	; (8002838 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002706:	f018 fc67 	bl	801afd8 <__assert_func>
        }

        /* Copy input matrix to arm matrix */
        arm_in_matrix.numRows = input_matrix->rows;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b29b      	uxth	r3, r3
 8002710:	833b      	strh	r3, [r7, #24]
        arm_in_matrix.numCols = input_matrix->cols;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	b29b      	uxth	r3, r3
 8002718:	837b      	strh	r3, [r7, #26]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61fb      	str	r3, [r7, #28]
        /* Create transposed matrix */
        arm_transposed_matrix.numRows = input_matrix->cols;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	b29b      	uxth	r3, r3
 8002726:	823b      	strh	r3, [r7, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	b29b      	uxth	r3, r3
 800272e:	827b      	strh	r3, [r7, #18]
        arm_transposed_matrix.pData = (float *)calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6852      	ldr	r2, [r2, #4]
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f018 fc6d 	bl	801b020 <calloc>
 8002746:	4603      	mov	r3, r0
 8002748:	617b      	str	r3, [r7, #20]

        if (arm_transposed_matrix.pData == NULL) {
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xac>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002750:	4a3a      	ldr	r2, [pc, #232]	; (800283c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x180>)
 8002752:	493b      	ldr	r1, [pc, #236]	; (8002840 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x184>)
 8002754:	4835      	ldr	r0, [pc, #212]	; (800282c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 8002756:	f019 f923 	bl	801b9a0 <iprintf>
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 800275c:	4a35      	ldr	r2, [pc, #212]	; (8002834 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 800275e:	f240 610a 	movw	r1, #1546	; 0x60a
 8002762:	4835      	ldr	r0, [pc, #212]	; (8002838 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002764:	f018 fc38 	bl	801afd8 <__assert_func>
        }

        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 8002768:	f107 0210 	add.w	r2, r7, #16
 800276c:	f107 0318 	add.w	r3, r7, #24
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f007 fb8a 	bl	8009e8c <arm_mat_trans_f32>
 8002778:	4603      	mov	r3, r0
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ret != EIDSP_OK) {
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xde>
            EIDSP_ERR(ret);
 8002782:	4a30      	ldr	r2, [pc, #192]	; (8002844 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x188>)
 8002784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002786:	4829      	ldr	r0, [pc, #164]	; (800282c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 8002788:	f019 f90a 	bl	801b9a0 <iprintf>
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 800278e:	4a29      	ldr	r2, [pc, #164]	; (8002834 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 8002790:	f240 610f 	movw	r1, #1551	; 0x60f
 8002794:	4828      	ldr	r0, [pc, #160]	; (8002838 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002796:	f018 fc1f 	bl	801afd8 <__assert_func>
        }

        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279e:	8a3b      	ldrh	r3, [r7, #16]
 80027a0:	461a      	mov	r2, r3
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d234      	bcs.n	8002812 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x156>
            float std;
            float var;

            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	8a7b      	ldrh	r3, [r7, #18]
 80027ac:	4619      	mov	r1, r3
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	fb03 f301 	mul.w	r3, r3, r1
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
                               arm_transposed_matrix.numCols, &var);
 80027b8:	8a7a      	ldrh	r2, [r7, #18]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 80027ba:	4611      	mov	r1, r2
 80027bc:	f107 0208 	add.w	r2, r7, #8
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe7d 	bl	80024c0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80027d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	db09      	blt.n	80027f2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x136>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80027de:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80027e2:	f016 f825 	bl	8018830 <sqrtf>
 80027e6:	eef0 7a40 	vmov.f32	s15, s0
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80027f0:	e004      	b.n	80027fc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x140>
    }
    else
    {
      *pOut = 0.0f;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80027fa:	bf00      	nop

            output_matrix->buffer[row] = std;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	3301      	adds	r3, #1
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002810:	e7c5      	b.n	800279e <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xe2>
        }

        free(arm_transposed_matrix.pData);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4618      	mov	r0, r3
 8002816:	f018 fcd5 	bl	801b1c4 <free>

        return EIDSP_OK;
 800281a:	2300      	movs	r3, #0
    }
 800281c:	4618      	mov	r0, r3
 800281e:	3730      	adds	r7, #48	; 0x30
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	0801c868 	.word	0x0801c868
 8002828:	fffffc14 	.word	0xfffffc14
 800282c:	0801c7b4 	.word	0x0801c7b4
 8002830:	0801c7c4 	.word	0x0801c7c4
 8002834:	0801cda4 	.word	0x0801cda4
 8002838:	0801c7fc 	.word	0x0801c7fc
 800283c:	0801c7a0 	.word	0x0801c7a0
 8002840:	fffffc16 	.word	0xfffffc16
 8002844:	0801c918 	.word	0x0801c918

08002848 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     * Converting from frequency to Mel scale
     *
     * @param f The frequency values(or a single frequency) in Hz.
     * @returns The mel scale values(or a single mel).
     */
    static float frequency_to_mel(float f) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	ed87 0a01 	vstr	s0, [r7, #4]
        return 1127.0 * numpy::log(1 + f / 700.0f);
 8002852:	ed97 7a01 	vldr	s14, [r7, #4]
 8002856:	eddf 6a39 	vldr	s13, [pc, #228]	; 800293c <_ZN2ei8speechpy9functions16frequency_to_melEf+0xf4>
 800285a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800285e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002866:	edc7 7a04 	vstr	s15, [r7, #16]
        g = (int32_t) * ((int32_t *)&a);
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]
        e = (g - 0x3f2aaaab) & 0xff800000;
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4b32      	ldr	r3, [pc, #200]	; (8002940 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xf8>)
 8002876:	4413      	add	r3, r2
 8002878:	0ddb      	lsrs	r3, r3, #23
 800287a:	05db      	lsls	r3, r3, #23
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
        g = g - e;
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	60fb      	str	r3, [r7, #12]
        m = (float) * ((float *)&g);
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002898:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002944 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xfc>
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        f = m - 1.0f;
 80028a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028b0:	edc7 7a08 	vstr	s15, [r7, #32]
        s = f * f;
 80028b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80028b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028bc:	edc7 7a07 	vstr	s15, [r7, #28]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 80028c0:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8002948 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x100>
 80028c4:	edd7 0a08 	vldr	s1, [r7, #32]
 80028c8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800294c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x104>
 80028cc:	f015 fe04 	bl	80184d8 <fmaf>
 80028d0:	ed87 0a06 	vstr	s0, [r7, #24]
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80028d4:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8002950 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x108>
 80028d8:	edd7 0a08 	vldr	s1, [r7, #32]
 80028dc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002954 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x10c>
 80028e0:	f015 fdfa 	bl	80184d8 <fmaf>
 80028e4:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, t);
 80028e8:	ed97 1a05 	vldr	s2, [r7, #20]
 80028ec:	edd7 0a07 	vldr	s1, [r7, #28]
 80028f0:	ed97 0a06 	vldr	s0, [r7, #24]
 80028f4:	f015 fdf0 	bl	80184d8 <fmaf>
 80028f8:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(r, s, f);
 80028fc:	ed97 1a08 	vldr	s2, [r7, #32]
 8002900:	edd7 0a07 	vldr	s1, [r7, #28]
 8002904:	ed97 0a06 	vldr	s0, [r7, #24]
 8002908:	f015 fde6 	bl	80184d8 <fmaf>
 800290c:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8002910:	ed97 1a06 	vldr	s2, [r7, #24]
 8002914:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002958 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x110>
 8002918:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800291c:	f015 fddc 	bl	80184d8 <fmaf>
 8002920:	ed87 0a06 	vstr	s0, [r7, #24]
        return r;
 8002924:	edd7 7a06 	vldr	s15, [r7, #24]
 8002928:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800295c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x114>
 800292c:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002930:	eeb0 0a67 	vmov.f32	s0, s15
 8002934:	3730      	adds	r7, #48	; 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	442f0000 	.word	0x442f0000
 8002940:	c0d55555 	.word	0xc0d55555
 8002944:	34000000 	.word	0x34000000
 8002948:	be8ef46d 	.word	0xbe8ef46d
 800294c:	3e6c6078 	.word	0x3e6c6078
 8002950:	beff712d 	.word	0xbeff712d
 8002954:	3ea9e51a 	.word	0x3ea9e51a
 8002958:	3f317218 	.word	0x3f317218
 800295c:	448ce000 	.word	0x448ce000

08002960 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	ed87 0a01 	vstr	s0, [r7, #4]
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 800296a:	edd7 7a01 	vldr	s15, [r7, #4]
 800296e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800299c <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x3c>
 8002972:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002976:	eeb0 0a47 	vmov.f32	s0, s14
 800297a:	f7fe fb73 	bl	8001064 <_ZSt3expf>
 800297e:	eef0 7a40 	vmov.f32	s15, s0
 8002982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800298a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029a0 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x40>
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002992:	eeb0 0a67 	vmov.f32	s0, s15
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	448ce000 	.word	0x448ce000
 80029a0:	442f0000 	.word	0x442f0000

080029a4 <_ZN2ei8speechpy9functions13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size) {
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d215      	bcs.n	80029e6 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x42>
            if (input[ix] == 0) {
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	d106      	bne.n	80029de <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x3a>
                input[ix] = FLT_EPSILON;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	f04f 5250 	mov.w	r2, #872415232	; 0x34000000
 80029dc:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3301      	adds	r3, #1
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e7e5      	b.n	80029b2 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0xe>
            }
        }
    }
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>:
     * This function handle the issue with zero values if the are exposed
     * to become an argument for any log function.
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input) {
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
        zero_handling(input->buffer, input->rows * input->cols);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6892      	ldr	r2, [r2, #8]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7ff ffca 	bl	80029a4 <_ZN2ei8speechpy9functions13zero_handlingEPfj>
    }
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZN2ei8speechpy9functions8triangleEPfjiii>:
     * @param x_size Size of the linspace output
     * @param left
     * @param middle
     * @param right
     */
    static void triangle(float *x, size_t x_size, int left, int middle, int right) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
        EI_DSP_MATRIX(out, 1, x_size);
 8002a26:	f107 0014 	add.w	r0, r7, #20
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	2101      	movs	r1, #1
 8002a30:	f7fe fba0 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x38>
 8002a3a:	4a4e      	ldr	r2, [pc, #312]	; (8002b74 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x15c>)
 8002a3c:	494e      	ldr	r1, [pc, #312]	; (8002b78 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x160>)
 8002a3e:	484f      	ldr	r0, [pc, #316]	; (8002b7c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x164>)
 8002a40:	f018 ffae 	bl	801b9a0 <iprintf>
 8002a44:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x168>)
 8002a46:	4a4f      	ldr	r2, [pc, #316]	; (8002b84 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x16c>)
 8002a48:	215b      	movs	r1, #91	; 0x5b
 8002a4a:	484f      	ldr	r0, [pc, #316]	; (8002b88 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x170>)
 8002a4c:	f018 fac4 	bl	801afd8 <__assert_func>

        for (size_t ix = 0; ix < x_size; ix++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d27b      	bcs.n	8002b54 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x13c>
            if (x[ix] > left && x[ix] <= middle) {
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	ed93 7a00 	vldr	s14, [r3]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	dd2b      	ble.n	8002ad4 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xbc>
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d81b      	bhi.n	8002ad4 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xbc>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	ed93 7a00 	vldr	s14, [r3]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad0:	edc3 7a00 	vstr	s15, [r3]
            }

            if (x[ix] < right && middle <= x[ix]) {
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	ed93 7a00 	vldr	s14, [r3]
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	d52b      	bpl.n	8002b4c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x134>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4413      	add	r3, r2
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	d81b      	bhi.n	8002b4c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x134>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b48:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3301      	adds	r3, #1
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	e77f      	b.n	8002a54 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x3c>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 8002b54:	6979      	ldr	r1, [r7, #20]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f018 fb47 	bl	801b1f0 <memcpy>
        EI_DSP_MATRIX(out, 1, x_size);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fb30 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
    }
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	0801c7a0 	.word	0x0801c7a0
 8002b78:	fffffc16 	.word	0xfffffc16
 8002b7c:	0801c7b4 	.word	0x0801c7b4
 8002b80:	0801c7c4 	.word	0x0801c7c4
 8002b84:	0801d168 	.word	0x0801d168
 8002b88:	0801d1b8 	.word	0x0801d1b8

08002b8c <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
    signal_t *signal;
    std::vector<uint32_t> *frame_ixs;
    int frame_length;

    // start_ixs is owned by us
    ~ei_stack_frames_info() {
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
        if (frame_ixs) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x26>
            delete frame_ixs;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685c      	ldr	r4, [r3, #4]
 8002ba0:	2c00      	cmp	r4, #0
 8002ba2:	d006      	beq.n	8002bb2 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x26>
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f002 fda1 	bl	80056ec <_ZNSt6vectorImSaImEED1Ev>
 8002baa:	210c      	movs	r1, #12
 8002bac:	4620      	mov	r0, r4
 8002bae:	f015 f941 	bl	8017e34 <_ZdlPvj>
        }
    }
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>:
     * @param shift (int): The shift step.
     * @param cof (float): The preemphasising coefficient. 0 equals to no filtering.
     */
    class preemphasis {
public:
        preemphasis(ei_signal_t *signal, int shift = 1, float cof = 0.98f)
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	ed87 0a00 	vstr	s0, [r7]
            : _signal(signal), _shift(shift), _cof(cof)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	609a      	str	r2, [r3, #8]
        {
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	2101      	movs	r1, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f018 fa1b 	bl	801b020 <calloc>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	60da      	str	r2, [r3, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f018 fa11 	bl	801b020 <calloc>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	611a      	str	r2, [r3, #16]
            _next_offset_should_be = 0;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]

            if (shift < 0) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da06      	bge.n	8002c20 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x64>
                _shift = signal->total_length + shift;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
            }

            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8a>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8a>

            // we need to get the shift bytes from the end of the buffer...
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 8002c30:	68b8      	ldr	r0, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	1ad1      	subs	r1, r2, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f002 fd26 	bl	8005690 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002c44:	e000      	b.n	8002c48 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8c>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002c46:	bf00      	nop
        }
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
         * Get preemphasized data from the underlying audio buffer...
         * This retrieves data from the signal then preemphasizes it.
         * @param offset Offset in the audio signal
         * @param length Length of the audio signal
         */
        int get_data(size_t offset, size_t length, float *out_buffer) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
            if (!_prev_buffer || !_end_of_signal_buffer) {
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1e>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x34>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002c72:	4a5d      	ldr	r2, [pc, #372]	; (8002de8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x194>)
 8002c74:	495d      	ldr	r1, [pc, #372]	; (8002dec <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x198>)
 8002c76:	485e      	ldr	r0, [pc, #376]	; (8002df0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002c78:	f018 fe92 	bl	801b9a0 <iprintf>
 8002c7c:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8002c80:	214f      	movs	r1, #79	; 0x4f
 8002c82:	485e      	ldr	r0, [pc, #376]	; (8002dfc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8002c84:	f018 f9a8 	bl	801afd8 <__assert_func>
            }
            if (offset + length > _signal->total_length) {
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d90a      	bls.n	8002cae <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x5a>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 8002c98:	4a59      	ldr	r2, [pc, #356]	; (8002e00 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ac>)
 8002c9a:	495a      	ldr	r1, [pc, #360]	; (8002e04 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b0>)
 8002c9c:	4854      	ldr	r0, [pc, #336]	; (8002df0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002c9e:	f018 fe7f 	bl	801b9a0 <iprintf>
 8002ca2:	4b54      	ldr	r3, [pc, #336]	; (8002df4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8002ca4:	4a54      	ldr	r2, [pc, #336]	; (8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8002ca6:	2152      	movs	r1, #82	; 0x52
 8002ca8:	4854      	ldr	r0, [pc, #336]	; (8002dfc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8002caa:	f018 f995 	bl	801afd8 <__assert_func>
            }

            int ret;
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	db1d      	blt.n	8002cf6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa2>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1a99      	subs	r1, r3, r2
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f002 fcdc 	bl	8005690 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002cd8:	61b8      	str	r0, [r7, #24]
                if (ret != 0) {
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa2>
                    EIDSP_ERR(ret);
 8002ce0:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b4>)
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	4842      	ldr	r0, [pc, #264]	; (8002df0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002ce6:	f018 fe5b 	bl	801b9a0 <iprintf>
 8002cea:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8002cec:	4a42      	ldr	r2, [pc, #264]	; (8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8002cee:	2159      	movs	r1, #89	; 0x59
 8002cf0:	4842      	ldr	r0, [pc, #264]	; (8002dfc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8002cf2:	f018 f971 	bl	801afd8 <__assert_func>
                }
            }
            // else we'll use the end_of_signal_buffer; so no need to check

            ret = _signal->get_data(offset, length, out_buffer);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	f002 fcc5 	bl	8005690 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d06:	61b8      	str	r0, [r7, #24]
            if (ret != 0) {
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd0>
                EIDSP_ERR(ret);
 8002d0e:	4a3e      	ldr	r2, [pc, #248]	; (8002e08 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b4>)
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	4837      	ldr	r0, [pc, #220]	; (8002df0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002d14:	f018 fe44 	bl	801b9a0 <iprintf>
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8002d1a:	4a37      	ldr	r2, [pc, #220]	; (8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8002d1c:	2160      	movs	r1, #96	; 0x60
 8002d1e:	4837      	ldr	r0, [pc, #220]	; (8002dfc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8002d20:	f018 f95a 	bl	801afd8 <__assert_func>
            }

            // now we have the signal and we can preemphasize
            for (size_t ix = 0; ix < length; ix++) {
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d250      	bcs.n	8002dd2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x17e>
                float now = out_buffer[ix];
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]

                // under shift? read from end
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6852      	ldr	r2, [r2, #4]
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d218      	bcs.n	8002d7c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x128>
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	440b      	add	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d76:	edc3 7a00 	vstr	s15, [r3]
 8002d7a:	e012      	b.n	8002da2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x14e>
                }
                // otherwise read from history buffer
                else {
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	edc3 7a00 	vstr	s15, [r3]
                }

                // roll through and overwrite last element
                numpy::roll(_prev_buffer, _shift, -1);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68d8      	ldr	r0, [r3, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fe fa6a 	bl	8001288 <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < length; ix++) {
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e7aa      	b.n	8002d28 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd4>
            }

            _next_offset_should_be += length;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	441a      	add	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	615a      	str	r2, [r3, #20]

            return EIDSP_OK;
 8002dde:	2300      	movs	r3, #0
        }
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	0801c7a0 	.word	0x0801c7a0
 8002dec:	fffffc16 	.word	0xfffffc16
 8002df0:	0801c7b4 	.word	0x0801c7b4
 8002df4:	0801c7c4 	.word	0x0801c7c4
 8002df8:	0801d234 	.word	0x0801d234
 8002dfc:	0801d280 	.word	0x0801d280
 8002e00:	0801d2fc 	.word	0x0801d2fc
 8002e04:	fffffc0e 	.word	0xfffffc0e
 8002e08:	0801c918 	.word	0x0801c918

08002e0c <_ZN2ei8speechpy10processing11preemphasisD1Ev>:

        ~preemphasis() {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
            if (_prev_buffer) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x1a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f018 f9cf 	bl	801b1c4 <free>
            }
            if (_end_of_signal_buffer) {
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x2c>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f018 f9c6 	bl	801b1c4 <free>
            }
        }
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f002 fc89 	bl	8005762 <_ZNSaImED1Ev>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fc6c 	bl	8005742 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ffeb 	bl	8002e5a <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb>:
    static int stack_frames(stack_frames_info_t *info,
                            uint32_t sampling_frequency,
                            float frame_length,
                            float frame_stride,
                            bool zero_padding)
    {
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b08f      	sub	sp, #60	; 0x3c
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6178      	str	r0, [r7, #20]
 8002e98:	6139      	str	r1, [r7, #16]
 8002e9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71fb      	strb	r3, [r7, #7]
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00f      	beq.n	8002ece <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x3e>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fc35 	bl	8005722 <_ZNKSt8functionIFijjPfEEcvbEv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f083 0301 	eor.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x3e>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x42>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x44>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x5e>
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 8002ed8:	4a6b      	ldr	r2, [pc, #428]	; (8003088 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1f8>)
 8002eda:	496c      	ldr	r1, [pc, #432]	; (800308c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1fc>)
 8002edc:	486c      	ldr	r0, [pc, #432]	; (8003090 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x200>)
 8002ede:	f018 fd5f 	bl	801b9a0 <iprintf>
 8002ee2:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x204>)
 8002ee4:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x208>)
 8002ee6:	21c9      	movs	r1, #201	; 0xc9
 8002ee8:	486c      	ldr	r0, [pc, #432]	; (800309c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x20c>)
 8002eea:	f018 f875 	bl	801afd8 <__assert_func>
        }

        size_t length_signal = info->signal->total_length;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        int frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f08:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0c:	f7fe f8da 	bl	80010c4 <_ZSt5roundf>
 8002f10:	eef0 7a40 	vmov.f32	s15, s0
 8002f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f18:	ee17 3a90 	vmov	r3, s15
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
        frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	f7fe f8c6 	bl	80010c4 <_ZSt5roundf>
 8002f38:	ed87 0a02 	vstr	s0, [r7, #8]

        volatile int numframes;
        volatile int len_sig;

        if (zero_padding) {
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d02a      	beq.n	8002f98 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x108>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f58:	eeb0 0a66 	vmov.f32	s0, s13
 8002f5c:	f7fe f872 	bl	8001044 <_ZSt4ceilf>
 8002f60:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8002f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f68:	ee17 3a90 	vmov	r3, s15
 8002f6c:	61fb      	str	r3, [r7, #28]

            // Zero padding
            len_sig = static_cast<int>(static_cast<float>(numframes) * frame_stride) + frame_sample_length;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f84:	ee17 2a90 	vmov	r2, s15
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	4413      	add	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]

            info->signal->total_length = static_cast<size_t>(len_sig);
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]
 8002f96:	e02f      	b.n	8002ff8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x168>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002faa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fae:	eeb0 0a66 	vmov.f32	s0, s13
 8002fb2:	f7fe f867 	bl	8001084 <_ZSt5floorf>
 8002fb6:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8002fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fbe:	ee17 3a90 	vmov	r3, s15
 8002fc2:	61fb      	str	r3, [r7, #28]
            len_sig = static_cast<int>(
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
            len_sig = static_cast<int>(
 8002fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fea:	ee17 3a90 	vmov	r3, s15
 8002fee:	61bb      	str	r3, [r7, #24]

            info->signal->total_length = static_cast<size_t>(len_sig);
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]
        }

        // alloc the vector on the heap, will be owned by the info struct
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
 8002ff8:	200c      	movs	r0, #12
 8002ffa:	f014 ff2e 	bl	8017e5a <_Znwj>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461c      	mov	r4, r3
 8003002:	2300      	movs	r3, #0
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	2300      	movs	r3, #0
 800300c:	60a3      	str	r3, [r4, #8]
 800300e:	4620      	mov	r0, r4
 8003010:	f7ff ff30 	bl	8002e74 <_ZNSt6vectorImSaImEEC1Ev>
 8003014:	627c      	str	r4, [r7, #36]	; 0x24

        int frame_count = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34

        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 800301a:	2300      	movs	r3, #0
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	461a      	mov	r2, r3
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	4293      	cmp	r3, r2
 8003026:	bf34      	ite	cc
 8003028:	2301      	movcc	r3, #1
 800302a:	2300      	movcs	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01e      	beq.n	8003070 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1e0>
            if (++frame_count > numframes) break;
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	3301      	adds	r3, #1
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800303c:	429a      	cmp	r2, r3
 800303e:	bfcc      	ite	gt
 8003040:	2301      	movgt	r3, #1
 8003042:	2300      	movle	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d111      	bne.n	800306e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1de>

            frame_indices->push_back(ix);
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	f107 0320 	add.w	r3, r7, #32
 8003052:	4619      	mov	r1, r3
 8003054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003056:	f002 fba9 	bl	80057ac <_ZNSt6vectorImSaImEE9push_backEOm>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 800305a:	edd7 7a02 	vldr	s15, [r7, #8]
 800305e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003062:	ee17 2a90 	vmov	r2, s15
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	4413      	add	r3, r2
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
 800306c:	e7d7      	b.n	800301e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x18e>
            if (++frame_count > numframes) break;
 800306e:	bf00      	nop
        }

        info->frame_ixs = frame_indices;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	605a      	str	r2, [r3, #4]
        info->frame_length = frame_sample_length;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800307a:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 800307c:	2300      	movs	r3, #0
    }
 800307e:	4618      	mov	r0, r3
 8003080:	373c      	adds	r7, #60	; 0x3c
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	bf00      	nop
 8003088:	0801d310 	.word	0x0801d310
 800308c:	fffffc15 	.word	0xfffffc15
 8003090:	0801c7b4 	.word	0x0801c7b4
 8003094:	0801c7c4 	.word	0x0801c7c4
 8003098:	0801d32c 	.word	0x0801d32c
 800309c:	0801d280 	.word	0x0801d280

080030a0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>:
        size_t signal_size,
        uint32_t sampling_frequency,
        float frame_length,
        float frame_stride,
        bool zero_padding)
    {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6178      	str	r0, [r7, #20]
 80030a8:	6139      	str	r1, [r7, #16]
 80030aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80030ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	71fb      	strb	r3, [r7, #7]
        size_t length_signal = signal_size;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	623b      	str	r3, [r7, #32]
        int frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030cc:	eeb0 0a67 	vmov.f32	s0, s15
 80030d0:	f7fd fff8 	bl	80010c4 <_ZSt5roundf>
 80030d4:	eef0 7a40 	vmov.f32	s15, s0
 80030d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030dc:	ee17 3a90 	vmov	r3, s15
 80030e0:	61fb      	str	r3, [r7, #28]
        frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80030f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f4:	eeb0 0a67 	vmov.f32	s0, s15
 80030f8:	f7fd ffe4 	bl	80010c4 <_ZSt5roundf>
 80030fc:	ed87 0a02 	vstr	s0, [r7, #8]

        int numframes;

        if (zero_padding) {
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb+0x94>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003114:	edd7 7a02 	vldr	s15, [r7, #8]
 8003118:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800311c:	eeb0 0a66 	vmov.f32	s0, s13
 8003120:	f7fd ff90 	bl	8001044 <_ZSt4ceilf>
 8003124:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800312c:	ee17 3a90 	vmov	r3, s15
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e015      	b.n	8003160 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb+0xc0>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003142:	edd7 7a02 	vldr	s15, [r7, #8]
 8003146:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800314a:	eeb0 0a66 	vmov.f32	s0, s13
 800314e:	f7fd ff99 	bl	8001084 <_ZSt5floorf>
 8003152:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800315a:	ee17 3a90 	vmov	r3, s15
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
        }

        return numframes;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003162:	4618      	mov	r0, r3
 8003164:	3728      	adds	r7, #40	; 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>:
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(float *frame, size_t frame_size, float *out_buffer, size_t out_buffer_size, uint16_t fft_points)
    {
 800316c:	b5b0      	push	{r4, r5, r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800317a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	3301      	adds	r3, #1
 8003182:	461a      	mov	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x36>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800318a:	4a30      	ldr	r2, [pc, #192]	; (800324c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe0>)
 800318c:	4930      	ldr	r1, [pc, #192]	; (8003250 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe4>)
 800318e:	4831      	ldr	r0, [pc, #196]	; (8003254 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe8>)
 8003190:	f018 fc06 	bl	801b9a0 <iprintf>
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xec>)
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf0>)
 8003198:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800319c:	4830      	ldr	r0, [pc, #192]	; (8003260 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf4>)
 800319e:	f017 ff1b 	bl	801afd8 <__assert_func>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 80031a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7fe fd3f 	bl	8001c30 <_ZN2ei5numpy4rfftEPKfjPfjj>
 80031b2:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x52>
            return r;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	e042      	b.n	8003244 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xd8>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d23b      	bcs.n	8003242 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xd6>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80031ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d4:	ee17 0a90 	vmov	r0, s15
 80031d8:	f7fd f9d6 	bl	8000588 <__aeabi_f2d>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	f04f 0000 	mov.w	r0, #0
 80031e4:	491f      	ldr	r1, [pc, #124]	; (8003264 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf8>)
 80031e6:	f7fd fb51 	bl	800088c <__aeabi_ddiv>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4614      	mov	r4, r2
 80031f0:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	ed93 7a00 	vldr	s14, [r3]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	ee17 0a90 	vmov	r0, s15
 8003212:	f7fd f9b9 	bl	8000588 <__aeabi_f2d>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fd fa0b 	bl	8000638 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	18d4      	adds	r4, r2, r3
 8003232:	f7fd fcf9 	bl	8000c28 <__aeabi_d2f>
 8003236:	4603      	mov	r3, r0
 8003238:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e7bf      	b.n	80031c2 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x56>
        }

        return EIDSP_OK;
 8003242:	2300      	movs	r3, #0
    }
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bdb0      	pop	{r4, r5, r7, pc}
 800324c:	0801c868 	.word	0x0801c868
 8003250:	fffffc14 	.word	0xfffffc14
 8003254:	0801c7b4 	.word	0x0801c7b4
 8003258:	0801c7c4 	.word	0x0801c7c4
 800325c:	0801d39c 	.word	0x0801d39c
 8003260:	0801d280 	.word	0x0801d280
 8003264:	3ff00000 	.word	0x3ff00000

08003268 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb>:
     * @param variance_normalization If the variance normilization should
     *   be performed or not.
     * @returns 0 if OK
     */
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false)
    {
 8003268:	b5b0      	push	{r4, r5, r7, lr}
 800326a:	b098      	sub	sp, #96	; 0x60
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
        uint16_t pad_size = (win_size - 1) / 2;
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	3b01      	subs	r3, #1
 800327c:	0fda      	lsrs	r2, r3, #31
 800327e:	4413      	add	r3, r2
 8003280:	105b      	asrs	r3, r3, #1
 8003282:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        int ret;
        float *features_buffer_ptr;

        // mean & variance normalization
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800328e:	0052      	lsls	r2, r2, #1
 8003290:	1899      	adds	r1, r3, r2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800329a:	2300      	movs	r3, #0
 800329c:	f7fd ff6a 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10b      	bne.n	80032be <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x56>
 80032a6:	4aa7      	ldr	r2, [pc, #668]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 80032a8:	49a7      	ldr	r1, [pc, #668]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 80032aa:	48a8      	ldr	r0, [pc, #672]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80032ac:	f018 fb78 	bl	801b9a0 <iprintf>
 80032b0:	4ba7      	ldr	r3, [pc, #668]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 80032b2:	4aa8      	ldr	r2, [pc, #672]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 80032b4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80032b8:	48a7      	ldr	r0, [pc, #668]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 80032ba:	f017 fe8d 	bl	801afd8 <__assert_func>
        if (!vec_pad.buffer) {
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x74>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80032c4:	4a9f      	ldr	r2, [pc, #636]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 80032c6:	49a0      	ldr	r1, [pc, #640]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 80032c8:	48a0      	ldr	r0, [pc, #640]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80032ca:	f018 fb69 	bl	801b9a0 <iprintf>
 80032ce:	4ba0      	ldr	r3, [pc, #640]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 80032d0:	4aa0      	ldr	r2, [pc, #640]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 80032d2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80032d6:	48a0      	ldr	r0, [pc, #640]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 80032d8:	f017 fe7e 	bl	801afd8 <__assert_func>
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 80032dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80032e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fe fb05 	bl	80018f8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 80032ee:	64b8      	str	r0, [r7, #72]	; 0x48
        if (ret != EIDSP_OK) {
 80032f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0xa6>
            EIDSP_ERR(ret);
 80032f6:	4a99      	ldr	r2, [pc, #612]	; (800355c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f4>)
 80032f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80032fa:	4894      	ldr	r0, [pc, #592]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80032fc:	f018 fb50 	bl	801b9a0 <iprintf>
 8003300:	4b93      	ldr	r3, [pc, #588]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 8003302:	4a94      	ldr	r2, [pc, #592]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 8003304:	f240 1155 	movw	r1, #341	; 0x155
 8003308:	4893      	ldr	r0, [pc, #588]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 800330a:	f017 fe65 	bl	801afd8 <__assert_func>
        }

        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 800330e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003310:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003314:	2300      	movs	r3, #0
 8003316:	2201      	movs	r2, #1
 8003318:	f7fd ff2c 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0xd2>
 8003322:	4a88      	ldr	r2, [pc, #544]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 8003324:	4988      	ldr	r1, [pc, #544]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 8003326:	4889      	ldr	r0, [pc, #548]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 8003328:	f018 fb3a 	bl	801b9a0 <iprintf>
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 800332e:	4a89      	ldr	r2, [pc, #548]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 8003330:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003334:	4888      	ldr	r0, [pc, #544]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 8003336:	f017 fe4f 	bl	801afd8 <__assert_func>
        if (!mean_matrix.buffer) {
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0xf0>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003340:	4a80      	ldr	r2, [pc, #512]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 8003342:	4981      	ldr	r1, [pc, #516]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 8003344:	4881      	ldr	r0, [pc, #516]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 8003346:	f018 fb2b 	bl	801b9a0 <iprintf>
 800334a:	4b81      	ldr	r3, [pc, #516]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 800334c:	4a81      	ldr	r2, [pc, #516]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 800334e:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003352:	4881      	ldr	r0, [pc, #516]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 8003354:	f017 fe40 	bl	801afd8 <__assert_func>
        }

        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 8003358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800335a:	f107 0018 	add.w	r0, r7, #24
 800335e:	2300      	movs	r3, #0
 8003360:	2201      	movs	r2, #1
 8003362:	f7fd ff07 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10b      	bne.n	8003384 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x11c>
 800336c:	4a75      	ldr	r2, [pc, #468]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 800336e:	4976      	ldr	r1, [pc, #472]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 8003370:	4876      	ldr	r0, [pc, #472]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 8003372:	f018 fb15 	bl	801b9a0 <iprintf>
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 8003378:	4a76      	ldr	r2, [pc, #472]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 800337a:	f240 115d 	movw	r1, #349	; 0x15d
 800337e:	4876      	ldr	r0, [pc, #472]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 8003380:	f017 fe2a 	bl	801afd8 <__assert_func>
        if (!window_variance.buffer) {
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x126>
            return EIDSP_OUT_OF_MEM;
 800338a:	4c6f      	ldr	r4, [pc, #444]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 800338c:	e0c5      	b.n	800351a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2b2>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 800338e:	2300      	movs	r3, #0
 8003390:	65bb      	str	r3, [r7, #88]	; 0x58
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003398:	429a      	cmp	r2, r3
 800339a:	f080 80bd 	bcs.w	8003518 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2b0>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 800339e:	887c      	ldrh	r4, [r7, #2]
 80033a0:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80033a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	f107 0008 	add.w	r0, r7, #8
 80033b4:	462a      	mov	r2, r5
 80033b6:	4621      	mov	r1, r4
 80033b8:	f7fd fedc 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x172>
 80033c2:	4a60      	ldr	r2, [pc, #384]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 80033c4:	4960      	ldr	r1, [pc, #384]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 80033c6:	4861      	ldr	r0, [pc, #388]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80033c8:	f018 faea 	bl	801b9a0 <iprintf>
 80033cc:	4b60      	ldr	r3, [pc, #384]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 80033ce:	4a61      	ldr	r2, [pc, #388]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 80033d0:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80033d4:	4860      	ldr	r0, [pc, #384]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 80033d6:	f017 fdff 	bl	801afd8 <__assert_func>
            if (!window.buffer) {
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x190>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 80033e2:	4959      	ldr	r1, [pc, #356]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 80033e4:	4859      	ldr	r0, [pc, #356]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80033e6:	f018 fadb 	bl	801b9a0 <iprintf>
 80033ea:	4b59      	ldr	r3, [pc, #356]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 80033ec:	4a59      	ldr	r2, [pc, #356]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 80033ee:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80033f2:	4859      	ldr	r0, [pc, #356]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 80033f4:	f017 fdf0 	bl	801afd8 <__assert_func>
            }

            ret = numpy::mean_axis0(&window, &mean_matrix);
 80033f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fb84 	bl	8001b10 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>
 8003408:	64b8      	str	r0, [r7, #72]	; 0x48
            if (ret != EIDSP_OK) {
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x1c0>
                EIDSP_ERR(ret);
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f4>)
 8003412:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003414:	484d      	ldr	r0, [pc, #308]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 8003416:	f018 fac3 	bl	801b9a0 <iprintf>
 800341a:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 800341c:	4a4d      	ldr	r2, [pc, #308]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 800341e:	f240 116b 	movw	r1, #363	; 0x16b
 8003422:	484d      	ldr	r0, [pc, #308]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 8003424:	f017 fdd8 	bl	801afd8 <__assert_func>
            }

            if (variance_normalization == true) {
 8003428:	787b      	ldrb	r3, [r7, #1]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d147      	bne.n	80034be <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x256>
                ret = numpy::std_axis0(&window, &window_variance);
 800342e:	f107 0218 	add.w	r2, r7, #24
 8003432:	f107 0308 	add.w	r3, r7, #8
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fbeb 	bl	8001c14 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>
 800343e:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != EIDSP_OK) {
 8003440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x1f6>
                    EIDSP_ERR(ret);
 8003446:	4a45      	ldr	r2, [pc, #276]	; (800355c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f4>)
 8003448:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800344a:	4840      	ldr	r0, [pc, #256]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 800344c:	f018 faa8 	bl	801b9a0 <iprintf>
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 8003452:	4a40      	ldr	r2, [pc, #256]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 8003454:	f240 1171 	movw	r1, #369	; 0x171
 8003458:	483f      	ldr	r0, [pc, #252]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 800345a:	f017 fdbd 	bl	801afd8 <__assert_func>
                }

                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 8003470:	2300      	movs	r3, #0
 8003472:	657b      	str	r3, [r7, #84]	; 0x54
 8003474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003476:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003478:	429a      	cmp	r2, r3
 800347a:	d244      	bcs.n	8003506 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x29e>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)-mean_matrix.buffer[col]) /
 800347c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347e:	ed93 7a00 	vldr	s14, [r3]
 8003482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee77 6a67 	vsub.f32	s13, s14, s15
                                             (window_variance.buffer[col] + FLT_EPSILON);
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003560 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f8>
 80034a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                    *(features_buffer_ptr) = (*(features_buffer_ptr)-mean_matrix.buffer[col]) /
 80034a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ac:	edc3 7a00 	vstr	s15, [r3]
                    features_buffer_ptr++;
 80034b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b2:	3304      	adds	r3, #4
 80034b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80034b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b8:	3301      	adds	r3, #1
 80034ba:	657b      	str	r3, [r7, #84]	; 0x54
 80034bc:	e7da      	b.n	8003474 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x20c>
                }
            }

            else {
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80034d0:	2300      	movs	r3, #0
 80034d2:	653b      	str	r3, [r7, #80]	; 0x50
 80034d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034d8:	429a      	cmp	r2, r3
 80034da:	d214      	bcs.n	8003506 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x29e>
                    *(features_buffer_ptr) = *(features_buffer_ptr)-mean_matrix.buffer[col];
 80034dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034de:	ed93 7a00 	vldr	s14, [r3]
 80034e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f4:	edc3 7a00 	vstr	s15, [r3]
                    features_buffer_ptr++;
 80034f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fa:	3304      	adds	r3, #4
 80034fc:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80034fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003500:	3301      	adds	r3, #1
 8003502:	653b      	str	r3, [r7, #80]	; 0x50
 8003504:	e7e6      	b.n	80034d4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x26c>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fe5e 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 8003510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003512:	3301      	adds	r3, #1
 8003514:	65bb      	str	r3, [r7, #88]	; 0x58
 8003516:	e73c      	b.n	8003392 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x12a>
                }
            }
        }
        return EIDSP_OK;
 8003518:	2400      	movs	r4, #0
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 800351a:	f107 0318 	add.w	r3, r7, #24
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd fe54 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 8003524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fe4f 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 800352e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fe4a 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 8003538:	4623      	mov	r3, r4
    }
 800353a:	4618      	mov	r0, r3
 800353c:	3760      	adds	r7, #96	; 0x60
 800353e:	46bd      	mov	sp, r7
 8003540:	bdb0      	pop	{r4, r5, r7, pc}
 8003542:	bf00      	nop
 8003544:	0801c7a0 	.word	0x0801c7a0
 8003548:	fffffc16 	.word	0xfffffc16
 800354c:	0801c7b4 	.word	0x0801c7b4
 8003550:	0801c7c4 	.word	0x0801c7c4
 8003554:	0801d3f4 	.word	0x0801d3f4
 8003558:	0801d280 	.word	0x0801d280
 800355c:	0801c918 	.word	0x0801c918
 8003560:	34000000 	.word	0x34000000
 8003564:	00000000 	.word	0x00000000

08003568 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	ed2d 8b02 	vpush	{d8}
 800356e:	b099      	sub	sp, #100	; 0x64
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	460b      	mov	r3, r1
 800357a:	817b      	strh	r3, [r7, #10]
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	3302      	adds	r3, #2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	3302      	adds	r3, #2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);
 800358c:	897b      	ldrh	r3, [r7, #10]
 800358e:	3302      	adds	r3, #2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 8003594:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003596:	f017 fe0d 	bl	801b1b4 <malloc>
 800359a:	4603      	mov	r3, r0
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
        if (!mels) {
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x52>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80035a4:	4abc      	ldr	r2, [pc, #752]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 80035a6:	49bd      	ldr	r1, [pc, #756]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 80035a8:	48bd      	ldr	r0, [pc, #756]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 80035aa:	f018 f9f9 	bl	801b9a0 <iprintf>
 80035ae:	4bbd      	ldr	r3, [pc, #756]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 80035b0:	4abd      	ldr	r2, [pc, #756]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 80035b2:	2147      	movs	r1, #71	; 0x47
 80035b4:	48bd      	ldr	r0, [pc, #756]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 80035b6:	f017 fd0f 	bl	801afd8 <__assert_func>
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d104      	bne.n	80035ce <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x66>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d00a      	beq.n	80035e4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x7c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035ce:	4ab8      	ldr	r2, [pc, #736]	; (80038b0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>)
 80035d0:	49b8      	ldr	r1, [pc, #736]	; (80038b4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x34c>)
 80035d2:	48b3      	ldr	r0, [pc, #716]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 80035d4:	f018 f9e4 	bl	801b9a0 <iprintf>
 80035d8:	4bb2      	ldr	r3, [pc, #712]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 80035da:	4ab3      	ldr	r2, [pc, #716]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 80035dc:	214b      	movs	r1, #75	; 0x4b
 80035de:	48b3      	ldr	r0, [pc, #716]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 80035e0:	f017 fcfa 	bl	801afd8 <__assert_func>
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	6892      	ldr	r2, [r2, #8]
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	2100      	movs	r1, #0
 80035f8:	f017 fe22 	bl	801b240 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 80035fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	f7ff f91d 	bl	8002848 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 800360e:	eeb0 8a40 	vmov.f32	s16, s0
 8003612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361c:	eeb0 0a67 	vmov.f32	s0, s15
 8003620:	f7ff f912 	bl	8002848 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003624:	eef0 7a40 	vmov.f32	s15, s0
            functions::frequency_to_mel(static_cast<float>(low_freq)),
            functions::frequency_to_mel(static_cast<float>(high_freq)),
            num_filter + 2,
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	3302      	adds	r3, #2
        numpy::linspace(
 800362c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800362e:	4618      	mov	r0, r3
 8003630:	eef0 0a67 	vmov.f32	s1, s15
 8003634:	eeb0 0a48 	vmov.f32	s0, s16
 8003638:	f7fe fd68 	bl	800210c <_ZN2ei5numpy8linspaceEffmPf>
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 800363c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800363e:	f017 fdb9 	bl	801b1b4 <malloc>
 8003642:	4603      	mov	r3, r0
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
        if (!hertz) {
 8003646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x100>
            ei_dsp_free(mels, mels_mem_size);
 800364c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800364e:	f017 fdb9 	bl	801b1c4 <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003652:	4a91      	ldr	r2, [pc, #580]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 8003654:	4991      	ldr	r1, [pc, #580]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 8003656:	4892      	ldr	r0, [pc, #584]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003658:	f018 f9a2 	bl	801b9a0 <iprintf>
 800365c:	4b91      	ldr	r3, [pc, #580]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 800365e:	4a92      	ldr	r2, [pc, #584]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003660:	2163      	movs	r1, #99	; 0x63
 8003662:	4892      	ldr	r0, [pc, #584]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003664:	f017 fcb8 	bl	801afd8 <__assert_func>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003668:	2300      	movs	r3, #0
 800366a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003676:	429a      	cmp	r2, r3
 8003678:	db74      	blt.n	8003764 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1fc>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 800367a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003682:	4413      	add	r3, r2
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003690:	18d4      	adds	r4, r2, r3
 8003692:	eeb0 0a67 	vmov.f32	s0, s15
 8003696:	f7ff f963 	bl	8002960 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 800369a:	eef0 7a40 	vmov.f32	s15, s0
 800369e:	edc4 7a00 	vstr	s15, [r4]
            if (hertz[ix] < low_freq) {
 80036a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036aa:	4413      	add	r3, r2
 80036ac:	ed93 7a00 	vldr	s14, [r3]
 80036b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c2:	d50b      	bpl.n	80036dc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x174>
                hertz[ix] = low_freq;
 80036c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036cc:	4413      	add	r3, r2
 80036ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036d0:	ee07 2a90 	vmov	s15, r2
 80036d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d8:	edc3 7a00 	vstr	s15, [r3]
            }
            if (hertz[ix] > high_freq) {
 80036dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036e4:	4413      	add	r3, r2
 80036e6:	ed93 7a00 	vldr	s14, [r3]
 80036ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	dd0b      	ble.n	8003716 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1ae>
                hertz[ix] = high_freq;
 80036fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003706:	4413      	add	r3, r2
 8003708:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800370a:	ee07 2a90 	vmov	s15, r2
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	edc3 7a00 	vstr	s15, [r3]

            // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
            // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
            // thus calculating the bucket to 64, not 65.
            // we're adjusting this here a tiny bit to ensure we have the same result
            if (ix == num_filter + 2 - 1) {
 8003716:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	3301      	adds	r3, #1
 800371e:	429a      	cmp	r2, r3
 8003720:	d11a      	bne.n	8003758 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1f0>
                hertz[ix] -= 0.001;
 8003722:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372a:	4413      	add	r3, r2
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc ff2a 	bl	8000588 <__aeabi_f2d>
 8003734:	a356      	add	r3, pc, #344	; (adr r3, 8003890 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x328>)
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f7fc fdc5 	bl	80002c8 <__aeabi_dsub>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800374e:	18d4      	adds	r4, r2, r3
 8003750:	f7fd fa6a 	bl	8000c28 <__aeabi_d2f>
 8003754:	4603      	mov	r3, r0
 8003756:	6023      	str	r3, [r4, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003758:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800375c:	3301      	adds	r3, #1
 800375e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003762:	e784      	b.n	800366e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x106>
            }
        }
        ei_dsp_free(mels, mels_mem_size);
 8003764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003766:	f017 fd2d 	bl	801b1c4 <free>

        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 800376a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800376c:	f017 fd22 	bl	801b1b4 <malloc>
 8003770:	4603      	mov	r3, r0
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
        if (!freq_index) {
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10d      	bne.n	8003796 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x22e>
            ei_dsp_free(hertz, hertz_mem_size);
 800377a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800377c:	f017 fd22 	bl	801b1c4 <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003780:	4a45      	ldr	r2, [pc, #276]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 8003782:	4946      	ldr	r1, [pc, #280]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 8003784:	4846      	ldr	r0, [pc, #280]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003786:	f018 f90b 	bl	801b9a0 <iprintf>
 800378a:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 800378c:	4a46      	ldr	r2, [pc, #280]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 800378e:	217e      	movs	r1, #126	; 0x7e
 8003790:	4846      	ldr	r0, [pc, #280]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003792:	f017 fc21 	bl	801afd8 <__assert_func>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003796:	2300      	movs	r3, #0
 8003798:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800379c:	897b      	ldrh	r3, [r7, #10]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037a4:	429a      	cmp	r2, r3
 80037a6:	db2b      	blt.n	8003800 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x298>
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3301      	adds	r3, #1
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037bc:	4413      	add	r3, r2
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037d4:	eeb0 0a66 	vmov.f32	s0, s13
 80037d8:	f7fd fc54 	bl	8001084 <_ZSt5floorf>
 80037dc:	eef0 7a40 	vmov.f32	s15, s0
 80037e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e8:	4413      	add	r3, r2
 80037ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ee:	ee17 2a90 	vmov	r2, s15
 80037f2:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80037f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80037fe:	e7cd      	b.n	800379c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x234>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 8003800:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003802:	f017 fcdf 	bl	801b1c4 <free>

        for (size_t i = 0; i < num_filter; i++) {
 8003806:	2300      	movs	r3, #0
 8003808:	653b      	str	r3, [r7, #80]	; 0x50
 800380a:	897b      	ldrh	r3, [r7, #10]
 800380c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800380e:	429a      	cmp	r2, r3
 8003810:	f080 80b4 	bcs.w	800397c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x414>
            int left = freq_index[i];
 8003814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381a:	4413      	add	r3, r2
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
            int middle = freq_index[i + 1];
 8003820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003822:	3301      	adds	r3, #1
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003828:	4413      	add	r3, r2
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
            int right = freq_index[i + 2];
 800382e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003830:	3302      	adds	r3, #2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	4413      	add	r3, r2
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	627b      	str	r3, [r7, #36]	; 0x24

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	3301      	adds	r3, #1
 8003844:	461a      	mov	r2, r3
 8003846:	f107 0010 	add.w	r0, r7, #16
 800384a:	2300      	movs	r3, #0
 800384c:	2101      	movs	r1, #1
 800384e:	f7fd fc91 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x306>
 8003858:	4a0f      	ldr	r2, [pc, #60]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 800385a:	4910      	ldr	r1, [pc, #64]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 800385c:	4810      	ldr	r0, [pc, #64]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 800385e:	f018 f89f 	bl	801b9a0 <iprintf>
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003864:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003866:	218a      	movs	r1, #138	; 0x8a
 8003868:	4810      	ldr	r0, [pc, #64]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 800386a:	f017 fbb5 	bl	801afd8 <__assert_func>
            if (!z.buffer) {
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d121      	bne.n	80038b8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x350>
                ei_dsp_free(freq_index, freq_index_mem_size);
 8003874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003876:	f017 fca5 	bl	801b1c4 <free>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 800387c:	4907      	ldr	r1, [pc, #28]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 800387e:	4808      	ldr	r0, [pc, #32]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003880:	f018 f88e 	bl	801b9a0 <iprintf>
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003888:	218d      	movs	r1, #141	; 0x8d
 800388a:	4808      	ldr	r0, [pc, #32]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 800388c:	f017 fba4 	bl	801afd8 <__assert_func>
 8003890:	d2f1a9fc 	.word	0xd2f1a9fc
 8003894:	3f50624d 	.word	0x3f50624d
 8003898:	0801c7a0 	.word	0x0801c7a0
 800389c:	fffffc16 	.word	0xfffffc16
 80038a0:	0801c7b4 	.word	0x0801c7b4
 80038a4:	0801c7c4 	.word	0x0801c7c4
 80038a8:	0801d438 	.word	0x0801d438
 80038ac:	0801d4b4 	.word	0x0801d4b4
 80038b0:	0801c868 	.word	0x0801c868
 80038b4:	fffffc14 	.word	0xfffffc14
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 80038b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	ee07 3a10 	vmov	s14, r3
 80038c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	461a      	mov	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	eef0 0a47 	vmov.f32	s1, s14
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	f7fe fc12 	bl	800210c <_ZN2ei5numpy8linspaceEffmPf>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 80038e8:	6938      	ldr	r0, [r7, #16]
 80038ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	4619      	mov	r1, r3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fc:	f7ff f88c 	bl	8002a18 <_ZN2ei8speechpy9functions8triangleEPfjiii>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003900:	2300      	movs	r3, #0
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800390c:	429a      	cmp	r2, r3
 800390e:	dc2c      	bgt.n	800396a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x402>
                size_t index = (i * filterbanks->cols) + (left + zx);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800391c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800391e:	440a      	add	r2, r1
 8003920:	4413      	add	r3, r2
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48

                if (output_transposed) {
 8003924:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3da>
                    index = ((left + zx) * filterbanks->rows) + i;
 800392c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003930:	4413      	add	r3, r2
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	fb03 f302 	mul.w	r3, r3, r2
 800393c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800393e:	4413      	add	r3, r2
 8003940:	64bb      	str	r3, [r7, #72]	; 0x48
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003954:	18d4      	adds	r4, r2, r3
 8003956:	eeb0 0a67 	vmov.f32	s0, s15
 800395a:	f7fd ff09 	bl	8001770 <_ZN2ei5numpy17quantize_zero_oneEf>
 800395e:	4603      	mov	r3, r0
 8003960:	7023      	strb	r3, [r4, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	3301      	adds	r3, #1
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003968:	e7cc      	b.n	8003904 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x39c>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 800396a:	f107 0310 	add.w	r3, r7, #16
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fc2c 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
 8003974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003976:	3301      	adds	r3, #1
 8003978:	653b      	str	r3, [r7, #80]	; 0x50
 800397a:	e746      	b.n	800380a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2a2>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 800397c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x430>
            uint16_t r = filterbanks->rows;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	847b      	strh	r3, [r7, #34]	; 0x22
            filterbanks->rows = filterbanks->cols;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
            filterbanks->cols = r;
 8003992:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	609a      	str	r2, [r3, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 8003998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399a:	f017 fc13 	bl	801b1c4 <free>

        return EIDSP_OK;
 800399e:	2300      	movs	r3, #0
    }
 80039a0:	4618      	mov	r0, r3
 80039a2:	375c      	adds	r7, #92	; 0x5c
 80039a4:	46bd      	mov	sp, r7
 80039a6:	ecbd 8b02 	vpop	{d8}
 80039aa:	bd90      	pop	{r4, r7, pc}

080039ac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b0a3      	sub	sp, #140	; 0x8c
 80039b0:	af04      	add	r7, sp, #16
 80039b2:	6178      	str	r0, [r7, #20]
 80039b4:	6139      	str	r1, [r7, #16]
 80039b6:	60fa      	str	r2, [r7, #12]
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80039be:	edc7 0a00 	vstr	s1, [r7]
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_filters = 40,
        uint16_t fft_length = 512, uint32_t low_frequency = 300, uint32_t high_frequency = 0
        )
    {
        int ret = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	667b      	str	r3, [r7, #100]	; 0x64

        if (high_frequency == 0) {
 80039c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2a>
            high_frequency = sampling_frequency / 2;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        stack_frames_info_t stack_frame_info = { 0 };
 80039d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
        stack_frame_info.signal = signal;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ret = processing::stack_frames(
 80039e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039ea:	2200      	movs	r2, #0
 80039ec:	edd7 0a00 	vldr	s1, [r7]
 80039f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fa4a 	bl	8002e90 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb>
 80039fc:	6678      	str	r0, [r7, #100]	; 0x64
            sampling_frequency,
            frame_length,
            frame_stride,
            false
        );
        if (ret != 0) {
 80039fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x6e>
            EIDSP_ERR(ret);
 8003a04:	4a9c      	ldr	r2, [pc, #624]	; (8003c78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2cc>)
 8003a06:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a08:	489c      	ldr	r0, [pc, #624]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003a0a:	f017 ffc9 	bl	801b9a0 <iprintf>
 8003a0e:	4b9c      	ldr	r3, [pc, #624]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003a10:	4a9c      	ldr	r2, [pc, #624]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003a12:	21d9      	movs	r1, #217	; 0xd9
 8003a14:	489c      	ldr	r0, [pc, #624]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003a16:	f017 fadf 	bl	801afd8 <__assert_func>
        }

        if (stack_frame_info.frame_ixs->size() != out_features->rows) {
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 fed6 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8003a22:	4602      	mov	r2, r0
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xa0>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a36:	4a95      	ldr	r2, [pc, #596]	; (8003c8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e0>)
 8003a38:	4995      	ldr	r1, [pc, #596]	; (8003c90 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e4>)
 8003a3a:	4890      	ldr	r0, [pc, #576]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003a3c:	f017 ffb0 	bl	801b9a0 <iprintf>
 8003a40:	4b8f      	ldr	r3, [pc, #572]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003a42:	4a90      	ldr	r2, [pc, #576]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003a44:	21dd      	movs	r1, #221	; 0xdd
 8003a46:	4890      	ldr	r0, [pc, #576]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003a48:	f017 fac6 	bl	801afd8 <__assert_func>
        }

        if (num_filters != out_features->cols) {
 8003a4c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d00a      	beq.n	8003a6e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xc2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a58:	4a8c      	ldr	r2, [pc, #560]	; (8003c8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e0>)
 8003a5a:	498d      	ldr	r1, [pc, #564]	; (8003c90 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e4>)
 8003a5c:	4887      	ldr	r0, [pc, #540]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003a5e:	f017 ff9f 	bl	801b9a0 <iprintf>
 8003a62:	4b87      	ldr	r3, [pc, #540]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003a64:	4a87      	ldr	r2, [pc, #540]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003a66:	21e1      	movs	r1, #225	; 0xe1
 8003a68:	4887      	ldr	r0, [pc, #540]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003a6a:	f017 fab5 	bl	801afd8 <__assert_func>
        }

        if (stack_frame_info.frame_ixs->size() != out_energies->rows || out_energies->cols != 1) {
 8003a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 feac 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d103      	bne.n	8003a88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xdc>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d001      	beq.n	8003a8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xe0>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xe2>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a92:	4a7e      	ldr	r2, [pc, #504]	; (8003c8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e0>)
 8003a94:	497e      	ldr	r1, [pc, #504]	; (8003c90 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e4>)
 8003a96:	4879      	ldr	r0, [pc, #484]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003a98:	f017 ff82 	bl	801b9a0 <iprintf>
 8003a9c:	4b78      	ldr	r3, [pc, #480]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003a9e:	4a79      	ldr	r2, [pc, #484]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003aa0:	21e5      	movs	r1, #229	; 0xe5
 8003aa2:	4879      	ldr	r0, [pc, #484]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003aa4:	f017 fa98 	bl	801afd8 <__assert_func>
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	677b      	str	r3, [r7, #116]	; 0x74
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6892      	ldr	r2, [r2, #8]
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d20b      	bcs.n	8003ad6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x12a>
            *(out_features->buffer + i) = 0;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ad4:	e7ea      	b.n	8003aac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x100>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 8003ad6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003ae4:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003ae8:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003aec:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	4b67      	ldr	r3, [pc, #412]	; (8003c94 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e8>)
 8003af6:	f7fd fb7f 	bl	80011f8 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x16a>
 8003b00:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003b02:	4966      	ldr	r1, [pc, #408]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003b04:	485d      	ldr	r0, [pc, #372]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003b06:	f017 ff4b 	bl	801b9a0 <iprintf>
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003b0c:	4a5d      	ldr	r2, [pc, #372]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003b0e:	21f1      	movs	r1, #241	; 0xf1
 8003b10:	485d      	ldr	r0, [pc, #372]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003b12:	f017 fa61 	bl	801afd8 <__assert_func>
#else
        EI_DSP_MATRIX(filterbanks, num_filters, coefficients);
#endif
        if (!filterbanks.buffer) {
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x186>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003b1c:	4a5e      	ldr	r2, [pc, #376]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003b1e:	495f      	ldr	r1, [pc, #380]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003b20:	4856      	ldr	r0, [pc, #344]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003b22:	f017 ff3d 	bl	801b9a0 <iprintf>
 8003b26:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003b28:	4a56      	ldr	r2, [pc, #344]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003b2a:	21f6      	movs	r1, #246	; 0xf6
 8003b2c:	4856      	ldr	r0, [pc, #344]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003b2e:	f017 fa53 	bl	801afd8 <__assert_func>
        }

        ret = feature::filterbanks(
 8003b32:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003b36:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003b3a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b3e:	2301      	movs	r3, #1
 8003b40:	9302      	str	r3, [sp, #8]
 8003b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f7ff fd0a 	bl	8003568 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
 8003b54:	6678      	str	r0, [r7, #100]	; 0x64
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 8003b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x1c6>
            EIDSP_ERR(ret);
 8003b5c:	4a46      	ldr	r2, [pc, #280]	; (8003c78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2cc>)
 8003b5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003b60:	4846      	ldr	r0, [pc, #280]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003b62:	f017 ff1d 	bl	801b9a0 <iprintf>
 8003b66:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003b68:	4a46      	ldr	r2, [pc, #280]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003b6a:	21fc      	movs	r1, #252	; 0xfc
 8003b6c:	4846      	ldr	r0, [pc, #280]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003b6e:	f017 fa33 	bl	801afd8 <__assert_func>
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
 8003b72:	2300      	movs	r3, #0
 8003b74:	673b      	str	r3, [r7, #112]	; 0x70
 8003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fe28 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b82:	4293      	cmp	r3, r2
 8003b84:	bf34      	ite	cc
 8003b86:	2301      	movcc	r3, #1
 8003b88:	2300      	movcs	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80e1 	beq.w	8003d54 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3a8>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 8003b92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	65fb      	str	r3, [r7, #92]	; 0x5c

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8003b9e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	f7fd fae4 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x21e>
 8003bb2:	4a39      	ldr	r2, [pc, #228]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003bb4:	4939      	ldr	r1, [pc, #228]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003bb6:	4831      	ldr	r0, [pc, #196]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003bb8:	f017 fef2 	bl	801b9a0 <iprintf>
 8003bbc:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003bbe:	4a31      	ldr	r2, [pc, #196]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003bc0:	f240 1101 	movw	r1, #257	; 0x101
 8003bc4:	4830      	ldr	r0, [pc, #192]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003bc6:	f017 fa07 	bl	801afd8 <__assert_func>
            if (!power_spectrum_frame.buffer) {
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x23c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003bd0:	4a31      	ldr	r2, [pc, #196]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003bd2:	4932      	ldr	r1, [pc, #200]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003bd4:	4829      	ldr	r0, [pc, #164]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003bd6:	f017 fee3 	bl	801b9a0 <iprintf>
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003bdc:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003bde:	f240 1103 	movw	r1, #259	; 0x103
 8003be2:	4829      	ldr	r0, [pc, #164]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003be4:	f017 f9f8 	bl	801afd8 <__assert_func>
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 8003be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bea:	461a      	mov	r2, r3
 8003bec:	f107 0018 	add.w	r0, r7, #24
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	f7fd fabe 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x26a>
 8003bfe:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003c00:	4926      	ldr	r1, [pc, #152]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003c02:	481e      	ldr	r0, [pc, #120]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003c04:	f017 fecc 	bl	801b9a0 <iprintf>
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003c0c:	f240 1107 	movw	r1, #263	; 0x107
 8003c10:	481d      	ldr	r0, [pc, #116]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003c12:	f017 f9e1 	bl	801afd8 <__assert_func>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 fde7 	bl	80057ee <_ZNSt6vectorImSaImEE2atEj>
 8003c20:	4603      	mov	r3, r0
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	65bb      	str	r3, [r7, #88]	; 0x58
            size_t signal_length = stack_frame_info.frame_length;
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	66fb      	str	r3, [r7, #108]	; 0x6c
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 8003c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2e:	441a      	add	r2, r3
 8003c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d908      	bls.n	8003c4a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x29e>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 8003c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3c:	441a      	add	r2, r3
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c46:	4413      	add	r3, r2
 8003c48:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            ret = stack_frame_info.signal->get_data(
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c54:	f001 fd1c 	bl	8005690 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8003c58:	6678      	str	r0, [r7, #100]	; 0x64
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 8003c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01f      	beq.n	8003ca0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f4>
                EIDSP_ERR(ret);
 8003c60:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2cc>)
 8003c62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c64:	4805      	ldr	r0, [pc, #20]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003c66:	f017 fe9b 	bl	801b9a0 <iprintf>
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003c6c:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003c6e:	f240 1117 	movw	r1, #279	; 0x117
 8003c72:	4805      	ldr	r0, [pc, #20]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003c74:	f017 f9b0 	bl	801afd8 <__assert_func>
 8003c78:	0801c918 	.word	0x0801c918
 8003c7c:	0801c7b4 	.word	0x0801c7b4
 8003c80:	0801c7c4 	.word	0x0801c7c4
 8003c84:	0801d52c 	.word	0x0801d52c
 8003c88:	0801d4b4 	.word	0x0801d4b4
 8003c8c:	0801c868 	.word	0x0801c868
 8003c90:	fffffc14 	.word	0xfffffc14
 8003c94:	080018c5 	.word	0x080018c5
 8003c98:	0801c7a0 	.word	0x0801c7a0
 8003c9c:	fffffc16 	.word	0xfffffc16
            }

            ret = processing::power_spectrum(
 8003ca0:	69b8      	ldr	r0, [r7, #24]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
            ret = processing::power_spectrum(
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb0:	f7ff fa5c 	bl	800316c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>
 8003cb4:	6678      	str	r0, [r7, #100]	; 0x64
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 8003cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x328>
                EIDSP_ERR(ret);
 8003cbc:	4a2f      	ldr	r2, [pc, #188]	; (8003d7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d0>)
 8003cbe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003cc0:	482f      	ldr	r0, [pc, #188]	; (8003d80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d4>)
 8003cc2:	f017 fe6d 	bl	801b9a0 <iprintf>
 8003cc6:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d8>)
 8003cc8:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3dc>)
 8003cca:	f240 1123 	movw	r1, #291	; 0x123
 8003cce:	482f      	ldr	r0, [pc, #188]	; (8003d8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3e0>)
 8003cd0:	f017 f982 	bl	801afd8 <__assert_func>
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fd fb33 	bl	8001344 <_ZN2ei5numpy3sumEPfj>
 8003cde:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
            if (energy == 0) {
 8003ce2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003ce6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cee:	d102      	bne.n	8003cf6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x34a>
                energy = FLT_EPSILON;
 8003cf0:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8003cf4:	66bb      	str	r3, [r7, #104]	; 0x68
            }

            out_energies->buffer[ix] = energy;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d02:	601a      	str	r2, [r3, #0]

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 8003d04:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d14:	f7fd fb3e 	bl	8001394 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>
 8003d18:	6678      	str	r0, [r7, #100]	; 0x64
                power_spectrum_frame_size,
                &filterbanks,
                out_features
            );

            if (ret != 0) {
 8003d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x38c>
                EIDSP_ERR(ret);
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d0>)
 8003d22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003d24:	4816      	ldr	r0, [pc, #88]	; (8003d80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d4>)
 8003d26:	f017 fe3b 	bl	801b9a0 <iprintf>
 8003d2a:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d8>)
 8003d2c:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3dc>)
 8003d2e:	f240 1137 	movw	r1, #311	; 0x137
 8003d32:	4816      	ldr	r0, [pc, #88]	; (8003d8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3e0>)
 8003d34:	f017 f950 	bl	801afd8 <__assert_func>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 8003d38:	f107 0318 	add.w	r3, r7, #24
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd fa45 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8003d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd fa40 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
 8003d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4e:	3301      	adds	r3, #1
 8003d50:	673b      	str	r3, [r7, #112]	; 0x70
 8003d52:	e710      	b.n	8003b76 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x1ca>
            }
        }

        functions::zero_handling(out_features);
 8003d54:	6978      	ldr	r0, [r7, #20]
 8003d56:	f7fe fe4c 	bl	80029f2 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 8003d5a:	2400      	movs	r4, #0
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003d5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd fa77 	bl	8001254 <_ZN2ei19ei_quantized_matrixD1Ev>
        stack_frames_info_t stack_frame_info = { 0 };
 8003d66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe ff0e 	bl	8002b8c <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
        return EIDSP_OK;
 8003d70:	4623      	mov	r3, r4
    }
 8003d72:	4618      	mov	r0, r3
 8003d74:	377c      	adds	r7, #124	; 0x7c
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	0801c918 	.word	0x0801c918
 8003d80:	0801c7b4 	.word	0x0801c7b4
 8003d84:	0801c7c4 	.word	0x0801c7c4
 8003d88:	0801d52c 	.word	0x0801d52c
 8003d8c:	0801d4b4 	.word	0x0801d4b4

08003d90 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfft>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_filters
     */
    static matrix_size_t calculate_mfe_buffer_size(
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6178      	str	r0, [r7, #20]
 8003d98:	6139      	str	r1, [r7, #16]
 8003d9a:	60fa      	str	r2, [r7, #12]
 8003d9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003da0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003da4:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_filters = 40)
    {
        uint16_t rows = processing::calculate_no_of_stack_frames(
 8003da6:	2200      	movs	r2, #0
 8003da8:	edd7 0a01 	vldr	s1, [r7, #4]
 8003dac:	ed97 0a02 	vldr	s0, [r7, #8]
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	6938      	ldr	r0, [r7, #16]
 8003db4:	f7ff f974 	bl	80030a0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>
 8003db8:	4603      	mov	r3, r0
            signal_length,
            sampling_frequency,
            frame_length,
            frame_stride,
            false);
 8003dba:	83fb      	strh	r3, [r7, #30]
        uint16_t cols = num_filters;
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	83bb      	strh	r3, [r7, #28]

        matrix_size_t size_matrix;
        size_matrix.rows = rows;
 8003dc0:	8bfa      	ldrh	r2, [r7, #30]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	601a      	str	r2, [r3, #0]
        size_matrix.cols = cols;
 8003dc6:	8bba      	ldrh	r2, [r7, #28]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	605a      	str	r2, [r3, #4]
        return size_matrix;
 8003dcc:	bf00      	nop
    }
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>:
     *     In Hz, default is samplerate/2
     * @param dc_elimination Whether the first dc component should
     *     be eliminated or not.
     * @returns 0 if OK
     */
    static int mfcc(matrix_t *out_features, signal_t *signal,
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b0a3      	sub	sp, #140	; 0x8c
 8003ddc:	af04      	add	r7, sp, #16
 8003dde:	6178      	str	r0, [r7, #20]
 8003de0:	6139      	str	r1, [r7, #16]
 8003de2:	60fa      	str	r2, [r7, #12]
 8003de4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003de8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003dec:	70fb      	strb	r3, [r7, #3]
        uint32_t sampling_frequency, float frame_length = 0.02f, float frame_stride = 0.01f,
        uint8_t num_cepstral = 13, uint16_t num_filters = 40, uint16_t fft_length = 512,
        uint32_t low_frequency = 0, uint32_t high_frequency = 0, bool dc_elimination = true)
    {
        if (out_features->cols != num_cepstral) {
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d00b      	beq.n	8003e10 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x38>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003df8:	4ab5      	ldr	r2, [pc, #724]	; (80040d0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f8>)
 8003dfa:	49b6      	ldr	r1, [pc, #728]	; (80040d4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2fc>)
 8003dfc:	48b6      	ldr	r0, [pc, #728]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003dfe:	f017 fdcf 	bl	801b9a0 <iprintf>
 8003e02:	4bb6      	ldr	r3, [pc, #728]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003e04:	4ab6      	ldr	r2, [pc, #728]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003e06:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003e0a:	48b6      	ldr	r0, [pc, #728]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003e0c:	f017 f8e4 	bl	801afd8 <__assert_func>
            calculate_mfe_buffer_size(
                signal->total_length,
                sampling_frequency,
                frame_length,
                frame_stride,
                num_filters);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6919      	ldr	r1, [r3, #16]
 8003e14:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003e18:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003e1c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003e20:	ed97 0a02 	vldr	s0, [r7, #8]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f7ff ffb3 	bl	8003d90 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfft>

        if (out_features->rows != mfe_matrix_size.rows) {
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d00b      	beq.n	8003e4c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x74>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003e34:	4aa6      	ldr	r2, [pc, #664]	; (80040d0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f8>)
 8003e36:	49a7      	ldr	r1, [pc, #668]	; (80040d4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2fc>)
 8003e38:	48a7      	ldr	r0, [pc, #668]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003e3a:	f017 fdb1 	bl	801b9a0 <iprintf>
 8003e3e:	4ba7      	ldr	r3, [pc, #668]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003e40:	4aa7      	ldr	r2, [pc, #668]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003e42:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8003e46:	48a7      	ldr	r0, [pc, #668]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003e48:	f017 f8c6 	bl	801afd8 <__assert_func>
        }

        int ret = EIDSP_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	66bb      	str	r3, [r7, #104]	; 0x68

        // allocate some memory for the MFE result
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 8003e50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e54:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f7fd f98b 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xa4>
 8003e64:	4aa0      	ldr	r2, [pc, #640]	; (80040e8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8003e66:	49a1      	ldr	r1, [pc, #644]	; (80040ec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8003e68:	489b      	ldr	r0, [pc, #620]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003e6a:	f017 fd99 	bl	801b9a0 <iprintf>
 8003e6e:	4b9b      	ldr	r3, [pc, #620]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003e70:	4a9b      	ldr	r2, [pc, #620]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003e72:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8003e76:	489b      	ldr	r0, [pc, #620]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003e78:	f017 f8ae 	bl	801afd8 <__assert_func>
        if (!features_matrix.buffer) {
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xc2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003e82:	4a99      	ldr	r2, [pc, #612]	; (80040e8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8003e84:	4999      	ldr	r1, [pc, #612]	; (80040ec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8003e86:	4894      	ldr	r0, [pc, #592]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003e88:	f017 fd8a 	bl	801b9a0 <iprintf>
 8003e8c:	4b93      	ldr	r3, [pc, #588]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003e8e:	4a94      	ldr	r2, [pc, #592]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003e90:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003e94:	4893      	ldr	r0, [pc, #588]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003e96:	f017 f89f 	bl	801afd8 <__assert_func>
        }

        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 8003e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e9c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f7fd f966 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xee>
 8003eae:	4a8e      	ldr	r2, [pc, #568]	; (80040e8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8003eb0:	498e      	ldr	r1, [pc, #568]	; (80040ec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8003eb2:	4889      	ldr	r0, [pc, #548]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003eb4:	f017 fd74 	bl	801b9a0 <iprintf>
 8003eb8:	4b88      	ldr	r3, [pc, #544]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003eba:	4a89      	ldr	r2, [pc, #548]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003ebc:	f240 118f 	movw	r1, #399	; 0x18f
 8003ec0:	4888      	ldr	r0, [pc, #544]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003ec2:	f017 f889 	bl	801afd8 <__assert_func>
        if (!energy_matrix.buffer) {
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x10c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003ecc:	4a86      	ldr	r2, [pc, #536]	; (80040e8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8003ece:	4987      	ldr	r1, [pc, #540]	; (80040ec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8003ed0:	4881      	ldr	r0, [pc, #516]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003ed2:	f017 fd65 	bl	801b9a0 <iprintf>
 8003ed6:	4b81      	ldr	r3, [pc, #516]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003ed8:	4a81      	ldr	r2, [pc, #516]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003eda:	f240 1191 	movw	r1, #401	; 0x191
 8003ede:	4881      	ldr	r0, [pc, #516]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003ee0:	f017 f87a 	bl	801afd8 <__assert_func>
        }

        ret = mfe(&features_matrix, &energy_matrix, signal,
 8003ee4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003ee8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	edd7 0a01 	vldr	s1, [r7, #4]
 8003f08:	ed97 0a02 	vldr	s0, [r7, #8]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	f7ff fd4c 	bl	80039ac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm>
 8003f14:	66b8      	str	r0, [r7, #104]	; 0x68
            sampling_frequency, frame_length, frame_stride, num_filters, fft_length,
            low_frequency, high_frequency);
        if (ret != EIDSP_OK) {
 8003f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x15c>
            EIDSP_ERR(ret);
 8003f1c:	4a74      	ldr	r2, [pc, #464]	; (80040f0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 8003f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f20:	486d      	ldr	r0, [pc, #436]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003f22:	f017 fd3d 	bl	801b9a0 <iprintf>
 8003f26:	4b6d      	ldr	r3, [pc, #436]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003f28:	4a6d      	ldr	r2, [pc, #436]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003f2a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003f2e:	486d      	ldr	r0, [pc, #436]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003f30:	f017 f852 	bl	801afd8 <__assert_func>
        }

        // ok... now we need to calculate the MFCC from this...
        // first do log() over all features...
        ret = numpy::log(&features_matrix);
 8003f34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe f963 	bl	8002204 <_ZN2ei5numpy3logEPNS_9ei_matrixE>
 8003f3e:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8003f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x186>
            EIDSP_ERR(ret);
 8003f46:	4a6a      	ldr	r2, [pc, #424]	; (80040f0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 8003f48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f4a:	4863      	ldr	r0, [pc, #396]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003f4c:	f017 fd28 	bl	801b9a0 <iprintf>
 8003f50:	4b62      	ldr	r3, [pc, #392]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003f52:	4a63      	ldr	r2, [pc, #396]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003f54:	f240 119f 	movw	r1, #415	; 0x19f
 8003f58:	4862      	ldr	r0, [pc, #392]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003f5a:	f017 f83d 	bl	801afd8 <__assert_func>
        }

        // now do DST type 2
        ret = numpy::dct2(&features_matrix, DCT_NORMALIZATION_ORTHO);
 8003f5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fd fbd7 	bl	8001718 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>
 8003f6a:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8003f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x1b2>
            EIDSP_ERR(ret);
 8003f72:	4a5f      	ldr	r2, [pc, #380]	; (80040f0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 8003f74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f76:	4858      	ldr	r0, [pc, #352]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003f78:	f017 fd12 	bl	801b9a0 <iprintf>
 8003f7c:	4b57      	ldr	r3, [pc, #348]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003f7e:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003f80:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003f84:	4857      	ldr	r0, [pc, #348]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003f86:	f017 f827 	bl	801afd8 <__assert_func>
        }

        // replace first cepstral coefficient with log of frame energy for DC elimination
        if (dc_elimination) {
 8003f8a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d075      	beq.n	800407e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2a6>
            for (size_t row = 0; row < features_matrix.rows; row++) {
 8003f92:	2300      	movs	r3, #0
 8003f94:	677b      	str	r3, [r7, #116]	; 0x74
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d26f      	bcs.n	800407e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2a6>
                features_matrix.buffer[row * features_matrix.cols] = numpy::log(energy_matrix.buffer[row]);
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fac:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003fae:	fb00 f202 	mul.w	r2, r0, r2
 8003fb2:	0092      	lsls	r2, r2, #2
 8003fb4:	188c      	adds	r4, r1, r2
 8003fb6:	623b      	str	r3, [r7, #32]
        g = (int32_t) * ((int32_t *)&a);
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	61fb      	str	r3, [r7, #28]
        e = (g - 0x3f2aaaab) & 0xff800000;
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x31c>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	0ddb      	lsrs	r3, r3, #23
 8003fc8:	05db      	lsls	r3, r3, #23
 8003fca:	667b      	str	r3, [r7, #100]	; 0x64
        g = g - e;
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	61fb      	str	r3, [r7, #28]
        m = (float) * ((float *)&g);
 8003fd4:	f107 031c 	add.w	r3, r7, #28
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	663b      	str	r3, [r7, #96]	; 0x60
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 8003fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80040f8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x320>
 8003fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fee:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        f = m - 1.0f;
 8003ff2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ffe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        s = f * f;
 8004002:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800400a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 800400e:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80040fc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x324>
 8004012:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8004016:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8004100 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x328>
 800401a:	f014 fa5d 	bl	80184d8 <fmaf>
 800401e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8004022:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8004104 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x32c>
 8004026:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 800402a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004108 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x330>
 800402e:	f014 fa53 	bl	80184d8 <fmaf>
 8004032:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
        r = fmaf(r, s, t);
 8004036:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 800403a:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 800403e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004042:	f014 fa49 	bl	80184d8 <fmaf>
 8004046:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(r, s, f);
 800404a:	ed97 1a16 	vldr	s2, [r7, #88]	; 0x58
 800404e:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8004052:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004056:	f014 fa3f 	bl	80184d8 <fmaf>
 800405a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 800405e:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8004062:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800410c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x334>
 8004066:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800406a:	f014 fa35 	bl	80184d8 <fmaf>
 800406e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        return r;
 8004072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004074:	6023      	str	r3, [r4, #0]
            for (size_t row = 0; row < features_matrix.rows; row++) {
 8004076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004078:	3301      	adds	r3, #1
 800407a:	677b      	str	r3, [r7, #116]	; 0x74
 800407c:	e78b      	b.n	8003f96 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x1be>
            }
        }

        // copy to the output...
        for (size_t row = 0; row < features_matrix.rows; row++) {
 800407e:	2300      	movs	r3, #0
 8004080:	673b      	str	r3, [r7, #112]	; 0x70
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004086:	429a      	cmp	r2, r3
 8004088:	d242      	bcs.n	8004110 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x338>
            for(int i = 0; i < num_cepstral; i++) {
 800408a:	2300      	movs	r3, #0
 800408c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004092:	429a      	cmp	r2, r3
 8004094:	da18      	bge.n	80040c8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f0>
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
 8004096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800409c:	fb01 f103 	mul.w	r1, r1, r3
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	440b      	add	r3, r1
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80040b0:	fb00 f003 	mul.w	r0, r0, r3
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	4403      	add	r3, r0
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	601a      	str	r2, [r3, #0]
            for(int i = 0; i < num_cepstral; i++) {
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	3301      	adds	r3, #1
 80040c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c6:	e7e2      	b.n	800408e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2b6>
        for (size_t row = 0; row < features_matrix.rows; row++) {
 80040c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ca:	3301      	adds	r3, #1
 80040cc:	673b      	str	r3, [r7, #112]	; 0x70
 80040ce:	e7d8      	b.n	8004082 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2aa>
 80040d0:	0801c868 	.word	0x0801c868
 80040d4:	fffffc14 	.word	0xfffffc14
 80040d8:	0801c7b4 	.word	0x0801c7b4
 80040dc:	0801c7c4 	.word	0x0801c7c4
 80040e0:	0801d5c0 	.word	0x0801d5c0
 80040e4:	0801d4b4 	.word	0x0801d4b4
 80040e8:	0801c7a0 	.word	0x0801c7a0
 80040ec:	fffffc16 	.word	0xfffffc16
 80040f0:	0801c918 	.word	0x0801c918
 80040f4:	c0d55555 	.word	0xc0d55555
 80040f8:	34000000 	.word	0x34000000
 80040fc:	be8ef46d 	.word	0xbe8ef46d
 8004100:	3e6c6078 	.word	0x3e6c6078
 8004104:	beff712d 	.word	0xbeff712d
 8004108:	3ea9e51a 	.word	0x3ea9e51a
 800410c:	3f317218 	.word	0x3f317218
            }
        }

        return EIDSP_OK;
 8004110:	2400      	movs	r4, #0
        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 8004112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd f858 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 800411c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd f853 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 8004126:	4623      	mov	r3, r4
    }
 8004128:	4618      	mov	r0, r3
 800412a:	377c      	adds	r7, #124	; 0x7c
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}

08004130 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_cepstral
     */
    static matrix_size_t calculate_mfcc_buffer_size(
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6178      	str	r0, [r7, #20]
 8004138:	6139      	str	r1, [r7, #16]
 800413a:	60fa      	str	r2, [r7, #12]
 800413c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004140:	edc7 0a01 	vstr	s1, [r7, #4]
 8004144:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_cepstral = 13)
    {
        uint16_t rows = processing::calculate_no_of_stack_frames(
 8004146:	2200      	movs	r2, #0
 8004148:	edd7 0a01 	vldr	s1, [r7, #4]
 800414c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	6938      	ldr	r0, [r7, #16]
 8004154:	f7fe ffa4 	bl	80030a0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>
 8004158:	4603      	mov	r3, r0
            signal_length,
            sampling_frequency,
            frame_length,
            frame_stride,
            false);
 800415a:	83fb      	strh	r3, [r7, #30]
        uint16_t cols = num_cepstral;
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	83bb      	strh	r3, [r7, #28]

        matrix_size_t size_matrix;
        size_matrix.rows = rows;
 8004160:	8bfa      	ldrh	r2, [r7, #30]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	601a      	str	r2, [r3, #0]
        size_matrix.cols = cols;
 8004166:	8bba      	ldrh	r2, [r7, #28]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	605a      	str	r2, [r3, #4]
        return size_matrix;
 800416c:	bf00      	nop
    }
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
    return preemphasis->get_data(offset, length, out_ptr);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x24>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	68f9      	ldr	r1, [r7, #12]
 800418e:	f7fe fd61 	bl	8002c54 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
 8004192:	4603      	mov	r3, r0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	2000059c 	.word	0x2000059c

080041a0 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc ffbe 	bl	800112c <_ZNSt14_Function_baseD1Ev>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fb24 	bl	8005812 <_ZNSt8functionIFijjPfEEC1Ev>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_ZN2ei11ei_signal_tD1Ev>:
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ffde 	bl	80041a0 <_ZNSt8functionIFijjPfEED1Ev>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv>:

__attribute__((unused)) int extract_mfcc_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr) {
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	b0a7      	sub	sp, #156	; 0x9c
 80041f4:	af06      	add	r7, sp, #24
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8004202:	461d      	mov	r5, r3
 8004204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800420c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (config.axes != 1) {
 8004214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004216:	2b01      	cmp	r3, #1
 8004218:	d00b      	beq.n	8004232 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x42>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800421a:	4a6b      	ldr	r2, [pc, #428]	; (80043c8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 800421c:	496b      	ldr	r1, [pc, #428]	; (80043cc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 800421e:	486c      	ldr	r0, [pc, #432]	; (80043d0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004220:	f017 fbbe 	bl	801b9a0 <iprintf>
 8004224:	4b6b      	ldr	r3, [pc, #428]	; (80043d4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004226:	4a6c      	ldr	r2, [pc, #432]	; (80043d8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004228:	f44f 7182 	mov.w	r1, #260	; 0x104
 800422c:	486b      	ldr	r0, [pc, #428]	; (80043dc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 800422e:	f016 fed3 	bl	801afd8 <__assert_func>
    }

    // @todo: move this to config
    const uint32_t frequency = static_cast<uint32_t>(EI_CLASSIFIER_FREQUENCY);
 8004232:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004236:	67fb      	str	r3, [r7, #124]	; 0x7c

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 8004238:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800423a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800423e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004242:	eeb0 0a67 	vmov.f32	s0, s15
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fcb7 	bl	8002bbc <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>
    preemphasis = &pre;
 800424e:	4a64      	ldr	r2, [pc, #400]	; (80043e0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 8004250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004254:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 8004256:	f107 0318 	add.w	r3, r7, #24
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ffad 	bl	80041ba <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 8004266:	4b5f      	ldr	r3, [pc, #380]	; (80043e4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f4>)
 8004268:	677b      	str	r3, [r7, #116]	; 0x74
 800426a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800426e:	f107 0318 	add.w	r3, r7, #24
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f001 fad9 	bl	800582c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFCC matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_cepstral);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6919      	ldr	r1, [r3, #16]
 800427e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004282:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004288:	b29b      	uxth	r3, r3
 800428a:	f107 0010 	add.w	r0, r7, #16
 800428e:	eef0 0a47 	vmov.f32	s1, s14
 8004292:	eeb0 0a67 	vmov.f32	s0, s15
 8004296:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800429a:	f7ff ff49 	bl	8004130 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	fb02 f203 	mul.w	r2, r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	6889      	ldr	r1, [r1, #8]
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d919      	bls.n	80042ea <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0xfa>
        ei_printf("out_matrix = %hux%hu\n", output_matrix->rows, output_matrix->cols);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	461a      	mov	r2, r3
 80042c0:	4849      	ldr	r0, [pc, #292]	; (80043e8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f8>)
 80042c2:	f001 f96d 	bl	80055a0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hux%hu\n", out_matrix_size.rows, out_matrix_size.cols);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4619      	mov	r1, r3
 80042cc:	4847      	ldr	r0, [pc, #284]	; (80043ec <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1fc>)
 80042ce:	f001 f967 	bl	80055a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80042d2:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 80042d4:	493d      	ldr	r1, [pc, #244]	; (80043cc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 80042d6:	483e      	ldr	r0, [pc, #248]	; (80043d0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 80042d8:	f017 fb62 	bl	801b9a0 <iprintf>
 80042dc:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 80042de:	4a3e      	ldr	r2, [pc, #248]	; (80043d8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 80042e0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80042e4:	483d      	ldr	r0, [pc, #244]	; (80043dc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 80042e6:	f016 fe77 	bl	801afd8 <__assert_func>
    }

    output_matrix->rows = out_matrix_size.rows;
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	609a      	str	r2, [r3, #8]

    // and run the MFCC extraction (using 32 rather than 40 filters here to optimize speed on embedded)
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 80042f6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80042fa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 80042fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004300:	b2d8      	uxtb	r0, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004304:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004306:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004308:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency);
 800430a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800430c:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency);
 800430e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004310:	460e      	mov	r6, r1
 8004312:	f107 0118 	add.w	r1, r7, #24
 8004316:	2401      	movs	r4, #1
 8004318:	9404      	str	r4, [sp, #16]
 800431a:	9603      	str	r6, [sp, #12]
 800431c:	9502      	str	r5, [sp, #8]
 800431e:	9201      	str	r2, [sp, #4]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4603      	mov	r3, r0
 8004324:	eef0 0a47 	vmov.f32	s1, s14
 8004328:	eeb0 0a67 	vmov.f32	s0, s15
 800432c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	f7ff fd51 	bl	8003dd8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>
 8004336:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 8004338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00f      	beq.n	800435e <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x16e>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 800433e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004340:	482b      	ldr	r0, [pc, #172]	; (80043f0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x200>)
 8004342:	f001 f92d 	bl	80055a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8004346:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x204>)
 8004348:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800434a:	4821      	ldr	r0, [pc, #132]	; (80043d0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 800434c:	f017 fb28 	bl	801b9a0 <iprintf>
 8004350:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004352:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004354:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004358:	4820      	ldr	r0, [pc, #128]	; (80043dc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 800435a:	f016 fe3d 	bl	801afd8 <__assert_func>
    }

    // cepstral mean and variance normalization
    ret = speechpy::processing::cmvnw(output_matrix, config.win_size, true);
 800435e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004360:	b29b      	uxth	r3, r3
 8004362:	2201      	movs	r2, #1
 8004364:	4619      	mov	r1, r3
 8004366:	68b8      	ldr	r0, [r7, #8]
 8004368:	f7fe ff7e 	bl	8003268 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb>
 800436c:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 800436e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00f      	beq.n	8004394 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1a4>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8004374:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004376:	4820      	ldr	r0, [pc, #128]	; (80043f8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x208>)
 8004378:	f001 f912 	bl	80055a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800437c:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x204>)
 800437e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004380:	4813      	ldr	r0, [pc, #76]	; (80043d0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004382:	f017 fb0d 	bl	801b9a0 <iprintf>
 8004386:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004388:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 800438a:	f240 112d 	movw	r1, #301	; 0x12d
 800438e:	4813      	ldr	r0, [pc, #76]	; (80043dc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004390:	f016 fe22 	bl	801afd8 <__assert_func>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	fb02 f203 	mul.w	r2, r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2201      	movs	r2, #1
 80043a4:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80043a6:	2400      	movs	r4, #0
    signal_t preemphasized_audio_signal;
 80043a8:	f107 0318 	add.w	r3, r7, #24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff11 	bl	80041d4 <_ZN2ei11ei_signal_tD1Ev>
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 80043b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fd28 	bl	8002e0c <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    return EIDSP_OK;
 80043bc:	4623      	mov	r3, r4
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3784      	adds	r7, #132	; 0x84
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c6:	bf00      	nop
 80043c8:	0801c868 	.word	0x0801c868
 80043cc:	fffffc14 	.word	0xfffffc14
 80043d0:	0801c7b4 	.word	0x0801c7b4
 80043d4:	0801c7c4 	.word	0x0801c7c4
 80043d8:	0801d850 	.word	0x0801d850
 80043dc:	0801d6b0 	.word	0x0801d6b0
 80043e0:	2000059c 	.word	0x2000059c
 80043e4:	08004179 	.word	0x08004179
 80043e8:	0801d89c 	.word	0x0801d89c
 80043ec:	0801d8b4 	.word	0x0801d8b4
 80043f0:	0801d8d0 	.word	0x0801d8d0
 80043f4:	0801c918 	.word	0x0801c918
 80043f8:	0801d8e8 	.word	0x0801d8e8

080043fc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv>:

__attribute__((unused)) int extract_mfcc_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr) {
 80043fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fe:	b0a7      	sub	sp, #156	; 0x9c
 8004400:	af06      	add	r7, sp, #24
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800440e:	461d      	mov	r5, r3
 8004410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004418:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800441c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    static bool first_run = false;

    if (config.axes != 1) {
 8004420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004422:	2b01      	cmp	r3, #1
 8004424:	d00b      	beq.n	800443e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x42>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004426:	4a68      	ldr	r2, [pc, #416]	; (80045c8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004428:	4968      	ldr	r1, [pc, #416]	; (80045cc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 800442a:	4869      	ldr	r0, [pc, #420]	; (80045d0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 800442c:	f017 fab8 	bl	801b9a0 <iprintf>
 8004430:	4b68      	ldr	r3, [pc, #416]	; (80045d4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004432:	4a69      	ldr	r2, [pc, #420]	; (80045d8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004434:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8004438:	4868      	ldr	r0, [pc, #416]	; (80045dc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 800443a:	f016 fdcd 	bl	801afd8 <__assert_func>
    }

    /* Fake an extra frame_length for stack frames calculations. There, 1 frame_length is always
    subtracted and there for never used. But skip the first slice to fit the feature_matrix
    buffer */
    if (first_run == true) {
 800443e:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10e      	bne.n	8004464 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x68>
        signal->total_length += (size_t)(config.frame_length * (float)EI_CLASSIFIER_FREQUENCY);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800444e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80045e4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>
 8004452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445a:	ee17 2a90 	vmov	r2, s15
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	611a      	str	r2, [r3, #16]
    }

    first_run = true;
 8004464:	4b5e      	ldr	r3, [pc, #376]	; (80045e0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]

    // @todo: move this to config
    const uint32_t frequency = static_cast<uint32_t>(EI_CLASSIFIER_FREQUENCY);
 800446a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800446e:	67fb      	str	r3, [r7, #124]	; 0x7c

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 8004470:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004472:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800447a:	eeb0 0a67 	vmov.f32	s0, s15
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe fb9b 	bl	8002bbc <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>
    preemphasis = &pre;
 8004486:	4a58      	ldr	r2, [pc, #352]	; (80045e8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800448c:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 800448e:	f107 0318 	add.w	r3, r7, #24
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fe91 	bl	80041ba <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 800449e:	4b53      	ldr	r3, [pc, #332]	; (80045ec <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 80044a0:	677b      	str	r3, [r7, #116]	; 0x74
 80044a2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80044a6:	f107 0318 	add.w	r3, r7, #24
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f9bd 	bl	800582c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFCC matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_cepstral);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80044ba:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80044be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f107 0010 	add.w	r0, r7, #16
 80044c6:	eef0 0a47 	vmov.f32	s1, s14
 80044ca:	eeb0 0a67 	vmov.f32	s0, s15
 80044ce:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80044d2:	f7ff fe2d 	bl	8004130 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	fb02 f203 	mul.w	r2, r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	6889      	ldr	r1, [r1, #8]
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d919      	bls.n	8004522 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x126>
        ei_printf("out_matrix = %hux%hu\n", output_matrix->rows, output_matrix->cols);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	461a      	mov	r2, r3
 80044f8:	483d      	ldr	r0, [pc, #244]	; (80045f0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f4>)
 80044fa:	f001 f851 	bl	80055a0 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hux%hu\n", out_matrix_size.rows, out_matrix_size.cols);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4619      	mov	r1, r3
 8004504:	483b      	ldr	r0, [pc, #236]	; (80045f4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f8>)
 8004506:	f001 f84b 	bl	80055a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800450a:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 800450c:	492f      	ldr	r1, [pc, #188]	; (80045cc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 800450e:	4830      	ldr	r0, [pc, #192]	; (80045d0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004510:	f017 fa46 	bl	801b9a0 <iprintf>
 8004514:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004516:	4a30      	ldr	r2, [pc, #192]	; (80045d8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004518:	f240 115b 	movw	r1, #347	; 0x15b
 800451c:	482f      	ldr	r0, [pc, #188]	; (80045dc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 800451e:	f016 fd5b 	bl	801afd8 <__assert_func>
    }

    output_matrix->rows = out_matrix_size.rows;
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	609a      	str	r2, [r3, #8]

    // and run the MFCC extraction (using 32 rather than 40 filters here to optimize speed on embedded)
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800452e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004532:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004538:	b2d8      	uxtb	r0, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800453a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800453c:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800453e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004540:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency);
 8004542:	6e79      	ldr	r1, [r7, #100]	; 0x64
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004544:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency);
 8004546:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004548:	460e      	mov	r6, r1
 800454a:	f107 0118 	add.w	r1, r7, #24
 800454e:	2401      	movs	r4, #1
 8004550:	9404      	str	r4, [sp, #16]
 8004552:	9603      	str	r6, [sp, #12]
 8004554:	9502      	str	r5, [sp, #8]
 8004556:	9201      	str	r2, [sp, #4]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	4603      	mov	r3, r0
 800455c:	eef0 0a47 	vmov.f32	s1, s14
 8004560:	eeb0 0a67 	vmov.f32	s0, s15
 8004564:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f7ff fc35 	bl	8003dd8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>
 800456e:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 8004570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00f      	beq.n	8004596 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x19a>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 8004576:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004578:	481f      	ldr	r0, [pc, #124]	; (80045f8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1fc>)
 800457a:	f001 f811 	bl	80055a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800457e:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x200>)
 8004580:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004582:	4813      	ldr	r0, [pc, #76]	; (80045d0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004584:	f017 fa0c 	bl	801b9a0 <iprintf>
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 800458a:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 800458c:	f240 1167 	movw	r1, #359	; 0x167
 8004590:	4812      	ldr	r0, [pc, #72]	; (80045dc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004592:	f016 fd21 	bl	801afd8 <__assert_func>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	fb02 f203 	mul.w	r2, r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2201      	movs	r2, #1
 80045a6:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80045a8:	2400      	movs	r4, #0
    signal_t preemphasized_audio_signal;
 80045aa:	f107 0318 	add.w	r3, r7, #24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fe10 	bl	80041d4 <_ZN2ei11ei_signal_tD1Ev>
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 80045b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fc27 	bl	8002e0c <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    return EIDSP_OK;
 80045be:	4623      	mov	r3, r4
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3784      	adds	r7, #132	; 0x84
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c8:	0801c868 	.word	0x0801c868
 80045cc:	fffffc14 	.word	0xfffffc14
 80045d0:	0801c7b4 	.word	0x0801c7b4
 80045d4:	0801c7c4 	.word	0x0801c7c4
 80045d8:	0801d900 	.word	0x0801d900
 80045dc:	0801d6b0 	.word	0x0801d6b0
 80045e0:	200005a0 	.word	0x200005a0
 80045e4:	467a0000 	.word	0x467a0000
 80045e8:	2000059c 	.word	0x2000059c
 80045ec:	08004179 	.word	0x08004179
 80045f0:	0801d89c 	.word	0x0801d89c
 80045f4:	0801d8b4 	.word	0x0801d8b4
 80045f8:	0801d8d0 	.word	0x0801d8d0
 80045fc:	0801c918 	.word	0x0801c918

08004600 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
void * ei_aligned_malloc(size_t align, size_t size)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x26>
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x78>)
 800461c:	4a17      	ldr	r2, [pc, #92]	; (800467c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x7c>)
 800461e:	2139      	movs	r1, #57	; 0x39
 8004620:	4817      	ldr	r0, [pc, #92]	; (8004680 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x80>)
 8004622:	f016 fcd9 	bl	801afd8 <__assert_func>

	if(align && size)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01f      	beq.n	800466c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01c      	beq.n	800466c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3301      	adds	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
		void * p = malloc(size + hdr_size);
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4413      	add	r3, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f016 fdb8 	bl	801b1b4 <malloc>
 8004644:	4603      	mov	r3, r0
 8004646:	60fb      	str	r3, [r7, #12]

		if(p)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	425b      	negs	r3, r3
 800465a:	4013      	ands	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad2      	subs	r2, r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3b02      	subs	r3, #2
 8004668:	b292      	uxth	r2, r2
 800466a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800466c:	697b      	ldr	r3, [r7, #20]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	0801d9ec 	.word	0x0801d9ec
 800467c:	0801da08 	.word	0x0801da08
 8004680:	0801da40 	.word	0x0801da40

08004684 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
void ei_aligned_free(void * ptr)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d105      	bne.n	800469e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8004694:	4a0b      	ldr	r2, [pc, #44]	; (80046c4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8004696:	215c      	movs	r1, #92	; 0x5c
 8004698:	480b      	ldr	r0, [pc, #44]	; (80046c8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800469a:	f016 fc9d 	bl	801afd8 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80046a4:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80046a6:	89fb      	ldrh	r3, [r7, #14]
 80046a8:	425b      	negs	r3, r3
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
	free(p);
 80046b0:	68b8      	ldr	r0, [r7, #8]
 80046b2:	f016 fd87 	bl	801b1c4 <free>
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	0801dac0 	.word	0x0801dac0
 80046c4:	0801dac4 	.word	0x0801dac4
 80046c8:	0801da40 	.word	0x0801da40

080046cc <run_moving_average_filter>:
 * @param[in]  classification  Classification output on current slice
 *
 * @return     Averaged classification value
 */
extern "C" float run_moving_average_filter(ei_impulse_maf *maf, float classification)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	ed87 0a00 	vstr	s0, [r7]
    maf->running_sum -= maf->maf_buffer[maf->buf_idx];
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	ed93 7a01 	vldr	s14, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	3302      	adds	r3, #2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	edc3 7a01 	vstr	s15, [r3, #4]
    maf->running_sum += classification;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80046fe:	edd7 7a00 	vldr	s15, [r7]
 8004702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	edc3 7a01 	vstr	s15, [r3, #4]
    maf->maf_buffer[maf->buf_idx] = classification;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	3302      	adds	r3, #2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	601a      	str	r2, [r3, #0]

    if (++maf->buf_idx >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1)) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	bf8c      	ite	hi
 800472e:	2301      	movhi	r3, #1
 8004730:	2300      	movls	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <run_moving_average_filter+0x72>
        maf->buf_idx = 0;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
    }

    return maf->running_sum / (float)(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	edd3 7a01 	vldr	s15, [r3, #4]
 8004744:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004748:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800474c:	eef0 7a66 	vmov.f32	s15, s13
}
 8004750:	eeb0 0a67 	vmov.f32	s0, s15
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <__tcf_0>:
 * @return     The ei impulse error.
 */
extern "C" EI_IMPULSE_ERROR run_classifier_continuous(signal_t *signal, ei_impulse_result_t *result,
                                                      bool debug = false)
{
    static ei::matrix_t static_features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
 8004764:	4801      	ldr	r0, [pc, #4]	; (800476c <__tcf_0+0xc>)
 8004766:	f7fc fd31 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 800476a:	bd80      	pop	{r7, pc}
 800476c:	2000060c 	.word	0x2000060c

08004770 <run_classifier_continuous>:
{
 8004770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004774:	b09a      	sub	sp, #104	; 0x68
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
 8004780:	2400      	movs	r4, #0
    static ei::matrix_t static_features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004782:	4bad      	ldr	r3, [pc, #692]	; (8004a38 <run_classifier_continuous+0x2c8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f3bf 8f5b 	dmb	ish
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d017      	beq.n	80047ce <run_classifier_continuous+0x5e>
 800479e:	48a6      	ldr	r0, [pc, #664]	; (8004a38 <run_classifier_continuous+0x2c8>)
 80047a0:	f013 fb4c 	bl	8017e3c <__cxa_guard_acquire>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <run_classifier_continuous+0x5e>
 80047b4:	2300      	movs	r3, #0
 80047b6:	f240 228a 	movw	r2, #650	; 0x28a
 80047ba:	2101      	movs	r1, #1
 80047bc:	489f      	ldr	r0, [pc, #636]	; (8004a3c <run_classifier_continuous+0x2cc>)
 80047be:	f7fc fcd9 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80047c2:	489d      	ldr	r0, [pc, #628]	; (8004a38 <run_classifier_continuous+0x2c8>)
 80047c4:	f013 fb46 	bl	8017e54 <__cxa_guard_release>
 80047c8:	489d      	ldr	r0, [pc, #628]	; (8004a40 <run_classifier_continuous+0x2d0>)
 80047ca:	f016 fc23 	bl	801b014 <atexit>
    if (!static_features_matrix.buffer) {
 80047ce:	4b9b      	ldr	r3, [pc, #620]	; (8004a3c <run_classifier_continuous+0x2cc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <run_classifier_continuous+0x6c>
        return EI_IMPULSE_ALLOC_FAILED;
 80047d6:	f06f 0407 	mvn.w	r4, #7
 80047da:	e16f      	b.n	8004abc <run_classifier_continuous+0x34c>
    }

    EI_IMPULSE_ERROR ei_impulse_error = EI_IMPULSE_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    uint64_t dsp_start_ms = ei_read_timer_ms();
 80047e2:	f009 fe15 	bl	800e410 <_Z16ei_read_timer_msv>
 80047e6:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

    size_t out_features_index = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	663b      	str	r3, [r7, #96]	; 0x60
    size_t feature_size;

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80047ee:	2300      	movs	r3, #0
 80047f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d164      	bne.n	80048c2 <run_classifier_continuous+0x152>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80047f8:	4992      	ldr	r1, [pc, #584]	; (8004a44 <run_classifier_continuous+0x2d4>)
 80047fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	18ca      	adds	r2, r1, r3
 8004806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800480a:	ca07      	ldmia	r2, {r0, r1, r2}
 800480c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004814:	4413      	add	r3, r2
 8004816:	f240 228a 	movw	r2, #650	; 0x28a
 800481a:	4293      	cmp	r3, r2
 800481c:	d905      	bls.n	800482a <run_classifier_continuous+0xba>
            ei_printf("ERR: Would write outside feature buffer\n");
 800481e:	488a      	ldr	r0, [pc, #552]	; (8004a48 <run_classifier_continuous+0x2d8>)
 8004820:	f000 febe 	bl	80055a0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8004824:	f06f 0404 	mvn.w	r4, #4
 8004828:	e147      	b.n	8004aba <run_classifier_continuous+0x34a>
        }

        ei::matrix_t fm(1, block.n_output_features,
 800482a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
                        static_features_matrix.buffer + out_features_index + slice_offset);
 800482c:	4b83      	ldr	r3, [pc, #524]	; (8004a3c <run_classifier_continuous+0x2cc>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b86      	ldr	r3, [pc, #536]	; (8004a4c <run_classifier_continuous+0x2dc>)
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004836:	440b      	add	r3, r1
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	f107 0020 	add.w	r0, r7, #32
 8004840:	462a      	mov	r2, r5
 8004842:	2101      	movs	r1, #1
 8004844:	f7fc fc96 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>

        /* Switch to the slice version of the mfcc feature extract function */
        if (block.extract_fn == extract_mfcc_features) {
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	4a81      	ldr	r2, [pc, #516]	; (8004a50 <run_classifier_continuous+0x2e0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d101      	bne.n	8004854 <run_classifier_continuous+0xe4>
            block.extract_fn = &extract_mfcc_per_slice_features;
 8004850:	4b80      	ldr	r3, [pc, #512]	; (8004a54 <run_classifier_continuous+0x2e4>)
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
        }

        int ret = block.extract_fn(signal, &fm, block.config);
 8004854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004858:	f107 0120 	add.w	r1, r7, #32
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	4798      	blx	r3
 8004860:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (ret != EIDSP_OK) {
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <run_classifier_continuous+0x108>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8004868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800486a:	487b      	ldr	r0, [pc, #492]	; (8004a58 <run_classifier_continuous+0x2e8>)
 800486c:	f000 fe98 	bl	80055a0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8004870:	f06f 0404 	mvn.w	r4, #4
 8004874:	2500      	movs	r5, #0
 8004876:	e018      	b.n	80048aa <run_classifier_continuous+0x13a>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004878:	f009 fdc2 	bl	800e400 <_Z29ei_run_impulse_check_canceledv>
 800487c:	4603      	mov	r3, r0
 800487e:	f113 0f02 	cmn.w	r3, #2
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <run_classifier_continuous+0x126>
            return EI_IMPULSE_CANCELED;
 800488e:	f06f 0401 	mvn.w	r4, #1
 8004892:	2500      	movs	r5, #0
 8004894:	e009      	b.n	80048aa <run_classifier_continuous+0x13a>
        }

        out_features_index += block.n_output_features;
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800489a:	4413      	add	r3, r2
 800489c:	663b      	str	r3, [r7, #96]	; 0x60

        feature_size = (fm.rows * fm.cols);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	65fb      	str	r3, [r7, #92]	; 0x5c
                        static_features_matrix.buffer + out_features_index + slice_offset);
 80048a8:	2501      	movs	r5, #1
 80048aa:	f107 0320 	add.w	r3, r7, #32
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc fc8c 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 80048b4:	2d01      	cmp	r5, #1
 80048b6:	f040 8100 	bne.w	8004aba <run_classifier_continuous+0x34a>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80048ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048bc:	3301      	adds	r3, #1
 80048be:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c0:	e797      	b.n	80047f2 <run_classifier_continuous+0x82>
    }

    /* For as long as the feature buffer isn't completely full, keep moving the slice offset */
    if (feature_buffer_full == false) {
 80048c2:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <run_classifier_continuous+0x2ec>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <run_classifier_continuous+0x188>
        slice_offset += feature_size;
 80048ca:	4b60      	ldr	r3, [pc, #384]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d0:	4413      	add	r3, r2
 80048d2:	4a5e      	ldr	r2, [pc, #376]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048d4:	6013      	str	r3, [r2, #0]

        if (slice_offset > (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size)) {
 80048d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d8:	f5c3 7322 	rsb	r3, r3, #648	; 0x288
 80048dc:	3302      	adds	r3, #2
 80048de:	4a5b      	ldr	r2, [pc, #364]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d208      	bcs.n	80048f8 <run_classifier_continuous+0x188>
            feature_buffer_full = true;
 80048e6:	4b5d      	ldr	r3, [pc, #372]	; (8004a5c <run_classifier_continuous+0x2ec>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
            slice_offset -= feature_size;
 80048ec:	4b57      	ldr	r3, [pc, #348]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	4a55      	ldr	r2, [pc, #340]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048f6:	6013      	str	r3, [r2, #0]
        }
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 80048f8:	f009 fd8a 	bl	800e410 <_Z16ei_read_timer_msv>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38

    if (debug) {
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d021      	beq.n	8004954 <run_classifier_continuous+0x1e4>
        ei_printf("\r\nFeatures (%d ms.): ", result->timing.dsp);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	4619      	mov	r1, r3
 8004916:	4852      	ldr	r0, [pc, #328]	; (8004a60 <run_classifier_continuous+0x2f0>)
 8004918:	f000 fe42 	bl	80055a0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
 800491c:	2300      	movs	r3, #0
 800491e:	657b      	str	r3, [r7, #84]	; 0x54
 8004920:	4b46      	ldr	r3, [pc, #280]	; (8004a3c <run_classifier_continuous+0x2cc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004926:	429a      	cmp	r2, r3
 8004928:	d211      	bcs.n	800494e <run_classifier_continuous+0x1de>
            ei_printf_float(static_features_matrix.buffer[ix]);
 800492a:	4b44      	ldr	r3, [pc, #272]	; (8004a3c <run_classifier_continuous+0x2cc>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	eeb0 0a67 	vmov.f32	s0, s15
 800493c:	f009 fd74 	bl	800e428 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8004940:	4848      	ldr	r0, [pc, #288]	; (8004a64 <run_classifier_continuous+0x2f4>)
 8004942:	f000 fe2d 	bl	80055a0 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
 8004946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004948:	3301      	adds	r3, #1
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
 800494c:	e7e8      	b.n	8004920 <run_classifier_continuous+0x1b0>
        }
        ei_printf("\n");
 800494e:	4846      	ldr	r0, [pc, #280]	; (8004a68 <run_classifier_continuous+0x2f8>)
 8004950:	f000 fe26 	bl	80055a0 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <run_classifier_continuous+0x1f0>
        ei_printf("Running neural network...\n");
 800495a:	4844      	ldr	r0, [pc, #272]	; (8004a6c <run_classifier_continuous+0x2fc>)
 800495c:	f000 fe20 	bl	80055a0 <_Z9ei_printfPKcz>
    }
#endif

    if (feature_buffer_full == true) {
 8004960:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <run_classifier_continuous+0x2ec>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	f040 80a5 	bne.w	8004ab4 <run_classifier_continuous+0x344>
        dsp_start_ms = ei_read_timer_ms();
 800496a:	f009 fd51 	bl	800e410 <_Z16ei_read_timer_msv>
 800496e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
        ei::matrix_t classify_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004972:	f107 0010 	add.w	r0, r7, #16
 8004976:	2300      	movs	r3, #0
 8004978:	f240 228a 	movw	r2, #650	; 0x28a
 800497c:	2101      	movs	r1, #1
 800497e:	f7fc fbf9 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>

        /* Create a copy of the matrix for normalization */
        for (size_t m_ix = 0; m_ix < EI_CLASSIFIER_NN_INPUT_FRAME_SIZE; m_ix++) {
 8004982:	2300      	movs	r3, #0
 8004984:	653b      	str	r3, [r7, #80]	; 0x50
 8004986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004988:	f240 2289 	movw	r2, #649	; 0x289
 800498c:	4293      	cmp	r3, r2
 800498e:	d80e      	bhi.n	80049ae <run_classifier_continuous+0x23e>
            classify_matrix.buffer[m_ix] = static_features_matrix.buffer[m_ix];
 8004990:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <run_classifier_continuous+0x2cc>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	6939      	ldr	r1, [r7, #16]
 800499c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	601a      	str	r2, [r3, #0]
        for (size_t m_ix = 0; m_ix < EI_CLASSIFIER_NN_INPUT_FRAME_SIZE; m_ix++) {
 80049a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a8:	3301      	adds	r3, #1
 80049aa:	653b      	str	r3, [r7, #80]	; 0x50
 80049ac:	e7eb      	b.n	8004986 <run_classifier_continuous+0x216>
        }

        calc_cepstral_mean_and_var_normalization(&classify_matrix, ei_dsp_blocks[0].config);
 80049ae:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <run_classifier_continuous+0x2d4>)
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f9ff 	bl	8004dbc <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv>
        result->timing.dsp += ei_read_timer_ms() - dsp_start_ms;
 80049be:	f009 fd27 	bl	800e410 <_Z16ei_read_timer_msv>
 80049c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049c6:	ebb0 0802 	subs.w	r8, r0, r2
 80049ca:	eb61 0903 	sbc.w	r9, r1, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	461a      	mov	r2, r3
 80049d4:	4643      	mov	r3, r8
 80049d6:	4413      	add	r3, r2
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38

        ei_impulse_error = run_inference(&classify_matrix, result, debug);
 80049de:	79fa      	ldrb	r2, [r7, #7]
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f870 	bl	8004acc <run_inference>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80049f2:	2300      	movs	r3, #0
 80049f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d83b      	bhi.n	8004a74 <run_classifier_continuous+0x304>
            result->classification[ix].value =
                run_moving_average_filter(&classifier_maf[ix], result->classification[ix].value);
 80049fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <run_classifier_continuous+0x300>)
 8004a02:	1899      	adds	r1, r3, r2
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	edd3 7a00 	vldr	s15, [r3]
 8004a12:	eeb0 0a67 	vmov.f32	s0, s15
 8004a16:	4608      	mov	r0, r1
 8004a18:	f7ff fe58 	bl	80046cc <run_moving_average_filter>
 8004a1c:	eef0 7a40 	vmov.f32	s15, s0
            result->classification[ix].value =
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	3304      	adds	r3, #4
 8004a2a:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a30:	3301      	adds	r3, #1
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	e7df      	b.n	80049f6 <run_classifier_continuous+0x286>
 8004a36:	bf00      	nop
 8004a38:	2000061c 	.word	0x2000061c
 8004a3c:	2000060c 	.word	0x2000060c
 8004a40:	08004761 	.word	0x08004761
 8004a44:	20000048 	.word	0x20000048
 8004a48:	0801daf0 	.word	0x0801daf0
 8004a4c:	20000604 	.word	0x20000604
 8004a50:	080041f1 	.word	0x080041f1
 8004a54:	080043fd 	.word	0x080043fd
 8004a58:	0801db1c 	.word	0x0801db1c
 8004a5c:	20000608 	.word	0x20000608
 8004a60:	0801db44 	.word	0x0801db44
 8004a64:	0801db5c 	.word	0x0801db5c
 8004a68:	0801db60 	.word	0x0801db60
 8004a6c:	0801db64 	.word	0x0801db64
 8004a70:	200005a4 	.word	0x200005a4
        }

        /* Shift the feature buffer for new data */
        for (size_t i = 0; i < (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size); i++) {
 8004a74:	2300      	movs	r3, #0
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7a:	f5c3 7322 	rsb	r3, r3, #648	; 0x288
 8004a7e:	3302      	adds	r3, #2
 8004a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d211      	bcs.n	8004aaa <run_classifier_continuous+0x33a>
            static_features_matrix.buffer[i] = static_features_matrix.buffer[i + feature_size];
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <run_classifier_continuous+0x358>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8e:	440b      	add	r3, r1
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <run_classifier_continuous+0x358>)
 8004a96:	6819      	ldr	r1, [r3, #0]
 8004a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size); i++) {
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa8:	e7e6      	b.n	8004a78 <run_classifier_continuous+0x308>
        ei::matrix_t classify_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004aaa:	f107 0310 	add.w	r3, r7, #16
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fb8c 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        }
    }
    return ei_impulse_error;
 8004ab4:	f997 4067 	ldrsb.w	r4, [r7, #103]	; 0x67
 8004ab8:	e000      	b.n	8004abc <run_classifier_continuous+0x34c>
            return EI_IMPULSE_DSP_ERROR;
 8004aba:	bf00      	nop
 8004abc:	4623      	mov	r3, r4
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3768      	adds	r7, #104	; 0x68
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ac8:	2000060c 	.word	0x2000060c

08004acc <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b092      	sub	sp, #72	; 0x48
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	71fb      	strb	r3, [r7, #7]
        if (tensor_arena == NULL) {
            ei_printf("Failed to allocate TFLite arena (%d bytes)\n", EI_CLASSIFIER_TFLITE_ARENA_SIZE);
            return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
        }
#else
        TfLiteStatus init_status = trained_model_init(ei_aligned_malloc);
 8004ada:	48a6      	ldr	r0, [pc, #664]	; (8004d74 <run_inference+0x2a8>)
 8004adc:	f011 fc36 	bl	801634c <_Z18trained_model_initPFPvjjE>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (init_status != kTfLiteOk) {
 8004ae6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <run_inference+0x34>
            ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8004aee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004af2:	4619      	mov	r1, r3
 8004af4:	48a0      	ldr	r0, [pc, #640]	; (8004d78 <run_inference+0x2ac>)
 8004af6:	f000 fd53 	bl	80055a0 <_Z9ei_printfPKcz>
            return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8004afa:	f06f 0305 	mvn.w	r3, #5
 8004afe:	e135      	b.n	8004d6c <run_inference+0x2a0>
        }
#endif
        uint64_t ctx_start_ms = ei_read_timer_ms();
 8004b00:	f009 fc86 	bl	800e410 <_Z16ei_read_timer_msv>
 8004b04:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
        // Obtain pointers to the model's input and output tensors.
        TfLiteTensor* input = interpreter.input(0);
        TfLiteTensor* output = interpreter.output(0);

#else
        TfLiteTensor* input = trained_model_input(0);
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f011 fe43 	bl	8016794 <_Z19trained_model_inputi>
 8004b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        TfLiteTensor* output = trained_model_output(0);
 8004b10:	2000      	movs	r0, #0
 8004b12:	f011 fe51 	bl	80167b8 <_Z20trained_model_outputi>
 8004b16:	62b8      	str	r0, [r7, #40]	; 0x28
#endif
        // Assert that our quantization parameters match the model
        if (tflite_first_run) {
 8004b18:	4b98      	ldr	r3, [pc, #608]	; (8004d7c <run_inference+0x2b0>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d052      	beq.n	8004bc6 <run_inference+0xfa>
            assert(input->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b09      	cmp	r3, #9
 8004b26:	d006      	beq.n	8004b36 <run_inference+0x6a>
 8004b28:	4b95      	ldr	r3, [pc, #596]	; (8004d80 <run_inference+0x2b4>)
 8004b2a:	4a96      	ldr	r2, [pc, #600]	; (8004d84 <run_inference+0x2b8>)
 8004b2c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004b30:	4895      	ldr	r0, [pc, #596]	; (8004d88 <run_inference+0x2bc>)
 8004b32:	f016 fa51 	bl	801afd8 <__assert_func>
            if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
                assert(input->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b3c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8004d8c <run_inference+0x2c0>
 8004b40:	eef4 7a47 	vcmp.f32	s15, s14
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	d006      	beq.n	8004b58 <run_inference+0x8c>
 8004b4a:	4b91      	ldr	r3, [pc, #580]	; (8004d90 <run_inference+0x2c4>)
 8004b4c:	4a8d      	ldr	r2, [pc, #564]	; (8004d84 <run_inference+0x2b8>)
 8004b4e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004b52:	488d      	ldr	r0, [pc, #564]	; (8004d88 <run_inference+0x2bc>)
 8004b54:	f016 fa40 	bl	801afd8 <__assert_func>
                assert(input->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f113 0f13 	cmn.w	r3, #19
 8004b60:	d006      	beq.n	8004b70 <run_inference+0xa4>
 8004b62:	4b8c      	ldr	r3, [pc, #560]	; (8004d94 <run_inference+0x2c8>)
 8004b64:	4a87      	ldr	r2, [pc, #540]	; (8004d84 <run_inference+0x2b8>)
 8004b66:	f240 11a5 	movw	r1, #421	; 0x1a5
 8004b6a:	4887      	ldr	r0, [pc, #540]	; (8004d88 <run_inference+0x2bc>)
 8004b6c:	f016 fa34 	bl	801afd8 <__assert_func>
            }
            assert(output->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b09      	cmp	r3, #9
 8004b76:	d006      	beq.n	8004b86 <run_inference+0xba>
 8004b78:	4b87      	ldr	r3, [pc, #540]	; (8004d98 <run_inference+0x2cc>)
 8004b7a:	4a82      	ldr	r2, [pc, #520]	; (8004d84 <run_inference+0x2b8>)
 8004b7c:	f240 11a7 	movw	r1, #423	; 0x1a7
 8004b80:	4881      	ldr	r0, [pc, #516]	; (8004d88 <run_inference+0x2bc>)
 8004b82:	f016 fa29 	bl	801afd8 <__assert_func>
            if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
                assert(output->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b8c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004d9c <run_inference+0x2d0>
 8004b90:	eef4 7a47 	vcmp.f32	s15, s14
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d006      	beq.n	8004ba8 <run_inference+0xdc>
 8004b9a:	4b81      	ldr	r3, [pc, #516]	; (8004da0 <run_inference+0x2d4>)
 8004b9c:	4a79      	ldr	r2, [pc, #484]	; (8004d84 <run_inference+0x2b8>)
 8004b9e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8004ba2:	4879      	ldr	r0, [pc, #484]	; (8004d88 <run_inference+0x2bc>)
 8004ba4:	f016 fa18 	bl	801afd8 <__assert_func>
                assert(output->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004bb0:	d006      	beq.n	8004bc0 <run_inference+0xf4>
 8004bb2:	4b7c      	ldr	r3, [pc, #496]	; (8004da4 <run_inference+0x2d8>)
 8004bb4:	4a73      	ldr	r2, [pc, #460]	; (8004d84 <run_inference+0x2b8>)
 8004bb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004bba:	4873      	ldr	r0, [pc, #460]	; (8004d88 <run_inference+0x2bc>)
 8004bbc:	f016 fa0c 	bl	801afd8 <__assert_func>
            }
            tflite_first_run = false;
 8004bc0:	4b6e      	ldr	r3, [pc, #440]	; (8004d7c <run_inference+0x2b0>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
        // =====
        // Initialization code done
        // =====

        // Place our calculated x value in the model's input tensor
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6892      	ldr	r2, [r2, #8]
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d239      	bcs.n	8004c60 <run_inference+0x194>
            // Quantize the input if it is int8
            if (int8_input) {
 8004bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d025      	beq.n	8004c40 <run_inference+0x174>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	ed93 7a00 	vldr	s14, [r3]
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c0c:	eeb0 0a66 	vmov.f32	s0, s13
 8004c10:	f7fc fa58 	bl	80010c4 <_ZSt5roundf>
 8004c14:	eeb0 7a40 	vmov.f32	s14, s0
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	4413      	add	r3, r2
 8004c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c34:	edc7 7a00 	vstr	s15, [r7]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b252      	sxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e00b      	b.n	8004c58 <run_inference+0x18c>
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8004c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5e:	e7bc      	b.n	8004bda <run_inference+0x10e>
            error_reporter->Report("Invoke failed (%d)\n", invoke_status);
            ei_aligned_free(tensor_arena);
            return EI_IMPULSE_TFLITE_ERROR;
        }
#else
        trained_model_invoke();
 8004c60:	f011 fdbc 	bl	80167dc <_Z20trained_model_invokev>
#endif

        uint64_t ctx_end_ms = ei_read_timer_ms();
 8004c64:	f009 fbd4 	bl	800e410 <_Z16ei_read_timer_msv>
 8004c68:	e9c7 0106 	strd	r0, r1, [r7, #24]

        result->timing.classification = ctx_end_ms - ctx_start_ms;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	63da      	str	r2, [r3, #60]	; 0x3c

        // Read the predicted y value from the model's output tensor
        if (debug) {
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <run_inference+0x1be>
            ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	4619      	mov	r1, r3
 8004c84:	4848      	ldr	r0, [pc, #288]	; (8004da8 <run_inference+0x2dc>)
 8004c86:	f000 fc8b 	bl	80055a0 <_Z9ei_printfPKcz>
        }
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]
        for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004c98:	2300      	movs	r3, #0
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d844      	bhi.n	8004d2c <run_inference+0x260>
            float value;
            // Dequantize the output if it is int8
            if (int8_output) {
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <run_inference+0x208>
                value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cae:	4413      	add	r3, r2
 8004cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8004cd2:	e006      	b.n	8004ce2 <run_inference+0x216>
            } else {
                value = output->data.f[ix];
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if (debug) {
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00e      	beq.n	8004d06 <run_inference+0x23a>
                ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8004ce8:	4a30      	ldr	r2, [pc, #192]	; (8004dac <run_inference+0x2e0>)
 8004cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	482f      	ldr	r0, [pc, #188]	; (8004db0 <run_inference+0x2e4>)
 8004cf4:	f000 fc54 	bl	80055a0 <_Z9ei_printfPKcz>
                ei_printf_float(value);
 8004cf8:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004cfc:	f009 fb94 	bl	800e428 <_Z15ei_printf_floatf>
                ei_printf("\n");
 8004d00:	482c      	ldr	r0, [pc, #176]	; (8004db4 <run_inference+0x2e8>)
 8004d02:	f000 fc4d 	bl	80055a0 <_Z9ei_printfPKcz>
            }
            result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8004d06:	4a29      	ldr	r2, [pc, #164]	; (8004dac <run_inference+0x2e0>)
 8004d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            result->classification[ix].value = value;
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3304      	adds	r3, #4
 8004d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d22:	601a      	str	r2, [r3, #0]
        for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d26:	3301      	adds	r3, #1
 8004d28:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2a:	e7b7      	b.n	8004c9c <run_inference+0x1d0>
        }

#if (EI_CLASSIFIER_COMPILED != 1)
        ei_aligned_free(tensor_arena);
#else
        trained_model_reset(ei_aligned_free);
 8004d2c:	4822      	ldr	r0, [pc, #136]	; (8004db8 <run_inference+0x2ec>)
 8004d2e:	f011 fd8b 	bl	8016848 <_Z19trained_model_resetPFvPvE>
#endif

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004d32:	f009 fb65 	bl	800e400 <_Z29ei_run_impulse_check_canceledv>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f113 0f02 	cmn.w	r3, #2
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <run_inference+0x282>
            return EI_IMPULSE_CANCELED;
 8004d48:	f06f 0301 	mvn.w	r3, #1
 8004d4c:	e00e      	b.n	8004d6c <run_inference+0x2a0>
        result->anomaly = anomaly;
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004d4e:	f009 fb57 	bl	800e400 <_Z29ei_run_impulse_check_canceledv>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f113 0f02 	cmn.w	r3, #2
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <run_inference+0x29e>
        return EI_IMPULSE_CANCELED;
 8004d64:	f06f 0301 	mvn.w	r3, #1
 8004d68:	e000      	b.n	8004d6c <run_inference+0x2a0>
    }

    return EI_IMPULSE_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3748      	adds	r7, #72	; 0x48
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	08004601 	.word	0x08004601
 8004d78:	0801db80 	.word	0x0801db80
 8004d7c:	20000054 	.word	0x20000054
 8004d80:	0801dbb4 	.word	0x0801dbb4
 8004d84:	0801dbe8 	.word	0x0801dbe8
 8004d88:	0801dc40 	.word	0x0801dc40
 8004d8c:	3d2f191c 	.word	0x3d2f191c
 8004d90:	0801dc98 	.word	0x0801dc98
 8004d94:	0801dcd0 	.word	0x0801dcd0
 8004d98:	0801dd14 	.word	0x0801dd14
 8004d9c:	3b800000 	.word	0x3b800000
 8004da0:	0801dd4c 	.word	0x0801dd4c
 8004da4:	0801dd88 	.word	0x0801dd88
 8004da8:	0801ddcc 	.word	0x0801ddcc
 8004dac:	20000000 	.word	0x20000000
 8004db0:	0801ddec 	.word	0x0801ddec
 8004db4:	0801db60 	.word	0x0801db60
 8004db8:	08004685 	.word	0x08004685

08004dbc <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv>:
 *
 * @param      matrix      Source and destination matrix
 * @param      config_ptr  ei_dsp_config_mfcc_t struct pointer
 */
static void calc_cepstral_mean_and_var_normalization(ei_matrix *matrix, void *config_ptr)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
    ei_dsp_config_mfcc_t *config = (ei_dsp_config_mfcc_t *)config_ptr;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]

    /* Modify rows and colums ration for matrix normalization */
    matrix->rows = EI_CLASSIFIER_NN_INPUT_FRAME_SIZE / config->num_cepstral;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f240 228a 	movw	r2, #650	; 0x28a
 8004dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]
    matrix->cols = config->num_cepstral;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]

    // cepstral mean and variance normalization
    int ret = speechpy::processing::cmvnw(matrix, config->win_size, true);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2201      	movs	r2, #1
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fe fa39 	bl	8003268 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb>
 8004df6:	60b8      	str	r0, [r7, #8]
    if (ret != EIDSP_OK) {
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00f      	beq.n	8004e1e <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x62>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	480c      	ldr	r0, [pc, #48]	; (8004e34 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x78>)
 8004e02:	f000 fbcd 	bl	80055a0 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8004e06:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x7c>)
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	480c      	ldr	r0, [pc, #48]	; (8004e3c <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x80>)
 8004e0c:	f016 fdc8 	bl	801b9a0 <iprintf>
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x84>)
 8004e12:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x88>)
 8004e14:	f240 21de 	movw	r1, #734	; 0x2de
 8004e18:	480b      	ldr	r0, [pc, #44]	; (8004e48 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x8c>)
 8004e1a:	f016 f8dd 	bl	801afd8 <__assert_func>
    }

    /* Reset rows and columns ratio */
    matrix->rows = 1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	605a      	str	r2, [r3, #4]
    matrix->cols = EI_CLASSIFIER_NN_INPUT_FRAME_SIZE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f240 228a 	movw	r2, #650	; 0x28a
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	0801d8e8 	.word	0x0801d8e8
 8004e38:	0801c918 	.word	0x0801c918
 8004e3c:	0801c7b4 	.word	0x0801c7b4
 8004e40:	0801c7c4 	.word	0x0801c7c4
 8004e44:	0801de08 	.word	0x0801de08
 8004e48:	0801dc40 	.word	0x0801dc40

08004e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b09d      	sub	sp, #116	; 0x74
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef hal_res;
	int print_results = -(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW);
 8004e52:	f06f 0303 	mvn.w	r3, #3
 8004e56:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t timestamp = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e5c:	f001 fe10 	bl	8006a80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e60:	f000 f916 	bl	8005090 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e64:	f000 fa5c 	bl	8005320 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004e68:	f000 fa3a 	bl	80052e0 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8004e6c:	f000 fa0a 	bl	8005284 <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 8004e70:	f000 f9b2 	bl	80051d8 <_ZL11MX_CRC_Initv>
  MX_SAI1_Init();
 8004e74:	f000 f9c8 	bl	8005208 <_ZL12MX_SAI1_Initv>
  /* USER CODE BEGIN 2 */

  // Say some stuff
  ei_printf("Inferencing settings:\r\n");
 8004e78:	4871      	ldr	r0, [pc, #452]	; (8005040 <main+0x1f4>)
 8004e7a:	f000 fb91 	bl	80055a0 <_Z9ei_printfPKcz>
  ei_printf("\tInterval: %.2f ms.\r\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	4b70      	ldr	r3, [pc, #448]	; (8005044 <main+0x1f8>)
 8004e84:	4870      	ldr	r0, [pc, #448]	; (8005048 <main+0x1fc>)
 8004e86:	f000 fb8b 	bl	80055a0 <_Z9ei_printfPKcz>
  ei_printf("\tFrame size: %d\r\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 8004e8a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8004e8e:	486f      	ldr	r0, [pc, #444]	; (800504c <main+0x200>)
 8004e90:	f000 fb86 	bl	80055a0 <_Z9ei_printfPKcz>
  ei_printf("\tSample length: %d ms.\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 8004e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e98:	486d      	ldr	r0, [pc, #436]	; (8005050 <main+0x204>)
 8004e9a:	f000 fb81 	bl	80055a0 <_Z9ei_printfPKcz>
  ei_printf("\tNo. of classes: %d\r\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 8004e9e:	2106      	movs	r1, #6
 8004ea0:	486c      	ldr	r0, [pc, #432]	; (8005054 <main+0x208>)
 8004ea2:	f000 fb7d 	bl	80055a0 <_Z9ei_printfPKcz>

  // Create double buffer
  inference.buffers[0] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 8004ea6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004eaa:	f016 f983 	bl	801b1b4 <malloc>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b69      	ldr	r3, [pc, #420]	; (8005058 <main+0x20c>)
 8004eb4:	601a      	str	r2, [r3, #0]
  if(inference.buffers[0] == NULL)
 8004eb6:	4b68      	ldr	r3, [pc, #416]	; (8005058 <main+0x20c>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <main+0x78>
  {
    ei_printf("ERROR: Could not create buffer 1. Likely ran out of heap memory.\r\n");
 8004ebe:	4867      	ldr	r0, [pc, #412]	; (800505c <main+0x210>)
 8004ec0:	f000 fb6e 	bl	80055a0 <_Z9ei_printfPKcz>
  }
  inference.buffers[1] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 8004ec4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004ec8:	f016 f974 	bl	801b1b4 <malloc>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4b61      	ldr	r3, [pc, #388]	; (8005058 <main+0x20c>)
 8004ed2:	605a      	str	r2, [r3, #4]
  if(inference.buffers[1] == NULL)
 8004ed4:	4b60      	ldr	r3, [pc, #384]	; (8005058 <main+0x20c>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d102      	bne.n	8004ee2 <main+0x96>
  {
    ei_printf("ERROR: Could not create buffer 2. Likely ran out of heap memory.\r\n");
 8004edc:	4860      	ldr	r0, [pc, #384]	; (8005060 <main+0x214>)
 8004ede:	f000 fb5f 	bl	80055a0 <_Z9ei_printfPKcz>
  }

  // Set inference parameters
  inference.buf_select = 0;
 8004ee2:	4b5d      	ldr	r3, [pc, #372]	; (8005058 <main+0x20c>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	721a      	strb	r2, [r3, #8]
  inference.buf_count  = 0;
 8004ee8:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <main+0x20c>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	60da      	str	r2, [r3, #12]
  inference.n_samples  = EI_CLASSIFIER_SLICE_SIZE;
 8004eee:	4b5a      	ldr	r3, [pc, #360]	; (8005058 <main+0x20c>)
 8004ef0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004ef4:	611a      	str	r2, [r3, #16]
  inference.buf_ready  = 0;
 8004ef6:	4b58      	ldr	r3, [pc, #352]	; (8005058 <main+0x20c>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	725a      	strb	r2, [r3, #9]

  // Start receiving I2S audio data
  hal_res =  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)i2s_buf, I2S_BUF_LEN);
 8004efc:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8004f00:	4958      	ldr	r1, [pc, #352]	; (8005064 <main+0x218>)
 8004f02:	4859      	ldr	r0, [pc, #356]	; (8005068 <main+0x21c>)
 8004f04:	f004 f996 	bl	8009234 <HAL_SAI_Receive_DMA>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  if (hal_res != HAL_OK)
 8004f0e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <main+0xd0>
  {
    ei_printf("ERROR: Could not initialize I2S microphone.\r\n");
 8004f16:	4855      	ldr	r0, [pc, #340]	; (800506c <main+0x220>)
 8004f18:	f000 fb42 	bl	80055a0 <_Z9ei_printfPKcz>
  }

  // Start doing inference
  record_ready = true;
 8004f1c:	4b54      	ldr	r3, [pc, #336]	; (8005070 <main+0x224>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Wait until buffer is full
	  bool m = ei_microphone_inference_record();
 8004f22:	f000 fa6d 	bl	8005400 <_Z30ei_microphone_inference_recordv>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	  if (!m)
 8004f2c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8004f30:	f083 0301 	eor.w	r3, r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <main+0xf6>
	  {
		ei_printf("ERROR: Audio buffer overrun\r\n");
 8004f3a:	484e      	ldr	r0, [pc, #312]	; (8005074 <main+0x228>)
 8004f3c:	f000 fb30 	bl	80055a0 <_Z9ei_printfPKcz>
		break;
 8004f40:	e076      	b.n	8005030 <main+0x1e4>
	  }

	  // Do classification (i.e. the inference part)
	  signal_t signal;
 8004f42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f937 	bl	80041ba <_ZN2ei11ei_signal_tC1Ev>
	  signal.total_length = EI_CLASSIFIER_SLICE_SIZE;
 8004f4c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004f50:	65bb      	str	r3, [r7, #88]	; 0x58
	  signal.get_data = &get_audio_signal_data;
 8004f52:	4b49      	ldr	r3, [pc, #292]	; (8005078 <main+0x22c>)
 8004f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f56:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fc63 	bl	800582c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
	  ei_impulse_result_t result = { 0 };
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	2244      	movs	r2, #68	; 0x44
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f016 f967 	bl	801b240 <memset>
	  EI_IMPULSE_ERROR r = run_classifier_continuous(&signal, &result, debug_nn);
 8004f72:	4b42      	ldr	r3, [pc, #264]	; (800507c <main+0x230>)
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	1d39      	adds	r1, r7, #4
 8004f78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fbf7 	bl	8004770 <run_classifier_continuous>
 8004f82:	4603      	mov	r3, r0
 8004f84:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	  if (r != EI_IMPULSE_OK)
 8004f88:	f997 3061 	ldrsb.w	r3, [r7, #97]	; 0x61
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <main+0x154>
	  {
		  ei_printf("ERROR: Failed to run classifier (%d)\r\n", r);
 8004f90:	f997 3061 	ldrsb.w	r3, [r7, #97]	; 0x61
 8004f94:	4619      	mov	r1, r3
 8004f96:	483a      	ldr	r0, [pc, #232]	; (8005080 <main+0x234>)
 8004f98:	f000 fb02 	bl	80055a0 <_Z9ei_printfPKcz>
 8004f9c:	2400      	movs	r4, #0
		  break;
 8004f9e:	e03f      	b.n	8005020 <main+0x1d4>
	  }

	  // Print output predictions (once every 4 predictions)
	  if(++print_results >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1))
 8004fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	bfcc      	ite	gt
 8004fac:	2301      	movgt	r3, #1
 8004fae:	2300      	movle	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d027      	beq.n	8005006 <main+0x1ba>
	  {
		// Comment this section out if you don't want to see the raw scores
		ei_printf("Predictions (DSP: %d ms, NN: %d ms)\r\n", result.timing.dsp, result.timing.classification);
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fba:	4619      	mov	r1, r3
 8004fbc:	4831      	ldr	r0, [pc, #196]	; (8005084 <main+0x238>)
 8004fbe:	f000 faef 	bl	80055a0 <_Z9ei_printfPKcz>
		for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d81a      	bhi.n	8005002 <main+0x1b6>
		{
			ei_printf("    %s: %.5f\r\n", result.classification[ix].label, result.classification[ix].value);
 8004fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f853 4c6c 	ldr.w	r4, [r3, #-108]
 8004fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3b68      	subs	r3, #104	; 0x68
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fb facd 	bl	8000588 <__aeabi_f2d>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	4824      	ldr	r0, [pc, #144]	; (8005088 <main+0x23c>)
 8004ff6:	f000 fad3 	bl	80055a0 <_Z9ei_printfPKcz>
		for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 8004ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005000:	e7e1      	b.n	8004fc6 <main+0x17a>
		}
		print_results = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	66fb      	str	r3, [r7, #108]	; 0x6c
	  }

	  // Example: print if "yes" is above 0.5 threshold
	  if (result.classification[3].value > 0.5)
 8005006:	edd7 7a08 	vldr	s15, [r7, #32]
 800500a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800500e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005016:	dd02      	ble.n	800501e <main+0x1d2>
	  {
		 ei_printf("YES!\r\n");
 8005018:	481c      	ldr	r0, [pc, #112]	; (800508c <main+0x240>)
 800501a:	f000 fac1 	bl	80055a0 <_Z9ei_printfPKcz>
	  signal_t signal;
 800501e:	2401      	movs	r4, #1
 8005020:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8005024:	4618      	mov	r0, r3
 8005026:	f7ff f8d5 	bl	80041d4 <_ZN2ei11ei_signal_tD1Ev>
 800502a:	2c01      	cmp	r4, #1
 800502c:	d100      	bne.n	8005030 <main+0x1e4>
	  }

    /* USER CODE BEGIN 3 */
  }
 800502e:	e778      	b.n	8004f22 <main+0xd6>

  ei_microphone_inference_end();
 8005030:	f000 fa10 	bl	8005454 <_Z27ei_microphone_inference_endv>
  /* USER CODE END 3 */
}
 8005034:	2300      	movs	r3, #0
 8005036:	4618      	mov	r0, r3
 8005038:	3774      	adds	r7, #116	; 0x74
 800503a:	46bd      	mov	sp, r7
 800503c:	bd90      	pop	{r4, r7, pc}
 800503e:	bf00      	nop
 8005040:	0801de84 	.word	0x0801de84
 8005044:	3fb00000 	.word	0x3fb00000
 8005048:	0801de9c 	.word	0x0801de9c
 800504c:	0801deb4 	.word	0x0801deb4
 8005050:	0801dec8 	.word	0x0801dec8
 8005054:	0801dee4 	.word	0x0801dee4
 8005058:	20006b58 	.word	0x20006b58
 800505c:	0801defc 	.word	0x0801defc
 8005060:	0801df40 	.word	0x0801df40
 8005064:	20000758 	.word	0x20000758
 8005068:	20000628 	.word	0x20000628
 800506c:	0801df84 	.word	0x0801df84
 8005070:	20006b6c 	.word	0x20006b6c
 8005074:	0801dfb4 	.word	0x0801dfb4
 8005078:	08005515 	.word	0x08005515
 800507c:	20000754 	.word	0x20000754
 8005080:	0801dfd4 	.word	0x0801dfd4
 8005084:	0801dffc 	.word	0x0801dffc
 8005088:	0801e024 	.word	0x0801e024
 800508c:	0801e034 	.word	0x0801e034

08005090 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005090:	b580      	push	{r7, lr}
 8005092:	b0ac      	sub	sp, #176	; 0xb0
 8005094:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005096:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800509a:	2234      	movs	r2, #52	; 0x34
 800509c:	2100      	movs	r1, #0
 800509e:	4618      	mov	r0, r3
 80050a0:	f016 f8ce 	bl	801b240 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80050a4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80050a8:	2200      	movs	r2, #0
 80050aa:	601a      	str	r2, [r3, #0]
 80050ac:	605a      	str	r2, [r3, #4]
 80050ae:	609a      	str	r2, [r3, #8]
 80050b0:	60da      	str	r2, [r3, #12]
 80050b2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80050b4:	f107 030c 	add.w	r3, r7, #12
 80050b8:	225c      	movs	r2, #92	; 0x5c
 80050ba:	2100      	movs	r1, #0
 80050bc:	4618      	mov	r0, r3
 80050be:	f016 f8bf 	bl	801b240 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050c2:	2300      	movs	r3, #0
 80050c4:	60bb      	str	r3, [r7, #8]
 80050c6:	4b42      	ldr	r3, [pc, #264]	; (80051d0 <_Z18SystemClock_Configv+0x140>)
 80050c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ca:	4a41      	ldr	r2, [pc, #260]	; (80051d0 <_Z18SystemClock_Configv+0x140>)
 80050cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6413      	str	r3, [r2, #64]	; 0x40
 80050d2:	4b3f      	ldr	r3, [pc, #252]	; (80051d0 <_Z18SystemClock_Configv+0x140>)
 80050d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050da:	60bb      	str	r3, [r7, #8]
 80050dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80050de:	2300      	movs	r3, #0
 80050e0:	607b      	str	r3, [r7, #4]
 80050e2:	4b3c      	ldr	r3, [pc, #240]	; (80051d4 <_Z18SystemClock_Configv+0x144>)
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80050ea:	4a3a      	ldr	r2, [pc, #232]	; (80051d4 <_Z18SystemClock_Configv+0x144>)
 80050ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	4b38      	ldr	r3, [pc, #224]	; (80051d4 <_Z18SystemClock_Configv+0x144>)
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050fa:	607b      	str	r3, [r7, #4]
 80050fc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80050fe:	2302      	movs	r3, #2
 8005100:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005102:	2301      	movs	r3, #1
 8005104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005108:	2310      	movs	r3, #16
 800510a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800510e:	2302      	movs	r3, #2
 8005110:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005114:	2300      	movs	r3, #0
 8005116:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 800511a:	2308      	movs	r3, #8
 800511c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8005120:	2350      	movs	r3, #80	; 0x50
 8005122:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005126:	2302      	movs	r3, #2
 8005128:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800512c:	2302      	movs	r3, #2
 800512e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005132:	2302      	movs	r3, #2
 8005134:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005138:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800513c:	4618      	mov	r0, r3
 800513e:	f003 fc0b 	bl	8008958 <HAL_RCC_OscConfig>
 8005142:	4603      	mov	r3, r0
 8005144:	2b00      	cmp	r3, #0
 8005146:	bf14      	ite	ne
 8005148:	2301      	movne	r3, #1
 800514a:	2300      	moveq	r3, #0
 800514c:	b2db      	uxtb	r3, r3
 800514e:	2b00      	cmp	r3, #0
 8005150:	d001      	beq.n	8005156 <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8005152:	f000 fa5f 	bl	8005614 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005156:	230f      	movs	r3, #15
 8005158:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800515a:	2302      	movs	r3, #2
 800515c:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800515e:	2300      	movs	r3, #0
 8005160:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005162:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005166:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8005168:	2300      	movs	r3, #0
 800516a:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800516c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005170:	2102      	movs	r1, #2
 8005172:	4618      	mov	r0, r3
 8005174:	f002 fbb2 	bl	80078dc <HAL_RCC_ClockConfig>
 8005178:	4603      	mov	r3, r0
 800517a:	2b00      	cmp	r3, #0
 800517c:	bf14      	ite	ne
 800517e:	2301      	movne	r3, #1
 8005180:	2300      	moveq	r3, #0
 8005182:	b2db      	uxtb	r3, r3
 8005184:	2b00      	cmp	r3, #0
 8005186:	d001      	beq.n	800518c <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 8005188:	f000 fa44 	bl	8005614 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800518c:	2304      	movs	r3, #4
 800518e:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8005190:	2308      	movs	r3, #8
 8005192:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8005194:	2332      	movs	r3, #50	; 0x32
 8005196:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 8005198:	2302      	movs	r3, #2
 800519a:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 800519c:	2302      	movs	r3, #2
 800519e:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 80051a0:	2301      	movs	r3, #1
 80051a2:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 80051a4:	2300      	movs	r3, #0
 80051a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80051a8:	f107 030c 	add.w	r3, r7, #12
 80051ac:	4618      	mov	r0, r3
 80051ae:	f002 fcaf 	bl	8007b10 <HAL_RCCEx_PeriphCLKConfig>
 80051b2:	4603      	mov	r3, r0
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bf14      	ite	ne
 80051b8:	2301      	movne	r3, #1
 80051ba:	2300      	moveq	r3, #0
 80051bc:	b2db      	uxtb	r3, r3
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
 80051c2:	f000 fa27 	bl	8005614 <Error_Handler>
  }
}
 80051c6:	bf00      	nop
 80051c8:	37b0      	adds	r7, #176	; 0xb0
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	40023800 	.word	0x40023800
 80051d4:	40007000 	.word	0x40007000

080051d8 <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80051d8:	b580      	push	{r7, lr}
 80051da:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80051dc:	4b08      	ldr	r3, [pc, #32]	; (8005200 <_ZL11MX_CRC_Initv+0x28>)
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <_ZL11MX_CRC_Initv+0x2c>)
 80051e0:	601a      	str	r2, [r3, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80051e2:	4807      	ldr	r0, [pc, #28]	; (8005200 <_ZL11MX_CRC_Initv+0x28>)
 80051e4:	f001 fdcf 	bl	8006d86 <HAL_CRC_Init>
 80051e8:	4603      	mov	r3, r0
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	bf14      	ite	ne
 80051ee:	2301      	movne	r3, #1
 80051f0:	2300      	moveq	r3, #0
 80051f2:	b2db      	uxtb	r3, r3
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d001      	beq.n	80051fc <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80051f8:	f000 fa0c 	bl	8005614 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80051fc:	bf00      	nop
 80051fe:	bd80      	pop	{r7, pc}
 8005200:	20000620 	.word	0x20000620
 8005204:	40023000 	.word	0x40023000

08005208 <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 800520c:	4b1b      	ldr	r3, [pc, #108]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 800520e:	4a1c      	ldr	r2, [pc, #112]	; (8005280 <_ZL12MX_SAI1_Initv+0x78>)
 8005210:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_RX;
 8005212:	4b1a      	ldr	r3, [pc, #104]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 8005214:	2201      	movs	r2, #1
 8005216:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 8005218:	4b18      	ldr	r3, [pc, #96]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 800521a:	2200      	movs	r2, #0
 800521c:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 800521e:	4b17      	ldr	r3, [pc, #92]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 8005220:	2200      	movs	r2, #0
 8005222:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005224:	4b15      	ldr	r3, [pc, #84]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 8005226:	2200      	movs	r2, #0
 8005228:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800522a:	4b14      	ldr	r3, [pc, #80]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 800522c:	2200      	movs	r2, #0
 800522e:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8005230:	4b12      	ldr	r3, [pc, #72]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 8005232:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005236:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_32K;
 8005238:	4b10      	ldr	r3, [pc, #64]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 800523a:	f44f 42fa 	mov.w	r2, #32000	; 0x7d00
 800523e:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 8005242:	2200      	movs	r2, #0
 8005244:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8005246:	4b0d      	ldr	r3, [pc, #52]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 8005248:	2200      	movs	r2, #0
 800524a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 800524e:	2200      	movs	r2, #0
 8005250:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005252:	4b0a      	ldr	r3, [pc, #40]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 8005254:	2200      	movs	r2, #0
 8005256:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_24BIT, 2) != HAL_OK)
 8005258:	2302      	movs	r3, #2
 800525a:	2202      	movs	r2, #2
 800525c:	2100      	movs	r1, #0
 800525e:	4807      	ldr	r0, [pc, #28]	; (800527c <_ZL12MX_SAI1_Initv+0x74>)
 8005260:	f003 fe18 	bl	8008e94 <HAL_SAI_InitProtocol>
 8005264:	4603      	mov	r3, r0
 8005266:	2b00      	cmp	r3, #0
 8005268:	bf14      	ite	ne
 800526a:	2301      	movne	r3, #1
 800526c:	2300      	moveq	r3, #0
 800526e:	b2db      	uxtb	r3, r3
 8005270:	2b00      	cmp	r3, #0
 8005272:	d001      	beq.n	8005278 <_ZL12MX_SAI1_Initv+0x70>
  {
    Error_Handler();
 8005274:	f000 f9ce 	bl	8005614 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 8005278:	bf00      	nop
 800527a:	bd80      	pop	{r7, pc}
 800527c:	20000628 	.word	0x20000628
 8005280:	40015824 	.word	0x40015824

08005284 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005288:	4b13      	ldr	r3, [pc, #76]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800528a:	4a14      	ldr	r2, [pc, #80]	; (80052dc <_ZL19MX_USART2_UART_Initv+0x58>)
 800528c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800528e:	4b12      	ldr	r3, [pc, #72]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8005294:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005296:	4b10      	ldr	r3, [pc, #64]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005298:	2200      	movs	r2, #0
 800529a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800529c:	4b0e      	ldr	r3, [pc, #56]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 800529e:	2200      	movs	r2, #0
 80052a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80052a2:	4b0d      	ldr	r3, [pc, #52]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80052a8:	4b0b      	ldr	r3, [pc, #44]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80052aa:	220c      	movs	r2, #12
 80052ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80052ae:	4b0a      	ldr	r3, [pc, #40]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80052b0:	2200      	movs	r2, #0
 80052b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80052b4:	4b08      	ldr	r3, [pc, #32]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80052b6:	2200      	movs	r2, #0
 80052b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052ba:	4807      	ldr	r0, [pc, #28]	; (80052d8 <_ZL19MX_USART2_UART_Initv+0x54>)
 80052bc:	f004 fac6 	bl	800984c <HAL_UART_Init>
 80052c0:	4603      	mov	r3, r0
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	bf14      	ite	ne
 80052c6:	2301      	movne	r3, #1
 80052c8:	2300      	moveq	r3, #0
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d001      	beq.n	80052d4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80052d0:	f000 f9a0 	bl	8005614 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052d4:	bf00      	nop
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	20000710 	.word	0x20000710
 80052dc:	40004400 	.word	0x40004400

080052e0 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b082      	sub	sp, #8
 80052e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80052e6:	2300      	movs	r3, #0
 80052e8:	607b      	str	r3, [r7, #4]
 80052ea:	4b0c      	ldr	r3, [pc, #48]	; (800531c <_ZL11MX_DMA_Initv+0x3c>)
 80052ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ee:	4a0b      	ldr	r2, [pc, #44]	; (800531c <_ZL11MX_DMA_Initv+0x3c>)
 80052f0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052f4:	6313      	str	r3, [r2, #48]	; 0x30
 80052f6:	4b09      	ldr	r3, [pc, #36]	; (800531c <_ZL11MX_DMA_Initv+0x3c>)
 80052f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052fe:	607b      	str	r3, [r7, #4]
 8005300:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	203c      	movs	r0, #60	; 0x3c
 8005308:	f001 fd07 	bl	8006d1a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 800530c:	203c      	movs	r0, #60	; 0x3c
 800530e:	f001 fd20 	bl	8006d52 <HAL_NVIC_EnableIRQ>

}
 8005312:	bf00      	nop
 8005314:	3708      	adds	r7, #8
 8005316:	46bd      	mov	sp, r7
 8005318:	bd80      	pop	{r7, pc}
 800531a:	bf00      	nop
 800531c:	40023800 	.word	0x40023800

08005320 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08a      	sub	sp, #40	; 0x28
 8005324:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005326:	f107 0314 	add.w	r3, r7, #20
 800532a:	2200      	movs	r2, #0
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	605a      	str	r2, [r3, #4]
 8005330:	609a      	str	r2, [r3, #8]
 8005332:	60da      	str	r2, [r3, #12]
 8005334:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005336:	2300      	movs	r3, #0
 8005338:	613b      	str	r3, [r7, #16]
 800533a:	4b2d      	ldr	r3, [pc, #180]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	4a2c      	ldr	r2, [pc, #176]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005340:	f043 0304 	orr.w	r3, r3, #4
 8005344:	6313      	str	r3, [r2, #48]	; 0x30
 8005346:	4b2a      	ldr	r3, [pc, #168]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534a:	f003 0304 	and.w	r3, r3, #4
 800534e:	613b      	str	r3, [r7, #16]
 8005350:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005352:	2300      	movs	r3, #0
 8005354:	60fb      	str	r3, [r7, #12]
 8005356:	4b26      	ldr	r3, [pc, #152]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535a:	4a25      	ldr	r2, [pc, #148]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 800535c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005360:	6313      	str	r3, [r2, #48]	; 0x30
 8005362:	4b23      	ldr	r3, [pc, #140]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005364:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005366:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536a:	60fb      	str	r3, [r7, #12]
 800536c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800536e:	2300      	movs	r3, #0
 8005370:	60bb      	str	r3, [r7, #8]
 8005372:	4b1f      	ldr	r3, [pc, #124]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005376:	4a1e      	ldr	r2, [pc, #120]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005378:	f043 0301 	orr.w	r3, r3, #1
 800537c:	6313      	str	r3, [r2, #48]	; 0x30
 800537e:	4b1c      	ldr	r3, [pc, #112]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005380:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005382:	f003 0301 	and.w	r3, r3, #1
 8005386:	60bb      	str	r3, [r7, #8]
 8005388:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
 800538e:	4b18      	ldr	r3, [pc, #96]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005392:	4a17      	ldr	r2, [pc, #92]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 8005394:	f043 0302 	orr.w	r3, r3, #2
 8005398:	6313      	str	r3, [r2, #48]	; 0x30
 800539a:	4b15      	ldr	r3, [pc, #84]	; (80053f0 <_ZL12MX_GPIO_Initv+0xd0>)
 800539c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	607b      	str	r3, [r7, #4]
 80053a4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80053a6:	2200      	movs	r2, #0
 80053a8:	2120      	movs	r1, #32
 80053aa:	4812      	ldr	r0, [pc, #72]	; (80053f4 <_ZL12MX_GPIO_Initv+0xd4>)
 80053ac:	f002 fa7c 	bl	80078a8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80053b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80053b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <_ZL12MX_GPIO_Initv+0xd8>)
 80053b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80053be:	f107 0314 	add.w	r3, r7, #20
 80053c2:	4619      	mov	r1, r3
 80053c4:	480d      	ldr	r0, [pc, #52]	; (80053fc <_ZL12MX_GPIO_Initv+0xdc>)
 80053c6:	f002 f8db 	bl	8007580 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80053ca:	2320      	movs	r3, #32
 80053cc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ce:	2301      	movs	r3, #1
 80053d0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053d2:	2300      	movs	r3, #0
 80053d4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053d6:	2300      	movs	r3, #0
 80053d8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80053da:	f107 0314 	add.w	r3, r7, #20
 80053de:	4619      	mov	r1, r3
 80053e0:	4804      	ldr	r0, [pc, #16]	; (80053f4 <_ZL12MX_GPIO_Initv+0xd4>)
 80053e2:	f002 f8cd 	bl	8007580 <HAL_GPIO_Init>

}
 80053e6:	bf00      	nop
 80053e8:	3728      	adds	r7, #40	; 0x28
 80053ea:	46bd      	mov	sp, r7
 80053ec:	bd80      	pop	{r7, pc}
 80053ee:	bf00      	nop
 80053f0:	40023800 	.word	0x40023800
 80053f4:	40020000 	.word	0x40020000
 80053f8:	10210000 	.word	0x10210000
 80053fc:	40020800 	.word	0x40020800

08005400 <_Z30ei_microphone_inference_recordv>:
 * @brief      Wait for a full buffer
 *
 * @return     In case of an buffer overrun return false
 */
bool ei_microphone_inference_record(void)
{
 8005400:	b480      	push	{r7}
 8005402:	b083      	sub	sp, #12
 8005404:	af00      	add	r7, sp, #0
  bool ret = true;
 8005406:	2301      	movs	r3, #1
 8005408:	71fb      	strb	r3, [r7, #7]

  // Check to see if the buffer has overrun
  if (inference.buf_ready == 1) {
 800540a:	4b11      	ldr	r3, [pc, #68]	; (8005450 <_Z30ei_microphone_inference_recordv+0x50>)
 800540c:	7a5b      	ldrb	r3, [r3, #9]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b01      	cmp	r3, #1
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <_Z30ei_microphone_inference_recordv+0x22>
      ret = false;
 800541e:	2300      	movs	r3, #0
 8005420:	71fb      	strb	r3, [r7, #7]
  }

  // %%%TODO: make this non-blocking
  while (inference.buf_ready == 0)
 8005422:	4b0b      	ldr	r3, [pc, #44]	; (8005450 <_Z30ei_microphone_inference_recordv+0x50>)
 8005424:	7a5b      	ldrb	r3, [r3, #9]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	2b00      	cmp	r3, #0
 800542a:	bf0c      	ite	eq
 800542c:	2301      	moveq	r3, #1
 800542e:	2300      	movne	r3, #0
 8005430:	b2db      	uxtb	r3, r3
 8005432:	2b00      	cmp	r3, #0
 8005434:	d001      	beq.n	800543a <_Z30ei_microphone_inference_recordv+0x3a>
  {
    continue;
 8005436:	bf00      	nop
  while (inference.buf_ready == 0)
 8005438:	e7f3      	b.n	8005422 <_Z30ei_microphone_inference_recordv+0x22>
  }

  inference.buf_ready = 0;
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <_Z30ei_microphone_inference_recordv+0x50>)
 800543c:	2200      	movs	r2, #0
 800543e:	725a      	strb	r2, [r3, #9]

  return ret;
 8005440:	79fb      	ldrb	r3, [r7, #7]
}
 8005442:	4618      	mov	r0, r3
 8005444:	370c      	adds	r7, #12
 8005446:	46bd      	mov	sp, r7
 8005448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544c:	4770      	bx	lr
 800544e:	bf00      	nop
 8005450:	20006b58 	.word	0x20006b58

08005454 <_Z27ei_microphone_inference_endv>:
 * @brief      Stop audio sampling, release sampling buffers
 *
 * @return     false on error
 */
bool ei_microphone_inference_end(void)
{
 8005454:	b580      	push	{r7, lr}
 8005456:	af00      	add	r7, sp, #0
  // Stop I2S
  HAL_SAI_DMAStop(&hsai_BlockB1);
 8005458:	4809      	ldr	r0, [pc, #36]	; (8005480 <_Z27ei_microphone_inference_endv+0x2c>)
 800545a:	f003 fe77 	bl	800914c <HAL_SAI_DMAStop>

  // Free up double buffer
  record_ready = false;
 800545e:	4b09      	ldr	r3, [pc, #36]	; (8005484 <_Z27ei_microphone_inference_endv+0x30>)
 8005460:	2200      	movs	r2, #0
 8005462:	701a      	strb	r2, [r3, #0]
  free(inference.buffers[0]);
 8005464:	4b08      	ldr	r3, [pc, #32]	; (8005488 <_Z27ei_microphone_inference_endv+0x34>)
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	4618      	mov	r0, r3
 800546a:	f015 feab 	bl	801b1c4 <free>
  free(inference.buffers[1]);
 800546e:	4b06      	ldr	r3, [pc, #24]	; (8005488 <_Z27ei_microphone_inference_endv+0x34>)
 8005470:	685b      	ldr	r3, [r3, #4]
 8005472:	4618      	mov	r0, r3
 8005474:	f015 fea6 	bl	801b1c4 <free>

  return true;
 8005478:	2301      	movs	r3, #1
}
 800547a:	4618      	mov	r0, r3
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	20000628 	.word	0x20000628
 8005484:	20006b6c 	.word	0x20006b6c
 8005488:	20006b58 	.word	0x20006b58

0800548c <_ZL31audio_buffer_inference_callbackmm>:
 *
 * @param[in]  n_bytes  Number of bytes to copy
 * @param[in]  offset   offset in sampleBuffer
 */
static void audio_buffer_inference_callback(uint32_t n_bytes, uint32_t offset)
{
 800548c:	b490      	push	{r4, r7}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
  // Copy samples from I2S buffer to inference buffer. Convert 24-bit, 32kHz
  // samples to 16-bit, 16kHz
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 8005496:	2300      	movs	r3, #0
 8005498:	60fb      	str	r3, [r7, #12]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	085b      	lsrs	r3, r3, #1
 800549e:	68fa      	ldr	r2, [r7, #12]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d22d      	bcs.n	8005500 <_ZL31audio_buffer_inference_callbackmm+0x74>
    inference.buffers[inference.buf_select][inference.buf_count++] =
        (int16_t)(i2s_buf[offset + (I2S_BUF_SKIP * i)] >> 8);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	009a      	lsls	r2, r3, #2
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	4413      	add	r3, r2
 80054ac:	4a17      	ldr	r2, [pc, #92]	; (800550c <_ZL31audio_buffer_inference_callbackmm+0x80>)
 80054ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b2:	0a1c      	lsrs	r4, r3, #8
    inference.buffers[inference.buf_select][inference.buf_count++] =
 80054b4:	4b16      	ldr	r3, [pc, #88]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054b6:	7a1b      	ldrb	r3, [r3, #8]
 80054b8:	461a      	mov	r2, r3
 80054ba:	4b15      	ldr	r3, [pc, #84]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054bc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054c0:	4b13      	ldr	r3, [pc, #76]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054c2:	68db      	ldr	r3, [r3, #12]
 80054c4:	1c59      	adds	r1, r3, #1
 80054c6:	4812      	ldr	r0, [pc, #72]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054c8:	60c1      	str	r1, [r0, #12]
 80054ca:	005b      	lsls	r3, r3, #1
 80054cc:	4413      	add	r3, r2
 80054ce:	b222      	sxth	r2, r4
 80054d0:	801a      	strh	r2, [r3, #0]

    if (inference.buf_count >= inference.n_samples) {
 80054d2:	4b0f      	ldr	r3, [pc, #60]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054d4:	68da      	ldr	r2, [r3, #12]
 80054d6:	4b0e      	ldr	r3, [pc, #56]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d30c      	bcc.n	80054f8 <_ZL31audio_buffer_inference_callbackmm+0x6c>
      inference.buf_select ^= 1;
 80054de:	4b0c      	ldr	r3, [pc, #48]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054e0:	7a1b      	ldrb	r3, [r3, #8]
 80054e2:	f083 0301 	eor.w	r3, r3, #1
 80054e6:	b2da      	uxtb	r2, r3
 80054e8:	4b09      	ldr	r3, [pc, #36]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054ea:	721a      	strb	r2, [r3, #8]
      inference.buf_count = 0;
 80054ec:	4b08      	ldr	r3, [pc, #32]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054ee:	2200      	movs	r2, #0
 80054f0:	60da      	str	r2, [r3, #12]
      inference.buf_ready = 1;
 80054f2:	4b07      	ldr	r3, [pc, #28]	; (8005510 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054f4:	2201      	movs	r2, #1
 80054f6:	725a      	strb	r2, [r3, #9]
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	3301      	adds	r3, #1
 80054fc:	60fb      	str	r3, [r7, #12]
 80054fe:	e7cc      	b.n	800549a <_ZL31audio_buffer_inference_callbackmm+0xe>
    }
  }
}
 8005500:	bf00      	nop
 8005502:	3710      	adds	r7, #16
 8005504:	46bd      	mov	sp, r7
 8005506:	bc90      	pop	{r4, r7}
 8005508:	4770      	bx	lr
 800550a:	bf00      	nop
 800550c:	20000758 	.word	0x20000758
 8005510:	20006b58 	.word	0x20006b58

08005514 <_ZL21get_audio_signal_datajjPf>:

/**
 * Get raw audio signal data
 */
static int get_audio_signal_data(size_t offset, size_t length, float *out_ptr)
{
 8005514:	b580      	push	{r7, lr}
 8005516:	b084      	sub	sp, #16
 8005518:	af00      	add	r7, sp, #0
 800551a:	60f8      	str	r0, [r7, #12]
 800551c:	60b9      	str	r1, [r7, #8]
 800551e:	607a      	str	r2, [r7, #4]
  numpy::int16_to_float(&inference.buffers[inference.buf_select ^ 1][offset], out_ptr, length);
 8005520:	4b0a      	ldr	r3, [pc, #40]	; (800554c <_ZL21get_audio_signal_datajjPf+0x38>)
 8005522:	7a1b      	ldrb	r3, [r3, #8]
 8005524:	f083 0301 	eor.w	r3, r3, #1
 8005528:	b2db      	uxtb	r3, r3
 800552a:	461a      	mov	r2, r3
 800552c:	4b07      	ldr	r3, [pc, #28]	; (800554c <_ZL21get_audio_signal_datajjPf+0x38>)
 800552e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	005b      	lsls	r3, r3, #1
 8005536:	4413      	add	r3, r2
 8005538:	68ba      	ldr	r2, [r7, #8]
 800553a:	6879      	ldr	r1, [r7, #4]
 800553c:	4618      	mov	r0, r3
 800553e:	f7fc fe51 	bl	80021e4 <_ZN2ei5numpy14int16_to_floatEPKsPfj>

  return 0;
 8005542:	2300      	movs	r3, #0
}
 8005544:	4618      	mov	r0, r3
 8005546:	3710      	adds	r7, #16
 8005548:	46bd      	mov	sp, r7
 800554a:	bd80      	pop	{r7, pc}
 800554c:	20006b58 	.word	0x20006b58

08005550 <_Z6vprintPKcSt9__va_list>:

/**
 * Low-level print function that uses UART to print status messages.
 */
void vprint(const char *fmt, va_list argp)
{
 8005550:	b580      	push	{r7, lr}
 8005552:	b0b4      	sub	sp, #208	; 0xd0
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]
 8005558:	6039      	str	r1, [r7, #0]
  char string[200];
  if(0 < vsprintf(string, fmt, argp)) // build string
 800555a:	f107 0308 	add.w	r3, r7, #8
 800555e:	683a      	ldr	r2, [r7, #0]
 8005560:	6879      	ldr	r1, [r7, #4]
 8005562:	4618      	mov	r0, r3
 8005564:	f016 fb14 	bl	801bb90 <vsiprintf>
 8005568:	4603      	mov	r3, r0
 800556a:	2b00      	cmp	r3, #0
 800556c:	bfcc      	ite	gt
 800556e:	2301      	movgt	r3, #1
 8005570:	2300      	movle	r3, #0
 8005572:	b2db      	uxtb	r3, r3
 8005574:	2b00      	cmp	r3, #0
 8005576:	d00d      	beq.n	8005594 <_Z6vprintPKcSt9__va_list+0x44>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff);
 8005578:	f107 0308 	add.w	r3, r7, #8
 800557c:	4618      	mov	r0, r3
 800557e:	f7fa fe47 	bl	8000210 <strlen>
 8005582:	4603      	mov	r3, r0
 8005584:	b29a      	uxth	r2, r3
 8005586:	f107 0108 	add.w	r1, r7, #8
 800558a:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 800558e:	4803      	ldr	r0, [pc, #12]	; (800559c <_Z6vprintPKcSt9__va_list+0x4c>)
 8005590:	f004 f9a9 	bl	80098e6 <HAL_UART_Transmit>
  }
}
 8005594:	bf00      	nop
 8005596:	37d0      	adds	r7, #208	; 0xd0
 8005598:	46bd      	mov	sp, r7
 800559a:	bd80      	pop	{r7, pc}
 800559c:	20000710 	.word	0x20000710

080055a0 <_Z9ei_printfPKcz>:

/**
 * Wrapper for vprint. Use this like you would printf to print messages to the serial console.
 */
void ei_printf(const char *format, ...)
{
 80055a0:	b40f      	push	{r0, r1, r2, r3}
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b082      	sub	sp, #8
 80055a6:	af00      	add	r7, sp, #0
  va_list myargs;
  va_start(myargs, format);
 80055a8:	f107 0314 	add.w	r3, r7, #20
 80055ac:	607b      	str	r3, [r7, #4]
  vprint(format, myargs);
 80055ae:	6879      	ldr	r1, [r7, #4]
 80055b0:	6938      	ldr	r0, [r7, #16]
 80055b2:	f7ff ffcd 	bl	8005550 <_Z6vprintPKcSt9__va_list>
  va_end(myargs);
}
 80055b6:	bf00      	nop
 80055b8:	3708      	adds	r7, #8
 80055ba:	46bd      	mov	sp, r7
 80055bc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055c0:	b004      	add	sp, #16
 80055c2:	4770      	bx	lr

080055c4 <HAL_SAI_RxHalfCpltCallback>:

/**
 * Called when the first half of the receive buffer is full
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b082      	sub	sp, #8
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  if (record_ready == true)
 80055cc:	4b06      	ldr	r3, [pc, #24]	; (80055e8 <HAL_SAI_RxHalfCpltCallback+0x24>)
 80055ce:	781b      	ldrb	r3, [r3, #0]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d104      	bne.n	80055de <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, 0);
 80055d4:	2100      	movs	r1, #0
 80055d6:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80055da:	f7ff ff57 	bl	800548c <_ZL31audio_buffer_inference_callbackmm>
  }
}
 80055de:	bf00      	nop
 80055e0:	3708      	adds	r7, #8
 80055e2:	46bd      	mov	sp, r7
 80055e4:	bd80      	pop	{r7, pc}
 80055e6:	bf00      	nop
 80055e8:	20006b6c 	.word	0x20006b6c

080055ec <HAL_SAI_RxCpltCallback>:

/**
 * Called when the second half of the receive buffer is full
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b082      	sub	sp, #8
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
  if (record_ready == true)
 80055f4:	4b06      	ldr	r3, [pc, #24]	; (8005610 <HAL_SAI_RxCpltCallback+0x24>)
 80055f6:	781b      	ldrb	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d105      	bne.n	8005608 <HAL_SAI_RxCpltCallback+0x1c>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, I2S_BUF_LEN >> 1);
 80055fc:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8005600:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 8005604:	f7ff ff42 	bl	800548c <_ZL31audio_buffer_inference_callbackmm>
  }
}
 8005608:	bf00      	nop
 800560a:	3708      	adds	r7, #8
 800560c:	46bd      	mov	sp, r7
 800560e:	bd80      	pop	{r7, pc}
 8005610:	20006b6c 	.word	0x20006b6c

08005614 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005614:	b480      	push	{r7}
 8005616:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005618:	b672      	cpsid	i
}
 800561a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800561c:	e7fe      	b.n	800561c <Error_Handler+0x8>

0800561e <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 800561e:	b580      	push	{r7, lr}
 8005620:	b082      	sub	sp, #8
 8005622:	af00      	add	r7, sp, #0
 8005624:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f7fa ff9c 	bl	8000564 <__aeabi_i2d>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	ec43 2b10 	vmov	d0, r2, r3
 8005634:	f013 f88a 	bl	801874c <sqrt>
 8005638:	eeb0 7a40 	vmov.f32	s14, s0
 800563c:	eef0 7a60 	vmov.f32	s15, s1
 8005640:	eeb0 0a47 	vmov.f32	s0, s14
 8005644:	eef0 0a67 	vmov.f32	s1, s15
 8005648:	3708      	adds	r7, #8
 800564a:	46bd      	mov	sp, r7
 800564c:	bd80      	pop	{r7, pc}

0800564e <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 800564e:	b5b0      	push	{r4, r5, r7, lr}
 8005650:	b082      	sub	sp, #8
 8005652:	af00      	add	r7, sp, #0
 8005654:	ed87 0a01 	vstr	s0, [r7, #4]
 8005658:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 800565a:	6878      	ldr	r0, [r7, #4]
 800565c:	f7fa ff94 	bl	8000588 <__aeabi_f2d>
 8005660:	4604      	mov	r4, r0
 8005662:	460d      	mov	r5, r1
 8005664:	6838      	ldr	r0, [r7, #0]
 8005666:	f7fa ff7d 	bl	8000564 <__aeabi_i2d>
 800566a:	4602      	mov	r2, r0
 800566c:	460b      	mov	r3, r1
 800566e:	ec43 2b11 	vmov	d1, r2, r3
 8005672:	ec45 4b10 	vmov	d0, r4, r5
 8005676:	f012 ffbb 	bl	80185f0 <pow>
 800567a:	eeb0 7a40 	vmov.f32	s14, s0
 800567e:	eef0 7a60 	vmov.f32	s15, s1
    }
 8005682:	eeb0 0a47 	vmov.f32	s0, s14
 8005686:	eef0 0a67 	vmov.f32	s1, s15
 800568a:	3708      	adds	r7, #8
 800568c:	46bd      	mov	sp, r7
 800568e:	bdb0      	pop	{r4, r5, r7, pc}

08005690 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8005690:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fb fd55 	bl	8001152 <_ZNKSt14_Function_base8_M_emptyEv>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d001      	beq.n	80056b2 <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 80056ae:	f7fb fde7 	bl	8001280 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	68dc      	ldr	r4, [r3, #12]
 80056b6:	68fd      	ldr	r5, [r7, #12]
 80056b8:	f107 0308 	add.w	r3, r7, #8
 80056bc:	4618      	mov	r0, r3
 80056be:	f000 f8f6 	bl	80058ae <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80056c2:	4606      	mov	r6, r0
 80056c4:	1d3b      	adds	r3, r7, #4
 80056c6:	4618      	mov	r0, r3
 80056c8:	f000 f8f1 	bl	80058ae <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80056cc:	4680      	mov	r8, r0
 80056ce:	463b      	mov	r3, r7
 80056d0:	4618      	mov	r0, r3
 80056d2:	f000 f8f7 	bl	80058c4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80056d6:	4603      	mov	r3, r0
 80056d8:	4642      	mov	r2, r8
 80056da:	4631      	mov	r1, r6
 80056dc:	4628      	mov	r0, r5
 80056de:	47a0      	blx	r4
 80056e0:	4603      	mov	r3, r0
    }
 80056e2:	4618      	mov	r0, r3
 80056e4:	3710      	adds	r7, #16
 80056e6:	46bd      	mov	sp, r7
 80056e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056ec <_ZNSt6vectorImSaImEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80056ec:	b5b0      	push	{r4, r5, r7, lr}
 80056ee:	b082      	sub	sp, #8
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681c      	ldr	r4, [r3, #0]
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	4618      	mov	r0, r3
 8005700:	f000 f8eb 	bl	80058da <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005704:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8005706:	461a      	mov	r2, r3
 8005708:	4629      	mov	r1, r5
 800570a:	4620      	mov	r0, r4
 800570c:	f000 f8f0 	bl	80058f0 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	4618      	mov	r0, r3
 8005714:	f000 f831 	bl	800577a <_ZNSt12_Vector_baseImSaImEED1Ev>
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	4618      	mov	r0, r3
 800571c:	3708      	adds	r7, #8
 800571e:	46bd      	mov	sp, r7
 8005720:	bdb0      	pop	{r4, r5, r7, pc}

08005722 <_ZNKSt8functionIFijjPfEEcvbEv>:
      explicit operator bool() const noexcept
 8005722:	b580      	push	{r7, lr}
 8005724:	b082      	sub	sp, #8
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	4618      	mov	r0, r3
 800572e:	f7fb fd10 	bl	8001152 <_ZNKSt14_Function_base8_M_emptyEv>
 8005732:	4603      	mov	r3, r0
 8005734:	f083 0301 	eor.w	r3, r3, #1
 8005738:	b2db      	uxtb	r3, r3
 800573a:	4618      	mov	r0, r3
 800573c:	3708      	adds	r7, #8
 800573e:	46bd      	mov	sp, r7
 8005740:	bd80      	pop	{r7, pc}

08005742 <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8005742:	b580      	push	{r7, lr}
 8005744:	b082      	sub	sp, #8
 8005746:	af00      	add	r7, sp, #0
 8005748:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 800574a:	6878      	ldr	r0, [r7, #4]
 800574c:	f000 f8de 	bl	800590c <_ZNSaImEC1Ev>
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	4618      	mov	r0, r3
 8005754:	f000 f8e6 	bl	8005924 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <_ZNSaImED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 f8ee 	bl	800594c <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4618      	mov	r0, r3
 8005774:	3708      	adds	r7, #8
 8005776:	46bd      	mov	sp, r7
 8005778:	bd80      	pop	{r7, pc}

0800577a <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 800577a:	b580      	push	{r7, lr}
 800577c:	b082      	sub	sp, #8
 800577e:	af00      	add	r7, sp, #0
 8005780:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	689a      	ldr	r2, [r3, #8]
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1ad3      	subs	r3, r2, r3
 8005790:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8005792:	461a      	mov	r2, r3
 8005794:	6878      	ldr	r0, [r7, #4]
 8005796:	f000 f8e4 	bl	8005962 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fd fb50 	bl	8002e42 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4618      	mov	r0, r3
 80057a6:	3708      	adds	r7, #8
 80057a8:	46bd      	mov	sp, r7
 80057aa:	bd80      	pop	{r7, pc}

080057ac <_ZNSt6vectorImSaImEE9push_backEOm>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 80057ac:	b580      	push	{r7, lr}
 80057ae:	b082      	sub	sp, #8
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
 80057b4:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 80057b6:	6838      	ldr	r0, [r7, #0]
 80057b8:	f000 f8e6 	bl	8005988 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80057bc:	4603      	mov	r3, r0
 80057be:	4619      	mov	r1, r3
 80057c0:	6878      	ldr	r0, [r7, #4]
 80057c2:	f000 f8ec 	bl	800599e <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>
 80057c6:	bf00      	nop
 80057c8:	3708      	adds	r7, #8
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}

080057ce <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685a      	ldr	r2, [r3, #4]
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	109b      	asrs	r3, r3, #2
 80057e2:	4618      	mov	r0, r3
 80057e4:	370c      	adds	r7, #12
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <_ZNSt6vectorImSaImEE2atEj>:
      at(size_type __n)
 80057ee:	b580      	push	{r7, lr}
 80057f0:	b082      	sub	sp, #8
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
 80057f6:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 80057f8:	6839      	ldr	r1, [r7, #0]
 80057fa:	6878      	ldr	r0, [r7, #4]
 80057fc:	f000 f8fe 	bl	80059fc <_ZNKSt6vectorImSaImEE14_M_range_checkEj>
	return (*this)[__n];
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	6878      	ldr	r0, [r7, #4]
 8005804:	f000 f91a 	bl	8005a3c <_ZNSt6vectorImSaImEEixEj>
 8005808:	4603      	mov	r3, r0
      }
 800580a:	4618      	mov	r0, r3
 800580c:	3708      	adds	r7, #8
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 8005812:	b580      	push	{r7, lr}
 8005814:	b082      	sub	sp, #8
 8005816:	af00      	add	r7, sp, #0
 8005818:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	4618      	mov	r0, r3
 800581e:	f7fb fc77 	bl	8001110 <_ZNSt14_Function_baseC1Ev>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	4618      	mov	r0, r3
 8005826:	3708      	adds	r7, #8
 8005828:	46bd      	mov	sp, r7
 800582a:	bd80      	pop	{r7, pc}

0800582c <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 800582c:	b580      	push	{r7, lr}
 800582e:	b086      	sub	sp, #24
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 8005836:	6838      	ldr	r0, [r7, #0]
 8005838:	f000 f910 	bl	8005a5c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 800583c:	4603      	mov	r3, r0
 800583e:	681a      	ldr	r2, [r3, #0]
 8005840:	f107 0308 	add.w	r3, r7, #8
 8005844:	4611      	mov	r1, r2
 8005846:	4618      	mov	r0, r3
 8005848:	f000 f914 	bl	8005a74 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 800584c:	f107 0308 	add.w	r3, r7, #8
 8005850:	6879      	ldr	r1, [r7, #4]
 8005852:	4618      	mov	r0, r3
 8005854:	f000 f80a 	bl	800586c <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005858:	f107 0308 	add.w	r3, r7, #8
 800585c:	4618      	mov	r0, r3
 800585e:	f7fe fc9f 	bl	80041a0 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 8005862:	687b      	ldr	r3, [r7, #4]
	}
 8005864:	4618      	mov	r0, r3
 8005866:	3718      	adds	r7, #24
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 800586c:	b580      	push	{r7, lr}
 800586e:	b082      	sub	sp, #8
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	683a      	ldr	r2, [r7, #0]
 800587a:	4611      	mov	r1, r2
 800587c:	4618      	mov	r0, r3
 800587e:	f000 f92e 	bl	8005ade <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f103 0208 	add.w	r2, r3, #8
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	3308      	adds	r3, #8
 800588c:	4619      	mov	r1, r3
 800588e:	4610      	mov	r0, r2
 8005890:	f000 f957 	bl	8005b42 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f103 020c 	add.w	r2, r3, #12
 800589a:	683b      	ldr	r3, [r7, #0]
 800589c:	330c      	adds	r3, #12
 800589e:	4619      	mov	r1, r3
 80058a0:	4610      	mov	r0, r2
 80058a2:	f000 f978 	bl	8005b96 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 80058a6:	bf00      	nop
 80058a8:	3708      	adds	r7, #8
 80058aa:	46bd      	mov	sp, r7
 80058ac:	bd80      	pop	{r7, pc}

080058ae <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80058ae:	b480      	push	{r7}
 80058b0:	b083      	sub	sp, #12
 80058b2:	af00      	add	r7, sp, #0
 80058b4:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	4618      	mov	r0, r3
 80058ba:	370c      	adds	r7, #12
 80058bc:	46bd      	mov	sp, r7
 80058be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c2:	4770      	bx	lr

080058c4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80058c4:	b480      	push	{r7}
 80058c6:	b083      	sub	sp, #12
 80058c8:	af00      	add	r7, sp, #0
 80058ca:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	4618      	mov	r0, r3
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr

080058da <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80058da:	b480      	push	{r7}
 80058dc:	b083      	sub	sp, #12
 80058de:	af00      	add	r7, sp, #0
 80058e0:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	4618      	mov	r0, r3
 80058e6:	370c      	adds	r7, #12
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr

080058f0 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80058fc:	68b9      	ldr	r1, [r7, #8]
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f968 	bl	8005bd4 <_ZSt8_DestroyIPmEvT_S1_>
    }
 8005904:	bf00      	nop
 8005906:	3710      	adds	r7, #16
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 800590c:	b580      	push	{r7, lr}
 800590e:	b082      	sub	sp, #8
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f000 f96a 	bl	8005bee <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	4618      	mov	r0, r3
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2200      	movs	r2, #0
 8005930:	601a      	str	r2, [r3, #0]
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2200      	movs	r2, #0
 8005936:	605a      	str	r2, [r3, #4]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2200      	movs	r2, #0
 800593c:	609a      	str	r2, [r3, #8]
	{ }
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4618      	mov	r0, r3
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <_ZN9__gnu_cxx13new_allocatorImED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 800594c:	b480      	push	{r7}
 800594e:	b083      	sub	sp, #12
 8005950:	af00      	add	r7, sp, #0
 8005952:	6078      	str	r0, [r7, #4]
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4618      	mov	r0, r3
 8005958:	370c      	adds	r7, #12
 800595a:	46bd      	mov	sp, r7
 800595c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005960:	4770      	bx	lr

08005962 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 8005962:	b580      	push	{r7, lr}
 8005964:	b084      	sub	sp, #16
 8005966:	af00      	add	r7, sp, #0
 8005968:	60f8      	str	r0, [r7, #12]
 800596a:	60b9      	str	r1, [r7, #8]
 800596c:	607a      	str	r2, [r7, #4]
	if (__p)
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d005      	beq.n	8005980 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	68b9      	ldr	r1, [r7, #8]
 800597a:	4618      	mov	r0, r3
 800597c:	f000 f942 	bl	8005c04 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8005980:	bf00      	nop
 8005982:	3710      	adds	r7, #16
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005988:	b480      	push	{r7}
 800598a:	b083      	sub	sp, #12
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	4618      	mov	r0, r3
 8005994:	370c      	adds	r7, #12
 8005996:	46bd      	mov	sp, r7
 8005998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800599c:	4770      	bx	lr

0800599e <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 800599e:	b5b0      	push	{r4, r5, r7, lr}
 80059a0:	b082      	sub	sp, #8
 80059a2:	af00      	add	r7, sp, #0
 80059a4:	6078      	str	r0, [r7, #4]
 80059a6:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685a      	ldr	r2, [r3, #4]
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	689b      	ldr	r3, [r3, #8]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d011      	beq.n	80059d8 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80059b4:	687c      	ldr	r4, [r7, #4]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	685d      	ldr	r5, [r3, #4]
 80059ba:	6838      	ldr	r0, [r7, #0]
 80059bc:	f000 f931 	bl	8005c22 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80059c0:	4603      	mov	r3, r0
 80059c2:	461a      	mov	r2, r3
 80059c4:	4629      	mov	r1, r5
 80059c6:	4620      	mov	r0, r4
 80059c8:	f000 f936 	bl	8005c38 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	685b      	ldr	r3, [r3, #4]
 80059d0:	1d1a      	adds	r2, r3, #4
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80059d6:	e00c      	b.n	80059f2 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80059d8:	6878      	ldr	r0, [r7, #4]
 80059da:	f000 f940 	bl	8005c5e <_ZNSt6vectorImSaImEE3endEv>
 80059de:	4604      	mov	r4, r0
 80059e0:	6838      	ldr	r0, [r7, #0]
 80059e2:	f000 f91e 	bl	8005c22 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80059e6:	4603      	mov	r3, r0
 80059e8:	461a      	mov	r2, r3
 80059ea:	4621      	mov	r1, r4
 80059ec:	6878      	ldr	r0, [r7, #4]
 80059ee:	f000 f95d 	bl	8005cac <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 80059f2:	bf00      	nop
 80059f4:	3708      	adds	r7, #8
 80059f6:	46bd      	mov	sp, r7
 80059f8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080059fc <_ZNKSt6vectorImSaImEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80059fc:	b580      	push	{r7, lr}
 80059fe:	b082      	sub	sp, #8
 8005a00:	af00      	add	r7, sp, #0
 8005a02:	6078      	str	r0, [r7, #4]
 8005a04:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fee1 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8005a0c:	4602      	mov	r2, r0
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	4293      	cmp	r3, r2
 8005a12:	bf2c      	ite	cs
 8005a14:	2301      	movcs	r3, #1
 8005a16:	2300      	movcc	r3, #0
 8005a18:	b2db      	uxtb	r3, r3
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d008      	beq.n	8005a30 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f7ff fed5 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8005a24:	4603      	mov	r3, r0
 8005a26:	461a      	mov	r2, r3
 8005a28:	6839      	ldr	r1, [r7, #0]
 8005a2a:	4803      	ldr	r0, [pc, #12]	; (8005a38 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x3c>)
 8005a2c:	f012 fa31 	bl	8017e92 <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8005a30:	bf00      	nop
 8005a32:	3708      	adds	r7, #8
 8005a34:	46bd      	mov	sp, r7
 8005a36:	bd80      	pop	{r7, pc}
 8005a38:	0801e058 	.word	0x0801e058

08005a3c <_ZNSt6vectorImSaImEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	4413      	add	r3, r2
      }
 8005a50:	4618      	mov	r0, r3
 8005a52:	370c      	adds	r7, #12
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr

08005a5c <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a5c:	b480      	push	{r7}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4618      	mov	r0, r3
 8005a68:	370c      	adds	r7, #12
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a70:	4770      	bx	lr
	...

08005a74 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8005a74:	b590      	push	{r4, r7, lr}
 8005a76:	b083      	sub	sp, #12
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
 8005a7c:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	4618      	mov	r0, r3
 8005a82:	f7fb fb45 	bl	8001110 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f000 f9cb 	bl	8005e24 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00f      	beq.n	8005ab4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8005a94:	687c      	ldr	r4, [r7, #4]
 8005a96:	463b      	mov	r3, r7
 8005a98:	4618      	mov	r0, r3
 8005a9a:	f000 f9d3 	bl	8005e44 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	4619      	mov	r1, r3
 8005aa2:	4620      	mov	r0, r4
 8005aa4:	f000 f9d9 	bl	8005e5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a05      	ldr	r2, [pc, #20]	; (8005ac0 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8005aac:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	4a04      	ldr	r2, [pc, #16]	; (8005ac4 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8005ab2:	609a      	str	r2, [r3, #8]
      }
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	370c      	adds	r7, #12
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd90      	pop	{r4, r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	08005e7f 	.word	0x08005e7f
 8005ac4:	08005ec7 	.word	0x08005ec7

08005ac8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	4618      	mov	r0, r3
 8005ad4:	370c      	adds	r7, #12
 8005ad6:	46bd      	mov	sp, r7
 8005ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005adc:	4770      	bx	lr

08005ade <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8005ade:	b580      	push	{r7, lr}
 8005ae0:	b084      	sub	sp, #16
 8005ae2:	af00      	add	r7, sp, #0
 8005ae4:	6078      	str	r0, [r7, #4]
 8005ae6:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005ae8:	6878      	ldr	r0, [r7, #4]
 8005aea:	f7ff ffed 	bl	8005ac8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005aee:	4602      	mov	r2, r0
 8005af0:	f107 0308 	add.w	r3, r7, #8
 8005af4:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005af8:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8005afc:	6838      	ldr	r0, [r7, #0]
 8005afe:	f7ff ffe3 	bl	8005ac8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005b02:	4602      	mov	r2, r0
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b0a:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8005b0e:	f107 0308 	add.w	r3, r7, #8
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff ffd8 	bl	8005ac8 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005b18:	4602      	mov	r2, r0
 8005b1a:	683b      	ldr	r3, [r7, #0]
 8005b1c:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b20:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005b24:	bf00      	nop
 8005b26:	3710      	adds	r7, #16
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	bd80      	pop	{r7, pc}

08005b2c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8005b2c:	b480      	push	{r7}
 8005b2e:	b083      	sub	sp, #12
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	4618      	mov	r0, r3
 8005b38:	370c      	adds	r7, #12
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b40:	4770      	bx	lr

08005b42 <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8005b42:	b580      	push	{r7, lr}
 8005b44:	b084      	sub	sp, #16
 8005b46:	af00      	add	r7, sp, #0
 8005b48:	6078      	str	r0, [r7, #4]
 8005b4a:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005b4c:	6878      	ldr	r0, [r7, #4]
 8005b4e:	f7ff ffed 	bl	8005b2c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005b52:	4603      	mov	r3, r0
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005b58:	6838      	ldr	r0, [r7, #0]
 8005b5a:	f7ff ffe7 	bl	8005b2c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	681a      	ldr	r2, [r3, #0]
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005b66:	f107 030c 	add.w	r3, r7, #12
 8005b6a:	4618      	mov	r0, r3
 8005b6c:	f7ff ffde 	bl	8005b2c <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005b70:	4603      	mov	r3, r0
 8005b72:	681a      	ldr	r2, [r3, #0]
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	601a      	str	r2, [r3, #0]
    }
 8005b78:	bf00      	nop
 8005b7a:	3710      	adds	r7, #16
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	4618      	mov	r0, r3
 8005b8c:	370c      	adds	r7, #12
 8005b8e:	46bd      	mov	sp, r7
 8005b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b94:	4770      	bx	lr

08005b96 <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b084      	sub	sp, #16
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
 8005b9e:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005ba0:	6878      	ldr	r0, [r7, #4]
 8005ba2:	f7ff ffed 	bl	8005b80 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005ba6:	4603      	mov	r3, r0
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005bac:	6838      	ldr	r0, [r7, #0]
 8005bae:	f7ff ffe7 	bl	8005b80 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005bb2:	4603      	mov	r3, r0
 8005bb4:	681a      	ldr	r2, [r3, #0]
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005bba:	f107 030c 	add.w	r3, r7, #12
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7ff ffde 	bl	8005b80 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	681a      	ldr	r2, [r3, #0]
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	601a      	str	r2, [r3, #0]
    }
 8005bcc:	bf00      	nop
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <_ZSt8_DestroyIPmEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005bd4:	b580      	push	{r7, lr}
 8005bd6:	b082      	sub	sp, #8
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005bde:	6839      	ldr	r1, [r7, #0]
 8005be0:	6878      	ldr	r0, [r7, #4]
 8005be2:	f000 f9af 	bl	8005f44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8005be6:	bf00      	nop
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	370c      	adds	r7, #12
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005c10:	687a      	ldr	r2, [r7, #4]
 8005c12:	68b9      	ldr	r1, [r7, #8]
 8005c14:	68f8      	ldr	r0, [r7, #12]
 8005c16:	f000 f9a0 	bl	8005f5a <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 8005c1a:	bf00      	nop
 8005c1c:	3710      	adds	r7, #16
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	bd80      	pop	{r7, pc}

08005c22 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005c22:	b480      	push	{r7}
 8005c24:	b083      	sub	sp, #12
 8005c26:	af00      	add	r7, sp, #0
 8005c28:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	370c      	adds	r7, #12
 8005c30:	46bd      	mov	sp, r7
 8005c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c36:	4770      	bx	lr

08005c38 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b084      	sub	sp, #16
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	60f8      	str	r0, [r7, #12]
 8005c40:	60b9      	str	r1, [r7, #8]
 8005c42:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005c44:	6878      	ldr	r0, [r7, #4]
 8005c46:	f7ff ffec 	bl	8005c22 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8005c4a:	4603      	mov	r3, r0
 8005c4c:	461a      	mov	r2, r3
 8005c4e:	68b9      	ldr	r1, [r7, #8]
 8005c50:	68f8      	ldr	r0, [r7, #12]
 8005c52:	f000 f98f 	bl	8005f74 <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	1d1a      	adds	r2, r3, #4
 8005c6a:	f107 030c 	add.w	r3, r7, #12
 8005c6e:	4611      	mov	r1, r2
 8005c70:	4618      	mov	r0, r3
 8005c72:	f000 f995 	bl	8005fa0 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	4618      	mov	r0, r3
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>:
      _S_use_relocate()
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b082      	sub	sp, #8
 8005c84:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8005c86:	4618      	mov	r0, r3
 8005c88:	f000 f805 	bl	8005c96 <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8005c8c:	4603      	mov	r3, r0
      }
 8005c8e:	4618      	mov	r0, r3
 8005c90:	3708      	adds	r7, #8
 8005c92:	46bd      	mov	sp, r7
 8005c94:	bd80      	pop	{r7, pc}

08005c96 <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8005c96:	b480      	push	{r7}
 8005c98:	b083      	sub	sp, #12
 8005c9a:	af00      	add	r7, sp, #0
 8005c9c:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8005c9e:	2301      	movs	r3, #1
      }
 8005ca0:	4618      	mov	r0, r3
 8005ca2:	370c      	adds	r7, #12
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005caa:	4770      	bx	lr

08005cac <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8005cac:	b5b0      	push	{r4, r5, r7, lr}
 8005cae:	b08c      	sub	sp, #48	; 0x30
 8005cb0:	af00      	add	r7, sp, #0
 8005cb2:	60f8      	str	r0, [r7, #12]
 8005cb4:	60b9      	str	r1, [r7, #8]
 8005cb6:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8005cb8:	4a59      	ldr	r2, [pc, #356]	; (8005e20 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x174>)
 8005cba:	2101      	movs	r1, #1
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f97f 	bl	8005fc0 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8005cc2:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8005cd0:	68f8      	ldr	r0, [r7, #12]
 8005cd2:	f000 f9bc 	bl	800604e <_ZNSt6vectorImSaImEE5beginEv>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	617b      	str	r3, [r7, #20]
 8005cda:	f107 0214 	add.w	r2, r7, #20
 8005cde:	f107 0308 	add.w	r3, r7, #8
 8005ce2:	4611      	mov	r1, r2
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f9c2 	bl	800606e <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8005cea:	4603      	mov	r3, r0
 8005cec:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 f9d0 	bl	8006098 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8005cf8:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8005cfa:	69bb      	ldr	r3, [r7, #24]
 8005cfc:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8005cfe:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005d00:	69fb      	ldr	r3, [r7, #28]
 8005d02:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005d04:	69ba      	ldr	r2, [r7, #24]
 8005d06:	18d5      	adds	r5, r2, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f7ff ff8a 	bl	8005c22 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	461a      	mov	r2, r3
 8005d12:	4629      	mov	r1, r5
 8005d14:	4620      	mov	r0, r4
 8005d16:	f7ff ff8f 	bl	8005c38 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8005d1e:	f7ff ffaf 	bl	8005c80 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d027      	beq.n	8005d78 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005d28:	f107 0308 	add.w	r3, r7, #8
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 f9db 	bl	80060e8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8005d32:	4603      	mov	r3, r0
 8005d34:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4618      	mov	r0, r3
 8005d3a:	f7ff fdce 	bl	80058da <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005d3e:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005d40:	69ba      	ldr	r2, [r7, #24]
 8005d42:	4621      	mov	r1, r4
 8005d44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d46:	f000 f9bb 	bl	80060c0 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8005d4a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8005d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d4e:	3304      	adds	r3, #4
 8005d50:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	4618      	mov	r0, r3
 8005d58:	f000 f9c6 	bl	80060e8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8005d5c:	4603      	mov	r3, r0
 8005d5e:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7ff fdb9 	bl	80058da <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005d68:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005d6a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d6c:	6a39      	ldr	r1, [r7, #32]
 8005d6e:	4620      	mov	r0, r4
 8005d70:	f000 f9a6 	bl	80060c0 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8005d74:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005d76:	e026      	b.n	8005dc6 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8005d78:	f107 0308 	add.w	r3, r7, #8
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f000 f9b3 	bl	80060e8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8005d82:	4603      	mov	r3, r0
 8005d84:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7ff fda6 	bl	80058da <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005d8e:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8005d90:	69ba      	ldr	r2, [r7, #24]
 8005d92:	4621      	mov	r1, r4
 8005d94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d96:	f000 f9b2 	bl	80060fe <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8005d9a:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8005d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d9e:	3304      	adds	r3, #4
 8005da0:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8005da2:	f107 0308 	add.w	r3, r7, #8
 8005da6:	4618      	mov	r0, r3
 8005da8:	f000 f99e 	bl	80060e8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8005dac:	4603      	mov	r3, r0
 8005dae:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	4618      	mov	r0, r3
 8005db4:	f7ff fd91 	bl	80058da <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005db8:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8005dba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dbc:	6a39      	ldr	r1, [r7, #32]
 8005dbe:	4620      	mov	r0, r4
 8005dc0:	f000 f99d 	bl	80060fe <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8005dc4:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8005dc6:	f7ff ff5b 	bl	8005c80 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	f083 0301 	eor.w	r3, r3, #1
 8005dd0:	b2db      	uxtb	r3, r3
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d009      	beq.n	8005dea <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	4618      	mov	r0, r3
 8005dda:	f7ff fd7e 	bl	80058da <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005dde:	4603      	mov	r3, r0
 8005de0:	461a      	mov	r2, r3
 8005de2:	6a39      	ldr	r1, [r7, #32]
 8005de4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005de6:	f7ff fd83 	bl	80058f0 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8005dea:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005df2:	1ad3      	subs	r3, r2, r3
 8005df4:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8005df6:	461a      	mov	r2, r3
 8005df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005dfa:	f7ff fdb2 	bl	8005962 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	69ba      	ldr	r2, [r7, #24]
 8005e02:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005e08:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e0c:	009b      	lsls	r3, r3, #2
 8005e0e:	69ba      	ldr	r2, [r7, #24]
 8005e10:	441a      	add	r2, r3
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	609a      	str	r2, [r3, #8]
    }
 8005e16:	bf00      	nop
 8005e18:	3730      	adds	r7, #48	; 0x30
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bdb0      	pop	{r4, r5, r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	0801e03c 	.word	0x0801e03c

08005e24 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	bf14      	ite	ne
 8005e32:	2301      	movne	r3, #1
 8005e34:	2300      	moveq	r3, #0
 8005e36:	b2db      	uxtb	r3, r3
 8005e38:	4618      	mov	r0, r3
 8005e3a:	370c      	adds	r7, #12
 8005e3c:	46bd      	mov	sp, r7
 8005e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e42:	4770      	bx	lr

08005e44 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005e44:	b480      	push	{r7}
 8005e46:	b083      	sub	sp, #12
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	4618      	mov	r0, r3
 8005e50:	370c      	adds	r7, #12
 8005e52:	46bd      	mov	sp, r7
 8005e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e58:	4770      	bx	lr

08005e5a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8005e5a:	b590      	push	{r4, r7, lr}
 8005e5c:	b085      	sub	sp, #20
 8005e5e:	af00      	add	r7, sp, #0
 8005e60:	6078      	str	r0, [r7, #4]
 8005e62:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8005e64:	6838      	ldr	r0, [r7, #0]
 8005e66:	f7ff ffed 	bl	8005e44 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	4622      	mov	r2, r4
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f95d 	bl	8006130 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8005e76:	bf00      	nop
 8005e78:	3714      	adds	r7, #20
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	bd90      	pop	{r4, r7, pc}

08005e7e <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005e7e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e80:	b085      	sub	sp, #20
 8005e82:	af00      	add	r7, sp, #0
 8005e84:	60f8      	str	r0, [r7, #12]
 8005e86:	60b9      	str	r1, [r7, #8]
 8005e88:	607a      	str	r2, [r7, #4]
 8005e8a:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8005e8c:	68f8      	ldr	r0, [r7, #12]
 8005e8e:	f000 f968 	bl	8006162 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8005e92:	4603      	mov	r3, r0
 8005e94:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005e96:	68b8      	ldr	r0, [r7, #8]
 8005e98:	f7ff fd09 	bl	80058ae <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005e9c:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005e9e:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005ea0:	6878      	ldr	r0, [r7, #4]
 8005ea2:	f7ff fd04 	bl	80058ae <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005ea6:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005ea8:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005eaa:	6838      	ldr	r0, [r7, #0]
 8005eac:	f7ff fd0a 	bl	80058c4 <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005eb0:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	461a      	mov	r2, r3
 8005eb6:	4631      	mov	r1, r6
 8005eb8:	4628      	mov	r0, r5
 8005eba:	47a0      	blx	r4
 8005ebc:	4603      	mov	r3, r0
      }
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3714      	adds	r7, #20
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005ec6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8005ec6:	b5b0      	push	{r4, r5, r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	60b9      	str	r1, [r7, #8]
 8005ed0:	4613      	mov	r3, r2
 8005ed2:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8005ed4:	79fb      	ldrb	r3, [r7, #7]
 8005ed6:	2b03      	cmp	r3, #3
 8005ed8:	d016      	beq.n	8005f08 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8005eda:	2b03      	cmp	r3, #3
 8005edc:	dc19      	bgt.n	8005f12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8005ede:	2b01      	cmp	r3, #1
 8005ee0:	d002      	beq.n	8005ee8 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d00a      	beq.n	8005efc <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8005ee6:	e014      	b.n	8005f12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f94b 	bl	8006184 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8005eee:	4604      	mov	r4, r0
 8005ef0:	68b8      	ldr	r0, [r7, #8]
 8005ef2:	f000 f936 	bl	8006162 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8005ef6:	4603      	mov	r3, r0
 8005ef8:	6023      	str	r3, [r4, #0]
	      break;
 8005efa:	e00a      	b.n	8005f12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8005efc:	462a      	mov	r2, r5
 8005efe:	68b9      	ldr	r1, [r7, #8]
 8005f00:	68f8      	ldr	r0, [r7, #12]
 8005f02:	f000 f94b 	bl	800619c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8005f06:	e004      	b.n	8005f12 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8005f08:	4621      	mov	r1, r4
 8005f0a:	68f8      	ldr	r0, [r7, #12]
 8005f0c:	f000 f95f 	bl	80061ce <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8005f10:	bf00      	nop
	  return false;
 8005f12:	2300      	movs	r3, #0
	}
 8005f14:	4618      	mov	r0, r3
 8005f16:	3718      	adds	r7, #24
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	bdb0      	pop	{r4, r5, r7, pc}

08005f1c <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005f1c:	b480      	push	{r7}
 8005f1e:	b083      	sub	sp, #12
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d201      	bcs.n	8005f36 <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	e000      	b.n	8005f38 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005f36:	687b      	ldr	r3, [r7, #4]
    }
 8005f38:	4618      	mov	r0, r3
 8005f3a:	370c      	adds	r7, #12
 8005f3c:	46bd      	mov	sp, r7
 8005f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f42:	4770      	bx	lr

08005f44 <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005f44:	b480      	push	{r7}
 8005f46:	b083      	sub	sp, #12
 8005f48:	af00      	add	r7, sp, #0
 8005f4a:	6078      	str	r0, [r7, #4]
 8005f4c:	6039      	str	r1, [r7, #0]
 8005f4e:	bf00      	nop
 8005f50:	370c      	adds	r7, #12
 8005f52:	46bd      	mov	sp, r7
 8005f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f58:	4770      	bx	lr

08005f5a <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	60f8      	str	r0, [r7, #12]
 8005f62:	60b9      	str	r1, [r7, #8]
 8005f64:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8005f66:	68b8      	ldr	r0, [r7, #8]
 8005f68:	f011 ff62 	bl	8017e30 <_ZdlPv>
      }
 8005f6c:	bf00      	nop
 8005f6e:	3710      	adds	r7, #16
 8005f70:	46bd      	mov	sp, r7
 8005f72:	bd80      	pop	{r7, pc}

08005f74 <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8005f74:	b590      	push	{r4, r7, lr}
 8005f76:	b085      	sub	sp, #20
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	60f8      	str	r0, [r7, #12]
 8005f7c:	60b9      	str	r1, [r7, #8]
 8005f7e:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f7ff fe4e 	bl	8005c22 <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8005f86:	4603      	mov	r3, r0
 8005f88:	681c      	ldr	r4, [r3, #0]
 8005f8a:	68bb      	ldr	r3, [r7, #8]
 8005f8c:	4619      	mov	r1, r3
 8005f8e:	2004      	movs	r0, #4
 8005f90:	f7fb f84c 	bl	800102c <_ZnwjPv>
 8005f94:	4603      	mov	r3, r0
 8005f96:	601c      	str	r4, [r3, #0]
 8005f98:	bf00      	nop
 8005f9a:	3714      	adds	r7, #20
 8005f9c:	46bd      	mov	sp, r7
 8005f9e:	bd90      	pop	{r4, r7, pc}

08005fa0 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005fa0:	b480      	push	{r7}
 8005fa2:	b083      	sub	sp, #12
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
 8005fa8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005faa:	683b      	ldr	r3, [r7, #0]
 8005fac:	681a      	ldr	r2, [r3, #0]
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	601a      	str	r2, [r3, #0]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	370c      	adds	r7, #12
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr

08005fc0 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8005fc0:	b590      	push	{r4, r7, lr}
 8005fc2:	b087      	sub	sp, #28
 8005fc4:	af00      	add	r7, sp, #0
 8005fc6:	60f8      	str	r0, [r7, #12]
 8005fc8:	60b9      	str	r1, [r7, #8]
 8005fca:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f90a 	bl	80061e6 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8005fd2:	4604      	mov	r4, r0
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff fbfa 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8005fda:	4603      	mov	r3, r0
 8005fdc:	1ae2      	subs	r2, r4, r3
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	bf34      	ite	cc
 8005fe4:	2301      	movcc	r3, #1
 8005fe6:	2300      	movcs	r3, #0
 8005fe8:	b2db      	uxtb	r3, r3
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d002      	beq.n	8005ff4 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005fee:	6878      	ldr	r0, [r7, #4]
 8005ff0:	f011 ff4c 	bl	8017e8c <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8005ff4:	68f8      	ldr	r0, [r7, #12]
 8005ff6:	f7ff fbea 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8005ffa:	4604      	mov	r4, r0
 8005ffc:	68f8      	ldr	r0, [r7, #12]
 8005ffe:	f7ff fbe6 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8006002:	4603      	mov	r3, r0
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	f107 0208 	add.w	r2, r7, #8
 800600a:	f107 0310 	add.w	r3, r7, #16
 800600e:	4611      	mov	r1, r2
 8006010:	4618      	mov	r0, r3
 8006012:	f7ff ff83 	bl	8005f1c <_ZSt3maxIjERKT_S2_S2_>
 8006016:	4603      	mov	r3, r0
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	4423      	add	r3, r4
 800601c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 800601e:	68f8      	ldr	r0, [r7, #12]
 8006020:	f7ff fbd5 	bl	80057ce <_ZNKSt6vectorImSaImEE4sizeEv>
 8006024:	4602      	mov	r2, r0
 8006026:	697b      	ldr	r3, [r7, #20]
 8006028:	4293      	cmp	r3, r2
 800602a:	d306      	bcc.n	800603a <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 800602c:	68f8      	ldr	r0, [r7, #12]
 800602e:	f000 f8da 	bl	80061e6 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006032:	4602      	mov	r2, r0
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	4293      	cmp	r3, r2
 8006038:	d904      	bls.n	8006044 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f8d3 	bl	80061e6 <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006040:	4603      	mov	r3, r0
 8006042:	e000      	b.n	8006046 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 8006044:	697b      	ldr	r3, [r7, #20]
      }
 8006046:	4618      	mov	r0, r3
 8006048:	371c      	adds	r7, #28
 800604a:	46bd      	mov	sp, r7
 800604c:	bd90      	pop	{r4, r7, pc}

0800604e <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 800604e:	b580      	push	{r7, lr}
 8006050:	b084      	sub	sp, #16
 8006052:	af00      	add	r7, sp, #0
 8006054:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8006056:	687a      	ldr	r2, [r7, #4]
 8006058:	f107 030c 	add.w	r3, r7, #12
 800605c:	4611      	mov	r1, r2
 800605e:	4618      	mov	r0, r3
 8006060:	f7ff ff9e 	bl	8005fa0 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	4618      	mov	r0, r3
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}

0800606e <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 800606e:	b590      	push	{r4, r7, lr}
 8006070:	b083      	sub	sp, #12
 8006072:	af00      	add	r7, sp, #0
 8006074:	6078      	str	r0, [r7, #4]
 8006076:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006078:	6878      	ldr	r0, [r7, #4]
 800607a:	f000 f835 	bl	80060e8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 800607e:	4603      	mov	r3, r0
 8006080:	681c      	ldr	r4, [r3, #0]
 8006082:	6838      	ldr	r0, [r7, #0]
 8006084:	f000 f830 	bl	80060e8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006088:	4603      	mov	r3, r0
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	1ae3      	subs	r3, r4, r3
 800608e:	109b      	asrs	r3, r3, #2
 8006090:	4618      	mov	r0, r3
 8006092:	370c      	adds	r7, #12
 8006094:	46bd      	mov	sp, r7
 8006096:	bd90      	pop	{r4, r7, pc}

08006098 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006098:	b580      	push	{r7, lr}
 800609a:	b082      	sub	sp, #8
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
 80060a0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b00      	cmp	r3, #0
 80060a6:	d006      	beq.n	80060b6 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	6839      	ldr	r1, [r7, #0]
 80060ac:	4618      	mov	r0, r3
 80060ae:	f000 f8ab 	bl	8006208 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 80060b2:	4603      	mov	r3, r0
 80060b4:	e000      	b.n	80060b8 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 80060b6:	2300      	movs	r3, #0
      }
 80060b8:	4618      	mov	r0, r3
 80060ba:	3708      	adds	r7, #8
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}

080060c0 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80060c0:	b590      	push	{r4, r7, lr}
 80060c2:	b089      	sub	sp, #36	; 0x24
 80060c4:	af02      	add	r7, sp, #8
 80060c6:	60f8      	str	r0, [r7, #12]
 80060c8:	60b9      	str	r1, [r7, #8]
 80060ca:	607a      	str	r2, [r7, #4]
 80060cc:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80060ce:	f88d 4000 	strb.w	r4, [sp]
 80060d2:	683b      	ldr	r3, [r7, #0]
 80060d4:	687a      	ldr	r2, [r7, #4]
 80060d6:	68b9      	ldr	r1, [r7, #8]
 80060d8:	68f8      	ldr	r0, [r7, #12]
 80060da:	f000 f8a4 	bl	8006226 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 80060de:	4603      	mov	r3, r0
      }
 80060e0:	4618      	mov	r0, r3
 80060e2:	371c      	adds	r7, #28
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd90      	pop	{r4, r7, pc}

080060e8 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80060e8:	b480      	push	{r7}
 80060ea:	b083      	sub	sp, #12
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	4618      	mov	r0, r3
 80060f4:	370c      	adds	r7, #12
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr

080060fe <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80060fe:	b590      	push	{r4, r7, lr}
 8006100:	b085      	sub	sp, #20
 8006102:	af00      	add	r7, sp, #0
 8006104:	60f8      	str	r0, [r7, #12]
 8006106:	60b9      	str	r1, [r7, #8]
 8006108:	607a      	str	r2, [r7, #4]
 800610a:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 800610c:	68f8      	ldr	r0, [r7, #12]
 800610e:	f000 f89c 	bl	800624a <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006112:	4604      	mov	r4, r0
 8006114:	68b8      	ldr	r0, [r7, #8]
 8006116:	f000 f898 	bl	800624a <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 800611a:	4601      	mov	r1, r0
 800611c:	683b      	ldr	r3, [r7, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	4620      	mov	r0, r4
 8006122:	f000 f8a1 	bl	8006268 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>
 8006126:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006128:	4618      	mov	r0, r3
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	bd90      	pop	{r4, r7, pc}

08006130 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006130:	b590      	push	{r4, r7, lr}
 8006132:	b085      	sub	sp, #20
 8006134:	af00      	add	r7, sp, #0
 8006136:	60f8      	str	r0, [r7, #12]
 8006138:	60b9      	str	r1, [r7, #8]
 800613a:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 800613c:	68b8      	ldr	r0, [r7, #8]
 800613e:	f7ff fe81 	bl	8005e44 <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8006142:	4603      	mov	r3, r0
 8006144:	681c      	ldr	r4, [r3, #0]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f7fa ffcc 	bl	80010e4 <_ZNSt9_Any_data9_M_accessEv>
 800614c:	4603      	mov	r3, r0
 800614e:	4619      	mov	r1, r3
 8006150:	2004      	movs	r0, #4
 8006152:	f7fa ff6b 	bl	800102c <_ZnwjPv>
 8006156:	4603      	mov	r3, r0
 8006158:	601c      	str	r4, [r3, #0]
 800615a:	bf00      	nop
 800615c:	3714      	adds	r7, #20
 800615e:	46bd      	mov	sp, r7
 8006160:	bd90      	pop	{r4, r7, pc}

08006162 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 8006162:	b580      	push	{r7, lr}
 8006164:	b084      	sub	sp, #16
 8006166:	af00      	add	r7, sp, #0
 8006168:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 800616a:	6878      	ldr	r0, [r7, #4]
 800616c:	f000 f88d 	bl	800628a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006170:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 8006172:	68f8      	ldr	r0, [r7, #12]
 8006174:	f000 f895 	bl	80062a2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8006178:	4603      	mov	r3, r0
 800617a:	bf00      	nop
	}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 8006184:	b580      	push	{r7, lr}
 8006186:	b082      	sub	sp, #8
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 800618c:	6878      	ldr	r0, [r7, #4]
 800618e:	f7fa ffa9 	bl	80010e4 <_ZNSt9_Any_data9_M_accessEv>
 8006192:	4603      	mov	r3, r0
 8006194:	4618      	mov	r0, r3
 8006196:	3708      	adds	r7, #8
 8006198:	46bd      	mov	sp, r7
 800619a:	bd80      	pop	{r7, pc}

0800619c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 800619c:	b590      	push	{r4, r7, lr}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	60b9      	str	r1, [r7, #8]
 80061a6:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 80061a8:	68b8      	ldr	r0, [r7, #8]
 80061aa:	f000 f86e 	bl	800628a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 80061ae:	4603      	mov	r3, r0
 80061b0:	681c      	ldr	r4, [r3, #0]
 80061b2:	68f8      	ldr	r0, [r7, #12]
 80061b4:	f7fa ff96 	bl	80010e4 <_ZNSt9_Any_data9_M_accessEv>
 80061b8:	4603      	mov	r3, r0
 80061ba:	4619      	mov	r1, r3
 80061bc:	2004      	movs	r0, #4
 80061be:	f7fa ff35 	bl	800102c <_ZnwjPv>
 80061c2:	4603      	mov	r3, r0
 80061c4:	601c      	str	r4, [r3, #0]
	}
 80061c6:	bf00      	nop
 80061c8:	3714      	adds	r7, #20
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd90      	pop	{r4, r7, pc}

080061ce <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
 80061d6:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f000 f86d 	bl	80062b8 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}

080061e6 <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80061e6:	b580      	push	{r7, lr}
 80061e8:	b082      	sub	sp, #8
 80061ea:	af00      	add	r7, sp, #0
 80061ec:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 f89b 	bl	800632c <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80061f6:	4603      	mov	r3, r0
 80061f8:	4618      	mov	r0, r3
 80061fa:	f000 f87d 	bl	80062f8 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 80061fe:	4603      	mov	r3, r0
 8006200:	4618      	mov	r0, r3
 8006202:	3708      	adds	r7, #8
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 8006212:	2200      	movs	r2, #0
 8006214:	6839      	ldr	r1, [r7, #0]
 8006216:	6878      	ldr	r0, [r7, #4]
 8006218:	f000 f893 	bl	8006342 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 800621c:	4603      	mov	r3, r0
 800621e:	4618      	mov	r0, r3
 8006220:	3708      	adds	r7, #8
 8006222:	46bd      	mov	sp, r7
 8006224:	bd80      	pop	{r7, pc}

08006226 <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 8006226:	b580      	push	{r7, lr}
 8006228:	b084      	sub	sp, #16
 800622a:	af00      	add	r7, sp, #0
 800622c:	60f8      	str	r0, [r7, #12]
 800622e:	60b9      	str	r1, [r7, #8]
 8006230:	607a      	str	r2, [r7, #4]
 8006232:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 8006234:	683b      	ldr	r3, [r7, #0]
 8006236:	687a      	ldr	r2, [r7, #4]
 8006238:	68b9      	ldr	r1, [r7, #8]
 800623a:	68f8      	ldr	r0, [r7, #12]
 800623c:	f000 f89f 	bl	800637e <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006240:	4603      	mov	r3, r0
      }
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}

0800624a <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 800624a:	b580      	push	{r7, lr}
 800624c:	b084      	sub	sp, #16
 800624e:	af00      	add	r7, sp, #0
 8006250:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8006252:	f107 030c 	add.w	r3, r7, #12
 8006256:	6879      	ldr	r1, [r7, #4]
 8006258:	4618      	mov	r0, r3
 800625a:	f000 f8ad 	bl	80063b8 <_ZNSt13move_iteratorIPmEC1ES0_>
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	4618      	mov	r0, r3
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
 8006274:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8006276:	687a      	ldr	r2, [r7, #4]
 8006278:	68b9      	ldr	r1, [r7, #8]
 800627a:	68f8      	ldr	r0, [r7, #12]
 800627c:	f000 f8ab 	bl	80063d6 <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8006280:	4603      	mov	r3, r0
 8006282:	4618      	mov	r0, r3
 8006284:	3710      	adds	r7, #16
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 800628a:	b580      	push	{r7, lr}
 800628c:	b082      	sub	sp, #8
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 8006292:	6878      	ldr	r0, [r7, #4]
 8006294:	f7fa ff31 	bl	80010fa <_ZNKSt9_Any_data9_M_accessEv>
 8006298:	4603      	mov	r3, r0
 800629a:	4618      	mov	r0, r3
 800629c:	3708      	adds	r7, #8
 800629e:	46bd      	mov	sp, r7
 80062a0:	bd80      	pop	{r7, pc}

080062a2 <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 80062a2:	b480      	push	{r7}
 80062a4:	b083      	sub	sp, #12
 80062a6:	af00      	add	r7, sp, #0
 80062a8:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	4618      	mov	r0, r3
 80062ae:	370c      	adds	r7, #12
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr

080062b8 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80062b8:	b580      	push	{r7, lr}
 80062ba:	b082      	sub	sp, #8
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80062c0:	6878      	ldr	r0, [r7, #4]
 80062c2:	f7fa ff0f 	bl	80010e4 <_ZNSt9_Any_data9_M_accessEv>
 80062c6:	4603      	mov	r3, r0
 80062c8:	4618      	mov	r0, r3
 80062ca:	3708      	adds	r7, #8
 80062cc:	46bd      	mov	sp, r7
 80062ce:	bd80      	pop	{r7, pc}

080062d0 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80062d0:	b480      	push	{r7}
 80062d2:	b083      	sub	sp, #12
 80062d4:	af00      	add	r7, sp, #0
 80062d6:	6078      	str	r0, [r7, #4]
 80062d8:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80062da:	683b      	ldr	r3, [r7, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	429a      	cmp	r2, r3
 80062e4:	d201      	bcs.n	80062ea <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80062e6:	683b      	ldr	r3, [r7, #0]
 80062e8:	e000      	b.n	80062ec <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80062ea:	687b      	ldr	r3, [r7, #4]
    }
 80062ec:	4618      	mov	r0, r3
 80062ee:	370c      	adds	r7, #12
 80062f0:	46bd      	mov	sp, r7
 80062f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f6:	4770      	bx	lr

080062f8 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 8006300:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8006304:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8006306:	6878      	ldr	r0, [r7, #4]
 8006308:	f000 f877 	bl	80063fa <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 800630c:	4603      	mov	r3, r0
 800630e:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8006310:	f107 0208 	add.w	r2, r7, #8
 8006314:	f107 030c 	add.w	r3, r7, #12
 8006318:	4611      	mov	r1, r2
 800631a:	4618      	mov	r0, r3
 800631c:	f7ff ffd8 	bl	80062d0 <_ZSt3minIjERKT_S2_S2_>
 8006320:	4603      	mov	r3, r0
 8006322:	681b      	ldr	r3, [r3, #0]
      }
 8006324:	4618      	mov	r0, r3
 8006326:	3710      	adds	r7, #16
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 800632c:	b480      	push	{r7}
 800632e:	b083      	sub	sp, #12
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	4618      	mov	r0, r3
 8006338:	370c      	adds	r7, #12
 800633a:	46bd      	mov	sp, r7
 800633c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006340:	4770      	bx	lr

08006342 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8006342:	b580      	push	{r7, lr}
 8006344:	b084      	sub	sp, #16
 8006346:	af00      	add	r7, sp, #0
 8006348:	60f8      	str	r0, [r7, #12]
 800634a:	60b9      	str	r1, [r7, #8]
 800634c:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f85f 	bl	8006412 <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 8006354:	4602      	mov	r2, r0
 8006356:	68bb      	ldr	r3, [r7, #8]
 8006358:	4293      	cmp	r3, r2
 800635a:	bf8c      	ite	hi
 800635c:	2301      	movhi	r3, #1
 800635e:	2300      	movls	r3, #0
 8006360:	b2db      	uxtb	r3, r3
 8006362:	2b00      	cmp	r3, #0
 8006364:	d001      	beq.n	800636a <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 8006366:	f011 fd8b 	bl	8017e80 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 800636a:	68bb      	ldr	r3, [r7, #8]
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	4618      	mov	r0, r3
 8006370:	f011 fd73 	bl	8017e5a <_Znwj>
 8006374:	4603      	mov	r3, r0
      }
 8006376:	4618      	mov	r0, r3
 8006378:	3710      	adds	r7, #16
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}

0800637e <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 800637e:	b5b0      	push	{r4, r5, r7, lr}
 8006380:	b084      	sub	sp, #16
 8006382:	af00      	add	r7, sp, #0
 8006384:	60f8      	str	r0, [r7, #12]
 8006386:	60b9      	str	r1, [r7, #8]
 8006388:	607a      	str	r2, [r7, #4]
 800638a:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 800638c:	68f8      	ldr	r0, [r7, #12]
 800638e:	f000 f84c 	bl	800642a <_ZSt12__niter_baseIPmET_S1_>
 8006392:	4604      	mov	r4, r0
 8006394:	68b8      	ldr	r0, [r7, #8]
 8006396:	f000 f848 	bl	800642a <_ZSt12__niter_baseIPmET_S1_>
 800639a:	4605      	mov	r5, r0
 800639c:	6878      	ldr	r0, [r7, #4]
 800639e:	f000 f844 	bl	800642a <_ZSt12__niter_baseIPmET_S1_>
 80063a2:	4602      	mov	r2, r0
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	4629      	mov	r1, r5
 80063a8:	4620      	mov	r0, r4
 80063aa:	f000 f849 	bl	8006440 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 80063ae:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 80063b0:	4618      	mov	r0, r3
 80063b2:	3710      	adds	r7, #16
 80063b4:	46bd      	mov	sp, r7
 80063b6:	bdb0      	pop	{r4, r5, r7, pc}

080063b8 <_ZNSt13move_iteratorIPmEC1ES0_>:
      move_iterator(iterator_type __i)
 80063b8:	b480      	push	{r7}
 80063ba:	b083      	sub	sp, #12
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	683a      	ldr	r2, [r7, #0]
 80063c6:	601a      	str	r2, [r3, #0]
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	4618      	mov	r0, r3
 80063cc:	370c      	adds	r7, #12
 80063ce:	46bd      	mov	sp, r7
 80063d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d4:	4770      	bx	lr

080063d6 <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80063d6:	b580      	push	{r7, lr}
 80063d8:	b086      	sub	sp, #24
 80063da:	af00      	add	r7, sp, #0
 80063dc:	60f8      	str	r0, [r7, #12]
 80063de:	60b9      	str	r1, [r7, #8]
 80063e0:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80063e2:	2301      	movs	r3, #1
 80063e4:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	68b9      	ldr	r1, [r7, #8]
 80063ea:	68f8      	ldr	r0, [r7, #12]
 80063ec:	f000 f846 	bl	800647c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>
 80063f0:	4603      	mov	r3, r0
    }
 80063f2:	4618      	mov	r0, r3
 80063f4:	3718      	adds	r7, #24
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b082      	sub	sp, #8
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8006402:	6878      	ldr	r0, [r7, #4]
 8006404:	f000 f805 	bl	8006412 <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 8006408:	4603      	mov	r3, r0
 800640a:	4618      	mov	r0, r3
 800640c:	3708      	adds	r7, #8
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 800641a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 800641e:	4618      	mov	r0, r3
 8006420:	370c      	adds	r7, #12
 8006422:	46bd      	mov	sp, r7
 8006424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006428:	4770      	bx	lr

0800642a <_ZSt12__niter_baseIPmET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 800642a:	b480      	push	{r7}
 800642c:	b083      	sub	sp, #12
 800642e:	af00      	add	r7, sp, #0
 8006430:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4618      	mov	r0, r3
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006440:	b580      	push	{r7, lr}
 8006442:	b086      	sub	sp, #24
 8006444:	af00      	add	r7, sp, #0
 8006446:	60f8      	str	r0, [r7, #12]
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 800644e:	68ba      	ldr	r2, [r7, #8]
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	1ad3      	subs	r3, r2, r3
 8006454:	109b      	asrs	r3, r3, #2
 8006456:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006458:	697b      	ldr	r3, [r7, #20]
 800645a:	2b00      	cmp	r3, #0
 800645c:	dd06      	ble.n	800646c <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 800645e:	697b      	ldr	r3, [r7, #20]
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	461a      	mov	r2, r3
 8006464:	68f9      	ldr	r1, [r7, #12]
 8006466:	6878      	ldr	r0, [r7, #4]
 8006468:	f014 fed0 	bl	801b20c <memmove>
      return __result + __count;
 800646c:	697b      	ldr	r3, [r7, #20]
 800646e:	009b      	lsls	r3, r3, #2
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	4413      	add	r3, r2
    }
 8006474:	4618      	mov	r0, r3
 8006476:	3718      	adds	r7, #24
 8006478:	46bd      	mov	sp, r7
 800647a:	bd80      	pop	{r7, pc}

0800647c <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 800647c:	b580      	push	{r7, lr}
 800647e:	b084      	sub	sp, #16
 8006480:	af00      	add	r7, sp, #0
 8006482:	60f8      	str	r0, [r7, #12]
 8006484:	60b9      	str	r1, [r7, #8]
 8006486:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	68b9      	ldr	r1, [r7, #8]
 800648c:	68f8      	ldr	r0, [r7, #12]
 800648e:	f000 f805 	bl	800649c <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8006492:	4603      	mov	r3, r0
 8006494:	4618      	mov	r0, r3
 8006496:	3710      	adds	r7, #16
 8006498:	46bd      	mov	sp, r7
 800649a:	bd80      	pop	{r7, pc}

0800649c <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 800649c:	b590      	push	{r4, r7, lr}
 800649e:	b085      	sub	sp, #20
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	60f8      	str	r0, [r7, #12]
 80064a4:	60b9      	str	r1, [r7, #8]
 80064a6:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 f80f 	bl	80064cc <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80064ae:	4604      	mov	r4, r0
 80064b0:	68b8      	ldr	r0, [r7, #8]
 80064b2:	f000 f80b 	bl	80064cc <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80064b6:	4603      	mov	r3, r0
 80064b8:	687a      	ldr	r2, [r7, #4]
 80064ba:	4619      	mov	r1, r3
 80064bc:	4620      	mov	r0, r4
 80064be:	f000 f816 	bl	80064ee <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>
 80064c2:	4603      	mov	r3, r0
    }
 80064c4:	4618      	mov	r0, r3
 80064c6:	3714      	adds	r7, #20
 80064c8:	46bd      	mov	sp, r7
 80064ca:	bd90      	pop	{r4, r7, pc}

080064cc <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80064cc:	b580      	push	{r7, lr}
 80064ce:	b082      	sub	sp, #8
 80064d0:	af00      	add	r7, sp, #0
 80064d2:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80064d4:	1d3b      	adds	r3, r7, #4
 80064d6:	4618      	mov	r0, r3
 80064d8:	f000 f82c 	bl	8006534 <_ZNKSt13move_iteratorIPmE4baseEv>
 80064dc:	4603      	mov	r3, r0
 80064de:	4618      	mov	r0, r3
 80064e0:	f000 f834 	bl	800654c <_ZSt12__miter_baseIPmET_S1_>
 80064e4:	4603      	mov	r3, r0
 80064e6:	4618      	mov	r0, r3
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80064ee:	b5b0      	push	{r4, r5, r7, lr}
 80064f0:	b084      	sub	sp, #16
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80064fa:	68f8      	ldr	r0, [r7, #12]
 80064fc:	f7ff ff95 	bl	800642a <_ZSt12__niter_baseIPmET_S1_>
 8006500:	4604      	mov	r4, r0
 8006502:	68b8      	ldr	r0, [r7, #8]
 8006504:	f7ff ff91 	bl	800642a <_ZSt12__niter_baseIPmET_S1_>
 8006508:	4605      	mov	r5, r0
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	4618      	mov	r0, r3
 800650e:	f7ff ff8c 	bl	800642a <_ZSt12__niter_baseIPmET_S1_>
 8006512:	4603      	mov	r3, r0
 8006514:	461a      	mov	r2, r3
 8006516:	4629      	mov	r1, r5
 8006518:	4620      	mov	r0, r4
 800651a:	f000 f822 	bl	8006562 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>
 800651e:	4602      	mov	r2, r0
 8006520:	1d3b      	adds	r3, r7, #4
 8006522:	4611      	mov	r1, r2
 8006524:	4618      	mov	r0, r3
 8006526:	f000 f82e 	bl	8006586 <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 800652a:	4603      	mov	r3, r0
    }
 800652c:	4618      	mov	r0, r3
 800652e:	3710      	adds	r7, #16
 8006530:	46bd      	mov	sp, r7
 8006532:	bdb0      	pop	{r4, r5, r7, pc}

08006534 <_ZNKSt13move_iteratorIPmE4baseEv>:
      base() const
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	4618      	mov	r0, r3
 8006542:	370c      	adds	r7, #12
 8006544:	46bd      	mov	sp, r7
 8006546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800654a:	4770      	bx	lr

0800654c <_ZSt12__miter_baseIPmET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
 8006552:	6078      	str	r0, [r7, #4]
    { return __it; }
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	4618      	mov	r0, r3
 8006558:	370c      	adds	r7, #12
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr

08006562 <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8006562:	b580      	push	{r7, lr}
 8006564:	b086      	sub	sp, #24
 8006566:	af00      	add	r7, sp, #0
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 800656e:	2301      	movs	r3, #1
 8006570:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8006572:	687a      	ldr	r2, [r7, #4]
 8006574:	68b9      	ldr	r1, [r7, #8]
 8006576:	68f8      	ldr	r0, [r7, #12]
 8006578:	f000 f811 	bl	800659e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 800657c:	4603      	mov	r3, r0
    }
 800657e:	4618      	mov	r0, r3
 8006580:	3718      	adds	r7, #24
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}

08006586 <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8006586:	b480      	push	{r7}
 8006588:	b083      	sub	sp, #12
 800658a:	af00      	add	r7, sp, #0
 800658c:	6078      	str	r0, [r7, #4]
 800658e:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	4618      	mov	r0, r3
 8006594:	370c      	adds	r7, #12
 8006596:	46bd      	mov	sp, r7
 8006598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659c:	4770      	bx	lr

0800659e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 800659e:	b580      	push	{r7, lr}
 80065a0:	b086      	sub	sp, #24
 80065a2:	af00      	add	r7, sp, #0
 80065a4:	60f8      	str	r0, [r7, #12]
 80065a6:	60b9      	str	r1, [r7, #8]
 80065a8:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 80065aa:	68ba      	ldr	r2, [r7, #8]
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	1ad3      	subs	r3, r2, r3
 80065b0:	109b      	asrs	r3, r3, #2
 80065b2:	617b      	str	r3, [r7, #20]
	  if (_Num)
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d006      	beq.n	80065c8 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80065ba:	697b      	ldr	r3, [r7, #20]
 80065bc:	009b      	lsls	r3, r3, #2
 80065be:	461a      	mov	r2, r3
 80065c0:	68f9      	ldr	r1, [r7, #12]
 80065c2:	6878      	ldr	r0, [r7, #4]
 80065c4:	f014 fe22 	bl	801b20c <memmove>
	  return __result + _Num;
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	687a      	ldr	r2, [r7, #4]
 80065ce:	4413      	add	r3, r2
	}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b082      	sub	sp, #8
 80065dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065de:	2300      	movs	r3, #0
 80065e0:	607b      	str	r3, [r7, #4]
 80065e2:	4b10      	ldr	r3, [pc, #64]	; (8006624 <HAL_MspInit+0x4c>)
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	4a0f      	ldr	r2, [pc, #60]	; (8006624 <HAL_MspInit+0x4c>)
 80065e8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065ec:	6453      	str	r3, [r2, #68]	; 0x44
 80065ee:	4b0d      	ldr	r3, [pc, #52]	; (8006624 <HAL_MspInit+0x4c>)
 80065f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065f6:	607b      	str	r3, [r7, #4]
 80065f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065fa:	2300      	movs	r3, #0
 80065fc:	603b      	str	r3, [r7, #0]
 80065fe:	4b09      	ldr	r3, [pc, #36]	; (8006624 <HAL_MspInit+0x4c>)
 8006600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006602:	4a08      	ldr	r2, [pc, #32]	; (8006624 <HAL_MspInit+0x4c>)
 8006604:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006608:	6413      	str	r3, [r2, #64]	; 0x40
 800660a:	4b06      	ldr	r3, [pc, #24]	; (8006624 <HAL_MspInit+0x4c>)
 800660c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006612:	603b      	str	r3, [r7, #0]
 8006614:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8006616:	2007      	movs	r0, #7
 8006618:	f000 fb74 	bl	8006d04 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800661c:	bf00      	nop
 800661e:	3708      	adds	r7, #8
 8006620:	46bd      	mov	sp, r7
 8006622:	bd80      	pop	{r7, pc}
 8006624:	40023800 	.word	0x40023800

08006628 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006628:	b480      	push	{r7}
 800662a:	b085      	sub	sp, #20
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a0b      	ldr	r2, [pc, #44]	; (8006664 <HAL_CRC_MspInit+0x3c>)
 8006636:	4293      	cmp	r3, r2
 8006638:	d10d      	bne.n	8006656 <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800663a:	2300      	movs	r3, #0
 800663c:	60fb      	str	r3, [r7, #12]
 800663e:	4b0a      	ldr	r3, [pc, #40]	; (8006668 <HAL_CRC_MspInit+0x40>)
 8006640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006642:	4a09      	ldr	r2, [pc, #36]	; (8006668 <HAL_CRC_MspInit+0x40>)
 8006644:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006648:	6313      	str	r3, [r2, #48]	; 0x30
 800664a:	4b07      	ldr	r3, [pc, #28]	; (8006668 <HAL_CRC_MspInit+0x40>)
 800664c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800664e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006652:	60fb      	str	r3, [r7, #12]
 8006654:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8006656:	bf00      	nop
 8006658:	3714      	adds	r7, #20
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	40023000 	.word	0x40023000
 8006668:	40023800 	.word	0x40023800

0800666c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800666c:	b580      	push	{r7, lr}
 800666e:	b08a      	sub	sp, #40	; 0x28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006674:	f107 0314 	add.w	r3, r7, #20
 8006678:	2200      	movs	r2, #0
 800667a:	601a      	str	r2, [r3, #0]
 800667c:	605a      	str	r2, [r3, #4]
 800667e:	609a      	str	r2, [r3, #8]
 8006680:	60da      	str	r2, [r3, #12]
 8006682:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	4a19      	ldr	r2, [pc, #100]	; (80066f0 <HAL_UART_MspInit+0x84>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d12b      	bne.n	80066e6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800668e:	2300      	movs	r3, #0
 8006690:	613b      	str	r3, [r7, #16]
 8006692:	4b18      	ldr	r3, [pc, #96]	; (80066f4 <HAL_UART_MspInit+0x88>)
 8006694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006696:	4a17      	ldr	r2, [pc, #92]	; (80066f4 <HAL_UART_MspInit+0x88>)
 8006698:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800669c:	6413      	str	r3, [r2, #64]	; 0x40
 800669e:	4b15      	ldr	r3, [pc, #84]	; (80066f4 <HAL_UART_MspInit+0x88>)
 80066a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80066a6:	613b      	str	r3, [r7, #16]
 80066a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80066aa:	2300      	movs	r3, #0
 80066ac:	60fb      	str	r3, [r7, #12]
 80066ae:	4b11      	ldr	r3, [pc, #68]	; (80066f4 <HAL_UART_MspInit+0x88>)
 80066b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066b2:	4a10      	ldr	r2, [pc, #64]	; (80066f4 <HAL_UART_MspInit+0x88>)
 80066b4:	f043 0301 	orr.w	r3, r3, #1
 80066b8:	6313      	str	r3, [r2, #48]	; 0x30
 80066ba:	4b0e      	ldr	r3, [pc, #56]	; (80066f4 <HAL_UART_MspInit+0x88>)
 80066bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066be:	f003 0301 	and.w	r3, r3, #1
 80066c2:	60fb      	str	r3, [r7, #12]
 80066c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80066c6:	230c      	movs	r3, #12
 80066c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066ca:	2302      	movs	r3, #2
 80066cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066ce:	2300      	movs	r3, #0
 80066d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066d2:	2303      	movs	r3, #3
 80066d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80066d6:	2307      	movs	r3, #7
 80066d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066da:	f107 0314 	add.w	r3, r7, #20
 80066de:	4619      	mov	r1, r3
 80066e0:	4805      	ldr	r0, [pc, #20]	; (80066f8 <HAL_UART_MspInit+0x8c>)
 80066e2:	f000 ff4d 	bl	8007580 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80066e6:	bf00      	nop
 80066e8:	3728      	adds	r7, #40	; 0x28
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	40004400 	.word	0x40004400
 80066f4:	40023800 	.word	0x40023800
 80066f8:	40020000 	.word	0x40020000

080066fc <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b088      	sub	sp, #32
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	4a3b      	ldr	r2, [pc, #236]	; (80067f8 <HAL_SAI_MspInit+0xfc>)
 800670a:	4293      	cmp	r3, r2
 800670c:	d16f      	bne.n	80067ee <HAL_SAI_MspInit+0xf2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 800670e:	4b3b      	ldr	r3, [pc, #236]	; (80067fc <HAL_SAI_MspInit+0x100>)
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	2b00      	cmp	r3, #0
 8006714:	d10d      	bne.n	8006732 <HAL_SAI_MspInit+0x36>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8006716:	2300      	movs	r3, #0
 8006718:	60bb      	str	r3, [r7, #8]
 800671a:	4b39      	ldr	r3, [pc, #228]	; (8006800 <HAL_SAI_MspInit+0x104>)
 800671c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800671e:	4a38      	ldr	r2, [pc, #224]	; (8006800 <HAL_SAI_MspInit+0x104>)
 8006720:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006724:	6453      	str	r3, [r2, #68]	; 0x44
 8006726:	4b36      	ldr	r3, [pc, #216]	; (8006800 <HAL_SAI_MspInit+0x104>)
 8006728:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800672a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800672e:	60bb      	str	r3, [r7, #8]
 8006730:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 8006732:	4b32      	ldr	r3, [pc, #200]	; (80067fc <HAL_SAI_MspInit+0x100>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	3301      	adds	r3, #1
 8006738:	4a30      	ldr	r2, [pc, #192]	; (80067fc <HAL_SAI_MspInit+0x100>)
 800673a:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 800673c:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8006740:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006742:	2302      	movs	r3, #2
 8006744:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006746:	2300      	movs	r3, #0
 8006748:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800674a:	2300      	movs	r3, #0
 800674c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 800674e:	2306      	movs	r3, #6
 8006750:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006752:	f107 030c 	add.w	r3, r7, #12
 8006756:	4619      	mov	r1, r3
 8006758:	482a      	ldr	r0, [pc, #168]	; (8006804 <HAL_SAI_MspInit+0x108>)
 800675a:	f000 ff11 	bl	8007580 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800675e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006762:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006764:	2302      	movs	r3, #2
 8006766:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006768:	2300      	movs	r3, #0
 800676a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800676c:	2300      	movs	r3, #0
 800676e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006770:	2306      	movs	r3, #6
 8006772:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006774:	f107 030c 	add.w	r3, r7, #12
 8006778:	4619      	mov	r1, r3
 800677a:	4823      	ldr	r0, [pc, #140]	; (8006808 <HAL_SAI_MspInit+0x10c>)
 800677c:	f000 ff00 	bl	8007580 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8006780:	4b22      	ldr	r3, [pc, #136]	; (800680c <HAL_SAI_MspInit+0x110>)
 8006782:	4a23      	ldr	r2, [pc, #140]	; (8006810 <HAL_SAI_MspInit+0x114>)
 8006784:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 8006786:	4b21      	ldr	r3, [pc, #132]	; (800680c <HAL_SAI_MspInit+0x110>)
 8006788:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800678c:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800678e:	4b1f      	ldr	r3, [pc, #124]	; (800680c <HAL_SAI_MspInit+0x110>)
 8006790:	2200      	movs	r2, #0
 8006792:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 8006794:	4b1d      	ldr	r3, [pc, #116]	; (800680c <HAL_SAI_MspInit+0x110>)
 8006796:	2200      	movs	r2, #0
 8006798:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 800679a:	4b1c      	ldr	r3, [pc, #112]	; (800680c <HAL_SAI_MspInit+0x110>)
 800679c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80067a0:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80067a2:	4b1a      	ldr	r3, [pc, #104]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067a4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80067a8:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80067aa:	4b18      	ldr	r3, [pc, #96]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067ac:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80067b0:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 80067b2:	4b16      	ldr	r3, [pc, #88]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067b8:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 80067ba:	4b14      	ldr	r3, [pc, #80]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067bc:	2200      	movs	r2, #0
 80067be:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067c0:	4b12      	ldr	r3, [pc, #72]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067c2:	2200      	movs	r2, #0
 80067c4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80067c6:	4811      	ldr	r0, [pc, #68]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067c8:	f000 fafa 	bl	8006dc0 <HAL_DMA_Init>
 80067cc:	4603      	mov	r3, r0
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d001      	beq.n	80067d6 <HAL_SAI_MspInit+0xda>
    {
      Error_Handler();
 80067d2:	f7fe ff1f 	bl	8005614 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	4a0c      	ldr	r2, [pc, #48]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067da:	675a      	str	r2, [r3, #116]	; 0x74
 80067dc:	4a0b      	ldr	r2, [pc, #44]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a09      	ldr	r2, [pc, #36]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067e6:	671a      	str	r2, [r3, #112]	; 0x70
 80067e8:	4a08      	ldr	r2, [pc, #32]	; (800680c <HAL_SAI_MspInit+0x110>)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80067ee:	bf00      	nop
 80067f0:	3720      	adds	r7, #32
 80067f2:	46bd      	mov	sp, r7
 80067f4:	bd80      	pop	{r7, pc}
 80067f6:	bf00      	nop
 80067f8:	40015824 	.word	0x40015824
 80067fc:	20006b70 	.word	0x20006b70
 8006800:	40023800 	.word	0x40023800
 8006804:	40020400 	.word	0x40020400
 8006808:	40020000 	.word	0x40020000
 800680c:	200006b0 	.word	0x200006b0
 8006810:	40026470 	.word	0x40026470

08006814 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006818:	e7fe      	b.n	8006818 <NMI_Handler+0x4>

0800681a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800681a:	b480      	push	{r7}
 800681c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800681e:	e7fe      	b.n	800681e <HardFault_Handler+0x4>

08006820 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006820:	b480      	push	{r7}
 8006822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8006824:	e7fe      	b.n	8006824 <MemManage_Handler+0x4>

08006826 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8006826:	b480      	push	{r7}
 8006828:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800682a:	e7fe      	b.n	800682a <BusFault_Handler+0x4>

0800682c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800682c:	b480      	push	{r7}
 800682e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006830:	e7fe      	b.n	8006830 <UsageFault_Handler+0x4>

08006832 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8006832:	b480      	push	{r7}
 8006834:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8006836:	bf00      	nop
 8006838:	46bd      	mov	sp, r7
 800683a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683e:	4770      	bx	lr

08006840 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006840:	b480      	push	{r7}
 8006842:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006844:	bf00      	nop
 8006846:	46bd      	mov	sp, r7
 8006848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684c:	4770      	bx	lr

0800684e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800684e:	b480      	push	{r7}
 8006850:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006852:	bf00      	nop
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006860:	f000 f960 	bl	8006b24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006864:	bf00      	nop
 8006866:	bd80      	pop	{r7, pc}

08006868 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006868:	b580      	push	{r7, lr}
 800686a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 800686c:	4802      	ldr	r0, [pc, #8]	; (8006878 <DMA2_Stream4_IRQHandler+0x10>)
 800686e:	f000 fc1d 	bl	80070ac <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8006872:	bf00      	nop
 8006874:	bd80      	pop	{r7, pc}
 8006876:	bf00      	nop
 8006878:	200006b0 	.word	0x200006b0

0800687c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800687c:	b480      	push	{r7}
 800687e:	af00      	add	r7, sp, #0
	return 1;
 8006880:	2301      	movs	r3, #1
}
 8006882:	4618      	mov	r0, r3
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr

0800688c <_kill>:

int _kill(int pid, int sig)
{
 800688c:	b580      	push	{r7, lr}
 800688e:	b082      	sub	sp, #8
 8006890:	af00      	add	r7, sp, #0
 8006892:	6078      	str	r0, [r7, #4]
 8006894:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8006896:	f014 fbcb 	bl	801b030 <__errno>
 800689a:	4603      	mov	r3, r0
 800689c:	2216      	movs	r2, #22
 800689e:	601a      	str	r2, [r3, #0]
	return -1;
 80068a0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	3708      	adds	r7, #8
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}

080068ac <_exit>:

void _exit (int status)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b082      	sub	sp, #8
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80068b4:	f04f 31ff 	mov.w	r1, #4294967295
 80068b8:	6878      	ldr	r0, [r7, #4]
 80068ba:	f7ff ffe7 	bl	800688c <_kill>
	while (1) {}		/* Make sure we hang here */
 80068be:	e7fe      	b.n	80068be <_exit+0x12>

080068c0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	60f8      	str	r0, [r7, #12]
 80068c8:	60b9      	str	r1, [r7, #8]
 80068ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068cc:	2300      	movs	r3, #0
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	e00a      	b.n	80068e8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068d2:	f3af 8000 	nop.w
 80068d6:	4601      	mov	r1, r0
 80068d8:	68bb      	ldr	r3, [r7, #8]
 80068da:	1c5a      	adds	r2, r3, #1
 80068dc:	60ba      	str	r2, [r7, #8]
 80068de:	b2ca      	uxtb	r2, r1
 80068e0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	3301      	adds	r3, #1
 80068e6:	617b      	str	r3, [r7, #20]
 80068e8:	697a      	ldr	r2, [r7, #20]
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	429a      	cmp	r2, r3
 80068ee:	dbf0      	blt.n	80068d2 <_read+0x12>
	}

return len;
 80068f0:	687b      	ldr	r3, [r7, #4]
}
 80068f2:	4618      	mov	r0, r3
 80068f4:	3718      	adds	r7, #24
 80068f6:	46bd      	mov	sp, r7
 80068f8:	bd80      	pop	{r7, pc}

080068fa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80068fa:	b580      	push	{r7, lr}
 80068fc:	b086      	sub	sp, #24
 80068fe:	af00      	add	r7, sp, #0
 8006900:	60f8      	str	r0, [r7, #12]
 8006902:	60b9      	str	r1, [r7, #8]
 8006904:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006906:	2300      	movs	r3, #0
 8006908:	617b      	str	r3, [r7, #20]
 800690a:	e009      	b.n	8006920 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800690c:	68bb      	ldr	r3, [r7, #8]
 800690e:	1c5a      	adds	r2, r3, #1
 8006910:	60ba      	str	r2, [r7, #8]
 8006912:	781b      	ldrb	r3, [r3, #0]
 8006914:	4618      	mov	r0, r3
 8006916:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	3301      	adds	r3, #1
 800691e:	617b      	str	r3, [r7, #20]
 8006920:	697a      	ldr	r2, [r7, #20]
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	429a      	cmp	r2, r3
 8006926:	dbf1      	blt.n	800690c <_write+0x12>
	}
	return len;
 8006928:	687b      	ldr	r3, [r7, #4]
}
 800692a:	4618      	mov	r0, r3
 800692c:	3718      	adds	r7, #24
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}

08006932 <_close>:

int _close(int file)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
	return -1;
 800693a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800693e:	4618      	mov	r0, r3
 8006940:	370c      	adds	r7, #12
 8006942:	46bd      	mov	sp, r7
 8006944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006948:	4770      	bx	lr

0800694a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800694a:	b480      	push	{r7}
 800694c:	b083      	sub	sp, #12
 800694e:	af00      	add	r7, sp, #0
 8006950:	6078      	str	r0, [r7, #4]
 8006952:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006954:	683b      	ldr	r3, [r7, #0]
 8006956:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800695a:	605a      	str	r2, [r3, #4]
	return 0;
 800695c:	2300      	movs	r3, #0
}
 800695e:	4618      	mov	r0, r3
 8006960:	370c      	adds	r7, #12
 8006962:	46bd      	mov	sp, r7
 8006964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006968:	4770      	bx	lr

0800696a <_isatty>:

int _isatty(int file)
{
 800696a:	b480      	push	{r7}
 800696c:	b083      	sub	sp, #12
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
	return 1;
 8006972:	2301      	movs	r3, #1
}
 8006974:	4618      	mov	r0, r3
 8006976:	370c      	adds	r7, #12
 8006978:	46bd      	mov	sp, r7
 800697a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800697e:	4770      	bx	lr

08006980 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006980:	b480      	push	{r7}
 8006982:	b085      	sub	sp, #20
 8006984:	af00      	add	r7, sp, #0
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
	return 0;
 800698c:	2300      	movs	r3, #0
}
 800698e:	4618      	mov	r0, r3
 8006990:	3714      	adds	r7, #20
 8006992:	46bd      	mov	sp, r7
 8006994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006998:	4770      	bx	lr
	...

0800699c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800699c:	b580      	push	{r7, lr}
 800699e:	b086      	sub	sp, #24
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80069a4:	4a14      	ldr	r2, [pc, #80]	; (80069f8 <_sbrk+0x5c>)
 80069a6:	4b15      	ldr	r3, [pc, #84]	; (80069fc <_sbrk+0x60>)
 80069a8:	1ad3      	subs	r3, r2, r3
 80069aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80069b0:	4b13      	ldr	r3, [pc, #76]	; (8006a00 <_sbrk+0x64>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	d102      	bne.n	80069be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069b8:	4b11      	ldr	r3, [pc, #68]	; (8006a00 <_sbrk+0x64>)
 80069ba:	4a12      	ldr	r2, [pc, #72]	; (8006a04 <_sbrk+0x68>)
 80069bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069be:	4b10      	ldr	r3, [pc, #64]	; (8006a00 <_sbrk+0x64>)
 80069c0:	681a      	ldr	r2, [r3, #0]
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4413      	add	r3, r2
 80069c6:	693a      	ldr	r2, [r7, #16]
 80069c8:	429a      	cmp	r2, r3
 80069ca:	d207      	bcs.n	80069dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069cc:	f014 fb30 	bl	801b030 <__errno>
 80069d0:	4603      	mov	r3, r0
 80069d2:	220c      	movs	r2, #12
 80069d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069d6:	f04f 33ff 	mov.w	r3, #4294967295
 80069da:	e009      	b.n	80069f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069dc:	4b08      	ldr	r3, [pc, #32]	; (8006a00 <_sbrk+0x64>)
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069e2:	4b07      	ldr	r3, [pc, #28]	; (8006a00 <_sbrk+0x64>)
 80069e4:	681a      	ldr	r2, [r3, #0]
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	4413      	add	r3, r2
 80069ea:	4a05      	ldr	r2, [pc, #20]	; (8006a00 <_sbrk+0x64>)
 80069ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069ee:	68fb      	ldr	r3, [r7, #12]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20020000 	.word	0x20020000
 80069fc:	00000400 	.word	0x00000400
 8006a00:	20006b74 	.word	0x20006b74
 8006a04:	20007ad0 	.word	0x20007ad0

08006a08 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006a0c:	4b06      	ldr	r3, [pc, #24]	; (8006a28 <SystemInit+0x20>)
 8006a0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006a12:	4a05      	ldr	r2, [pc, #20]	; (8006a28 <SystemInit+0x20>)
 8006a14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a1c:	bf00      	nop
 8006a1e:	46bd      	mov	sp, r7
 8006a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a24:	4770      	bx	lr
 8006a26:	bf00      	nop
 8006a28:	e000ed00 	.word	0xe000ed00

08006a2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006a2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a64 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006a30:	480d      	ldr	r0, [pc, #52]	; (8006a68 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006a32:	490e      	ldr	r1, [pc, #56]	; (8006a6c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006a34:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006a36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a38:	e002      	b.n	8006a40 <LoopCopyDataInit>

08006a3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a3e:	3304      	adds	r3, #4

08006a40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a44:	d3f9      	bcc.n	8006a3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a46:	4a0b      	ldr	r2, [pc, #44]	; (8006a74 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006a48:	4c0b      	ldr	r4, [pc, #44]	; (8006a78 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006a4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a4c:	e001      	b.n	8006a52 <LoopFillZerobss>

08006a4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a50:	3204      	adds	r2, #4

08006a52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a54:	d3fb      	bcc.n	8006a4e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a56:	f7ff ffd7 	bl	8006a08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a5a:	f014 fb83 	bl	801b164 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a5e:	f7fe f9f5 	bl	8004e4c <main>
  bx  lr    
 8006a62:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006a64:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a68:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a6c:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 8006a70:	0803f024 	.word	0x0803f024
  ldr r2, =_sbss
 8006a74:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8006a78:	20007ad0 	.word	0x20007ad0

08006a7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a7c:	e7fe      	b.n	8006a7c <ADC_IRQHandler>
	...

08006a80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a80:	b580      	push	{r7, lr}
 8006a82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a84:	4b0e      	ldr	r3, [pc, #56]	; (8006ac0 <HAL_Init+0x40>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a0d      	ldr	r2, [pc, #52]	; (8006ac0 <HAL_Init+0x40>)
 8006a8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a90:	4b0b      	ldr	r3, [pc, #44]	; (8006ac0 <HAL_Init+0x40>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4a0a      	ldr	r2, [pc, #40]	; (8006ac0 <HAL_Init+0x40>)
 8006a96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a9c:	4b08      	ldr	r3, [pc, #32]	; (8006ac0 <HAL_Init+0x40>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	4a07      	ldr	r2, [pc, #28]	; (8006ac0 <HAL_Init+0x40>)
 8006aa2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006aa6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006aa8:	2003      	movs	r0, #3
 8006aaa:	f000 f92b 	bl	8006d04 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006aae:	2000      	movs	r0, #0
 8006ab0:	f000 f808 	bl	8006ac4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006ab4:	f7ff fd90 	bl	80065d8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006ab8:	2300      	movs	r3, #0
}
 8006aba:	4618      	mov	r0, r3
 8006abc:	bd80      	pop	{r7, pc}
 8006abe:	bf00      	nop
 8006ac0:	40023c00 	.word	0x40023c00

08006ac4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b082      	sub	sp, #8
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006acc:	4b12      	ldr	r3, [pc, #72]	; (8006b18 <HAL_InitTick+0x54>)
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	4b12      	ldr	r3, [pc, #72]	; (8006b1c <HAL_InitTick+0x58>)
 8006ad2:	781b      	ldrb	r3, [r3, #0]
 8006ad4:	4619      	mov	r1, r3
 8006ad6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ada:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ade:	fbb2 f3f3 	udiv	r3, r2, r3
 8006ae2:	4618      	mov	r0, r3
 8006ae4:	f000 f943 	bl	8006d6e <HAL_SYSTICK_Config>
 8006ae8:	4603      	mov	r3, r0
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d001      	beq.n	8006af2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006aee:	2301      	movs	r3, #1
 8006af0:	e00e      	b.n	8006b10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	2b0f      	cmp	r3, #15
 8006af6:	d80a      	bhi.n	8006b0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006af8:	2200      	movs	r2, #0
 8006afa:	6879      	ldr	r1, [r7, #4]
 8006afc:	f04f 30ff 	mov.w	r0, #4294967295
 8006b00:	f000 f90b 	bl	8006d1a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006b04:	4a06      	ldr	r2, [pc, #24]	; (8006b20 <HAL_InitTick+0x5c>)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	e000      	b.n	8006b10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006b0e:	2301      	movs	r3, #1
}
 8006b10:	4618      	mov	r0, r3
 8006b12:	3708      	adds	r7, #8
 8006b14:	46bd      	mov	sp, r7
 8006b16:	bd80      	pop	{r7, pc}
 8006b18:	20000058 	.word	0x20000058
 8006b1c:	20000060 	.word	0x20000060
 8006b20:	2000005c 	.word	0x2000005c

08006b24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b24:	b480      	push	{r7}
 8006b26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b28:	4b06      	ldr	r3, [pc, #24]	; (8006b44 <HAL_IncTick+0x20>)
 8006b2a:	781b      	ldrb	r3, [r3, #0]
 8006b2c:	461a      	mov	r2, r3
 8006b2e:	4b06      	ldr	r3, [pc, #24]	; (8006b48 <HAL_IncTick+0x24>)
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4413      	add	r3, r2
 8006b34:	4a04      	ldr	r2, [pc, #16]	; (8006b48 <HAL_IncTick+0x24>)
 8006b36:	6013      	str	r3, [r2, #0]
}
 8006b38:	bf00      	nop
 8006b3a:	46bd      	mov	sp, r7
 8006b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b40:	4770      	bx	lr
 8006b42:	bf00      	nop
 8006b44:	20000060 	.word	0x20000060
 8006b48:	20007abc 	.word	0x20007abc

08006b4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	af00      	add	r7, sp, #0
  return uwTick;
 8006b50:	4b03      	ldr	r3, [pc, #12]	; (8006b60 <HAL_GetTick+0x14>)
 8006b52:	681b      	ldr	r3, [r3, #0]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	20007abc 	.word	0x20007abc

08006b64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b64:	b480      	push	{r7}
 8006b66:	b085      	sub	sp, #20
 8006b68:	af00      	add	r7, sp, #0
 8006b6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	f003 0307 	and.w	r3, r3, #7
 8006b72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8006b76:	68db      	ldr	r3, [r3, #12]
 8006b78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b7a:	68ba      	ldr	r2, [r7, #8]
 8006b7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b80:	4013      	ands	r3, r2
 8006b82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b84:	68fb      	ldr	r3, [r7, #12]
 8006b86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b96:	4a04      	ldr	r2, [pc, #16]	; (8006ba8 <__NVIC_SetPriorityGrouping+0x44>)
 8006b98:	68bb      	ldr	r3, [r7, #8]
 8006b9a:	60d3      	str	r3, [r2, #12]
}
 8006b9c:	bf00      	nop
 8006b9e:	3714      	adds	r7, #20
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	e000ed00 	.word	0xe000ed00

08006bac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006bac:	b480      	push	{r7}
 8006bae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006bb0:	4b04      	ldr	r3, [pc, #16]	; (8006bc4 <__NVIC_GetPriorityGrouping+0x18>)
 8006bb2:	68db      	ldr	r3, [r3, #12]
 8006bb4:	0a1b      	lsrs	r3, r3, #8
 8006bb6:	f003 0307 	and.w	r3, r3, #7
}
 8006bba:	4618      	mov	r0, r3
 8006bbc:	46bd      	mov	sp, r7
 8006bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc2:	4770      	bx	lr
 8006bc4:	e000ed00 	.word	0xe000ed00

08006bc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bc8:	b480      	push	{r7}
 8006bca:	b083      	sub	sp, #12
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	4603      	mov	r3, r0
 8006bd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	db0b      	blt.n	8006bf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bda:	79fb      	ldrb	r3, [r7, #7]
 8006bdc:	f003 021f 	and.w	r2, r3, #31
 8006be0:	4907      	ldr	r1, [pc, #28]	; (8006c00 <__NVIC_EnableIRQ+0x38>)
 8006be2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006be6:	095b      	lsrs	r3, r3, #5
 8006be8:	2001      	movs	r0, #1
 8006bea:	fa00 f202 	lsl.w	r2, r0, r2
 8006bee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006bf2:	bf00      	nop
 8006bf4:	370c      	adds	r7, #12
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bfc:	4770      	bx	lr
 8006bfe:	bf00      	nop
 8006c00:	e000e100 	.word	0xe000e100

08006c04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006c04:	b480      	push	{r7}
 8006c06:	b083      	sub	sp, #12
 8006c08:	af00      	add	r7, sp, #0
 8006c0a:	4603      	mov	r3, r0
 8006c0c:	6039      	str	r1, [r7, #0]
 8006c0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006c10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	db0a      	blt.n	8006c2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c18:	683b      	ldr	r3, [r7, #0]
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	490c      	ldr	r1, [pc, #48]	; (8006c50 <__NVIC_SetPriority+0x4c>)
 8006c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c22:	0112      	lsls	r2, r2, #4
 8006c24:	b2d2      	uxtb	r2, r2
 8006c26:	440b      	add	r3, r1
 8006c28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c2c:	e00a      	b.n	8006c44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	b2da      	uxtb	r2, r3
 8006c32:	4908      	ldr	r1, [pc, #32]	; (8006c54 <__NVIC_SetPriority+0x50>)
 8006c34:	79fb      	ldrb	r3, [r7, #7]
 8006c36:	f003 030f 	and.w	r3, r3, #15
 8006c3a:	3b04      	subs	r3, #4
 8006c3c:	0112      	lsls	r2, r2, #4
 8006c3e:	b2d2      	uxtb	r2, r2
 8006c40:	440b      	add	r3, r1
 8006c42:	761a      	strb	r2, [r3, #24]
}
 8006c44:	bf00      	nop
 8006c46:	370c      	adds	r7, #12
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4e:	4770      	bx	lr
 8006c50:	e000e100 	.word	0xe000e100
 8006c54:	e000ed00 	.word	0xe000ed00

08006c58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c58:	b480      	push	{r7}
 8006c5a:	b089      	sub	sp, #36	; 0x24
 8006c5c:	af00      	add	r7, sp, #0
 8006c5e:	60f8      	str	r0, [r7, #12]
 8006c60:	60b9      	str	r1, [r7, #8]
 8006c62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f003 0307 	and.w	r3, r3, #7
 8006c6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c6c:	69fb      	ldr	r3, [r7, #28]
 8006c6e:	f1c3 0307 	rsb	r3, r3, #7
 8006c72:	2b04      	cmp	r3, #4
 8006c74:	bf28      	it	cs
 8006c76:	2304      	movcs	r3, #4
 8006c78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c7a:	69fb      	ldr	r3, [r7, #28]
 8006c7c:	3304      	adds	r3, #4
 8006c7e:	2b06      	cmp	r3, #6
 8006c80:	d902      	bls.n	8006c88 <NVIC_EncodePriority+0x30>
 8006c82:	69fb      	ldr	r3, [r7, #28]
 8006c84:	3b03      	subs	r3, #3
 8006c86:	e000      	b.n	8006c8a <NVIC_EncodePriority+0x32>
 8006c88:	2300      	movs	r3, #0
 8006c8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c8c:	f04f 32ff 	mov.w	r2, #4294967295
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	fa02 f303 	lsl.w	r3, r2, r3
 8006c96:	43da      	mvns	r2, r3
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	401a      	ands	r2, r3
 8006c9c:	697b      	ldr	r3, [r7, #20]
 8006c9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006ca0:	f04f 31ff 	mov.w	r1, #4294967295
 8006ca4:	697b      	ldr	r3, [r7, #20]
 8006ca6:	fa01 f303 	lsl.w	r3, r1, r3
 8006caa:	43d9      	mvns	r1, r3
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006cb0:	4313      	orrs	r3, r2
         );
}
 8006cb2:	4618      	mov	r0, r3
 8006cb4:	3724      	adds	r7, #36	; 0x24
 8006cb6:	46bd      	mov	sp, r7
 8006cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cbc:	4770      	bx	lr
	...

08006cc0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006cc0:	b580      	push	{r7, lr}
 8006cc2:	b082      	sub	sp, #8
 8006cc4:	af00      	add	r7, sp, #0
 8006cc6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	3b01      	subs	r3, #1
 8006ccc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cd0:	d301      	bcc.n	8006cd6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cd2:	2301      	movs	r3, #1
 8006cd4:	e00f      	b.n	8006cf6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cd6:	4a0a      	ldr	r2, [pc, #40]	; (8006d00 <SysTick_Config+0x40>)
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	3b01      	subs	r3, #1
 8006cdc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cde:	210f      	movs	r1, #15
 8006ce0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ce4:	f7ff ff8e 	bl	8006c04 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006ce8:	4b05      	ldr	r3, [pc, #20]	; (8006d00 <SysTick_Config+0x40>)
 8006cea:	2200      	movs	r2, #0
 8006cec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cee:	4b04      	ldr	r3, [pc, #16]	; (8006d00 <SysTick_Config+0x40>)
 8006cf0:	2207      	movs	r2, #7
 8006cf2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cf4:	2300      	movs	r3, #0
}
 8006cf6:	4618      	mov	r0, r3
 8006cf8:	3708      	adds	r7, #8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop
 8006d00:	e000e010 	.word	0xe000e010

08006d04 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b082      	sub	sp, #8
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006d0c:	6878      	ldr	r0, [r7, #4]
 8006d0e:	f7ff ff29 	bl	8006b64 <__NVIC_SetPriorityGrouping>
}
 8006d12:	bf00      	nop
 8006d14:	3708      	adds	r7, #8
 8006d16:	46bd      	mov	sp, r7
 8006d18:	bd80      	pop	{r7, pc}

08006d1a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d1a:	b580      	push	{r7, lr}
 8006d1c:	b086      	sub	sp, #24
 8006d1e:	af00      	add	r7, sp, #0
 8006d20:	4603      	mov	r3, r0
 8006d22:	60b9      	str	r1, [r7, #8]
 8006d24:	607a      	str	r2, [r7, #4]
 8006d26:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d28:	2300      	movs	r3, #0
 8006d2a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d2c:	f7ff ff3e 	bl	8006bac <__NVIC_GetPriorityGrouping>
 8006d30:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	68b9      	ldr	r1, [r7, #8]
 8006d36:	6978      	ldr	r0, [r7, #20]
 8006d38:	f7ff ff8e 	bl	8006c58 <NVIC_EncodePriority>
 8006d3c:	4602      	mov	r2, r0
 8006d3e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d42:	4611      	mov	r1, r2
 8006d44:	4618      	mov	r0, r3
 8006d46:	f7ff ff5d 	bl	8006c04 <__NVIC_SetPriority>
}
 8006d4a:	bf00      	nop
 8006d4c:	3718      	adds	r7, #24
 8006d4e:	46bd      	mov	sp, r7
 8006d50:	bd80      	pop	{r7, pc}

08006d52 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d52:	b580      	push	{r7, lr}
 8006d54:	b082      	sub	sp, #8
 8006d56:	af00      	add	r7, sp, #0
 8006d58:	4603      	mov	r3, r0
 8006d5a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d60:	4618      	mov	r0, r3
 8006d62:	f7ff ff31 	bl	8006bc8 <__NVIC_EnableIRQ>
}
 8006d66:	bf00      	nop
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d76:	6878      	ldr	r0, [r7, #4]
 8006d78:	f7ff ffa2 	bl	8006cc0 <SysTick_Config>
 8006d7c:	4603      	mov	r3, r0
}
 8006d7e:	4618      	mov	r0, r3
 8006d80:	3708      	adds	r7, #8
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}

08006d86 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006d86:	b580      	push	{r7, lr}
 8006d88:	b082      	sub	sp, #8
 8006d8a:	af00      	add	r7, sp, #0
 8006d8c:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	d101      	bne.n	8006d98 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006d94:	2301      	movs	r3, #1
 8006d96:	e00e      	b.n	8006db6 <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	795b      	ldrb	r3, [r3, #5]
 8006d9c:	b2db      	uxtb	r3, r3
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d105      	bne.n	8006dae <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006da8:	6878      	ldr	r0, [r7, #4]
 8006daa:	f7ff fc3d 	bl	8006628 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2201      	movs	r2, #1
 8006db2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006db4:	2300      	movs	r3, #0
}
 8006db6:	4618      	mov	r0, r3
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
	...

08006dc0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006dc0:	b580      	push	{r7, lr}
 8006dc2:	b086      	sub	sp, #24
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006dcc:	f7ff febe 	bl	8006b4c <HAL_GetTick>
 8006dd0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d101      	bne.n	8006ddc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e099      	b.n	8006f10 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	2200      	movs	r2, #0
 8006de0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	2202      	movs	r2, #2
 8006de8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	681a      	ldr	r2, [r3, #0]
 8006df2:	687b      	ldr	r3, [r7, #4]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	f022 0201 	bic.w	r2, r2, #1
 8006dfa:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006dfc:	e00f      	b.n	8006e1e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006dfe:	f7ff fea5 	bl	8006b4c <HAL_GetTick>
 8006e02:	4602      	mov	r2, r0
 8006e04:	693b      	ldr	r3, [r7, #16]
 8006e06:	1ad3      	subs	r3, r2, r3
 8006e08:	2b05      	cmp	r3, #5
 8006e0a:	d908      	bls.n	8006e1e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	2203      	movs	r2, #3
 8006e16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e1a:	2303      	movs	r3, #3
 8006e1c:	e078      	b.n	8006f10 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0301 	and.w	r3, r3, #1
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d1e8      	bne.n	8006dfe <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4b38      	ldr	r3, [pc, #224]	; (8006f18 <HAL_DMA_Init+0x158>)
 8006e38:	4013      	ands	r3, r2
 8006e3a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	685a      	ldr	r2, [r3, #4]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	689b      	ldr	r3, [r3, #8]
 8006e44:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e4a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	691b      	ldr	r3, [r3, #16]
 8006e50:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e56:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	699b      	ldr	r3, [r3, #24]
 8006e5c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e62:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6a1b      	ldr	r3, [r3, #32]
 8006e68:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e74:	2b04      	cmp	r3, #4
 8006e76:	d107      	bne.n	8006e88 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e80:	4313      	orrs	r3, r2
 8006e82:	697a      	ldr	r2, [r7, #20]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	695b      	ldr	r3, [r3, #20]
 8006e96:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e98:	697b      	ldr	r3, [r7, #20]
 8006e9a:	f023 0307 	bic.w	r3, r3, #7
 8006e9e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ea4:	697a      	ldr	r2, [r7, #20]
 8006ea6:	4313      	orrs	r3, r2
 8006ea8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006eae:	2b04      	cmp	r3, #4
 8006eb0:	d117      	bne.n	8006ee2 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006eb6:	697a      	ldr	r2, [r7, #20]
 8006eb8:	4313      	orrs	r3, r2
 8006eba:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d00e      	beq.n	8006ee2 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f000 fadf 	bl	8007488 <DMA_CheckFifoParam>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d008      	beq.n	8006ee2 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	2240      	movs	r2, #64	; 0x40
 8006ed4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2201      	movs	r2, #1
 8006eda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e016      	b.n	8006f10 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	697a      	ldr	r2, [r7, #20]
 8006ee8:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 fa96 	bl	800741c <DMA_CalcBaseAndBitshift>
 8006ef0:	4603      	mov	r3, r0
 8006ef2:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ef8:	223f      	movs	r2, #63	; 0x3f
 8006efa:	409a      	lsls	r2, r3
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2201      	movs	r2, #1
 8006f0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3718      	adds	r7, #24
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}
 8006f18:	f010803f 	.word	0xf010803f

08006f1c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f1c:	b580      	push	{r7, lr}
 8006f1e:	b086      	sub	sp, #24
 8006f20:	af00      	add	r7, sp, #0
 8006f22:	60f8      	str	r0, [r7, #12]
 8006f24:	60b9      	str	r1, [r7, #8]
 8006f26:	607a      	str	r2, [r7, #4]
 8006f28:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f32:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d101      	bne.n	8006f42 <HAL_DMA_Start_IT+0x26>
 8006f3e:	2302      	movs	r3, #2
 8006f40:	e040      	b.n	8006fc4 <HAL_DMA_Start_IT+0xa8>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	2201      	movs	r2, #1
 8006f46:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f50:	b2db      	uxtb	r3, r3
 8006f52:	2b01      	cmp	r3, #1
 8006f54:	d12f      	bne.n	8006fb6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	2202      	movs	r2, #2
 8006f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	2200      	movs	r2, #0
 8006f62:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	687a      	ldr	r2, [r7, #4]
 8006f68:	68b9      	ldr	r1, [r7, #8]
 8006f6a:	68f8      	ldr	r0, [r7, #12]
 8006f6c:	f000 fa28 	bl	80073c0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f74:	223f      	movs	r2, #63	; 0x3f
 8006f76:	409a      	lsls	r2, r3
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0216 	orr.w	r2, r2, #22
 8006f8a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	2b00      	cmp	r3, #0
 8006f92:	d007      	beq.n	8006fa4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f94:	68fb      	ldr	r3, [r7, #12]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	681a      	ldr	r2, [r3, #0]
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	f042 0208 	orr.w	r2, r2, #8
 8006fa2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006fa4:	68fb      	ldr	r3, [r7, #12]
 8006fa6:	681b      	ldr	r3, [r3, #0]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	f042 0201 	orr.w	r2, r2, #1
 8006fb2:	601a      	str	r2, [r3, #0]
 8006fb4:	e005      	b.n	8006fc2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2200      	movs	r2, #0
 8006fba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006fbe:	2302      	movs	r3, #2
 8006fc0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006fc2:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	3718      	adds	r7, #24
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	bd80      	pop	{r7, pc}

08006fcc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b084      	sub	sp, #16
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fd8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006fda:	f7ff fdb7 	bl	8006b4c <HAL_GetTick>
 8006fde:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fe6:	b2db      	uxtb	r3, r3
 8006fe8:	2b02      	cmp	r3, #2
 8006fea:	d008      	beq.n	8006ffe <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	2280      	movs	r2, #128	; 0x80
 8006ff0:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006ffa:	2301      	movs	r3, #1
 8006ffc:	e052      	b.n	80070a4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f022 0216 	bic.w	r2, r2, #22
 800700c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	695a      	ldr	r2, [r3, #20]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800701c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007022:	2b00      	cmp	r3, #0
 8007024:	d103      	bne.n	800702e <HAL_DMA_Abort+0x62>
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800702a:	2b00      	cmp	r3, #0
 800702c:	d007      	beq.n	800703e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	681a      	ldr	r2, [r3, #0]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0208 	bic.w	r2, r2, #8
 800703c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f022 0201 	bic.w	r2, r2, #1
 800704c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800704e:	e013      	b.n	8007078 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007050:	f7ff fd7c 	bl	8006b4c <HAL_GetTick>
 8007054:	4602      	mov	r2, r0
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	1ad3      	subs	r3, r2, r3
 800705a:	2b05      	cmp	r3, #5
 800705c:	d90c      	bls.n	8007078 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2220      	movs	r2, #32
 8007062:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	2200      	movs	r2, #0
 8007068:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2203      	movs	r2, #3
 8007070:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8007074:	2303      	movs	r3, #3
 8007076:	e015      	b.n	80070a4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	f003 0301 	and.w	r3, r3, #1
 8007082:	2b00      	cmp	r3, #0
 8007084:	d1e4      	bne.n	8007050 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800708a:	223f      	movs	r2, #63	; 0x3f
 800708c:	409a      	lsls	r2, r3
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	2201      	movs	r2, #1
 800709e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80070a2:	2300      	movs	r3, #0
}
 80070a4:	4618      	mov	r0, r3
 80070a6:	3710      	adds	r7, #16
 80070a8:	46bd      	mov	sp, r7
 80070aa:	bd80      	pop	{r7, pc}

080070ac <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b086      	sub	sp, #24
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80070b4:	2300      	movs	r3, #0
 80070b6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070b8:	4b92      	ldr	r3, [pc, #584]	; (8007304 <HAL_DMA_IRQHandler+0x258>)
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	4a92      	ldr	r2, [pc, #584]	; (8007308 <HAL_DMA_IRQHandler+0x25c>)
 80070be:	fba2 2303 	umull	r2, r3, r2, r3
 80070c2:	0a9b      	lsrs	r3, r3, #10
 80070c4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070ca:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80070cc:	693b      	ldr	r3, [r7, #16]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070d6:	2208      	movs	r2, #8
 80070d8:	409a      	lsls	r2, r3
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	4013      	ands	r3, r2
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d01a      	beq.n	8007118 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	f003 0304 	and.w	r3, r3, #4
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d013      	beq.n	8007118 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	f022 0204 	bic.w	r2, r2, #4
 80070fe:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007104:	2208      	movs	r2, #8
 8007106:	409a      	lsls	r2, r3
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007110:	f043 0201 	orr.w	r2, r3, #1
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800711c:	2201      	movs	r2, #1
 800711e:	409a      	lsls	r2, r3
 8007120:	68fb      	ldr	r3, [r7, #12]
 8007122:	4013      	ands	r3, r2
 8007124:	2b00      	cmp	r3, #0
 8007126:	d012      	beq.n	800714e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695b      	ldr	r3, [r3, #20]
 800712e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007132:	2b00      	cmp	r3, #0
 8007134:	d00b      	beq.n	800714e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713a:	2201      	movs	r2, #1
 800713c:	409a      	lsls	r2, r3
 800713e:	693b      	ldr	r3, [r7, #16]
 8007140:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007146:	f043 0202 	orr.w	r2, r3, #2
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007152:	2204      	movs	r2, #4
 8007154:	409a      	lsls	r2, r3
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	4013      	ands	r3, r2
 800715a:	2b00      	cmp	r3, #0
 800715c:	d012      	beq.n	8007184 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f003 0302 	and.w	r3, r3, #2
 8007168:	2b00      	cmp	r3, #0
 800716a:	d00b      	beq.n	8007184 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007170:	2204      	movs	r2, #4
 8007172:	409a      	lsls	r2, r3
 8007174:	693b      	ldr	r3, [r7, #16]
 8007176:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800717c:	f043 0204 	orr.w	r2, r3, #4
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007188:	2210      	movs	r2, #16
 800718a:	409a      	lsls	r2, r3
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	4013      	ands	r3, r2
 8007190:	2b00      	cmp	r3, #0
 8007192:	d043      	beq.n	800721c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	f003 0308 	and.w	r3, r3, #8
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d03c      	beq.n	800721c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80071a2:	687b      	ldr	r3, [r7, #4]
 80071a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071a6:	2210      	movs	r2, #16
 80071a8:	409a      	lsls	r2, r3
 80071aa:	693b      	ldr	r3, [r7, #16]
 80071ac:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	681b      	ldr	r3, [r3, #0]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d018      	beq.n	80071ee <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d108      	bne.n	80071dc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d024      	beq.n	800721c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	4798      	blx	r3
 80071da:	e01f      	b.n	800721c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d01b      	beq.n	800721c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	4798      	blx	r3
 80071ec:	e016      	b.n	800721c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d107      	bne.n	800720c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	681a      	ldr	r2, [r3, #0]
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f022 0208 	bic.w	r2, r2, #8
 800720a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007210:	2b00      	cmp	r3, #0
 8007212:	d003      	beq.n	800721c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007220:	2220      	movs	r2, #32
 8007222:	409a      	lsls	r2, r3
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	4013      	ands	r3, r2
 8007228:	2b00      	cmp	r3, #0
 800722a:	f000 808e 	beq.w	800734a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	f003 0310 	and.w	r3, r3, #16
 8007238:	2b00      	cmp	r3, #0
 800723a:	f000 8086 	beq.w	800734a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007242:	2220      	movs	r2, #32
 8007244:	409a      	lsls	r2, r3
 8007246:	693b      	ldr	r3, [r7, #16]
 8007248:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007250:	b2db      	uxtb	r3, r3
 8007252:	2b05      	cmp	r3, #5
 8007254:	d136      	bne.n	80072c4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f022 0216 	bic.w	r2, r2, #22
 8007264:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	695a      	ldr	r2, [r3, #20]
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	681b      	ldr	r3, [r3, #0]
 8007270:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007274:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800727a:	2b00      	cmp	r3, #0
 800727c:	d103      	bne.n	8007286 <HAL_DMA_IRQHandler+0x1da>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007282:	2b00      	cmp	r3, #0
 8007284:	d007      	beq.n	8007296 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	681a      	ldr	r2, [r3, #0]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	f022 0208 	bic.w	r2, r2, #8
 8007294:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800729a:	223f      	movs	r2, #63	; 0x3f
 800729c:	409a      	lsls	r2, r3
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	2200      	movs	r2, #0
 80072a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2201      	movs	r2, #1
 80072ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d07d      	beq.n	80073b6 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072be:	6878      	ldr	r0, [r7, #4]
 80072c0:	4798      	blx	r3
        }
        return;
 80072c2:	e078      	b.n	80073b6 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	681b      	ldr	r3, [r3, #0]
 80072ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d01c      	beq.n	800730c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d108      	bne.n	80072f2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d030      	beq.n	800734a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ec:	6878      	ldr	r0, [r7, #4]
 80072ee:	4798      	blx	r3
 80072f0:	e02b      	b.n	800734a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d027      	beq.n	800734a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	4798      	blx	r3
 8007302:	e022      	b.n	800734a <HAL_DMA_IRQHandler+0x29e>
 8007304:	20000058 	.word	0x20000058
 8007308:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007316:	2b00      	cmp	r3, #0
 8007318:	d10f      	bne.n	800733a <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f022 0210 	bic.w	r2, r2, #16
 8007328:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	2200      	movs	r2, #0
 800732e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	2201      	movs	r2, #1
 8007336:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800733e:	2b00      	cmp	r3, #0
 8007340:	d003      	beq.n	800734a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800734e:	2b00      	cmp	r3, #0
 8007350:	d032      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007356:	f003 0301 	and.w	r3, r3, #1
 800735a:	2b00      	cmp	r3, #0
 800735c:	d022      	beq.n	80073a4 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	2205      	movs	r2, #5
 8007362:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f022 0201 	bic.w	r2, r2, #1
 8007374:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007376:	68bb      	ldr	r3, [r7, #8]
 8007378:	3301      	adds	r3, #1
 800737a:	60bb      	str	r3, [r7, #8]
 800737c:	697a      	ldr	r2, [r7, #20]
 800737e:	429a      	cmp	r2, r3
 8007380:	d307      	bcc.n	8007392 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	f003 0301 	and.w	r3, r3, #1
 800738c:	2b00      	cmp	r3, #0
 800738e:	d1f2      	bne.n	8007376 <HAL_DMA_IRQHandler+0x2ca>
 8007390:	e000      	b.n	8007394 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007392:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	2200      	movs	r2, #0
 8007398:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	2201      	movs	r2, #1
 80073a0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a8:	2b00      	cmp	r3, #0
 80073aa:	d005      	beq.n	80073b8 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073b0:	6878      	ldr	r0, [r7, #4]
 80073b2:	4798      	blx	r3
 80073b4:	e000      	b.n	80073b8 <HAL_DMA_IRQHandler+0x30c>
        return;
 80073b6:	bf00      	nop
    }
  }
}
 80073b8:	3718      	adds	r7, #24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	bd80      	pop	{r7, pc}
 80073be:	bf00      	nop

080073c0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073c0:	b480      	push	{r7}
 80073c2:	b085      	sub	sp, #20
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	60f8      	str	r0, [r7, #12]
 80073c8:	60b9      	str	r1, [r7, #8]
 80073ca:	607a      	str	r2, [r7, #4]
 80073cc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	681a      	ldr	r2, [r3, #0]
 80073d4:	68fb      	ldr	r3, [r7, #12]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073dc:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	683a      	ldr	r2, [r7, #0]
 80073e4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073e6:	68fb      	ldr	r3, [r7, #12]
 80073e8:	689b      	ldr	r3, [r3, #8]
 80073ea:	2b40      	cmp	r3, #64	; 0x40
 80073ec:	d108      	bne.n	8007400 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	687a      	ldr	r2, [r7, #4]
 80073f4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68ba      	ldr	r2, [r7, #8]
 80073fc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073fe:	e007      	b.n	8007410 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	68ba      	ldr	r2, [r7, #8]
 8007406:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	60da      	str	r2, [r3, #12]
}
 8007410:	bf00      	nop
 8007412:	3714      	adds	r7, #20
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800741c:	b480      	push	{r7}
 800741e:	b085      	sub	sp, #20
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	b2db      	uxtb	r3, r3
 800742a:	3b10      	subs	r3, #16
 800742c:	4a14      	ldr	r2, [pc, #80]	; (8007480 <DMA_CalcBaseAndBitshift+0x64>)
 800742e:	fba2 2303 	umull	r2, r3, r2, r3
 8007432:	091b      	lsrs	r3, r3, #4
 8007434:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8007436:	4a13      	ldr	r2, [pc, #76]	; (8007484 <DMA_CalcBaseAndBitshift+0x68>)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	4413      	add	r3, r2
 800743c:	781b      	ldrb	r3, [r3, #0]
 800743e:	461a      	mov	r2, r3
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	2b03      	cmp	r3, #3
 8007448:	d909      	bls.n	800745e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	1d1a      	adds	r2, r3, #4
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	659a      	str	r2, [r3, #88]	; 0x58
 800745c:	e007      	b.n	800746e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	687a      	ldr	r2, [r7, #4]
 800746c:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8007472:	4618      	mov	r0, r3
 8007474:	3714      	adds	r7, #20
 8007476:	46bd      	mov	sp, r7
 8007478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747c:	4770      	bx	lr
 800747e:	bf00      	nop
 8007480:	aaaaaaab 	.word	0xaaaaaaab
 8007484:	0801f388 	.word	0x0801f388

08007488 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007488:	b480      	push	{r7}
 800748a:	b085      	sub	sp, #20
 800748c:	af00      	add	r7, sp, #0
 800748e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007490:	2300      	movs	r3, #0
 8007492:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007498:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	699b      	ldr	r3, [r3, #24]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d11f      	bne.n	80074e2 <DMA_CheckFifoParam+0x5a>
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b03      	cmp	r3, #3
 80074a6:	d856      	bhi.n	8007556 <DMA_CheckFifoParam+0xce>
 80074a8:	a201      	add	r2, pc, #4	; (adr r2, 80074b0 <DMA_CheckFifoParam+0x28>)
 80074aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074ae:	bf00      	nop
 80074b0:	080074c1 	.word	0x080074c1
 80074b4:	080074d3 	.word	0x080074d3
 80074b8:	080074c1 	.word	0x080074c1
 80074bc:	08007557 	.word	0x08007557
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074c4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d046      	beq.n	800755a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074d0:	e043      	b.n	800755a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074d6:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074da:	d140      	bne.n	800755e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074e0:	e03d      	b.n	800755e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	699b      	ldr	r3, [r3, #24]
 80074e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074ea:	d121      	bne.n	8007530 <DMA_CheckFifoParam+0xa8>
 80074ec:	68bb      	ldr	r3, [r7, #8]
 80074ee:	2b03      	cmp	r3, #3
 80074f0:	d837      	bhi.n	8007562 <DMA_CheckFifoParam+0xda>
 80074f2:	a201      	add	r2, pc, #4	; (adr r2, 80074f8 <DMA_CheckFifoParam+0x70>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007509 	.word	0x08007509
 80074fc:	0800750f 	.word	0x0800750f
 8007500:	08007509 	.word	0x08007509
 8007504:	08007521 	.word	0x08007521
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	73fb      	strb	r3, [r7, #15]
      break;
 800750c:	e030      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007512:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d025      	beq.n	8007566 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800751a:	2301      	movs	r3, #1
 800751c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800751e:	e022      	b.n	8007566 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007524:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007528:	d11f      	bne.n	800756a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800752a:	2301      	movs	r3, #1
 800752c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800752e:	e01c      	b.n	800756a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	2b02      	cmp	r3, #2
 8007534:	d903      	bls.n	800753e <DMA_CheckFifoParam+0xb6>
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	2b03      	cmp	r3, #3
 800753a:	d003      	beq.n	8007544 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800753c:	e018      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800753e:	2301      	movs	r3, #1
 8007540:	73fb      	strb	r3, [r7, #15]
      break;
 8007542:	e015      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007548:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800754c:	2b00      	cmp	r3, #0
 800754e:	d00e      	beq.n	800756e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007550:	2301      	movs	r3, #1
 8007552:	73fb      	strb	r3, [r7, #15]
      break;
 8007554:	e00b      	b.n	800756e <DMA_CheckFifoParam+0xe6>
      break;
 8007556:	bf00      	nop
 8007558:	e00a      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
      break;
 800755a:	bf00      	nop
 800755c:	e008      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
      break;
 800755e:	bf00      	nop
 8007560:	e006      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
      break;
 8007562:	bf00      	nop
 8007564:	e004      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
      break;
 8007566:	bf00      	nop
 8007568:	e002      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
      break;   
 800756a:	bf00      	nop
 800756c:	e000      	b.n	8007570 <DMA_CheckFifoParam+0xe8>
      break;
 800756e:	bf00      	nop
    }
  } 
  
  return status; 
 8007570:	7bfb      	ldrb	r3, [r7, #15]
}
 8007572:	4618      	mov	r0, r3
 8007574:	3714      	adds	r7, #20
 8007576:	46bd      	mov	sp, r7
 8007578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800757c:	4770      	bx	lr
 800757e:	bf00      	nop

08007580 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007580:	b480      	push	{r7}
 8007582:	b089      	sub	sp, #36	; 0x24
 8007584:	af00      	add	r7, sp, #0
 8007586:	6078      	str	r0, [r7, #4]
 8007588:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800758a:	2300      	movs	r3, #0
 800758c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800758e:	2300      	movs	r3, #0
 8007590:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007592:	2300      	movs	r3, #0
 8007594:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007596:	2300      	movs	r3, #0
 8007598:	61fb      	str	r3, [r7, #28]
 800759a:	e165      	b.n	8007868 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800759c:	2201      	movs	r2, #1
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	fa02 f303 	lsl.w	r3, r2, r3
 80075a4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	697a      	ldr	r2, [r7, #20]
 80075ac:	4013      	ands	r3, r2
 80075ae:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	429a      	cmp	r2, r3
 80075b6:	f040 8154 	bne.w	8007862 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075ba:	683b      	ldr	r3, [r7, #0]
 80075bc:	685b      	ldr	r3, [r3, #4]
 80075be:	f003 0303 	and.w	r3, r3, #3
 80075c2:	2b01      	cmp	r3, #1
 80075c4:	d005      	beq.n	80075d2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075c6:	683b      	ldr	r3, [r7, #0]
 80075c8:	685b      	ldr	r3, [r3, #4]
 80075ca:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075ce:	2b02      	cmp	r3, #2
 80075d0:	d130      	bne.n	8007634 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	689b      	ldr	r3, [r3, #8]
 80075d6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80075d8:	69fb      	ldr	r3, [r7, #28]
 80075da:	005b      	lsls	r3, r3, #1
 80075dc:	2203      	movs	r2, #3
 80075de:	fa02 f303 	lsl.w	r3, r2, r3
 80075e2:	43db      	mvns	r3, r3
 80075e4:	69ba      	ldr	r2, [r7, #24]
 80075e6:	4013      	ands	r3, r2
 80075e8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	68da      	ldr	r2, [r3, #12]
 80075ee:	69fb      	ldr	r3, [r7, #28]
 80075f0:	005b      	lsls	r3, r3, #1
 80075f2:	fa02 f303 	lsl.w	r3, r2, r3
 80075f6:	69ba      	ldr	r2, [r7, #24]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	69ba      	ldr	r2, [r7, #24]
 8007600:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	685b      	ldr	r3, [r3, #4]
 8007606:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007608:	2201      	movs	r2, #1
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	43db      	mvns	r3, r3
 8007612:	69ba      	ldr	r2, [r7, #24]
 8007614:	4013      	ands	r3, r2
 8007616:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	091b      	lsrs	r3, r3, #4
 800761e:	f003 0201 	and.w	r2, r3, #1
 8007622:	69fb      	ldr	r3, [r7, #28]
 8007624:	fa02 f303 	lsl.w	r3, r2, r3
 8007628:	69ba      	ldr	r2, [r7, #24]
 800762a:	4313      	orrs	r3, r2
 800762c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	69ba      	ldr	r2, [r7, #24]
 8007632:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007634:	683b      	ldr	r3, [r7, #0]
 8007636:	685b      	ldr	r3, [r3, #4]
 8007638:	f003 0303 	and.w	r3, r3, #3
 800763c:	2b03      	cmp	r3, #3
 800763e:	d017      	beq.n	8007670 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	68db      	ldr	r3, [r3, #12]
 8007644:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8007646:	69fb      	ldr	r3, [r7, #28]
 8007648:	005b      	lsls	r3, r3, #1
 800764a:	2203      	movs	r2, #3
 800764c:	fa02 f303 	lsl.w	r3, r2, r3
 8007650:	43db      	mvns	r3, r3
 8007652:	69ba      	ldr	r2, [r7, #24]
 8007654:	4013      	ands	r3, r2
 8007656:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	689a      	ldr	r2, [r3, #8]
 800765c:	69fb      	ldr	r3, [r7, #28]
 800765e:	005b      	lsls	r3, r3, #1
 8007660:	fa02 f303 	lsl.w	r3, r2, r3
 8007664:	69ba      	ldr	r2, [r7, #24]
 8007666:	4313      	orrs	r3, r2
 8007668:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	69ba      	ldr	r2, [r7, #24]
 800766e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007670:	683b      	ldr	r3, [r7, #0]
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	f003 0303 	and.w	r3, r3, #3
 8007678:	2b02      	cmp	r3, #2
 800767a:	d123      	bne.n	80076c4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800767c:	69fb      	ldr	r3, [r7, #28]
 800767e:	08da      	lsrs	r2, r3, #3
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	3208      	adds	r2, #8
 8007684:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007688:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800768a:	69fb      	ldr	r3, [r7, #28]
 800768c:	f003 0307 	and.w	r3, r3, #7
 8007690:	009b      	lsls	r3, r3, #2
 8007692:	220f      	movs	r2, #15
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	43db      	mvns	r3, r3
 800769a:	69ba      	ldr	r2, [r7, #24]
 800769c:	4013      	ands	r3, r2
 800769e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80076a0:	683b      	ldr	r3, [r7, #0]
 80076a2:	691a      	ldr	r2, [r3, #16]
 80076a4:	69fb      	ldr	r3, [r7, #28]
 80076a6:	f003 0307 	and.w	r3, r3, #7
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	fa02 f303 	lsl.w	r3, r2, r3
 80076b0:	69ba      	ldr	r2, [r7, #24]
 80076b2:	4313      	orrs	r3, r2
 80076b4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80076b6:	69fb      	ldr	r3, [r7, #28]
 80076b8:	08da      	lsrs	r2, r3, #3
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	3208      	adds	r2, #8
 80076be:	69b9      	ldr	r1, [r7, #24]
 80076c0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80076ca:	69fb      	ldr	r3, [r7, #28]
 80076cc:	005b      	lsls	r3, r3, #1
 80076ce:	2203      	movs	r2, #3
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	43db      	mvns	r3, r3
 80076d6:	69ba      	ldr	r2, [r7, #24]
 80076d8:	4013      	ands	r3, r2
 80076da:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076dc:	683b      	ldr	r3, [r7, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f003 0203 	and.w	r2, r3, #3
 80076e4:	69fb      	ldr	r3, [r7, #28]
 80076e6:	005b      	lsls	r3, r3, #1
 80076e8:	fa02 f303 	lsl.w	r3, r2, r3
 80076ec:	69ba      	ldr	r2, [r7, #24]
 80076ee:	4313      	orrs	r3, r2
 80076f0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	69ba      	ldr	r2, [r7, #24]
 80076f6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076f8:	683b      	ldr	r3, [r7, #0]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007700:	2b00      	cmp	r3, #0
 8007702:	f000 80ae 	beq.w	8007862 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007706:	2300      	movs	r3, #0
 8007708:	60fb      	str	r3, [r7, #12]
 800770a:	4b5d      	ldr	r3, [pc, #372]	; (8007880 <HAL_GPIO_Init+0x300>)
 800770c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800770e:	4a5c      	ldr	r2, [pc, #368]	; (8007880 <HAL_GPIO_Init+0x300>)
 8007710:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007714:	6453      	str	r3, [r2, #68]	; 0x44
 8007716:	4b5a      	ldr	r3, [pc, #360]	; (8007880 <HAL_GPIO_Init+0x300>)
 8007718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800771a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800771e:	60fb      	str	r3, [r7, #12]
 8007720:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8007722:	4a58      	ldr	r2, [pc, #352]	; (8007884 <HAL_GPIO_Init+0x304>)
 8007724:	69fb      	ldr	r3, [r7, #28]
 8007726:	089b      	lsrs	r3, r3, #2
 8007728:	3302      	adds	r3, #2
 800772a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800772e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007730:	69fb      	ldr	r3, [r7, #28]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	009b      	lsls	r3, r3, #2
 8007738:	220f      	movs	r2, #15
 800773a:	fa02 f303 	lsl.w	r3, r2, r3
 800773e:	43db      	mvns	r3, r3
 8007740:	69ba      	ldr	r2, [r7, #24]
 8007742:	4013      	ands	r3, r2
 8007744:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a4f      	ldr	r2, [pc, #316]	; (8007888 <HAL_GPIO_Init+0x308>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d025      	beq.n	800779a <HAL_GPIO_Init+0x21a>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a4e      	ldr	r2, [pc, #312]	; (800788c <HAL_GPIO_Init+0x30c>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d01f      	beq.n	8007796 <HAL_GPIO_Init+0x216>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a4d      	ldr	r2, [pc, #308]	; (8007890 <HAL_GPIO_Init+0x310>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d019      	beq.n	8007792 <HAL_GPIO_Init+0x212>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a4c      	ldr	r2, [pc, #304]	; (8007894 <HAL_GPIO_Init+0x314>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d013      	beq.n	800778e <HAL_GPIO_Init+0x20e>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	4a4b      	ldr	r2, [pc, #300]	; (8007898 <HAL_GPIO_Init+0x318>)
 800776a:	4293      	cmp	r3, r2
 800776c:	d00d      	beq.n	800778a <HAL_GPIO_Init+0x20a>
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	4a4a      	ldr	r2, [pc, #296]	; (800789c <HAL_GPIO_Init+0x31c>)
 8007772:	4293      	cmp	r3, r2
 8007774:	d007      	beq.n	8007786 <HAL_GPIO_Init+0x206>
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	4a49      	ldr	r2, [pc, #292]	; (80078a0 <HAL_GPIO_Init+0x320>)
 800777a:	4293      	cmp	r3, r2
 800777c:	d101      	bne.n	8007782 <HAL_GPIO_Init+0x202>
 800777e:	2306      	movs	r3, #6
 8007780:	e00c      	b.n	800779c <HAL_GPIO_Init+0x21c>
 8007782:	2307      	movs	r3, #7
 8007784:	e00a      	b.n	800779c <HAL_GPIO_Init+0x21c>
 8007786:	2305      	movs	r3, #5
 8007788:	e008      	b.n	800779c <HAL_GPIO_Init+0x21c>
 800778a:	2304      	movs	r3, #4
 800778c:	e006      	b.n	800779c <HAL_GPIO_Init+0x21c>
 800778e:	2303      	movs	r3, #3
 8007790:	e004      	b.n	800779c <HAL_GPIO_Init+0x21c>
 8007792:	2302      	movs	r3, #2
 8007794:	e002      	b.n	800779c <HAL_GPIO_Init+0x21c>
 8007796:	2301      	movs	r3, #1
 8007798:	e000      	b.n	800779c <HAL_GPIO_Init+0x21c>
 800779a:	2300      	movs	r3, #0
 800779c:	69fa      	ldr	r2, [r7, #28]
 800779e:	f002 0203 	and.w	r2, r2, #3
 80077a2:	0092      	lsls	r2, r2, #2
 80077a4:	4093      	lsls	r3, r2
 80077a6:	69ba      	ldr	r2, [r7, #24]
 80077a8:	4313      	orrs	r3, r2
 80077aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80077ac:	4935      	ldr	r1, [pc, #212]	; (8007884 <HAL_GPIO_Init+0x304>)
 80077ae:	69fb      	ldr	r3, [r7, #28]
 80077b0:	089b      	lsrs	r3, r3, #2
 80077b2:	3302      	adds	r3, #2
 80077b4:	69ba      	ldr	r2, [r7, #24]
 80077b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077ba:	4b3a      	ldr	r3, [pc, #232]	; (80078a4 <HAL_GPIO_Init+0x324>)
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	43db      	mvns	r3, r3
 80077c4:	69ba      	ldr	r2, [r7, #24]
 80077c6:	4013      	ands	r3, r2
 80077c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077ca:	683b      	ldr	r3, [r7, #0]
 80077cc:	685b      	ldr	r3, [r3, #4]
 80077ce:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d003      	beq.n	80077de <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4313      	orrs	r3, r2
 80077dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077de:	4a31      	ldr	r2, [pc, #196]	; (80078a4 <HAL_GPIO_Init+0x324>)
 80077e0:	69bb      	ldr	r3, [r7, #24]
 80077e2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80077e4:	4b2f      	ldr	r3, [pc, #188]	; (80078a4 <HAL_GPIO_Init+0x324>)
 80077e6:	685b      	ldr	r3, [r3, #4]
 80077e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	43db      	mvns	r3, r3
 80077ee:	69ba      	ldr	r2, [r7, #24]
 80077f0:	4013      	ands	r3, r2
 80077f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d003      	beq.n	8007808 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4313      	orrs	r3, r2
 8007806:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007808:	4a26      	ldr	r2, [pc, #152]	; (80078a4 <HAL_GPIO_Init+0x324>)
 800780a:	69bb      	ldr	r3, [r7, #24]
 800780c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800780e:	4b25      	ldr	r3, [pc, #148]	; (80078a4 <HAL_GPIO_Init+0x324>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	43db      	mvns	r3, r3
 8007818:	69ba      	ldr	r2, [r7, #24]
 800781a:	4013      	ands	r3, r2
 800781c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800781e:	683b      	ldr	r3, [r7, #0]
 8007820:	685b      	ldr	r3, [r3, #4]
 8007822:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007826:	2b00      	cmp	r3, #0
 8007828:	d003      	beq.n	8007832 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	4313      	orrs	r3, r2
 8007830:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007832:	4a1c      	ldr	r2, [pc, #112]	; (80078a4 <HAL_GPIO_Init+0x324>)
 8007834:	69bb      	ldr	r3, [r7, #24]
 8007836:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007838:	4b1a      	ldr	r3, [pc, #104]	; (80078a4 <HAL_GPIO_Init+0x324>)
 800783a:	68db      	ldr	r3, [r3, #12]
 800783c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	43db      	mvns	r3, r3
 8007842:	69ba      	ldr	r2, [r7, #24]
 8007844:	4013      	ands	r3, r2
 8007846:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007848:	683b      	ldr	r3, [r7, #0]
 800784a:	685b      	ldr	r3, [r3, #4]
 800784c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007850:	2b00      	cmp	r3, #0
 8007852:	d003      	beq.n	800785c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8007854:	69ba      	ldr	r2, [r7, #24]
 8007856:	693b      	ldr	r3, [r7, #16]
 8007858:	4313      	orrs	r3, r2
 800785a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800785c:	4a11      	ldr	r2, [pc, #68]	; (80078a4 <HAL_GPIO_Init+0x324>)
 800785e:	69bb      	ldr	r3, [r7, #24]
 8007860:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007862:	69fb      	ldr	r3, [r7, #28]
 8007864:	3301      	adds	r3, #1
 8007866:	61fb      	str	r3, [r7, #28]
 8007868:	69fb      	ldr	r3, [r7, #28]
 800786a:	2b0f      	cmp	r3, #15
 800786c:	f67f ae96 	bls.w	800759c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007870:	bf00      	nop
 8007872:	bf00      	nop
 8007874:	3724      	adds	r7, #36	; 0x24
 8007876:	46bd      	mov	sp, r7
 8007878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787c:	4770      	bx	lr
 800787e:	bf00      	nop
 8007880:	40023800 	.word	0x40023800
 8007884:	40013800 	.word	0x40013800
 8007888:	40020000 	.word	0x40020000
 800788c:	40020400 	.word	0x40020400
 8007890:	40020800 	.word	0x40020800
 8007894:	40020c00 	.word	0x40020c00
 8007898:	40021000 	.word	0x40021000
 800789c:	40021400 	.word	0x40021400
 80078a0:	40021800 	.word	0x40021800
 80078a4:	40013c00 	.word	0x40013c00

080078a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b083      	sub	sp, #12
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	6078      	str	r0, [r7, #4]
 80078b0:	460b      	mov	r3, r1
 80078b2:	807b      	strh	r3, [r7, #2]
 80078b4:	4613      	mov	r3, r2
 80078b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078b8:	787b      	ldrb	r3, [r7, #1]
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	d003      	beq.n	80078c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078be:	887a      	ldrh	r2, [r7, #2]
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80078c4:	e003      	b.n	80078ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80078c6:	887b      	ldrh	r3, [r7, #2]
 80078c8:	041a      	lsls	r2, r3, #16
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	619a      	str	r2, [r3, #24]
}
 80078ce:	bf00      	nop
 80078d0:	370c      	adds	r7, #12
 80078d2:	46bd      	mov	sp, r7
 80078d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078d8:	4770      	bx	lr
	...

080078dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	6078      	str	r0, [r7, #4]
 80078e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d101      	bne.n	80078f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078ec:	2301      	movs	r3, #1
 80078ee:	e0cc      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078f0:	4b68      	ldr	r3, [pc, #416]	; (8007a94 <HAL_RCC_ClockConfig+0x1b8>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	f003 030f 	and.w	r3, r3, #15
 80078f8:	683a      	ldr	r2, [r7, #0]
 80078fa:	429a      	cmp	r2, r3
 80078fc:	d90c      	bls.n	8007918 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078fe:	4b65      	ldr	r3, [pc, #404]	; (8007a94 <HAL_RCC_ClockConfig+0x1b8>)
 8007900:	683a      	ldr	r2, [r7, #0]
 8007902:	b2d2      	uxtb	r2, r2
 8007904:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007906:	4b63      	ldr	r3, [pc, #396]	; (8007a94 <HAL_RCC_ClockConfig+0x1b8>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f003 030f 	and.w	r3, r3, #15
 800790e:	683a      	ldr	r2, [r7, #0]
 8007910:	429a      	cmp	r2, r3
 8007912:	d001      	beq.n	8007918 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007914:	2301      	movs	r3, #1
 8007916:	e0b8      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0302 	and.w	r3, r3, #2
 8007920:	2b00      	cmp	r3, #0
 8007922:	d020      	beq.n	8007966 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0304 	and.w	r3, r3, #4
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007930:	4b59      	ldr	r3, [pc, #356]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4a58      	ldr	r2, [pc, #352]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800793a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	f003 0308 	and.w	r3, r3, #8
 8007944:	2b00      	cmp	r3, #0
 8007946:	d005      	beq.n	8007954 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007948:	4b53      	ldr	r3, [pc, #332]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	4a52      	ldr	r2, [pc, #328]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 800794e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007952:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007954:	4b50      	ldr	r3, [pc, #320]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007956:	689b      	ldr	r3, [r3, #8]
 8007958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	689b      	ldr	r3, [r3, #8]
 8007960:	494d      	ldr	r1, [pc, #308]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007962:	4313      	orrs	r3, r2
 8007964:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	f003 0301 	and.w	r3, r3, #1
 800796e:	2b00      	cmp	r3, #0
 8007970:	d044      	beq.n	80079fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b01      	cmp	r3, #1
 8007978:	d107      	bne.n	800798a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800797a:	4b47      	ldr	r3, [pc, #284]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007982:	2b00      	cmp	r3, #0
 8007984:	d119      	bne.n	80079ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007986:	2301      	movs	r3, #1
 8007988:	e07f      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	2b02      	cmp	r3, #2
 8007990:	d003      	beq.n	800799a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007996:	2b03      	cmp	r3, #3
 8007998:	d107      	bne.n	80079aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800799a:	4b3f      	ldr	r3, [pc, #252]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d109      	bne.n	80079ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e06f      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80079aa:	4b3b      	ldr	r3, [pc, #236]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0302 	and.w	r3, r3, #2
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d101      	bne.n	80079ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079b6:	2301      	movs	r3, #1
 80079b8:	e067      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079ba:	4b37      	ldr	r3, [pc, #220]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f023 0203 	bic.w	r2, r3, #3
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	685b      	ldr	r3, [r3, #4]
 80079c6:	4934      	ldr	r1, [pc, #208]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 80079c8:	4313      	orrs	r3, r2
 80079ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079cc:	f7ff f8be 	bl	8006b4c <HAL_GetTick>
 80079d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d2:	e00a      	b.n	80079ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079d4:	f7ff f8ba 	bl	8006b4c <HAL_GetTick>
 80079d8:	4602      	mov	r2, r0
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	1ad3      	subs	r3, r2, r3
 80079de:	f241 3288 	movw	r2, #5000	; 0x1388
 80079e2:	4293      	cmp	r3, r2
 80079e4:	d901      	bls.n	80079ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079e6:	2303      	movs	r3, #3
 80079e8:	e04f      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ea:	4b2b      	ldr	r3, [pc, #172]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 80079ec:	689b      	ldr	r3, [r3, #8]
 80079ee:	f003 020c 	and.w	r2, r3, #12
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	685b      	ldr	r3, [r3, #4]
 80079f6:	009b      	lsls	r3, r3, #2
 80079f8:	429a      	cmp	r2, r3
 80079fa:	d1eb      	bne.n	80079d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079fc:	4b25      	ldr	r3, [pc, #148]	; (8007a94 <HAL_RCC_ClockConfig+0x1b8>)
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	f003 030f 	and.w	r3, r3, #15
 8007a04:	683a      	ldr	r2, [r7, #0]
 8007a06:	429a      	cmp	r2, r3
 8007a08:	d20c      	bcs.n	8007a24 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007a0a:	4b22      	ldr	r3, [pc, #136]	; (8007a94 <HAL_RCC_ClockConfig+0x1b8>)
 8007a0c:	683a      	ldr	r2, [r7, #0]
 8007a0e:	b2d2      	uxtb	r2, r2
 8007a10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a12:	4b20      	ldr	r3, [pc, #128]	; (8007a94 <HAL_RCC_ClockConfig+0x1b8>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	f003 030f 	and.w	r3, r3, #15
 8007a1a:	683a      	ldr	r2, [r7, #0]
 8007a1c:	429a      	cmp	r2, r3
 8007a1e:	d001      	beq.n	8007a24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a20:	2301      	movs	r3, #1
 8007a22:	e032      	b.n	8007a8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f003 0304 	and.w	r3, r3, #4
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d008      	beq.n	8007a42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a30:	4b19      	ldr	r3, [pc, #100]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007a32:	689b      	ldr	r3, [r3, #8]
 8007a34:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	68db      	ldr	r3, [r3, #12]
 8007a3c:	4916      	ldr	r1, [pc, #88]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007a3e:	4313      	orrs	r3, r2
 8007a40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	f003 0308 	and.w	r3, r3, #8
 8007a4a:	2b00      	cmp	r3, #0
 8007a4c:	d009      	beq.n	8007a62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a4e:	4b12      	ldr	r3, [pc, #72]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007a50:	689b      	ldr	r3, [r3, #8]
 8007a52:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	691b      	ldr	r3, [r3, #16]
 8007a5a:	00db      	lsls	r3, r3, #3
 8007a5c:	490e      	ldr	r1, [pc, #56]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a62:	f000 fdc7 	bl	80085f4 <HAL_RCC_GetSysClockFreq>
 8007a66:	4602      	mov	r2, r0
 8007a68:	4b0b      	ldr	r3, [pc, #44]	; (8007a98 <HAL_RCC_ClockConfig+0x1bc>)
 8007a6a:	689b      	ldr	r3, [r3, #8]
 8007a6c:	091b      	lsrs	r3, r3, #4
 8007a6e:	f003 030f 	and.w	r3, r3, #15
 8007a72:	490a      	ldr	r1, [pc, #40]	; (8007a9c <HAL_RCC_ClockConfig+0x1c0>)
 8007a74:	5ccb      	ldrb	r3, [r1, r3]
 8007a76:	fa22 f303 	lsr.w	r3, r2, r3
 8007a7a:	4a09      	ldr	r2, [pc, #36]	; (8007aa0 <HAL_RCC_ClockConfig+0x1c4>)
 8007a7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a7e:	4b09      	ldr	r3, [pc, #36]	; (8007aa4 <HAL_RCC_ClockConfig+0x1c8>)
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	4618      	mov	r0, r3
 8007a84:	f7ff f81e 	bl	8006ac4 <HAL_InitTick>

  return HAL_OK;
 8007a88:	2300      	movs	r3, #0
}
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	3710      	adds	r7, #16
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	bd80      	pop	{r7, pc}
 8007a92:	bf00      	nop
 8007a94:	40023c00 	.word	0x40023c00
 8007a98:	40023800 	.word	0x40023800
 8007a9c:	0801f370 	.word	0x0801f370
 8007aa0:	20000058 	.word	0x20000058
 8007aa4:	2000005c 	.word	0x2000005c

08007aa8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007aa8:	b480      	push	{r7}
 8007aaa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007aac:	4b03      	ldr	r3, [pc, #12]	; (8007abc <HAL_RCC_GetHCLKFreq+0x14>)
 8007aae:	681b      	ldr	r3, [r3, #0]
}
 8007ab0:	4618      	mov	r0, r3
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	20000058 	.word	0x20000058

08007ac0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007ac0:	b580      	push	{r7, lr}
 8007ac2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007ac4:	f7ff fff0 	bl	8007aa8 <HAL_RCC_GetHCLKFreq>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	4b05      	ldr	r3, [pc, #20]	; (8007ae0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007acc:	689b      	ldr	r3, [r3, #8]
 8007ace:	0a9b      	lsrs	r3, r3, #10
 8007ad0:	f003 0307 	and.w	r3, r3, #7
 8007ad4:	4903      	ldr	r1, [pc, #12]	; (8007ae4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007ad6:	5ccb      	ldrb	r3, [r1, r3]
 8007ad8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	bd80      	pop	{r7, pc}
 8007ae0:	40023800 	.word	0x40023800
 8007ae4:	0801f380 	.word	0x0801f380

08007ae8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ae8:	b580      	push	{r7, lr}
 8007aea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007aec:	f7ff ffdc 	bl	8007aa8 <HAL_RCC_GetHCLKFreq>
 8007af0:	4602      	mov	r2, r0
 8007af2:	4b05      	ldr	r3, [pc, #20]	; (8007b08 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	0b5b      	lsrs	r3, r3, #13
 8007af8:	f003 0307 	and.w	r3, r3, #7
 8007afc:	4903      	ldr	r1, [pc, #12]	; (8007b0c <HAL_RCC_GetPCLK2Freq+0x24>)
 8007afe:	5ccb      	ldrb	r3, [r1, r3]
 8007b00:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	bd80      	pop	{r7, pc}
 8007b08:	40023800 	.word	0x40023800
 8007b0c:	0801f380 	.word	0x0801f380

08007b10 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007b10:	b580      	push	{r7, lr}
 8007b12:	b08c      	sub	sp, #48	; 0x30
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007b24:	2300      	movs	r3, #0
 8007b26:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007b30:	2300      	movs	r3, #0
 8007b32:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007b34:	2300      	movs	r3, #0
 8007b36:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8007b38:	2300      	movs	r3, #0
 8007b3a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	f003 0301 	and.w	r3, r3, #1
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d010      	beq.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007b48:	4b6f      	ldr	r3, [pc, #444]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b4a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b4e:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	496c      	ldr	r1, [pc, #432]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b62:	2b00      	cmp	r3, #0
 8007b64:	d101      	bne.n	8007b6a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007b66:	2301      	movs	r3, #1
 8007b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681b      	ldr	r3, [r3, #0]
 8007b6e:	f003 0302 	and.w	r3, r3, #2
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d010      	beq.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007b76:	4b64      	ldr	r3, [pc, #400]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b78:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b7c:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b84:	4960      	ldr	r1, [pc, #384]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b86:	4313      	orrs	r3, r2
 8007b88:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	d101      	bne.n	8007b98 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007b94:	2301      	movs	r3, #1
 8007b96:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	f003 0304 	and.w	r3, r3, #4
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	d017      	beq.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007ba4:	4b58      	ldr	r3, [pc, #352]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ba6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007baa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb2:	4955      	ldr	r1, [pc, #340]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bb4:	4313      	orrs	r3, r2
 8007bb6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bbe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007bc2:	d101      	bne.n	8007bc8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007bc4:	2301      	movs	r3, #1
 8007bc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	f003 0308 	and.w	r3, r3, #8
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d017      	beq.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007be0:	4b49      	ldr	r3, [pc, #292]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007be2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007be6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bee:	4946      	ldr	r1, [pc, #280]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bf0:	4313      	orrs	r3, r2
 8007bf2:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bfa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007bfe:	d101      	bne.n	8007c04 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007c00:	2301      	movs	r3, #1
 8007c02:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007c08:	2b00      	cmp	r3, #0
 8007c0a:	d101      	bne.n	8007c10 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007c0c:	2301      	movs	r3, #1
 8007c0e:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f003 0320 	and.w	r3, r3, #32
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	f000 808a 	beq.w	8007d32 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c1e:	2300      	movs	r3, #0
 8007c20:	60bb      	str	r3, [r7, #8]
 8007c22:	4b39      	ldr	r3, [pc, #228]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	4a38      	ldr	r2, [pc, #224]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c2c:	6413      	str	r3, [r2, #64]	; 0x40
 8007c2e:	4b36      	ldr	r3, [pc, #216]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c36:	60bb      	str	r3, [r7, #8]
 8007c38:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c3a:	4b34      	ldr	r3, [pc, #208]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a33      	ldr	r2, [pc, #204]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007c40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c44:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c46:	f7fe ff81 	bl	8006b4c <HAL_GetTick>
 8007c4a:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c4e:	f7fe ff7d 	bl	8006b4c <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e278      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c60:	4b2a      	ldr	r3, [pc, #168]	; (8007d0c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d0f0      	beq.n	8007c4e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c6c:	4b26      	ldr	r3, [pc, #152]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c70:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c74:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c76:	6a3b      	ldr	r3, [r7, #32]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d02f      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c84:	6a3a      	ldr	r2, [r7, #32]
 8007c86:	429a      	cmp	r2, r3
 8007c88:	d028      	beq.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c8a:	4b1f      	ldr	r3, [pc, #124]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c8e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c92:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c94:	4b1e      	ldr	r3, [pc, #120]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007c96:	2201      	movs	r2, #1
 8007c98:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c9a:	4b1d      	ldr	r3, [pc, #116]	; (8007d10 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007ca0:	4a19      	ldr	r2, [pc, #100]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ca2:	6a3b      	ldr	r3, [r7, #32]
 8007ca4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007ca6:	4b18      	ldr	r3, [pc, #96]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007caa:	f003 0301 	and.w	r3, r3, #1
 8007cae:	2b01      	cmp	r3, #1
 8007cb0:	d114      	bne.n	8007cdc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007cb2:	f7fe ff4b 	bl	8006b4c <HAL_GetTick>
 8007cb6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cb8:	e00a      	b.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007cba:	f7fe ff47 	bl	8006b4c <HAL_GetTick>
 8007cbe:	4602      	mov	r2, r0
 8007cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc2:	1ad3      	subs	r3, r2, r3
 8007cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cc8:	4293      	cmp	r3, r2
 8007cca:	d901      	bls.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007ccc:	2303      	movs	r3, #3
 8007cce:	e240      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cd0:	4b0d      	ldr	r3, [pc, #52]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007cd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cd4:	f003 0302 	and.w	r3, r3, #2
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d0ee      	beq.n	8007cba <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ce0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ce4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007ce8:	d114      	bne.n	8007d14 <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007cea:	4b07      	ldr	r3, [pc, #28]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007cec:	689b      	ldr	r3, [r3, #8]
 8007cee:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cf6:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007cfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfe:	4902      	ldr	r1, [pc, #8]	; (8007d08 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007d00:	4313      	orrs	r3, r2
 8007d02:	608b      	str	r3, [r1, #8]
 8007d04:	e00c      	b.n	8007d20 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007d06:	bf00      	nop
 8007d08:	40023800 	.word	0x40023800
 8007d0c:	40007000 	.word	0x40007000
 8007d10:	42470e40 	.word	0x42470e40
 8007d14:	4b4a      	ldr	r3, [pc, #296]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	4a49      	ldr	r2, [pc, #292]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d1a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d1e:	6093      	str	r3, [r2, #8]
 8007d20:	4b47      	ldr	r3, [pc, #284]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d22:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d2c:	4944      	ldr	r1, [pc, #272]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d2e:	4313      	orrs	r3, r2
 8007d30:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	f003 0310 	and.w	r3, r3, #16
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d004      	beq.n	8007d48 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007d44:	4b3f      	ldr	r3, [pc, #252]	; (8007e44 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007d46:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	681b      	ldr	r3, [r3, #0]
 8007d4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d00a      	beq.n	8007d6a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007d54:	4b3a      	ldr	r3, [pc, #232]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d56:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d62:	4937      	ldr	r1, [pc, #220]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d64:	4313      	orrs	r3, r2
 8007d66:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d00a      	beq.n	8007d8c <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d76:	4b32      	ldr	r3, [pc, #200]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d78:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d7c:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d84:	492e      	ldr	r1, [pc, #184]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d86:	4313      	orrs	r3, r2
 8007d88:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d011      	beq.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d98:	4b29      	ldr	r3, [pc, #164]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d9a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d9e:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007da6:	4926      	ldr	r1, [pc, #152]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007da8:	4313      	orrs	r3, r2
 8007daa:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007db2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007db6:	d101      	bne.n	8007dbc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007db8:	2301      	movs	r3, #1
 8007dba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dc4:	2b00      	cmp	r3, #0
 8007dc6:	d00a      	beq.n	8007dde <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007dca:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dce:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dd6:	491a      	ldr	r1, [pc, #104]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d011      	beq.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007dea:	4b15      	ldr	r3, [pc, #84]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007dec:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007df0:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007df8:	4911      	ldr	r1, [pc, #68]	; (8007e40 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007dfa:	4313      	orrs	r3, r2
 8007dfc:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e04:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007e08:	d101      	bne.n	8007e0e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007e0a:	2301      	movs	r3, #1
 8007e0c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007e0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d005      	beq.n	8007e20 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e1c:	f040 80ff 	bne.w	800801e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e20:	4b09      	ldr	r3, [pc, #36]	; (8007e48 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e22:	2200      	movs	r2, #0
 8007e24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e26:	f7fe fe91 	bl	8006b4c <HAL_GetTick>
 8007e2a:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e2c:	e00e      	b.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e2e:	f7fe fe8d 	bl	8006b4c <HAL_GetTick>
 8007e32:	4602      	mov	r2, r0
 8007e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e36:	1ad3      	subs	r3, r2, r3
 8007e38:	2b02      	cmp	r3, #2
 8007e3a:	d907      	bls.n	8007e4c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e3c:	2303      	movs	r3, #3
 8007e3e:	e188      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e40:	40023800 	.word	0x40023800
 8007e44:	424711e0 	.word	0x424711e0
 8007e48:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e4c:	4b7e      	ldr	r3, [pc, #504]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d1ea      	bne.n	8007e2e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	f003 0301 	and.w	r3, r3, #1
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d003      	beq.n	8007e6c <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e68:	2b00      	cmp	r3, #0
 8007e6a:	d009      	beq.n	8007e80 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007e74:	2b00      	cmp	r3, #0
 8007e76:	d028      	beq.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e7c:	2b00      	cmp	r3, #0
 8007e7e:	d124      	bne.n	8007eca <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007e80:	4b71      	ldr	r3, [pc, #452]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e86:	0c1b      	lsrs	r3, r3, #16
 8007e88:	f003 0303 	and.w	r3, r3, #3
 8007e8c:	3301      	adds	r3, #1
 8007e8e:	005b      	lsls	r3, r3, #1
 8007e90:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e92:	4b6d      	ldr	r3, [pc, #436]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e98:	0e1b      	lsrs	r3, r3, #24
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	685a      	ldr	r2, [r3, #4]
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	019b      	lsls	r3, r3, #6
 8007eaa:	431a      	orrs	r2, r3
 8007eac:	69fb      	ldr	r3, [r7, #28]
 8007eae:	085b      	lsrs	r3, r3, #1
 8007eb0:	3b01      	subs	r3, #1
 8007eb2:	041b      	lsls	r3, r3, #16
 8007eb4:	431a      	orrs	r2, r3
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	061b      	lsls	r3, r3, #24
 8007eba:	431a      	orrs	r2, r3
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	695b      	ldr	r3, [r3, #20]
 8007ec0:	071b      	lsls	r3, r3, #28
 8007ec2:	4961      	ldr	r1, [pc, #388]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	f003 0304 	and.w	r3, r3, #4
 8007ed2:	2b00      	cmp	r3, #0
 8007ed4:	d004      	beq.n	8007ee0 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eda:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ede:	d00a      	beq.n	8007ef6 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d035      	beq.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007eec:	687b      	ldr	r3, [r7, #4]
 8007eee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ef0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ef4:	d130      	bne.n	8007f58 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007ef6:	4b54      	ldr	r3, [pc, #336]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ef8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007efc:	0c1b      	lsrs	r3, r3, #16
 8007efe:	f003 0303 	and.w	r3, r3, #3
 8007f02:	3301      	adds	r3, #1
 8007f04:	005b      	lsls	r3, r3, #1
 8007f06:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f08:	4b4f      	ldr	r3, [pc, #316]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f0e:	0f1b      	lsrs	r3, r3, #28
 8007f10:	f003 0307 	and.w	r3, r3, #7
 8007f14:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	685a      	ldr	r2, [r3, #4]
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689b      	ldr	r3, [r3, #8]
 8007f1e:	019b      	lsls	r3, r3, #6
 8007f20:	431a      	orrs	r2, r3
 8007f22:	69fb      	ldr	r3, [r7, #28]
 8007f24:	085b      	lsrs	r3, r3, #1
 8007f26:	3b01      	subs	r3, #1
 8007f28:	041b      	lsls	r3, r3, #16
 8007f2a:	431a      	orrs	r2, r3
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	691b      	ldr	r3, [r3, #16]
 8007f30:	061b      	lsls	r3, r3, #24
 8007f32:	431a      	orrs	r2, r3
 8007f34:	697b      	ldr	r3, [r7, #20]
 8007f36:	071b      	lsls	r3, r3, #28
 8007f38:	4943      	ldr	r1, [pc, #268]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f40:	4b41      	ldr	r3, [pc, #260]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f42:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f46:	f023 021f 	bic.w	r2, r3, #31
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f4e:	3b01      	subs	r3, #1
 8007f50:	493d      	ldr	r1, [pc, #244]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d029      	beq.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f68:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f6c:	d124      	bne.n	8007fb8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007f6e:	4b36      	ldr	r3, [pc, #216]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f70:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f74:	0c1b      	lsrs	r3, r3, #16
 8007f76:	f003 0303 	and.w	r3, r3, #3
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	005b      	lsls	r3, r3, #1
 8007f7e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f80:	4b31      	ldr	r3, [pc, #196]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f86:	0f1b      	lsrs	r3, r3, #28
 8007f88:	f003 0307 	and.w	r3, r3, #7
 8007f8c:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	685a      	ldr	r2, [r3, #4]
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	689b      	ldr	r3, [r3, #8]
 8007f96:	019b      	lsls	r3, r3, #6
 8007f98:	431a      	orrs	r2, r3
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	68db      	ldr	r3, [r3, #12]
 8007f9e:	085b      	lsrs	r3, r3, #1
 8007fa0:	3b01      	subs	r3, #1
 8007fa2:	041b      	lsls	r3, r3, #16
 8007fa4:	431a      	orrs	r2, r3
 8007fa6:	69bb      	ldr	r3, [r7, #24]
 8007fa8:	061b      	lsls	r3, r3, #24
 8007faa:	431a      	orrs	r2, r3
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	071b      	lsls	r3, r3, #28
 8007fb0:	4925      	ldr	r1, [pc, #148]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	681b      	ldr	r3, [r3, #0]
 8007fbc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fc0:	2b00      	cmp	r3, #0
 8007fc2:	d016      	beq.n	8007ff2 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	685a      	ldr	r2, [r3, #4]
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	019b      	lsls	r3, r3, #6
 8007fce:	431a      	orrs	r2, r3
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	68db      	ldr	r3, [r3, #12]
 8007fd4:	085b      	lsrs	r3, r3, #1
 8007fd6:	3b01      	subs	r3, #1
 8007fd8:	041b      	lsls	r3, r3, #16
 8007fda:	431a      	orrs	r2, r3
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	691b      	ldr	r3, [r3, #16]
 8007fe0:	061b      	lsls	r3, r3, #24
 8007fe2:	431a      	orrs	r2, r3
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	695b      	ldr	r3, [r3, #20]
 8007fe8:	071b      	lsls	r3, r3, #28
 8007fea:	4917      	ldr	r1, [pc, #92]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007fec:	4313      	orrs	r3, r2
 8007fee:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007ff2:	4b16      	ldr	r3, [pc, #88]	; (800804c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007ff4:	2201      	movs	r2, #1
 8007ff6:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007ff8:	f7fe fda8 	bl	8006b4c <HAL_GetTick>
 8007ffc:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ffe:	e008      	b.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8008000:	f7fe fda4 	bl	8006b4c <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d901      	bls.n	8008012 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e09f      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008012:	4b0d      	ldr	r3, [pc, #52]	; (8008048 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0f0      	beq.n	8008000 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 800801e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008020:	2b01      	cmp	r3, #1
 8008022:	f040 8095 	bne.w	8008150 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8008026:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008028:	2200      	movs	r2, #0
 800802a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800802c:	f7fe fd8e 	bl	8006b4c <HAL_GetTick>
 8008030:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008032:	e00f      	b.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008034:	f7fe fd8a 	bl	8006b4c <HAL_GetTick>
 8008038:	4602      	mov	r2, r0
 800803a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800803c:	1ad3      	subs	r3, r2, r3
 800803e:	2b02      	cmp	r3, #2
 8008040:	d908      	bls.n	8008054 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008042:	2303      	movs	r3, #3
 8008044:	e085      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8008046:	bf00      	nop
 8008048:	40023800 	.word	0x40023800
 800804c:	42470068 	.word	0x42470068
 8008050:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8008054:	4b41      	ldr	r3, [pc, #260]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800805c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008060:	d0e8      	beq.n	8008034 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	681b      	ldr	r3, [r3, #0]
 8008066:	f003 0304 	and.w	r3, r3, #4
 800806a:	2b00      	cmp	r3, #0
 800806c:	d003      	beq.n	8008076 <HAL_RCCEx_PeriphCLKConfig+0x566>
 800806e:	687b      	ldr	r3, [r7, #4]
 8008070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008072:	2b00      	cmp	r3, #0
 8008074:	d009      	beq.n	800808a <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800807e:	2b00      	cmp	r3, #0
 8008080:	d02b      	beq.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008086:	2b00      	cmp	r3, #0
 8008088:	d127      	bne.n	80080da <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800808a:	4b34      	ldr	r3, [pc, #208]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800808c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008090:	0c1b      	lsrs	r3, r3, #16
 8008092:	f003 0303 	and.w	r3, r3, #3
 8008096:	3301      	adds	r3, #1
 8008098:	005b      	lsls	r3, r3, #1
 800809a:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	699a      	ldr	r2, [r3, #24]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	69db      	ldr	r3, [r3, #28]
 80080a4:	019b      	lsls	r3, r3, #6
 80080a6:	431a      	orrs	r2, r3
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	085b      	lsrs	r3, r3, #1
 80080ac:	3b01      	subs	r3, #1
 80080ae:	041b      	lsls	r3, r3, #16
 80080b0:	431a      	orrs	r2, r3
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b6:	061b      	lsls	r3, r3, #24
 80080b8:	4928      	ldr	r1, [pc, #160]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080ba:	4313      	orrs	r3, r2
 80080bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080c0:	4b26      	ldr	r3, [pc, #152]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080c6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	3b01      	subs	r3, #1
 80080d0:	021b      	lsls	r3, r3, #8
 80080d2:	4922      	ldr	r1, [pc, #136]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080d4:	4313      	orrs	r3, r2
 80080d6:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d01d      	beq.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x612>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080ee:	d118      	bne.n	8008122 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080f0:	4b1a      	ldr	r3, [pc, #104]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080f6:	0e1b      	lsrs	r3, r3, #24
 80080f8:	f003 030f 	and.w	r3, r3, #15
 80080fc:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	699a      	ldr	r2, [r3, #24]
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	69db      	ldr	r3, [r3, #28]
 8008106:	019b      	lsls	r3, r3, #6
 8008108:	431a      	orrs	r2, r3
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	6a1b      	ldr	r3, [r3, #32]
 800810e:	085b      	lsrs	r3, r3, #1
 8008110:	3b01      	subs	r3, #1
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	431a      	orrs	r2, r3
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	061b      	lsls	r3, r3, #24
 800811a:	4910      	ldr	r1, [pc, #64]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800811c:	4313      	orrs	r3, r2
 800811e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8008122:	4b0f      	ldr	r3, [pc, #60]	; (8008160 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8008124:	2201      	movs	r2, #1
 8008126:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008128:	f7fe fd10 	bl	8006b4c <HAL_GetTick>
 800812c:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800812e:	e008      	b.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008130:	f7fe fd0c 	bl	8006b4c <HAL_GetTick>
 8008134:	4602      	mov	r2, r0
 8008136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008138:	1ad3      	subs	r3, r2, r3
 800813a:	2b02      	cmp	r3, #2
 800813c:	d901      	bls.n	8008142 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800813e:	2303      	movs	r3, #3
 8008140:	e007      	b.n	8008152 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008142:	4b06      	ldr	r3, [pc, #24]	; (800815c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800814a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800814e:	d1ef      	bne.n	8008130 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008150:	2300      	movs	r3, #0
}
 8008152:	4618      	mov	r0, r3
 8008154:	3730      	adds	r7, #48	; 0x30
 8008156:	46bd      	mov	sp, r7
 8008158:	bd80      	pop	{r7, pc}
 800815a:	bf00      	nop
 800815c:	40023800 	.word	0x40023800
 8008160:	42470070 	.word	0x42470070

08008164 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8008164:	b480      	push	{r7}
 8008166:	b089      	sub	sp, #36	; 0x24
 8008168:	af00      	add	r7, sp, #0
 800816a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 800816c:	2300      	movs	r3, #0
 800816e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008170:	2300      	movs	r3, #0
 8008172:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8008174:	2300      	movs	r3, #0
 8008176:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8008178:	2300      	movs	r3, #0
 800817a:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 800817c:	2300      	movs	r3, #0
 800817e:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008180:	2300      	movs	r3, #0
 8008182:	60bb      	str	r3, [r7, #8]
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	3b01      	subs	r3, #1
 8008188:	2b07      	cmp	r3, #7
 800818a:	f200 8224 	bhi.w	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800818e:	a201      	add	r2, pc, #4	; (adr r2, 8008194 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008190:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008194:	08008397 	.word	0x08008397
 8008198:	080084c1 	.word	0x080084c1
 800819c:	080085d7 	.word	0x080085d7
 80081a0:	080081b5 	.word	0x080081b5
 80081a4:	080085d7 	.word	0x080085d7
 80081a8:	080085d7 	.word	0x080085d7
 80081ac:	080085d7 	.word	0x080085d7
 80081b0:	080081b5 	.word	0x080081b5
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 80081b4:	4ba8      	ldr	r3, [pc, #672]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80081b6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081ba:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80081c2:	613b      	str	r3, [r7, #16]
 80081c4:	693b      	ldr	r3, [r7, #16]
 80081c6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081ca:	f000 80d6 	beq.w	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80081ce:	693b      	ldr	r3, [r7, #16]
 80081d0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081d4:	f200 80dd 	bhi.w	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80081d8:	693b      	ldr	r3, [r7, #16]
 80081da:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081de:	f000 809f 	beq.w	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80081e2:	693b      	ldr	r3, [r7, #16]
 80081e4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081e8:	f200 80d3 	bhi.w	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081f2:	d05b      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081fa:	f200 80ca 	bhi.w	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80081fe:	693b      	ldr	r3, [r7, #16]
 8008200:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8008204:	f000 80b6 	beq.w	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800820e:	f200 80c0 	bhi.w	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008212:	693b      	ldr	r3, [r7, #16]
 8008214:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008218:	f000 8082 	beq.w	8008320 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008222:	f200 80b6 	bhi.w	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 8008226:	693b      	ldr	r3, [r7, #16]
 8008228:	2b00      	cmp	r3, #0
 800822a:	d004      	beq.n	8008236 <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008232:	d03b      	beq.n	80082ac <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 8008234:	e0ad      	b.n	8008392 <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008236:	4b88      	ldr	r3, [pc, #544]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008238:	685b      	ldr	r3, [r3, #4]
 800823a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800823e:	2b00      	cmp	r3, #0
 8008240:	d109      	bne.n	8008256 <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 8008242:	4b85      	ldr	r3, [pc, #532]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008244:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008248:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800824c:	4a83      	ldr	r2, [pc, #524]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800824e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008252:	61bb      	str	r3, [r7, #24]
 8008254:	e008      	b.n	8008268 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 8008256:	4b80      	ldr	r3, [pc, #512]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008258:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800825c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008260:	4a7f      	ldr	r2, [pc, #508]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008262:	fbb2 f3f3 	udiv	r3, r2, r3
 8008266:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8008268:	4b7b      	ldr	r3, [pc, #492]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800826a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800826e:	0e1b      	lsrs	r3, r3, #24
 8008270:	f003 030f 	and.w	r3, r3, #15
 8008274:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 8008276:	4b78      	ldr	r3, [pc, #480]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008278:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800827c:	099b      	lsrs	r3, r3, #6
 800827e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008282:	69ba      	ldr	r2, [r7, #24]
 8008284:	fb02 f203 	mul.w	r2, r2, r3
 8008288:	697b      	ldr	r3, [r7, #20]
 800828a:	fbb2 f3f3 	udiv	r3, r2, r3
 800828e:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8008290:	4b71      	ldr	r3, [pc, #452]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008292:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008296:	0a1b      	lsrs	r3, r3, #8
 8008298:	f003 031f 	and.w	r3, r3, #31
 800829c:	3301      	adds	r3, #1
 800829e:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80082a0:	69fa      	ldr	r2, [r7, #28]
 80082a2:	697b      	ldr	r3, [r7, #20]
 80082a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082a8:	61fb      	str	r3, [r7, #28]
          break;
 80082aa:	e073      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 80082ac:	4b6a      	ldr	r3, [pc, #424]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80082b4:	2b00      	cmp	r3, #0
 80082b6:	d109      	bne.n	80082cc <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80082b8:	4b67      	ldr	r3, [pc, #412]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082ba:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082be:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082c2:	4a66      	ldr	r2, [pc, #408]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80082c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c8:	61bb      	str	r3, [r7, #24]
 80082ca:	e008      	b.n	80082de <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80082cc:	4b62      	ldr	r3, [pc, #392]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082d2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082d6:	4a62      	ldr	r2, [pc, #392]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80082d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082dc:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80082de:	4b5e      	ldr	r3, [pc, #376]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082e0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082e4:	0e1b      	lsrs	r3, r3, #24
 80082e6:	f003 030f 	and.w	r3, r3, #15
 80082ea:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80082ec:	4b5a      	ldr	r3, [pc, #360]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082ee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082f2:	099b      	lsrs	r3, r3, #6
 80082f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082f8:	69ba      	ldr	r2, [r7, #24]
 80082fa:	fb02 f203 	mul.w	r2, r2, r3
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	fbb2 f3f3 	udiv	r3, r2, r3
 8008304:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 8008306:	4b54      	ldr	r3, [pc, #336]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008308:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800830c:	f003 031f 	and.w	r3, r3, #31
 8008310:	3301      	adds	r3, #1
 8008312:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8008314:	69fa      	ldr	r2, [r7, #28]
 8008316:	697b      	ldr	r3, [r7, #20]
 8008318:	fbb2 f3f3 	udiv	r3, r2, r3
 800831c:	61fb      	str	r3, [r7, #28]
          break;
 800831e:	e039      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008320:	4b4d      	ldr	r3, [pc, #308]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008322:	685b      	ldr	r3, [r3, #4]
 8008324:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008328:	2b00      	cmp	r3, #0
 800832a:	d108      	bne.n	800833e <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800832c:	4b4a      	ldr	r3, [pc, #296]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800832e:	685b      	ldr	r3, [r3, #4]
 8008330:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008334:	4a49      	ldr	r2, [pc, #292]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008336:	fbb2 f3f3 	udiv	r3, r2, r3
 800833a:	61bb      	str	r3, [r7, #24]
 800833c:	e007      	b.n	800834e <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 800833e:	4b46      	ldr	r3, [pc, #280]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008340:	685b      	ldr	r3, [r3, #4]
 8008342:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008346:	4a46      	ldr	r2, [pc, #280]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008348:	fbb2 f3f3 	udiv	r3, r2, r3
 800834c:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 800834e:	4b42      	ldr	r3, [pc, #264]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008350:	685b      	ldr	r3, [r3, #4]
 8008352:	0f1b      	lsrs	r3, r3, #28
 8008354:	f003 0307 	and.w	r3, r3, #7
 8008358:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 800835a:	4b3f      	ldr	r3, [pc, #252]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800835c:	685b      	ldr	r3, [r3, #4]
 800835e:	099b      	lsrs	r3, r3, #6
 8008360:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008364:	69ba      	ldr	r2, [r7, #24]
 8008366:	fb02 f203 	mul.w	r2, r2, r3
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008370:	61fb      	str	r3, [r7, #28]
          break;
 8008372:	e00f      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 8008374:	4b3b      	ldr	r3, [pc, #236]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 8008376:	61fb      	str	r3, [r7, #28]
          break;
 8008378:	e00c      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800837a:	4b37      	ldr	r3, [pc, #220]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800837c:	685b      	ldr	r3, [r3, #4]
 800837e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008382:	2b00      	cmp	r3, #0
 8008384:	d102      	bne.n	800838c <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 8008386:	4b35      	ldr	r3, [pc, #212]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008388:	61fb      	str	r3, [r7, #28]
          break;
 800838a:	e003      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 800838c:	4b34      	ldr	r3, [pc, #208]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800838e:	61fb      	str	r3, [r7, #28]
          break;
 8008390:	e000      	b.n	8008394 <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 8008392:	bf00      	nop
        }
      }
      break;
 8008394:	e11f      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 8008396:	4b30      	ldr	r3, [pc, #192]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008398:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800839c:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80083a0:	60fb      	str	r3, [r7, #12]
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80083a8:	d079      	beq.n	800849e <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 80083aa:	68fb      	ldr	r3, [r7, #12]
 80083ac:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 80083b0:	f200 8082 	bhi.w	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083ba:	d03c      	beq.n	8008436 <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083c2:	d879      	bhi.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80083c4:	68fb      	ldr	r3, [r7, #12]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d006      	beq.n	80083d8 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083d0:	d172      	bne.n	80084b8 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80083d2:	4b24      	ldr	r3, [pc, #144]	; (8008464 <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80083d4:	61fb      	str	r3, [r7, #28]
          break;
 80083d6:	e072      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80083d8:	4b1f      	ldr	r3, [pc, #124]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80083da:	685b      	ldr	r3, [r3, #4]
 80083dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083e0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083e4:	d109      	bne.n	80083fa <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80083e6:	4b1c      	ldr	r3, [pc, #112]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80083e8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083ec:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083f0:	4a1b      	ldr	r2, [pc, #108]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80083f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	e008      	b.n	800840c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80083fa:	4b17      	ldr	r3, [pc, #92]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80083fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008400:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008404:	4a15      	ldr	r2, [pc, #84]	; (800845c <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008406:	fbb2 f3f3 	udiv	r3, r2, r3
 800840a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800840c:	4b12      	ldr	r3, [pc, #72]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800840e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008412:	099b      	lsrs	r3, r3, #6
 8008414:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008418:	69bb      	ldr	r3, [r7, #24]
 800841a:	fb02 f303 	mul.w	r3, r2, r3
 800841e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008420:	4b0d      	ldr	r3, [pc, #52]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008422:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008426:	0f1b      	lsrs	r3, r3, #28
 8008428:	f003 0307 	and.w	r3, r3, #7
 800842c:	68ba      	ldr	r2, [r7, #8]
 800842e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008432:	61fb      	str	r3, [r7, #28]
          break;
 8008434:	e043      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008436:	4b08      	ldr	r3, [pc, #32]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008438:	685b      	ldr	r3, [r3, #4]
 800843a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800843e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008442:	d111      	bne.n	8008468 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008444:	4b04      	ldr	r3, [pc, #16]	; (8008458 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800844c:	4a04      	ldr	r2, [pc, #16]	; (8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800844e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008452:	61bb      	str	r3, [r7, #24]
 8008454:	e010      	b.n	8008478 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 8008456:	bf00      	nop
 8008458:	40023800 	.word	0x40023800
 800845c:	00f42400 	.word	0x00f42400
 8008460:	007a1200 	.word	0x007a1200
 8008464:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008468:	4b5e      	ldr	r3, [pc, #376]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800846a:	685b      	ldr	r3, [r3, #4]
 800846c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008470:	4a5d      	ldr	r2, [pc, #372]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008472:	fbb2 f3f3 	udiv	r3, r2, r3
 8008476:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008478:	4b5a      	ldr	r3, [pc, #360]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	099b      	lsrs	r3, r3, #6
 800847e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008482:	69bb      	ldr	r3, [r7, #24]
 8008484:	fb02 f303 	mul.w	r3, r2, r3
 8008488:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 800848a:	4b56      	ldr	r3, [pc, #344]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	0f1b      	lsrs	r3, r3, #28
 8008490:	f003 0307 	and.w	r3, r3, #7
 8008494:	68ba      	ldr	r2, [r7, #8]
 8008496:	fbb2 f3f3 	udiv	r3, r2, r3
 800849a:	61fb      	str	r3, [r7, #28]
          break;
 800849c:	e00f      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800849e:	4b51      	ldr	r3, [pc, #324]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084a6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084aa:	d102      	bne.n	80084b2 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 80084ac:	4b4f      	ldr	r3, [pc, #316]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80084ae:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80084b0:	e005      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 80084b2:	4b4d      	ldr	r3, [pc, #308]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80084b4:	61fb      	str	r3, [r7, #28]
          break;
 80084b6:	e002      	b.n	80084be <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80084b8:	2300      	movs	r3, #0
 80084ba:	61fb      	str	r3, [r7, #28]
          break;
 80084bc:	bf00      	nop
        }
      }
      break;
 80084be:	e08a      	b.n	80085d6 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80084c0:	4b48      	ldr	r3, [pc, #288]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80084c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084c6:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80084ca:	60fb      	str	r3, [r7, #12]
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80084d2:	d06f      	beq.n	80085b4 <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80084da:	d878      	bhi.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80084dc:	68fb      	ldr	r3, [r7, #12]
 80084de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084e2:	d03c      	beq.n	800855e <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80084e4:	68fb      	ldr	r3, [r7, #12]
 80084e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ea:	d870      	bhi.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80084ec:	68fb      	ldr	r3, [r7, #12]
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d006      	beq.n	8008500 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084f8:	d169      	bne.n	80085ce <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80084fa:	4b3d      	ldr	r3, [pc, #244]	; (80085f0 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80084fc:	61fb      	str	r3, [r7, #28]
          break;
 80084fe:	e069      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008500:	4b38      	ldr	r3, [pc, #224]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008502:	685b      	ldr	r3, [r3, #4]
 8008504:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008508:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800850c:	d109      	bne.n	8008522 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800850e:	4b35      	ldr	r3, [pc, #212]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008510:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008514:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008518:	4a34      	ldr	r2, [pc, #208]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800851a:	fbb2 f3f3 	udiv	r3, r2, r3
 800851e:	61bb      	str	r3, [r7, #24]
 8008520:	e008      	b.n	8008534 <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 8008522:	4b30      	ldr	r3, [pc, #192]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008528:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800852c:	4a2e      	ldr	r2, [pc, #184]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800852e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008532:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8008534:	4b2b      	ldr	r3, [pc, #172]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008536:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800853a:	099b      	lsrs	r3, r3, #6
 800853c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008540:	69bb      	ldr	r3, [r7, #24]
 8008542:	fb02 f303 	mul.w	r3, r2, r3
 8008546:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008548:	4b26      	ldr	r3, [pc, #152]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800854a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800854e:	0f1b      	lsrs	r3, r3, #28
 8008550:	f003 0307 	and.w	r3, r3, #7
 8008554:	68ba      	ldr	r2, [r7, #8]
 8008556:	fbb2 f3f3 	udiv	r3, r2, r3
 800855a:	61fb      	str	r3, [r7, #28]
          break;
 800855c:	e03a      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800855e:	4b21      	ldr	r3, [pc, #132]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008560:	685b      	ldr	r3, [r3, #4]
 8008562:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008566:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800856a:	d108      	bne.n	800857e <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800856c:	4b1d      	ldr	r3, [pc, #116]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800856e:	685b      	ldr	r3, [r3, #4]
 8008570:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008574:	4a1d      	ldr	r2, [pc, #116]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8008576:	fbb2 f3f3 	udiv	r3, r2, r3
 800857a:	61bb      	str	r3, [r7, #24]
 800857c:	e007      	b.n	800858e <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800857e:	4b19      	ldr	r3, [pc, #100]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008586:	4a18      	ldr	r2, [pc, #96]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008588:	fbb2 f3f3 	udiv	r3, r2, r3
 800858c:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 800858e:	4b15      	ldr	r3, [pc, #84]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008590:	685b      	ldr	r3, [r3, #4]
 8008592:	099b      	lsrs	r3, r3, #6
 8008594:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008598:	69bb      	ldr	r3, [r7, #24]
 800859a:	fb02 f303 	mul.w	r3, r2, r3
 800859e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 80085a0:	4b10      	ldr	r3, [pc, #64]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80085a2:	685b      	ldr	r3, [r3, #4]
 80085a4:	0f1b      	lsrs	r3, r3, #28
 80085a6:	f003 0307 	and.w	r3, r3, #7
 80085aa:	68ba      	ldr	r2, [r7, #8]
 80085ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80085b0:	61fb      	str	r3, [r7, #28]
          break;
 80085b2:	e00f      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80085b4:	4b0b      	ldr	r3, [pc, #44]	; (80085e4 <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085c0:	d102      	bne.n	80085c8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80085c2:	4b0a      	ldr	r3, [pc, #40]	; (80085ec <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80085c4:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80085c6:	e005      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80085c8:	4b07      	ldr	r3, [pc, #28]	; (80085e8 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80085ca:	61fb      	str	r3, [r7, #28]
          break;
 80085cc:	e002      	b.n	80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80085ce:	2300      	movs	r3, #0
 80085d0:	61fb      	str	r3, [r7, #28]
          break;
 80085d2:	bf00      	nop
        }
      }
      break;
 80085d4:	bf00      	nop
    }
  }
  return frequency;
 80085d6:	69fb      	ldr	r3, [r7, #28]
}
 80085d8:	4618      	mov	r0, r3
 80085da:	3724      	adds	r7, #36	; 0x24
 80085dc:	46bd      	mov	sp, r7
 80085de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e2:	4770      	bx	lr
 80085e4:	40023800 	.word	0x40023800
 80085e8:	00f42400 	.word	0x00f42400
 80085ec:	007a1200 	.word	0x007a1200
 80085f0:	00bb8000 	.word	0x00bb8000

080085f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085f8:	b088      	sub	sp, #32
 80085fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80085fc:	2300      	movs	r3, #0
 80085fe:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 8008600:	2300      	movs	r3, #0
 8008602:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 8008604:	2300      	movs	r3, #0
 8008606:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 8008608:	2300      	movs	r3, #0
 800860a:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 800860c:	2300      	movs	r3, #0
 800860e:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008610:	4bce      	ldr	r3, [pc, #824]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	f003 030c 	and.w	r3, r3, #12
 8008618:	2b0c      	cmp	r3, #12
 800861a:	f200 818d 	bhi.w	8008938 <HAL_RCC_GetSysClockFreq+0x344>
 800861e:	a201      	add	r2, pc, #4	; (adr r2, 8008624 <HAL_RCC_GetSysClockFreq+0x30>)
 8008620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008624:	08008659 	.word	0x08008659
 8008628:	08008939 	.word	0x08008939
 800862c:	08008939 	.word	0x08008939
 8008630:	08008939 	.word	0x08008939
 8008634:	0800865f 	.word	0x0800865f
 8008638:	08008939 	.word	0x08008939
 800863c:	08008939 	.word	0x08008939
 8008640:	08008939 	.word	0x08008939
 8008644:	08008665 	.word	0x08008665
 8008648:	08008939 	.word	0x08008939
 800864c:	08008939 	.word	0x08008939
 8008650:	08008939 	.word	0x08008939
 8008654:	080087d9 	.word	0x080087d9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008658:	4bbd      	ldr	r3, [pc, #756]	; (8008950 <HAL_RCC_GetSysClockFreq+0x35c>)
 800865a:	61bb      	str	r3, [r7, #24]
       break;
 800865c:	e16f      	b.n	800893e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800865e:	4bbd      	ldr	r3, [pc, #756]	; (8008954 <HAL_RCC_GetSysClockFreq+0x360>)
 8008660:	61bb      	str	r3, [r7, #24]
      break;
 8008662:	e16c      	b.n	800893e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008664:	4bb9      	ldr	r3, [pc, #740]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 8008666:	685b      	ldr	r3, [r3, #4]
 8008668:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800866c:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800866e:	4bb7      	ldr	r3, [pc, #732]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d053      	beq.n	8008722 <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800867a:	4bb4      	ldr	r3, [pc, #720]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 800867c:	685b      	ldr	r3, [r3, #4]
 800867e:	099b      	lsrs	r3, r3, #6
 8008680:	461a      	mov	r2, r3
 8008682:	f04f 0300 	mov.w	r3, #0
 8008686:	f240 10ff 	movw	r0, #511	; 0x1ff
 800868a:	f04f 0100 	mov.w	r1, #0
 800868e:	ea02 0400 	and.w	r4, r2, r0
 8008692:	603c      	str	r4, [r7, #0]
 8008694:	400b      	ands	r3, r1
 8008696:	607b      	str	r3, [r7, #4]
 8008698:	e9d7 4500 	ldrd	r4, r5, [r7]
 800869c:	4620      	mov	r0, r4
 800869e:	4629      	mov	r1, r5
 80086a0:	f04f 0200 	mov.w	r2, #0
 80086a4:	f04f 0300 	mov.w	r3, #0
 80086a8:	014b      	lsls	r3, r1, #5
 80086aa:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80086ae:	0142      	lsls	r2, r0, #5
 80086b0:	4610      	mov	r0, r2
 80086b2:	4619      	mov	r1, r3
 80086b4:	4623      	mov	r3, r4
 80086b6:	1ac0      	subs	r0, r0, r3
 80086b8:	462b      	mov	r3, r5
 80086ba:	eb61 0103 	sbc.w	r1, r1, r3
 80086be:	f04f 0200 	mov.w	r2, #0
 80086c2:	f04f 0300 	mov.w	r3, #0
 80086c6:	018b      	lsls	r3, r1, #6
 80086c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086cc:	0182      	lsls	r2, r0, #6
 80086ce:	1a12      	subs	r2, r2, r0
 80086d0:	eb63 0301 	sbc.w	r3, r3, r1
 80086d4:	f04f 0000 	mov.w	r0, #0
 80086d8:	f04f 0100 	mov.w	r1, #0
 80086dc:	00d9      	lsls	r1, r3, #3
 80086de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086e2:	00d0      	lsls	r0, r2, #3
 80086e4:	4602      	mov	r2, r0
 80086e6:	460b      	mov	r3, r1
 80086e8:	4621      	mov	r1, r4
 80086ea:	1852      	adds	r2, r2, r1
 80086ec:	4629      	mov	r1, r5
 80086ee:	eb43 0101 	adc.w	r1, r3, r1
 80086f2:	460b      	mov	r3, r1
 80086f4:	f04f 0000 	mov.w	r0, #0
 80086f8:	f04f 0100 	mov.w	r1, #0
 80086fc:	0259      	lsls	r1, r3, #9
 80086fe:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008702:	0250      	lsls	r0, r2, #9
 8008704:	4602      	mov	r2, r0
 8008706:	460b      	mov	r3, r1
 8008708:	4610      	mov	r0, r2
 800870a:	4619      	mov	r1, r3
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	461a      	mov	r2, r3
 8008710:	f04f 0300 	mov.w	r3, #0
 8008714:	f7f8 fad8 	bl	8000cc8 <__aeabi_uldivmod>
 8008718:	4602      	mov	r2, r0
 800871a:	460b      	mov	r3, r1
 800871c:	4613      	mov	r3, r2
 800871e:	61fb      	str	r3, [r7, #28]
 8008720:	e04c      	b.n	80087bc <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008722:	4b8a      	ldr	r3, [pc, #552]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 8008724:	685b      	ldr	r3, [r3, #4]
 8008726:	099b      	lsrs	r3, r3, #6
 8008728:	461a      	mov	r2, r3
 800872a:	f04f 0300 	mov.w	r3, #0
 800872e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008732:	f04f 0100 	mov.w	r1, #0
 8008736:	ea02 0a00 	and.w	sl, r2, r0
 800873a:	ea03 0b01 	and.w	fp, r3, r1
 800873e:	4650      	mov	r0, sl
 8008740:	4659      	mov	r1, fp
 8008742:	f04f 0200 	mov.w	r2, #0
 8008746:	f04f 0300 	mov.w	r3, #0
 800874a:	014b      	lsls	r3, r1, #5
 800874c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008750:	0142      	lsls	r2, r0, #5
 8008752:	4610      	mov	r0, r2
 8008754:	4619      	mov	r1, r3
 8008756:	ebb0 000a 	subs.w	r0, r0, sl
 800875a:	eb61 010b 	sbc.w	r1, r1, fp
 800875e:	f04f 0200 	mov.w	r2, #0
 8008762:	f04f 0300 	mov.w	r3, #0
 8008766:	018b      	lsls	r3, r1, #6
 8008768:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800876c:	0182      	lsls	r2, r0, #6
 800876e:	1a12      	subs	r2, r2, r0
 8008770:	eb63 0301 	sbc.w	r3, r3, r1
 8008774:	f04f 0000 	mov.w	r0, #0
 8008778:	f04f 0100 	mov.w	r1, #0
 800877c:	00d9      	lsls	r1, r3, #3
 800877e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008782:	00d0      	lsls	r0, r2, #3
 8008784:	4602      	mov	r2, r0
 8008786:	460b      	mov	r3, r1
 8008788:	eb12 020a 	adds.w	r2, r2, sl
 800878c:	eb43 030b 	adc.w	r3, r3, fp
 8008790:	f04f 0000 	mov.w	r0, #0
 8008794:	f04f 0100 	mov.w	r1, #0
 8008798:	0299      	lsls	r1, r3, #10
 800879a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800879e:	0290      	lsls	r0, r2, #10
 80087a0:	4602      	mov	r2, r0
 80087a2:	460b      	mov	r3, r1
 80087a4:	4610      	mov	r0, r2
 80087a6:	4619      	mov	r1, r3
 80087a8:	697b      	ldr	r3, [r7, #20]
 80087aa:	461a      	mov	r2, r3
 80087ac:	f04f 0300 	mov.w	r3, #0
 80087b0:	f7f8 fa8a 	bl	8000cc8 <__aeabi_uldivmod>
 80087b4:	4602      	mov	r2, r0
 80087b6:	460b      	mov	r3, r1
 80087b8:	4613      	mov	r3, r2
 80087ba:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087bc:	4b63      	ldr	r3, [pc, #396]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	0c1b      	lsrs	r3, r3, #16
 80087c2:	f003 0303 	and.w	r3, r3, #3
 80087c6:	3301      	adds	r3, #1
 80087c8:	005b      	lsls	r3, r3, #1
 80087ca:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80087cc:	69fa      	ldr	r2, [r7, #28]
 80087ce:	693b      	ldr	r3, [r7, #16]
 80087d0:	fbb2 f3f3 	udiv	r3, r2, r3
 80087d4:	61bb      	str	r3, [r7, #24]
      break;
 80087d6:	e0b2      	b.n	800893e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087d8:	4b5c      	ldr	r3, [pc, #368]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087e0:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087e2:	4b5a      	ldr	r3, [pc, #360]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 80087e4:	685b      	ldr	r3, [r3, #4]
 80087e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d04d      	beq.n	800888a <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087ee:	4b57      	ldr	r3, [pc, #348]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 80087f0:	685b      	ldr	r3, [r3, #4]
 80087f2:	099b      	lsrs	r3, r3, #6
 80087f4:	461a      	mov	r2, r3
 80087f6:	f04f 0300 	mov.w	r3, #0
 80087fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80087fe:	f04f 0100 	mov.w	r1, #0
 8008802:	ea02 0800 	and.w	r8, r2, r0
 8008806:	ea03 0901 	and.w	r9, r3, r1
 800880a:	4640      	mov	r0, r8
 800880c:	4649      	mov	r1, r9
 800880e:	f04f 0200 	mov.w	r2, #0
 8008812:	f04f 0300 	mov.w	r3, #0
 8008816:	014b      	lsls	r3, r1, #5
 8008818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800881c:	0142      	lsls	r2, r0, #5
 800881e:	4610      	mov	r0, r2
 8008820:	4619      	mov	r1, r3
 8008822:	ebb0 0008 	subs.w	r0, r0, r8
 8008826:	eb61 0109 	sbc.w	r1, r1, r9
 800882a:	f04f 0200 	mov.w	r2, #0
 800882e:	f04f 0300 	mov.w	r3, #0
 8008832:	018b      	lsls	r3, r1, #6
 8008834:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008838:	0182      	lsls	r2, r0, #6
 800883a:	1a12      	subs	r2, r2, r0
 800883c:	eb63 0301 	sbc.w	r3, r3, r1
 8008840:	f04f 0000 	mov.w	r0, #0
 8008844:	f04f 0100 	mov.w	r1, #0
 8008848:	00d9      	lsls	r1, r3, #3
 800884a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800884e:	00d0      	lsls	r0, r2, #3
 8008850:	4602      	mov	r2, r0
 8008852:	460b      	mov	r3, r1
 8008854:	eb12 0208 	adds.w	r2, r2, r8
 8008858:	eb43 0309 	adc.w	r3, r3, r9
 800885c:	f04f 0000 	mov.w	r0, #0
 8008860:	f04f 0100 	mov.w	r1, #0
 8008864:	0259      	lsls	r1, r3, #9
 8008866:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800886a:	0250      	lsls	r0, r2, #9
 800886c:	4602      	mov	r2, r0
 800886e:	460b      	mov	r3, r1
 8008870:	4610      	mov	r0, r2
 8008872:	4619      	mov	r1, r3
 8008874:	697b      	ldr	r3, [r7, #20]
 8008876:	461a      	mov	r2, r3
 8008878:	f04f 0300 	mov.w	r3, #0
 800887c:	f7f8 fa24 	bl	8000cc8 <__aeabi_uldivmod>
 8008880:	4602      	mov	r2, r0
 8008882:	460b      	mov	r3, r1
 8008884:	4613      	mov	r3, r2
 8008886:	61fb      	str	r3, [r7, #28]
 8008888:	e04a      	b.n	8008920 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800888a:	4b30      	ldr	r3, [pc, #192]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	099b      	lsrs	r3, r3, #6
 8008890:	461a      	mov	r2, r3
 8008892:	f04f 0300 	mov.w	r3, #0
 8008896:	f240 10ff 	movw	r0, #511	; 0x1ff
 800889a:	f04f 0100 	mov.w	r1, #0
 800889e:	ea02 0400 	and.w	r4, r2, r0
 80088a2:	ea03 0501 	and.w	r5, r3, r1
 80088a6:	4620      	mov	r0, r4
 80088a8:	4629      	mov	r1, r5
 80088aa:	f04f 0200 	mov.w	r2, #0
 80088ae:	f04f 0300 	mov.w	r3, #0
 80088b2:	014b      	lsls	r3, r1, #5
 80088b4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80088b8:	0142      	lsls	r2, r0, #5
 80088ba:	4610      	mov	r0, r2
 80088bc:	4619      	mov	r1, r3
 80088be:	1b00      	subs	r0, r0, r4
 80088c0:	eb61 0105 	sbc.w	r1, r1, r5
 80088c4:	f04f 0200 	mov.w	r2, #0
 80088c8:	f04f 0300 	mov.w	r3, #0
 80088cc:	018b      	lsls	r3, r1, #6
 80088ce:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80088d2:	0182      	lsls	r2, r0, #6
 80088d4:	1a12      	subs	r2, r2, r0
 80088d6:	eb63 0301 	sbc.w	r3, r3, r1
 80088da:	f04f 0000 	mov.w	r0, #0
 80088de:	f04f 0100 	mov.w	r1, #0
 80088e2:	00d9      	lsls	r1, r3, #3
 80088e4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088e8:	00d0      	lsls	r0, r2, #3
 80088ea:	4602      	mov	r2, r0
 80088ec:	460b      	mov	r3, r1
 80088ee:	1912      	adds	r2, r2, r4
 80088f0:	eb45 0303 	adc.w	r3, r5, r3
 80088f4:	f04f 0000 	mov.w	r0, #0
 80088f8:	f04f 0100 	mov.w	r1, #0
 80088fc:	0299      	lsls	r1, r3, #10
 80088fe:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008902:	0290      	lsls	r0, r2, #10
 8008904:	4602      	mov	r2, r0
 8008906:	460b      	mov	r3, r1
 8008908:	4610      	mov	r0, r2
 800890a:	4619      	mov	r1, r3
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	461a      	mov	r2, r3
 8008910:	f04f 0300 	mov.w	r3, #0
 8008914:	f7f8 f9d8 	bl	8000cc8 <__aeabi_uldivmod>
 8008918:	4602      	mov	r2, r0
 800891a:	460b      	mov	r3, r1
 800891c:	4613      	mov	r3, r2
 800891e:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008920:	4b0a      	ldr	r3, [pc, #40]	; (800894c <HAL_RCC_GetSysClockFreq+0x358>)
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	0f1b      	lsrs	r3, r3, #28
 8008926:	f003 0307 	and.w	r3, r3, #7
 800892a:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 800892c:	69fa      	ldr	r2, [r7, #28]
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	fbb2 f3f3 	udiv	r3, r2, r3
 8008934:	61bb      	str	r3, [r7, #24]
      break;
 8008936:	e002      	b.n	800893e <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008938:	4b05      	ldr	r3, [pc, #20]	; (8008950 <HAL_RCC_GetSysClockFreq+0x35c>)
 800893a:	61bb      	str	r3, [r7, #24]
      break;
 800893c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800893e:	69bb      	ldr	r3, [r7, #24]
}
 8008940:	4618      	mov	r0, r3
 8008942:	3720      	adds	r7, #32
 8008944:	46bd      	mov	sp, r7
 8008946:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800894a:	bf00      	nop
 800894c:	40023800 	.word	0x40023800
 8008950:	00f42400 	.word	0x00f42400
 8008954:	007a1200 	.word	0x007a1200

08008958 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008958:	b580      	push	{r7, lr}
 800895a:	b086      	sub	sp, #24
 800895c:	af00      	add	r7, sp, #0
 800895e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	2b00      	cmp	r3, #0
 8008964:	d101      	bne.n	800896a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008966:	2301      	movs	r3, #1
 8008968:	e28d      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	681b      	ldr	r3, [r3, #0]
 800896e:	f003 0301 	and.w	r3, r3, #1
 8008972:	2b00      	cmp	r3, #0
 8008974:	f000 8083 	beq.w	8008a7e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008978:	4b94      	ldr	r3, [pc, #592]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 800897a:	689b      	ldr	r3, [r3, #8]
 800897c:	f003 030c 	and.w	r3, r3, #12
 8008980:	2b04      	cmp	r3, #4
 8008982:	d019      	beq.n	80089b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008984:	4b91      	ldr	r3, [pc, #580]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008986:	689b      	ldr	r3, [r3, #8]
 8008988:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 800898c:	2b08      	cmp	r3, #8
 800898e:	d106      	bne.n	800899e <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008990:	4b8e      	ldr	r3, [pc, #568]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008992:	685b      	ldr	r3, [r3, #4]
 8008994:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008998:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800899c:	d00c      	beq.n	80089b8 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800899e:	4b8b      	ldr	r3, [pc, #556]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 80089a0:	689b      	ldr	r3, [r3, #8]
 80089a2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 80089a6:	2b0c      	cmp	r3, #12
 80089a8:	d112      	bne.n	80089d0 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80089aa:	4b88      	ldr	r3, [pc, #544]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80089b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80089b6:	d10b      	bne.n	80089d0 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089b8:	4b84      	ldr	r3, [pc, #528]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 80089ba:	681b      	ldr	r3, [r3, #0]
 80089bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089c0:	2b00      	cmp	r3, #0
 80089c2:	d05b      	beq.n	8008a7c <HAL_RCC_OscConfig+0x124>
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d157      	bne.n	8008a7c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80089cc:	2301      	movs	r3, #1
 80089ce:	e25a      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089d8:	d106      	bne.n	80089e8 <HAL_RCC_OscConfig+0x90>
 80089da:	4b7c      	ldr	r3, [pc, #496]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a7b      	ldr	r2, [pc, #492]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 80089e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	e01d      	b.n	8008a24 <HAL_RCC_OscConfig+0xcc>
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	685b      	ldr	r3, [r3, #4]
 80089ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089f0:	d10c      	bne.n	8008a0c <HAL_RCC_OscConfig+0xb4>
 80089f2:	4b76      	ldr	r3, [pc, #472]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	4a75      	ldr	r2, [pc, #468]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 80089f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089fc:	6013      	str	r3, [r2, #0]
 80089fe:	4b73      	ldr	r3, [pc, #460]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a00:	681b      	ldr	r3, [r3, #0]
 8008a02:	4a72      	ldr	r2, [pc, #456]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a08:	6013      	str	r3, [r2, #0]
 8008a0a:	e00b      	b.n	8008a24 <HAL_RCC_OscConfig+0xcc>
 8008a0c:	4b6f      	ldr	r3, [pc, #444]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a6e      	ldr	r2, [pc, #440]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a16:	6013      	str	r3, [r2, #0]
 8008a18:	4b6c      	ldr	r3, [pc, #432]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	4a6b      	ldr	r2, [pc, #428]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	685b      	ldr	r3, [r3, #4]
 8008a28:	2b00      	cmp	r3, #0
 8008a2a:	d013      	beq.n	8008a54 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a2c:	f7fe f88e 	bl	8006b4c <HAL_GetTick>
 8008a30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a32:	e008      	b.n	8008a46 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a34:	f7fe f88a 	bl	8006b4c <HAL_GetTick>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	1ad3      	subs	r3, r2, r3
 8008a3e:	2b64      	cmp	r3, #100	; 0x64
 8008a40:	d901      	bls.n	8008a46 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008a42:	2303      	movs	r3, #3
 8008a44:	e21f      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a46:	4b61      	ldr	r3, [pc, #388]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a48:	681b      	ldr	r3, [r3, #0]
 8008a4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d0f0      	beq.n	8008a34 <HAL_RCC_OscConfig+0xdc>
 8008a52:	e014      	b.n	8008a7e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a54:	f7fe f87a 	bl	8006b4c <HAL_GetTick>
 8008a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a5a:	e008      	b.n	8008a6e <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a5c:	f7fe f876 	bl	8006b4c <HAL_GetTick>
 8008a60:	4602      	mov	r2, r0
 8008a62:	693b      	ldr	r3, [r7, #16]
 8008a64:	1ad3      	subs	r3, r2, r3
 8008a66:	2b64      	cmp	r3, #100	; 0x64
 8008a68:	d901      	bls.n	8008a6e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008a6a:	2303      	movs	r3, #3
 8008a6c:	e20b      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a6e:	4b57      	ldr	r3, [pc, #348]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d1f0      	bne.n	8008a5c <HAL_RCC_OscConfig+0x104>
 8008a7a:	e000      	b.n	8008a7e <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	f003 0302 	and.w	r3, r3, #2
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d06f      	beq.n	8008b6a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a8a:	4b50      	ldr	r3, [pc, #320]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a8c:	689b      	ldr	r3, [r3, #8]
 8008a8e:	f003 030c 	and.w	r3, r3, #12
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d017      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008a96:	4b4d      	ldr	r3, [pc, #308]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a9e:	2b08      	cmp	r3, #8
 8008aa0:	d105      	bne.n	8008aae <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008aa2:	4b4a      	ldr	r3, [pc, #296]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d00b      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aae:	4b47      	ldr	r3, [pc, #284]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008ab0:	689b      	ldr	r3, [r3, #8]
 8008ab2:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008ab6:	2b0c      	cmp	r3, #12
 8008ab8:	d11c      	bne.n	8008af4 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aba:	4b44      	ldr	r3, [pc, #272]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008abc:	685b      	ldr	r3, [r3, #4]
 8008abe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d116      	bne.n	8008af4 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ac6:	4b41      	ldr	r3, [pc, #260]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 0302 	and.w	r3, r3, #2
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d005      	beq.n	8008ade <HAL_RCC_OscConfig+0x186>
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	68db      	ldr	r3, [r3, #12]
 8008ad6:	2b01      	cmp	r3, #1
 8008ad8:	d001      	beq.n	8008ade <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e1d3      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ade:	4b3b      	ldr	r3, [pc, #236]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	691b      	ldr	r3, [r3, #16]
 8008aea:	00db      	lsls	r3, r3, #3
 8008aec:	4937      	ldr	r1, [pc, #220]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008aee:	4313      	orrs	r3, r2
 8008af0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008af2:	e03a      	b.n	8008b6a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	68db      	ldr	r3, [r3, #12]
 8008af8:	2b00      	cmp	r3, #0
 8008afa:	d020      	beq.n	8008b3e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008afc:	4b34      	ldr	r3, [pc, #208]	; (8008bd0 <HAL_RCC_OscConfig+0x278>)
 8008afe:	2201      	movs	r2, #1
 8008b00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b02:	f7fe f823 	bl	8006b4c <HAL_GetTick>
 8008b06:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b08:	e008      	b.n	8008b1c <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b0a:	f7fe f81f 	bl	8006b4c <HAL_GetTick>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	693b      	ldr	r3, [r7, #16]
 8008b12:	1ad3      	subs	r3, r2, r3
 8008b14:	2b02      	cmp	r3, #2
 8008b16:	d901      	bls.n	8008b1c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008b18:	2303      	movs	r3, #3
 8008b1a:	e1b4      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b1c:	4b2b      	ldr	r3, [pc, #172]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f003 0302 	and.w	r3, r3, #2
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d0f0      	beq.n	8008b0a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b28:	4b28      	ldr	r3, [pc, #160]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	691b      	ldr	r3, [r3, #16]
 8008b34:	00db      	lsls	r3, r3, #3
 8008b36:	4925      	ldr	r1, [pc, #148]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008b38:	4313      	orrs	r3, r2
 8008b3a:	600b      	str	r3, [r1, #0]
 8008b3c:	e015      	b.n	8008b6a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b3e:	4b24      	ldr	r3, [pc, #144]	; (8008bd0 <HAL_RCC_OscConfig+0x278>)
 8008b40:	2200      	movs	r2, #0
 8008b42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b44:	f7fe f802 	bl	8006b4c <HAL_GetTick>
 8008b48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b4a:	e008      	b.n	8008b5e <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b4c:	f7fd fffe 	bl	8006b4c <HAL_GetTick>
 8008b50:	4602      	mov	r2, r0
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	1ad3      	subs	r3, r2, r3
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	d901      	bls.n	8008b5e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008b5a:	2303      	movs	r3, #3
 8008b5c:	e193      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b5e:	4b1b      	ldr	r3, [pc, #108]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	f003 0302 	and.w	r3, r3, #2
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1f0      	bne.n	8008b4c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	f003 0308 	and.w	r3, r3, #8
 8008b72:	2b00      	cmp	r3, #0
 8008b74:	d036      	beq.n	8008be4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	695b      	ldr	r3, [r3, #20]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d016      	beq.n	8008bac <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b7e:	4b15      	ldr	r3, [pc, #84]	; (8008bd4 <HAL_RCC_OscConfig+0x27c>)
 8008b80:	2201      	movs	r2, #1
 8008b82:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b84:	f7fd ffe2 	bl	8006b4c <HAL_GetTick>
 8008b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b8a:	e008      	b.n	8008b9e <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b8c:	f7fd ffde 	bl	8006b4c <HAL_GetTick>
 8008b90:	4602      	mov	r2, r0
 8008b92:	693b      	ldr	r3, [r7, #16]
 8008b94:	1ad3      	subs	r3, r2, r3
 8008b96:	2b02      	cmp	r3, #2
 8008b98:	d901      	bls.n	8008b9e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008b9a:	2303      	movs	r3, #3
 8008b9c:	e173      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b9e:	4b0b      	ldr	r3, [pc, #44]	; (8008bcc <HAL_RCC_OscConfig+0x274>)
 8008ba0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d0f0      	beq.n	8008b8c <HAL_RCC_OscConfig+0x234>
 8008baa:	e01b      	b.n	8008be4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008bac:	4b09      	ldr	r3, [pc, #36]	; (8008bd4 <HAL_RCC_OscConfig+0x27c>)
 8008bae:	2200      	movs	r2, #0
 8008bb0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bb2:	f7fd ffcb 	bl	8006b4c <HAL_GetTick>
 8008bb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bb8:	e00e      	b.n	8008bd8 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008bba:	f7fd ffc7 	bl	8006b4c <HAL_GetTick>
 8008bbe:	4602      	mov	r2, r0
 8008bc0:	693b      	ldr	r3, [r7, #16]
 8008bc2:	1ad3      	subs	r3, r2, r3
 8008bc4:	2b02      	cmp	r3, #2
 8008bc6:	d907      	bls.n	8008bd8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008bc8:	2303      	movs	r3, #3
 8008bca:	e15c      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
 8008bcc:	40023800 	.word	0x40023800
 8008bd0:	42470000 	.word	0x42470000
 8008bd4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bd8:	4b8a      	ldr	r3, [pc, #552]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008bda:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bdc:	f003 0302 	and.w	r3, r3, #2
 8008be0:	2b00      	cmp	r3, #0
 8008be2:	d1ea      	bne.n	8008bba <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	681b      	ldr	r3, [r3, #0]
 8008be8:	f003 0304 	and.w	r3, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	f000 8097 	beq.w	8008d20 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bf2:	2300      	movs	r3, #0
 8008bf4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bf6:	4b83      	ldr	r3, [pc, #524]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10f      	bne.n	8008c22 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c02:	2300      	movs	r3, #0
 8008c04:	60bb      	str	r3, [r7, #8]
 8008c06:	4b7f      	ldr	r3, [pc, #508]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c0a:	4a7e      	ldr	r2, [pc, #504]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c0c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c10:	6413      	str	r3, [r2, #64]	; 0x40
 8008c12:	4b7c      	ldr	r3, [pc, #496]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c1a:	60bb      	str	r3, [r7, #8]
 8008c1c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c1e:	2301      	movs	r3, #1
 8008c20:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c22:	4b79      	ldr	r3, [pc, #484]	; (8008e08 <HAL_RCC_OscConfig+0x4b0>)
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c2a:	2b00      	cmp	r3, #0
 8008c2c:	d118      	bne.n	8008c60 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c2e:	4b76      	ldr	r3, [pc, #472]	; (8008e08 <HAL_RCC_OscConfig+0x4b0>)
 8008c30:	681b      	ldr	r3, [r3, #0]
 8008c32:	4a75      	ldr	r2, [pc, #468]	; (8008e08 <HAL_RCC_OscConfig+0x4b0>)
 8008c34:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c38:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c3a:	f7fd ff87 	bl	8006b4c <HAL_GetTick>
 8008c3e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c40:	e008      	b.n	8008c54 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c42:	f7fd ff83 	bl	8006b4c <HAL_GetTick>
 8008c46:	4602      	mov	r2, r0
 8008c48:	693b      	ldr	r3, [r7, #16]
 8008c4a:	1ad3      	subs	r3, r2, r3
 8008c4c:	2b02      	cmp	r3, #2
 8008c4e:	d901      	bls.n	8008c54 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008c50:	2303      	movs	r3, #3
 8008c52:	e118      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c54:	4b6c      	ldr	r3, [pc, #432]	; (8008e08 <HAL_RCC_OscConfig+0x4b0>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d0f0      	beq.n	8008c42 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	689b      	ldr	r3, [r3, #8]
 8008c64:	2b01      	cmp	r3, #1
 8008c66:	d106      	bne.n	8008c76 <HAL_RCC_OscConfig+0x31e>
 8008c68:	4b66      	ldr	r3, [pc, #408]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6c:	4a65      	ldr	r2, [pc, #404]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c6e:	f043 0301 	orr.w	r3, r3, #1
 8008c72:	6713      	str	r3, [r2, #112]	; 0x70
 8008c74:	e01c      	b.n	8008cb0 <HAL_RCC_OscConfig+0x358>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	689b      	ldr	r3, [r3, #8]
 8008c7a:	2b05      	cmp	r3, #5
 8008c7c:	d10c      	bne.n	8008c98 <HAL_RCC_OscConfig+0x340>
 8008c7e:	4b61      	ldr	r3, [pc, #388]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c82:	4a60      	ldr	r2, [pc, #384]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c84:	f043 0304 	orr.w	r3, r3, #4
 8008c88:	6713      	str	r3, [r2, #112]	; 0x70
 8008c8a:	4b5e      	ldr	r3, [pc, #376]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c8e:	4a5d      	ldr	r2, [pc, #372]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c90:	f043 0301 	orr.w	r3, r3, #1
 8008c94:	6713      	str	r3, [r2, #112]	; 0x70
 8008c96:	e00b      	b.n	8008cb0 <HAL_RCC_OscConfig+0x358>
 8008c98:	4b5a      	ldr	r3, [pc, #360]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c9c:	4a59      	ldr	r2, [pc, #356]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008c9e:	f023 0301 	bic.w	r3, r3, #1
 8008ca2:	6713      	str	r3, [r2, #112]	; 0x70
 8008ca4:	4b57      	ldr	r3, [pc, #348]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008ca6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ca8:	4a56      	ldr	r2, [pc, #344]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008caa:	f023 0304 	bic.w	r3, r3, #4
 8008cae:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	689b      	ldr	r3, [r3, #8]
 8008cb4:	2b00      	cmp	r3, #0
 8008cb6:	d015      	beq.n	8008ce4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008cb8:	f7fd ff48 	bl	8006b4c <HAL_GetTick>
 8008cbc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cbe:	e00a      	b.n	8008cd6 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cc0:	f7fd ff44 	bl	8006b4c <HAL_GetTick>
 8008cc4:	4602      	mov	r2, r0
 8008cc6:	693b      	ldr	r3, [r7, #16]
 8008cc8:	1ad3      	subs	r3, r2, r3
 8008cca:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cce:	4293      	cmp	r3, r2
 8008cd0:	d901      	bls.n	8008cd6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008cd2:	2303      	movs	r3, #3
 8008cd4:	e0d7      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cd6:	4b4b      	ldr	r3, [pc, #300]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008cd8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cda:	f003 0302 	and.w	r3, r3, #2
 8008cde:	2b00      	cmp	r3, #0
 8008ce0:	d0ee      	beq.n	8008cc0 <HAL_RCC_OscConfig+0x368>
 8008ce2:	e014      	b.n	8008d0e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ce4:	f7fd ff32 	bl	8006b4c <HAL_GetTick>
 8008ce8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cea:	e00a      	b.n	8008d02 <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cec:	f7fd ff2e 	bl	8006b4c <HAL_GetTick>
 8008cf0:	4602      	mov	r2, r0
 8008cf2:	693b      	ldr	r3, [r7, #16]
 8008cf4:	1ad3      	subs	r3, r2, r3
 8008cf6:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cfa:	4293      	cmp	r3, r2
 8008cfc:	d901      	bls.n	8008d02 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008cfe:	2303      	movs	r3, #3
 8008d00:	e0c1      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008d02:	4b40      	ldr	r3, [pc, #256]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008d04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008d06:	f003 0302 	and.w	r3, r3, #2
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	d1ee      	bne.n	8008cec <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d0e:	7dfb      	ldrb	r3, [r7, #23]
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d105      	bne.n	8008d20 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008d14:	4b3b      	ldr	r3, [pc, #236]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d18:	4a3a      	ldr	r2, [pc, #232]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008d1a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d1e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	699b      	ldr	r3, [r3, #24]
 8008d24:	2b00      	cmp	r3, #0
 8008d26:	f000 80ad 	beq.w	8008e84 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d2a:	4b36      	ldr	r3, [pc, #216]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	f003 030c 	and.w	r3, r3, #12
 8008d32:	2b08      	cmp	r3, #8
 8008d34:	d060      	beq.n	8008df8 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	699b      	ldr	r3, [r3, #24]
 8008d3a:	2b02      	cmp	r3, #2
 8008d3c:	d145      	bne.n	8008dca <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d3e:	4b33      	ldr	r3, [pc, #204]	; (8008e0c <HAL_RCC_OscConfig+0x4b4>)
 8008d40:	2200      	movs	r2, #0
 8008d42:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d44:	f7fd ff02 	bl	8006b4c <HAL_GetTick>
 8008d48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d4a:	e008      	b.n	8008d5e <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d4c:	f7fd fefe 	bl	8006b4c <HAL_GetTick>
 8008d50:	4602      	mov	r2, r0
 8008d52:	693b      	ldr	r3, [r7, #16]
 8008d54:	1ad3      	subs	r3, r2, r3
 8008d56:	2b02      	cmp	r3, #2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e093      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d5e:	4b29      	ldr	r3, [pc, #164]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d1f0      	bne.n	8008d4c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	69da      	ldr	r2, [r3, #28]
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	6a1b      	ldr	r3, [r3, #32]
 8008d72:	431a      	orrs	r2, r3
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d78:	019b      	lsls	r3, r3, #6
 8008d7a:	431a      	orrs	r2, r3
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d80:	085b      	lsrs	r3, r3, #1
 8008d82:	3b01      	subs	r3, #1
 8008d84:	041b      	lsls	r3, r3, #16
 8008d86:	431a      	orrs	r2, r3
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d8c:	061b      	lsls	r3, r3, #24
 8008d8e:	431a      	orrs	r2, r3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d94:	071b      	lsls	r3, r3, #28
 8008d96:	491b      	ldr	r1, [pc, #108]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008d98:	4313      	orrs	r3, r2
 8008d9a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d9c:	4b1b      	ldr	r3, [pc, #108]	; (8008e0c <HAL_RCC_OscConfig+0x4b4>)
 8008d9e:	2201      	movs	r2, #1
 8008da0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008da2:	f7fd fed3 	bl	8006b4c <HAL_GetTick>
 8008da6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008da8:	e008      	b.n	8008dbc <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008daa:	f7fd fecf 	bl	8006b4c <HAL_GetTick>
 8008dae:	4602      	mov	r2, r0
 8008db0:	693b      	ldr	r3, [r7, #16]
 8008db2:	1ad3      	subs	r3, r2, r3
 8008db4:	2b02      	cmp	r3, #2
 8008db6:	d901      	bls.n	8008dbc <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008db8:	2303      	movs	r3, #3
 8008dba:	e064      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008dbc:	4b11      	ldr	r3, [pc, #68]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dc4:	2b00      	cmp	r3, #0
 8008dc6:	d0f0      	beq.n	8008daa <HAL_RCC_OscConfig+0x452>
 8008dc8:	e05c      	b.n	8008e84 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008dca:	4b10      	ldr	r3, [pc, #64]	; (8008e0c <HAL_RCC_OscConfig+0x4b4>)
 8008dcc:	2200      	movs	r2, #0
 8008dce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dd0:	f7fd febc 	bl	8006b4c <HAL_GetTick>
 8008dd4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dd6:	e008      	b.n	8008dea <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dd8:	f7fd feb8 	bl	8006b4c <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d901      	bls.n	8008dea <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e04d      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dea:	4b06      	ldr	r3, [pc, #24]	; (8008e04 <HAL_RCC_OscConfig+0x4ac>)
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d1f0      	bne.n	8008dd8 <HAL_RCC_OscConfig+0x480>
 8008df6:	e045      	b.n	8008e84 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	699b      	ldr	r3, [r3, #24]
 8008dfc:	2b01      	cmp	r3, #1
 8008dfe:	d107      	bne.n	8008e10 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008e00:	2301      	movs	r3, #1
 8008e02:	e040      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
 8008e04:	40023800 	.word	0x40023800
 8008e08:	40007000 	.word	0x40007000
 8008e0c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008e10:	4b1f      	ldr	r3, [pc, #124]	; (8008e90 <HAL_RCC_OscConfig+0x538>)
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	699b      	ldr	r3, [r3, #24]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d030      	beq.n	8008e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e28:	429a      	cmp	r2, r3
 8008e2a:	d129      	bne.n	8008e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e36:	429a      	cmp	r2, r3
 8008e38:	d122      	bne.n	8008e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e40:	4013      	ands	r3, r2
 8008e42:	687a      	ldr	r2, [r7, #4]
 8008e44:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e46:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e48:	4293      	cmp	r3, r2
 8008e4a:	d119      	bne.n	8008e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e56:	085b      	lsrs	r3, r3, #1
 8008e58:	3b01      	subs	r3, #1
 8008e5a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e5c:	429a      	cmp	r2, r3
 8008e5e:	d10f      	bne.n	8008e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e60:	68fb      	ldr	r3, [r7, #12]
 8008e62:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e6a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e6c:	429a      	cmp	r2, r3
 8008e6e:	d107      	bne.n	8008e80 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008e76:	687b      	ldr	r3, [r7, #4]
 8008e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e7a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e7c:	429a      	cmp	r2, r3
 8008e7e:	d001      	beq.n	8008e84 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008e80:	2301      	movs	r3, #1
 8008e82:	e000      	b.n	8008e86 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3718      	adds	r7, #24
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	40023800 	.word	0x40023800

08008e94 <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008e94:	b580      	push	{r7, lr}
 8008e96:	b086      	sub	sp, #24
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	60f8      	str	r0, [r7, #12]
 8008e9c:	60b9      	str	r1, [r7, #8]
 8008e9e:	607a      	str	r2, [r7, #4]
 8008ea0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008ea2:	2300      	movs	r3, #0
 8008ea4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008ea6:	68bb      	ldr	r3, [r7, #8]
 8008ea8:	2b02      	cmp	r3, #2
 8008eaa:	d904      	bls.n	8008eb6 <HAL_SAI_InitProtocol+0x22>
 8008eac:	68bb      	ldr	r3, [r7, #8]
 8008eae:	3b03      	subs	r3, #3
 8008eb0:	2b01      	cmp	r3, #1
 8008eb2:	d812      	bhi.n	8008eda <HAL_SAI_InitProtocol+0x46>
 8008eb4:	e008      	b.n	8008ec8 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008eb6:	683b      	ldr	r3, [r7, #0]
 8008eb8:	687a      	ldr	r2, [r7, #4]
 8008eba:	68b9      	ldr	r1, [r7, #8]
 8008ebc:	68f8      	ldr	r0, [r7, #12]
 8008ebe:	f000 fa51 	bl	8009364 <SAI_InitI2S>
 8008ec2:	4603      	mov	r3, r0
 8008ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec6:	e00b      	b.n	8008ee0 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008ec8:	683b      	ldr	r3, [r7, #0]
 8008eca:	687a      	ldr	r2, [r7, #4]
 8008ecc:	68b9      	ldr	r1, [r7, #8]
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 faf6 	bl	80094c0 <SAI_InitPCM>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]
      break;
 8008ed8:	e002      	b.n	8008ee0 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8008eda:	2301      	movs	r3, #1
 8008edc:	75fb      	strb	r3, [r7, #23]
      break;
 8008ede:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ee0:	7dfb      	ldrb	r3, [r7, #23]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d104      	bne.n	8008ef0 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8008ee6:	68f8      	ldr	r0, [r7, #12]
 8008ee8:	f000 f808 	bl	8008efc <HAL_SAI_Init>
 8008eec:	4603      	mov	r3, r0
 8008eee:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008ef0:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef2:	4618      	mov	r0, r3
 8008ef4:	3718      	adds	r7, #24
 8008ef6:	46bd      	mov	sp, r7
 8008ef8:	bd80      	pop	{r7, pc}
	...

08008efc <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008efc:	b580      	push	{r7, lr}
 8008efe:	b086      	sub	sp, #24
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8008f04:	2300      	movs	r3, #0
 8008f06:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8008f08:	2300      	movs	r3, #0
 8008f0a:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d101      	bne.n	8008f1e <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8008f1a:	2301      	movs	r3, #1
 8008f1c:	e10c      	b.n	8009138 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008f1e:	687b      	ldr	r3, [r7, #4]
 8008f20:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d106      	bne.n	8008f38 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	f7fd fbe2 	bl	80066fc <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	2202      	movs	r2, #2
 8008f3c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008f40:	6878      	ldr	r0, [r7, #4]
 8008f42:	f000 fb73 	bl	800962c <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8008f46:	6878      	ldr	r0, [r7, #4]
 8008f48:	f000 fc1a 	bl	8009780 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	6a1b      	ldr	r3, [r3, #32]
 8008f50:	2b00      	cmp	r3, #0
 8008f52:	d030      	beq.n	8008fb6 <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8008f54:	6878      	ldr	r0, [r7, #4]
 8008f56:	f000 fc57 	bl	8009808 <SAI_GetInputClock>
 8008f5a:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8008f5c:	68ba      	ldr	r2, [r7, #8]
 8008f5e:	4613      	mov	r3, r2
 8008f60:	009b      	lsls	r3, r3, #2
 8008f62:	4413      	add	r3, r2
 8008f64:	005b      	lsls	r3, r3, #1
 8008f66:	461a      	mov	r2, r3
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6a1b      	ldr	r3, [r3, #32]
 8008f6c:	025b      	lsls	r3, r3, #9
 8008f6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f72:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	4a72      	ldr	r2, [pc, #456]	; (8009140 <HAL_SAI_Init+0x244>)
 8008f78:	fba2 2303 	umull	r2, r3, r2, r3
 8008f7c:	08da      	lsrs	r2, r3, #3
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8008f82:	68f9      	ldr	r1, [r7, #12]
 8008f84:	4b6e      	ldr	r3, [pc, #440]	; (8009140 <HAL_SAI_Init+0x244>)
 8008f86:	fba3 2301 	umull	r2, r3, r3, r1
 8008f8a:	08da      	lsrs	r2, r3, #3
 8008f8c:	4613      	mov	r3, r2
 8008f8e:	009b      	lsls	r3, r3, #2
 8008f90:	4413      	add	r3, r2
 8008f92:	005b      	lsls	r3, r3, #1
 8008f94:	1aca      	subs	r2, r1, r3
 8008f96:	2a08      	cmp	r2, #8
 8008f98:	d904      	bls.n	8008fa4 <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f9e:	1c5a      	adds	r2, r3, #1
 8008fa0:	687b      	ldr	r3, [r7, #4]
 8008fa2:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008fa8:	2b04      	cmp	r3, #4
 8008faa:	d104      	bne.n	8008fb6 <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008fb0:	085a      	lsrs	r2, r3, #1
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	685b      	ldr	r3, [r3, #4]
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d003      	beq.n	8008fc6 <HAL_SAI_Init+0xca>
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d109      	bne.n	8008fda <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	2b01      	cmp	r3, #1
 8008fcc:	d101      	bne.n	8008fd2 <HAL_SAI_Init+0xd6>
 8008fce:	2300      	movs	r3, #0
 8008fd0:	e001      	b.n	8008fd6 <HAL_SAI_Init+0xda>
 8008fd2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fd6:	617b      	str	r3, [r7, #20]
 8008fd8:	e008      	b.n	8008fec <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fde:	2b01      	cmp	r3, #1
 8008fe0:	d102      	bne.n	8008fe8 <HAL_SAI_Init+0xec>
 8008fe2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fe6:	e000      	b.n	8008fea <HAL_SAI_Init+0xee>
 8008fe8:	2300      	movs	r3, #0
 8008fea:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	689b      	ldr	r3, [r3, #8]
 8008ff0:	2b03      	cmp	r3, #3
 8008ff2:	d811      	bhi.n	8009018 <HAL_SAI_Init+0x11c>
 8008ff4:	2b02      	cmp	r3, #2
 8008ff6:	d20b      	bcs.n	8009010 <HAL_SAI_Init+0x114>
 8008ff8:	2b00      	cmp	r3, #0
 8008ffa:	d002      	beq.n	8009002 <HAL_SAI_Init+0x106>
 8008ffc:	2b01      	cmp	r3, #1
 8008ffe:	d003      	beq.n	8009008 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8009000:	e00a      	b.n	8009018 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8009002:	2300      	movs	r3, #0
 8009004:	613b      	str	r3, [r7, #16]
    break;
 8009006:	e008      	b.n	800901a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8009008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800900c:	613b      	str	r3, [r7, #16]
    break;
 800900e:	e004      	b.n	800901a <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8009010:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8009014:	613b      	str	r3, [r7, #16]
    break;
 8009016:	e000      	b.n	800901a <HAL_SAI_Init+0x11e>
      break;
 8009018:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	6819      	ldr	r1, [r3, #0]
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681a      	ldr	r2, [r3, #0]
 8009024:	4b47      	ldr	r3, [pc, #284]	; (8009144 <HAL_SAI_Init+0x248>)
 8009026:	400b      	ands	r3, r1
 8009028:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	6819      	ldr	r1, [r3, #0]
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	685a      	ldr	r2, [r3, #4]
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009038:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800903e:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009044:	431a      	orrs	r2, r3
 8009046:	697b      	ldr	r3, [r7, #20]
 8009048:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 800904a:	693b      	ldr	r3, [r7, #16]
 800904c:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 8009052:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	691b      	ldr	r3, [r3, #16]
 8009058:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800905e:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009064:	051b      	lsls	r3, r3, #20
 8009066:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009068:	687b      	ldr	r3, [r7, #4]
 800906a:	681b      	ldr	r3, [r3, #0]
 800906c:	430a      	orrs	r2, r1
 800906e:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	687a      	ldr	r2, [r7, #4]
 8009078:	6812      	ldr	r2, [r2, #0]
 800907a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800907e:	f023 030f 	bic.w	r3, r3, #15
 8009082:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6859      	ldr	r1, [r3, #4]
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	699a      	ldr	r2, [r3, #24]
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009092:	431a      	orrs	r2, r3
 8009094:	687b      	ldr	r3, [r7, #4]
 8009096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009098:	431a      	orrs	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	430a      	orrs	r2, r1
 80090a0:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	6899      	ldr	r1, [r3, #8]
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	681a      	ldr	r2, [r3, #0]
 80090ac:	4b26      	ldr	r3, [pc, #152]	; (8009148 <HAL_SAI_Init+0x24c>)
 80090ae:	400b      	ands	r3, r1
 80090b0:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	681b      	ldr	r3, [r3, #0]
 80090b6:	6899      	ldr	r1, [r3, #8]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090bc:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80090c2:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 80090c8:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 80090ce:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090d4:	3b01      	subs	r3, #1
 80090d6:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80090d8:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	430a      	orrs	r2, r1
 80090e0:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	68d9      	ldr	r1, [r3, #12]
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	681a      	ldr	r2, [r3, #0]
 80090ec:	f24f 0320 	movw	r3, #61472	; 0xf020
 80090f0:	400b      	ands	r3, r1
 80090f2:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	68d9      	ldr	r1, [r3, #12]
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009102:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009108:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 800910a:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009110:	3b01      	subs	r3, #1
 8009112:	021b      	lsls	r3, r3, #8
 8009114:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	430a      	orrs	r2, r1
 800911c:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	2201      	movs	r2, #1
 800912a:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009136:	2300      	movs	r3, #0
}
 8009138:	4618      	mov	r0, r3
 800913a:	3718      	adds	r7, #24
 800913c:	46bd      	mov	sp, r7
 800913e:	bd80      	pop	{r7, pc}
 8009140:	cccccccd 	.word	0xcccccccd
 8009144:	ff05c010 	.word	0xff05c010
 8009148:	fff88000 	.word	0xfff88000

0800914c <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 800914c:	b580      	push	{r7, lr}
 800914e:	b084      	sub	sp, #16
 8009150:	af00      	add	r7, sp, #0
 8009152:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009154:	2300      	movs	r3, #0
 8009156:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800915e:	2b01      	cmp	r3, #1
 8009160:	d101      	bne.n	8009166 <HAL_SAI_DMAStop+0x1a>
 8009162:	2302      	movs	r3, #2
 8009164:	e061      	b.n	800922a <HAL_SAI_DMAStop+0xde>
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	2201      	movs	r2, #1
 800916a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	681a      	ldr	r2, [r3, #0]
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800917c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009182:	2b00      	cmp	r3, #0
 8009184:	d01c      	beq.n	80091c0 <HAL_SAI_DMAStop+0x74>
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 800918c:	b2db      	uxtb	r3, r3
 800918e:	2b12      	cmp	r3, #18
 8009190:	d116      	bne.n	80091c0 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009196:	4618      	mov	r0, r3
 8009198:	f7fd ff18 	bl	8006fcc <HAL_DMA_Abort>
 800919c:	4603      	mov	r3, r0
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d00e      	beq.n	80091c0 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091a8:	2b80      	cmp	r3, #128	; 0x80
 80091aa:	d009      	beq.n	80091c0 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 80091ac:	2301      	movs	r3, #1
 80091ae:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091b6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c4:	2b00      	cmp	r3, #0
 80091c6:	d01c      	beq.n	8009202 <HAL_SAI_DMAStop+0xb6>
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091ce:	b2db      	uxtb	r3, r3
 80091d0:	2b22      	cmp	r3, #34	; 0x22
 80091d2:	d116      	bne.n	8009202 <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d8:	4618      	mov	r0, r3
 80091da:	f7fd fef7 	bl	8006fcc <HAL_DMA_Abort>
 80091de:	4603      	mov	r3, r0
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d00e      	beq.n	8009202 <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091ea:	2b80      	cmp	r3, #128	; 0x80
 80091ec:	d009      	beq.n	8009202 <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 80091ee:	2301      	movs	r3, #1
 80091f0:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fa12 	bl	800962c <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685a      	ldr	r2, [r3, #4]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f042 0208 	orr.w	r2, r2, #8
 8009216:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	2201      	movs	r2, #1
 800921c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	2200      	movs	r2, #0
 8009224:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009228:	7bfb      	ldrb	r3, [r7, #15]
}
 800922a:	4618      	mov	r0, r3
 800922c:	3710      	adds	r7, #16
 800922e:	46bd      	mov	sp, r7
 8009230:	bd80      	pop	{r7, pc}
	...

08009234 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	60f8      	str	r0, [r7, #12]
 800923c:	60b9      	str	r1, [r7, #8]
 800923e:	4613      	mov	r3, r2
 8009240:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d002      	beq.n	800924e <HAL_SAI_Receive_DMA+0x1a>
 8009248:	88fb      	ldrh	r3, [r7, #6]
 800924a:	2b00      	cmp	r3, #0
 800924c:	d101      	bne.n	8009252 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 800924e:	2301      	movs	r3, #1
 8009250:	e074      	b.n	800933c <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8009252:	68fb      	ldr	r3, [r7, #12]
 8009254:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009258:	b2db      	uxtb	r3, r3
 800925a:	2b01      	cmp	r3, #1
 800925c:	d16d      	bne.n	800933a <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800925e:	68fb      	ldr	r3, [r7, #12]
 8009260:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009264:	2b01      	cmp	r3, #1
 8009266:	d101      	bne.n	800926c <HAL_SAI_Receive_DMA+0x38>
 8009268:	2302      	movs	r3, #2
 800926a:	e067      	b.n	800933c <HAL_SAI_Receive_DMA+0x108>
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	2201      	movs	r2, #1
 8009270:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	68ba      	ldr	r2, [r7, #8]
 8009278:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	88fa      	ldrh	r2, [r7, #6]
 800927e:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	88fa      	ldrh	r2, [r7, #6]
 8009286:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	2200      	movs	r2, #0
 800928e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	2222      	movs	r2, #34	; 0x22
 8009296:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800929e:	4a29      	ldr	r2, [pc, #164]	; (8009344 <HAL_SAI_Receive_DMA+0x110>)
 80092a0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092a6:	4a28      	ldr	r2, [pc, #160]	; (8009348 <HAL_SAI_Receive_DMA+0x114>)
 80092a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092ae:	4a27      	ldr	r2, [pc, #156]	; (800934c <HAL_SAI_Receive_DMA+0x118>)
 80092b0:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80092b6:	2200      	movs	r2, #0
 80092b8:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	331c      	adds	r3, #28
 80092c4:	4619      	mov	r1, r3
 80092c6:	68fb      	ldr	r3, [r7, #12]
 80092c8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092ca:	461a      	mov	r2, r3
 80092cc:	68fb      	ldr	r3, [r7, #12]
 80092ce:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80092d2:	f7fd fe23 	bl	8006f1c <HAL_DMA_Start_IT>
 80092d6:	4603      	mov	r3, r0
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d005      	beq.n	80092e8 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80092dc:	68fb      	ldr	r3, [r7, #12]
 80092de:	2200      	movs	r2, #0
 80092e0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 80092e4:	2301      	movs	r3, #1
 80092e6:	e029      	b.n	800933c <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80092e8:	2100      	movs	r1, #0
 80092ea:	68f8      	ldr	r0, [r7, #12]
 80092ec:	f000 f968 	bl	80095c0 <SAI_InterruptFlag>
 80092f0:	4601      	mov	r1, r0
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	691a      	ldr	r2, [r3, #16]
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	430a      	orrs	r2, r1
 80092fe:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	681a      	ldr	r2, [r3, #0]
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800930e:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 8009310:	68fb      	ldr	r3, [r7, #12]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800931a:	2b00      	cmp	r3, #0
 800931c:	d107      	bne.n	800932e <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	681a      	ldr	r2, [r3, #0]
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800932c:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	2200      	movs	r2, #0
 8009332:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8009336:	2300      	movs	r3, #0
 8009338:	e000      	b.n	800933c <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 800933a:	2302      	movs	r3, #2
  }
}
 800933c:	4618      	mov	r0, r3
 800933e:	3710      	adds	r7, #16
 8009340:	46bd      	mov	sp, r7
 8009342:	bd80      	pop	{r7, pc}
 8009344:	080096fd 	.word	0x080096fd
 8009348:	0800969d 	.word	0x0800969d
 800934c:	08009719 	.word	0x08009719

08009350 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009350:	b480      	push	{r7}
 8009352:	b083      	sub	sp, #12
 8009354:	af00      	add	r7, sp, #0
 8009356:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009358:	bf00      	nop
 800935a:	370c      	adds	r7, #12
 800935c:	46bd      	mov	sp, r7
 800935e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009362:	4770      	bx	lr

08009364 <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8009364:	b480      	push	{r7}
 8009366:	b085      	sub	sp, #20
 8009368:	af00      	add	r7, sp, #0
 800936a:	60f8      	str	r0, [r7, #12]
 800936c:	60b9      	str	r1, [r7, #8]
 800936e:	607a      	str	r2, [r7, #4]
 8009370:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	2200      	movs	r2, #0
 8009376:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d003      	beq.n	800938e <SAI_InitI2S+0x2a>
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	685b      	ldr	r3, [r3, #4]
 800938a:	2b02      	cmp	r3, #2
 800938c:	d103      	bne.n	8009396 <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	641a      	str	r2, [r3, #64]	; 0x40
 8009394:	e002      	b.n	800939c <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8009396:	68fb      	ldr	r3, [r7, #12]
 8009398:	2201      	movs	r2, #1
 800939a:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80093a2:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80093aa:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	2200      	movs	r2, #0
 80093b0:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80093b2:	68fb      	ldr	r3, [r7, #12]
 80093b4:	683a      	ldr	r2, [r7, #0]
 80093b6:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	f003 0301 	and.w	r3, r3, #1
 80093be:	2b00      	cmp	r3, #0
 80093c0:	d001      	beq.n	80093c6 <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80093c2:	2301      	movs	r3, #1
 80093c4:	e076      	b.n	80094b4 <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80093c6:	68bb      	ldr	r3, [r7, #8]
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d107      	bne.n	80093dc <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80093d2:	68fb      	ldr	r3, [r7, #12]
 80093d4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80093d8:	655a      	str	r2, [r3, #84]	; 0x54
 80093da:	e006      	b.n	80093ea <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80093e2:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	2200      	movs	r2, #0
 80093e8:	655a      	str	r2, [r3, #84]	; 0x54
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	2b03      	cmp	r3, #3
 80093ee:	d84f      	bhi.n	8009490 <SAI_InitI2S+0x12c>
 80093f0:	a201      	add	r2, pc, #4	; (adr r2, 80093f8 <SAI_InitI2S+0x94>)
 80093f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093f6:	bf00      	nop
 80093f8:	08009409 	.word	0x08009409
 80093fc:	0800942b 	.word	0x0800942b
 8009400:	0800944d 	.word	0x0800944d
 8009404:	0800946f 	.word	0x0800946f

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2280      	movs	r2, #128	; 0x80
 800940c:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 800940e:	683b      	ldr	r3, [r7, #0]
 8009410:	085b      	lsrs	r3, r3, #1
 8009412:	015a      	lsls	r2, r3, #5
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	085b      	lsrs	r3, r3, #1
 800941c:	011a      	lsls	r2, r3, #4
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009422:	68fb      	ldr	r3, [r7, #12]
 8009424:	2240      	movs	r2, #64	; 0x40
 8009426:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009428:	e034      	b.n	8009494 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2280      	movs	r2, #128	; 0x80
 800942e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009430:	683b      	ldr	r3, [r7, #0]
 8009432:	085b      	lsrs	r3, r3, #1
 8009434:	019a      	lsls	r2, r3, #6
 8009436:	68fb      	ldr	r3, [r7, #12]
 8009438:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	085b      	lsrs	r3, r3, #1
 800943e:	015a      	lsls	r2, r3, #5
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009444:	68fb      	ldr	r3, [r7, #12]
 8009446:	2280      	movs	r2, #128	; 0x80
 8009448:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800944a:	e023      	b.n	8009494 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	22c0      	movs	r2, #192	; 0xc0
 8009450:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	085b      	lsrs	r3, r3, #1
 8009456:	019a      	lsls	r2, r3, #6
 8009458:	68fb      	ldr	r3, [r7, #12]
 800945a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	015a      	lsls	r2, r3, #5
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	2280      	movs	r2, #128	; 0x80
 800946a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800946c:	e012      	b.n	8009494 <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	22e0      	movs	r2, #224	; 0xe0
 8009472:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009474:	683b      	ldr	r3, [r7, #0]
 8009476:	085b      	lsrs	r3, r3, #1
 8009478:	019a      	lsls	r2, r3, #6
 800947a:	68fb      	ldr	r3, [r7, #12]
 800947c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 800947e:	683b      	ldr	r3, [r7, #0]
 8009480:	085b      	lsrs	r3, r3, #1
 8009482:	015a      	lsls	r2, r3, #5
 8009484:	68fb      	ldr	r3, [r7, #12]
 8009486:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2280      	movs	r2, #128	; 0x80
 800948c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800948e:	e001      	b.n	8009494 <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8009490:	2301      	movs	r3, #1
 8009492:	e00f      	b.n	80094b4 <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 8009494:	68bb      	ldr	r3, [r7, #8]
 8009496:	2b02      	cmp	r3, #2
 8009498:	d10b      	bne.n	80094b2 <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	2b01      	cmp	r3, #1
 800949e:	d102      	bne.n	80094a6 <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 80094a0:	68fb      	ldr	r3, [r7, #12]
 80094a2:	2210      	movs	r2, #16
 80094a4:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	2b02      	cmp	r3, #2
 80094aa:	d102      	bne.n	80094b2 <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 80094ac:	68fb      	ldr	r3, [r7, #12]
 80094ae:	2208      	movs	r2, #8
 80094b0:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 80094b2:	2300      	movs	r3, #0
}
 80094b4:	4618      	mov	r0, r3
 80094b6:	3714      	adds	r7, #20
 80094b8:	46bd      	mov	sp, r7
 80094ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094be:	4770      	bx	lr

080094c0 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80094c0:	b480      	push	{r7}
 80094c2:	b085      	sub	sp, #20
 80094c4:	af00      	add	r7, sp, #0
 80094c6:	60f8      	str	r0, [r7, #12]
 80094c8:	60b9      	str	r1, [r7, #8]
 80094ca:	607a      	str	r2, [r7, #4]
 80094cc:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	2200      	movs	r2, #0
 80094d2:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	2200      	movs	r2, #0
 80094d8:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	685b      	ldr	r3, [r3, #4]
 80094de:	2b00      	cmp	r3, #0
 80094e0:	d003      	beq.n	80094ea <SAI_InitPCM+0x2a>
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	685b      	ldr	r3, [r3, #4]
 80094e6:	2b02      	cmp	r3, #2
 80094e8:	d103      	bne.n	80094f2 <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80094ea:	68fb      	ldr	r3, [r7, #12]
 80094ec:	2201      	movs	r2, #1
 80094ee:	641a      	str	r2, [r3, #64]	; 0x40
 80094f0:	e002      	b.n	80094f8 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8009504:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 8009506:	68fb      	ldr	r3, [r7, #12]
 8009508:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 800950c:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	2200      	movs	r2, #0
 8009512:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	683a      	ldr	r2, [r7, #0]
 8009518:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800951a:	68fb      	ldr	r3, [r7, #12]
 800951c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009520:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 8009522:	68bb      	ldr	r3, [r7, #8]
 8009524:	2b04      	cmp	r3, #4
 8009526:	d103      	bne.n	8009530 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8009528:	68fb      	ldr	r3, [r7, #12]
 800952a:	2201      	movs	r2, #1
 800952c:	649a      	str	r2, [r3, #72]	; 0x48
 800952e:	e002      	b.n	8009536 <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	220d      	movs	r2, #13
 8009534:	649a      	str	r2, [r3, #72]	; 0x48
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2b03      	cmp	r3, #3
 800953a:	d837      	bhi.n	80095ac <SAI_InitPCM+0xec>
 800953c:	a201      	add	r2, pc, #4	; (adr r2, 8009544 <SAI_InitPCM+0x84>)
 800953e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009542:	bf00      	nop
 8009544:	08009555 	.word	0x08009555
 8009548:	0800956b 	.word	0x0800956b
 800954c:	08009581 	.word	0x08009581
 8009550:	08009597 	.word	0x08009597
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	2280      	movs	r2, #128	; 0x80
 8009558:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 800955a:	683b      	ldr	r3, [r7, #0]
 800955c:	011a      	lsls	r2, r3, #4
 800955e:	68fb      	ldr	r3, [r7, #12]
 8009560:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 8009562:	68fb      	ldr	r3, [r7, #12]
 8009564:	2240      	movs	r2, #64	; 0x40
 8009566:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009568:	e022      	b.n	80095b0 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800956a:	68fb      	ldr	r3, [r7, #12]
 800956c:	2280      	movs	r2, #128	; 0x80
 800956e:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009570:	683b      	ldr	r3, [r7, #0]
 8009572:	015a      	lsls	r2, r3, #5
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	2280      	movs	r2, #128	; 0x80
 800957c:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800957e:	e017      	b.n	80095b0 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009580:	68fb      	ldr	r3, [r7, #12]
 8009582:	22c0      	movs	r2, #192	; 0xc0
 8009584:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009586:	683b      	ldr	r3, [r7, #0]
 8009588:	015a      	lsls	r2, r3, #5
 800958a:	68fb      	ldr	r3, [r7, #12]
 800958c:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	2280      	movs	r2, #128	; 0x80
 8009592:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009594:	e00c      	b.n	80095b0 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	22e0      	movs	r2, #224	; 0xe0
 800959a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800959c:	683b      	ldr	r3, [r7, #0]
 800959e:	015a      	lsls	r2, r3, #5
 80095a0:	68fb      	ldr	r3, [r7, #12]
 80095a2:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 80095a4:	68fb      	ldr	r3, [r7, #12]
 80095a6:	2280      	movs	r2, #128	; 0x80
 80095a8:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 80095aa:	e001      	b.n	80095b0 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 80095ac:	2301      	movs	r3, #1
 80095ae:	e000      	b.n	80095b2 <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 80095b0:	2300      	movs	r3, #0
}
 80095b2:	4618      	mov	r0, r3
 80095b4:	3714      	adds	r7, #20
 80095b6:	46bd      	mov	sp, r7
 80095b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095bc:	4770      	bx	lr
 80095be:	bf00      	nop

080095c0 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80095c0:	b480      	push	{r7}
 80095c2:	b085      	sub	sp, #20
 80095c4:	af00      	add	r7, sp, #0
 80095c6:	6078      	str	r0, [r7, #4]
 80095c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80095ca:	2301      	movs	r3, #1
 80095cc:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80095ce:	683b      	ldr	r3, [r7, #0]
 80095d0:	2b01      	cmp	r3, #1
 80095d2:	d103      	bne.n	80095dc <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80095d4:	68fb      	ldr	r3, [r7, #12]
 80095d6:	f043 0308 	orr.w	r3, r3, #8
 80095da:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095e0:	2b08      	cmp	r3, #8
 80095e2:	d10b      	bne.n	80095fc <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d003      	beq.n	80095f4 <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b01      	cmp	r3, #1
 80095f2:	d103      	bne.n	80095fc <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f043 0310 	orr.w	r3, r3, #16
 80095fa:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	685b      	ldr	r3, [r3, #4]
 8009600:	2b03      	cmp	r3, #3
 8009602:	d003      	beq.n	800960c <SAI_InterruptFlag+0x4c>
 8009604:	687b      	ldr	r3, [r7, #4]
 8009606:	685b      	ldr	r3, [r3, #4]
 8009608:	2b02      	cmp	r3, #2
 800960a:	d104      	bne.n	8009616 <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 800960c:	68fb      	ldr	r3, [r7, #12]
 800960e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8009612:	60fb      	str	r3, [r7, #12]
 8009614:	e003      	b.n	800961e <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	f043 0304 	orr.w	r3, r3, #4
 800961c:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 800961e:	68fb      	ldr	r3, [r7, #12]
}
 8009620:	4618      	mov	r0, r3
 8009622:	3714      	adds	r7, #20
 8009624:	46bd      	mov	sp, r7
 8009626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800962a:	4770      	bx	lr

0800962c <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 800962c:	b480      	push	{r7}
 800962e:	b085      	sub	sp, #20
 8009630:	af00      	add	r7, sp, #0
 8009632:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8009634:	4b17      	ldr	r3, [pc, #92]	; (8009694 <SAI_Disable+0x68>)
 8009636:	681b      	ldr	r3, [r3, #0]
 8009638:	4a17      	ldr	r2, [pc, #92]	; (8009698 <SAI_Disable+0x6c>)
 800963a:	fba2 2303 	umull	r2, r3, r2, r3
 800963e:	0b1b      	lsrs	r3, r3, #12
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009644:	2300      	movs	r3, #0
 8009646:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	681a      	ldr	r2, [r3, #0]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8009656:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	1e5a      	subs	r2, r3, #1
 800965c:	60fa      	str	r2, [r7, #12]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d10a      	bne.n	8009678 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009668:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 8009672:	2303      	movs	r3, #3
 8009674:	72fb      	strb	r3, [r7, #11]
      break;
 8009676:	e006      	b.n	8009686 <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009678:	687b      	ldr	r3, [r7, #4]
 800967a:	681b      	ldr	r3, [r3, #0]
 800967c:	681b      	ldr	r3, [r3, #0]
 800967e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009682:	2b00      	cmp	r3, #0
 8009684:	d1e8      	bne.n	8009658 <SAI_Disable+0x2c>

  return status;
 8009686:	7afb      	ldrb	r3, [r7, #11]
}
 8009688:	4618      	mov	r0, r3
 800968a:	3714      	adds	r7, #20
 800968c:	46bd      	mov	sp, r7
 800968e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009692:	4770      	bx	lr
 8009694:	20000058 	.word	0x20000058
 8009698:	95cbec1b 	.word	0x95cbec1b

0800969c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800969c:	b580      	push	{r7, lr}
 800969e:	b084      	sub	sp, #16
 80096a0:	af00      	add	r7, sp, #0
 80096a2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a8:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	69db      	ldr	r3, [r3, #28]
 80096ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80096b2:	d01c      	beq.n	80096ee <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	681a      	ldr	r2, [r3, #0]
 80096ba:	68fb      	ldr	r3, [r7, #12]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80096c2:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	2200      	movs	r2, #0
 80096c8:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80096cc:	2100      	movs	r1, #0
 80096ce:	68f8      	ldr	r0, [r7, #12]
 80096d0:	f7ff ff76 	bl	80095c0 <SAI_InterruptFlag>
 80096d4:	4603      	mov	r3, r0
 80096d6:	43d9      	mvns	r1, r3
 80096d8:	68fb      	ldr	r3, [r7, #12]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	691a      	ldr	r2, [r3, #16]
 80096de:	68fb      	ldr	r3, [r7, #12]
 80096e0:	681b      	ldr	r3, [r3, #0]
 80096e2:	400a      	ands	r2, r1
 80096e4:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	2201      	movs	r2, #1
 80096ea:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80096ee:	68f8      	ldr	r0, [r7, #12]
 80096f0:	f7fb ff7c 	bl	80055ec <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80096f4:	bf00      	nop
 80096f6:	3710      	adds	r7, #16
 80096f8:	46bd      	mov	sp, r7
 80096fa:	bd80      	pop	{r7, pc}

080096fc <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096fc:	b580      	push	{r7, lr}
 80096fe:	b084      	sub	sp, #16
 8009700:	af00      	add	r7, sp, #0
 8009702:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009708:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f7fb ff5a 	bl	80055c4 <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009710:	bf00      	nop
 8009712:	3710      	adds	r7, #16
 8009714:	46bd      	mov	sp, r7
 8009716:	bd80      	pop	{r7, pc}

08009718 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009718:	b580      	push	{r7, lr}
 800971a:	b084      	sub	sp, #16
 800971c:	af00      	add	r7, sp, #0
 800971e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009724:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800972c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800973c:	2b01      	cmp	r3, #1
 800973e:	d004      	beq.n	800974a <SAI_DMAError+0x32>
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009746:	2b01      	cmp	r3, #1
 8009748:	d112      	bne.n	8009770 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 800974a:	68fb      	ldr	r3, [r7, #12]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009758:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 800975a:	68f8      	ldr	r0, [r7, #12]
 800975c:	f7ff ff66 	bl	800962c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009760:	68fb      	ldr	r3, [r7, #12]
 8009762:	2201      	movs	r2, #1
 8009764:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	2200      	movs	r2, #0
 800976c:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009770:	68f8      	ldr	r0, [r7, #12]
 8009772:	f7ff fded 	bl	8009350 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 8009776:	bf00      	nop
 8009778:	3710      	adds	r7, #16
 800977a:	46bd      	mov	sp, r7
 800977c:	bd80      	pop	{r7, pc}
	...

08009780 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8009780:	b480      	push	{r7}
 8009782:	b085      	sub	sp, #20
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009788:	687b      	ldr	r3, [r7, #4]
 800978a:	68db      	ldr	r3, [r3, #12]
 800978c:	2b02      	cmp	r3, #2
 800978e:	d00c      	beq.n	80097aa <SAI_BlockSynchroConfig+0x2a>
 8009790:	2b02      	cmp	r3, #2
 8009792:	d80d      	bhi.n	80097b0 <SAI_BlockSynchroConfig+0x30>
 8009794:	2b00      	cmp	r3, #0
 8009796:	d002      	beq.n	800979e <SAI_BlockSynchroConfig+0x1e>
 8009798:	2b01      	cmp	r3, #1
 800979a:	d003      	beq.n	80097a4 <SAI_BlockSynchroConfig+0x24>
 800979c:	e008      	b.n	80097b0 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 800979e:	2300      	movs	r3, #0
 80097a0:	60fb      	str	r3, [r7, #12]
      break;
 80097a2:	e008      	b.n	80097b6 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80097a4:	2310      	movs	r3, #16
 80097a6:	60fb      	str	r3, [r7, #12]
      break;
 80097a8:	e005      	b.n	80097b6 <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80097aa:	2320      	movs	r3, #32
 80097ac:	60fb      	str	r3, [r7, #12]
      break;
 80097ae:	e002      	b.n	80097b6 <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 80097b0:	2300      	movs	r3, #0
 80097b2:	60fb      	str	r3, [r7, #12]
      break;
 80097b4:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 80097b6:	687b      	ldr	r3, [r7, #4]
 80097b8:	689b      	ldr	r3, [r3, #8]
 80097ba:	2b03      	cmp	r3, #3
 80097bc:	d103      	bne.n	80097c6 <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80097be:	68fb      	ldr	r3, [r7, #12]
 80097c0:	f043 0301 	orr.w	r3, r3, #1
 80097c4:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a0b      	ldr	r2, [pc, #44]	; (80097f8 <SAI_BlockSynchroConfig+0x78>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d004      	beq.n	80097da <SAI_BlockSynchroConfig+0x5a>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a09      	ldr	r2, [pc, #36]	; (80097fc <SAI_BlockSynchroConfig+0x7c>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d103      	bne.n	80097e2 <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 80097da:	4a09      	ldr	r2, [pc, #36]	; (8009800 <SAI_BlockSynchroConfig+0x80>)
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6013      	str	r3, [r2, #0]
 80097e0:	e003      	b.n	80097ea <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80097e2:	4a08      	ldr	r2, [pc, #32]	; (8009804 <SAI_BlockSynchroConfig+0x84>)
 80097e4:	68fb      	ldr	r3, [r7, #12]
 80097e6:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80097e8:	bf00      	nop
 80097ea:	bf00      	nop
 80097ec:	3714      	adds	r7, #20
 80097ee:	46bd      	mov	sp, r7
 80097f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f4:	4770      	bx	lr
 80097f6:	bf00      	nop
 80097f8:	40015804 	.word	0x40015804
 80097fc:	40015824 	.word	0x40015824
 8009800:	40015800 	.word	0x40015800
 8009804:	40015c00 	.word	0x40015c00

08009808 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 8009808:	b580      	push	{r7, lr}
 800980a:	b084      	sub	sp, #16
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 8009810:	2300      	movs	r3, #0
 8009812:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	4a0a      	ldr	r2, [pc, #40]	; (8009844 <SAI_GetInputClock+0x3c>)
 800981a:	4293      	cmp	r3, r2
 800981c:	d004      	beq.n	8009828 <SAI_GetInputClock+0x20>
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	4a09      	ldr	r2, [pc, #36]	; (8009848 <SAI_GetInputClock+0x40>)
 8009824:	4293      	cmp	r3, r2
 8009826:	d104      	bne.n	8009832 <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009828:	2004      	movs	r0, #4
 800982a:	f7fe fc9b 	bl	8008164 <HAL_RCCEx_GetPeriphCLKFreq>
 800982e:	60f8      	str	r0, [r7, #12]
 8009830:	e003      	b.n	800983a <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8009832:	2008      	movs	r0, #8
 8009834:	f7fe fc96 	bl	8008164 <HAL_RCCEx_GetPeriphCLKFreq>
 8009838:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 800983a:	68fb      	ldr	r3, [r7, #12]
}
 800983c:	4618      	mov	r0, r3
 800983e:	3710      	adds	r7, #16
 8009840:	46bd      	mov	sp, r7
 8009842:	bd80      	pop	{r7, pc}
 8009844:	40015804 	.word	0x40015804
 8009848:	40015824 	.word	0x40015824

0800984c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800984c:	b580      	push	{r7, lr}
 800984e:	b082      	sub	sp, #8
 8009850:	af00      	add	r7, sp, #0
 8009852:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	e03f      	b.n	80098de <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009864:	b2db      	uxtb	r3, r3
 8009866:	2b00      	cmp	r3, #0
 8009868:	d106      	bne.n	8009878 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	2200      	movs	r2, #0
 800986e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009872:	6878      	ldr	r0, [r7, #4]
 8009874:	f7fc fefa 	bl	800666c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	2224      	movs	r2, #36	; 0x24
 800987c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	68da      	ldr	r2, [r3, #12]
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	681b      	ldr	r3, [r3, #0]
 800988a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800988e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f000 f905 	bl	8009aa0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	691a      	ldr	r2, [r3, #16]
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	681b      	ldr	r3, [r3, #0]
 80098a0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80098a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	681b      	ldr	r3, [r3, #0]
 80098aa:	695a      	ldr	r2, [r3, #20]
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	681b      	ldr	r3, [r3, #0]
 80098b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80098b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	68da      	ldr	r2, [r3, #12]
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	2200      	movs	r2, #0
 80098ca:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	2220      	movs	r2, #32
 80098d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	2220      	movs	r2, #32
 80098d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80098dc:	2300      	movs	r3, #0
}
 80098de:	4618      	mov	r0, r3
 80098e0:	3708      	adds	r7, #8
 80098e2:	46bd      	mov	sp, r7
 80098e4:	bd80      	pop	{r7, pc}

080098e6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098e6:	b580      	push	{r7, lr}
 80098e8:	b08a      	sub	sp, #40	; 0x28
 80098ea:	af02      	add	r7, sp, #8
 80098ec:	60f8      	str	r0, [r7, #12]
 80098ee:	60b9      	str	r1, [r7, #8]
 80098f0:	603b      	str	r3, [r7, #0]
 80098f2:	4613      	mov	r3, r2
 80098f4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098f6:	2300      	movs	r3, #0
 80098f8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009900:	b2db      	uxtb	r3, r3
 8009902:	2b20      	cmp	r3, #32
 8009904:	d17c      	bne.n	8009a00 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009906:	68bb      	ldr	r3, [r7, #8]
 8009908:	2b00      	cmp	r3, #0
 800990a:	d002      	beq.n	8009912 <HAL_UART_Transmit+0x2c>
 800990c:	88fb      	ldrh	r3, [r7, #6]
 800990e:	2b00      	cmp	r3, #0
 8009910:	d101      	bne.n	8009916 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009912:	2301      	movs	r3, #1
 8009914:	e075      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800991c:	2b01      	cmp	r3, #1
 800991e:	d101      	bne.n	8009924 <HAL_UART_Transmit+0x3e>
 8009920:	2302      	movs	r3, #2
 8009922:	e06e      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2201      	movs	r2, #1
 8009928:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	2200      	movs	r2, #0
 8009930:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	2221      	movs	r2, #33	; 0x21
 8009936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800993a:	f7fd f907 	bl	8006b4c <HAL_GetTick>
 800993e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	88fa      	ldrh	r2, [r7, #6]
 8009944:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	88fa      	ldrh	r2, [r7, #6]
 800994a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800994c:	68fb      	ldr	r3, [r7, #12]
 800994e:	689b      	ldr	r3, [r3, #8]
 8009950:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009954:	d108      	bne.n	8009968 <HAL_UART_Transmit+0x82>
 8009956:	68fb      	ldr	r3, [r7, #12]
 8009958:	691b      	ldr	r3, [r3, #16]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d104      	bne.n	8009968 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800995e:	2300      	movs	r3, #0
 8009960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009962:	68bb      	ldr	r3, [r7, #8]
 8009964:	61bb      	str	r3, [r7, #24]
 8009966:	e003      	b.n	8009970 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009968:	68bb      	ldr	r3, [r7, #8]
 800996a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800996c:	2300      	movs	r3, #0
 800996e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	2200      	movs	r2, #0
 8009974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009978:	e02a      	b.n	80099d0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800997a:	683b      	ldr	r3, [r7, #0]
 800997c:	9300      	str	r3, [sp, #0]
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	2200      	movs	r2, #0
 8009982:	2180      	movs	r1, #128	; 0x80
 8009984:	68f8      	ldr	r0, [r7, #12]
 8009986:	f000 f840 	bl	8009a0a <UART_WaitOnFlagUntilTimeout>
 800998a:	4603      	mov	r3, r0
 800998c:	2b00      	cmp	r3, #0
 800998e:	d001      	beq.n	8009994 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009990:	2303      	movs	r3, #3
 8009992:	e036      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009994:	69fb      	ldr	r3, [r7, #28]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d10b      	bne.n	80099b2 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800999a:	69bb      	ldr	r3, [r7, #24]
 800999c:	881b      	ldrh	r3, [r3, #0]
 800999e:	461a      	mov	r2, r3
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	681b      	ldr	r3, [r3, #0]
 80099a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80099a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80099aa:	69bb      	ldr	r3, [r7, #24]
 80099ac:	3302      	adds	r3, #2
 80099ae:	61bb      	str	r3, [r7, #24]
 80099b0:	e007      	b.n	80099c2 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80099b2:	69fb      	ldr	r3, [r7, #28]
 80099b4:	781a      	ldrb	r2, [r3, #0]
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099bc:	69fb      	ldr	r3, [r7, #28]
 80099be:	3301      	adds	r3, #1
 80099c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099c6:	b29b      	uxth	r3, r3
 80099c8:	3b01      	subs	r3, #1
 80099ca:	b29a      	uxth	r2, r3
 80099cc:	68fb      	ldr	r3, [r7, #12]
 80099ce:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099d4:	b29b      	uxth	r3, r3
 80099d6:	2b00      	cmp	r3, #0
 80099d8:	d1cf      	bne.n	800997a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099da:	683b      	ldr	r3, [r7, #0]
 80099dc:	9300      	str	r3, [sp, #0]
 80099de:	697b      	ldr	r3, [r7, #20]
 80099e0:	2200      	movs	r2, #0
 80099e2:	2140      	movs	r1, #64	; 0x40
 80099e4:	68f8      	ldr	r0, [r7, #12]
 80099e6:	f000 f810 	bl	8009a0a <UART_WaitOnFlagUntilTimeout>
 80099ea:	4603      	mov	r3, r0
 80099ec:	2b00      	cmp	r3, #0
 80099ee:	d001      	beq.n	80099f4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80099f0:	2303      	movs	r3, #3
 80099f2:	e006      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2220      	movs	r2, #32
 80099f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80099fc:	2300      	movs	r3, #0
 80099fe:	e000      	b.n	8009a02 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009a00:	2302      	movs	r3, #2
  }
}
 8009a02:	4618      	mov	r0, r3
 8009a04:	3720      	adds	r7, #32
 8009a06:	46bd      	mov	sp, r7
 8009a08:	bd80      	pop	{r7, pc}

08009a0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8009a0a:	b580      	push	{r7, lr}
 8009a0c:	b084      	sub	sp, #16
 8009a0e:	af00      	add	r7, sp, #0
 8009a10:	60f8      	str	r0, [r7, #12]
 8009a12:	60b9      	str	r1, [r7, #8]
 8009a14:	603b      	str	r3, [r7, #0]
 8009a16:	4613      	mov	r3, r2
 8009a18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a1a:	e02c      	b.n	8009a76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a1c:	69bb      	ldr	r3, [r7, #24]
 8009a1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a22:	d028      	beq.n	8009a76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a24:	69bb      	ldr	r3, [r7, #24]
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d007      	beq.n	8009a3a <UART_WaitOnFlagUntilTimeout+0x30>
 8009a2a:	f7fd f88f 	bl	8006b4c <HAL_GetTick>
 8009a2e:	4602      	mov	r2, r0
 8009a30:	683b      	ldr	r3, [r7, #0]
 8009a32:	1ad3      	subs	r3, r2, r3
 8009a34:	69ba      	ldr	r2, [r7, #24]
 8009a36:	429a      	cmp	r2, r3
 8009a38:	d21d      	bcs.n	8009a76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a3a:	68fb      	ldr	r3, [r7, #12]
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	68da      	ldr	r2, [r3, #12]
 8009a40:	68fb      	ldr	r3, [r7, #12]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a48:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	681b      	ldr	r3, [r3, #0]
 8009a4e:	695a      	ldr	r2, [r3, #20]
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	681b      	ldr	r3, [r3, #0]
 8009a54:	f022 0201 	bic.w	r2, r2, #1
 8009a58:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009a5a:	68fb      	ldr	r3, [r7, #12]
 8009a5c:	2220      	movs	r2, #32
 8009a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a62:	68fb      	ldr	r3, [r7, #12]
 8009a64:	2220      	movs	r2, #32
 8009a66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a6a:	68fb      	ldr	r3, [r7, #12]
 8009a6c:	2200      	movs	r2, #0
 8009a6e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009a72:	2303      	movs	r3, #3
 8009a74:	e00f      	b.n	8009a96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68bb      	ldr	r3, [r7, #8]
 8009a7e:	4013      	ands	r3, r2
 8009a80:	68ba      	ldr	r2, [r7, #8]
 8009a82:	429a      	cmp	r2, r3
 8009a84:	bf0c      	ite	eq
 8009a86:	2301      	moveq	r3, #1
 8009a88:	2300      	movne	r3, #0
 8009a8a:	b2db      	uxtb	r3, r3
 8009a8c:	461a      	mov	r2, r3
 8009a8e:	79fb      	ldrb	r3, [r7, #7]
 8009a90:	429a      	cmp	r2, r3
 8009a92:	d0c3      	beq.n	8009a1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a94:	2300      	movs	r3, #0
}
 8009a96:	4618      	mov	r0, r3
 8009a98:	3710      	adds	r7, #16
 8009a9a:	46bd      	mov	sp, r7
 8009a9c:	bd80      	pop	{r7, pc}
	...

08009aa0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009aa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aa4:	b09f      	sub	sp, #124	; 0x7c
 8009aa6:	af00      	add	r7, sp, #0
 8009aa8:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	691b      	ldr	r3, [r3, #16]
 8009ab0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab6:	68d9      	ldr	r1, [r3, #12]
 8009ab8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aba:	681a      	ldr	r2, [r3, #0]
 8009abc:	ea40 0301 	orr.w	r3, r0, r1
 8009ac0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac4:	689a      	ldr	r2, [r3, #8]
 8009ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac8:	691b      	ldr	r3, [r3, #16]
 8009aca:	431a      	orrs	r2, r3
 8009acc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ace:	695b      	ldr	r3, [r3, #20]
 8009ad0:	431a      	orrs	r2, r3
 8009ad2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad4:	69db      	ldr	r3, [r3, #28]
 8009ad6:	4313      	orrs	r3, r2
 8009ad8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	68db      	ldr	r3, [r3, #12]
 8009ae0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009ae4:	f021 010c 	bic.w	r1, r1, #12
 8009ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009aee:	430b      	orrs	r3, r1
 8009af0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009af4:	681b      	ldr	r3, [r3, #0]
 8009af6:	695b      	ldr	r3, [r3, #20]
 8009af8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009afe:	6999      	ldr	r1, [r3, #24]
 8009b00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b02:	681a      	ldr	r2, [r3, #0]
 8009b04:	ea40 0301 	orr.w	r3, r0, r1
 8009b08:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009b0a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b0c:	681a      	ldr	r2, [r3, #0]
 8009b0e:	4bc5      	ldr	r3, [pc, #788]	; (8009e24 <UART_SetConfig+0x384>)
 8009b10:	429a      	cmp	r2, r3
 8009b12:	d004      	beq.n	8009b1e <UART_SetConfig+0x7e>
 8009b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b16:	681a      	ldr	r2, [r3, #0]
 8009b18:	4bc3      	ldr	r3, [pc, #780]	; (8009e28 <UART_SetConfig+0x388>)
 8009b1a:	429a      	cmp	r2, r3
 8009b1c:	d103      	bne.n	8009b26 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b1e:	f7fd ffe3 	bl	8007ae8 <HAL_RCC_GetPCLK2Freq>
 8009b22:	6778      	str	r0, [r7, #116]	; 0x74
 8009b24:	e002      	b.n	8009b2c <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b26:	f7fd ffcb 	bl	8007ac0 <HAL_RCC_GetPCLK1Freq>
 8009b2a:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b2e:	69db      	ldr	r3, [r3, #28]
 8009b30:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b34:	f040 80b6 	bne.w	8009ca4 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b38:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b3a:	461c      	mov	r4, r3
 8009b3c:	f04f 0500 	mov.w	r5, #0
 8009b40:	4622      	mov	r2, r4
 8009b42:	462b      	mov	r3, r5
 8009b44:	1891      	adds	r1, r2, r2
 8009b46:	6439      	str	r1, [r7, #64]	; 0x40
 8009b48:	415b      	adcs	r3, r3
 8009b4a:	647b      	str	r3, [r7, #68]	; 0x44
 8009b4c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b50:	1912      	adds	r2, r2, r4
 8009b52:	eb45 0303 	adc.w	r3, r5, r3
 8009b56:	f04f 0000 	mov.w	r0, #0
 8009b5a:	f04f 0100 	mov.w	r1, #0
 8009b5e:	00d9      	lsls	r1, r3, #3
 8009b60:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b64:	00d0      	lsls	r0, r2, #3
 8009b66:	4602      	mov	r2, r0
 8009b68:	460b      	mov	r3, r1
 8009b6a:	1911      	adds	r1, r2, r4
 8009b6c:	6639      	str	r1, [r7, #96]	; 0x60
 8009b6e:	416b      	adcs	r3, r5
 8009b70:	667b      	str	r3, [r7, #100]	; 0x64
 8009b72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b74:	685b      	ldr	r3, [r3, #4]
 8009b76:	461a      	mov	r2, r3
 8009b78:	f04f 0300 	mov.w	r3, #0
 8009b7c:	1891      	adds	r1, r2, r2
 8009b7e:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b80:	415b      	adcs	r3, r3
 8009b82:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b84:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b88:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009b8c:	f7f7 f89c 	bl	8000cc8 <__aeabi_uldivmod>
 8009b90:	4602      	mov	r2, r0
 8009b92:	460b      	mov	r3, r1
 8009b94:	4ba5      	ldr	r3, [pc, #660]	; (8009e2c <UART_SetConfig+0x38c>)
 8009b96:	fba3 2302 	umull	r2, r3, r3, r2
 8009b9a:	095b      	lsrs	r3, r3, #5
 8009b9c:	011e      	lsls	r6, r3, #4
 8009b9e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ba0:	461c      	mov	r4, r3
 8009ba2:	f04f 0500 	mov.w	r5, #0
 8009ba6:	4622      	mov	r2, r4
 8009ba8:	462b      	mov	r3, r5
 8009baa:	1891      	adds	r1, r2, r2
 8009bac:	6339      	str	r1, [r7, #48]	; 0x30
 8009bae:	415b      	adcs	r3, r3
 8009bb0:	637b      	str	r3, [r7, #52]	; 0x34
 8009bb2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009bb6:	1912      	adds	r2, r2, r4
 8009bb8:	eb45 0303 	adc.w	r3, r5, r3
 8009bbc:	f04f 0000 	mov.w	r0, #0
 8009bc0:	f04f 0100 	mov.w	r1, #0
 8009bc4:	00d9      	lsls	r1, r3, #3
 8009bc6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009bca:	00d0      	lsls	r0, r2, #3
 8009bcc:	4602      	mov	r2, r0
 8009bce:	460b      	mov	r3, r1
 8009bd0:	1911      	adds	r1, r2, r4
 8009bd2:	65b9      	str	r1, [r7, #88]	; 0x58
 8009bd4:	416b      	adcs	r3, r5
 8009bd6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bda:	685b      	ldr	r3, [r3, #4]
 8009bdc:	461a      	mov	r2, r3
 8009bde:	f04f 0300 	mov.w	r3, #0
 8009be2:	1891      	adds	r1, r2, r2
 8009be4:	62b9      	str	r1, [r7, #40]	; 0x28
 8009be6:	415b      	adcs	r3, r3
 8009be8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bea:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bee:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009bf2:	f7f7 f869 	bl	8000cc8 <__aeabi_uldivmod>
 8009bf6:	4602      	mov	r2, r0
 8009bf8:	460b      	mov	r3, r1
 8009bfa:	4b8c      	ldr	r3, [pc, #560]	; (8009e2c <UART_SetConfig+0x38c>)
 8009bfc:	fba3 1302 	umull	r1, r3, r3, r2
 8009c00:	095b      	lsrs	r3, r3, #5
 8009c02:	2164      	movs	r1, #100	; 0x64
 8009c04:	fb01 f303 	mul.w	r3, r1, r3
 8009c08:	1ad3      	subs	r3, r2, r3
 8009c0a:	00db      	lsls	r3, r3, #3
 8009c0c:	3332      	adds	r3, #50	; 0x32
 8009c0e:	4a87      	ldr	r2, [pc, #540]	; (8009e2c <UART_SetConfig+0x38c>)
 8009c10:	fba2 2303 	umull	r2, r3, r2, r3
 8009c14:	095b      	lsrs	r3, r3, #5
 8009c16:	005b      	lsls	r3, r3, #1
 8009c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c1c:	441e      	add	r6, r3
 8009c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c20:	4618      	mov	r0, r3
 8009c22:	f04f 0100 	mov.w	r1, #0
 8009c26:	4602      	mov	r2, r0
 8009c28:	460b      	mov	r3, r1
 8009c2a:	1894      	adds	r4, r2, r2
 8009c2c:	623c      	str	r4, [r7, #32]
 8009c2e:	415b      	adcs	r3, r3
 8009c30:	627b      	str	r3, [r7, #36]	; 0x24
 8009c32:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c36:	1812      	adds	r2, r2, r0
 8009c38:	eb41 0303 	adc.w	r3, r1, r3
 8009c3c:	f04f 0400 	mov.w	r4, #0
 8009c40:	f04f 0500 	mov.w	r5, #0
 8009c44:	00dd      	lsls	r5, r3, #3
 8009c46:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c4a:	00d4      	lsls	r4, r2, #3
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	462b      	mov	r3, r5
 8009c50:	1814      	adds	r4, r2, r0
 8009c52:	653c      	str	r4, [r7, #80]	; 0x50
 8009c54:	414b      	adcs	r3, r1
 8009c56:	657b      	str	r3, [r7, #84]	; 0x54
 8009c58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c5a:	685b      	ldr	r3, [r3, #4]
 8009c5c:	461a      	mov	r2, r3
 8009c5e:	f04f 0300 	mov.w	r3, #0
 8009c62:	1891      	adds	r1, r2, r2
 8009c64:	61b9      	str	r1, [r7, #24]
 8009c66:	415b      	adcs	r3, r3
 8009c68:	61fb      	str	r3, [r7, #28]
 8009c6a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c6e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009c72:	f7f7 f829 	bl	8000cc8 <__aeabi_uldivmod>
 8009c76:	4602      	mov	r2, r0
 8009c78:	460b      	mov	r3, r1
 8009c7a:	4b6c      	ldr	r3, [pc, #432]	; (8009e2c <UART_SetConfig+0x38c>)
 8009c7c:	fba3 1302 	umull	r1, r3, r3, r2
 8009c80:	095b      	lsrs	r3, r3, #5
 8009c82:	2164      	movs	r1, #100	; 0x64
 8009c84:	fb01 f303 	mul.w	r3, r1, r3
 8009c88:	1ad3      	subs	r3, r2, r3
 8009c8a:	00db      	lsls	r3, r3, #3
 8009c8c:	3332      	adds	r3, #50	; 0x32
 8009c8e:	4a67      	ldr	r2, [pc, #412]	; (8009e2c <UART_SetConfig+0x38c>)
 8009c90:	fba2 2303 	umull	r2, r3, r2, r3
 8009c94:	095b      	lsrs	r3, r3, #5
 8009c96:	f003 0207 	and.w	r2, r3, #7
 8009c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c9c:	681b      	ldr	r3, [r3, #0]
 8009c9e:	4432      	add	r2, r6
 8009ca0:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ca2:	e0b9      	b.n	8009e18 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009ca4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009ca6:	461c      	mov	r4, r3
 8009ca8:	f04f 0500 	mov.w	r5, #0
 8009cac:	4622      	mov	r2, r4
 8009cae:	462b      	mov	r3, r5
 8009cb0:	1891      	adds	r1, r2, r2
 8009cb2:	6139      	str	r1, [r7, #16]
 8009cb4:	415b      	adcs	r3, r3
 8009cb6:	617b      	str	r3, [r7, #20]
 8009cb8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009cbc:	1912      	adds	r2, r2, r4
 8009cbe:	eb45 0303 	adc.w	r3, r5, r3
 8009cc2:	f04f 0000 	mov.w	r0, #0
 8009cc6:	f04f 0100 	mov.w	r1, #0
 8009cca:	00d9      	lsls	r1, r3, #3
 8009ccc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cd0:	00d0      	lsls	r0, r2, #3
 8009cd2:	4602      	mov	r2, r0
 8009cd4:	460b      	mov	r3, r1
 8009cd6:	eb12 0804 	adds.w	r8, r2, r4
 8009cda:	eb43 0905 	adc.w	r9, r3, r5
 8009cde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ce0:	685b      	ldr	r3, [r3, #4]
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f04f 0100 	mov.w	r1, #0
 8009ce8:	f04f 0200 	mov.w	r2, #0
 8009cec:	f04f 0300 	mov.w	r3, #0
 8009cf0:	008b      	lsls	r3, r1, #2
 8009cf2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009cf6:	0082      	lsls	r2, r0, #2
 8009cf8:	4640      	mov	r0, r8
 8009cfa:	4649      	mov	r1, r9
 8009cfc:	f7f6 ffe4 	bl	8000cc8 <__aeabi_uldivmod>
 8009d00:	4602      	mov	r2, r0
 8009d02:	460b      	mov	r3, r1
 8009d04:	4b49      	ldr	r3, [pc, #292]	; (8009e2c <UART_SetConfig+0x38c>)
 8009d06:	fba3 2302 	umull	r2, r3, r3, r2
 8009d0a:	095b      	lsrs	r3, r3, #5
 8009d0c:	011e      	lsls	r6, r3, #4
 8009d0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d10:	4618      	mov	r0, r3
 8009d12:	f04f 0100 	mov.w	r1, #0
 8009d16:	4602      	mov	r2, r0
 8009d18:	460b      	mov	r3, r1
 8009d1a:	1894      	adds	r4, r2, r2
 8009d1c:	60bc      	str	r4, [r7, #8]
 8009d1e:	415b      	adcs	r3, r3
 8009d20:	60fb      	str	r3, [r7, #12]
 8009d22:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d26:	1812      	adds	r2, r2, r0
 8009d28:	eb41 0303 	adc.w	r3, r1, r3
 8009d2c:	f04f 0400 	mov.w	r4, #0
 8009d30:	f04f 0500 	mov.w	r5, #0
 8009d34:	00dd      	lsls	r5, r3, #3
 8009d36:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d3a:	00d4      	lsls	r4, r2, #3
 8009d3c:	4622      	mov	r2, r4
 8009d3e:	462b      	mov	r3, r5
 8009d40:	1814      	adds	r4, r2, r0
 8009d42:	64bc      	str	r4, [r7, #72]	; 0x48
 8009d44:	414b      	adcs	r3, r1
 8009d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d48:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d4a:	685b      	ldr	r3, [r3, #4]
 8009d4c:	4618      	mov	r0, r3
 8009d4e:	f04f 0100 	mov.w	r1, #0
 8009d52:	f04f 0200 	mov.w	r2, #0
 8009d56:	f04f 0300 	mov.w	r3, #0
 8009d5a:	008b      	lsls	r3, r1, #2
 8009d5c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009d60:	0082      	lsls	r2, r0, #2
 8009d62:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009d66:	f7f6 ffaf 	bl	8000cc8 <__aeabi_uldivmod>
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4b2f      	ldr	r3, [pc, #188]	; (8009e2c <UART_SetConfig+0x38c>)
 8009d70:	fba3 1302 	umull	r1, r3, r3, r2
 8009d74:	095b      	lsrs	r3, r3, #5
 8009d76:	2164      	movs	r1, #100	; 0x64
 8009d78:	fb01 f303 	mul.w	r3, r1, r3
 8009d7c:	1ad3      	subs	r3, r2, r3
 8009d7e:	011b      	lsls	r3, r3, #4
 8009d80:	3332      	adds	r3, #50	; 0x32
 8009d82:	4a2a      	ldr	r2, [pc, #168]	; (8009e2c <UART_SetConfig+0x38c>)
 8009d84:	fba2 2303 	umull	r2, r3, r2, r3
 8009d88:	095b      	lsrs	r3, r3, #5
 8009d8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d8e:	441e      	add	r6, r3
 8009d90:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d92:	4618      	mov	r0, r3
 8009d94:	f04f 0100 	mov.w	r1, #0
 8009d98:	4602      	mov	r2, r0
 8009d9a:	460b      	mov	r3, r1
 8009d9c:	1894      	adds	r4, r2, r2
 8009d9e:	603c      	str	r4, [r7, #0]
 8009da0:	415b      	adcs	r3, r3
 8009da2:	607b      	str	r3, [r7, #4]
 8009da4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009da8:	1812      	adds	r2, r2, r0
 8009daa:	eb41 0303 	adc.w	r3, r1, r3
 8009dae:	f04f 0400 	mov.w	r4, #0
 8009db2:	f04f 0500 	mov.w	r5, #0
 8009db6:	00dd      	lsls	r5, r3, #3
 8009db8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009dbc:	00d4      	lsls	r4, r2, #3
 8009dbe:	4622      	mov	r2, r4
 8009dc0:	462b      	mov	r3, r5
 8009dc2:	eb12 0a00 	adds.w	sl, r2, r0
 8009dc6:	eb43 0b01 	adc.w	fp, r3, r1
 8009dca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f04f 0100 	mov.w	r1, #0
 8009dd4:	f04f 0200 	mov.w	r2, #0
 8009dd8:	f04f 0300 	mov.w	r3, #0
 8009ddc:	008b      	lsls	r3, r1, #2
 8009dde:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009de2:	0082      	lsls	r2, r0, #2
 8009de4:	4650      	mov	r0, sl
 8009de6:	4659      	mov	r1, fp
 8009de8:	f7f6 ff6e 	bl	8000cc8 <__aeabi_uldivmod>
 8009dec:	4602      	mov	r2, r0
 8009dee:	460b      	mov	r3, r1
 8009df0:	4b0e      	ldr	r3, [pc, #56]	; (8009e2c <UART_SetConfig+0x38c>)
 8009df2:	fba3 1302 	umull	r1, r3, r3, r2
 8009df6:	095b      	lsrs	r3, r3, #5
 8009df8:	2164      	movs	r1, #100	; 0x64
 8009dfa:	fb01 f303 	mul.w	r3, r1, r3
 8009dfe:	1ad3      	subs	r3, r2, r3
 8009e00:	011b      	lsls	r3, r3, #4
 8009e02:	3332      	adds	r3, #50	; 0x32
 8009e04:	4a09      	ldr	r2, [pc, #36]	; (8009e2c <UART_SetConfig+0x38c>)
 8009e06:	fba2 2303 	umull	r2, r3, r2, r3
 8009e0a:	095b      	lsrs	r3, r3, #5
 8009e0c:	f003 020f 	and.w	r2, r3, #15
 8009e10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4432      	add	r2, r6
 8009e16:	609a      	str	r2, [r3, #8]
}
 8009e18:	bf00      	nop
 8009e1a:	377c      	adds	r7, #124	; 0x7c
 8009e1c:	46bd      	mov	sp, r7
 8009e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e22:	bf00      	nop
 8009e24:	40011000 	.word	0x40011000
 8009e28:	40011400 	.word	0x40011400
 8009e2c:	51eb851f 	.word	0x51eb851f

08009e30 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  const float32_t * pSrcA,
  const float32_t * pSrcB,
        uint32_t blockSize,
        float32_t * result)
{
 8009e30:	b480      	push	{r7}
 8009e32:	b087      	sub	sp, #28
 8009e34:	af00      	add	r7, sp, #0
 8009e36:	60f8      	str	r0, [r7, #12]
 8009e38:	60b9      	str	r1, [r7, #8]
 8009e3a:	607a      	str	r2, [r7, #4]
 8009e3c:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary return variable */
 8009e3e:	f04f 0300 	mov.w	r3, #0
 8009e42:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8009e48:	e014      	b.n	8009e74 <arm_dot_prod_f32+0x44>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 8009e4a:	68fb      	ldr	r3, [r7, #12]
 8009e4c:	1d1a      	adds	r2, r3, #4
 8009e4e:	60fa      	str	r2, [r7, #12]
 8009e50:	ed93 7a00 	vldr	s14, [r3]
 8009e54:	68bb      	ldr	r3, [r7, #8]
 8009e56:	1d1a      	adds	r2, r3, #4
 8009e58:	60ba      	str	r2, [r7, #8]
 8009e5a:	edd3 7a00 	vldr	s15, [r3]
 8009e5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e62:	ed97 7a04 	vldr	s14, [r7, #16]
 8009e66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e6a:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8009e6e:	697b      	ldr	r3, [r7, #20]
 8009e70:	3b01      	subs	r3, #1
 8009e72:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8009e74:	697b      	ldr	r3, [r7, #20]
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1e7      	bne.n	8009e4a <arm_dot_prod_f32+0x1a>
  }

  /* Store result in destination buffer */
  *result = sum;
 8009e7a:	683b      	ldr	r3, [r7, #0]
 8009e7c:	693a      	ldr	r2, [r7, #16]
 8009e7e:	601a      	str	r2, [r3, #0]
}
 8009e80:	bf00      	nop
 8009e82:	371c      	adds	r7, #28
 8009e84:	46bd      	mov	sp, r7
 8009e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e8a:	4770      	bx	lr

08009e8c <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8009e8c:	b480      	push	{r7}
 8009e8e:	b08b      	sub	sp, #44	; 0x2c
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
 8009e94:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	685b      	ldr	r3, [r3, #4]
 8009e9a:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8009e9c:	683b      	ldr	r3, [r7, #0]
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	881b      	ldrh	r3, [r3, #0]
 8009ea6:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8009ea8:	687b      	ldr	r3, [r7, #4]
 8009eaa:	885b      	ldrh	r3, [r3, #2]
 8009eac:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8009eae:	89fb      	ldrh	r3, [r7, #14]
 8009eb0:	61bb      	str	r3, [r7, #24]
 8009eb2:	2300      	movs	r3, #0
 8009eb4:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	009b      	lsls	r3, r3, #2
 8009eba:	693a      	ldr	r2, [r7, #16]
 8009ebc:	4413      	add	r3, r2
 8009ebe:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8009ec0:	89bb      	ldrh	r3, [r7, #12]
 8009ec2:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8009ec4:	e00d      	b.n	8009ee2 <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8009ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009ec8:	1d1a      	adds	r2, r3, #4
 8009eca:	627a      	str	r2, [r7, #36]	; 0x24
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	6a3b      	ldr	r3, [r7, #32]
 8009ed0:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8009ed2:	89fb      	ldrh	r3, [r7, #14]
 8009ed4:	009b      	lsls	r3, r3, #2
 8009ed6:	6a3a      	ldr	r2, [r7, #32]
 8009ed8:	4413      	add	r3, r2
 8009eda:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8009edc:	69fb      	ldr	r3, [r7, #28]
 8009ede:	3b01      	subs	r3, #1
 8009ee0:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8009ee2:	69fb      	ldr	r3, [r7, #28]
 8009ee4:	2b00      	cmp	r3, #0
 8009ee6:	d1ee      	bne.n	8009ec6 <arm_mat_trans_f32+0x3a>
      }

      i++;
 8009ee8:	697b      	ldr	r3, [r7, #20]
 8009eea:	3301      	adds	r3, #1
 8009eec:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8009eee:	69bb      	ldr	r3, [r7, #24]
 8009ef0:	3b01      	subs	r3, #1
 8009ef2:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8009ef4:	69bb      	ldr	r3, [r7, #24]
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d1dd      	bne.n	8009eb6 <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8009efa:	2300      	movs	r3, #0
 8009efc:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8009efe:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	372c      	adds	r7, #44	; 0x2c
 8009f06:	46bd      	mov	sp, r7
 8009f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0c:	4770      	bx	lr

08009f0e <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8009f0e:	b480      	push	{r7}
 8009f10:	b087      	sub	sp, #28
 8009f12:	af00      	add	r7, sp, #0
 8009f14:	60f8      	str	r0, [r7, #12]
 8009f16:	60b9      	str	r1, [r7, #8]
 8009f18:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8009f1a:	f04f 0300 	mov.w	r3, #0
 8009f1e:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8009f24:	e00d      	b.n	8009f42 <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	1d1a      	adds	r2, r3, #4
 8009f2a:	60fa      	str	r2, [r7, #12]
 8009f2c:	edd3 7a00 	vldr	s15, [r3]
 8009f30:	ed97 7a04 	vldr	s14, [r7, #16]
 8009f34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f38:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	3b01      	subs	r3, #1
 8009f40:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8009f42:	697b      	ldr	r3, [r7, #20]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d1ee      	bne.n	8009f26 <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	ee07 3a90 	vmov	s15, r3
 8009f4e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f52:	edd7 6a04 	vldr	s13, [r7, #16]
 8009f56:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	edc3 7a00 	vstr	s15, [r3]
}
 8009f60:	bf00      	nop
 8009f62:	371c      	adds	r7, #28
 8009f64:	46bd      	mov	sp, r7
 8009f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f6a:	4770      	bx	lr

08009f6c <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8009f6c:	b580      	push	{r7, lr}
 8009f6e:	b08a      	sub	sp, #40	; 0x28
 8009f70:	af00      	add	r7, sp, #0
 8009f72:	60f8      	str	r0, [r7, #12]
 8009f74:	60b9      	str	r1, [r7, #8]
 8009f76:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8009f78:	f04f 0300 	mov.w	r3, #0
 8009f7c:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8009f7e:	68bb      	ldr	r3, [r7, #8]
 8009f80:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8009f82:	e011      	b.n	8009fa8 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	1d1a      	adds	r2, r3, #4
 8009f88:	60fa      	str	r2, [r7, #12]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8009f8e:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009f96:	ed97 7a08 	vldr	s14, [r7, #32]
 8009f9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f9e:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8009fa2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fa4:	3b01      	subs	r3, #1
 8009fa6:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8009fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	d1ea      	bne.n	8009f84 <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8009fae:	68bb      	ldr	r3, [r7, #8]
 8009fb0:	ee07 3a90 	vmov	s15, r3
 8009fb4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009fb8:	edd7 6a08 	vldr	s13, [r7, #32]
 8009fbc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fc0:	edc7 7a06 	vstr	s15, [r7, #24]
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8009fc8:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fcc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fd4:	db09      	blt.n	8009fea <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 8009fd6:	ed97 0a06 	vldr	s0, [r7, #24]
 8009fda:	f00e fc29 	bl	8018830 <sqrtf>
 8009fde:	eef0 7a40 	vmov.f32	s15, s0
 8009fe2:	697b      	ldr	r3, [r7, #20]
 8009fe4:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8009fe8:	e004      	b.n	8009ff4 <arm_rms_f32+0x88>
      *pOut = 0.0f;
 8009fea:	697b      	ldr	r3, [r7, #20]
 8009fec:	f04f 0200 	mov.w	r2, #0
 8009ff0:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8009ff2:	bf00      	nop
}
 8009ff4:	bf00      	nop
 8009ff6:	3728      	adds	r7, #40	; 0x28
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	bd80      	pop	{r7, pc}

08009ffc <arm_q15_to_float>:
#else
void arm_q15_to_float(
  const q15_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	b087      	sub	sp, #28
 800a000:	af00      	add	r7, sp, #0
 800a002:	60f8      	str	r0, [r7, #12]
 800a004:	60b9      	str	r1, [r7, #8]
 800a006:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const q15_t *pIn = pSrc;                             /* Source pointer */
 800a008:	68fb      	ldr	r3, [r7, #12]
 800a00a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 800a010:	e014      	b.n	800a03c <arm_q15_to_float+0x40>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 800a012:	693b      	ldr	r3, [r7, #16]
 800a014:	1c9a      	adds	r2, r3, #2
 800a016:	613a      	str	r2, [r7, #16]
 800a018:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a01c:	ee07 3a90 	vmov	s15, r3
 800a020:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a024:	68bb      	ldr	r3, [r7, #8]
 800a026:	1d1a      	adds	r2, r3, #4
 800a028:	60ba      	str	r2, [r7, #8]
 800a02a:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a050 <arm_q15_to_float+0x54>
 800a02e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a032:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800a036:	697b      	ldr	r3, [r7, #20]
 800a038:	3b01      	subs	r3, #1
 800a03a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800a03c:	697b      	ldr	r3, [r7, #20]
 800a03e:	2b00      	cmp	r3, #0
 800a040:	d1e7      	bne.n	800a012 <arm_q15_to_float+0x16>
  }

}
 800a042:	bf00      	nop
 800a044:	bf00      	nop
 800a046:	371c      	adds	r7, #28
 800a048:	46bd      	mov	sp, r7
 800a04a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a04e:	4770      	bx	lr
 800a050:	47000000 	.word	0x47000000

0800a054 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800a054:	b480      	push	{r7}
 800a056:	b089      	sub	sp, #36	; 0x24
 800a058:	af00      	add	r7, sp, #0
 800a05a:	60f8      	str	r0, [r7, #12]
 800a05c:	460b      	mov	r3, r1
 800a05e:	607a      	str	r2, [r7, #4]
 800a060:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800a062:	2300      	movs	r3, #0
 800a064:	61fb      	str	r3, [r7, #28]
 800a066:	e043      	b.n	800a0f0 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800a068:	69fb      	ldr	r3, [r7, #28]
 800a06a:	005b      	lsls	r3, r3, #1
 800a06c:	687a      	ldr	r2, [r7, #4]
 800a06e:	4413      	add	r3, r2
 800a070:	881b      	ldrh	r3, [r3, #0]
 800a072:	089b      	lsrs	r3, r3, #2
 800a074:	b29b      	uxth	r3, r3
 800a076:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800a078:	69fb      	ldr	r3, [r7, #28]
 800a07a:	3301      	adds	r3, #1
 800a07c:	005b      	lsls	r3, r3, #1
 800a07e:	687a      	ldr	r2, [r7, #4]
 800a080:	4413      	add	r3, r2
 800a082:	881b      	ldrh	r3, [r3, #0]
 800a084:	089b      	lsrs	r3, r3, #2
 800a086:	b29b      	uxth	r3, r3
 800a088:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800a08a:	69bb      	ldr	r3, [r7, #24]
 800a08c:	009b      	lsls	r3, r3, #2
 800a08e:	68fa      	ldr	r2, [r7, #12]
 800a090:	4413      	add	r3, r2
 800a092:	681b      	ldr	r3, [r3, #0]
 800a094:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800a096:	697b      	ldr	r3, [r7, #20]
 800a098:	009b      	lsls	r3, r3, #2
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	441a      	add	r2, r3
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	009b      	lsls	r3, r3, #2
 800a0a2:	68f9      	ldr	r1, [r7, #12]
 800a0a4:	440b      	add	r3, r1
 800a0a6:	6812      	ldr	r2, [r2, #0]
 800a0a8:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800a0aa:	697b      	ldr	r3, [r7, #20]
 800a0ac:	009b      	lsls	r3, r3, #2
 800a0ae:	68fa      	ldr	r2, [r7, #12]
 800a0b0:	4413      	add	r3, r2
 800a0b2:	693a      	ldr	r2, [r7, #16]
 800a0b4:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	68fa      	ldr	r2, [r7, #12]
 800a0be:	4413      	add	r3, r2
 800a0c0:	681b      	ldr	r3, [r3, #0]
 800a0c2:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	441a      	add	r2, r3
 800a0ce:	69bb      	ldr	r3, [r7, #24]
 800a0d0:	3301      	adds	r3, #1
 800a0d2:	009b      	lsls	r3, r3, #2
 800a0d4:	68f9      	ldr	r1, [r7, #12]
 800a0d6:	440b      	add	r3, r1
 800a0d8:	6812      	ldr	r2, [r2, #0]
 800a0da:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800a0dc:	697b      	ldr	r3, [r7, #20]
 800a0de:	3301      	adds	r3, #1
 800a0e0:	009b      	lsls	r3, r3, #2
 800a0e2:	68fa      	ldr	r2, [r7, #12]
 800a0e4:	4413      	add	r3, r2
 800a0e6:	693a      	ldr	r2, [r7, #16]
 800a0e8:	601a      	str	r2, [r3, #0]

    i += 2;
 800a0ea:	69fb      	ldr	r3, [r7, #28]
 800a0ec:	3302      	adds	r3, #2
 800a0ee:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800a0f0:	897b      	ldrh	r3, [r7, #10]
 800a0f2:	69fa      	ldr	r2, [r7, #28]
 800a0f4:	429a      	cmp	r2, r3
 800a0f6:	d3b7      	bcc.n	800a068 <arm_bitreversal_32+0x14>
  }
}
 800a0f8:	bf00      	nop
 800a0fa:	bf00      	nop
 800a0fc:	3724      	adds	r7, #36	; 0x24
 800a0fe:	46bd      	mov	sp, r7
 800a100:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a104:	4770      	bx	lr

0800a106 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800a106:	b580      	push	{r7, lr}
 800a108:	b0a0      	sub	sp, #128	; 0x80
 800a10a:	af00      	add	r7, sp, #0
 800a10c:	6078      	str	r0, [r7, #4]
 800a10e:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	881b      	ldrh	r3, [r3, #0]
 800a114:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800a116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a118:	009b      	lsls	r3, r3, #2
 800a11a:	683a      	ldr	r2, [r7, #0]
 800a11c:	4413      	add	r3, r2
 800a11e:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	685b      	ldr	r3, [r3, #4]
 800a124:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 800a12a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a12c:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800a12e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a130:	085b      	lsrs	r3, r3, #1
 800a132:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800a134:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a136:	009b      	lsls	r3, r3, #2
 800a138:	683a      	ldr	r2, [r7, #0]
 800a13a:	4413      	add	r3, r2
 800a13c:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 800a13e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a140:	009b      	lsls	r3, r3, #2
 800a142:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a144:	4413      	add	r3, r2
 800a146:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800a148:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a14a:	089b      	lsrs	r3, r3, #2
 800a14c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a14e:	e1b6      	b.n	800a4be <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800a150:	683b      	ldr	r3, [r7, #0]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800a156:	683b      	ldr	r3, [r7, #0]
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 800a15c:	683b      	ldr	r3, [r7, #0]
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800a162:	683b      	ldr	r3, [r7, #0]
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 800a168:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800a16e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800a174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800a17a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800a180:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800a186:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800a18c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800a192:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800a198:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800a19e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1a0:	685b      	ldr	r3, [r3, #4]
 800a1a2:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800a1a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1a6:	689b      	ldr	r3, [r3, #8]
 800a1a8:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800a1aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a1ac:	68db      	ldr	r3, [r3, #12]
 800a1ae:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800a1b0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a1b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1b8:	683b      	ldr	r3, [r7, #0]
 800a1ba:	1d1a      	adds	r2, r3, #4
 800a1bc:	603a      	str	r2, [r7, #0]
 800a1be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1c2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800a1c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a1ca:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a1ce:	683b      	ldr	r3, [r7, #0]
 800a1d0:	1d1a      	adds	r2, r3, #4
 800a1d2:	603a      	str	r2, [r7, #0]
 800a1d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1d8:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800a1dc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a1e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	1d1a      	adds	r2, r3, #4
 800a1e8:	603a      	str	r2, [r7, #0]
 800a1ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1ee:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800a1f2:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a1f6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	1d1a      	adds	r2, r3, #4
 800a1fe:	603a      	str	r2, [r7, #0]
 800a200:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a204:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800a208:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a20c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a210:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a214:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 800a218:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a21c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a220:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a224:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 800a228:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a22c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a230:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a234:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800a238:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a23c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a240:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a244:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 800a248:	ed97 7a06 	vldr	s14, [r7, #24]
 800a24c:	edd7 7a02 	vldr	s15, [r7, #8]
 800a250:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a252:	1d1a      	adds	r2, r3, #4
 800a254:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a256:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a25a:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800a25e:	ed97 7a07 	vldr	s14, [r7, #28]
 800a262:	edd7 7a03 	vldr	s15, [r7, #12]
 800a266:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a268:	1d1a      	adds	r2, r3, #4
 800a26a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a26c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a270:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800a274:	ed97 7a08 	vldr	s14, [r7, #32]
 800a278:	edd7 7a04 	vldr	s15, [r7, #16]
 800a27c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a27e:	1d1a      	adds	r2, r3, #4
 800a280:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a282:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a286:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800a28a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a28e:	edd7 7a05 	vldr	s15, [r7, #20]
 800a292:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a294:	1d1a      	adds	r2, r3, #4
 800a296:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a298:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a29c:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800a2a0:	ed97 7a02 	vldr	s14, [r7, #8]
 800a2a4:	edd7 7a06 	vldr	s15, [r7, #24]
 800a2a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2ac:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800a2b0:	ed97 7a03 	vldr	s14, [r7, #12]
 800a2b4:	edd7 7a07 	vldr	s15, [r7, #28]
 800a2b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2bc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800a2c0:	ed97 7a04 	vldr	s14, [r7, #16]
 800a2c4:	edd7 7a08 	vldr	s15, [r7, #32]
 800a2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2cc:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800a2d0:	ed97 7a05 	vldr	s14, [r7, #20]
 800a2d4:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a2d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2dc:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800a2e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2e2:	1d1a      	adds	r2, r3, #4
 800a2e4:	673a      	str	r2, [r7, #112]	; 0x70
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800a2ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2ec:	1d1a      	adds	r2, r3, #4
 800a2ee:	673a      	str	r2, [r7, #112]	; 0x70
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800a2f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2f8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a2fc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a300:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800a304:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a308:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a30c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a310:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800a314:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a318:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a31c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a320:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800a324:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a328:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a32c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a330:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800a334:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a336:	1d1a      	adds	r2, r3, #4
 800a338:	677a      	str	r2, [r7, #116]	; 0x74
 800a33a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a33e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a342:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a346:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800a34a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a34c:	1d1a      	adds	r2, r3, #4
 800a34e:	677a      	str	r2, [r7, #116]	; 0x74
 800a350:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a354:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a358:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a35c:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800a360:	edd7 7a02 	vldr	s15, [r7, #8]
 800a364:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a368:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a36c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800a370:	edd7 7a03 	vldr	s15, [r7, #12]
 800a374:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a378:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a37c:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800a380:	edd7 7a03 	vldr	s15, [r7, #12]
 800a384:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a388:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a38c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800a390:	edd7 7a02 	vldr	s15, [r7, #8]
 800a394:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a39c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800a3a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3a2:	1d1a      	adds	r2, r3, #4
 800a3a4:	67ba      	str	r2, [r7, #120]	; 0x78
 800a3a6:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a3aa:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a3ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3b2:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800a3b6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3b8:	1d1a      	adds	r2, r3, #4
 800a3ba:	67ba      	str	r2, [r7, #120]	; 0x78
 800a3bc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a3c0:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a3c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3c8:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800a3cc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3ce:	1d1a      	adds	r2, r3, #4
 800a3d0:	673a      	str	r2, [r7, #112]	; 0x70
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800a3d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3d8:	1d1a      	adds	r2, r3, #4
 800a3da:	673a      	str	r2, [r7, #112]	; 0x70
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800a3e0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a3e4:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a3e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3ec:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800a3f0:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a3f4:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a3f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3fc:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800a400:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a404:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a408:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a40c:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800a410:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a414:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a418:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a41c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 800a420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a422:	1d1a      	adds	r2, r3, #4
 800a424:	677a      	str	r2, [r7, #116]	; 0x74
 800a426:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a42a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a42e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a432:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800a436:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a438:	1d1a      	adds	r2, r3, #4
 800a43a:	677a      	str	r2, [r7, #116]	; 0x74
 800a43c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a440:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a444:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a448:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800a44c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a450:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a454:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a458:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 800a45c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a460:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a464:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a468:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 800a46c:	edd7 7a05 	vldr	s15, [r7, #20]
 800a470:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a474:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a478:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 800a47c:	edd7 7a04 	vldr	s15, [r7, #16]
 800a480:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a484:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a488:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800a48c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a48e:	1d1a      	adds	r2, r3, #4
 800a490:	67ba      	str	r2, [r7, #120]	; 0x78
 800a492:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a496:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a49a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a49e:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800a4a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a4a4:	1d1a      	adds	r2, r3, #4
 800a4a6:	67ba      	str	r2, [r7, #120]	; 0x78
 800a4a8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a4ac:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a4b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a4b4:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800a4b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4ba:	3b01      	subs	r3, #1
 800a4bc:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	f47f ae45 	bne.w	800a150 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800a4c6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4c8:	b299      	uxth	r1, r3
 800a4ca:	687b      	ldr	r3, [r7, #4]
 800a4cc:	685a      	ldr	r2, [r3, #4]
 800a4ce:	2302      	movs	r3, #2
 800a4d0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a4d2:	f000 ffc3 	bl	800b45c <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800a4d6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4d8:	b299      	uxth	r1, r3
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	685a      	ldr	r2, [r3, #4]
 800a4de:	2302      	movs	r3, #2
 800a4e0:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a4e2:	f000 ffbb 	bl	800b45c <arm_radix8_butterfly_f32>
}
 800a4e6:	bf00      	nop
 800a4e8:	3780      	adds	r7, #128	; 0x80
 800a4ea:	46bd      	mov	sp, r7
 800a4ec:	bd80      	pop	{r7, pc}

0800a4ee <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800a4ee:	b580      	push	{r7, lr}
 800a4f0:	b0ac      	sub	sp, #176	; 0xb0
 800a4f2:	af00      	add	r7, sp, #0
 800a4f4:	6078      	str	r0, [r7, #4]
 800a4f6:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	881b      	ldrh	r3, [r3, #0]
 800a4fc:	085b      	lsrs	r3, r3, #1
 800a4fe:	b29b      	uxth	r3, r3
 800a500:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800a504:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a508:	009b      	lsls	r3, r3, #2
 800a50a:	683a      	ldr	r2, [r7, #0]
 800a50c:	4413      	add	r3, r2
 800a50e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800a512:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a516:	009b      	lsls	r3, r3, #2
 800a518:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a51c:	4413      	add	r3, r2
 800a51e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800a522:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a52c:	4413      	add	r3, r2
 800a52e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800a532:	683b      	ldr	r3, [r7, #0]
 800a534:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800a536:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a53a:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800a53c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a540:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800a542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a546:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800a548:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a54c:	3b04      	subs	r3, #4
 800a54e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800a552:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a556:	3b04      	subs	r3, #4
 800a558:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800a55c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a560:	3b04      	subs	r3, #4
 800a562:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800a566:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a570:	4413      	add	r3, r2
 800a572:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	685b      	ldr	r3, [r3, #4]
 800a57a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a57e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a582:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a586:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a58a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800a58e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a592:	085b      	lsrs	r3, r3, #1
 800a594:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800a598:	2302      	movs	r3, #2
 800a59a:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800a59c:	2304      	movs	r3, #4
 800a59e:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800a5a0:	2306      	movs	r3, #6
 800a5a2:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800a5a4:	683b      	ldr	r3, [r7, #0]
 800a5a6:	ed93 7a00 	vldr	s14, [r3]
 800a5aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ae:	edd3 7a00 	vldr	s15, [r3]
 800a5b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5b6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800a5ba:	683b      	ldr	r3, [r7, #0]
 800a5bc:	ed93 7a00 	vldr	s14, [r3]
 800a5c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5c4:	edd3 7a00 	vldr	s15, [r3]
 800a5c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5cc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800a5d0:	683b      	ldr	r3, [r7, #0]
 800a5d2:	3304      	adds	r3, #4
 800a5d4:	ed93 7a00 	vldr	s14, [r3]
 800a5d8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5dc:	3304      	adds	r3, #4
 800a5de:	edd3 7a00 	vldr	s15, [r3]
 800a5e2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5e6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	3304      	adds	r3, #4
 800a5ee:	ed93 7a00 	vldr	s14, [r3]
 800a5f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5f6:	3304      	adds	r3, #4
 800a5f8:	edd3 7a00 	vldr	s15, [r3]
 800a5fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a600:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a604:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a608:	3304      	adds	r3, #4
 800a60a:	ed93 7a00 	vldr	s14, [r3]
 800a60e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a612:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a616:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a61a:	3304      	adds	r3, #4
 800a61c:	edd3 7a00 	vldr	s15, [r3]
 800a620:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a624:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a628:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a62c:	edd3 7a00 	vldr	s15, [r3]
 800a630:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a634:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a638:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a63c:	edd3 7a00 	vldr	s15, [r3]
 800a640:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a644:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a648:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a64c:	edd3 7a00 	vldr	s15, [r3]
 800a650:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a654:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a658:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a65c:	edd3 7a00 	vldr	s15, [r3]
 800a660:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a664:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a668:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a66c:	3304      	adds	r3, #4
 800a66e:	edd3 7a00 	vldr	s15, [r3]
 800a672:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a676:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a67a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a67e:	3304      	adds	r3, #4
 800a680:	edd3 7a00 	vldr	s15, [r3]
 800a684:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a688:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a68c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a690:	3304      	adds	r3, #4
 800a692:	edd3 7a00 	vldr	s15, [r3]
 800a696:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a69a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a69e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6a2:	3304      	adds	r3, #4
 800a6a4:	edd3 7a00 	vldr	s15, [r3]
 800a6a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6ac:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a6b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6b4:	ed93 7a00 	vldr	s14, [r3]
 800a6b8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a6bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6c4:	edd3 7a00 	vldr	s15, [r3]
 800a6c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6cc:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a6d0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6d4:	ed93 7a00 	vldr	s14, [r3]
 800a6d8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a6dc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6e4:	edd3 7a00 	vldr	s15, [r3]
 800a6e8:	683b      	ldr	r3, [r7, #0]
 800a6ea:	1d1a      	adds	r2, r3, #4
 800a6ec:	603a      	str	r2, [r7, #0]
 800a6ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6f2:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a6f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6fa:	3304      	adds	r3, #4
 800a6fc:	ed93 7a00 	vldr	s14, [r3]
 800a700:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a704:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a708:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a70c:	3304      	adds	r3, #4
 800a70e:	edd3 7a00 	vldr	s15, [r3]
 800a712:	683b      	ldr	r3, [r7, #0]
 800a714:	1d1a      	adds	r2, r3, #4
 800a716:	603a      	str	r2, [r7, #0]
 800a718:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a71c:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800a720:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a724:	1d1a      	adds	r2, r3, #4
 800a726:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a72a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a72c:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800a72e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a732:	1d1a      	adds	r2, r3, #4
 800a734:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a738:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a73a:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800a73c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a740:	1d1a      	adds	r2, r3, #4
 800a742:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a746:	69fa      	ldr	r2, [r7, #28]
 800a748:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800a74a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a74e:	1d1a      	adds	r2, r3, #4
 800a750:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a754:	6a3a      	ldr	r2, [r7, #32]
 800a756:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800a758:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a75c:	1d1a      	adds	r2, r3, #4
 800a75e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a762:	68fa      	ldr	r2, [r7, #12]
 800a764:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800a766:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a76a:	1d1a      	adds	r2, r3, #4
 800a76c:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a770:	693a      	ldr	r2, [r7, #16]
 800a772:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800a774:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a776:	009b      	lsls	r3, r3, #2
 800a778:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a77c:	4413      	add	r3, r2
 800a77e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800a782:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a784:	009b      	lsls	r3, r3, #2
 800a786:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a78a:	4413      	add	r3, r2
 800a78c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800a790:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a792:	009b      	lsls	r3, r3, #2
 800a794:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a798:	4413      	add	r3, r2
 800a79a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800a79e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a7a2:	3b02      	subs	r3, #2
 800a7a4:	085b      	lsrs	r3, r3, #1
 800a7a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a7aa:	e31a      	b.n	800ade2 <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800a7ac:	683b      	ldr	r3, [r7, #0]
 800a7ae:	ed93 7a00 	vldr	s14, [r3]
 800a7b2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7b6:	edd3 7a00 	vldr	s15, [r3]
 800a7ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7be:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800a7c2:	683b      	ldr	r3, [r7, #0]
 800a7c4:	ed93 7a00 	vldr	s14, [r3]
 800a7c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7cc:	edd3 7a00 	vldr	s15, [r3]
 800a7d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7d4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800a7d8:	683b      	ldr	r3, [r7, #0]
 800a7da:	3304      	adds	r3, #4
 800a7dc:	ed93 7a00 	vldr	s14, [r3]
 800a7e0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7e4:	3304      	adds	r3, #4
 800a7e6:	edd3 7a00 	vldr	s15, [r3]
 800a7ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7ee:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800a7f2:	683b      	ldr	r3, [r7, #0]
 800a7f4:	3304      	adds	r3, #4
 800a7f6:	ed93 7a00 	vldr	s14, [r3]
 800a7fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7fe:	3304      	adds	r3, #4
 800a800:	edd3 7a00 	vldr	s15, [r3]
 800a804:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a808:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a80c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a810:	3304      	adds	r3, #4
 800a812:	ed93 7a00 	vldr	s14, [r3]
 800a816:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a81a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a81e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a822:	3304      	adds	r3, #4
 800a824:	edd3 7a00 	vldr	s15, [r3]
 800a828:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a82c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a830:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a834:	edd3 7a00 	vldr	s15, [r3]
 800a838:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a83c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a840:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a844:	edd3 7a00 	vldr	s15, [r3]
 800a848:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a84c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a850:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a854:	edd3 7a00 	vldr	s15, [r3]
 800a858:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a85c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a864:	edd3 7a00 	vldr	s15, [r3]
 800a868:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a86c:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a870:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a874:	3304      	adds	r3, #4
 800a876:	edd3 7a00 	vldr	s15, [r3]
 800a87a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a87e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a886:	3304      	adds	r3, #4
 800a888:	edd3 7a00 	vldr	s15, [r3]
 800a88c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a890:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a894:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a898:	3304      	adds	r3, #4
 800a89a:	edd3 7a00 	vldr	s15, [r3]
 800a89e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a8a2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a8a6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8aa:	3304      	adds	r3, #4
 800a8ac:	edd3 7a00 	vldr	s15, [r3]
 800a8b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8b4:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a8b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8bc:	ed93 7a00 	vldr	s14, [r3]
 800a8c0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a8c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8cc:	edd3 7a00 	vldr	s15, [r3]
 800a8d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8d4:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a8d8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8dc:	ed93 7a00 	vldr	s14, [r3]
 800a8e0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a8e4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8ec:	edd3 7a00 	vldr	s15, [r3]
 800a8f0:	683b      	ldr	r3, [r7, #0]
 800a8f2:	1d1a      	adds	r2, r3, #4
 800a8f4:	603a      	str	r2, [r7, #0]
 800a8f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8fa:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a8fe:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a902:	3304      	adds	r3, #4
 800a904:	ed93 7a00 	vldr	s14, [r3]
 800a908:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a90c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a910:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a914:	3304      	adds	r3, #4
 800a916:	edd3 7a00 	vldr	s15, [r3]
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	1d1a      	adds	r2, r3, #4
 800a91e:	603a      	str	r2, [r7, #0]
 800a920:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a924:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800a928:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a92c:	3b04      	subs	r3, #4
 800a92e:	ed93 7a00 	vldr	s14, [r3]
 800a932:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a936:	3b04      	subs	r3, #4
 800a938:	edd3 7a00 	vldr	s15, [r3]
 800a93c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a940:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800a944:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a948:	3b04      	subs	r3, #4
 800a94a:	ed93 7a00 	vldr	s14, [r3]
 800a94e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a952:	3b04      	subs	r3, #4
 800a954:	edd3 7a00 	vldr	s15, [r3]
 800a958:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a95c:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800a960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a964:	ed93 7a00 	vldr	s14, [r3]
 800a968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a96c:	edd3 7a00 	vldr	s15, [r3]
 800a970:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a974:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800a978:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a97c:	ed93 7a00 	vldr	s14, [r3]
 800a980:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a984:	edd3 7a00 	vldr	s15, [r3]
 800a988:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a98c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800a990:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a994:	ed93 7a00 	vldr	s14, [r3]
 800a998:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a99c:	edd3 7a00 	vldr	s15, [r3]
 800a9a0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9a4:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a9a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9ac:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800a9b0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a9b4:	ed93 7a00 	vldr	s14, [r3]
 800a9b8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9bc:	edd3 7a00 	vldr	s15, [r3]
 800a9c0:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9c4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9c8:	3b04      	subs	r3, #4
 800a9ca:	edd3 7a00 	vldr	s15, [r3]
 800a9ce:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9d6:	3b04      	subs	r3, #4
 800a9d8:	edd3 7a00 	vldr	s15, [r3]
 800a9dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9e0:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800a9e4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9e8:	3b04      	subs	r3, #4
 800a9ea:	edd3 7a00 	vldr	s15, [r3]
 800a9ee:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a9f2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9fa:	3b04      	subs	r3, #4
 800a9fc:	edd3 7a00 	vldr	s15, [r3]
 800aa00:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa04:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800aa08:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa0c:	edd3 7a00 	vldr	s15, [r3]
 800aa10:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800aa14:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa1c:	edd3 7a00 	vldr	s15, [r3]
 800aa20:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa24:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800aa28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa2c:	ed93 7a00 	vldr	s14, [r3]
 800aa30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa34:	edd3 7a00 	vldr	s15, [r3]
 800aa38:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa3c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800aa40:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa44:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800aa48:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa4c:	3b04      	subs	r3, #4
 800aa4e:	ed93 7a00 	vldr	s14, [r3]
 800aa52:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa56:	3b04      	subs	r3, #4
 800aa58:	edd3 7a00 	vldr	s15, [r3]
 800aa5c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa60:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800aa64:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa68:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800aa6c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa70:	ed93 7a00 	vldr	s14, [r3]
 800aa74:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aa78:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa80:	edd3 7a00 	vldr	s15, [r3]
 800aa84:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa88:	1f1a      	subs	r2, r3, #4
 800aa8a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa8e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa92:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800aa96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa9a:	3b04      	subs	r3, #4
 800aa9c:	ed93 7a00 	vldr	s14, [r3]
 800aaa0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800aaa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aaa8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aaac:	3b04      	subs	r3, #4
 800aaae:	edd3 7a00 	vldr	s15, [r3]
 800aab2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aab6:	1f1a      	subs	r2, r3, #4
 800aab8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aabc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aac0:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800aac4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aac8:	1d1a      	adds	r2, r3, #4
 800aaca:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800aad2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aad6:	1d1a      	adds	r2, r3, #4
 800aad8:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800aae0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aae4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800aae8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaec:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800aaf0:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aaf4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800aaf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aafc:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800ab00:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800ab04:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ab08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab0c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800ab10:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800ab14:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab1c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800ab20:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab24:	1d1a      	adds	r2, r3, #4
 800ab26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ab2a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ab2e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ab32:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab36:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800ab3a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab3e:	1d1a      	adds	r2, r3, #4
 800ab40:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ab44:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ab48:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ab4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab50:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800ab54:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ab58:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab60:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800ab64:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab68:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ab6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab70:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800ab74:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab78:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab80:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800ab84:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ab88:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ab8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab90:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800ab94:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab98:	1f1a      	subs	r2, r3, #4
 800ab9a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab9e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800aba2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800aba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800abaa:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800abae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800abb2:	1f1a      	subs	r2, r3, #4
 800abb4:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800abb8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800abbc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800abc0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abc4:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800abc8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abcc:	681b      	ldr	r3, [r3, #0]
 800abce:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800abd0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abd4:	685b      	ldr	r3, [r3, #4]
 800abd6:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800abd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abda:	009b      	lsls	r3, r3, #2
 800abdc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800abe0:	4413      	add	r3, r2
 800abe2:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800abe6:	edd7 7a07 	vldr	s15, [r7, #28]
 800abea:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800abee:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abf2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800abf6:	edd7 7a08 	vldr	s15, [r7, #32]
 800abfa:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800abfe:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac02:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800ac06:	edd7 7a08 	vldr	s15, [r7, #32]
 800ac0a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ac0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac12:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800ac16:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac1a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ac1e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac22:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800ac26:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac2a:	1d1a      	adds	r2, r3, #4
 800ac2c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac30:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ac34:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ac38:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac3c:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800ac40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac44:	1d1a      	adds	r2, r3, #4
 800ac46:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac4a:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ac4e:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ac52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac56:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800ac5a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac5e:	eef1 7a67 	vneg.f32	s15, s15
 800ac62:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ac66:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac6a:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 800ac6e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ac72:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ac76:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac7a:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 800ac7e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ac82:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ac86:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac8a:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 800ac8e:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac92:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ac96:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac9a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800ac9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aca2:	1f1a      	subs	r2, r3, #4
 800aca4:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aca8:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800acac:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800acb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acb4:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800acb8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800acbc:	1f1a      	subs	r2, r3, #4
 800acbe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800acc2:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800acc6:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800acca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acce:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800acd2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800acd6:	681b      	ldr	r3, [r3, #0]
 800acd8:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800acda:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800acde:	685b      	ldr	r3, [r3, #4]
 800ace0:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800ace2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ace4:	009b      	lsls	r3, r3, #2
 800ace6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800acea:	4413      	add	r3, r2
 800acec:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800acf0:	edd7 7a03 	vldr	s15, [r7, #12]
 800acf4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800acf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acfc:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800ad00:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad04:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ad08:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad0c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800ad10:	edd7 7a04 	vldr	s15, [r7, #16]
 800ad14:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ad18:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad1c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800ad20:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad24:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ad28:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad2c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800ad30:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad34:	1d1a      	adds	r2, r3, #4
 800ad36:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ad3a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ad3e:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ad42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad46:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800ad4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad4e:	1d1a      	adds	r2, r3, #4
 800ad50:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ad54:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad58:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ad5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad60:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800ad64:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad68:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ad6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad70:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800ad74:	edd7 7a05 	vldr	s15, [r7, #20]
 800ad78:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ad7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad80:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800ad84:	edd7 7a05 	vldr	s15, [r7, #20]
 800ad88:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ad8c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad90:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800ad94:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad98:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ad9c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ada0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800ada4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ada8:	1f1a      	subs	r2, r3, #4
 800adaa:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800adae:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800adb2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800adb6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adba:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800adbe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800adc2:	1f1a      	subs	r2, r3, #4
 800adc4:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800adc8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800adcc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800add0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800add4:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800add8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800addc:	3b01      	subs	r3, #1
 800adde:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ade2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	f47f ace0 	bne.w	800a7ac <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800adec:	683b      	ldr	r3, [r7, #0]
 800adee:	ed93 7a00 	vldr	s14, [r3]
 800adf2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adf6:	edd3 7a00 	vldr	s15, [r3]
 800adfa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adfe:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800ae02:	683b      	ldr	r3, [r7, #0]
 800ae04:	ed93 7a00 	vldr	s14, [r3]
 800ae08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae0c:	edd3 7a00 	vldr	s15, [r3]
 800ae10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae14:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800ae18:	683b      	ldr	r3, [r7, #0]
 800ae1a:	3304      	adds	r3, #4
 800ae1c:	ed93 7a00 	vldr	s14, [r3]
 800ae20:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae24:	3304      	adds	r3, #4
 800ae26:	edd3 7a00 	vldr	s15, [r3]
 800ae2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae2e:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800ae32:	683b      	ldr	r3, [r7, #0]
 800ae34:	3304      	adds	r3, #4
 800ae36:	ed93 7a00 	vldr	s14, [r3]
 800ae3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae3e:	3304      	adds	r3, #4
 800ae40:	edd3 7a00 	vldr	s15, [r3]
 800ae44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae48:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800ae4c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae50:	3304      	adds	r3, #4
 800ae52:	ed93 7a00 	vldr	s14, [r3]
 800ae56:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ae5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae5e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae62:	3304      	adds	r3, #4
 800ae64:	edd3 7a00 	vldr	s15, [r3]
 800ae68:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae6c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800ae70:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae74:	edd3 7a00 	vldr	s15, [r3]
 800ae78:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ae7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae80:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae84:	edd3 7a00 	vldr	s15, [r3]
 800ae88:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae8c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800ae90:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae94:	edd3 7a00 	vldr	s15, [r3]
 800ae98:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800ae9c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aea4:	edd3 7a00 	vldr	s15, [r3]
 800aea8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeac:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800aeb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aeb4:	3304      	adds	r3, #4
 800aeb6:	edd3 7a00 	vldr	s15, [r3]
 800aeba:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800aebe:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aec2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aec6:	3304      	adds	r3, #4
 800aec8:	edd3 7a00 	vldr	s15, [r3]
 800aecc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aed0:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800aed4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aed8:	3304      	adds	r3, #4
 800aeda:	edd3 7a00 	vldr	s15, [r3]
 800aede:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800aee2:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aee6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aeea:	3304      	adds	r3, #4
 800aeec:	edd3 7a00 	vldr	s15, [r3]
 800aef0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aef4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800aef8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aefc:	ed93 7a00 	vldr	s14, [r3]
 800af00:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800af04:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af08:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af0c:	edd3 7a00 	vldr	s15, [r3]
 800af10:	ee77 7a67 	vsub.f32	s15, s14, s15
 800af14:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800af18:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af1c:	ed93 7a00 	vldr	s14, [r3]
 800af20:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800af24:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af28:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af2c:	edd3 7a00 	vldr	s15, [r3]
 800af30:	683b      	ldr	r3, [r7, #0]
 800af32:	1d1a      	adds	r2, r3, #4
 800af34:	603a      	str	r2, [r7, #0]
 800af36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af3a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800af3e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af42:	3304      	adds	r3, #4
 800af44:	ed93 7a00 	vldr	s14, [r3]
 800af48:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800af4c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af50:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af54:	3304      	adds	r3, #4
 800af56:	edd3 7a00 	vldr	s15, [r3]
 800af5a:	683b      	ldr	r3, [r7, #0]
 800af5c:	1d1a      	adds	r2, r3, #4
 800af5e:	603a      	str	r2, [r7, #0]
 800af60:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af64:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800af68:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800af70:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af74:	685b      	ldr	r3, [r3, #4]
 800af76:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800af78:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800af7c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800af80:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af84:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800af88:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800af8c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800af90:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af94:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800af98:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800af9c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800afa0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afa4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800afa8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800afac:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800afb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800afb4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800afb8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afbc:	1d1a      	adds	r2, r3, #4
 800afbe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800afc2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800afc6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800afca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afce:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800afd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afd6:	1d1a      	adds	r2, r3, #4
 800afd8:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800afdc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800afe0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800afe4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afe8:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800afec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aff0:	681b      	ldr	r3, [r3, #0]
 800aff2:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800aff4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800aff8:	685b      	ldr	r3, [r3, #4]
 800affa:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800affc:	edd7 7a07 	vldr	s15, [r7, #28]
 800b000:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b004:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b008:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800b00c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b010:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b014:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b018:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800b01c:	edd7 7a08 	vldr	s15, [r7, #32]
 800b020:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b024:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b028:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800b02c:	edd7 7a07 	vldr	s15, [r7, #28]
 800b030:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b034:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b038:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800b03c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b040:	1d1a      	adds	r2, r3, #4
 800b042:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b046:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b04a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b04e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b052:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800b056:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b05a:	1d1a      	adds	r2, r3, #4
 800b05c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b060:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b064:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b06c:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800b070:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b074:	681b      	ldr	r3, [r3, #0]
 800b076:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800b078:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b07c:	685b      	ldr	r3, [r3, #4]
 800b07e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800b080:	edd7 7a03 	vldr	s15, [r7, #12]
 800b084:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b088:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b08c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800b090:	edd7 7a04 	vldr	s15, [r7, #16]
 800b094:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b09c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800b0a0:	edd7 7a04 	vldr	s15, [r7, #16]
 800b0a4:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b0a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0ac:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800b0b0:	edd7 7a03 	vldr	s15, [r7, #12]
 800b0b4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b0b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0bc:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800b0c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0c4:	1d1a      	adds	r2, r3, #4
 800b0c6:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b0ca:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b0ce:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b0d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0d6:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800b0da:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0de:	1d1a      	adds	r2, r3, #4
 800b0e0:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b0e4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b0e8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b0ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0f0:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800b0f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0f8:	b299      	uxth	r1, r3
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	685a      	ldr	r2, [r3, #4]
 800b0fe:	2304      	movs	r3, #4
 800b100:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b102:	f000 f9ab 	bl	800b45c <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800b106:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b10a:	b299      	uxth	r1, r3
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	685a      	ldr	r2, [r3, #4]
 800b110:	2304      	movs	r3, #4
 800b112:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b114:	f000 f9a2 	bl	800b45c <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800b118:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b11c:	b299      	uxth	r1, r3
 800b11e:	687b      	ldr	r3, [r7, #4]
 800b120:	685a      	ldr	r2, [r3, #4]
 800b122:	2304      	movs	r3, #4
 800b124:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b126:	f000 f999 	bl	800b45c <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 800b12a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b12e:	b299      	uxth	r1, r3
 800b130:	687b      	ldr	r3, [r7, #4]
 800b132:	685a      	ldr	r2, [r3, #4]
 800b134:	2304      	movs	r3, #4
 800b136:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b138:	f000 f990 	bl	800b45c <arm_radix8_butterfly_f32>
}
 800b13c:	bf00      	nop
 800b13e:	37b0      	adds	r7, #176	; 0xb0
 800b140:	46bd      	mov	sp, r7
 800b142:	bd80      	pop	{r7, pc}

0800b144 <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b088      	sub	sp, #32
 800b148:	af00      	add	r7, sp, #0
 800b14a:	60f8      	str	r0, [r7, #12]
 800b14c:	60b9      	str	r1, [r7, #8]
 800b14e:	4611      	mov	r1, r2
 800b150:	461a      	mov	r2, r3
 800b152:	460b      	mov	r3, r1
 800b154:	71fb      	strb	r3, [r7, #7]
 800b156:	4613      	mov	r3, r2
 800b158:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 800b15a:	68fb      	ldr	r3, [r7, #12]
 800b15c:	881b      	ldrh	r3, [r3, #0]
 800b15e:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800b160:	79fb      	ldrb	r3, [r7, #7]
 800b162:	2b01      	cmp	r3, #1
 800b164:	d117      	bne.n	800b196 <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800b166:	68bb      	ldr	r3, [r7, #8]
 800b168:	3304      	adds	r3, #4
 800b16a:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800b16c:	2300      	movs	r3, #0
 800b16e:	61fb      	str	r3, [r7, #28]
 800b170:	e00d      	b.n	800b18e <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800b172:	69bb      	ldr	r3, [r7, #24]
 800b174:	edd3 7a00 	vldr	s15, [r3]
 800b178:	eef1 7a67 	vneg.f32	s15, s15
 800b17c:	69bb      	ldr	r3, [r7, #24]
 800b17e:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800b182:	69bb      	ldr	r3, [r7, #24]
 800b184:	3308      	adds	r3, #8
 800b186:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800b188:	69fb      	ldr	r3, [r7, #28]
 800b18a:	3301      	adds	r3, #1
 800b18c:	61fb      	str	r3, [r7, #28]
 800b18e:	69fa      	ldr	r2, [r7, #28]
 800b190:	697b      	ldr	r3, [r7, #20]
 800b192:	429a      	cmp	r2, r3
 800b194:	d3ed      	bcc.n	800b172 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b19c:	d040      	beq.n	800b220 <arm_cfft_f32+0xdc>
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b1a4:	d845      	bhi.n	800b232 <arm_cfft_f32+0xee>
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1ac:	d033      	beq.n	800b216 <arm_cfft_f32+0xd2>
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b1b4:	d83d      	bhi.n	800b232 <arm_cfft_f32+0xee>
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1bc:	d026      	beq.n	800b20c <arm_cfft_f32+0xc8>
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1c4:	d835      	bhi.n	800b232 <arm_cfft_f32+0xee>
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1cc:	d028      	beq.n	800b220 <arm_cfft_f32+0xdc>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1d4:	d82d      	bhi.n	800b232 <arm_cfft_f32+0xee>
 800b1d6:	697b      	ldr	r3, [r7, #20]
 800b1d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1dc:	d01b      	beq.n	800b216 <arm_cfft_f32+0xd2>
 800b1de:	697b      	ldr	r3, [r7, #20]
 800b1e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1e4:	d825      	bhi.n	800b232 <arm_cfft_f32+0xee>
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b80      	cmp	r3, #128	; 0x80
 800b1ea:	d00f      	beq.n	800b20c <arm_cfft_f32+0xc8>
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2b80      	cmp	r3, #128	; 0x80
 800b1f0:	d81f      	bhi.n	800b232 <arm_cfft_f32+0xee>
 800b1f2:	697b      	ldr	r3, [r7, #20]
 800b1f4:	2b40      	cmp	r3, #64	; 0x40
 800b1f6:	d013      	beq.n	800b220 <arm_cfft_f32+0xdc>
 800b1f8:	697b      	ldr	r3, [r7, #20]
 800b1fa:	2b40      	cmp	r3, #64	; 0x40
 800b1fc:	d819      	bhi.n	800b232 <arm_cfft_f32+0xee>
 800b1fe:	697b      	ldr	r3, [r7, #20]
 800b200:	2b10      	cmp	r3, #16
 800b202:	d003      	beq.n	800b20c <arm_cfft_f32+0xc8>
 800b204:	697b      	ldr	r3, [r7, #20]
 800b206:	2b20      	cmp	r3, #32
 800b208:	d005      	beq.n	800b216 <arm_cfft_f32+0xd2>
 800b20a:	e012      	b.n	800b232 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800b20c:	68b9      	ldr	r1, [r7, #8]
 800b20e:	68f8      	ldr	r0, [r7, #12]
 800b210:	f7fe ff79 	bl	800a106 <arm_cfft_radix8by2_f32>
    break;
 800b214:	e00d      	b.n	800b232 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800b216:	68b9      	ldr	r1, [r7, #8]
 800b218:	68f8      	ldr	r0, [r7, #12]
 800b21a:	f7ff f968 	bl	800a4ee <arm_cfft_radix8by4_f32>
    break;
 800b21e:	e008      	b.n	800b232 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800b220:	697b      	ldr	r3, [r7, #20]
 800b222:	b299      	uxth	r1, r3
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	685a      	ldr	r2, [r3, #4]
 800b228:	2301      	movs	r3, #1
 800b22a:	68b8      	ldr	r0, [r7, #8]
 800b22c:	f000 f916 	bl	800b45c <arm_radix8_butterfly_f32>
    break;
 800b230:	bf00      	nop
  }

  if ( bitReverseFlag )
 800b232:	79bb      	ldrb	r3, [r7, #6]
 800b234:	2b00      	cmp	r3, #0
 800b236:	d007      	beq.n	800b248 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800b238:	68fb      	ldr	r3, [r7, #12]
 800b23a:	8999      	ldrh	r1, [r3, #12]
 800b23c:	68fb      	ldr	r3, [r7, #12]
 800b23e:	689b      	ldr	r3, [r3, #8]
 800b240:	461a      	mov	r2, r3
 800b242:	68b8      	ldr	r0, [r7, #8]
 800b244:	f7fe ff06 	bl	800a054 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800b248:	79fb      	ldrb	r3, [r7, #7]
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	d130      	bne.n	800b2b0 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800b24e:	697b      	ldr	r3, [r7, #20]
 800b250:	ee07 3a90 	vmov	s15, r3
 800b254:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b258:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b25c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b260:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800b264:	68bb      	ldr	r3, [r7, #8]
 800b266:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800b268:	2300      	movs	r3, #0
 800b26a:	61fb      	str	r3, [r7, #28]
 800b26c:	e01c      	b.n	800b2a8 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	1d1a      	adds	r2, r3, #4
 800b272:	61ba      	str	r2, [r7, #24]
 800b274:	ed93 7a00 	vldr	s14, [r3]
 800b278:	edd7 7a04 	vldr	s15, [r7, #16]
 800b27c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b280:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	edd3 7a00 	vldr	s15, [r3]
 800b28a:	eeb1 7a67 	vneg.f32	s14, s15
 800b28e:	edd7 7a04 	vldr	s15, [r7, #16]
 800b292:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b296:	69bb      	ldr	r3, [r7, #24]
 800b298:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800b29c:	69bb      	ldr	r3, [r7, #24]
 800b29e:	3304      	adds	r3, #4
 800b2a0:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800b2a2:	69fb      	ldr	r3, [r7, #28]
 800b2a4:	3301      	adds	r3, #1
 800b2a6:	61fb      	str	r3, [r7, #28]
 800b2a8:	69fa      	ldr	r2, [r7, #28]
 800b2aa:	697b      	ldr	r3, [r7, #20]
 800b2ac:	429a      	cmp	r2, r3
 800b2ae:	d3de      	bcc.n	800b26e <arm_cfft_f32+0x12a>
    }
  }
}
 800b2b0:	bf00      	nop
 800b2b2:	3720      	adds	r7, #32
 800b2b4:	46bd      	mov	sp, r7
 800b2b6:	bd80      	pop	{r7, pc}

0800b2b8 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800b2b8:	b480      	push	{r7}
 800b2ba:	b085      	sub	sp, #20
 800b2bc:	af00      	add	r7, sp, #0
 800b2be:	6078      	str	r0, [r7, #4]
 800b2c0:	460b      	mov	r3, r1
 800b2c2:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 800b2c4:	2300      	movs	r3, #0
 800b2c6:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 800b2c8:	687b      	ldr	r3, [r7, #4]
 800b2ca:	887a      	ldrh	r2, [r7, #2]
 800b2cc:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2200      	movs	r2, #0
 800b2d2:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 800b2d4:	687b      	ldr	r3, [r7, #4]
 800b2d6:	881b      	ldrh	r3, [r3, #0]
 800b2d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2dc:	d02c      	beq.n	800b338 <arm_cfft_init_f32+0x80>
 800b2de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2e2:	f300 809e 	bgt.w	800b422 <arm_cfft_init_f32+0x16a>
 800b2e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2ea:	d032      	beq.n	800b352 <arm_cfft_init_f32+0x9a>
 800b2ec:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2f0:	f300 8097 	bgt.w	800b422 <arm_cfft_init_f32+0x16a>
 800b2f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2f8:	d038      	beq.n	800b36c <arm_cfft_init_f32+0xb4>
 800b2fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2fe:	f300 8090 	bgt.w	800b422 <arm_cfft_init_f32+0x16a>
 800b302:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b306:	d03e      	beq.n	800b386 <arm_cfft_init_f32+0xce>
 800b308:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b30c:	f300 8089 	bgt.w	800b422 <arm_cfft_init_f32+0x16a>
 800b310:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b314:	d044      	beq.n	800b3a0 <arm_cfft_init_f32+0xe8>
 800b316:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b31a:	f300 8082 	bgt.w	800b422 <arm_cfft_init_f32+0x16a>
 800b31e:	2b80      	cmp	r3, #128	; 0x80
 800b320:	d04b      	beq.n	800b3ba <arm_cfft_init_f32+0x102>
 800b322:	2b80      	cmp	r3, #128	; 0x80
 800b324:	dc7d      	bgt.n	800b422 <arm_cfft_init_f32+0x16a>
 800b326:	2b40      	cmp	r3, #64	; 0x40
 800b328:	d054      	beq.n	800b3d4 <arm_cfft_init_f32+0x11c>
 800b32a:	2b40      	cmp	r3, #64	; 0x40
 800b32c:	dc79      	bgt.n	800b422 <arm_cfft_init_f32+0x16a>
 800b32e:	2b10      	cmp	r3, #16
 800b330:	d06a      	beq.n	800b408 <arm_cfft_init_f32+0x150>
 800b332:	2b20      	cmp	r3, #32
 800b334:	d05b      	beq.n	800b3ee <arm_cfft_init_f32+0x136>
 800b336:	e074      	b.n	800b422 <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 800b338:	4b3f      	ldr	r3, [pc, #252]	; (800b438 <arm_cfft_init_f32+0x180>)
 800b33a:	899a      	ldrh	r2, [r3, #12]
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	819a      	strh	r2, [r3, #12]
 800b340:	4b3d      	ldr	r3, [pc, #244]	; (800b438 <arm_cfft_init_f32+0x180>)
 800b342:	689a      	ldr	r2, [r3, #8]
 800b344:	687b      	ldr	r3, [r7, #4]
 800b346:	609a      	str	r2, [r3, #8]
 800b348:	4b3b      	ldr	r3, [pc, #236]	; (800b438 <arm_cfft_init_f32+0x180>)
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	605a      	str	r2, [r3, #4]
            break;
 800b350:	e06a      	b.n	800b428 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800b352:	4b3a      	ldr	r3, [pc, #232]	; (800b43c <arm_cfft_init_f32+0x184>)
 800b354:	899a      	ldrh	r2, [r3, #12]
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	819a      	strh	r2, [r3, #12]
 800b35a:	4b38      	ldr	r3, [pc, #224]	; (800b43c <arm_cfft_init_f32+0x184>)
 800b35c:	689a      	ldr	r2, [r3, #8]
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	609a      	str	r2, [r3, #8]
 800b362:	4b36      	ldr	r3, [pc, #216]	; (800b43c <arm_cfft_init_f32+0x184>)
 800b364:	685a      	ldr	r2, [r3, #4]
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	605a      	str	r2, [r3, #4]

            break;
 800b36a:	e05d      	b.n	800b428 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 800b36c:	4b34      	ldr	r3, [pc, #208]	; (800b440 <arm_cfft_init_f32+0x188>)
 800b36e:	899a      	ldrh	r2, [r3, #12]
 800b370:	687b      	ldr	r3, [r7, #4]
 800b372:	819a      	strh	r2, [r3, #12]
 800b374:	4b32      	ldr	r3, [pc, #200]	; (800b440 <arm_cfft_init_f32+0x188>)
 800b376:	689a      	ldr	r2, [r3, #8]
 800b378:	687b      	ldr	r3, [r7, #4]
 800b37a:	609a      	str	r2, [r3, #8]
 800b37c:	4b30      	ldr	r3, [pc, #192]	; (800b440 <arm_cfft_init_f32+0x188>)
 800b37e:	685a      	ldr	r2, [r3, #4]
 800b380:	687b      	ldr	r3, [r7, #4]
 800b382:	605a      	str	r2, [r3, #4]

            break;
 800b384:	e050      	b.n	800b428 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800b386:	4b2f      	ldr	r3, [pc, #188]	; (800b444 <arm_cfft_init_f32+0x18c>)
 800b388:	899a      	ldrh	r2, [r3, #12]
 800b38a:	687b      	ldr	r3, [r7, #4]
 800b38c:	819a      	strh	r2, [r3, #12]
 800b38e:	4b2d      	ldr	r3, [pc, #180]	; (800b444 <arm_cfft_init_f32+0x18c>)
 800b390:	689a      	ldr	r2, [r3, #8]
 800b392:	687b      	ldr	r3, [r7, #4]
 800b394:	609a      	str	r2, [r3, #8]
 800b396:	4b2b      	ldr	r3, [pc, #172]	; (800b444 <arm_cfft_init_f32+0x18c>)
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	605a      	str	r2, [r3, #4]
            break;
 800b39e:	e043      	b.n	800b428 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 800b3a0:	4b29      	ldr	r3, [pc, #164]	; (800b448 <arm_cfft_init_f32+0x190>)
 800b3a2:	899a      	ldrh	r2, [r3, #12]
 800b3a4:	687b      	ldr	r3, [r7, #4]
 800b3a6:	819a      	strh	r2, [r3, #12]
 800b3a8:	4b27      	ldr	r3, [pc, #156]	; (800b448 <arm_cfft_init_f32+0x190>)
 800b3aa:	689a      	ldr	r2, [r3, #8]
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	609a      	str	r2, [r3, #8]
 800b3b0:	4b25      	ldr	r3, [pc, #148]	; (800b448 <arm_cfft_init_f32+0x190>)
 800b3b2:	685a      	ldr	r2, [r3, #4]
 800b3b4:	687b      	ldr	r3, [r7, #4]
 800b3b6:	605a      	str	r2, [r3, #4]
            break;
 800b3b8:	e036      	b.n	800b428 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800b3ba:	4b24      	ldr	r3, [pc, #144]	; (800b44c <arm_cfft_init_f32+0x194>)
 800b3bc:	899a      	ldrh	r2, [r3, #12]
 800b3be:	687b      	ldr	r3, [r7, #4]
 800b3c0:	819a      	strh	r2, [r3, #12]
 800b3c2:	4b22      	ldr	r3, [pc, #136]	; (800b44c <arm_cfft_init_f32+0x194>)
 800b3c4:	689a      	ldr	r2, [r3, #8]
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	609a      	str	r2, [r3, #8]
 800b3ca:	4b20      	ldr	r3, [pc, #128]	; (800b44c <arm_cfft_init_f32+0x194>)
 800b3cc:	685a      	ldr	r2, [r3, #4]
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	605a      	str	r2, [r3, #4]
            break;
 800b3d2:	e029      	b.n	800b428 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 800b3d4:	4b1e      	ldr	r3, [pc, #120]	; (800b450 <arm_cfft_init_f32+0x198>)
 800b3d6:	899a      	ldrh	r2, [r3, #12]
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	819a      	strh	r2, [r3, #12]
 800b3dc:	4b1c      	ldr	r3, [pc, #112]	; (800b450 <arm_cfft_init_f32+0x198>)
 800b3de:	689a      	ldr	r2, [r3, #8]
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	609a      	str	r2, [r3, #8]
 800b3e4:	4b1a      	ldr	r3, [pc, #104]	; (800b450 <arm_cfft_init_f32+0x198>)
 800b3e6:	685a      	ldr	r2, [r3, #4]
 800b3e8:	687b      	ldr	r3, [r7, #4]
 800b3ea:	605a      	str	r2, [r3, #4]
            break;
 800b3ec:	e01c      	b.n	800b428 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800b3ee:	4b19      	ldr	r3, [pc, #100]	; (800b454 <arm_cfft_init_f32+0x19c>)
 800b3f0:	899a      	ldrh	r2, [r3, #12]
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	819a      	strh	r2, [r3, #12]
 800b3f6:	4b17      	ldr	r3, [pc, #92]	; (800b454 <arm_cfft_init_f32+0x19c>)
 800b3f8:	689a      	ldr	r2, [r3, #8]
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	609a      	str	r2, [r3, #8]
 800b3fe:	4b15      	ldr	r3, [pc, #84]	; (800b454 <arm_cfft_init_f32+0x19c>)
 800b400:	685a      	ldr	r2, [r3, #4]
 800b402:	687b      	ldr	r3, [r7, #4]
 800b404:	605a      	str	r2, [r3, #4]
            break;
 800b406:	e00f      	b.n	800b428 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 800b408:	4b13      	ldr	r3, [pc, #76]	; (800b458 <arm_cfft_init_f32+0x1a0>)
 800b40a:	899a      	ldrh	r2, [r3, #12]
 800b40c:	687b      	ldr	r3, [r7, #4]
 800b40e:	819a      	strh	r2, [r3, #12]
 800b410:	4b11      	ldr	r3, [pc, #68]	; (800b458 <arm_cfft_init_f32+0x1a0>)
 800b412:	689a      	ldr	r2, [r3, #8]
 800b414:	687b      	ldr	r3, [r7, #4]
 800b416:	609a      	str	r2, [r3, #8]
 800b418:	4b0f      	ldr	r3, [pc, #60]	; (800b458 <arm_cfft_init_f32+0x1a0>)
 800b41a:	685a      	ldr	r2, [r3, #4]
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	605a      	str	r2, [r3, #4]
            break;
 800b420:	e002      	b.n	800b428 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800b422:	23ff      	movs	r3, #255	; 0xff
 800b424:	73fb      	strb	r3, [r7, #15]
            break;
 800b426:	bf00      	nop
        }


        return (status);
 800b428:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b42c:	4618      	mov	r0, r3
 800b42e:	3714      	adds	r7, #20
 800b430:	46bd      	mov	sp, r7
 800b432:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b436:	4770      	bx	lr
 800b438:	0803c7e8 	.word	0x0803c7e8
 800b43c:	0803c7d8 	.word	0x0803c7d8
 800b440:	0803c7c8 	.word	0x0803c7c8
 800b444:	0803c7b8 	.word	0x0803c7b8
 800b448:	0803c7a8 	.word	0x0803c7a8
 800b44c:	0803c798 	.word	0x0803c798
 800b450:	0803c788 	.word	0x0803c788
 800b454:	0803c778 	.word	0x0803c778
 800b458:	0803c768 	.word	0x0803c768

0800b45c <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 800b45c:	b480      	push	{r7}
 800b45e:	b0bd      	sub	sp, #244	; 0xf4
 800b460:	af00      	add	r7, sp, #0
 800b462:	60f8      	str	r0, [r7, #12]
 800b464:	607a      	str	r2, [r7, #4]
 800b466:	461a      	mov	r2, r3
 800b468:	460b      	mov	r3, r1
 800b46a:	817b      	strh	r3, [r7, #10]
 800b46c:	4613      	mov	r3, r2
 800b46e:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800b470:	4b09      	ldr	r3, [pc, #36]	; (800b498 <arm_radix8_butterfly_f32+0x3c>)
 800b472:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800b476:	897b      	ldrh	r3, [r7, #10]
 800b478:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800b47c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b480:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800b484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b488:	08db      	lsrs	r3, r3, #3
 800b48a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800b48e:	2300      	movs	r3, #0
 800b490:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b494:	e002      	b.n	800b49c <arm_radix8_butterfly_f32+0x40>
 800b496:	bf00      	nop
 800b498:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800b49c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b4a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a4:	4413      	add	r3, r2
 800b4a6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800b4aa:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b4ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b2:	4413      	add	r3, r2
 800b4b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800b4b8:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4bc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c0:	4413      	add	r3, r2
 800b4c2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800b4c6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b4ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ce:	4413      	add	r3, r2
 800b4d0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800b4d4:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b4d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4dc:	4413      	add	r3, r2
 800b4de:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800b4e2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4ea:	4413      	add	r3, r2
 800b4ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800b4f0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b4f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4f8:	4413      	add	r3, r2
 800b4fa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800b4fe:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b502:	00db      	lsls	r3, r3, #3
 800b504:	68fa      	ldr	r2, [r7, #12]
 800b506:	4413      	add	r3, r2
 800b508:	ed93 7a00 	vldr	s14, [r3]
 800b50c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b510:	00db      	lsls	r3, r3, #3
 800b512:	68fa      	ldr	r2, [r7, #12]
 800b514:	4413      	add	r3, r2
 800b516:	edd3 7a00 	vldr	s15, [r3]
 800b51a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b51e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800b522:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b526:	00db      	lsls	r3, r3, #3
 800b528:	68fa      	ldr	r2, [r7, #12]
 800b52a:	4413      	add	r3, r2
 800b52c:	ed93 7a00 	vldr	s14, [r3]
 800b530:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b534:	00db      	lsls	r3, r3, #3
 800b536:	68fa      	ldr	r2, [r7, #12]
 800b538:	4413      	add	r3, r2
 800b53a:	edd3 7a00 	vldr	s15, [r3]
 800b53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b542:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800b546:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b54a:	00db      	lsls	r3, r3, #3
 800b54c:	68fa      	ldr	r2, [r7, #12]
 800b54e:	4413      	add	r3, r2
 800b550:	ed93 7a00 	vldr	s14, [r3]
 800b554:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b558:	00db      	lsls	r3, r3, #3
 800b55a:	68fa      	ldr	r2, [r7, #12]
 800b55c:	4413      	add	r3, r2
 800b55e:	edd3 7a00 	vldr	s15, [r3]
 800b562:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b566:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800b56a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b56e:	00db      	lsls	r3, r3, #3
 800b570:	68fa      	ldr	r2, [r7, #12]
 800b572:	4413      	add	r3, r2
 800b574:	ed93 7a00 	vldr	s14, [r3]
 800b578:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b57c:	00db      	lsls	r3, r3, #3
 800b57e:	68fa      	ldr	r2, [r7, #12]
 800b580:	4413      	add	r3, r2
 800b582:	edd3 7a00 	vldr	s15, [r3]
 800b586:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b58a:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800b58e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b592:	00db      	lsls	r3, r3, #3
 800b594:	68fa      	ldr	r2, [r7, #12]
 800b596:	4413      	add	r3, r2
 800b598:	ed93 7a00 	vldr	s14, [r3]
 800b59c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b5a0:	00db      	lsls	r3, r3, #3
 800b5a2:	68fa      	ldr	r2, [r7, #12]
 800b5a4:	4413      	add	r3, r2
 800b5a6:	edd3 7a00 	vldr	s15, [r3]
 800b5aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5ae:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800b5b2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b5b6:	00db      	lsls	r3, r3, #3
 800b5b8:	68fa      	ldr	r2, [r7, #12]
 800b5ba:	4413      	add	r3, r2
 800b5bc:	ed93 7a00 	vldr	s14, [r3]
 800b5c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b5c4:	00db      	lsls	r3, r3, #3
 800b5c6:	68fa      	ldr	r2, [r7, #12]
 800b5c8:	4413      	add	r3, r2
 800b5ca:	edd3 7a00 	vldr	s15, [r3]
 800b5ce:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5d2:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800b5d6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5da:	00db      	lsls	r3, r3, #3
 800b5dc:	68fa      	ldr	r2, [r7, #12]
 800b5de:	4413      	add	r3, r2
 800b5e0:	ed93 7a00 	vldr	s14, [r3]
 800b5e4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b5e8:	00db      	lsls	r3, r3, #3
 800b5ea:	68fa      	ldr	r2, [r7, #12]
 800b5ec:	4413      	add	r3, r2
 800b5ee:	edd3 7a00 	vldr	s15, [r3]
 800b5f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5f6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800b5fa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5fe:	00db      	lsls	r3, r3, #3
 800b600:	68fa      	ldr	r2, [r7, #12]
 800b602:	4413      	add	r3, r2
 800b604:	ed93 7a00 	vldr	s14, [r3]
 800b608:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b60c:	00db      	lsls	r3, r3, #3
 800b60e:	68fa      	ldr	r2, [r7, #12]
 800b610:	4413      	add	r3, r2
 800b612:	edd3 7a00 	vldr	s15, [r3]
 800b616:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b61a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800b61e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b622:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b626:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b62a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800b62e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b632:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b63a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800b63e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b642:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b646:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b64a:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800b64e:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b652:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b65a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800b65e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b662:	00db      	lsls	r3, r3, #3
 800b664:	68fa      	ldr	r2, [r7, #12]
 800b666:	4413      	add	r3, r2
 800b668:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b66c:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b670:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b674:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800b678:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b67c:	00db      	lsls	r3, r3, #3
 800b67e:	68fa      	ldr	r2, [r7, #12]
 800b680:	4413      	add	r3, r2
 800b682:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b686:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b68a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b68e:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800b692:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b696:	00db      	lsls	r3, r3, #3
 800b698:	3304      	adds	r3, #4
 800b69a:	68fa      	ldr	r2, [r7, #12]
 800b69c:	4413      	add	r3, r2
 800b69e:	ed93 7a00 	vldr	s14, [r3]
 800b6a2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	edd3 7a00 	vldr	s15, [r3]
 800b6b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6b6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800b6ba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b6be:	00db      	lsls	r3, r3, #3
 800b6c0:	3304      	adds	r3, #4
 800b6c2:	68fa      	ldr	r2, [r7, #12]
 800b6c4:	4413      	add	r3, r2
 800b6c6:	ed93 7a00 	vldr	s14, [r3]
 800b6ca:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	edd3 7a00 	vldr	s15, [r3]
 800b6da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6de:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800b6e2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6e6:	00db      	lsls	r3, r3, #3
 800b6e8:	3304      	adds	r3, #4
 800b6ea:	68fa      	ldr	r2, [r7, #12]
 800b6ec:	4413      	add	r3, r2
 800b6ee:	ed93 7a00 	vldr	s14, [r3]
 800b6f2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	edd3 7a00 	vldr	s15, [r3]
 800b702:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b706:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800b70a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b70e:	00db      	lsls	r3, r3, #3
 800b710:	3304      	adds	r3, #4
 800b712:	68fa      	ldr	r2, [r7, #12]
 800b714:	4413      	add	r3, r2
 800b716:	ed93 7a00 	vldr	s14, [r3]
 800b71a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	3304      	adds	r3, #4
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	4413      	add	r3, r2
 800b726:	edd3 7a00 	vldr	s15, [r3]
 800b72a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b72e:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800b732:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b736:	00db      	lsls	r3, r3, #3
 800b738:	3304      	adds	r3, #4
 800b73a:	68fa      	ldr	r2, [r7, #12]
 800b73c:	4413      	add	r3, r2
 800b73e:	ed93 7a00 	vldr	s14, [r3]
 800b742:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	3304      	adds	r3, #4
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	4413      	add	r3, r2
 800b74e:	edd3 7a00 	vldr	s15, [r3]
 800b752:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b756:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800b75a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b75e:	00db      	lsls	r3, r3, #3
 800b760:	3304      	adds	r3, #4
 800b762:	68fa      	ldr	r2, [r7, #12]
 800b764:	4413      	add	r3, r2
 800b766:	ed93 7a00 	vldr	s14, [r3]
 800b76a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	3304      	adds	r3, #4
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	4413      	add	r3, r2
 800b776:	edd3 7a00 	vldr	s15, [r3]
 800b77a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b77e:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800b782:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b786:	00db      	lsls	r3, r3, #3
 800b788:	3304      	adds	r3, #4
 800b78a:	68fa      	ldr	r2, [r7, #12]
 800b78c:	4413      	add	r3, r2
 800b78e:	ed93 7a00 	vldr	s14, [r3]
 800b792:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b796:	00db      	lsls	r3, r3, #3
 800b798:	3304      	adds	r3, #4
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	4413      	add	r3, r2
 800b79e:	edd3 7a00 	vldr	s15, [r3]
 800b7a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7a6:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800b7aa:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b7ae:	00db      	lsls	r3, r3, #3
 800b7b0:	3304      	adds	r3, #4
 800b7b2:	68fa      	ldr	r2, [r7, #12]
 800b7b4:	4413      	add	r3, r2
 800b7b6:	ed93 7a00 	vldr	s14, [r3]
 800b7ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b7be:	00db      	lsls	r3, r3, #3
 800b7c0:	3304      	adds	r3, #4
 800b7c2:	68fa      	ldr	r2, [r7, #12]
 800b7c4:	4413      	add	r3, r2
 800b7c6:	edd3 7a00 	vldr	s15, [r3]
 800b7ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7ce:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800b7d2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b7d6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b7da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7de:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800b7e2:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b7e6:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b7ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7ee:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800b7f2:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b7f6:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b7fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7fe:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800b802:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b806:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b80a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b80e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800b812:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b816:	00db      	lsls	r3, r3, #3
 800b818:	3304      	adds	r3, #4
 800b81a:	68fa      	ldr	r2, [r7, #12]
 800b81c:	4413      	add	r3, r2
 800b81e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b822:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b826:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b82a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800b82e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b832:	00db      	lsls	r3, r3, #3
 800b834:	3304      	adds	r3, #4
 800b836:	68fa      	ldr	r2, [r7, #12]
 800b838:	4413      	add	r3, r2
 800b83a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b83e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b842:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b846:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800b84a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b84e:	00db      	lsls	r3, r3, #3
 800b850:	68fa      	ldr	r2, [r7, #12]
 800b852:	4413      	add	r3, r2
 800b854:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b858:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b85c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b860:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800b864:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b868:	00db      	lsls	r3, r3, #3
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	4413      	add	r3, r2
 800b86e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b872:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b876:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b87a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800b87e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b882:	00db      	lsls	r3, r3, #3
 800b884:	3304      	adds	r3, #4
 800b886:	68fa      	ldr	r2, [r7, #12]
 800b888:	4413      	add	r3, r2
 800b88a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b88e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b892:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b896:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800b89a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b89e:	00db      	lsls	r3, r3, #3
 800b8a0:	3304      	adds	r3, #4
 800b8a2:	68fa      	ldr	r2, [r7, #12]
 800b8a4:	4413      	add	r3, r2
 800b8a6:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b8aa:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b8ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8b2:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800b8b6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b8ba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b8be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ca:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800b8ce:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b8d2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b8d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8da:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e2:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800b8e6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b8ea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b8ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8f2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8fa:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800b8fe:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b902:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b906:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b90a:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b912:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800b916:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b91a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b91e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b922:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800b926:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b92a:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b92e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b932:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800b936:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b93a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b93e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b942:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800b946:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b94a:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b94e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b952:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800b956:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b95a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b95e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b962:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800b966:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b96a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b96e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b972:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800b976:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b97a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b97e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b982:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800b986:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b98a:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b98e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b992:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800b996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b99a:	00db      	lsls	r3, r3, #3
 800b99c:	68fa      	ldr	r2, [r7, #12]
 800b99e:	4413      	add	r3, r2
 800b9a0:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b9a4:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b9a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9ac:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800b9b0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b9b4:	00db      	lsls	r3, r3, #3
 800b9b6:	68fa      	ldr	r2, [r7, #12]
 800b9b8:	4413      	add	r3, r2
 800b9ba:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b9be:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b9c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9c6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800b9ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9ce:	00db      	lsls	r3, r3, #3
 800b9d0:	68fa      	ldr	r2, [r7, #12]
 800b9d2:	4413      	add	r3, r2
 800b9d4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b9d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b9dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9e0:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800b9e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9e8:	00db      	lsls	r3, r3, #3
 800b9ea:	68fa      	ldr	r2, [r7, #12]
 800b9ec:	4413      	add	r3, r2
 800b9ee:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b9f2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b9f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9fa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800b9fe:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800ba02:	00db      	lsls	r3, r3, #3
 800ba04:	3304      	adds	r3, #4
 800ba06:	68fa      	ldr	r2, [r7, #12]
 800ba08:	4413      	add	r3, r2
 800ba0a:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ba0e:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ba12:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba16:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800ba1a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba1e:	00db      	lsls	r3, r3, #3
 800ba20:	3304      	adds	r3, #4
 800ba22:	68fa      	ldr	r2, [r7, #12]
 800ba24:	4413      	add	r3, r2
 800ba26:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ba2a:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ba2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba32:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800ba36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba3a:	00db      	lsls	r3, r3, #3
 800ba3c:	3304      	adds	r3, #4
 800ba3e:	68fa      	ldr	r2, [r7, #12]
 800ba40:	4413      	add	r3, r2
 800ba42:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ba46:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ba4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba4e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800ba52:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ba56:	00db      	lsls	r3, r3, #3
 800ba58:	3304      	adds	r3, #4
 800ba5a:	68fa      	ldr	r2, [r7, #12]
 800ba5c:	4413      	add	r3, r2
 800ba5e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ba62:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ba66:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba6a:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800ba6e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ba72:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba76:	4413      	add	r3, r2
 800ba78:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800ba7c:	897b      	ldrh	r3, [r7, #10]
 800ba7e:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ba82:	429a      	cmp	r2, r3
 800ba84:	f4ff ad0a 	bcc.w	800b49c <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800ba88:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba8c:	2b07      	cmp	r3, #7
 800ba8e:	f240 84e3 	bls.w	800c458 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800ba92:	2300      	movs	r3, #0
 800ba94:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800ba98:	2301      	movs	r3, #1
 800ba9a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800ba9e:	893b      	ldrh	r3, [r7, #8]
 800baa0:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800baa4:	4413      	add	r3, r2
 800baa6:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800baa8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800baaa:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800baae:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800bab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bab4:	4413      	add	r3, r2
 800bab6:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800bab8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800baba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800babc:	4413      	add	r3, r2
 800babe:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800bac0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800bac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bac4:	4413      	add	r3, r2
 800bac6:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800bac8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800baca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bacc:	4413      	add	r3, r2
 800bace:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800bad0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bad2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bad4:	4413      	add	r3, r2
 800bad6:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800bad8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bada:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800badc:	4413      	add	r3, r2
 800bade:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800bae0:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4413      	add	r3, r2
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800baee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4413      	add	r3, r2
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800bafa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bafc:	00db      	lsls	r3, r3, #3
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800bb06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800bb12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb14:	00db      	lsls	r3, r3, #3
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	4413      	add	r3, r2
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800bb1e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb20:	00db      	lsls	r3, r3, #3
 800bb22:	687a      	ldr	r2, [r7, #4]
 800bb24:	4413      	add	r3, r2
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800bb2a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb2c:	00db      	lsls	r3, r3, #3
 800bb2e:	687a      	ldr	r2, [r7, #4]
 800bb30:	4413      	add	r3, r2
 800bb32:	681b      	ldr	r3, [r3, #0]
 800bb34:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800bb36:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb3a:	00db      	lsls	r3, r3, #3
 800bb3c:	3304      	adds	r3, #4
 800bb3e:	687a      	ldr	r2, [r7, #4]
 800bb40:	4413      	add	r3, r2
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800bb46:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb48:	00db      	lsls	r3, r3, #3
 800bb4a:	3304      	adds	r3, #4
 800bb4c:	687a      	ldr	r2, [r7, #4]
 800bb4e:	4413      	add	r3, r2
 800bb50:	681b      	ldr	r3, [r3, #0]
 800bb52:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800bb54:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb56:	00db      	lsls	r3, r3, #3
 800bb58:	3304      	adds	r3, #4
 800bb5a:	687a      	ldr	r2, [r7, #4]
 800bb5c:	4413      	add	r3, r2
 800bb5e:	681b      	ldr	r3, [r3, #0]
 800bb60:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800bb62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb64:	00db      	lsls	r3, r3, #3
 800bb66:	3304      	adds	r3, #4
 800bb68:	687a      	ldr	r2, [r7, #4]
 800bb6a:	4413      	add	r3, r2
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800bb70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb72:	00db      	lsls	r3, r3, #3
 800bb74:	3304      	adds	r3, #4
 800bb76:	687a      	ldr	r2, [r7, #4]
 800bb78:	4413      	add	r3, r2
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800bb7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb80:	00db      	lsls	r3, r3, #3
 800bb82:	3304      	adds	r3, #4
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	4413      	add	r3, r2
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 800bb8c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb8e:	00db      	lsls	r3, r3, #3
 800bb90:	3304      	adds	r3, #4
 800bb92:	687a      	ldr	r2, [r7, #4]
 800bb94:	4413      	add	r3, r2
 800bb96:	681b      	ldr	r3, [r3, #0]
 800bb98:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800bb9a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800bba2:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800bba6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbaa:	4413      	add	r3, r2
 800bbac:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800bbb0:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bbb4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbb8:	4413      	add	r3, r2
 800bbba:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800bbbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbc2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbc6:	4413      	add	r3, r2
 800bbc8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800bbcc:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bbd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd4:	4413      	add	r3, r2
 800bbd6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800bbda:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bbde:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe2:	4413      	add	r3, r2
 800bbe4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800bbe8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbf0:	4413      	add	r3, r2
 800bbf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800bbf6:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bbfa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbfe:	4413      	add	r3, r2
 800bc00:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800bc04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc08:	00db      	lsls	r3, r3, #3
 800bc0a:	68fa      	ldr	r2, [r7, #12]
 800bc0c:	4413      	add	r3, r2
 800bc0e:	ed93 7a00 	vldr	s14, [r3]
 800bc12:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc16:	00db      	lsls	r3, r3, #3
 800bc18:	68fa      	ldr	r2, [r7, #12]
 800bc1a:	4413      	add	r3, r2
 800bc1c:	edd3 7a00 	vldr	s15, [r3]
 800bc20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc24:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800bc28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc2c:	00db      	lsls	r3, r3, #3
 800bc2e:	68fa      	ldr	r2, [r7, #12]
 800bc30:	4413      	add	r3, r2
 800bc32:	ed93 7a00 	vldr	s14, [r3]
 800bc36:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc3a:	00db      	lsls	r3, r3, #3
 800bc3c:	68fa      	ldr	r2, [r7, #12]
 800bc3e:	4413      	add	r3, r2
 800bc40:	edd3 7a00 	vldr	s15, [r3]
 800bc44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc48:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800bc4c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc50:	00db      	lsls	r3, r3, #3
 800bc52:	68fa      	ldr	r2, [r7, #12]
 800bc54:	4413      	add	r3, r2
 800bc56:	ed93 7a00 	vldr	s14, [r3]
 800bc5a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bc5e:	00db      	lsls	r3, r3, #3
 800bc60:	68fa      	ldr	r2, [r7, #12]
 800bc62:	4413      	add	r3, r2
 800bc64:	edd3 7a00 	vldr	s15, [r3]
 800bc68:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc6c:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800bc70:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc74:	00db      	lsls	r3, r3, #3
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	4413      	add	r3, r2
 800bc7a:	ed93 7a00 	vldr	s14, [r3]
 800bc7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bc82:	00db      	lsls	r3, r3, #3
 800bc84:	68fa      	ldr	r2, [r7, #12]
 800bc86:	4413      	add	r3, r2
 800bc88:	edd3 7a00 	vldr	s15, [r3]
 800bc8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc90:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800bc94:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bc98:	00db      	lsls	r3, r3, #3
 800bc9a:	68fa      	ldr	r2, [r7, #12]
 800bc9c:	4413      	add	r3, r2
 800bc9e:	ed93 7a00 	vldr	s14, [r3]
 800bca2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bca6:	00db      	lsls	r3, r3, #3
 800bca8:	68fa      	ldr	r2, [r7, #12]
 800bcaa:	4413      	add	r3, r2
 800bcac:	edd3 7a00 	vldr	s15, [r3]
 800bcb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcb4:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800bcb8:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bcbc:	00db      	lsls	r3, r3, #3
 800bcbe:	68fa      	ldr	r2, [r7, #12]
 800bcc0:	4413      	add	r3, r2
 800bcc2:	ed93 7a00 	vldr	s14, [r3]
 800bcc6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	68fa      	ldr	r2, [r7, #12]
 800bcce:	4413      	add	r3, r2
 800bcd0:	edd3 7a00 	vldr	s15, [r3]
 800bcd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcd8:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800bcdc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	68fa      	ldr	r2, [r7, #12]
 800bce4:	4413      	add	r3, r2
 800bce6:	ed93 7a00 	vldr	s14, [r3]
 800bcea:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bcee:	00db      	lsls	r3, r3, #3
 800bcf0:	68fa      	ldr	r2, [r7, #12]
 800bcf2:	4413      	add	r3, r2
 800bcf4:	edd3 7a00 	vldr	s15, [r3]
 800bcf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bcfc:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800bd00:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bd04:	00db      	lsls	r3, r3, #3
 800bd06:	68fa      	ldr	r2, [r7, #12]
 800bd08:	4413      	add	r3, r2
 800bd0a:	ed93 7a00 	vldr	s14, [r3]
 800bd0e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bd12:	00db      	lsls	r3, r3, #3
 800bd14:	68fa      	ldr	r2, [r7, #12]
 800bd16:	4413      	add	r3, r2
 800bd18:	edd3 7a00 	vldr	s15, [r3]
 800bd1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd20:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800bd24:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800bd28:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bd2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd30:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800bd34:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800bd38:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bd3c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd40:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800bd44:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800bd48:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800bd4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd50:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800bd54:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800bd58:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800bd5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd60:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800bd64:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd68:	00db      	lsls	r3, r3, #3
 800bd6a:	68fa      	ldr	r2, [r7, #12]
 800bd6c:	4413      	add	r3, r2
 800bd6e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800bd72:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bd76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd7a:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800bd7e:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800bd82:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bd86:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd8a:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800bd8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd92:	00db      	lsls	r3, r3, #3
 800bd94:	3304      	adds	r3, #4
 800bd96:	68fa      	ldr	r2, [r7, #12]
 800bd98:	4413      	add	r3, r2
 800bd9a:	ed93 7a00 	vldr	s14, [r3]
 800bd9e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	3304      	adds	r3, #4
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	4413      	add	r3, r2
 800bdaa:	edd3 7a00 	vldr	s15, [r3]
 800bdae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdb2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800bdb6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bdba:	00db      	lsls	r3, r3, #3
 800bdbc:	3304      	adds	r3, #4
 800bdbe:	68fa      	ldr	r2, [r7, #12]
 800bdc0:	4413      	add	r3, r2
 800bdc2:	ed93 7a00 	vldr	s14, [r3]
 800bdc6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	3304      	adds	r3, #4
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	edd3 7a00 	vldr	s15, [r3]
 800bdd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdda:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800bdde:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bde2:	00db      	lsls	r3, r3, #3
 800bde4:	3304      	adds	r3, #4
 800bde6:	68fa      	ldr	r2, [r7, #12]
 800bde8:	4413      	add	r3, r2
 800bdea:	ed93 7a00 	vldr	s14, [r3]
 800bdee:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	edd3 7a00 	vldr	s15, [r3]
 800bdfe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be02:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800be06:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800be0a:	00db      	lsls	r3, r3, #3
 800be0c:	3304      	adds	r3, #4
 800be0e:	68fa      	ldr	r2, [r7, #12]
 800be10:	4413      	add	r3, r2
 800be12:	ed93 7a00 	vldr	s14, [r3]
 800be16:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	3304      	adds	r3, #4
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	4413      	add	r3, r2
 800be22:	edd3 7a00 	vldr	s15, [r3]
 800be26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be2a:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800be2e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800be32:	00db      	lsls	r3, r3, #3
 800be34:	3304      	adds	r3, #4
 800be36:	68fa      	ldr	r2, [r7, #12]
 800be38:	4413      	add	r3, r2
 800be3a:	ed93 7a00 	vldr	s14, [r3]
 800be3e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	3304      	adds	r3, #4
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	4413      	add	r3, r2
 800be4a:	edd3 7a00 	vldr	s15, [r3]
 800be4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be52:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800be56:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800be5a:	00db      	lsls	r3, r3, #3
 800be5c:	3304      	adds	r3, #4
 800be5e:	68fa      	ldr	r2, [r7, #12]
 800be60:	4413      	add	r3, r2
 800be62:	ed93 7a00 	vldr	s14, [r3]
 800be66:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be6a:	00db      	lsls	r3, r3, #3
 800be6c:	3304      	adds	r3, #4
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4413      	add	r3, r2
 800be72:	edd3 7a00 	vldr	s15, [r3]
 800be76:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be7a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800be7e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800be82:	00db      	lsls	r3, r3, #3
 800be84:	3304      	adds	r3, #4
 800be86:	68fa      	ldr	r2, [r7, #12]
 800be88:	4413      	add	r3, r2
 800be8a:	ed93 7a00 	vldr	s14, [r3]
 800be8e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	3304      	adds	r3, #4
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	edd3 7a00 	vldr	s15, [r3]
 800be9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bea2:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800bea6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800beaa:	00db      	lsls	r3, r3, #3
 800beac:	3304      	adds	r3, #4
 800beae:	68fa      	ldr	r2, [r7, #12]
 800beb0:	4413      	add	r3, r2
 800beb2:	ed93 7a00 	vldr	s14, [r3]
 800beb6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800beba:	00db      	lsls	r3, r3, #3
 800bebc:	3304      	adds	r3, #4
 800bebe:	68fa      	ldr	r2, [r7, #12]
 800bec0:	4413      	add	r3, r2
 800bec2:	edd3 7a00 	vldr	s15, [r3]
 800bec6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beca:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800bece:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bed2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bed6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beda:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800bede:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bee2:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bee6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800beea:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800beee:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bef2:	edd7 7a08 	vldr	s15, [r7, #32]
 800bef6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800befa:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800befe:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800bf02:	edd7 7a08 	vldr	s15, [r7, #32]
 800bf06:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf0a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800bf0e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800bf12:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bf16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf1a:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800bf1e:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800bf22:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bf26:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf2a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800bf2e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf32:	00db      	lsls	r3, r3, #3
 800bf34:	3304      	adds	r3, #4
 800bf36:	68fa      	ldr	r2, [r7, #12]
 800bf38:	4413      	add	r3, r2
 800bf3a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf3e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bf42:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf46:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800bf4a:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf4e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bf52:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf56:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800bf5a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bf5e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bf62:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf66:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800bf6a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bf6e:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bf72:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf76:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800bf7a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bf7e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bf82:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf86:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800bf8a:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bf8e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bf92:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf96:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800bf9a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bf9e:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bfa2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfa6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800bfaa:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bfae:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bfb2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfb6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800bfba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bfbe:	00db      	lsls	r3, r3, #3
 800bfc0:	68fa      	ldr	r2, [r7, #12]
 800bfc2:	4413      	add	r3, r2
 800bfc4:	ed97 7a07 	vldr	s14, [r7, #28]
 800bfc8:	edd7 7a06 	vldr	s15, [r7, #24]
 800bfcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfd0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800bfd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bfd8:	00db      	lsls	r3, r3, #3
 800bfda:	3304      	adds	r3, #4
 800bfdc:	68fa      	ldr	r2, [r7, #12]
 800bfde:	4413      	add	r3, r2
 800bfe0:	ed97 7a05 	vldr	s14, [r7, #20]
 800bfe4:	edd7 7a04 	vldr	s15, [r7, #16]
 800bfe8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfec:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800bff0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bff4:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800bff8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bffc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800c000:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c004:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c008:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c00c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800c010:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800c014:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c018:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c01c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800c020:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c024:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c028:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c02c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800c030:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c034:	00db      	lsls	r3, r3, #3
 800c036:	68fa      	ldr	r2, [r7, #12]
 800c038:	4413      	add	r3, r2
 800c03a:	ed97 7a07 	vldr	s14, [r7, #28]
 800c03e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c042:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c046:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800c04a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c04e:	00db      	lsls	r3, r3, #3
 800c050:	3304      	adds	r3, #4
 800c052:	68fa      	ldr	r2, [r7, #12]
 800c054:	4413      	add	r3, r2
 800c056:	ed97 7a05 	vldr	s14, [r7, #20]
 800c05a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c05e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c062:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800c066:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c06a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800c06e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c072:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800c076:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c07a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c082:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800c086:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c08a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c08e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c092:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800c096:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c09a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800c09e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0a2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800c0a6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c0aa:	00db      	lsls	r3, r3, #3
 800c0ac:	68fa      	ldr	r2, [r7, #12]
 800c0ae:	4413      	add	r3, r2
 800c0b0:	ed97 7a07 	vldr	s14, [r7, #28]
 800c0b4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0bc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800c0c0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c0c4:	00db      	lsls	r3, r3, #3
 800c0c6:	3304      	adds	r3, #4
 800c0c8:	68fa      	ldr	r2, [r7, #12]
 800c0ca:	4413      	add	r3, r2
 800c0cc:	ed97 7a05 	vldr	s14, [r7, #20]
 800c0d0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0d8:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800c0dc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800c0e0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c0e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0e8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800c0f4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800c0f8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c0fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c100:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c104:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c108:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800c10c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800c110:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c114:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c118:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c120:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800c124:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800c128:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c12c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c130:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c134:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c138:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800c13c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c140:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c144:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c148:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800c14c:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c150:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c154:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c158:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800c15c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c160:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c164:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c168:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800c16c:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c170:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c174:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c178:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800c17c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c180:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c184:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c188:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800c18c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c190:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c194:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c198:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800c19c:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800c1a0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c1a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1a8:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800c1ac:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800c1b0:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c1b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1b8:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800c1bc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c1c0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800c1c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1c8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800c1cc:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c1d0:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800c1d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1d8:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800c1dc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c1e0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c1e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1e8:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800c1ec:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c1f0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c1f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1f8:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800c1fc:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c200:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c204:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c208:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800c20c:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c210:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c214:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c218:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800c21c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c220:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c224:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c228:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800c22c:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c230:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c234:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c238:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800c23c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800c240:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c244:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c248:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800c24c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800c250:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c254:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c258:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800c25c:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800c260:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c264:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c268:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800c26c:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800c270:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c274:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c278:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800c27c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c280:	00db      	lsls	r3, r3, #3
 800c282:	68fa      	ldr	r2, [r7, #12]
 800c284:	4413      	add	r3, r2
 800c286:	ed97 7a07 	vldr	s14, [r7, #28]
 800c28a:	edd7 7a06 	vldr	s15, [r7, #24]
 800c28e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c292:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800c296:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c29a:	00db      	lsls	r3, r3, #3
 800c29c:	3304      	adds	r3, #4
 800c29e:	68fa      	ldr	r2, [r7, #12]
 800c2a0:	4413      	add	r3, r2
 800c2a2:	ed97 7a05 	vldr	s14, [r7, #20]
 800c2a6:	edd7 7a04 	vldr	s15, [r7, #16]
 800c2aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2ae:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800c2b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c2b6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c2ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2be:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800c2c2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c2c6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800c2ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ce:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800c2d2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c2d6:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800c2da:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2de:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800c2e2:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c2e6:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c2ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2ee:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800c2f2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c2f6:	00db      	lsls	r3, r3, #3
 800c2f8:	68fa      	ldr	r2, [r7, #12]
 800c2fa:	4413      	add	r3, r2
 800c2fc:	ed97 7a07 	vldr	s14, [r7, #28]
 800c300:	edd7 7a06 	vldr	s15, [r7, #24]
 800c304:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c308:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800c30c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c310:	00db      	lsls	r3, r3, #3
 800c312:	3304      	adds	r3, #4
 800c314:	68fa      	ldr	r2, [r7, #12]
 800c316:	4413      	add	r3, r2
 800c318:	ed97 7a05 	vldr	s14, [r7, #20]
 800c31c:	edd7 7a04 	vldr	s15, [r7, #16]
 800c320:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c324:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800c328:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c32c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c330:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c334:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800c338:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c33c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c340:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c344:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800c348:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c34c:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c350:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c354:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800c358:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c35c:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c360:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c364:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800c368:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c36c:	00db      	lsls	r3, r3, #3
 800c36e:	68fa      	ldr	r2, [r7, #12]
 800c370:	4413      	add	r3, r2
 800c372:	ed97 7a07 	vldr	s14, [r7, #28]
 800c376:	edd7 7a06 	vldr	s15, [r7, #24]
 800c37a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c37e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800c382:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c386:	00db      	lsls	r3, r3, #3
 800c388:	3304      	adds	r3, #4
 800c38a:	68fa      	ldr	r2, [r7, #12]
 800c38c:	4413      	add	r3, r2
 800c38e:	ed97 7a05 	vldr	s14, [r7, #20]
 800c392:	edd7 7a04 	vldr	s15, [r7, #16]
 800c396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c39a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800c39e:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800c3a2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800c3a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3aa:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800c3ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c3b2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c3b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ba:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800c3be:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800c3c2:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c3c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3ca:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800c3ce:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c3d2:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800c3d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3da:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800c3de:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3e2:	00db      	lsls	r3, r3, #3
 800c3e4:	68fa      	ldr	r2, [r7, #12]
 800c3e6:	4413      	add	r3, r2
 800c3e8:	ed97 7a07 	vldr	s14, [r7, #28]
 800c3ec:	edd7 7a06 	vldr	s15, [r7, #24]
 800c3f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3f4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800c3f8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	3304      	adds	r3, #4
 800c400:	68fa      	ldr	r2, [r7, #12]
 800c402:	4413      	add	r3, r2
 800c404:	ed97 7a05 	vldr	s14, [r7, #20]
 800c408:	edd7 7a04 	vldr	s15, [r7, #16]
 800c40c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c410:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800c414:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c418:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c41c:	4413      	add	r3, r2
 800c41e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800c422:	897b      	ldrh	r3, [r7, #10]
 800c424:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c428:	429a      	cmp	r2, r3
 800c42a:	f4ff abba 	bcc.w	800bba2 <arm_radix8_butterfly_f32+0x746>

         j++;
 800c42e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c432:	3301      	adds	r3, #1
 800c434:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800c438:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c43c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c440:	429a      	cmp	r2, r3
 800c442:	f4ff ab2c 	bcc.w	800ba9e <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800c446:	893b      	ldrh	r3, [r7, #8]
 800c448:	00db      	lsls	r3, r3, #3
 800c44a:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800c44c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c450:	2b07      	cmp	r3, #7
 800c452:	f63f a813 	bhi.w	800b47c <arm_radix8_butterfly_f32+0x20>
}
 800c456:	e000      	b.n	800c45a <arm_radix8_butterfly_f32+0xffe>
         break;
 800c458:	bf00      	nop
}
 800c45a:	bf00      	nop
 800c45c:	37f4      	adds	r7, #244	; 0xf4
 800c45e:	46bd      	mov	sp, r7
 800c460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c464:	4770      	bx	lr
 800c466:	bf00      	nop

0800c468 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800c468:	b480      	push	{r7}
 800c46a:	b095      	sub	sp, #84	; 0x54
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	60f8      	str	r0, [r7, #12]
 800c470:	60b9      	str	r1, [r7, #8]
 800c472:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800c474:	68fb      	ldr	r3, [r7, #12]
 800c476:	695b      	ldr	r3, [r3, #20]
 800c478:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800c47a:	68bb      	ldr	r3, [r7, #8]
 800c47c:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800c47e:	68bb      	ldr	r3, [r7, #8]
 800c480:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800c482:	68fb      	ldr	r3, [r7, #12]
 800c484:	881b      	ldrh	r3, [r3, #0]
 800c486:	3b01      	subs	r3, #1
 800c488:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800c48a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800c490:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c492:	685b      	ldr	r3, [r3, #4]
 800c494:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800c496:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800c49c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c49e:	685b      	ldr	r3, [r3, #4]
 800c4a0:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800c4a2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4a4:	1d1a      	adds	r2, r3, #4
 800c4a6:	64ba      	str	r2, [r7, #72]	; 0x48
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800c4ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c4ae:	1d1a      	adds	r2, r3, #4
 800c4b0:	64ba      	str	r2, [r7, #72]	; 0x48
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800c4b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c4ba:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c4be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4c2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800c4c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c4ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c4ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4d2:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800c4d6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c4da:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	1d1a      	adds	r2, r3, #4
 800c4e6:	607a      	str	r2, [r7, #4]
 800c4e8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c4ec:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4f0:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800c4f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c4f8:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	1d1a      	adds	r2, r3, #4
 800c504:	607a      	str	r2, [r7, #4]
 800c506:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c50a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c50e:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800c512:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c514:	00db      	lsls	r3, r3, #3
 800c516:	68ba      	ldr	r2, [r7, #8]
 800c518:	4413      	add	r3, r2
 800c51a:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800c51c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c51e:	3308      	adds	r3, #8
 800c520:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800c522:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c524:	685b      	ldr	r3, [r3, #4]
 800c526:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800c528:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c52a:	681b      	ldr	r3, [r3, #0]
 800c52c:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800c52e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800c534:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c536:	685b      	ldr	r3, [r3, #4]
 800c538:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800c53a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c53c:	1d1a      	adds	r2, r3, #4
 800c53e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800c544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c546:	1d1a      	adds	r2, r3, #4
 800c548:	64ba      	str	r2, [r7, #72]	; 0x48
 800c54a:	681b      	ldr	r3, [r3, #0]
 800c54c:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800c54e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c552:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c556:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c55a:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800c55e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c562:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c566:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c56a:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800c56e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c572:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c576:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c57a:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800c57e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c582:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c586:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c58a:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800c58e:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c592:	edd7 7a08 	vldr	s15, [r7, #32]
 800c596:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c59a:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800c59e:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c5a2:	edd7 7a08 	vldr	s15, [r7, #32]
 800c5a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c5aa:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800c5ae:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c5b2:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c5b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5ba:	edd7 7a07 	vldr	s15, [r7, #28]
 800c5be:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5c2:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5ca:	687b      	ldr	r3, [r7, #4]
 800c5cc:	1d1a      	adds	r2, r3, #4
 800c5ce:	607a      	str	r2, [r7, #4]
 800c5d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c5d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5d8:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800c5dc:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c5e0:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c5e4:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5e8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c5ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5f0:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	1d1a      	adds	r2, r3, #4
 800c5fc:	607a      	str	r2, [r7, #4]
 800c5fe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c602:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c606:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800c60a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c60c:	3308      	adds	r3, #8
 800c60e:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800c610:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c612:	3b08      	subs	r3, #8
 800c614:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800c616:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c618:	3b01      	subs	r3, #1
 800c61a:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 800c61c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c61e:	2b00      	cmp	r3, #0
 800c620:	f47f af7f 	bne.w	800c522 <stage_rfft_f32+0xba>
}
 800c624:	bf00      	nop
 800c626:	bf00      	nop
 800c628:	3754      	adds	r7, #84	; 0x54
 800c62a:	46bd      	mov	sp, r7
 800c62c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c630:	4770      	bx	lr

0800c632 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800c632:	b480      	push	{r7}
 800c634:	b095      	sub	sp, #84	; 0x54
 800c636:	af00      	add	r7, sp, #0
 800c638:	60f8      	str	r0, [r7, #12]
 800c63a:	60b9      	str	r1, [r7, #8]
 800c63c:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800c63e:	68fb      	ldr	r3, [r7, #12]
 800c640:	695b      	ldr	r3, [r3, #20]
 800c642:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800c644:	68bb      	ldr	r3, [r7, #8]
 800c646:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800c648:	68bb      	ldr	r3, [r7, #8]
 800c64a:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800c64c:	68fb      	ldr	r3, [r7, #12]
 800c64e:	881b      	ldrh	r3, [r3, #0]
 800c650:	3b01      	subs	r3, #1
 800c652:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800c654:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800c65a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c65c:	685b      	ldr	r3, [r3, #4]
 800c65e:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800c660:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c662:	3308      	adds	r3, #8
 800c664:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800c666:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c66a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c66e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c672:	687b      	ldr	r3, [r7, #4]
 800c674:	1d1a      	adds	r2, r3, #4
 800c676:	607a      	str	r2, [r7, #4]
 800c678:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c67c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c680:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800c684:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c688:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c68c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c690:	687b      	ldr	r3, [r7, #4]
 800c692:	1d1a      	adds	r2, r3, #4
 800c694:	607a      	str	r2, [r7, #4]
 800c696:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c69a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c69e:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800c6a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c6a4:	00db      	lsls	r3, r3, #3
 800c6a6:	68ba      	ldr	r2, [r7, #8]
 800c6a8:	4413      	add	r3, r2
 800c6aa:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800c6ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6ae:	3308      	adds	r3, #8
 800c6b0:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800c6b2:	e07c      	b.n	800c7ae <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800c6b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6b6:	685b      	ldr	r3, [r3, #4]
 800c6b8:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800c6ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6bc:	681b      	ldr	r3, [r3, #0]
 800c6be:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800c6c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800c6c6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6c8:	685b      	ldr	r3, [r3, #4]
 800c6ca:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800c6cc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6ce:	1d1a      	adds	r2, r3, #4
 800c6d0:	64ba      	str	r2, [r7, #72]	; 0x48
 800c6d2:	681b      	ldr	r3, [r3, #0]
 800c6d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800c6d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6d8:	1d1a      	adds	r2, r3, #4
 800c6da:	64ba      	str	r2, [r7, #72]	; 0x48
 800c6dc:	681b      	ldr	r3, [r3, #0]
 800c6de:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800c6e0:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c6e4:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c6e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800c6f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c6f4:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c6f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6fc:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800c700:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c704:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c708:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c70c:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800c710:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c714:	edd7 7a08 	vldr	s15, [r7, #32]
 800c718:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c71c:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800c720:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c724:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c728:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c72c:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800c730:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c734:	edd7 7a08 	vldr	s15, [r7, #32]
 800c738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c73c:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800c740:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c744:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c748:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c74c:	edd7 7a07 	vldr	s15, [r7, #28]
 800c750:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c754:	edd7 7a06 	vldr	s15, [r7, #24]
 800c758:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	1d1a      	adds	r2, r3, #4
 800c760:	607a      	str	r2, [r7, #4]
 800c762:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c766:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c76a:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800c76e:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c772:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c776:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c77a:	edd7 7a05 	vldr	s15, [r7, #20]
 800c77e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c782:	edd7 7a04 	vldr	s15, [r7, #16]
 800c786:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	1d1a      	adds	r2, r3, #4
 800c78e:	607a      	str	r2, [r7, #4]
 800c790:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c794:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c798:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800c79c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c79e:	3308      	adds	r3, #8
 800c7a0:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800c7a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c7a4:	3b08      	subs	r3, #8
 800c7a6:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800c7a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7aa:	3b01      	subs	r3, #1
 800c7ac:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800c7ae:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7b0:	2b00      	cmp	r3, #0
 800c7b2:	f47f af7f 	bne.w	800c6b4 <merge_rfft_f32+0x82>
   }

}
 800c7b6:	bf00      	nop
 800c7b8:	bf00      	nop
 800c7ba:	3754      	adds	r7, #84	; 0x54
 800c7bc:	46bd      	mov	sp, r7
 800c7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7c2:	4770      	bx	lr

0800c7c4 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b086      	sub	sp, #24
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	60f8      	str	r0, [r7, #12]
 800c7cc:	60b9      	str	r1, [r7, #8]
 800c7ce:	607a      	str	r2, [r7, #4]
 800c7d0:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800c7d2:	68fb      	ldr	r3, [r7, #12]
 800c7d4:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800c7d6:	78fb      	ldrb	r3, [r7, #3]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d00b      	beq.n	800c7f4 <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800c7dc:	687a      	ldr	r2, [r7, #4]
 800c7de:	68b9      	ldr	r1, [r7, #8]
 800c7e0:	68f8      	ldr	r0, [r7, #12]
 800c7e2:	f7ff ff26 	bl	800c632 <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800c7e6:	78fa      	ldrb	r2, [r7, #3]
 800c7e8:	2301      	movs	r3, #1
 800c7ea:	6879      	ldr	r1, [r7, #4]
 800c7ec:	6978      	ldr	r0, [r7, #20]
 800c7ee:	f7fe fca9 	bl	800b144 <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800c7f2:	e00a      	b.n	800c80a <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800c7f4:	78fa      	ldrb	r2, [r7, #3]
 800c7f6:	2301      	movs	r3, #1
 800c7f8:	68b9      	ldr	r1, [r7, #8]
 800c7fa:	6978      	ldr	r0, [r7, #20]
 800c7fc:	f7fe fca2 	bl	800b144 <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800c800:	687a      	ldr	r2, [r7, #4]
 800c802:	68b9      	ldr	r1, [r7, #8]
 800c804:	68f8      	ldr	r0, [r7, #12]
 800c806:	f7ff fe2f 	bl	800c468 <stage_rfft_f32>
}
 800c80a:	bf00      	nop
 800c80c:	3718      	adds	r7, #24
 800c80e:	46bd      	mov	sp, r7
 800c810:	bd80      	pop	{r7, pc}
	...

0800c814 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	2b00      	cmp	r3, #0
 800c820:	d102      	bne.n	800c828 <arm_rfft_32_fast_init_f32+0x14>
 800c822:	f04f 33ff 	mov.w	r3, #4294967295
 800c826:	e014      	b.n	800c852 <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 800c828:	687b      	ldr	r3, [r7, #4]
 800c82a:	2110      	movs	r1, #16
 800c82c:	4618      	mov	r0, r3
 800c82e:	f7fe fd43 	bl	800b2b8 <arm_cfft_init_f32>
 800c832:	4603      	mov	r3, r0
 800c834:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c836:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 800c83e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c842:	e006      	b.n	800c852 <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	2220      	movs	r2, #32
 800c848:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800c84a:	687b      	ldr	r3, [r7, #4]
 800c84c:	4a03      	ldr	r2, [pc, #12]	; (800c85c <arm_rfft_32_fast_init_f32+0x48>)
 800c84e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c850:	2300      	movs	r3, #0
}
 800c852:	4618      	mov	r0, r3
 800c854:	3710      	adds	r7, #16
 800c856:	46bd      	mov	sp, r7
 800c858:	bd80      	pop	{r7, pc}
 800c85a:	bf00      	nop
 800c85c:	080347e8 	.word	0x080347e8

0800c860 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c860:	b580      	push	{r7, lr}
 800c862:	b084      	sub	sp, #16
 800c864:	af00      	add	r7, sp, #0
 800c866:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d102      	bne.n	800c874 <arm_rfft_64_fast_init_f32+0x14>
 800c86e:	f04f 33ff 	mov.w	r3, #4294967295
 800c872:	e014      	b.n	800c89e <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	2120      	movs	r1, #32
 800c878:	4618      	mov	r0, r3
 800c87a:	f7fe fd1d 	bl	800b2b8 <arm_cfft_init_f32>
 800c87e:	4603      	mov	r3, r0
 800c880:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d002      	beq.n	800c890 <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 800c88a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c88e:	e006      	b.n	800c89e <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 800c890:	687b      	ldr	r3, [r7, #4]
 800c892:	2240      	movs	r2, #64	; 0x40
 800c894:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	4a03      	ldr	r2, [pc, #12]	; (800c8a8 <arm_rfft_64_fast_init_f32+0x48>)
 800c89a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c89c:	2300      	movs	r3, #0
}
 800c89e:	4618      	mov	r0, r3
 800c8a0:	3710      	adds	r7, #16
 800c8a2:	46bd      	mov	sp, r7
 800c8a4:	bd80      	pop	{r7, pc}
 800c8a6:	bf00      	nop
 800c8a8:	08034868 	.word	0x08034868

0800c8ac <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c8ac:	b580      	push	{r7, lr}
 800c8ae:	b084      	sub	sp, #16
 800c8b0:	af00      	add	r7, sp, #0
 800c8b2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c8b4:	687b      	ldr	r3, [r7, #4]
 800c8b6:	2b00      	cmp	r3, #0
 800c8b8:	d102      	bne.n	800c8c0 <arm_rfft_128_fast_init_f32+0x14>
 800c8ba:	f04f 33ff 	mov.w	r3, #4294967295
 800c8be:	e014      	b.n	800c8ea <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 800c8c0:	687b      	ldr	r3, [r7, #4]
 800c8c2:	2140      	movs	r1, #64	; 0x40
 800c8c4:	4618      	mov	r0, r3
 800c8c6:	f7fe fcf7 	bl	800b2b8 <arm_cfft_init_f32>
 800c8ca:	4603      	mov	r3, r0
 800c8cc:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c8ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8d2:	2b00      	cmp	r3, #0
 800c8d4:	d002      	beq.n	800c8dc <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 800c8d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8da:	e006      	b.n	800c8ea <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 800c8dc:	687b      	ldr	r3, [r7, #4]
 800c8de:	2280      	movs	r2, #128	; 0x80
 800c8e0:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	4a03      	ldr	r2, [pc, #12]	; (800c8f4 <arm_rfft_128_fast_init_f32+0x48>)
 800c8e6:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c8e8:	2300      	movs	r3, #0
}
 800c8ea:	4618      	mov	r0, r3
 800c8ec:	3710      	adds	r7, #16
 800c8ee:	46bd      	mov	sp, r7
 800c8f0:	bd80      	pop	{r7, pc}
 800c8f2:	bf00      	nop
 800c8f4:	08034968 	.word	0x08034968

0800c8f8 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c8f8:	b580      	push	{r7, lr}
 800c8fa:	b084      	sub	sp, #16
 800c8fc:	af00      	add	r7, sp, #0
 800c8fe:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	2b00      	cmp	r3, #0
 800c904:	d102      	bne.n	800c90c <arm_rfft_256_fast_init_f32+0x14>
 800c906:	f04f 33ff 	mov.w	r3, #4294967295
 800c90a:	e015      	b.n	800c938 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 800c90c:	687b      	ldr	r3, [r7, #4]
 800c90e:	2180      	movs	r1, #128	; 0x80
 800c910:	4618      	mov	r0, r3
 800c912:	f7fe fcd1 	bl	800b2b8 <arm_cfft_init_f32>
 800c916:	4603      	mov	r3, r0
 800c918:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c91a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c91e:	2b00      	cmp	r3, #0
 800c920:	d002      	beq.n	800c928 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 800c922:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c926:	e007      	b.n	800c938 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c92e:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800c930:	687b      	ldr	r3, [r7, #4]
 800c932:	4a03      	ldr	r2, [pc, #12]	; (800c940 <arm_rfft_256_fast_init_f32+0x48>)
 800c934:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c936:	2300      	movs	r3, #0
}
 800c938:	4618      	mov	r0, r3
 800c93a:	3710      	adds	r7, #16
 800c93c:	46bd      	mov	sp, r7
 800c93e:	bd80      	pop	{r7, pc}
 800c940:	08034b68 	.word	0x08034b68

0800c944 <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c944:	b580      	push	{r7, lr}
 800c946:	b084      	sub	sp, #16
 800c948:	af00      	add	r7, sp, #0
 800c94a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	2b00      	cmp	r3, #0
 800c950:	d102      	bne.n	800c958 <arm_rfft_512_fast_init_f32+0x14>
 800c952:	f04f 33ff 	mov.w	r3, #4294967295
 800c956:	e016      	b.n	800c986 <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 800c958:	687b      	ldr	r3, [r7, #4]
 800c95a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c95e:	4618      	mov	r0, r3
 800c960:	f7fe fcaa 	bl	800b2b8 <arm_cfft_init_f32>
 800c964:	4603      	mov	r3, r0
 800c966:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c968:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d002      	beq.n	800c976 <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 800c970:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c974:	e007      	b.n	800c986 <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 800c976:	687b      	ldr	r3, [r7, #4]
 800c978:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c97c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	4a03      	ldr	r2, [pc, #12]	; (800c990 <arm_rfft_512_fast_init_f32+0x4c>)
 800c982:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c984:	2300      	movs	r3, #0
}
 800c986:	4618      	mov	r0, r3
 800c988:	3710      	adds	r7, #16
 800c98a:	46bd      	mov	sp, r7
 800c98c:	bd80      	pop	{r7, pc}
 800c98e:	bf00      	nop
 800c990:	08034f68 	.word	0x08034f68

0800c994 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c994:	b580      	push	{r7, lr}
 800c996:	b084      	sub	sp, #16
 800c998:	af00      	add	r7, sp, #0
 800c99a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	2b00      	cmp	r3, #0
 800c9a0:	d102      	bne.n	800c9a8 <arm_rfft_1024_fast_init_f32+0x14>
 800c9a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9a6:	e016      	b.n	800c9d6 <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c9ae:	4618      	mov	r0, r3
 800c9b0:	f7fe fc82 	bl	800b2b8 <arm_cfft_init_f32>
 800c9b4:	4603      	mov	r3, r0
 800c9b6:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c9b8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	d002      	beq.n	800c9c6 <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 800c9c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9c4:	e007      	b.n	800c9d6 <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c9cc:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800c9ce:	687b      	ldr	r3, [r7, #4]
 800c9d0:	4a03      	ldr	r2, [pc, #12]	; (800c9e0 <arm_rfft_1024_fast_init_f32+0x4c>)
 800c9d2:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c9d4:	2300      	movs	r3, #0
}
 800c9d6:	4618      	mov	r0, r3
 800c9d8:	3710      	adds	r7, #16
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	bd80      	pop	{r7, pc}
 800c9de:	bf00      	nop
 800c9e0:	08035768 	.word	0x08035768

0800c9e4 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c9e4:	b580      	push	{r7, lr}
 800c9e6:	b084      	sub	sp, #16
 800c9e8:	af00      	add	r7, sp, #0
 800c9ea:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2b00      	cmp	r3, #0
 800c9f0:	d102      	bne.n	800c9f8 <arm_rfft_2048_fast_init_f32+0x14>
 800c9f2:	f04f 33ff 	mov.w	r3, #4294967295
 800c9f6:	e016      	b.n	800ca26 <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 800c9f8:	687b      	ldr	r3, [r7, #4]
 800c9fa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c9fe:	4618      	mov	r0, r3
 800ca00:	f7fe fc5a 	bl	800b2b8 <arm_cfft_init_f32>
 800ca04:	4603      	mov	r3, r0
 800ca06:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800ca08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca0c:	2b00      	cmp	r3, #0
 800ca0e:	d002      	beq.n	800ca16 <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 800ca10:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca14:	e007      	b.n	800ca26 <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca1c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800ca1e:	687b      	ldr	r3, [r7, #4]
 800ca20:	4a03      	ldr	r2, [pc, #12]	; (800ca30 <arm_rfft_2048_fast_init_f32+0x4c>)
 800ca22:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800ca24:	2300      	movs	r3, #0
}
 800ca26:	4618      	mov	r0, r3
 800ca28:	3710      	adds	r7, #16
 800ca2a:	46bd      	mov	sp, r7
 800ca2c:	bd80      	pop	{r7, pc}
 800ca2e:	bf00      	nop
 800ca30:	08036768 	.word	0x08036768

0800ca34 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800ca34:	b580      	push	{r7, lr}
 800ca36:	b084      	sub	sp, #16
 800ca38:	af00      	add	r7, sp, #0
 800ca3a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800ca3c:	687b      	ldr	r3, [r7, #4]
 800ca3e:	2b00      	cmp	r3, #0
 800ca40:	d102      	bne.n	800ca48 <arm_rfft_4096_fast_init_f32+0x14>
 800ca42:	f04f 33ff 	mov.w	r3, #4294967295
 800ca46:	e016      	b.n	800ca76 <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 800ca48:	687b      	ldr	r3, [r7, #4]
 800ca4a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca4e:	4618      	mov	r0, r3
 800ca50:	f7fe fc32 	bl	800b2b8 <arm_cfft_init_f32>
 800ca54:	4603      	mov	r3, r0
 800ca56:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800ca58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d002      	beq.n	800ca66 <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 800ca60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca64:	e007      	b.n	800ca76 <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 800ca66:	687b      	ldr	r3, [r7, #4]
 800ca68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca6c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	4a03      	ldr	r2, [pc, #12]	; (800ca80 <arm_rfft_4096_fast_init_f32+0x4c>)
 800ca72:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800ca74:	2300      	movs	r3, #0
}
 800ca76:	4618      	mov	r0, r3
 800ca78:	3710      	adds	r7, #16
 800ca7a:	46bd      	mov	sp, r7
 800ca7c:	bd80      	pop	{r7, pc}
 800ca7e:	bf00      	nop
 800ca80:	08038768 	.word	0x08038768

0800ca84 <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800ca84:	b580      	push	{r7, lr}
 800ca86:	b084      	sub	sp, #16
 800ca88:	af00      	add	r7, sp, #0
 800ca8a:	6078      	str	r0, [r7, #4]
 800ca8c:	460b      	mov	r3, r1
 800ca8e:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 800ca90:	2300      	movs	r3, #0
 800ca92:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 800ca94:	887b      	ldrh	r3, [r7, #2]
 800ca96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca9a:	d023      	beq.n	800cae4 <arm_rfft_fast_init_f32+0x60>
 800ca9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800caa0:	dc38      	bgt.n	800cb14 <arm_rfft_fast_init_f32+0x90>
 800caa2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caa6:	d020      	beq.n	800caea <arm_rfft_fast_init_f32+0x66>
 800caa8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800caac:	dc32      	bgt.n	800cb14 <arm_rfft_fast_init_f32+0x90>
 800caae:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cab2:	d01d      	beq.n	800caf0 <arm_rfft_fast_init_f32+0x6c>
 800cab4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800cab8:	dc2c      	bgt.n	800cb14 <arm_rfft_fast_init_f32+0x90>
 800caba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cabe:	d01a      	beq.n	800caf6 <arm_rfft_fast_init_f32+0x72>
 800cac0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800cac4:	dc26      	bgt.n	800cb14 <arm_rfft_fast_init_f32+0x90>
 800cac6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800caca:	d017      	beq.n	800cafc <arm_rfft_fast_init_f32+0x78>
 800cacc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cad0:	dc20      	bgt.n	800cb14 <arm_rfft_fast_init_f32+0x90>
 800cad2:	2b80      	cmp	r3, #128	; 0x80
 800cad4:	d015      	beq.n	800cb02 <arm_rfft_fast_init_f32+0x7e>
 800cad6:	2b80      	cmp	r3, #128	; 0x80
 800cad8:	dc1c      	bgt.n	800cb14 <arm_rfft_fast_init_f32+0x90>
 800cada:	2b20      	cmp	r3, #32
 800cadc:	d017      	beq.n	800cb0e <arm_rfft_fast_init_f32+0x8a>
 800cade:	2b40      	cmp	r3, #64	; 0x40
 800cae0:	d012      	beq.n	800cb08 <arm_rfft_fast_init_f32+0x84>
 800cae2:	e017      	b.n	800cb14 <arm_rfft_fast_init_f32+0x90>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 800cae4:	4b14      	ldr	r3, [pc, #80]	; (800cb38 <arm_rfft_fast_init_f32+0xb4>)
 800cae6:	60fb      	str	r3, [r7, #12]
    break;
 800cae8:	e017      	b.n	800cb1a <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 800caea:	4b14      	ldr	r3, [pc, #80]	; (800cb3c <arm_rfft_fast_init_f32+0xb8>)
 800caec:	60fb      	str	r3, [r7, #12]
    break;
 800caee:	e014      	b.n	800cb1a <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 800caf0:	4b13      	ldr	r3, [pc, #76]	; (800cb40 <arm_rfft_fast_init_f32+0xbc>)
 800caf2:	60fb      	str	r3, [r7, #12]
    break;
 800caf4:	e011      	b.n	800cb1a <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 800caf6:	4b13      	ldr	r3, [pc, #76]	; (800cb44 <arm_rfft_fast_init_f32+0xc0>)
 800caf8:	60fb      	str	r3, [r7, #12]
    break;
 800cafa:	e00e      	b.n	800cb1a <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 800cafc:	4b12      	ldr	r3, [pc, #72]	; (800cb48 <arm_rfft_fast_init_f32+0xc4>)
 800cafe:	60fb      	str	r3, [r7, #12]
    break;
 800cb00:	e00b      	b.n	800cb1a <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 800cb02:	4b12      	ldr	r3, [pc, #72]	; (800cb4c <arm_rfft_fast_init_f32+0xc8>)
 800cb04:	60fb      	str	r3, [r7, #12]
    break;
 800cb06:	e008      	b.n	800cb1a <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 800cb08:	4b11      	ldr	r3, [pc, #68]	; (800cb50 <arm_rfft_fast_init_f32+0xcc>)
 800cb0a:	60fb      	str	r3, [r7, #12]
    break;
 800cb0c:	e005      	b.n	800cb1a <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 800cb0e:	4b11      	ldr	r3, [pc, #68]	; (800cb54 <arm_rfft_fast_init_f32+0xd0>)
 800cb10:	60fb      	str	r3, [r7, #12]
    break;
 800cb12:	e002      	b.n	800cb1a <arm_rfft_fast_init_f32+0x96>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 800cb14:	f04f 33ff 	mov.w	r3, #4294967295
 800cb18:	e009      	b.n	800cb2e <arm_rfft_fast_init_f32+0xaa>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 800cb1a:	68fb      	ldr	r3, [r7, #12]
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d102      	bne.n	800cb26 <arm_rfft_fast_init_f32+0xa2>
 800cb20:	f04f 33ff 	mov.w	r3, #4294967295
 800cb24:	e003      	b.n	800cb2e <arm_rfft_fast_init_f32+0xaa>
  return fptr( S );
 800cb26:	68fb      	ldr	r3, [r7, #12]
 800cb28:	6878      	ldr	r0, [r7, #4]
 800cb2a:	4798      	blx	r3
 800cb2c:	4603      	mov	r3, r0

}
 800cb2e:	4618      	mov	r0, r3
 800cb30:	3710      	adds	r7, #16
 800cb32:	46bd      	mov	sp, r7
 800cb34:	bd80      	pop	{r7, pc}
 800cb36:	bf00      	nop
 800cb38:	0800ca35 	.word	0x0800ca35
 800cb3c:	0800c9e5 	.word	0x0800c9e5
 800cb40:	0800c995 	.word	0x0800c995
 800cb44:	0800c945 	.word	0x0800c945
 800cb48:	0800c8f9 	.word	0x0800c8f9
 800cb4c:	0800c8ad 	.word	0x0800c8ad
 800cb50:	0800c861 	.word	0x0800c861
 800cb54:	0800c815 	.word	0x0800c815

0800cb58 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800cb58:	b580      	push	{r7, lr}
 800cb5a:	b082      	sub	sp, #8
 800cb5c:	af00      	add	r7, sp, #0
 800cb5e:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb62:	ed97 0a01 	vldr	s0, [r7, #4]
 800cb66:	f00b fc35 	bl	80183d4 <cosf>
 800cb6a:	eef0 7a40 	vmov.f32	s15, s0
 800cb6e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb72:	3708      	adds	r7, #8
 800cb74:	46bd      	mov	sp, r7
 800cb76:	bd80      	pop	{r7, pc}

0800cb78 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 800cb78:	b580      	push	{r7, lr}
 800cb7a:	b082      	sub	sp, #8
 800cb7c:	af00      	add	r7, sp, #0
 800cb7e:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb82:	ed97 0a01 	vldr	s0, [r7, #4]
 800cb86:	f00b fcf1 	bl	801856c <sinf>
 800cb8a:	eef0 7a40 	vmov.f32	s15, s0
 800cb8e:	eeb0 0a67 	vmov.f32	s0, s15
 800cb92:	3708      	adds	r7, #8
 800cb94:	46bd      	mov	sp, r7
 800cb96:	bd80      	pop	{r7, pc}

0800cb98 <_ZN2ei3dct9transformEPfj>:
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327950288
#endif // M_PI

// DCT type II, unscaled
int ei::dct::transform(float vector[], size_t len) {
 800cb98:	b5b0      	push	{r4, r5, r7, lr}
 800cb9a:	ed2d 8b02 	vpush	{d8}
 800cb9e:	b08e      	sub	sp, #56	; 0x38
 800cba0:	af02      	add	r7, sp, #8
 800cba2:	6078      	str	r0, [r7, #4]
 800cba4:	6039      	str	r1, [r7, #0]
	const size_t fft_data_out_size = (len / 2 + 1) * sizeof(ei::fft_complex_t);
 800cba6:	683b      	ldr	r3, [r7, #0]
 800cba8:	085b      	lsrs	r3, r3, #1
 800cbaa:	3301      	adds	r3, #1
 800cbac:	00db      	lsls	r3, r3, #3
 800cbae:	627b      	str	r3, [r7, #36]	; 0x24
	const size_t fft_data_in_size = len * sizeof(float);
 800cbb0:	683b      	ldr	r3, [r7, #0]
 800cbb2:	009b      	lsls	r3, r3, #2
 800cbb4:	623b      	str	r3, [r7, #32]

	// Allocate KissFFT input / output buffer
    fft_complex_t *fft_data_out =
		(ei::fft_complex_t*)ei_dsp_calloc(fft_data_out_size, 1);
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cbba:	f00e fa31 	bl	801b020 <calloc>
 800cbbe:	4603      	mov	r3, r0
 800cbc0:	61fb      	str	r3, [r7, #28]
	if (!fft_data_out) {
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d101      	bne.n	800cbcc <_ZN2ei3dct9transformEPfj+0x34>
		return ei::EIDSP_OUT_OF_MEM;
 800cbc8:	4b5f      	ldr	r3, [pc, #380]	; (800cd48 <_ZN2ei3dct9transformEPfj+0x1b0>)
 800cbca:	e0b1      	b.n	800cd30 <_ZN2ei3dct9transformEPfj+0x198>
	}

    float *fft_data_in = (float*)ei_dsp_calloc(fft_data_in_size, 1);
 800cbcc:	2101      	movs	r1, #1
 800cbce:	6a38      	ldr	r0, [r7, #32]
 800cbd0:	f00e fa26 	bl	801b020 <calloc>
 800cbd4:	4603      	mov	r3, r0
 800cbd6:	61bb      	str	r3, [r7, #24]
	if (!fft_data_in) {
 800cbd8:	69bb      	ldr	r3, [r7, #24]
 800cbda:	2b00      	cmp	r3, #0
 800cbdc:	d104      	bne.n	800cbe8 <_ZN2ei3dct9transformEPfj+0x50>
		ei_dsp_free(fft_data_out, fft_data_out_size);
 800cbde:	69f8      	ldr	r0, [r7, #28]
 800cbe0:	f00e faf0 	bl	801b1c4 <free>
		return ei::EIDSP_OUT_OF_MEM;
 800cbe4:	4b58      	ldr	r3, [pc, #352]	; (800cd48 <_ZN2ei3dct9transformEPfj+0x1b0>)
 800cbe6:	e0a3      	b.n	800cd30 <_ZN2ei3dct9transformEPfj+0x198>
	}

	// Preprocess the input buffer with the data from the vector
	size_t halfLen = len / 2;
 800cbe8:	683b      	ldr	r3, [r7, #0]
 800cbea:	085b      	lsrs	r3, r3, #1
 800cbec:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < halfLen; i++) {
 800cbee:	2300      	movs	r3, #0
 800cbf0:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbf2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbf4:	697b      	ldr	r3, [r7, #20]
 800cbf6:	429a      	cmp	r2, r3
 800cbf8:	d21b      	bcs.n	800cc32 <_ZN2ei3dct9transformEPfj+0x9a>
		fft_data_in[i] = vector[i * 2];
 800cbfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbfc:	00db      	lsls	r3, r3, #3
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	441a      	add	r2, r3
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	009b      	lsls	r3, r3, #2
 800cc06:	69b9      	ldr	r1, [r7, #24]
 800cc08:	440b      	add	r3, r1
 800cc0a:	6812      	ldr	r2, [r2, #0]
 800cc0c:	601a      	str	r2, [r3, #0]
		fft_data_in[len - 1 - i] = vector[i * 2 + 1];
 800cc0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc10:	00db      	lsls	r3, r3, #3
 800cc12:	3304      	adds	r3, #4
 800cc14:	687a      	ldr	r2, [r7, #4]
 800cc16:	441a      	add	r2, r3
 800cc18:	6839      	ldr	r1, [r7, #0]
 800cc1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc1c:	1acb      	subs	r3, r1, r3
 800cc1e:	3b01      	subs	r3, #1
 800cc20:	009b      	lsls	r3, r3, #2
 800cc22:	69b9      	ldr	r1, [r7, #24]
 800cc24:	440b      	add	r3, r1
 800cc26:	6812      	ldr	r2, [r2, #0]
 800cc28:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < halfLen; i++) {
 800cc2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc2c:	3301      	adds	r3, #1
 800cc2e:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc30:	e7df      	b.n	800cbf2 <_ZN2ei3dct9transformEPfj+0x5a>
	}
	if (len % 2 == 1) {
 800cc32:	683b      	ldr	r3, [r7, #0]
 800cc34:	f003 0301 	and.w	r3, r3, #1
 800cc38:	2b00      	cmp	r3, #0
 800cc3a:	d00c      	beq.n	800cc56 <_ZN2ei3dct9transformEPfj+0xbe>
		fft_data_in[halfLen] = vector[len - 1];
 800cc3c:	683b      	ldr	r3, [r7, #0]
 800cc3e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc42:	3b01      	subs	r3, #1
 800cc44:	009b      	lsls	r3, r3, #2
 800cc46:	687a      	ldr	r2, [r7, #4]
 800cc48:	441a      	add	r2, r3
 800cc4a:	697b      	ldr	r3, [r7, #20]
 800cc4c:	009b      	lsls	r3, r3, #2
 800cc4e:	69b9      	ldr	r1, [r7, #24]
 800cc50:	440b      	add	r3, r1
 800cc52:	6812      	ldr	r2, [r2, #0]
 800cc54:	601a      	str	r2, [r3, #0]
	}

	int r = ei::numpy::rfft(fft_data_in, len, fft_data_out, (len / 2 + 1), len);
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	085b      	lsrs	r3, r3, #1
 800cc5a:	1c5a      	adds	r2, r3, #1
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	9300      	str	r3, [sp, #0]
 800cc60:	4613      	mov	r3, r2
 800cc62:	69fa      	ldr	r2, [r7, #28]
 800cc64:	6839      	ldr	r1, [r7, #0]
 800cc66:	69b8      	ldr	r0, [r7, #24]
 800cc68:	f7f5 f914 	bl	8001e94 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 800cc6c:	6138      	str	r0, [r7, #16]
	if (r != 0) {
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d007      	beq.n	800cc84 <_ZN2ei3dct9transformEPfj+0xec>
		ei_dsp_free(fft_data_in, fft_data_in_size);
 800cc74:	69b8      	ldr	r0, [r7, #24]
 800cc76:	f00e faa5 	bl	801b1c4 <free>
		ei_dsp_free(fft_data_out, fft_data_out_size);
 800cc7a:	69f8      	ldr	r0, [r7, #28]
 800cc7c:	f00e faa2 	bl	801b1c4 <free>
		return r;
 800cc80:	693b      	ldr	r3, [r7, #16]
 800cc82:	e055      	b.n	800cd30 <_ZN2ei3dct9transformEPfj+0x198>
	}

	for (size_t i = 0; i < len / 2 + 1; i++) {
 800cc84:	2300      	movs	r3, #0
 800cc86:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc88:	683b      	ldr	r3, [r7, #0]
 800cc8a:	085b      	lsrs	r3, r3, #1
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc90:	429a      	cmp	r2, r3
 800cc92:	d246      	bcs.n	800cd22 <_ZN2ei3dct9transformEPfj+0x18a>
		float temp = i * M_PI / (len * 2);
 800cc94:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc96:	f7f3 fc55 	bl	8000544 <__aeabi_ui2d>
 800cc9a:	a329      	add	r3, pc, #164	; (adr r3, 800cd40 <_ZN2ei3dct9transformEPfj+0x1a8>)
 800cc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cca0:	f7f3 fcca 	bl	8000638 <__aeabi_dmul>
 800cca4:	4602      	mov	r2, r0
 800cca6:	460b      	mov	r3, r1
 800cca8:	4614      	mov	r4, r2
 800ccaa:	461d      	mov	r5, r3
 800ccac:	683b      	ldr	r3, [r7, #0]
 800ccae:	005b      	lsls	r3, r3, #1
 800ccb0:	4618      	mov	r0, r3
 800ccb2:	f7f3 fc47 	bl	8000544 <__aeabi_ui2d>
 800ccb6:	4602      	mov	r2, r0
 800ccb8:	460b      	mov	r3, r1
 800ccba:	4620      	mov	r0, r4
 800ccbc:	4629      	mov	r1, r5
 800ccbe:	f7f3 fde5 	bl	800088c <__aeabi_ddiv>
 800ccc2:	4602      	mov	r2, r0
 800ccc4:	460b      	mov	r3, r1
 800ccc6:	4610      	mov	r0, r2
 800ccc8:	4619      	mov	r1, r3
 800ccca:	f7f3 ffad 	bl	8000c28 <__aeabi_d2f>
 800ccce:	4603      	mov	r3, r0
 800ccd0:	60fb      	str	r3, [r7, #12]
		vector[i] = fft_data_out[i].r * cos(temp) + fft_data_out[i].i * sin(temp);
 800ccd2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd4:	00db      	lsls	r3, r3, #3
 800ccd6:	69fa      	ldr	r2, [r7, #28]
 800ccd8:	4413      	add	r3, r2
 800ccda:	ed93 8a00 	vldr	s16, [r3]
 800ccde:	ed97 0a03 	vldr	s0, [r7, #12]
 800cce2:	f7ff ff39 	bl	800cb58 <_ZSt3cosf>
 800cce6:	eef0 7a40 	vmov.f32	s15, s0
 800ccea:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ccee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf0:	00db      	lsls	r3, r3, #3
 800ccf2:	69fa      	ldr	r2, [r7, #28]
 800ccf4:	4413      	add	r3, r2
 800ccf6:	edd3 8a01 	vldr	s17, [r3, #4]
 800ccfa:	ed97 0a03 	vldr	s0, [r7, #12]
 800ccfe:	f7ff ff3b 	bl	800cb78 <_ZSt3sinf>
 800cd02:	eef0 7a40 	vmov.f32	s15, s0
 800cd06:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800cd0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd0c:	009b      	lsls	r3, r3, #2
 800cd0e:	687a      	ldr	r2, [r7, #4]
 800cd10:	4413      	add	r3, r2
 800cd12:	ee78 7a27 	vadd.f32	s15, s16, s15
 800cd16:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < len / 2 + 1; i++) {
 800cd1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd1c:	3301      	adds	r3, #1
 800cd1e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd20:	e7b2      	b.n	800cc88 <_ZN2ei3dct9transformEPfj+0xf0>
	}

	ei_dsp_free(fft_data_in, fft_data_in_size);
 800cd22:	69b8      	ldr	r0, [r7, #24]
 800cd24:	f00e fa4e 	bl	801b1c4 <free>
	ei_dsp_free(fft_data_out, fft_data_out_size);
 800cd28:	69f8      	ldr	r0, [r7, #28]
 800cd2a:	f00e fa4b 	bl	801b1c4 <free>

	return 0;
 800cd2e:	2300      	movs	r3, #0
}
 800cd30:	4618      	mov	r0, r3
 800cd32:	3730      	adds	r7, #48	; 0x30
 800cd34:	46bd      	mov	sp, r7
 800cd36:	ecbd 8b02 	vpop	{d8}
 800cd3a:	bdb0      	pop	{r4, r5, r7, pc}
 800cd3c:	f3af 8000 	nop.w
 800cd40:	54442d18 	.word	0x54442d18
 800cd44:	400921fb 	.word	0x400921fb
 800cd48:	fffffc16 	.word	0xfffffc16

0800cd4c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800cd4c:	b480      	push	{r7}
 800cd4e:	b089      	sub	sp, #36	; 0x24
 800cd50:	af00      	add	r7, sp, #0
 800cd52:	60f8      	str	r0, [r7, #12]
 800cd54:	60b9      	str	r1, [r7, #8]
 800cd56:	607a      	str	r2, [r7, #4]
 800cd58:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 800cd5a:	687b      	ldr	r3, [r7, #4]
 800cd5c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800cd60:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 800cd62:	683b      	ldr	r3, [r7, #0]
 800cd64:	00db      	lsls	r3, r3, #3
 800cd66:	68fa      	ldr	r2, [r7, #12]
 800cd68:	4413      	add	r3, r2
 800cd6a:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 800cd6c:	69fb      	ldr	r3, [r7, #28]
 800cd6e:	ed93 7a00 	vldr	s14, [r3]
 800cd72:	69bb      	ldr	r3, [r7, #24]
 800cd74:	edd3 7a00 	vldr	s15, [r3]
 800cd78:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	edd3 6a01 	vldr	s13, [r3, #4]
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd90:	edc7 7a04 	vstr	s15, [r7, #16]
 800cd94:	69fb      	ldr	r3, [r7, #28]
 800cd96:	ed93 7a00 	vldr	s14, [r3]
 800cd9a:	69bb      	ldr	r3, [r7, #24]
 800cd9c:	edd3 7a01 	vldr	s15, [r3, #4]
 800cda0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cda4:	69fb      	ldr	r3, [r7, #28]
 800cda6:	edd3 6a01 	vldr	s13, [r3, #4]
 800cdaa:	69bb      	ldr	r3, [r7, #24]
 800cdac:	edd3 7a00 	vldr	s15, [r3]
 800cdb0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cdb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdb8:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 800cdbc:	68bb      	ldr	r3, [r7, #8]
 800cdbe:	00db      	lsls	r3, r3, #3
 800cdc0:	69ba      	ldr	r2, [r7, #24]
 800cdc2:	4413      	add	r3, r2
 800cdc4:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 800cdc6:	68fb      	ldr	r3, [r7, #12]
 800cdc8:	ed93 7a00 	vldr	s14, [r3]
 800cdcc:	edd7 7a04 	vldr	s15, [r7, #16]
 800cdd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdd4:	69fb      	ldr	r3, [r7, #28]
 800cdd6:	edc3 7a00 	vstr	s15, [r3]
 800cdda:	68fb      	ldr	r3, [r7, #12]
 800cddc:	ed93 7a01 	vldr	s14, [r3, #4]
 800cde0:	edd7 7a05 	vldr	s15, [r7, #20]
 800cde4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cde8:	69fb      	ldr	r3, [r7, #28]
 800cdea:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 800cdee:	68fb      	ldr	r3, [r7, #12]
 800cdf0:	ed93 7a00 	vldr	s14, [r3]
 800cdf4:	edd7 7a04 	vldr	s15, [r7, #16]
 800cdf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdfc:	68fb      	ldr	r3, [r7, #12]
 800cdfe:	edc3 7a00 	vstr	s15, [r3]
 800ce02:	68fb      	ldr	r3, [r7, #12]
 800ce04:	ed93 7a01 	vldr	s14, [r3, #4]
 800ce08:	edd7 7a05 	vldr	s15, [r7, #20]
 800ce0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ce10:	68fb      	ldr	r3, [r7, #12]
 800ce12:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 800ce16:	69fb      	ldr	r3, [r7, #28]
 800ce18:	3308      	adds	r3, #8
 800ce1a:	61fb      	str	r3, [r7, #28]
        ++Fout;
 800ce1c:	68fb      	ldr	r3, [r7, #12]
 800ce1e:	3308      	adds	r3, #8
 800ce20:	60fb      	str	r3, [r7, #12]
    }while (--m);
 800ce22:	683b      	ldr	r3, [r7, #0]
 800ce24:	3b01      	subs	r3, #1
 800ce26:	603b      	str	r3, [r7, #0]
 800ce28:	683b      	ldr	r3, [r7, #0]
 800ce2a:	2b00      	cmp	r3, #0
 800ce2c:	bf14      	ite	ne
 800ce2e:	2301      	movne	r3, #1
 800ce30:	2300      	moveq	r3, #0
 800ce32:	b2db      	uxtb	r3, r3
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d000      	beq.n	800ce3a <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 800ce38:	e798      	b.n	800cd6c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 800ce3a:	bf00      	nop
 800ce3c:	3724      	adds	r7, #36	; 0x24
 800ce3e:	46bd      	mov	sp, r7
 800ce40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce44:	4770      	bx	lr

0800ce46 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 800ce46:	b480      	push	{r7}
 800ce48:	b097      	sub	sp, #92	; 0x5c
 800ce4a:	af00      	add	r7, sp, #0
 800ce4c:	60f8      	str	r0, [r7, #12]
 800ce4e:	60b9      	str	r1, [r7, #8]
 800ce50:	607a      	str	r2, [r7, #4]
 800ce52:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 800ce54:	683b      	ldr	r3, [r7, #0]
 800ce56:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 800ce58:	683b      	ldr	r3, [r7, #0]
 800ce5a:	005b      	lsls	r3, r3, #1
 800ce5c:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 800ce5e:	683a      	ldr	r2, [r7, #0]
 800ce60:	4613      	mov	r3, r2
 800ce62:	005b      	lsls	r3, r3, #1
 800ce64:	4413      	add	r3, r2
 800ce66:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 800ce68:	687b      	ldr	r3, [r7, #4]
 800ce6a:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ce6e:	657b      	str	r3, [r7, #84]	; 0x54
 800ce70:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce72:	653b      	str	r3, [r7, #80]	; 0x50
 800ce74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce76:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 800ce78:	683b      	ldr	r3, [r7, #0]
 800ce7a:	00db      	lsls	r3, r3, #3
 800ce7c:	68fa      	ldr	r2, [r7, #12]
 800ce7e:	4413      	add	r3, r2
 800ce80:	ed93 7a00 	vldr	s14, [r3]
 800ce84:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce86:	edd3 7a00 	vldr	s15, [r3]
 800ce8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce8e:	683b      	ldr	r3, [r7, #0]
 800ce90:	00db      	lsls	r3, r3, #3
 800ce92:	68fa      	ldr	r2, [r7, #12]
 800ce94:	4413      	add	r3, r2
 800ce96:	edd3 6a01 	vldr	s13, [r3, #4]
 800ce9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce9c:	edd3 7a01 	vldr	s15, [r3, #4]
 800cea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cea4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cea8:	edc7 7a04 	vstr	s15, [r7, #16]
 800ceac:	683b      	ldr	r3, [r7, #0]
 800ceae:	00db      	lsls	r3, r3, #3
 800ceb0:	68fa      	ldr	r2, [r7, #12]
 800ceb2:	4413      	add	r3, r2
 800ceb4:	ed93 7a00 	vldr	s14, [r3]
 800ceb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceba:	edd3 7a01 	vldr	s15, [r3, #4]
 800cebe:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cec2:	683b      	ldr	r3, [r7, #0]
 800cec4:	00db      	lsls	r3, r3, #3
 800cec6:	68fa      	ldr	r2, [r7, #12]
 800cec8:	4413      	add	r3, r2
 800ceca:	edd3 6a01 	vldr	s13, [r3, #4]
 800cece:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ced0:	edd3 7a00 	vldr	s15, [r3]
 800ced4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ced8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cedc:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 800cee0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cee2:	00db      	lsls	r3, r3, #3
 800cee4:	68fa      	ldr	r2, [r7, #12]
 800cee6:	4413      	add	r3, r2
 800cee8:	ed93 7a00 	vldr	s14, [r3]
 800ceec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceee:	edd3 7a00 	vldr	s15, [r3]
 800cef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cef6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cef8:	00db      	lsls	r3, r3, #3
 800cefa:	68fa      	ldr	r2, [r7, #12]
 800cefc:	4413      	add	r3, r2
 800cefe:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf02:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf04:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf10:	edc7 7a06 	vstr	s15, [r7, #24]
 800cf14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf16:	00db      	lsls	r3, r3, #3
 800cf18:	68fa      	ldr	r2, [r7, #12]
 800cf1a:	4413      	add	r3, r2
 800cf1c:	ed93 7a00 	vldr	s14, [r3]
 800cf20:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf22:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf26:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf2a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf2c:	00db      	lsls	r3, r3, #3
 800cf2e:	68fa      	ldr	r2, [r7, #12]
 800cf30:	4413      	add	r3, r2
 800cf32:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf36:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf38:	edd3 7a00 	vldr	s15, [r3]
 800cf3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf40:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf44:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 800cf48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf4a:	00db      	lsls	r3, r3, #3
 800cf4c:	68fa      	ldr	r2, [r7, #12]
 800cf4e:	4413      	add	r3, r2
 800cf50:	ed93 7a00 	vldr	s14, [r3]
 800cf54:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf56:	edd3 7a00 	vldr	s15, [r3]
 800cf5a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf5e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf60:	00db      	lsls	r3, r3, #3
 800cf62:	68fa      	ldr	r2, [r7, #12]
 800cf64:	4413      	add	r3, r2
 800cf66:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf6c:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf78:	edc7 7a08 	vstr	s15, [r7, #32]
 800cf7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7e:	00db      	lsls	r3, r3, #3
 800cf80:	68fa      	ldr	r2, [r7, #12]
 800cf82:	4413      	add	r3, r2
 800cf84:	ed93 7a00 	vldr	s14, [r3]
 800cf88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf8a:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf8e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf92:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf94:	00db      	lsls	r3, r3, #3
 800cf96:	68fa      	ldr	r2, [r7, #12]
 800cf98:	4413      	add	r3, r2
 800cf9a:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf9e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cfa0:	edd3 7a00 	vldr	s15, [r3]
 800cfa4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cfa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfac:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 800cfb0:	68fb      	ldr	r3, [r7, #12]
 800cfb2:	ed93 7a00 	vldr	s14, [r3]
 800cfb6:	edd7 7a06 	vldr	s15, [r7, #24]
 800cfba:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfbe:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800cfc2:	68fb      	ldr	r3, [r7, #12]
 800cfc4:	ed93 7a01 	vldr	s14, [r3, #4]
 800cfc8:	edd7 7a07 	vldr	s15, [r7, #28]
 800cfcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfd0:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	ed93 7a00 	vldr	s14, [r3]
 800cfda:	edd7 7a06 	vldr	s15, [r7, #24]
 800cfde:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	edc3 7a00 	vstr	s15, [r3]
 800cfe8:	68fb      	ldr	r3, [r7, #12]
 800cfea:	ed93 7a01 	vldr	s14, [r3, #4]
 800cfee:	edd7 7a07 	vldr	s15, [r7, #28]
 800cff2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cff6:	68fb      	ldr	r3, [r7, #12]
 800cff8:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 800cffc:	ed97 7a04 	vldr	s14, [r7, #16]
 800d000:	edd7 7a08 	vldr	s15, [r7, #32]
 800d004:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d008:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800d00c:	ed97 7a05 	vldr	s14, [r7, #20]
 800d010:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d014:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d018:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 800d01c:	ed97 7a04 	vldr	s14, [r7, #16]
 800d020:	edd7 7a08 	vldr	s15, [r7, #32]
 800d024:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d028:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d02c:	ed97 7a05 	vldr	s14, [r7, #20]
 800d030:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d034:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d038:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	ed93 7a00 	vldr	s14, [r3]
 800d042:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d046:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d048:	00db      	lsls	r3, r3, #3
 800d04a:	68fa      	ldr	r2, [r7, #12]
 800d04c:	4413      	add	r3, r2
 800d04e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d052:	edc3 7a00 	vstr	s15, [r3]
 800d056:	68fb      	ldr	r3, [r7, #12]
 800d058:	ed93 7a01 	vldr	s14, [r3, #4]
 800d05c:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d060:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d062:	00db      	lsls	r3, r3, #3
 800d064:	68fa      	ldr	r2, [r7, #12]
 800d066:	4413      	add	r3, r2
 800d068:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d06c:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 800d070:	68bb      	ldr	r3, [r7, #8]
 800d072:	00db      	lsls	r3, r3, #3
 800d074:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d076:	4413      	add	r3, r2
 800d078:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 800d07a:	68bb      	ldr	r3, [r7, #8]
 800d07c:	011b      	lsls	r3, r3, #4
 800d07e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d080:	4413      	add	r3, r2
 800d082:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 800d084:	68ba      	ldr	r2, [r7, #8]
 800d086:	4613      	mov	r3, r2
 800d088:	005b      	lsls	r3, r3, #1
 800d08a:	4413      	add	r3, r2
 800d08c:	00db      	lsls	r3, r3, #3
 800d08e:	461a      	mov	r2, r3
 800d090:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d092:	4413      	add	r3, r2
 800d094:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	ed93 7a00 	vldr	s14, [r3]
 800d09c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d0a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0a4:	68fb      	ldr	r3, [r7, #12]
 800d0a6:	edc3 7a00 	vstr	s15, [r3]
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	ed93 7a01 	vldr	s14, [r3, #4]
 800d0b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d0b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0b8:	68fb      	ldr	r3, [r7, #12]
 800d0ba:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 800d0be:	687b      	ldr	r3, [r7, #4]
 800d0c0:	685b      	ldr	r3, [r3, #4]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d030      	beq.n	800d128 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 800d0c6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d0ca:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0da:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 800d0de:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d0e2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d0e6:	683b      	ldr	r3, [r7, #0]
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0f2:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 800d0f6:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d0fa:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	4413      	add	r3, r2
 800d106:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d10a:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 800d10e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d112:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d116:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d118:	00db      	lsls	r3, r3, #3
 800d11a:	68fa      	ldr	r2, [r7, #12]
 800d11c:	4413      	add	r3, r2
 800d11e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d122:	edc3 7a01 	vstr	s15, [r3, #4]
 800d126:	e02f      	b.n	800d188 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 800d128:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d12c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	00db      	lsls	r3, r3, #3
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	4413      	add	r3, r2
 800d138:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d13c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 800d140:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d144:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d148:	683b      	ldr	r3, [r7, #0]
 800d14a:	00db      	lsls	r3, r3, #3
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	4413      	add	r3, r2
 800d150:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d154:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 800d158:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d15c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	4413      	add	r3, r2
 800d168:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d16c:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 800d170:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d174:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d178:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d17a:	00db      	lsls	r3, r3, #3
 800d17c:	68fa      	ldr	r2, [r7, #12]
 800d17e:	4413      	add	r3, r2
 800d180:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d184:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 800d188:	68fb      	ldr	r3, [r7, #12]
 800d18a:	3308      	adds	r3, #8
 800d18c:	60fb      	str	r3, [r7, #12]
    }while(--k);
 800d18e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d190:	3b01      	subs	r3, #1
 800d192:	64bb      	str	r3, [r7, #72]	; 0x48
 800d194:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d196:	2b00      	cmp	r3, #0
 800d198:	bf14      	ite	ne
 800d19a:	2301      	movne	r3, #1
 800d19c:	2300      	moveq	r3, #0
 800d19e:	b2db      	uxtb	r3, r3
 800d1a0:	2b00      	cmp	r3, #0
 800d1a2:	d000      	beq.n	800d1a6 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 800d1a4:	e668      	b.n	800ce78 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 800d1a6:	bf00      	nop
 800d1a8:	375c      	adds	r7, #92	; 0x5c
 800d1aa:	46bd      	mov	sp, r7
 800d1ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1b0:	4770      	bx	lr
	...

0800d1b4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 800d1b4:	b5b0      	push	{r4, r5, r7, lr}
 800d1b6:	b094      	sub	sp, #80	; 0x50
 800d1b8:	af00      	add	r7, sp, #0
 800d1ba:	60f8      	str	r0, [r7, #12]
 800d1bc:	60b9      	str	r1, [r7, #8]
 800d1be:	607a      	str	r2, [r7, #4]
 800d1c0:	603b      	str	r3, [r7, #0]
     size_t k=m;
 800d1c2:	683b      	ldr	r3, [r7, #0]
 800d1c4:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 800d1c6:	683b      	ldr	r3, [r7, #0]
 800d1c8:	005b      	lsls	r3, r3, #1
 800d1ca:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 800d1cc:	68bb      	ldr	r3, [r7, #8]
 800d1ce:	683a      	ldr	r2, [r7, #0]
 800d1d0:	fb02 f303 	mul.w	r3, r2, r3
 800d1d4:	6879      	ldr	r1, [r7, #4]
 800d1d6:	3321      	adds	r3, #33	; 0x21
 800d1d8:	f107 0210 	add.w	r2, r7, #16
 800d1dc:	00db      	lsls	r3, r3, #3
 800d1de:	440b      	add	r3, r1
 800d1e0:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d1e4:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d1ee:	647b      	str	r3, [r7, #68]	; 0x44
 800d1f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1f2:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	00db      	lsls	r3, r3, #3
 800d1f8:	68fa      	ldr	r2, [r7, #12]
 800d1fa:	4413      	add	r3, r2
 800d1fc:	ed93 7a00 	vldr	s14, [r3]
 800d200:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d202:	edd3 7a00 	vldr	s15, [r3]
 800d206:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d20a:	683b      	ldr	r3, [r7, #0]
 800d20c:	00db      	lsls	r3, r3, #3
 800d20e:	68fa      	ldr	r2, [r7, #12]
 800d210:	4413      	add	r3, r2
 800d212:	edd3 6a01 	vldr	s13, [r3, #4]
 800d216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d218:	edd3 7a01 	vldr	s15, [r3, #4]
 800d21c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d220:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d224:	edc7 7a08 	vstr	s15, [r7, #32]
 800d228:	683b      	ldr	r3, [r7, #0]
 800d22a:	00db      	lsls	r3, r3, #3
 800d22c:	68fa      	ldr	r2, [r7, #12]
 800d22e:	4413      	add	r3, r2
 800d230:	ed93 7a00 	vldr	s14, [r3]
 800d234:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d236:	edd3 7a01 	vldr	s15, [r3, #4]
 800d23a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d23e:	683b      	ldr	r3, [r7, #0]
 800d240:	00db      	lsls	r3, r3, #3
 800d242:	68fa      	ldr	r2, [r7, #12]
 800d244:	4413      	add	r3, r2
 800d246:	edd3 6a01 	vldr	s13, [r3, #4]
 800d24a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d24c:	edd3 7a00 	vldr	s15, [r3]
 800d250:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d254:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d258:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 800d25c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d25e:	00db      	lsls	r3, r3, #3
 800d260:	68fa      	ldr	r2, [r7, #12]
 800d262:	4413      	add	r3, r2
 800d264:	ed93 7a00 	vldr	s14, [r3]
 800d268:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d26a:	edd3 7a00 	vldr	s15, [r3]
 800d26e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d272:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d274:	00db      	lsls	r3, r3, #3
 800d276:	68fa      	ldr	r2, [r7, #12]
 800d278:	4413      	add	r3, r2
 800d27a:	edd3 6a01 	vldr	s13, [r3, #4]
 800d27e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d280:	edd3 7a01 	vldr	s15, [r3, #4]
 800d284:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d288:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d28c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800d290:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d292:	00db      	lsls	r3, r3, #3
 800d294:	68fa      	ldr	r2, [r7, #12]
 800d296:	4413      	add	r3, r2
 800d298:	ed93 7a00 	vldr	s14, [r3]
 800d29c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d29e:	edd3 7a01 	vldr	s15, [r3, #4]
 800d2a2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d2a8:	00db      	lsls	r3, r3, #3
 800d2aa:	68fa      	ldr	r2, [r7, #12]
 800d2ac:	4413      	add	r3, r2
 800d2ae:	edd3 6a01 	vldr	s13, [r3, #4]
 800d2b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2b4:	edd3 7a00 	vldr	s15, [r3]
 800d2b8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2c0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 800d2c4:	ed97 7a08 	vldr	s14, [r7, #32]
 800d2c8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2d0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d2d4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d2d8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d2dc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2e0:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 800d2e4:	ed97 7a08 	vldr	s14, [r7, #32]
 800d2e8:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2f0:	edc7 7a06 	vstr	s15, [r7, #24]
 800d2f4:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d2f8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d2fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d300:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	00db      	lsls	r3, r3, #3
 800d308:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d30a:	4413      	add	r3, r2
 800d30c:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800d30e:	68bb      	ldr	r3, [r7, #8]
 800d310:	011b      	lsls	r3, r3, #4
 800d312:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d314:	4413      	add	r3, r2
 800d316:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 800d318:	68fb      	ldr	r3, [r7, #12]
 800d31a:	681b      	ldr	r3, [r3, #0]
 800d31c:	4618      	mov	r0, r3
 800d31e:	f7f3 f933 	bl	8000588 <__aeabi_f2d>
 800d322:	4604      	mov	r4, r0
 800d324:	460d      	mov	r5, r1
 800d326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d328:	4618      	mov	r0, r3
 800d32a:	f7f3 f92d 	bl	8000588 <__aeabi_f2d>
 800d32e:	f04f 0200 	mov.w	r2, #0
 800d332:	4b57      	ldr	r3, [pc, #348]	; (800d490 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800d334:	f7f3 f980 	bl	8000638 <__aeabi_dmul>
 800d338:	4602      	mov	r2, r0
 800d33a:	460b      	mov	r3, r1
 800d33c:	4620      	mov	r0, r4
 800d33e:	4629      	mov	r1, r5
 800d340:	f7f2 ffc2 	bl	80002c8 <__aeabi_dsub>
 800d344:	4602      	mov	r2, r0
 800d346:	460b      	mov	r3, r1
 800d348:	4610      	mov	r0, r2
 800d34a:	4619      	mov	r1, r3
 800d34c:	683b      	ldr	r3, [r7, #0]
 800d34e:	00db      	lsls	r3, r3, #3
 800d350:	68fa      	ldr	r2, [r7, #12]
 800d352:	18d4      	adds	r4, r2, r3
 800d354:	f7f3 fc68 	bl	8000c28 <__aeabi_d2f>
 800d358:	4603      	mov	r3, r0
 800d35a:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 800d35c:	68fb      	ldr	r3, [r7, #12]
 800d35e:	685b      	ldr	r3, [r3, #4]
 800d360:	4618      	mov	r0, r3
 800d362:	f7f3 f911 	bl	8000588 <__aeabi_f2d>
 800d366:	4604      	mov	r4, r0
 800d368:	460d      	mov	r5, r1
 800d36a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d36c:	4618      	mov	r0, r3
 800d36e:	f7f3 f90b 	bl	8000588 <__aeabi_f2d>
 800d372:	f04f 0200 	mov.w	r2, #0
 800d376:	4b46      	ldr	r3, [pc, #280]	; (800d490 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800d378:	f7f3 f95e 	bl	8000638 <__aeabi_dmul>
 800d37c:	4602      	mov	r2, r0
 800d37e:	460b      	mov	r3, r1
 800d380:	4620      	mov	r0, r4
 800d382:	4629      	mov	r1, r5
 800d384:	f7f2 ffa0 	bl	80002c8 <__aeabi_dsub>
 800d388:	4602      	mov	r2, r0
 800d38a:	460b      	mov	r3, r1
 800d38c:	4610      	mov	r0, r2
 800d38e:	4619      	mov	r1, r3
 800d390:	683b      	ldr	r3, [r7, #0]
 800d392:	00db      	lsls	r3, r3, #3
 800d394:	68fa      	ldr	r2, [r7, #12]
 800d396:	18d4      	adds	r4, r2, r3
 800d398:	f7f3 fc46 	bl	8000c28 <__aeabi_d2f>
 800d39c:	4603      	mov	r3, r0
 800d39e:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 800d3a0:	ed97 7a06 	vldr	s14, [r7, #24]
 800d3a4:	edd7 7a05 	vldr	s15, [r7, #20]
 800d3a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3ac:	edc7 7a06 	vstr	s15, [r7, #24]
 800d3b0:	ed97 7a07 	vldr	s14, [r7, #28]
 800d3b4:	edd7 7a05 	vldr	s15, [r7, #20]
 800d3b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3bc:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800d3c0:	68fb      	ldr	r3, [r7, #12]
 800d3c2:	ed93 7a00 	vldr	s14, [r3]
 800d3c6:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d3ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ce:	68fb      	ldr	r3, [r7, #12]
 800d3d0:	edc3 7a00 	vstr	s15, [r3]
 800d3d4:	68fb      	ldr	r3, [r7, #12]
 800d3d6:	ed93 7a01 	vldr	s14, [r3, #4]
 800d3da:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d3de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3e2:	68fb      	ldr	r3, [r7, #12]
 800d3e4:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 800d3e8:	683b      	ldr	r3, [r7, #0]
 800d3ea:	00db      	lsls	r3, r3, #3
 800d3ec:	68fa      	ldr	r2, [r7, #12]
 800d3ee:	4413      	add	r3, r2
 800d3f0:	ed93 7a00 	vldr	s14, [r3]
 800d3f4:	edd7 7a07 	vldr	s15, [r7, #28]
 800d3f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3fa:	00db      	lsls	r3, r3, #3
 800d3fc:	68fa      	ldr	r2, [r7, #12]
 800d3fe:	4413      	add	r3, r2
 800d400:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d404:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 800d408:	683b      	ldr	r3, [r7, #0]
 800d40a:	00db      	lsls	r3, r3, #3
 800d40c:	68fa      	ldr	r2, [r7, #12]
 800d40e:	4413      	add	r3, r2
 800d410:	ed93 7a01 	vldr	s14, [r3, #4]
 800d414:	edd7 7a06 	vldr	s15, [r7, #24]
 800d418:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d41a:	00db      	lsls	r3, r3, #3
 800d41c:	68fa      	ldr	r2, [r7, #12]
 800d41e:	4413      	add	r3, r2
 800d420:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d424:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 800d428:	683b      	ldr	r3, [r7, #0]
 800d42a:	00db      	lsls	r3, r3, #3
 800d42c:	68fa      	ldr	r2, [r7, #12]
 800d42e:	4413      	add	r3, r2
 800d430:	ed93 7a00 	vldr	s14, [r3]
 800d434:	edd7 7a07 	vldr	s15, [r7, #28]
 800d438:	683b      	ldr	r3, [r7, #0]
 800d43a:	00db      	lsls	r3, r3, #3
 800d43c:	68fa      	ldr	r2, [r7, #12]
 800d43e:	4413      	add	r3, r2
 800d440:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d444:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 800d448:	683b      	ldr	r3, [r7, #0]
 800d44a:	00db      	lsls	r3, r3, #3
 800d44c:	68fa      	ldr	r2, [r7, #12]
 800d44e:	4413      	add	r3, r2
 800d450:	ed93 7a01 	vldr	s14, [r3, #4]
 800d454:	edd7 7a06 	vldr	s15, [r7, #24]
 800d458:	683b      	ldr	r3, [r7, #0]
 800d45a:	00db      	lsls	r3, r3, #3
 800d45c:	68fa      	ldr	r2, [r7, #12]
 800d45e:	4413      	add	r3, r2
 800d460:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d464:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 800d468:	68fb      	ldr	r3, [r7, #12]
 800d46a:	3308      	adds	r3, #8
 800d46c:	60fb      	str	r3, [r7, #12]
     }while(--k);
 800d46e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d470:	3b01      	subs	r3, #1
 800d472:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d474:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d476:	2b00      	cmp	r3, #0
 800d478:	bf14      	ite	ne
 800d47a:	2301      	movne	r3, #1
 800d47c:	2300      	moveq	r3, #0
 800d47e:	b2db      	uxtb	r3, r3
 800d480:	2b00      	cmp	r3, #0
 800d482:	d000      	beq.n	800d486 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 800d484:	e6b6      	b.n	800d1f4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 800d486:	bf00      	nop
 800d488:	3750      	adds	r7, #80	; 0x50
 800d48a:	46bd      	mov	sp, r7
 800d48c:	bdb0      	pop	{r4, r5, r7, pc}
 800d48e:	bf00      	nop
 800d490:	3fe00000 	.word	0x3fe00000

0800d494 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800d494:	b480      	push	{r7}
 800d496:	b0ab      	sub	sp, #172	; 0xac
 800d498:	af00      	add	r7, sp, #0
 800d49a:	60f8      	str	r0, [r7, #12]
 800d49c:	60b9      	str	r1, [r7, #8]
 800d49e:	607a      	str	r2, [r7, #4]
 800d4a0:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 800d4a2:	687b      	ldr	r3, [r7, #4]
 800d4a4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d4a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 800d4ac:	683b      	ldr	r3, [r7, #0]
 800d4ae:	68ba      	ldr	r2, [r7, #8]
 800d4b0:	fb02 f303 	mul.w	r3, r2, r3
 800d4b4:	00db      	lsls	r3, r3, #3
 800d4b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d4ba:	441a      	add	r2, r3
 800d4bc:	f107 0318 	add.w	r3, r7, #24
 800d4c0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4c4:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 800d4c8:	683b      	ldr	r3, [r7, #0]
 800d4ca:	68ba      	ldr	r2, [r7, #8]
 800d4cc:	fb02 f303 	mul.w	r3, r2, r3
 800d4d0:	011b      	lsls	r3, r3, #4
 800d4d2:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d4d6:	441a      	add	r2, r3
 800d4d8:	f107 0310 	add.w	r3, r7, #16
 800d4dc:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4e0:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 800d4e4:	68fb      	ldr	r3, [r7, #12]
 800d4e6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800d4ea:	683b      	ldr	r3, [r7, #0]
 800d4ec:	00db      	lsls	r3, r3, #3
 800d4ee:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d4f2:	4413      	add	r3, r2
 800d4f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	011b      	lsls	r3, r3, #4
 800d4fc:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d500:	4413      	add	r3, r2
 800d502:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 800d506:	683a      	ldr	r2, [r7, #0]
 800d508:	4613      	mov	r3, r2
 800d50a:	005b      	lsls	r3, r3, #1
 800d50c:	4413      	add	r3, r2
 800d50e:	00db      	lsls	r3, r3, #3
 800d510:	461a      	mov	r2, r3
 800d512:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d516:	4413      	add	r3, r2
 800d518:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800d51c:	683b      	ldr	r3, [r7, #0]
 800d51e:	015b      	lsls	r3, r3, #5
 800d520:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d524:	4413      	add	r3, r2
 800d526:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800d52a:	687b      	ldr	r3, [r7, #4]
 800d52c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d530:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 800d534:	2300      	movs	r3, #0
 800d536:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d53a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	429a      	cmp	r2, r3
 800d542:	f280 82a9 	bge.w	800da98 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 800d546:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d54a:	f107 0320 	add.w	r3, r7, #32
 800d54e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d552:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 800d556:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d55a:	ed93 7a00 	vldr	s14, [r3]
 800d55e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d562:	68ba      	ldr	r2, [r7, #8]
 800d564:	fb02 f303 	mul.w	r3, r2, r3
 800d568:	00db      	lsls	r3, r3, #3
 800d56a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d56e:	4413      	add	r3, r2
 800d570:	edd3 7a00 	vldr	s15, [r3]
 800d574:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d578:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d57c:	edd3 6a01 	vldr	s13, [r3, #4]
 800d580:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d584:	68ba      	ldr	r2, [r7, #8]
 800d586:	fb02 f303 	mul.w	r3, r2, r3
 800d58a:	00db      	lsls	r3, r3, #3
 800d58c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d590:	4413      	add	r3, r2
 800d592:	edd3 7a01 	vldr	s15, [r3, #4]
 800d596:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d59a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d59e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800d5a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d5a6:	ed93 7a00 	vldr	s14, [r3]
 800d5aa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5ae:	68ba      	ldr	r2, [r7, #8]
 800d5b0:	fb02 f303 	mul.w	r3, r2, r3
 800d5b4:	00db      	lsls	r3, r3, #3
 800d5b6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d5ba:	4413      	add	r3, r2
 800d5bc:	edd3 7a01 	vldr	s15, [r3, #4]
 800d5c0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5c4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d5c8:	edd3 6a01 	vldr	s13, [r3, #4]
 800d5cc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5d0:	68ba      	ldr	r2, [r7, #8]
 800d5d2:	fb02 f303 	mul.w	r3, r2, r3
 800d5d6:	00db      	lsls	r3, r3, #3
 800d5d8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d5dc:	4413      	add	r3, r2
 800d5de:	edd3 7a00 	vldr	s15, [r3]
 800d5e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5ea:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 800d5ee:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5f2:	ed93 7a00 	vldr	s14, [r3]
 800d5f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5fa:	68ba      	ldr	r2, [r7, #8]
 800d5fc:	fb02 f303 	mul.w	r3, r2, r3
 800d600:	011b      	lsls	r3, r3, #4
 800d602:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d606:	4413      	add	r3, r2
 800d608:	edd3 7a00 	vldr	s15, [r3]
 800d60c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d610:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d614:	edd3 6a01 	vldr	s13, [r3, #4]
 800d618:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d61c:	68ba      	ldr	r2, [r7, #8]
 800d61e:	fb02 f303 	mul.w	r3, r2, r3
 800d622:	011b      	lsls	r3, r3, #4
 800d624:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d628:	4413      	add	r3, r2
 800d62a:	edd3 7a01 	vldr	s15, [r3, #4]
 800d62e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d632:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d636:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d63a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d63e:	ed93 7a00 	vldr	s14, [r3]
 800d642:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d646:	68ba      	ldr	r2, [r7, #8]
 800d648:	fb02 f303 	mul.w	r3, r2, r3
 800d64c:	011b      	lsls	r3, r3, #4
 800d64e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d652:	4413      	add	r3, r2
 800d654:	edd3 7a01 	vldr	s15, [r3, #4]
 800d658:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d65c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d660:	edd3 6a01 	vldr	s13, [r3, #4]
 800d664:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d668:	68ba      	ldr	r2, [r7, #8]
 800d66a:	fb02 f303 	mul.w	r3, r2, r3
 800d66e:	011b      	lsls	r3, r3, #4
 800d670:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d674:	4413      	add	r3, r2
 800d676:	edd3 7a00 	vldr	s15, [r3]
 800d67a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d67e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d682:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 800d686:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d68a:	ed93 7a00 	vldr	s14, [r3]
 800d68e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d692:	68ba      	ldr	r2, [r7, #8]
 800d694:	fb02 f203 	mul.w	r2, r2, r3
 800d698:	4613      	mov	r3, r2
 800d69a:	005b      	lsls	r3, r3, #1
 800d69c:	4413      	add	r3, r2
 800d69e:	00db      	lsls	r3, r3, #3
 800d6a0:	461a      	mov	r2, r3
 800d6a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6a6:	4413      	add	r3, r2
 800d6a8:	edd3 7a00 	vldr	s15, [r3]
 800d6ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6b4:	edd3 6a01 	vldr	s13, [r3, #4]
 800d6b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6bc:	68ba      	ldr	r2, [r7, #8]
 800d6be:	fb02 f203 	mul.w	r2, r2, r3
 800d6c2:	4613      	mov	r3, r2
 800d6c4:	005b      	lsls	r3, r3, #1
 800d6c6:	4413      	add	r3, r2
 800d6c8:	00db      	lsls	r3, r3, #3
 800d6ca:	461a      	mov	r2, r3
 800d6cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6d0:	4413      	add	r3, r2
 800d6d2:	edd3 7a01 	vldr	s15, [r3, #4]
 800d6d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6de:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800d6e2:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6e6:	ed93 7a00 	vldr	s14, [r3]
 800d6ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6ee:	68ba      	ldr	r2, [r7, #8]
 800d6f0:	fb02 f203 	mul.w	r2, r2, r3
 800d6f4:	4613      	mov	r3, r2
 800d6f6:	005b      	lsls	r3, r3, #1
 800d6f8:	4413      	add	r3, r2
 800d6fa:	00db      	lsls	r3, r3, #3
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d702:	4413      	add	r3, r2
 800d704:	edd3 7a01 	vldr	s15, [r3, #4]
 800d708:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d70c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d710:	edd3 6a01 	vldr	s13, [r3, #4]
 800d714:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d718:	68ba      	ldr	r2, [r7, #8]
 800d71a:	fb02 f203 	mul.w	r2, r2, r3
 800d71e:	4613      	mov	r3, r2
 800d720:	005b      	lsls	r3, r3, #1
 800d722:	4413      	add	r3, r2
 800d724:	00db      	lsls	r3, r3, #3
 800d726:	461a      	mov	r2, r3
 800d728:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d72c:	4413      	add	r3, r2
 800d72e:	edd3 7a00 	vldr	s15, [r3]
 800d732:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d736:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d73a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 800d73e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d742:	ed93 7a00 	vldr	s14, [r3]
 800d746:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d74a:	68ba      	ldr	r2, [r7, #8]
 800d74c:	fb02 f303 	mul.w	r3, r2, r3
 800d750:	015b      	lsls	r3, r3, #5
 800d752:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d756:	4413      	add	r3, r2
 800d758:	edd3 7a00 	vldr	s15, [r3]
 800d75c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d760:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d764:	edd3 6a01 	vldr	s13, [r3, #4]
 800d768:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d76c:	68ba      	ldr	r2, [r7, #8]
 800d76e:	fb02 f303 	mul.w	r3, r2, r3
 800d772:	015b      	lsls	r3, r3, #5
 800d774:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d778:	4413      	add	r3, r2
 800d77a:	edd3 7a01 	vldr	s15, [r3, #4]
 800d77e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d782:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d786:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800d78a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d78e:	ed93 7a00 	vldr	s14, [r3]
 800d792:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d796:	68ba      	ldr	r2, [r7, #8]
 800d798:	fb02 f303 	mul.w	r3, r2, r3
 800d79c:	015b      	lsls	r3, r3, #5
 800d79e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d7a2:	4413      	add	r3, r2
 800d7a4:	edd3 7a01 	vldr	s15, [r3, #4]
 800d7a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d7ac:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d7b0:	edd3 6a01 	vldr	s13, [r3, #4]
 800d7b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7b8:	68ba      	ldr	r2, [r7, #8]
 800d7ba:	fb02 f303 	mul.w	r3, r2, r3
 800d7be:	015b      	lsls	r3, r3, #5
 800d7c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d7c4:	4413      	add	r3, r2
 800d7c6:	edd3 7a00 	vldr	s15, [r3]
 800d7ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7d2:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 800d7d6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7da:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d7de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7e2:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800d7e6:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d7ea:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d7ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7f2:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 800d7f6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7fa:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d7fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d802:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 800d806:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d80a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d80e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d812:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 800d816:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d81a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d81e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d822:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 800d826:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d82a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d82e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d832:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 800d836:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d83a:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d83e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d842:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800d846:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d84a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d84e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d852:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 800d856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d85a:	ed93 7a00 	vldr	s14, [r3]
 800d85e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d862:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d866:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d86a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d86e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d872:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 800d876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d87a:	ed93 7a01 	vldr	s14, [r3, #4]
 800d87e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800d882:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800d886:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d88a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d88e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d892:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 800d896:	ed97 7a08 	vldr	s14, [r7, #32]
 800d89a:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d89e:	edd7 7a06 	vldr	s15, [r7, #24]
 800d8a2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8aa:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800d8ae:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8ba:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 800d8be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d8c2:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800d8c6:	edd7 7a06 	vldr	s15, [r7, #24]
 800d8ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8ce:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8d2:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800d8d6:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8da:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8e2:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 800d8e6:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800d8ea:	edd7 7a07 	vldr	s15, [r7, #28]
 800d8ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8f2:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800d8f6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8fa:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d902:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 800d906:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800d90a:	edd7 7a07 	vldr	s15, [r7, #28]
 800d90e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d912:	eeb1 7a67 	vneg.f32	s14, s15
 800d916:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800d91a:	edd7 7a05 	vldr	s15, [r7, #20]
 800d91e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d922:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d926:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 800d92a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d92e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d932:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d936:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d93a:	edc3 7a00 	vstr	s15, [r3]
 800d93e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d942:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d94a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d94e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 800d952:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d956:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d95a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d95e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d962:	edc3 7a00 	vstr	s15, [r3]
 800d966:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d96a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d96e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d972:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d976:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 800d97a:	ed97 7a08 	vldr	s14, [r7, #32]
 800d97e:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d982:	edd7 7a04 	vldr	s15, [r7, #16]
 800d986:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d98a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d98e:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800d992:	edd7 7a06 	vldr	s15, [r7, #24]
 800d996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d99a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d99e:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 800d9a2:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d9a6:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800d9aa:	edd7 7a04 	vldr	s15, [r7, #16]
 800d9ae:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9b2:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d9b6:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800d9ba:	edd7 7a06 	vldr	s15, [r7, #24]
 800d9be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9c6:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 800d9ca:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800d9ce:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9d6:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800d9da:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9de:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9e6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 800d9ea:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800d9ee:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9f2:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9f6:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800d9fa:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800da02:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da06:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 800da0a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800da0e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800da12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da16:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da1a:	edc3 7a00 	vstr	s15, [r3]
 800da1e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800da22:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800da26:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da2a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da2e:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 800da32:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800da36:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800da3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da3e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da42:	edc3 7a00 	vstr	s15, [r3]
 800da46:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800da4a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800da4e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da52:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da56:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 800da5a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800da5e:	3308      	adds	r3, #8
 800da60:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800da64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da68:	3308      	adds	r3, #8
 800da6a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800da6e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da72:	3308      	adds	r3, #8
 800da74:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800da78:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da7c:	3308      	adds	r3, #8
 800da7e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da82:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da86:	3308      	adds	r3, #8
 800da88:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 800da8c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da90:	3301      	adds	r3, #1
 800da92:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da96:	e550      	b.n	800d53a <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 800da98:	bf00      	nop
 800da9a:	37ac      	adds	r7, #172	; 0xac
 800da9c:	46bd      	mov	sp, r7
 800da9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa2:	4770      	bx	lr

0800daa4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 800daa4:	b580      	push	{r7, lr}
 800daa6:	b08e      	sub	sp, #56	; 0x38
 800daa8:	af00      	add	r7, sp, #0
 800daaa:	60f8      	str	r0, [r7, #12]
 800daac:	60b9      	str	r1, [r7, #8]
 800daae:	607a      	str	r2, [r7, #4]
 800dab0:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800dab8:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 800dac0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dac2:	00db      	lsls	r3, r3, #3
 800dac4:	4618      	mov	r0, r3
 800dac6:	f00d fb75 	bl	801b1b4 <malloc>
 800daca:	4603      	mov	r3, r0
 800dacc:	61bb      	str	r3, [r7, #24]

    for ( u=0; u<m; ++u ) {
 800dace:	2300      	movs	r3, #0
 800dad0:	637b      	str	r3, [r7, #52]	; 0x34
 800dad2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dad4:	683b      	ldr	r3, [r7, #0]
 800dad6:	429a      	cmp	r2, r3
 800dad8:	f280 80b6 	bge.w	800dc48 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a4>
        k=u;
 800dadc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dade:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800dae0:	2300      	movs	r3, #0
 800dae2:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dae6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dae8:	429a      	cmp	r2, r3
 800daea:	da14      	bge.n	800db16 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
            scratch[q1] = Fout[ k  ];
 800daec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daee:	00db      	lsls	r3, r3, #3
 800daf0:	68fa      	ldr	r2, [r7, #12]
 800daf2:	18d1      	adds	r1, r2, r3
 800daf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf6:	00db      	lsls	r3, r3, #3
 800daf8:	69ba      	ldr	r2, [r7, #24]
 800dafa:	4413      	add	r3, r2
 800dafc:	460a      	mov	r2, r1
 800dafe:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db02:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 800db06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db08:	683b      	ldr	r3, [r7, #0]
 800db0a:	4413      	add	r3, r2
 800db0c:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800db0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800db10:	3301      	adds	r3, #1
 800db12:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db14:	e7e6      	b.n	800dae4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x40>
        }

        k=u;
 800db16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db18:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800db1a:	2300      	movs	r3, #0
 800db1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db22:	429a      	cmp	r2, r3
 800db24:	f280 808c 	bge.w	800dc40 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19c>
            int twidx=0;
 800db28:	2300      	movs	r3, #0
 800db2a:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 800db2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db2e:	00db      	lsls	r3, r3, #3
 800db30:	68fa      	ldr	r2, [r7, #12]
 800db32:	4413      	add	r3, r2
 800db34:	69ba      	ldr	r2, [r7, #24]
 800db36:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db3a:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 800db3e:	2301      	movs	r3, #1
 800db40:	62bb      	str	r3, [r7, #40]	; 0x28
 800db42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db46:	429a      	cmp	r2, r3
 800db48:	da72      	bge.n	800dc30 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18c>
                twidx += fstride * k;
 800db4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db4c:	68ba      	ldr	r2, [r7, #8]
 800db4e:	fb02 f203 	mul.w	r2, r2, r3
 800db52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db54:	4413      	add	r3, r2
 800db56:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 800db58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db5a:	69fb      	ldr	r3, [r7, #28]
 800db5c:	429a      	cmp	r2, r3
 800db5e:	db03      	blt.n	800db68 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc4>
 800db60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db62:	69fb      	ldr	r3, [r7, #28]
 800db64:	1ad3      	subs	r3, r2, r3
 800db66:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 800db68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6a:	00db      	lsls	r3, r3, #3
 800db6c:	69ba      	ldr	r2, [r7, #24]
 800db6e:	4413      	add	r3, r2
 800db70:	ed93 7a00 	vldr	s14, [r3]
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	00db      	lsls	r3, r3, #3
 800db78:	6a3a      	ldr	r2, [r7, #32]
 800db7a:	4413      	add	r3, r2
 800db7c:	edd3 7a00 	vldr	s15, [r3]
 800db80:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db86:	00db      	lsls	r3, r3, #3
 800db88:	69ba      	ldr	r2, [r7, #24]
 800db8a:	4413      	add	r3, r2
 800db8c:	edd3 6a01 	vldr	s13, [r3, #4]
 800db90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	6a3a      	ldr	r2, [r7, #32]
 800db96:	4413      	add	r3, r2
 800db98:	edd3 7a01 	vldr	s15, [r3, #4]
 800db9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dba0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dba4:	edc7 7a04 	vstr	s15, [r7, #16]
 800dba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbaa:	00db      	lsls	r3, r3, #3
 800dbac:	69ba      	ldr	r2, [r7, #24]
 800dbae:	4413      	add	r3, r2
 800dbb0:	ed93 7a00 	vldr	s14, [r3]
 800dbb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbb6:	00db      	lsls	r3, r3, #3
 800dbb8:	6a3a      	ldr	r2, [r7, #32]
 800dbba:	4413      	add	r3, r2
 800dbbc:	edd3 7a01 	vldr	s15, [r3, #4]
 800dbc0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbc6:	00db      	lsls	r3, r3, #3
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	4413      	add	r3, r2
 800dbcc:	edd3 6a01 	vldr	s13, [r3, #4]
 800dbd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	6a3a      	ldr	r2, [r7, #32]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	edd3 7a00 	vldr	s15, [r3]
 800dbdc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbe0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbe4:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 800dbe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbea:	00db      	lsls	r3, r3, #3
 800dbec:	68fa      	ldr	r2, [r7, #12]
 800dbee:	4413      	add	r3, r2
 800dbf0:	ed93 7a00 	vldr	s14, [r3]
 800dbf4:	edd7 7a04 	vldr	s15, [r7, #16]
 800dbf8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbfa:	00db      	lsls	r3, r3, #3
 800dbfc:	68fa      	ldr	r2, [r7, #12]
 800dbfe:	4413      	add	r3, r2
 800dc00:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc04:	edc3 7a00 	vstr	s15, [r3]
 800dc08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc0a:	00db      	lsls	r3, r3, #3
 800dc0c:	68fa      	ldr	r2, [r7, #12]
 800dc0e:	4413      	add	r3, r2
 800dc10:	ed93 7a01 	vldr	s14, [r3, #4]
 800dc14:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc1a:	00db      	lsls	r3, r3, #3
 800dc1c:	68fa      	ldr	r2, [r7, #12]
 800dc1e:	4413      	add	r3, r2
 800dc20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc24:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 800dc28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc2e:	e788      	b.n	800db42 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9e>
            }
            k += m;
 800dc30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc32:	683b      	ldr	r3, [r7, #0]
 800dc34:	4413      	add	r3, r2
 800dc36:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800dc38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc3e:	e76e      	b.n	800db1e <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x7a>
    for ( u=0; u<m; ++u ) {
 800dc40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc42:	3301      	adds	r3, #1
 800dc44:	637b      	str	r3, [r7, #52]	; 0x34
 800dc46:	e744      	b.n	800dad2 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 800dc48:	69b8      	ldr	r0, [r7, #24]
 800dc4a:	f00d fabb 	bl	801b1c4 <free>
}
 800dc4e:	bf00      	nop
 800dc50:	3738      	adds	r7, #56	; 0x38
 800dc52:	46bd      	mov	sp, r7
 800dc54:	bd80      	pop	{r7, pc}
	...

0800dc58 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 800dc58:	b580      	push	{r7, lr}
 800dc5a:	b08a      	sub	sp, #40	; 0x28
 800dc5c:	af02      	add	r7, sp, #8
 800dc5e:	60f8      	str	r0, [r7, #12]
 800dc60:	60b9      	str	r1, [r7, #8]
 800dc62:	607a      	str	r2, [r7, #4]
 800dc64:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 800dc66:	68fb      	ldr	r3, [r7, #12]
 800dc68:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 800dc6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc6c:	1d1a      	adds	r2, r3, #4
 800dc6e:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc70:	681b      	ldr	r3, [r3, #0]
 800dc72:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 800dc74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc76:	1d1a      	adds	r2, r3, #4
 800dc78:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc7a:	681b      	ldr	r3, [r3, #0]
 800dc7c:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 800dc7e:	69bb      	ldr	r3, [r7, #24]
 800dc80:	697a      	ldr	r2, [r7, #20]
 800dc82:	fb02 f303 	mul.w	r3, r2, r3
 800dc86:	00db      	lsls	r3, r3, #3
 800dc88:	68fa      	ldr	r2, [r7, #12]
 800dc8a:	4413      	add	r3, r2
 800dc8c:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 800dc8e:	697b      	ldr	r3, [r7, #20]
 800dc90:	2b01      	cmp	r3, #1
 800dc92:	d11a      	bne.n	800dcca <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	68ba      	ldr	r2, [r7, #8]
 800dc98:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc9c:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 800dca0:	683b      	ldr	r3, [r7, #0]
 800dca2:	687a      	ldr	r2, [r7, #4]
 800dca4:	fb02 f303 	mul.w	r3, r2, r3
 800dca8:	00db      	lsls	r3, r3, #3
 800dcaa:	68ba      	ldr	r2, [r7, #8]
 800dcac:	4413      	add	r3, r2
 800dcae:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 800dcb0:	68fb      	ldr	r3, [r7, #12]
 800dcb2:	3308      	adds	r3, #8
 800dcb4:	60fb      	str	r3, [r7, #12]
 800dcb6:	68fa      	ldr	r2, [r7, #12]
 800dcb8:	693b      	ldr	r3, [r7, #16]
 800dcba:	429a      	cmp	r2, r3
 800dcbc:	bf14      	ite	ne
 800dcbe:	2301      	movne	r3, #1
 800dcc0:	2300      	moveq	r3, #0
 800dcc2:	b2db      	uxtb	r3, r3
 800dcc4:	2b00      	cmp	r3, #0
 800dcc6:	d024      	beq.n	800dd12 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800dcc8:	e7e4      	b.n	800dc94 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 800dcca:	69bb      	ldr	r3, [r7, #24]
 800dccc:	687a      	ldr	r2, [r7, #4]
 800dcce:	fb02 f203 	mul.w	r2, r2, r3
 800dcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcd4:	9301      	str	r3, [sp, #4]
 800dcd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcd8:	9300      	str	r3, [sp, #0]
 800dcda:	683b      	ldr	r3, [r7, #0]
 800dcdc:	68b9      	ldr	r1, [r7, #8]
 800dcde:	68f8      	ldr	r0, [r7, #12]
 800dce0:	f7ff ffba 	bl	800dc58 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 800dce4:	683b      	ldr	r3, [r7, #0]
 800dce6:	687a      	ldr	r2, [r7, #4]
 800dce8:	fb02 f303 	mul.w	r3, r2, r3
 800dcec:	00db      	lsls	r3, r3, #3
 800dcee:	68ba      	ldr	r2, [r7, #8]
 800dcf0:	4413      	add	r3, r2
 800dcf2:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	00db      	lsls	r3, r3, #3
 800dcf8:	68fa      	ldr	r2, [r7, #12]
 800dcfa:	4413      	add	r3, r2
 800dcfc:	60fb      	str	r3, [r7, #12]
 800dcfe:	68fa      	ldr	r2, [r7, #12]
 800dd00:	693b      	ldr	r3, [r7, #16]
 800dd02:	429a      	cmp	r2, r3
 800dd04:	bf14      	ite	ne
 800dd06:	2301      	movne	r3, #1
 800dd08:	2300      	moveq	r3, #0
 800dd0a:	b2db      	uxtb	r3, r3
 800dd0c:	2b00      	cmp	r3, #0
 800dd0e:	d000      	beq.n	800dd12 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800dd10:	e7db      	b.n	800dcca <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 800dd12:	69fb      	ldr	r3, [r7, #28]
 800dd14:	60fb      	str	r3, [r7, #12]
 800dd16:	69bb      	ldr	r3, [r7, #24]
 800dd18:	3b02      	subs	r3, #2
 800dd1a:	2b03      	cmp	r3, #3
 800dd1c:	d826      	bhi.n	800dd6c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 800dd1e:	a201      	add	r2, pc, #4	; (adr r2, 800dd24 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 800dd20:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd24:	0800dd35 	.word	0x0800dd35
 800dd28:	0800dd43 	.word	0x0800dd43
 800dd2c:	0800dd51 	.word	0x0800dd51
 800dd30:	0800dd5f 	.word	0x0800dd5f

    // recombine the p smaller DFTs
    switch (p) {
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 800dd34:	697b      	ldr	r3, [r7, #20]
 800dd36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd38:	6879      	ldr	r1, [r7, #4]
 800dd3a:	68f8      	ldr	r0, [r7, #12]
 800dd3c:	f7ff f806 	bl	800cd4c <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 800dd40:	e01d      	b.n	800dd7e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 800dd42:	697b      	ldr	r3, [r7, #20]
 800dd44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd46:	6879      	ldr	r1, [r7, #4]
 800dd48:	68f8      	ldr	r0, [r7, #12]
 800dd4a:	f7ff fa33 	bl	800d1b4 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 800dd4e:	e016      	b.n	800dd7e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 800dd50:	697b      	ldr	r3, [r7, #20]
 800dd52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd54:	6879      	ldr	r1, [r7, #4]
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f7ff f875 	bl	800ce46 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 800dd5c:	e00f      	b.n	800dd7e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 800dd5e:	697b      	ldr	r3, [r7, #20]
 800dd60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd62:	6879      	ldr	r1, [r7, #4]
 800dd64:	68f8      	ldr	r0, [r7, #12]
 800dd66:	f7ff fb95 	bl	800d494 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 800dd6a:	e008      	b.n	800dd7e <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 800dd6c:	69bb      	ldr	r3, [r7, #24]
 800dd6e:	9300      	str	r3, [sp, #0]
 800dd70:	697b      	ldr	r3, [r7, #20]
 800dd72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd74:	6879      	ldr	r1, [r7, #4]
 800dd76:	68f8      	ldr	r0, [r7, #12]
 800dd78:	f7ff fe94 	bl	800daa4 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 800dd7c:	bf00      	nop
    }
}
 800dd7e:	bf00      	nop
 800dd80:	3720      	adds	r7, #32
 800dd82:	46bd      	mov	sp, r7
 800dd84:	bd80      	pop	{r7, pc}
 800dd86:	bf00      	nop

0800dd88 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 800dd88:	b580      	push	{r7, lr}
 800dd8a:	b086      	sub	sp, #24
 800dd8c:	af00      	add	r7, sp, #0
 800dd8e:	6078      	str	r0, [r7, #4]
 800dd90:	6039      	str	r1, [r7, #0]
    int p=4;
 800dd92:	2304      	movs	r3, #4
 800dd94:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 800dd96:	6878      	ldr	r0, [r7, #4]
 800dd98:	f7f2 fbe4 	bl	8000564 <__aeabi_i2d>
 800dd9c:	4602      	mov	r2, r0
 800dd9e:	460b      	mov	r3, r1
 800dda0:	ec43 2b10 	vmov	d0, r2, r3
 800dda4:	f00a fcd2 	bl	801874c <sqrt>
 800dda8:	eeb0 7a40 	vmov.f32	s14, s0
 800ddac:	eef0 7a60 	vmov.f32	s15, s1
 800ddb0:	eeb0 0a47 	vmov.f32	s0, s14
 800ddb4:	eef0 0a67 	vmov.f32	s1, s15
 800ddb8:	f00a f976 	bl	80180a8 <floor>
 800ddbc:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 800ddc0:	687b      	ldr	r3, [r7, #4]
 800ddc2:	697a      	ldr	r2, [r7, #20]
 800ddc4:	fb93 f2f2 	sdiv	r2, r3, r2
 800ddc8:	6979      	ldr	r1, [r7, #20]
 800ddca:	fb01 f202 	mul.w	r2, r1, r2
 800ddce:	1a9b      	subs	r3, r3, r2
 800ddd0:	2b00      	cmp	r3, #0
 800ddd2:	d01e      	beq.n	800de12 <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	2b02      	cmp	r3, #2
 800ddd8:	d005      	beq.n	800dde6 <_ZL9kf_factoriPi+0x5e>
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	2b04      	cmp	r3, #4
 800ddde:	d105      	bne.n	800ddec <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 800dde0:	2302      	movs	r3, #2
 800dde2:	617b      	str	r3, [r7, #20]
 800dde4:	e006      	b.n	800ddf4 <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 800dde6:	2303      	movs	r3, #3
 800dde8:	617b      	str	r3, [r7, #20]
 800ddea:	e003      	b.n	800ddf4 <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 800ddec:	697b      	ldr	r3, [r7, #20]
 800ddee:	3302      	adds	r3, #2
 800ddf0:	617b      	str	r3, [r7, #20]
 800ddf2:	bf00      	nop
            }
            if (p > floor_sqrt)
 800ddf4:	6978      	ldr	r0, [r7, #20]
 800ddf6:	f7f2 fbb5 	bl	8000564 <__aeabi_i2d>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	460b      	mov	r3, r1
 800ddfe:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800de02:	f7f2 fe8b 	bl	8000b1c <__aeabi_dcmplt>
 800de06:	4603      	mov	r3, r0
 800de08:	2b00      	cmp	r3, #0
 800de0a:	d001      	beq.n	800de10 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	617b      	str	r3, [r7, #20]
        while (n % p) {
 800de10:	e7d6      	b.n	800ddc0 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 800de12:	687a      	ldr	r2, [r7, #4]
 800de14:	697b      	ldr	r3, [r7, #20]
 800de16:	fb92 f3f3 	sdiv	r3, r2, r3
 800de1a:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 800de1c:	683b      	ldr	r3, [r7, #0]
 800de1e:	1d1a      	adds	r2, r3, #4
 800de20:	603a      	str	r2, [r7, #0]
 800de22:	697a      	ldr	r2, [r7, #20]
 800de24:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 800de26:	683b      	ldr	r3, [r7, #0]
 800de28:	1d1a      	adds	r2, r3, #4
 800de2a:	603a      	str	r2, [r7, #0]
 800de2c:	687a      	ldr	r2, [r7, #4]
 800de2e:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	2b01      	cmp	r3, #1
 800de34:	dd00      	ble.n	800de38 <_ZL9kf_factoriPi+0xb0>
    do {
 800de36:	e7c3      	b.n	800ddc0 <_ZL9kf_factoriPi+0x38>
}
 800de38:	bf00      	nop
 800de3a:	3718      	adds	r7, #24
 800de3c:	46bd      	mov	sp, r7
 800de3e:	bd80      	pop	{r7, pc}

0800de40 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 800de40:	b5b0      	push	{r4, r5, r7, lr}
 800de42:	b08c      	sub	sp, #48	; 0x30
 800de44:	af00      	add	r7, sp, #0
 800de46:	60f8      	str	r0, [r7, #12]
 800de48:	60b9      	str	r1, [r7, #8]
 800de4a:	607a      	str	r2, [r7, #4]
 800de4c:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 800de4e:	2300      	movs	r3, #0
 800de50:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 800de52:	68fb      	ldr	r3, [r7, #12]
 800de54:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 800de56:	00db      	lsls	r3, r3, #3
 800de58:	61fb      	str	r3, [r7, #28]

    if ( lenmem==NULL ) {
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	2b00      	cmp	r3, #0
 800de5e:	d105      	bne.n	800de6c <kiss_fft_alloc+0x2c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 800de60:	69f8      	ldr	r0, [r7, #28]
 800de62:	f00d f9a7 	bl	801b1b4 <malloc>
 800de66:	4603      	mov	r3, r0
 800de68:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de6a:	e00c      	b.n	800de86 <kiss_fft_alloc+0x46>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	2b00      	cmp	r3, #0
 800de70:	d006      	beq.n	800de80 <kiss_fft_alloc+0x40>
 800de72:	683b      	ldr	r3, [r7, #0]
 800de74:	681b      	ldr	r3, [r3, #0]
 800de76:	69fa      	ldr	r2, [r7, #28]
 800de78:	429a      	cmp	r2, r3
 800de7a:	d801      	bhi.n	800de80 <kiss_fft_alloc+0x40>
            st = (kiss_fft_cfg)mem;
 800de7c:	687b      	ldr	r3, [r7, #4]
 800de7e:	62fb      	str	r3, [r7, #44]	; 0x2c
        *lenmem = memneeded;
 800de80:	683b      	ldr	r3, [r7, #0]
 800de82:	69fa      	ldr	r2, [r7, #28]
 800de84:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 800de86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de88:	2b00      	cmp	r3, #0
 800de8a:	d05d      	beq.n	800df48 <kiss_fft_alloc+0x108>
        int i;
        st->nfft=nfft;
 800de8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de8e:	68fa      	ldr	r2, [r7, #12]
 800de90:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 800de92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de94:	68ba      	ldr	r2, [r7, #8]
 800de96:	605a      	str	r2, [r3, #4]

        for (i=0;i<nfft;++i) {
 800de98:	2300      	movs	r3, #0
 800de9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800de9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	429a      	cmp	r2, r3
 800dea2:	da4b      	bge.n	800df3c <kiss_fft_alloc+0xfc>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800dea4:	a32e      	add	r3, pc, #184	; (adr r3, 800df60 <kiss_fft_alloc+0x120>)
 800dea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deaa:	e9c7 2304 	strd	r2, r3, [r7, #16]
            double phase = -2*pi*i / nfft;
 800deae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800deb0:	f7f2 fb58 	bl	8000564 <__aeabi_i2d>
 800deb4:	a32c      	add	r3, pc, #176	; (adr r3, 800df68 <kiss_fft_alloc+0x128>)
 800deb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deba:	f7f2 fbbd 	bl	8000638 <__aeabi_dmul>
 800debe:	4602      	mov	r2, r0
 800dec0:	460b      	mov	r3, r1
 800dec2:	4614      	mov	r4, r2
 800dec4:	461d      	mov	r5, r3
 800dec6:	68f8      	ldr	r0, [r7, #12]
 800dec8:	f7f2 fb4c 	bl	8000564 <__aeabi_i2d>
 800decc:	4602      	mov	r2, r0
 800dece:	460b      	mov	r3, r1
 800ded0:	4620      	mov	r0, r4
 800ded2:	4629      	mov	r1, r5
 800ded4:	f7f2 fcda 	bl	800088c <__aeabi_ddiv>
 800ded8:	4602      	mov	r2, r0
 800deda:	460b      	mov	r3, r1
 800dedc:	e9c7 2308 	strd	r2, r3, [r7, #32]
            if (st->inverse)
 800dee0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dee2:	685b      	ldr	r3, [r3, #4]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d005      	beq.n	800def4 <kiss_fft_alloc+0xb4>
                phase *= -1;
 800dee8:	6a3b      	ldr	r3, [r7, #32]
 800deea:	623b      	str	r3, [r7, #32]
 800deec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800deee:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800def2:	627b      	str	r3, [r7, #36]	; 0x24
            kf_cexp(st->twiddles+i, phase );
 800def4:	ed97 0b08 	vldr	d0, [r7, #32]
 800def8:	f00a f886 	bl	8018008 <cos>
 800defc:	ec51 0b10 	vmov	r0, r1, d0
 800df00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df02:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800df06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df08:	00db      	lsls	r3, r3, #3
 800df0a:	18d4      	adds	r4, r2, r3
 800df0c:	f7f2 fe8c 	bl	8000c28 <__aeabi_d2f>
 800df10:	4603      	mov	r3, r0
 800df12:	6023      	str	r3, [r4, #0]
 800df14:	ed97 0b08 	vldr	d0, [r7, #32]
 800df18:	f00a f9c6 	bl	80182a8 <sin>
 800df1c:	ec51 0b10 	vmov	r0, r1, d0
 800df20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df22:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800df26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df28:	00db      	lsls	r3, r3, #3
 800df2a:	18d4      	adds	r4, r2, r3
 800df2c:	f7f2 fe7c 	bl	8000c28 <__aeabi_d2f>
 800df30:	4603      	mov	r3, r0
 800df32:	6063      	str	r3, [r4, #4]
        for (i=0;i<nfft;++i) {
 800df34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df36:	3301      	adds	r3, #1
 800df38:	62bb      	str	r3, [r7, #40]	; 0x28
 800df3a:	e7af      	b.n	800de9c <kiss_fft_alloc+0x5c>
        }

        kf_factor(nfft,st->factors);
 800df3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df3e:	3308      	adds	r3, #8
 800df40:	4619      	mov	r1, r3
 800df42:	68f8      	ldr	r0, [r7, #12]
 800df44:	f7ff ff20 	bl	800dd88 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 800df48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d002      	beq.n	800df54 <kiss_fft_alloc+0x114>
        *memallocated = memneeded;
 800df4e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df50:	69fa      	ldr	r2, [r7, #28]
 800df52:	601a      	str	r2, [r3, #0]
    }

    return st;
 800df54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800df56:	4618      	mov	r0, r3
 800df58:	3730      	adds	r7, #48	; 0x30
 800df5a:	46bd      	mov	sp, r7
 800df5c:	bdb0      	pop	{r4, r5, r7, pc}
 800df5e:	bf00      	nop
 800df60:	54442d18 	.word	0x54442d18
 800df64:	400921fb 	.word	0x400921fb
 800df68:	54442d18 	.word	0x54442d18
 800df6c:	c01921fb 	.word	0xc01921fb

0800df70 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 800df70:	b580      	push	{r7, lr}
 800df72:	b088      	sub	sp, #32
 800df74:	af02      	add	r7, sp, #8
 800df76:	60f8      	str	r0, [r7, #12]
 800df78:	60b9      	str	r1, [r7, #8]
 800df7a:	607a      	str	r2, [r7, #4]
 800df7c:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 800df7e:	68ba      	ldr	r2, [r7, #8]
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	429a      	cmp	r2, r3
 800df84:	d11e      	bne.n	800dfc4 <kiss_fft_stride+0x54>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 800df86:	68fb      	ldr	r3, [r7, #12]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	00db      	lsls	r3, r3, #3
 800df8c:	4618      	mov	r0, r3
 800df8e:	f00d f911 	bl	801b1b4 <malloc>
 800df92:	4603      	mov	r3, r0
 800df94:	617b      	str	r3, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 800df96:	68fb      	ldr	r3, [r7, #12]
 800df98:	3308      	adds	r3, #8
 800df9a:	68fa      	ldr	r2, [r7, #12]
 800df9c:	9201      	str	r2, [sp, #4]
 800df9e:	9300      	str	r3, [sp, #0]
 800dfa0:	683b      	ldr	r3, [r7, #0]
 800dfa2:	2201      	movs	r2, #1
 800dfa4:	68b9      	ldr	r1, [r7, #8]
 800dfa6:	6978      	ldr	r0, [r7, #20]
 800dfa8:	f7ff fe56 	bl	800dc58 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	00db      	lsls	r3, r3, #3
 800dfb2:	461a      	mov	r2, r3
 800dfb4:	6979      	ldr	r1, [r7, #20]
 800dfb6:	6878      	ldr	r0, [r7, #4]
 800dfb8:	f00d f91a 	bl	801b1f0 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 800dfbc:	6978      	ldr	r0, [r7, #20]
 800dfbe:	f00d f901 	bl	801b1c4 <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 800dfc2:	e00a      	b.n	800dfda <kiss_fft_stride+0x6a>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	3308      	adds	r3, #8
 800dfc8:	68fa      	ldr	r2, [r7, #12]
 800dfca:	9201      	str	r2, [sp, #4]
 800dfcc:	9300      	str	r3, [sp, #0]
 800dfce:	683b      	ldr	r3, [r7, #0]
 800dfd0:	2201      	movs	r2, #1
 800dfd2:	68b9      	ldr	r1, [r7, #8]
 800dfd4:	6878      	ldr	r0, [r7, #4]
 800dfd6:	f7ff fe3f 	bl	800dc58 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 800dfda:	bf00      	nop
 800dfdc:	3718      	adds	r7, #24
 800dfde:	46bd      	mov	sp, r7
 800dfe0:	bd80      	pop	{r7, pc}

0800dfe2 <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 800dfe2:	b580      	push	{r7, lr}
 800dfe4:	b084      	sub	sp, #16
 800dfe6:	af00      	add	r7, sp, #0
 800dfe8:	60f8      	str	r0, [r7, #12]
 800dfea:	60b9      	str	r1, [r7, #8]
 800dfec:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 800dfee:	2301      	movs	r3, #1
 800dff0:	687a      	ldr	r2, [r7, #4]
 800dff2:	68b9      	ldr	r1, [r7, #8]
 800dff4:	68f8      	ldr	r0, [r7, #12]
 800dff6:	f7ff ffbb 	bl	800df70 <kiss_fft_stride>
}
 800dffa:	bf00      	nop
 800dffc:	3710      	adds	r7, #16
 800dffe:	46bd      	mov	sp, r7
 800e000:	bd80      	pop	{r7, pc}
 800e002:	0000      	movs	r0, r0
 800e004:	0000      	movs	r0, r0
	...

0800e008 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 800e008:	b5b0      	push	{r4, r5, r7, lr}
 800e00a:	b08c      	sub	sp, #48	; 0x30
 800e00c:	af02      	add	r7, sp, #8
 800e00e:	60f8      	str	r0, [r7, #12]
 800e010:	60b9      	str	r1, [r7, #8]
 800e012:	607a      	str	r2, [r7, #4]
 800e014:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 800e016:	2300      	movs	r3, #0
 800e018:	623b      	str	r3, [r7, #32]
    size_t subsize = 0, memneeded;
 800e01a:	2300      	movs	r3, #0
 800e01c:	613b      	str	r3, [r7, #16]

    if (nfft & 1) {
 800e01e:	68fb      	ldr	r3, [r7, #12]
 800e020:	f003 0301 	and.w	r3, r3, #1
 800e024:	2b00      	cmp	r3, #0
 800e026:	d009      	beq.n	800e03c <kiss_fftr_alloc+0x34>
        fprintf(stderr,"Real FFT optimization must be even.\n");
 800e028:	4b5f      	ldr	r3, [pc, #380]	; (800e1a8 <kiss_fftr_alloc+0x1a0>)
 800e02a:	681b      	ldr	r3, [r3, #0]
 800e02c:	68db      	ldr	r3, [r3, #12]
 800e02e:	2224      	movs	r2, #36	; 0x24
 800e030:	2101      	movs	r1, #1
 800e032:	485e      	ldr	r0, [pc, #376]	; (800e1ac <kiss_fftr_alloc+0x1a4>)
 800e034:	f00d f888 	bl	801b148 <fwrite>
        return NULL;
 800e038:	2300      	movs	r3, #0
 800e03a:	e0ad      	b.n	800e198 <kiss_fftr_alloc+0x190>
    }
    nfft >>= 1;
 800e03c:	68fb      	ldr	r3, [r7, #12]
 800e03e:	105b      	asrs	r3, r3, #1
 800e040:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 800e042:	f107 0310 	add.w	r3, r7, #16
 800e046:	2200      	movs	r2, #0
 800e048:	9200      	str	r2, [sp, #0]
 800e04a:	2200      	movs	r2, #0
 800e04c:	68b9      	ldr	r1, [r7, #8]
 800e04e:	68f8      	ldr	r0, [r7, #12]
 800e050:	f7ff fef6 	bl	800de40 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 800e054:	68fa      	ldr	r2, [r7, #12]
 800e056:	4613      	mov	r3, r2
 800e058:	005b      	lsls	r3, r3, #1
 800e05a:	4413      	add	r3, r2
 800e05c:	0fda      	lsrs	r2, r3, #31
 800e05e:	4413      	add	r3, r2
 800e060:	105b      	asrs	r3, r3, #1
 800e062:	00da      	lsls	r2, r3, #3
 800e064:	693b      	ldr	r3, [r7, #16]
 800e066:	4413      	add	r3, r2
 800e068:	330c      	adds	r3, #12
 800e06a:	617b      	str	r3, [r7, #20]

    if (lenmem == NULL) {
 800e06c:	683b      	ldr	r3, [r7, #0]
 800e06e:	2b00      	cmp	r3, #0
 800e070:	d105      	bne.n	800e07e <kiss_fftr_alloc+0x76>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 800e072:	6978      	ldr	r0, [r7, #20]
 800e074:	f00d f89e 	bl	801b1b4 <malloc>
 800e078:	4603      	mov	r3, r0
 800e07a:	623b      	str	r3, [r7, #32]
 800e07c:	e009      	b.n	800e092 <kiss_fftr_alloc+0x8a>
    } else {
        if (*lenmem >= memneeded)
 800e07e:	683b      	ldr	r3, [r7, #0]
 800e080:	681b      	ldr	r3, [r3, #0]
 800e082:	697a      	ldr	r2, [r7, #20]
 800e084:	429a      	cmp	r2, r3
 800e086:	d801      	bhi.n	800e08c <kiss_fftr_alloc+0x84>
            st = (kiss_fftr_cfg) mem;
 800e088:	687b      	ldr	r3, [r7, #4]
 800e08a:	623b      	str	r3, [r7, #32]
        *lenmem = memneeded;
 800e08c:	683b      	ldr	r3, [r7, #0]
 800e08e:	697a      	ldr	r2, [r7, #20]
 800e090:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 800e092:	6a3b      	ldr	r3, [r7, #32]
 800e094:	2b00      	cmp	r3, #0
 800e096:	d101      	bne.n	800e09c <kiss_fftr_alloc+0x94>
        return NULL;
 800e098:	2300      	movs	r3, #0
 800e09a:	e07d      	b.n	800e198 <kiss_fftr_alloc+0x190>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 800e09c:	6a3b      	ldr	r3, [r7, #32]
 800e09e:	f103 020c 	add.w	r2, r3, #12
 800e0a2:	6a3b      	ldr	r3, [r7, #32]
 800e0a4:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 800e0a6:	6a3b      	ldr	r3, [r7, #32]
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	693b      	ldr	r3, [r7, #16]
 800e0ac:	441a      	add	r2, r3
 800e0ae:	6a3b      	ldr	r3, [r7, #32]
 800e0b0:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 800e0b2:	6a3b      	ldr	r3, [r7, #32]
 800e0b4:	685a      	ldr	r2, [r3, #4]
 800e0b6:	68fb      	ldr	r3, [r7, #12]
 800e0b8:	00db      	lsls	r3, r3, #3
 800e0ba:	441a      	add	r2, r3
 800e0bc:	6a3b      	ldr	r3, [r7, #32]
 800e0be:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 800e0c0:	6a3b      	ldr	r3, [r7, #32]
 800e0c2:	681a      	ldr	r2, [r3, #0]
 800e0c4:	f107 0310 	add.w	r3, r7, #16
 800e0c8:	2100      	movs	r1, #0
 800e0ca:	9100      	str	r1, [sp, #0]
 800e0cc:	68b9      	ldr	r1, [r7, #8]
 800e0ce:	68f8      	ldr	r0, [r7, #12]
 800e0d0:	f7ff feb6 	bl	800de40 <kiss_fft_alloc>

    for (i = 0; i < nfft/2; ++i) {
 800e0d4:	2300      	movs	r3, #0
 800e0d6:	627b      	str	r3, [r7, #36]	; 0x24
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	0fda      	lsrs	r2, r3, #31
 800e0dc:	4413      	add	r3, r2
 800e0de:	105b      	asrs	r3, r3, #1
 800e0e0:	461a      	mov	r2, r3
 800e0e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0e4:	4293      	cmp	r3, r2
 800e0e6:	da50      	bge.n	800e18a <kiss_fftr_alloc+0x182>
        double phase =
            -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800e0e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0ea:	3301      	adds	r3, #1
 800e0ec:	4618      	mov	r0, r3
 800e0ee:	f7f2 fa39 	bl	8000564 <__aeabi_i2d>
 800e0f2:	4604      	mov	r4, r0
 800e0f4:	460d      	mov	r5, r1
 800e0f6:	68f8      	ldr	r0, [r7, #12]
 800e0f8:	f7f2 fa34 	bl	8000564 <__aeabi_i2d>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	4620      	mov	r0, r4
 800e102:	4629      	mov	r1, r5
 800e104:	f7f2 fbc2 	bl	800088c <__aeabi_ddiv>
 800e108:	4602      	mov	r2, r0
 800e10a:	460b      	mov	r3, r1
 800e10c:	4610      	mov	r0, r2
 800e10e:	4619      	mov	r1, r3
 800e110:	f04f 0200 	mov.w	r2, #0
 800e114:	4b26      	ldr	r3, [pc, #152]	; (800e1b0 <kiss_fftr_alloc+0x1a8>)
 800e116:	f7f2 f8d9 	bl	80002cc <__adddf3>
 800e11a:	4602      	mov	r2, r0
 800e11c:	460b      	mov	r3, r1
 800e11e:	4610      	mov	r0, r2
 800e120:	4619      	mov	r1, r3
        double phase =
 800e122:	a31f      	add	r3, pc, #124	; (adr r3, 800e1a0 <kiss_fftr_alloc+0x198>)
 800e124:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e128:	f7f2 fa86 	bl	8000638 <__aeabi_dmul>
 800e12c:	4602      	mov	r2, r0
 800e12e:	460b      	mov	r3, r1
 800e130:	e9c7 2306 	strd	r2, r3, [r7, #24]
        if (inverse_fft)
 800e134:	68bb      	ldr	r3, [r7, #8]
 800e136:	2b00      	cmp	r3, #0
 800e138:	d005      	beq.n	800e146 <kiss_fftr_alloc+0x13e>
            phase *= -1;
 800e13a:	69bb      	ldr	r3, [r7, #24]
 800e13c:	61bb      	str	r3, [r7, #24]
 800e13e:	69fb      	ldr	r3, [r7, #28]
 800e140:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e144:	61fb      	str	r3, [r7, #28]
        kf_cexp (st->super_twiddles+i,phase);
 800e146:	ed97 0b06 	vldr	d0, [r7, #24]
 800e14a:	f009 ff5d 	bl	8018008 <cos>
 800e14e:	ec51 0b10 	vmov	r0, r1, d0
 800e152:	6a3b      	ldr	r3, [r7, #32]
 800e154:	689a      	ldr	r2, [r3, #8]
 800e156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e158:	00db      	lsls	r3, r3, #3
 800e15a:	18d4      	adds	r4, r2, r3
 800e15c:	f7f2 fd64 	bl	8000c28 <__aeabi_d2f>
 800e160:	4603      	mov	r3, r0
 800e162:	6023      	str	r3, [r4, #0]
 800e164:	ed97 0b06 	vldr	d0, [r7, #24]
 800e168:	f00a f89e 	bl	80182a8 <sin>
 800e16c:	ec51 0b10 	vmov	r0, r1, d0
 800e170:	6a3b      	ldr	r3, [r7, #32]
 800e172:	689a      	ldr	r2, [r3, #8]
 800e174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e176:	00db      	lsls	r3, r3, #3
 800e178:	18d4      	adds	r4, r2, r3
 800e17a:	f7f2 fd55 	bl	8000c28 <__aeabi_d2f>
 800e17e:	4603      	mov	r3, r0
 800e180:	6063      	str	r3, [r4, #4]
    for (i = 0; i < nfft/2; ++i) {
 800e182:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e184:	3301      	adds	r3, #1
 800e186:	627b      	str	r3, [r7, #36]	; 0x24
 800e188:	e7a6      	b.n	800e0d8 <kiss_fftr_alloc+0xd0>
    }

    if (memallocated != NULL) {
 800e18a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e18c:	2b00      	cmp	r3, #0
 800e18e:	d002      	beq.n	800e196 <kiss_fftr_alloc+0x18e>
        *memallocated = memneeded;
 800e190:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e192:	697a      	ldr	r2, [r7, #20]
 800e194:	601a      	str	r2, [r3, #0]
    }

    return st;
 800e196:	6a3b      	ldr	r3, [r7, #32]
}
 800e198:	4618      	mov	r0, r3
 800e19a:	3728      	adds	r7, #40	; 0x28
 800e19c:	46bd      	mov	sp, r7
 800e19e:	bdb0      	pop	{r4, r5, r7, pc}
 800e1a0:	54442d18 	.word	0x54442d18
 800e1a4:	c00921fb 	.word	0xc00921fb
 800e1a8:	20000518 	.word	0x20000518
 800e1ac:	0801e0a4 	.word	0x0801e0a4
 800e1b0:	3fe00000 	.word	0x3fe00000

0800e1b4 <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 800e1b4:	b580      	push	{r7, lr}
 800e1b6:	b092      	sub	sp, #72	; 0x48
 800e1b8:	af00      	add	r7, sp, #0
 800e1ba:	60f8      	str	r0, [r7, #12]
 800e1bc:	60b9      	str	r1, [r7, #8]
 800e1be:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	685b      	ldr	r3, [r3, #4]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	d00a      	beq.n	800e1e0 <kiss_fftr+0x2c>
        fprintf(stderr,"kiss fft usage error: improper alloc\n");
 800e1ca:	4b8b      	ldr	r3, [pc, #556]	; (800e3f8 <kiss_fftr+0x244>)
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	68db      	ldr	r3, [r3, #12]
 800e1d0:	2225      	movs	r2, #37	; 0x25
 800e1d2:	2101      	movs	r1, #1
 800e1d4:	4889      	ldr	r0, [pc, #548]	; (800e3fc <kiss_fftr+0x248>)
 800e1d6:	f00c ffb7 	bl	801b148 <fwrite>
        exit(1);
 800e1da:	2001      	movs	r0, #1
 800e1dc:	f00c ff2e 	bl	801b03c <exit>
    }

    ncfft = st->substate->nfft;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	681b      	ldr	r3, [r3, #0]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	6818      	ldr	r0, [r3, #0]
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	685b      	ldr	r3, [r3, #4]
 800e1f0:	461a      	mov	r2, r3
 800e1f2:	68b9      	ldr	r1, [r7, #8]
 800e1f4:	f7ff fef5 	bl	800dfe2 <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	685b      	ldr	r3, [r3, #4]
 800e1fc:	681b      	ldr	r3, [r3, #0]
 800e1fe:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 800e200:	68fb      	ldr	r3, [r7, #12]
 800e202:	685b      	ldr	r3, [r3, #4]
 800e204:	685b      	ldr	r3, [r3, #4]
 800e206:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 800e208:	ed97 7a04 	vldr	s14, [r7, #16]
 800e20c:	edd7 7a05 	vldr	s15, [r7, #20]
 800e210:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e214:	687b      	ldr	r3, [r7, #4]
 800e216:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 800e21a:	ed97 7a04 	vldr	s14, [r7, #16]
 800e21e:	edd7 7a05 	vldr	s15, [r7, #20]
 800e222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e224:	00db      	lsls	r3, r3, #3
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	4413      	add	r3, r2
 800e22a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e22e:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 800e232:	687b      	ldr	r3, [r7, #4]
 800e234:	f04f 0200 	mov.w	r2, #0
 800e238:	605a      	str	r2, [r3, #4]
 800e23a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e23c:	00db      	lsls	r3, r3, #3
 800e23e:	687a      	ldr	r2, [r7, #4]
 800e240:	4413      	add	r3, r2
 800e242:	687a      	ldr	r2, [r7, #4]
 800e244:	6852      	ldr	r2, [r2, #4]
 800e246:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 800e248:	2301      	movs	r3, #1
 800e24a:	647b      	str	r3, [r7, #68]	; 0x44
 800e24c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e24e:	0fda      	lsrs	r2, r3, #31
 800e250:	4413      	add	r3, r2
 800e252:	105b      	asrs	r3, r3, #1
 800e254:	461a      	mov	r2, r3
 800e256:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e258:	4293      	cmp	r3, r2
 800e25a:	f300 80c9 	bgt.w	800e3f0 <kiss_fftr+0x23c>
        fpk    = st->tmpbuf[k];
 800e25e:	68fb      	ldr	r3, [r7, #12]
 800e260:	685a      	ldr	r2, [r3, #4]
 800e262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e264:	00db      	lsls	r3, r3, #3
 800e266:	441a      	add	r2, r3
 800e268:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e26c:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e270:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 800e274:	68fb      	ldr	r3, [r7, #12]
 800e276:	685a      	ldr	r2, [r3, #4]
 800e278:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e27a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e27c:	1acb      	subs	r3, r1, r3
 800e27e:	00db      	lsls	r3, r3, #3
 800e280:	4413      	add	r3, r2
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	685a      	ldr	r2, [r3, #4]
 800e28a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e28c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e28e:	1acb      	subs	r3, r1, r3
 800e290:	00db      	lsls	r3, r3, #3
 800e292:	4413      	add	r3, r2
 800e294:	edd3 7a01 	vldr	s15, [r3, #4]
 800e298:	eef1 7a67 	vneg.f32	s15, s15
 800e29c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 800e2a0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e2a4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e2a8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2ac:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800e2b0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e2b4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e2b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2bc:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 800e2c0:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e2c4:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e2c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2cc:	edc7 7a08 	vstr	s15, [r7, #32]
 800e2d0:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e2d4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e2d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2dc:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 800e2e0:	ed97 7a08 	vldr	s14, [r7, #32]
 800e2e4:	68fb      	ldr	r3, [r7, #12]
 800e2e6:	689a      	ldr	r2, [r3, #8]
 800e2e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2ea:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e2ee:	3b01      	subs	r3, #1
 800e2f0:	00db      	lsls	r3, r3, #3
 800e2f2:	4413      	add	r3, r2
 800e2f4:	edd3 7a00 	vldr	s15, [r3]
 800e2f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2fc:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	689a      	ldr	r2, [r3, #8]
 800e304:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e306:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e30a:	3b01      	subs	r3, #1
 800e30c:	00db      	lsls	r3, r3, #3
 800e30e:	4413      	add	r3, r2
 800e310:	edd3 7a01 	vldr	s15, [r3, #4]
 800e314:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e318:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e31c:	edc7 7a06 	vstr	s15, [r7, #24]
 800e320:	ed97 7a08 	vldr	s14, [r7, #32]
 800e324:	68fb      	ldr	r3, [r7, #12]
 800e326:	689a      	ldr	r2, [r3, #8]
 800e328:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e32a:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e32e:	3b01      	subs	r3, #1
 800e330:	00db      	lsls	r3, r3, #3
 800e332:	4413      	add	r3, r2
 800e334:	edd3 7a01 	vldr	s15, [r3, #4]
 800e338:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e33c:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	689a      	ldr	r2, [r3, #8]
 800e344:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e346:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e34a:	3b01      	subs	r3, #1
 800e34c:	00db      	lsls	r3, r3, #3
 800e34e:	4413      	add	r3, r2
 800e350:	edd3 7a00 	vldr	s15, [r3]
 800e354:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e358:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e35c:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 800e360:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e364:	edd7 7a06 	vldr	s15, [r7, #24]
 800e368:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e36c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e36e:	00db      	lsls	r3, r3, #3
 800e370:	687a      	ldr	r2, [r7, #4]
 800e372:	4413      	add	r3, r2
 800e374:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e378:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e37c:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 800e380:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e384:	edd7 7a07 	vldr	s15, [r7, #28]
 800e388:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e38c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e38e:	00db      	lsls	r3, r3, #3
 800e390:	687a      	ldr	r2, [r7, #4]
 800e392:	4413      	add	r3, r2
 800e394:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e39c:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 800e3a0:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e3a4:	edd7 7a06 	vldr	s15, [r7, #24]
 800e3a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3ac:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3b0:	1ad3      	subs	r3, r2, r3
 800e3b2:	00db      	lsls	r3, r3, #3
 800e3b4:	687a      	ldr	r2, [r7, #4]
 800e3b6:	4413      	add	r3, r2
 800e3b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e3bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3c0:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 800e3c4:	ed97 7a07 	vldr	s14, [r7, #28]
 800e3c8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e3cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3d0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3d4:	1ad3      	subs	r3, r2, r3
 800e3d6:	00db      	lsls	r3, r3, #3
 800e3d8:	687a      	ldr	r2, [r7, #4]
 800e3da:	4413      	add	r3, r2
 800e3dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e3e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3e4:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 800e3e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3ea:	3301      	adds	r3, #1
 800e3ec:	647b      	str	r3, [r7, #68]	; 0x44
 800e3ee:	e72d      	b.n	800e24c <kiss_fftr+0x98>
    }
}
 800e3f0:	bf00      	nop
 800e3f2:	3748      	adds	r7, #72	; 0x48
 800e3f4:	46bd      	mov	sp, r7
 800e3f6:	bd80      	pop	{r7, pc}
 800e3f8:	20000518 	.word	0x20000518
 800e3fc:	0801e0cc 	.word	0x0801e0cc

0800e400 <_Z29ei_run_impulse_check_canceledv>:
#include "main.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"
#include <stdarg.h>
#include <stdio.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 800e400:	b480      	push	{r7}
 800e402:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 800e404:	2300      	movs	r3, #0
}
 800e406:	4618      	mov	r0, r3
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr

0800e410 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 800e410:	b580      	push	{r7, lr}
 800e412:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800e414:	f7f8 fb9a 	bl	8006b4c <HAL_GetTick>
 800e418:	4603      	mov	r3, r0
 800e41a:	461a      	mov	r2, r3
 800e41c:	f04f 0300 	mov.w	r3, #0
}
 800e420:	4610      	mov	r0, r2
 800e422:	4619      	mov	r1, r3
 800e424:	bd80      	pop	{r7, pc}
	...

0800e428 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 800e428:	b580      	push	{r7, lr}
 800e42a:	b082      	sub	sp, #8
 800e42c:	af00      	add	r7, sp, #0
 800e42e:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_printf("%f", f);
 800e432:	6878      	ldr	r0, [r7, #4]
 800e434:	f7f2 f8a8 	bl	8000588 <__aeabi_f2d>
 800e438:	4602      	mov	r2, r0
 800e43a:	460b      	mov	r3, r1
 800e43c:	4803      	ldr	r0, [pc, #12]	; (800e44c <_Z15ei_printf_floatf+0x24>)
 800e43e:	f7f7 f8af 	bl	80055a0 <_Z9ei_printfPKcz>
}
 800e442:	bf00      	nop
 800e444:	3708      	adds	r7, #8
 800e446:	46bd      	mov	sp, r7
 800e448:	bd80      	pop	{r7, pc}
 800e44a:	bf00      	nop
 800e44c:	0801e0f4 	.word	0x0801e0f4

0800e450 <TfLiteIntArrayEqual>:
int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
}

int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
 800e450:	b580      	push	{r7, lr}
 800e452:	b082      	sub	sp, #8
 800e454:	af00      	add	r7, sp, #0
 800e456:	6078      	str	r0, [r7, #4]
 800e458:	6039      	str	r1, [r7, #0]
  if (a == b) return 1;
 800e45a:	687a      	ldr	r2, [r7, #4]
 800e45c:	683b      	ldr	r3, [r7, #0]
 800e45e:	429a      	cmp	r2, r3
 800e460:	d101      	bne.n	800e466 <TfLiteIntArrayEqual+0x16>
 800e462:	2301      	movs	r3, #1
 800e464:	e010      	b.n	800e488 <TfLiteIntArrayEqual+0x38>
  if (a == NULL || b == NULL) return 0;
 800e466:	687b      	ldr	r3, [r7, #4]
 800e468:	2b00      	cmp	r3, #0
 800e46a:	d002      	beq.n	800e472 <TfLiteIntArrayEqual+0x22>
 800e46c:	683b      	ldr	r3, [r7, #0]
 800e46e:	2b00      	cmp	r3, #0
 800e470:	d101      	bne.n	800e476 <TfLiteIntArrayEqual+0x26>
 800e472:	2300      	movs	r3, #0
 800e474:	e008      	b.n	800e488 <TfLiteIntArrayEqual+0x38>
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
 800e476:	683b      	ldr	r3, [r7, #0]
 800e478:	6819      	ldr	r1, [r3, #0]
 800e47a:	683b      	ldr	r3, [r7, #0]
 800e47c:	3304      	adds	r3, #4
 800e47e:	461a      	mov	r2, r3
 800e480:	6878      	ldr	r0, [r7, #4]
 800e482:	f000 f805 	bl	800e490 <TfLiteIntArrayEqualsArray>
 800e486:	4603      	mov	r3, r0
}
 800e488:	4618      	mov	r0, r3
 800e48a:	3708      	adds	r7, #8
 800e48c:	46bd      	mov	sp, r7
 800e48e:	bd80      	pop	{r7, pc}

0800e490 <TfLiteIntArrayEqualsArray>:

int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,
                              const int b_data[]) {
 800e490:	b480      	push	{r7}
 800e492:	b087      	sub	sp, #28
 800e494:	af00      	add	r7, sp, #0
 800e496:	60f8      	str	r0, [r7, #12]
 800e498:	60b9      	str	r1, [r7, #8]
 800e49a:	607a      	str	r2, [r7, #4]
  if (a == NULL) return (b_size == 0);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d106      	bne.n	800e4b0 <TfLiteIntArrayEqualsArray+0x20>
 800e4a2:	68bb      	ldr	r3, [r7, #8]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	bf0c      	ite	eq
 800e4a8:	2301      	moveq	r3, #1
 800e4aa:	2300      	movne	r3, #0
 800e4ac:	b2db      	uxtb	r3, r3
 800e4ae:	e020      	b.n	800e4f2 <TfLiteIntArrayEqualsArray+0x62>
  if (a->size != b_size) return 0;
 800e4b0:	68fb      	ldr	r3, [r7, #12]
 800e4b2:	681b      	ldr	r3, [r3, #0]
 800e4b4:	68ba      	ldr	r2, [r7, #8]
 800e4b6:	429a      	cmp	r2, r3
 800e4b8:	d001      	beq.n	800e4be <TfLiteIntArrayEqualsArray+0x2e>
 800e4ba:	2300      	movs	r3, #0
 800e4bc:	e019      	b.n	800e4f2 <TfLiteIntArrayEqualsArray+0x62>
  int i = 0;
 800e4be:	2300      	movs	r3, #0
 800e4c0:	617b      	str	r3, [r7, #20]
  for (; i < a->size; i++)
 800e4c2:	e010      	b.n	800e4e6 <TfLiteIntArrayEqualsArray+0x56>
    if (a->data[i] != b_data[i]) return 0;
 800e4c4:	68fa      	ldr	r2, [r7, #12]
 800e4c6:	697b      	ldr	r3, [r7, #20]
 800e4c8:	009b      	lsls	r3, r3, #2
 800e4ca:	4413      	add	r3, r2
 800e4cc:	685a      	ldr	r2, [r3, #4]
 800e4ce:	697b      	ldr	r3, [r7, #20]
 800e4d0:	009b      	lsls	r3, r3, #2
 800e4d2:	6879      	ldr	r1, [r7, #4]
 800e4d4:	440b      	add	r3, r1
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d001      	beq.n	800e4e0 <TfLiteIntArrayEqualsArray+0x50>
 800e4dc:	2300      	movs	r3, #0
 800e4de:	e008      	b.n	800e4f2 <TfLiteIntArrayEqualsArray+0x62>
  for (; i < a->size; i++)
 800e4e0:	697b      	ldr	r3, [r7, #20]
 800e4e2:	3301      	adds	r3, #1
 800e4e4:	617b      	str	r3, [r7, #20]
 800e4e6:	68fb      	ldr	r3, [r7, #12]
 800e4e8:	681b      	ldr	r3, [r3, #0]
 800e4ea:	697a      	ldr	r2, [r7, #20]
 800e4ec:	429a      	cmp	r2, r3
 800e4ee:	dbe9      	blt.n	800e4c4 <TfLiteIntArrayEqualsArray+0x34>
  return 1;
 800e4f0:	2301      	movs	r3, #1
}
 800e4f2:	4618      	mov	r0, r3
 800e4f4:	371c      	adds	r7, #28
 800e4f6:	46bd      	mov	sp, r7
 800e4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4fc:	4770      	bx	lr
	...

0800e500 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	4603      	mov	r3, r0
 800e508:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800e50a:	79fb      	ldrb	r3, [r7, #7]
 800e50c:	2b0b      	cmp	r3, #11
 800e50e:	d833      	bhi.n	800e578 <TfLiteTypeGetName+0x78>
 800e510:	a201      	add	r2, pc, #4	; (adr r2, 800e518 <TfLiteTypeGetName+0x18>)
 800e512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e516:	bf00      	nop
 800e518:	0800e549 	.word	0x0800e549
 800e51c:	0800e54d 	.word	0x0800e54d
 800e520:	0800e555 	.word	0x0800e555
 800e524:	0800e559 	.word	0x0800e559
 800e528:	0800e561 	.word	0x0800e561
 800e52c:	0800e56d 	.word	0x0800e56d
 800e530:	0800e565 	.word	0x0800e565
 800e534:	0800e551 	.word	0x0800e551
 800e538:	0800e569 	.word	0x0800e569
 800e53c:	0800e55d 	.word	0x0800e55d
 800e540:	0800e571 	.word	0x0800e571
 800e544:	0800e575 	.word	0x0800e575
    case kTfLiteNoType:
      return "NOTYPE";
 800e548:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <TfLiteTypeGetName+0x88>)
 800e54a:	e016      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <TfLiteTypeGetName+0x8c>)
 800e54e:	e014      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 800e550:	4b0f      	ldr	r3, [pc, #60]	; (800e590 <TfLiteTypeGetName+0x90>)
 800e552:	e012      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 800e554:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <TfLiteTypeGetName+0x94>)
 800e556:	e010      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 800e558:	4b0f      	ldr	r3, [pc, #60]	; (800e598 <TfLiteTypeGetName+0x98>)
 800e55a:	e00e      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 800e55c:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <TfLiteTypeGetName+0x9c>)
 800e55e:	e00c      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 800e560:	4b0f      	ldr	r3, [pc, #60]	; (800e5a0 <TfLiteTypeGetName+0xa0>)
 800e562:	e00a      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 800e564:	4b0f      	ldr	r3, [pc, #60]	; (800e5a4 <TfLiteTypeGetName+0xa4>)
 800e566:	e008      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800e568:	4b0f      	ldr	r3, [pc, #60]	; (800e5a8 <TfLiteTypeGetName+0xa8>)
 800e56a:	e006      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 800e56c:	4b0f      	ldr	r3, [pc, #60]	; (800e5ac <TfLiteTypeGetName+0xac>)
 800e56e:	e004      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 800e570:	4b0f      	ldr	r3, [pc, #60]	; (800e5b0 <TfLiteTypeGetName+0xb0>)
 800e572:	e002      	b.n	800e57a <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 800e574:	4b0f      	ldr	r3, [pc, #60]	; (800e5b4 <TfLiteTypeGetName+0xb4>)
 800e576:	e000      	b.n	800e57a <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 800e578:	4b0f      	ldr	r3, [pc, #60]	; (800e5b8 <TfLiteTypeGetName+0xb8>)
}
 800e57a:	4618      	mov	r0, r3
 800e57c:	370c      	adds	r7, #12
 800e57e:	46bd      	mov	sp, r7
 800e580:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e584:	4770      	bx	lr
 800e586:	bf00      	nop
 800e588:	0801e0fc 	.word	0x0801e0fc
 800e58c:	0801e104 	.word	0x0801e104
 800e590:	0801e10c 	.word	0x0801e10c
 800e594:	0801e114 	.word	0x0801e114
 800e598:	0801e11c 	.word	0x0801e11c
 800e59c:	0801e124 	.word	0x0801e124
 800e5a0:	0801e12c 	.word	0x0801e12c
 800e5a4:	0801e134 	.word	0x0801e134
 800e5a8:	0801e13c 	.word	0x0801e13c
 800e5ac:	0801e148 	.word	0x0801e148
 800e5b0:	0801e150 	.word	0x0801e150
 800e5b4:	0801e158 	.word	0x0801e158
 800e5b8:	0801e160 	.word	0x0801e160

0800e5bc <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800e5bc:	b480      	push	{r7}
 800e5be:	af00      	add	r7, sp, #0
 800e5c0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e5c4:	4618      	mov	r0, r3
 800e5c6:	46bd      	mov	sp, r7
 800e5c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5cc:	4770      	bx	lr
	...

0800e5d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800e5d0:	b5b0      	push	{r4, r5, r7, lr}
 800e5d2:	b088      	sub	sp, #32
 800e5d4:	af00      	add	r7, sp, #0
 800e5d6:	ed87 0b02 	vstr	d0, [r7, #8]
 800e5da:	6078      	str	r0, [r7, #4]
 800e5dc:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800e5de:	f04f 0200 	mov.w	r2, #0
 800e5e2:	f04f 0300 	mov.w	r3, #0
 800e5e6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5ea:	f7f2 fa8d 	bl	8000b08 <__aeabi_dcmpeq>
 800e5ee:	4603      	mov	r3, r0
 800e5f0:	2b00      	cmp	r3, #0
 800e5f2:	d006      	beq.n	800e602 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800e5f4:	687b      	ldr	r3, [r7, #4]
 800e5f6:	2200      	movs	r2, #0
 800e5f8:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800e5fa:	683b      	ldr	r3, [r7, #0]
 800e5fc:	2200      	movs	r2, #0
 800e5fe:	601a      	str	r2, [r3, #0]
    return;
 800e600:	e06b      	b.n	800e6da <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800e602:	6838      	ldr	r0, [r7, #0]
 800e604:	ed97 0b02 	vldr	d0, [r7, #8]
 800e608:	f009 fdce 	bl	80181a8 <frexp>
 800e60c:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800e610:	f04f 0200 	mov.w	r2, #0
 800e614:	4b32      	ldr	r3, [pc, #200]	; (800e6e0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800e616:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e61a:	f7f2 f80d 	bl	8000638 <__aeabi_dmul>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	ec43 2b17 	vmov	d7, r2, r3
 800e626:	eeb0 0a47 	vmov.f32	s0, s14
 800e62a:	eef0 0a67 	vmov.f32	s1, s15
 800e62e:	f000 f9b0 	bl	800e992 <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800e632:	ec53 2b10 	vmov	r2, r3, d0
 800e636:	4610      	mov	r0, r2
 800e638:	4619      	mov	r1, r3
 800e63a:	f7f2 fb5d 	bl	8000cf8 <__aeabi_d2lz>
 800e63e:	4602      	mov	r2, r0
 800e640:	460b      	mov	r3, r1
 800e642:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800e646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e64a:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e64e:	f04f 0100 	mov.w	r1, #0
 800e652:	4290      	cmp	r0, r2
 800e654:	eb71 0303 	sbcs.w	r3, r1, r3
 800e658:	da01      	bge.n	800e65e <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800e65a:	f00c fcb5 	bl	801afc8 <abort>
  if (q_fixed == (1ll << 31)) {
 800e65e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e662:	2b00      	cmp	r3, #0
 800e664:	bf08      	it	eq
 800e666:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800e66a:	d117      	bne.n	800e69c <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800e66c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e670:	0fd9      	lsrs	r1, r3, #31
 800e672:	4608      	mov	r0, r1
 800e674:	f04f 0100 	mov.w	r1, #0
 800e678:	1884      	adds	r4, r0, r2
 800e67a:	eb41 0503 	adc.w	r5, r1, r3
 800e67e:	f04f 0200 	mov.w	r2, #0
 800e682:	f04f 0300 	mov.w	r3, #0
 800e686:	0862      	lsrs	r2, r4, #1
 800e688:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800e68c:	106b      	asrs	r3, r5, #1
 800e68e:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800e692:	683b      	ldr	r3, [r7, #0]
 800e694:	681b      	ldr	r3, [r3, #0]
 800e696:	1c5a      	adds	r2, r3, #1
 800e698:	683b      	ldr	r3, [r7, #0]
 800e69a:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800e69c:	f7ff ff8e 	bl	800e5bc <_ZNSt14numeric_limitsIlE3maxEv>
 800e6a0:	4603      	mov	r3, r0
 800e6a2:	4618      	mov	r0, r3
 800e6a4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e6a8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e6ac:	4290      	cmp	r0, r2
 800e6ae:	eb71 0303 	sbcs.w	r3, r1, r3
 800e6b2:	da01      	bge.n	800e6b8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800e6b4:	f00c fc88 	bl	801afc8 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800e6b8:	683b      	ldr	r3, [r7, #0]
 800e6ba:	681b      	ldr	r3, [r3, #0]
 800e6bc:	f113 0f1f 	cmn.w	r3, #31
 800e6c0:	da08      	bge.n	800e6d4 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800e6c2:	683b      	ldr	r3, [r7, #0]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800e6c8:	f04f 0200 	mov.w	r2, #0
 800e6cc:	f04f 0300 	mov.w	r3, #0
 800e6d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800e6d4:	69ba      	ldr	r2, [r7, #24]
 800e6d6:	687b      	ldr	r3, [r7, #4]
 800e6d8:	601a      	str	r2, [r3, #0]
}
 800e6da:	3720      	adds	r7, #32
 800e6dc:	46bd      	mov	sp, r7
 800e6de:	bdb0      	pop	{r4, r5, r7, pc}
 800e6e0:	41e00000 	.word	0x41e00000

0800e6e4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800e6e4:	b580      	push	{r7, lr}
 800e6e6:	b084      	sub	sp, #16
 800e6e8:	af00      	add	r7, sp, #0
 800e6ea:	ed87 0b02 	vstr	d0, [r7, #8]
 800e6ee:	6078      	str	r0, [r7, #4]
 800e6f0:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800e6f2:	f04f 0200 	mov.w	r2, #0
 800e6f6:	4b0d      	ldr	r3, [pc, #52]	; (800e72c <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800e6f8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e6fc:	f7f2 fa2c 	bl	8000b58 <__aeabi_dcmpgt>
 800e700:	4603      	mov	r3, r0
 800e702:	2b00      	cmp	r3, #0
 800e704:	d101      	bne.n	800e70a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800e706:	f00c fc5f 	bl	801afc8 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800e70a:	6839      	ldr	r1, [r7, #0]
 800e70c:	6878      	ldr	r0, [r7, #4]
 800e70e:	ed97 0b02 	vldr	d0, [r7, #8]
 800e712:	f7ff ff5d 	bl	800e5d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	681b      	ldr	r3, [r3, #0]
 800e71a:	2b00      	cmp	r3, #0
 800e71c:	da01      	bge.n	800e722 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800e71e:	f00c fc53 	bl	801afc8 <abort>
}
 800e722:	bf00      	nop
 800e724:	3710      	adds	r7, #16
 800e726:	46bd      	mov	sp, r7
 800e728:	bd80      	pop	{r7, pc}
 800e72a:	bf00      	nop
 800e72c:	3ff00000 	.word	0x3ff00000

0800e730 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
 800e730:	b580      	push	{r7, lr}
 800e732:	b086      	sub	sp, #24
 800e734:	af00      	add	r7, sp, #0
 800e736:	ed87 0b02 	vstr	d0, [r7, #8]
 800e73a:	6078      	str	r0, [r7, #4]
 800e73c:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_LT(double_multiplier, 1.);
 800e73e:	f04f 0200 	mov.w	r2, #0
 800e742:	4b15      	ldr	r3, [pc, #84]	; (800e798 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x68>)
 800e744:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e748:	f7f2 f9e8 	bl	8000b1c <__aeabi_dcmplt>
 800e74c:	4603      	mov	r3, r0
 800e74e:	2b00      	cmp	r3, #0
 800e750:	d101      	bne.n	800e756 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x26>
 800e752:	f00c fc39 	bl	801afc8 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
 800e756:	f04f 0200 	mov.w	r2, #0
 800e75a:	f04f 0300 	mov.w	r3, #0
 800e75e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e762:	f7f2 f9f9 	bl	8000b58 <__aeabi_dcmpgt>
 800e766:	4603      	mov	r3, r0
 800e768:	2b00      	cmp	r3, #0
 800e76a:	d101      	bne.n	800e770 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
 800e76c:	f00c fc2c 	bl	801afc8 <abort>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
 800e770:	f107 0314 	add.w	r3, r7, #20
 800e774:	4619      	mov	r1, r3
 800e776:	6878      	ldr	r0, [r7, #4]
 800e778:	ed97 0b02 	vldr	d0, [r7, #8]
 800e77c:	f7ff ff28 	bl	800e5d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_LE(shift, 0);
 800e780:	697b      	ldr	r3, [r7, #20]
 800e782:	2b00      	cmp	r3, #0
 800e784:	dd01      	ble.n	800e78a <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x5a>
 800e786:	f00c fc1f 	bl	801afc8 <abort>
  *left_shift = shift;
 800e78a:	697a      	ldr	r2, [r7, #20]
 800e78c:	683b      	ldr	r3, [r7, #0]
 800e78e:	601a      	str	r2, [r3, #0]
}
 800e790:	bf00      	nop
 800e792:	3718      	adds	r7, #24
 800e794:	46bd      	mov	sp, r7
 800e796:	bd80      	pop	{r7, pc}
 800e798:	3ff00000 	.word	0x3ff00000

0800e79c <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800e79c:	b580      	push	{r7, lr}
 800e79e:	b082      	sub	sp, #8
 800e7a0:	af00      	add	r7, sp, #0
 800e7a2:	6078      	str	r0, [r7, #4]
 800e7a4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800e7a6:	683b      	ldr	r3, [r7, #0]
 800e7a8:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e7ac:	687b      	ldr	r3, [r7, #4]
 800e7ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e7b2:	f7f2 f9b3 	bl	8000b1c <__aeabi_dcmplt>
 800e7b6:	4603      	mov	r3, r0
 800e7b8:	2b00      	cmp	r3, #0
 800e7ba:	d001      	beq.n	800e7c0 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800e7bc:	683b      	ldr	r3, [r7, #0]
 800e7be:	e000      	b.n	800e7c2 <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800e7c0:	687b      	ldr	r3, [r7, #4]
    }
 800e7c2:	4618      	mov	r0, r3
 800e7c4:	3708      	adds	r7, #8
 800e7c6:	46bd      	mov	sp, r7
 800e7c8:	bd80      	pop	{r7, pc}
 800e7ca:	0000      	movs	r0, r0
 800e7cc:	0000      	movs	r0, r0
	...

0800e7d0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800e7d0:	b5b0      	push	{r4, r5, r7, lr}
 800e7d2:	b08e      	sub	sp, #56	; 0x38
 800e7d4:	af00      	add	r7, sp, #0
 800e7d6:	ed87 0b06 	vstr	d0, [r7, #24]
 800e7da:	ed87 1b04 	vstr	d1, [r7, #16]
 800e7de:	60f8      	str	r0, [r7, #12]
 800e7e0:	60b9      	str	r1, [r7, #8]
 800e7e2:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800e7e4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e7e8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e7ec:	f7f1 ff24 	bl	8000638 <__aeabi_dmul>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4614      	mov	r4, r2
 800e7f6:	461d      	mov	r5, r3
 800e7f8:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7fc:	68fb      	ldr	r3, [r7, #12]
 800e7fe:	fa22 f303 	lsr.w	r3, r2, r3
 800e802:	4618      	mov	r0, r3
 800e804:	f7f1 feae 	bl	8000564 <__aeabi_i2d>
 800e808:	4602      	mov	r2, r0
 800e80a:	460b      	mov	r3, r1
 800e80c:	4620      	mov	r0, r4
 800e80e:	4629      	mov	r1, r5
 800e810:	f7f1 ff12 	bl	8000638 <__aeabi_dmul>
 800e814:	4602      	mov	r2, r0
 800e816:	460b      	mov	r3, r1
 800e818:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800e81c:	a30e      	add	r3, pc, #56	; (adr r3, 800e858 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800e81e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e822:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800e826:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e82a:	f107 0320 	add.w	r3, r7, #32
 800e82e:	4611      	mov	r1, r2
 800e830:	4618      	mov	r0, r3
 800e832:	f7ff ffb3 	bl	800e79c <_ZSt3minIdERKT_S2_S2_>
 800e836:	4603      	mov	r3, r0
 800e838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e83c:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800e840:	6879      	ldr	r1, [r7, #4]
 800e842:	68b8      	ldr	r0, [r7, #8]
 800e844:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800e848:	f7ff ff4c 	bl	800e6e4 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800e84c:	bf00      	nop
 800e84e:	3738      	adds	r7, #56	; 0x38
 800e850:	46bd      	mov	sp, r7
 800e852:	bdb0      	pop	{r4, r5, r7, pc}
 800e854:	f3af 8000 	nop.w
 800e858:	ffc00000 	.word	0xffc00000
 800e85c:	41dfffff 	.word	0x41dfffff

0800e860 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800e860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e864:	b087      	sub	sp, #28
 800e866:	af00      	add	r7, sp, #0
 800e868:	60f8      	str	r0, [r7, #12]
 800e86a:	60b9      	str	r1, [r7, #8]
 800e86c:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800e86e:	2201      	movs	r2, #1
 800e870:	68fb      	ldr	r3, [r7, #12]
 800e872:	fa02 f303 	lsl.w	r3, r2, r3
 800e876:	3b01      	subs	r3, #1
 800e878:	4618      	mov	r0, r3
 800e87a:	f7f1 fe73 	bl	8000564 <__aeabi_i2d>
 800e87e:	4682      	mov	sl, r0
 800e880:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800e882:	687a      	ldr	r2, [r7, #4]
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	1ad1      	subs	r1, r2, r3
 800e888:	f04f 0201 	mov.w	r2, #1
 800e88c:	f04f 0300 	mov.w	r3, #0
 800e890:	f1a1 0620 	sub.w	r6, r1, #32
 800e894:	f1c1 0020 	rsb	r0, r1, #32
 800e898:	fa03 f901 	lsl.w	r9, r3, r1
 800e89c:	fa02 f606 	lsl.w	r6, r2, r6
 800e8a0:	ea49 0906 	orr.w	r9, r9, r6
 800e8a4:	fa22 f000 	lsr.w	r0, r2, r0
 800e8a8:	ea49 0900 	orr.w	r9, r9, r0
 800e8ac:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800e8b0:	4640      	mov	r0, r8
 800e8b2:	4649      	mov	r1, r9
 800e8b4:	f7f1 fe92 	bl	80005dc <__aeabi_l2d>
 800e8b8:	4602      	mov	r2, r0
 800e8ba:	460b      	mov	r3, r1
 800e8bc:	4650      	mov	r0, sl
 800e8be:	4659      	mov	r1, fp
 800e8c0:	f7f1 feba 	bl	8000638 <__aeabi_dmul>
 800e8c4:	4602      	mov	r2, r0
 800e8c6:	460b      	mov	r3, r1
 800e8c8:	4690      	mov	r8, r2
 800e8ca:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800e8cc:	f04f 0201 	mov.w	r2, #1
 800e8d0:	f04f 0300 	mov.w	r3, #0
 800e8d4:	68b9      	ldr	r1, [r7, #8]
 800e8d6:	f1a1 0620 	sub.w	r6, r1, #32
 800e8da:	f1c1 0020 	rsb	r0, r1, #32
 800e8de:	fa03 f501 	lsl.w	r5, r3, r1
 800e8e2:	fa02 f606 	lsl.w	r6, r2, r6
 800e8e6:	4335      	orrs	r5, r6
 800e8e8:	fa22 f000 	lsr.w	r0, r2, r0
 800e8ec:	4305      	orrs	r5, r0
 800e8ee:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800e8f2:	4620      	mov	r0, r4
 800e8f4:	4629      	mov	r1, r5
 800e8f6:	f7f1 fe71 	bl	80005dc <__aeabi_l2d>
 800e8fa:	4602      	mov	r2, r0
 800e8fc:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800e8fe:	4640      	mov	r0, r8
 800e900:	4649      	mov	r1, r9
 800e902:	f7f1 ffc3 	bl	800088c <__aeabi_ddiv>
 800e906:	4602      	mov	r2, r0
 800e908:	460b      	mov	r3, r1
 800e90a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800e90e:	ed97 0b04 	vldr	d0, [r7, #16]
 800e912:	f009 fbc9 	bl	80180a8 <floor>
 800e916:	ec53 2b10 	vmov	r2, r3, d0
 800e91a:	4610      	mov	r0, r2
 800e91c:	4619      	mov	r1, r3
 800e91e:	f7f2 f93b 	bl	8000b98 <__aeabi_d2iz>
 800e922:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800e924:	4618      	mov	r0, r3
 800e926:	371c      	adds	r7, #28
 800e928:	46bd      	mov	sp, r7
 800e92a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e92e <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800e92e:	b480      	push	{r7}
 800e930:	b083      	sub	sp, #12
 800e932:	af00      	add	r7, sp, #0
 800e934:	6078      	str	r0, [r7, #4]
 800e936:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800e938:	683b      	ldr	r3, [r7, #0]
 800e93a:	ed93 7a00 	vldr	s14, [r3]
 800e93e:	687b      	ldr	r3, [r7, #4]
 800e940:	edd3 7a00 	vldr	s15, [r3]
 800e944:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e94c:	d501      	bpl.n	800e952 <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800e94e:	683b      	ldr	r3, [r7, #0]
 800e950:	e000      	b.n	800e954 <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800e952:	687b      	ldr	r3, [r7, #4]
    }
 800e954:	4618      	mov	r0, r3
 800e956:	370c      	adds	r7, #12
 800e958:	46bd      	mov	sp, r7
 800e95a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e95e:	4770      	bx	lr

0800e960 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e960:	b480      	push	{r7}
 800e962:	b083      	sub	sp, #12
 800e964:	af00      	add	r7, sp, #0
 800e966:	6078      	str	r0, [r7, #4]
 800e968:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e96a:	687b      	ldr	r3, [r7, #4]
 800e96c:	ed93 7a00 	vldr	s14, [r3]
 800e970:	683b      	ldr	r3, [r7, #0]
 800e972:	edd3 7a00 	vldr	s15, [r3]
 800e976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e97a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e97e:	d501      	bpl.n	800e984 <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800e980:	683b      	ldr	r3, [r7, #0]
 800e982:	e000      	b.n	800e986 <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800e984:	687b      	ldr	r3, [r7, #4]
    }
 800e986:	4618      	mov	r0, r3
 800e988:	370c      	adds	r7, #12
 800e98a:	46bd      	mov	sp, r7
 800e98c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e990:	4770      	bx	lr

0800e992 <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800e992:	b580      	push	{r7, lr}
 800e994:	b082      	sub	sp, #8
 800e996:	af00      	add	r7, sp, #0
 800e998:	ed87 0b00 	vstr	d0, [r7]
 800e99c:	ed97 0b00 	vldr	d0, [r7]
 800e9a0:	f009 fc3a 	bl	8018218 <round>
 800e9a4:	eeb0 7a40 	vmov.f32	s14, s0
 800e9a8:	eef0 7a60 	vmov.f32	s15, s1
 800e9ac:	eeb0 0a47 	vmov.f32	s0, s14
 800e9b0:	eef0 0a67 	vmov.f32	s1, s15
 800e9b4:	3708      	adds	r7, #8
 800e9b6:	46bd      	mov	sp, r7
 800e9b8:	bd80      	pop	{r7, pc}

0800e9ba <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800e9ba:	b580      	push	{r7, lr}
 800e9bc:	b082      	sub	sp, #8
 800e9be:	af00      	add	r7, sp, #0
 800e9c0:	ed87 0a01 	vstr	s0, [r7, #4]
 800e9c4:	ed97 0a01 	vldr	s0, [r7, #4]
 800e9c8:	f7f2 fb7c 	bl	80010c4 <_ZSt5roundf>
 800e9cc:	eef0 7a40 	vmov.f32	s15, s0
 800e9d0:	eeb0 0a67 	vmov.f32	s0, s15
 800e9d4:	3708      	adds	r7, #8
 800e9d6:	46bd      	mov	sp, r7
 800e9d8:	bd80      	pop	{r7, pc}

0800e9da <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800e9da:	b480      	push	{r7}
 800e9dc:	af00      	add	r7, sp, #0
 800e9de:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800e9e2:	4618      	mov	r0, r3
 800e9e4:	46bd      	mov	sp, r7
 800e9e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9ea:	4770      	bx	lr

0800e9ec <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800e9ec:	b480      	push	{r7}
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	237f      	movs	r3, #127	; 0x7f
 800e9f2:	4618      	mov	r0, r3
 800e9f4:	46bd      	mov	sp, r7
 800e9f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9fa:	4770      	bx	lr

0800e9fc <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800e9fc:	b480      	push	{r7}
 800e9fe:	af00      	add	r7, sp, #0
 800ea00:	2300      	movs	r3, #0
 800ea02:	4618      	mov	r0, r3
 800ea04:	46bd      	mov	sp, r7
 800ea06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea0a:	4770      	bx	lr

0800ea0c <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800ea0c:	b480      	push	{r7}
 800ea0e:	af00      	add	r7, sp, #0
 800ea10:	23ff      	movs	r3, #255	; 0xff
 800ea12:	4618      	mov	r0, r3
 800ea14:	46bd      	mov	sp, r7
 800ea16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea1a:	4770      	bx	lr

0800ea1c <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800ea1c:	b480      	push	{r7}
 800ea1e:	af00      	add	r7, sp, #0
 800ea20:	4b02      	ldr	r3, [pc, #8]	; (800ea2c <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800ea22:	4618      	mov	r0, r3
 800ea24:	46bd      	mov	sp, r7
 800ea26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea2a:	4770      	bx	lr
 800ea2c:	ffff8000 	.word	0xffff8000

0800ea30 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800ea30:	b480      	push	{r7}
 800ea32:	af00      	add	r7, sp, #0
 800ea34:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ea38:	4618      	mov	r0, r3
 800ea3a:	46bd      	mov	sp, r7
 800ea3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea40:	4770      	bx	lr

0800ea42 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "../../../../../ei-keyword-spotting/edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "../../../../../ei-keyword-spotting/edge-impulse-sdk/tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800ea42:	b480      	push	{r7}
 800ea44:	b083      	sub	sp, #12
 800ea46:	af00      	add	r7, sp, #0
 800ea48:	6078      	str	r0, [r7, #4]
 800ea4a:	687b      	ldr	r3, [r7, #4]
 800ea4c:	689b      	ldr	r3, [r3, #8]
 800ea4e:	681b      	ldr	r3, [r3, #0]
 800ea50:	4618      	mov	r0, r3
 800ea52:	370c      	adds	r7, #12
 800ea54:	46bd      	mov	sp, r7
 800ea56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea5a:	4770      	bx	lr

0800ea5c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800ea5c:	b480      	push	{r7}
 800ea5e:	b083      	sub	sp, #12
 800ea60:	af00      	add	r7, sp, #0
 800ea62:	6078      	str	r0, [r7, #4]
 800ea64:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800ea66:	687b      	ldr	r3, [r7, #4]
 800ea68:	689a      	ldr	r2, [r3, #8]
 800ea6a:	683b      	ldr	r3, [r7, #0]
 800ea6c:	009b      	lsls	r3, r3, #2
 800ea6e:	4413      	add	r3, r2
 800ea70:	685b      	ldr	r3, [r3, #4]
}
 800ea72:	4618      	mov	r0, r3
 800ea74:	370c      	adds	r7, #12
 800ea76:	46bd      	mov	sp, r7
 800ea78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea7c:	4770      	bx	lr

0800ea7e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800ea7e:	b480      	push	{r7}
 800ea80:	b087      	sub	sp, #28
 800ea82:	af00      	add	r7, sp, #0
 800ea84:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800ea86:	f04f 0201 	mov.w	r2, #1
 800ea8a:	f04f 0300 	mov.w	r3, #0
 800ea8e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800ea92:	2300      	movs	r3, #0
 800ea94:	60fb      	str	r3, [r7, #12]
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	681b      	ldr	r3, [r3, #0]
 800ea9a:	68fa      	ldr	r2, [r7, #12]
 800ea9c:	429a      	cmp	r2, r3
 800ea9e:	da1b      	bge.n	800ead8 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800eaa0:	687a      	ldr	r2, [r7, #4]
 800eaa2:	68fb      	ldr	r3, [r7, #12]
 800eaa4:	009b      	lsls	r3, r3, #2
 800eaa6:	4413      	add	r3, r2
 800eaa8:	685b      	ldr	r3, [r3, #4]
 800eaaa:	461a      	mov	r2, r3
 800eaac:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800eab0:	6979      	ldr	r1, [r7, #20]
 800eab2:	fb02 f001 	mul.w	r0, r2, r1
 800eab6:	6939      	ldr	r1, [r7, #16]
 800eab8:	fb03 f101 	mul.w	r1, r3, r1
 800eabc:	4401      	add	r1, r0
 800eabe:	6938      	ldr	r0, [r7, #16]
 800eac0:	fba0 2302 	umull	r2, r3, r0, r2
 800eac4:	4419      	add	r1, r3
 800eac6:	460b      	mov	r3, r1
 800eac8:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800eacc:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800ead0:	68fb      	ldr	r3, [r7, #12]
 800ead2:	3301      	adds	r3, #1
 800ead4:	60fb      	str	r3, [r7, #12]
 800ead6:	e7de      	b.n	800ea96 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800ead8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800eadc:	4610      	mov	r0, r2
 800eade:	4619      	mov	r1, r3
 800eae0:	371c      	adds	r7, #28
 800eae2:	46bd      	mov	sp, r7
 800eae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eae8:	4770      	bx	lr

0800eaea <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800eaea:	b580      	push	{r7, lr}
 800eaec:	b082      	sub	sp, #8
 800eaee:	af00      	add	r7, sp, #0
 800eaf0:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	689b      	ldr	r3, [r3, #8]
 800eaf6:	4618      	mov	r0, r3
 800eaf8:	f7ff ffc1 	bl	800ea7e <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800eafc:	4602      	mov	r2, r0
 800eafe:	460b      	mov	r3, r1
}
 800eb00:	4610      	mov	r0, r2
 800eb02:	4619      	mov	r1, r3
 800eb04:	3708      	adds	r7, #8
 800eb06:	46bd      	mov	sp, r7
 800eb08:	bd80      	pop	{r7, pc}

0800eb0a <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800eb0a:	b480      	push	{r7}
 800eb0c:	b083      	sub	sp, #12
 800eb0e:	af00      	add	r7, sp, #0
 800eb10:	ed87 0b00 	vstr	d0, [r7]
 800eb14:	683a      	ldr	r2, [r7, #0]
 800eb16:	6879      	ldr	r1, [r7, #4]
 800eb18:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb1c:	ec43 2b17 	vmov	d7, r2, r3
 800eb20:	eeb0 0a47 	vmov.f32	s0, s14
 800eb24:	eef0 0a67 	vmov.f32	s1, s15
 800eb28:	370c      	adds	r7, #12
 800eb2a:	46bd      	mov	sp, r7
 800eb2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb30:	4770      	bx	lr
	...

0800eb34 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 800eb34:	b5b0      	push	{r4, r5, r7, lr}
 800eb36:	b09c      	sub	sp, #112	; 0x70
 800eb38:	af04      	add	r7, sp, #16
 800eb3a:	60f8      	str	r0, [r7, #12]
 800eb3c:	60b9      	str	r1, [r7, #8]
 800eb3e:	607a      	str	r2, [r7, #4]
 800eb40:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800eb42:	68bb      	ldr	r3, [r7, #8]
 800eb44:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb48:	2b01      	cmp	r3, #1
 800eb4a:	d013      	beq.n	800eb74 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 800eb4c:	68fb      	ldr	r3, [r7, #12]
 800eb4e:	695c      	ldr	r4, [r3, #20]
 800eb50:	68bb      	ldr	r3, [r7, #8]
 800eb52:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb56:	461a      	mov	r2, r3
 800eb58:	2301      	movs	r3, #1
 800eb5a:	9303      	str	r3, [sp, #12]
 800eb5c:	9202      	str	r2, [sp, #8]
 800eb5e:	4b98      	ldr	r3, [pc, #608]	; (800edc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800eb60:	9301      	str	r3, [sp, #4]
 800eb62:	4b98      	ldr	r3, [pc, #608]	; (800edc4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 800eb64:	9300      	str	r3, [sp, #0]
 800eb66:	2335      	movs	r3, #53	; 0x35
 800eb68:	4a97      	ldr	r2, [pc, #604]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800eb6a:	4998      	ldr	r1, [pc, #608]	; (800edcc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800eb6c:	68f8      	ldr	r0, [r7, #12]
 800eb6e:	47a0      	blx	r4
 800eb70:	2301      	movs	r3, #1
 800eb72:	e173      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb7a:	2b01      	cmp	r3, #1
 800eb7c:	d013      	beq.n	800eba6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 800eb7e:	68fb      	ldr	r3, [r7, #12]
 800eb80:	695c      	ldr	r4, [r3, #20]
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb88:	461a      	mov	r2, r3
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	9303      	str	r3, [sp, #12]
 800eb8e:	9202      	str	r2, [sp, #8]
 800eb90:	4b8b      	ldr	r3, [pc, #556]	; (800edc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800eb92:	9301      	str	r3, [sp, #4]
 800eb94:	4b8e      	ldr	r3, [pc, #568]	; (800edd0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 800eb96:	9300      	str	r3, [sp, #0]
 800eb98:	2337      	movs	r3, #55	; 0x37
 800eb9a:	4a8b      	ldr	r2, [pc, #556]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800eb9c:	498b      	ldr	r1, [pc, #556]	; (800edcc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800eb9e:	68f8      	ldr	r0, [r7, #12]
 800eba0:	47a0      	blx	r4
 800eba2:	2301      	movs	r3, #1
 800eba4:	e15a      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800eba6:	687b      	ldr	r3, [r7, #4]
 800eba8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ebaa:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800ebac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebae:	2b00      	cmp	r3, #0
 800ebb0:	d10a      	bne.n	800ebc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800ebb2:	68fb      	ldr	r3, [r7, #12]
 800ebb4:	695c      	ldr	r4, [r3, #20]
 800ebb6:	4b87      	ldr	r3, [pc, #540]	; (800edd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 800ebb8:	9300      	str	r3, [sp, #0]
 800ebba:	2342      	movs	r3, #66	; 0x42
 800ebbc:	4a82      	ldr	r2, [pc, #520]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ebbe:	4986      	ldr	r1, [pc, #536]	; (800edd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	47a0      	blx	r4
 800ebc4:	2301      	movs	r3, #1
 800ebc6:	e149      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800ebc8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebca:	681b      	ldr	r3, [r3, #0]
 800ebcc:	2b00      	cmp	r3, #0
 800ebce:	d10a      	bne.n	800ebe6 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 800ebd0:	68fb      	ldr	r3, [r7, #12]
 800ebd2:	695c      	ldr	r4, [r3, #20]
 800ebd4:	4b81      	ldr	r3, [pc, #516]	; (800eddc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 800ebd6:	9300      	str	r3, [sp, #0]
 800ebd8:	2343      	movs	r3, #67	; 0x43
 800ebda:	4a7b      	ldr	r2, [pc, #492]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ebdc:	497e      	ldr	r1, [pc, #504]	; (800edd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800ebde:	68f8      	ldr	r0, [r7, #12]
 800ebe0:	47a0      	blx	r4
 800ebe2:	2301      	movs	r3, #1
 800ebe4:	e13a      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800ebe6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebe8:	681b      	ldr	r3, [r3, #0]
 800ebea:	681b      	ldr	r3, [r3, #0]
 800ebec:	2b01      	cmp	r3, #1
 800ebee:	bfcc      	ite	gt
 800ebf0:	2301      	movgt	r3, #1
 800ebf2:	2300      	movle	r3, #0
 800ebf4:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800ebf8:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebfc:	2b00      	cmp	r3, #0
 800ebfe:	d067      	beq.n	800ecd0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 800ec00:	68bb      	ldr	r3, [r7, #8]
 800ec02:	781b      	ldrb	r3, [r3, #0]
 800ec04:	2b09      	cmp	r3, #9
 800ec06:	d00e      	beq.n	800ec26 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800ec08:	68bb      	ldr	r3, [r7, #8]
 800ec0a:	781b      	ldrb	r3, [r3, #0]
 800ec0c:	2b07      	cmp	r3, #7
 800ec0e:	d00a      	beq.n	800ec26 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800ec10:	68fb      	ldr	r3, [r7, #12]
 800ec12:	695c      	ldr	r4, [r3, #20]
 800ec14:	4b72      	ldr	r3, [pc, #456]	; (800ede0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 800ec16:	9300      	str	r3, [sp, #0]
 800ec18:	2347      	movs	r3, #71	; 0x47
 800ec1a:	4a6b      	ldr	r2, [pc, #428]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ec1c:	496e      	ldr	r1, [pc, #440]	; (800edd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800ec1e:	68f8      	ldr	r0, [r7, #12]
 800ec20:	47a0      	blx	r4
 800ec22:	2301      	movs	r3, #1
 800ec24:	e11a      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800ec26:	687b      	ldr	r3, [r7, #4]
 800ec28:	781b      	ldrb	r3, [r3, #0]
 800ec2a:	2b09      	cmp	r3, #9
 800ec2c:	d012      	beq.n	800ec54 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 800ec2e:	68fb      	ldr	r3, [r7, #12]
 800ec30:	695c      	ldr	r4, [r3, #20]
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	781b      	ldrb	r3, [r3, #0]
 800ec36:	461a      	mov	r2, r3
 800ec38:	2309      	movs	r3, #9
 800ec3a:	9303      	str	r3, [sp, #12]
 800ec3c:	9202      	str	r2, [sp, #8]
 800ec3e:	4b69      	ldr	r3, [pc, #420]	; (800ede4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800ec40:	9301      	str	r3, [sp, #4]
 800ec42:	4b69      	ldr	r3, [pc, #420]	; (800ede8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 800ec44:	9300      	str	r3, [sp, #0]
 800ec46:	2349      	movs	r3, #73	; 0x49
 800ec48:	4a5f      	ldr	r2, [pc, #380]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ec4a:	4960      	ldr	r1, [pc, #384]	; (800edcc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800ec4c:	68f8      	ldr	r0, [r7, #12]
 800ec4e:	47a0      	blx	r4
 800ec50:	2301      	movs	r3, #1
 800ec52:	e103      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800ec54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec56:	681b      	ldr	r3, [r3, #0]
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ec5e:	429a      	cmp	r2, r3
 800ec60:	d013      	beq.n	800ec8a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800ec62:	68fb      	ldr	r3, [r7, #12]
 800ec64:	695c      	ldr	r4, [r3, #20]
 800ec66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec68:	681b      	ldr	r3, [r3, #0]
 800ec6a:	681b      	ldr	r3, [r3, #0]
 800ec6c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ec70:	9203      	str	r2, [sp, #12]
 800ec72:	9302      	str	r3, [sp, #8]
 800ec74:	4b5d      	ldr	r3, [pc, #372]	; (800edec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800ec76:	9301      	str	r3, [sp, #4]
 800ec78:	4b5d      	ldr	r3, [pc, #372]	; (800edf0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 800ec7a:	9300      	str	r3, [sp, #0]
 800ec7c:	234a      	movs	r3, #74	; 0x4a
 800ec7e:	4a52      	ldr	r2, [pc, #328]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ec80:	4952      	ldr	r1, [pc, #328]	; (800edcc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800ec82:	68f8      	ldr	r0, [r7, #12]
 800ec84:	47a0      	blx	r4
 800ec86:	2301      	movs	r3, #1
 800ec88:	e0e8      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 800ec8a:	687b      	ldr	r3, [r7, #4]
 800ec8c:	689a      	ldr	r2, [r3, #8]
 800ec8e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec90:	689b      	ldr	r3, [r3, #8]
 800ec92:	009b      	lsls	r3, r3, #2
 800ec94:	4413      	add	r3, r2
 800ec96:	685b      	ldr	r3, [r3, #4]
 800ec98:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ec9c:	429a      	cmp	r2, r3
 800ec9e:	d017      	beq.n	800ecd0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 800eca0:	68fb      	ldr	r3, [r7, #12]
 800eca2:	695c      	ldr	r4, [r3, #20]
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	689a      	ldr	r2, [r3, #8]
 800eca8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecaa:	689b      	ldr	r3, [r3, #8]
 800ecac:	009b      	lsls	r3, r3, #2
 800ecae:	4413      	add	r3, r2
 800ecb0:	685b      	ldr	r3, [r3, #4]
 800ecb2:	9303      	str	r3, [sp, #12]
 800ecb4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecb8:	9302      	str	r3, [sp, #8]
 800ecba:	4b4e      	ldr	r3, [pc, #312]	; (800edf4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 800ecbc:	9301      	str	r3, [sp, #4]
 800ecbe:	4b4b      	ldr	r3, [pc, #300]	; (800edec <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800ecc0:	9300      	str	r3, [sp, #0]
 800ecc2:	234b      	movs	r3, #75	; 0x4b
 800ecc4:	4a40      	ldr	r2, [pc, #256]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ecc6:	4941      	ldr	r1, [pc, #260]	; (800edcc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800ecc8:	68f8      	ldr	r0, [r7, #12]
 800ecca:	47a0      	blx	r4
 800eccc:	2301      	movs	r3, #1
 800ecce:	e0c5      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800ecd0:	68bb      	ldr	r3, [r7, #8]
 800ecd2:	68db      	ldr	r3, [r3, #12]
 800ecd4:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800ecd6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecd8:	68db      	ldr	r3, [r3, #12]
 800ecda:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800ecdc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecde:	681b      	ldr	r3, [r3, #0]
 800ece0:	3304      	adds	r3, #4
 800ece2:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800ece4:	2300      	movs	r3, #0
 800ece6:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ece8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ecea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecee:	429a      	cmp	r2, r3
 800ecf0:	da47      	bge.n	800ed82 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800ecf2:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecf6:	2b00      	cmp	r3, #0
 800ecf8:	d005      	beq.n	800ed06 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 800ecfa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ecfc:	009b      	lsls	r3, r3, #2
 800ecfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ed00:	4413      	add	r3, r2
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	e001      	b.n	800ed0a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 800ed06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ed08:	681b      	ldr	r3, [r3, #0]
 800ed0a:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800ed0c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ed0e:	f7f1 fc3b 	bl	8000588 <__aeabi_f2d>
 800ed12:	4602      	mov	r2, r0
 800ed14:	460b      	mov	r3, r1
 800ed16:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800ed1a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ed1c:	f7f1 fc34 	bl	8000588 <__aeabi_f2d>
 800ed20:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ed24:	f7f1 fc88 	bl	8000638 <__aeabi_dmul>
 800ed28:	4602      	mov	r2, r0
 800ed2a:	460b      	mov	r3, r1
 800ed2c:	4614      	mov	r4, r2
 800ed2e:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800ed30:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed32:	f7f1 fc29 	bl	8000588 <__aeabi_f2d>
 800ed36:	4602      	mov	r2, r0
 800ed38:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800ed3a:	4620      	mov	r0, r4
 800ed3c:	4629      	mov	r1, r5
 800ed3e:	f7f1 fda5 	bl	800088c <__aeabi_ddiv>
 800ed42:	4602      	mov	r2, r0
 800ed44:	460b      	mov	r3, r1
 800ed46:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800ed4a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ed4e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed52:	4611      	mov	r1, r2
 800ed54:	4618      	mov	r0, r3
 800ed56:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800ed5a:	f7ff fc39 	bl	800e5d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800ed5e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed60:	009b      	lsls	r3, r3, #2
 800ed62:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed66:	4413      	add	r3, r2
 800ed68:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed6a:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 800ed6c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed6e:	009b      	lsls	r3, r3, #2
 800ed70:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ed74:	4413      	add	r3, r2
 800ed76:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed78:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800ed7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed7c:	3301      	adds	r3, #1
 800ed7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed80:	e7b2      	b.n	800ece8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	781b      	ldrb	r3, [r3, #0]
 800ed86:	2b03      	cmp	r3, #3
 800ed88:	d146      	bne.n	800ee18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800ed8a:	f04f 0200 	mov.w	r2, #0
 800ed8e:	f04f 0300 	mov.w	r3, #0
 800ed92:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800ed96:	f107 0318 	add.w	r3, r7, #24
 800ed9a:	9301      	str	r3, [sp, #4]
 800ed9c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed9e:	9300      	str	r3, [sp, #0]
 800eda0:	683b      	ldr	r3, [r7, #0]
 800eda2:	687a      	ldr	r2, [r7, #4]
 800eda4:	68b9      	ldr	r1, [r7, #8]
 800eda6:	68f8      	ldr	r0, [r7, #12]
 800eda8:	f000 f85e 	bl	800ee68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800edac:	4603      	mov	r3, r0
 800edae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800edb2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edb6:	2b00      	cmp	r3, #0
 800edb8:	d01e      	beq.n	800edf8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 800edba:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800edbe:	e04d      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 800edc0:	0801e1e0 	.word	0x0801e1e0
 800edc4:	0801e1fc 	.word	0x0801e1fc
 800edc8:	0801e170 	.word	0x0801e170
 800edcc:	0801e1c4 	.word	0x0801e1c4
 800edd0:	0801e218 	.word	0x0801e218
 800edd4:	0801e24c 	.word	0x0801e24c
 800edd8:	0801e234 	.word	0x0801e234
 800eddc:	0801e260 	.word	0x0801e260
 800ede0:	0801e27c 	.word	0x0801e27c
 800ede4:	0801e2b8 	.word	0x0801e2b8
 800ede8:	0801e2c4 	.word	0x0801e2c4
 800edec:	0801e2d4 	.word	0x0801e2d4
 800edf0:	0801e2e4 	.word	0x0801e2e4
 800edf4:	0801e308 	.word	0x0801e308
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800edf8:	ed97 7b06 	vldr	d7, [r7, #24]
 800edfc:	f107 0314 	add.w	r3, r7, #20
 800ee00:	4619      	mov	r1, r3
 800ee02:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800ee04:	eeb0 0a47 	vmov.f32	s0, s14
 800ee08:	eef0 0a67 	vmov.f32	s1, s15
 800ee0c:	f7ff fbe0 	bl	800e5d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 800ee10:	697b      	ldr	r3, [r7, #20]
 800ee12:	425a      	negs	r2, r3
 800ee14:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ee16:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800ee18:	68bb      	ldr	r3, [r7, #8]
 800ee1a:	781b      	ldrb	r3, [r3, #0]
 800ee1c:	2b09      	cmp	r3, #9
 800ee1e:	d007      	beq.n	800ee30 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	781b      	ldrb	r3, [r3, #0]
 800ee24:	2b03      	cmp	r3, #3
 800ee26:	d003      	beq.n	800ee30 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 800ee28:	68bb      	ldr	r3, [r7, #8]
 800ee2a:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800ee2c:	2b07      	cmp	r3, #7
 800ee2e:	d114      	bne.n	800ee5a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800ee30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee32:	7819      	ldrb	r1, [r3, #0]
 800ee34:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee38:	9300      	str	r3, [sp, #0]
 800ee3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee3e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee40:	68f8      	ldr	r0, [r7, #12]
 800ee42:	f000 f99b 	bl	800f17c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800ee46:	4603      	mov	r3, r0
 800ee48:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ee4c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ee50:	2b00      	cmp	r3, #0
 800ee52:	d002      	beq.n	800ee5a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 800ee54:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ee58:	e000      	b.n	800ee5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800ee5a:	2300      	movs	r3, #0
}
 800ee5c:	4618      	mov	r0, r3
 800ee5e:	3760      	adds	r7, #96	; 0x60
 800ee60:	46bd      	mov	sp, r7
 800ee62:	bdb0      	pop	{r4, r5, r7, pc}
 800ee64:	0000      	movs	r0, r0
	...

0800ee68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800ee68:	b5b0      	push	{r4, r5, r7, lr}
 800ee6a:	b08e      	sub	sp, #56	; 0x38
 800ee6c:	af02      	add	r7, sp, #8
 800ee6e:	60f8      	str	r0, [r7, #12]
 800ee70:	60b9      	str	r1, [r7, #8]
 800ee72:	607a      	str	r2, [r7, #4]
 800ee74:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800ee76:	68bb      	ldr	r3, [r7, #8]
 800ee78:	68db      	ldr	r3, [r3, #12]
 800ee7a:	4618      	mov	r0, r3
 800ee7c:	f7f1 fb84 	bl	8000588 <__aeabi_f2d>
 800ee80:	4604      	mov	r4, r0
 800ee82:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800ee84:	687b      	ldr	r3, [r7, #4]
 800ee86:	68db      	ldr	r3, [r3, #12]
 800ee88:	4618      	mov	r0, r3
 800ee8a:	f7f1 fb7d 	bl	8000588 <__aeabi_f2d>
 800ee8e:	4602      	mov	r2, r0
 800ee90:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800ee92:	4620      	mov	r0, r4
 800ee94:	4629      	mov	r1, r5
 800ee96:	f7f1 fbcf 	bl	8000638 <__aeabi_dmul>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 800eea2:	683b      	ldr	r3, [r7, #0]
 800eea4:	2b00      	cmp	r3, #0
 800eea6:	d04a      	beq.n	800ef3e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800eea8:	683b      	ldr	r3, [r7, #0]
 800eeaa:	68db      	ldr	r3, [r3, #12]
 800eeac:	4618      	mov	r0, r3
 800eeae:	f7f1 fb6b 	bl	8000588 <__aeabi_f2d>
 800eeb2:	4602      	mov	r2, r0
 800eeb4:	460b      	mov	r3, r1
 800eeb6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800eeba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eebe:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800eec2:	f7f1 fa01 	bl	80002c8 <__aeabi_dsub>
 800eec6:	4602      	mov	r2, r0
 800eec8:	460b      	mov	r3, r1
 800eeca:	ec43 2b17 	vmov	d7, r2, r3
 800eece:	eeb0 0a47 	vmov.f32	s0, s14
 800eed2:	eef0 0a67 	vmov.f32	s1, s15
 800eed6:	f7ff fe18 	bl	800eb0a <_ZSt3absd>
 800eeda:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800eede:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eee0:	68db      	ldr	r3, [r3, #12]
 800eee2:	4618      	mov	r0, r3
 800eee4:	f7f1 fb50 	bl	8000588 <__aeabi_f2d>
 800eee8:	4602      	mov	r2, r0
 800eeea:	460b      	mov	r3, r1
 800eeec:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800eef0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eef4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800eef8:	f7f1 fcc8 	bl	800088c <__aeabi_ddiv>
 800eefc:	4602      	mov	r2, r0
 800eefe:	460b      	mov	r3, r1
 800ef00:	4610      	mov	r0, r2
 800ef02:	4619      	mov	r1, r3
 800ef04:	2301      	movs	r3, #1
 800ef06:	461c      	mov	r4, r3
 800ef08:	a318      	add	r3, pc, #96	; (adr r3, 800ef6c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800ef0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef0e:	f7f1 fe0f 	bl	8000b30 <__aeabi_dcmple>
 800ef12:	4603      	mov	r3, r0
 800ef14:	2b00      	cmp	r3, #0
 800ef16:	d101      	bne.n	800ef1c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800ef18:	2300      	movs	r3, #0
 800ef1a:	461c      	mov	r4, r3
 800ef1c:	b2e3      	uxtb	r3, r4
 800ef1e:	f083 0301 	eor.w	r3, r3, #1
 800ef22:	b2db      	uxtb	r3, r3
 800ef24:	2b00      	cmp	r3, #0
 800ef26:	d00a      	beq.n	800ef3e <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	695c      	ldr	r4, [r3, #20]
 800ef2c:	4b0c      	ldr	r3, [pc, #48]	; (800ef60 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800ef2e:	9300      	str	r3, [sp, #0]
 800ef30:	239a      	movs	r3, #154	; 0x9a
 800ef32:	4a0c      	ldr	r2, [pc, #48]	; (800ef64 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800ef34:	490c      	ldr	r1, [pc, #48]	; (800ef68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800ef36:	68f8      	ldr	r0, [r7, #12]
 800ef38:	47a0      	blx	r4
 800ef3a:	2301      	movs	r3, #1
 800ef3c:	e009      	b.n	800ef52 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800ef3e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef40:	9300      	str	r3, [sp, #0]
 800ef42:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef44:	687a      	ldr	r2, [r7, #4]
 800ef46:	68b9      	ldr	r1, [r7, #8]
 800ef48:	68f8      	ldr	r0, [r7, #12]
 800ef4a:	f000 f813 	bl	800ef74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800ef4e:	4603      	mov	r3, r0
                                          multiplier);
 800ef50:	bf00      	nop
}
 800ef52:	4618      	mov	r0, r3
 800ef54:	3730      	adds	r7, #48	; 0x30
 800ef56:	46bd      	mov	sp, r7
 800ef58:	bdb0      	pop	{r4, r5, r7, pc}
 800ef5a:	bf00      	nop
 800ef5c:	f3af 8000 	nop.w
 800ef60:	0801e348 	.word	0x0801e348
 800ef64:	0801e170 	.word	0x0801e170
 800ef68:	0801e234 	.word	0x0801e234
 800ef6c:	47ae147b 	.word	0x47ae147b
 800ef70:	3f947ae1 	.word	0x3f947ae1

0800ef74 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800ef74:	b590      	push	{r4, r7, lr}
 800ef76:	b089      	sub	sp, #36	; 0x24
 800ef78:	af02      	add	r7, sp, #8
 800ef7a:	60f8      	str	r0, [r7, #12]
 800ef7c:	60b9      	str	r1, [r7, #8]
 800ef7e:	607a      	str	r2, [r7, #4]
 800ef80:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800ef82:	68bb      	ldr	r3, [r7, #8]
 800ef84:	ed93 7a03 	vldr	s14, [r3, #12]
 800ef88:	687b      	ldr	r3, [r7, #4]
 800ef8a:	edd3 7a03 	vldr	s15, [r3, #12]
 800ef8e:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800ef92:	ee17 0a90 	vmov	r0, s15
 800ef96:	f7f1 faf7 	bl	8000588 <__aeabi_f2d>
 800ef9a:	4602      	mov	r2, r0
 800ef9c:	460b      	mov	r3, r1
 800ef9e:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800efa2:	2301      	movs	r3, #1
 800efa4:	461c      	mov	r4, r3
 800efa6:	f04f 0200 	mov.w	r2, #0
 800efaa:	f04f 0300 	mov.w	r3, #0
 800efae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efb2:	f7f1 fdc7 	bl	8000b44 <__aeabi_dcmpge>
 800efb6:	4603      	mov	r3, r0
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d101      	bne.n	800efc0 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800efbc:	2300      	movs	r3, #0
 800efbe:	461c      	mov	r4, r3
 800efc0:	b2e3      	uxtb	r3, r4
 800efc2:	f083 0301 	eor.w	r3, r3, #1
 800efc6:	b2db      	uxtb	r3, r3
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d00a      	beq.n	800efe2 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	695c      	ldr	r4, [r3, #20]
 800efd0:	4b0e      	ldr	r3, [pc, #56]	; (800f00c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 800efd2:	9300      	str	r3, [sp, #0]
 800efd4:	23a7      	movs	r3, #167	; 0xa7
 800efd6:	4a0e      	ldr	r2, [pc, #56]	; (800f010 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800efd8:	490e      	ldr	r1, [pc, #56]	; (800f014 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800efda:	68f8      	ldr	r0, [r7, #12]
 800efdc:	47a0      	blx	r4
 800efde:	2301      	movs	r3, #1
 800efe0:	e010      	b.n	800f004 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800efe2:	683b      	ldr	r3, [r7, #0]
 800efe4:	68db      	ldr	r3, [r3, #12]
 800efe6:	4618      	mov	r0, r3
 800efe8:	f7f1 face 	bl	8000588 <__aeabi_f2d>
 800efec:	4602      	mov	r2, r0
 800efee:	460b      	mov	r3, r1
 800eff0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800eff4:	f7f1 fc4a 	bl	800088c <__aeabi_ddiv>
 800eff8:	4602      	mov	r2, r0
 800effa:	460b      	mov	r3, r1
 800effc:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800effe:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800f002:	2300      	movs	r3, #0
}
 800f004:	4618      	mov	r0, r3
 800f006:	371c      	adds	r7, #28
 800f008:	46bd      	mov	sp, r7
 800f00a:	bd90      	pop	{r4, r7, pc}
 800f00c:	0801e36c 	.word	0x0801e36c
 800f010:	0801e170 	.word	0x0801e170
 800f014:	0801e234 	.word	0x0801e234

0800f018 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 800f018:	b580      	push	{r7, lr}
 800f01a:	b082      	sub	sp, #8
 800f01c:	af00      	add	r7, sp, #0
 800f01e:	6078      	str	r0, [r7, #4]
 800f020:	ed87 0a00 	vstr	s0, [r7]
 800f024:	687b      	ldr	r3, [r7, #4]
 800f026:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800f02a:	ed97 7a00 	vldr	s14, [r7]
 800f02e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f032:	eeb0 0a66 	vmov.f32	s0, s13
 800f036:	f7ff fcc0 	bl	800e9ba <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f03a:	eef0 7a40 	vmov.f32	s15, s0
 800f03e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f042:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800f04a:	4413      	add	r3, r2
  };
 800f04c:	4618      	mov	r0, r3
 800f04e:	3708      	adds	r7, #8
 800f050:	46bd      	mov	sp, r7
 800f052:	bd80      	pop	{r7, pc}

0800f054 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 800f054:	b580      	push	{r7, lr}
 800f056:	b08e      	sub	sp, #56	; 0x38
 800f058:	af00      	add	r7, sp, #0
 800f05a:	60b9      	str	r1, [r7, #8]
 800f05c:	607a      	str	r2, [r7, #4]
 800f05e:	603b      	str	r3, [r7, #0]
 800f060:	4603      	mov	r3, r0
 800f062:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 800f064:	683b      	ldr	r3, [r7, #0]
 800f066:	68db      	ldr	r3, [r3, #12]
 800f068:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800f06a:	683b      	ldr	r3, [r7, #0]
 800f06c:	691b      	ldr	r3, [r3, #16]
 800f06e:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800f070:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f072:	617b      	str	r3, [r7, #20]
 800f074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f076:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 800f078:	7bfb      	ldrb	r3, [r7, #15]
 800f07a:	2b01      	cmp	r3, #1
 800f07c:	d118      	bne.n	800f0b0 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800f07e:	f107 0314 	add.w	r3, r7, #20
 800f082:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800f178 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800f086:	4618      	mov	r0, r3
 800f088:	f7ff ffc6 	bl	800f018 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f08c:	4603      	mov	r3, r0
 800f08e:	61fb      	str	r3, [r7, #28]
 800f090:	f107 021c 	add.w	r2, r7, #28
 800f094:	f107 0308 	add.w	r3, r7, #8
 800f098:	4611      	mov	r1, r2
 800f09a:	4618      	mov	r0, r3
 800f09c:	f000 f8ed 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 800f0a0:	4603      	mov	r3, r0
 800f0a2:	681a      	ldr	r2, [r3, #0]
 800f0a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0a6:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800f0a8:	687a      	ldr	r2, [r7, #4]
 800f0aa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ac:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 800f0ae:	e05f      	b.n	800f170 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 800f0b0:	7bfb      	ldrb	r3, [r7, #15]
 800f0b2:	2b03      	cmp	r3, #3
 800f0b4:	d129      	bne.n	800f10a <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 800f0b6:	f107 0314 	add.w	r3, r7, #20
 800f0ba:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800f178 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7ff ffaa 	bl	800f018 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f0c4:	4603      	mov	r3, r0
 800f0c6:	623b      	str	r3, [r7, #32]
 800f0c8:	f107 0220 	add.w	r2, r7, #32
 800f0cc:	f107 0308 	add.w	r3, r7, #8
 800f0d0:	4611      	mov	r1, r2
 800f0d2:	4618      	mov	r0, r3
 800f0d4:	f000 f8d1 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 800f0d8:	4603      	mov	r3, r0
 800f0da:	681a      	ldr	r2, [r3, #0]
 800f0dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0de:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 800f0e0:	f107 0314 	add.w	r3, r7, #20
 800f0e4:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800f0e8:	4618      	mov	r0, r3
 800f0ea:	f7ff ff95 	bl	800f018 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f0ee:	4603      	mov	r3, r0
 800f0f0:	627b      	str	r3, [r7, #36]	; 0x24
 800f0f2:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f0f6:	1d3b      	adds	r3, r7, #4
 800f0f8:	4611      	mov	r1, r2
 800f0fa:	4618      	mov	r0, r3
 800f0fc:	f000 f8d1 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 800f100:	4603      	mov	r3, r0
 800f102:	681a      	ldr	r2, [r3, #0]
 800f104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f106:	601a      	str	r2, [r3, #0]
}
 800f108:	e032      	b.n	800f170 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 800f10a:	7bfb      	ldrb	r3, [r7, #15]
 800f10c:	2b02      	cmp	r3, #2
 800f10e:	d129      	bne.n	800f164 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 800f110:	f107 0314 	add.w	r3, r7, #20
 800f114:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f118:	4618      	mov	r0, r3
 800f11a:	f7ff ff7d 	bl	800f018 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f11e:	4603      	mov	r3, r0
 800f120:	62bb      	str	r3, [r7, #40]	; 0x28
 800f122:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f126:	f107 0308 	add.w	r3, r7, #8
 800f12a:	4611      	mov	r1, r2
 800f12c:	4618      	mov	r0, r3
 800f12e:	f000 f8a4 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 800f132:	4603      	mov	r3, r0
 800f134:	681a      	ldr	r2, [r3, #0]
 800f136:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f138:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 800f13a:	f107 0314 	add.w	r3, r7, #20
 800f13e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f142:	4618      	mov	r0, r3
 800f144:	f7ff ff68 	bl	800f018 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f148:	4603      	mov	r3, r0
 800f14a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f14c:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f150:	1d3b      	adds	r3, r7, #4
 800f152:	4611      	mov	r1, r2
 800f154:	4618      	mov	r0, r3
 800f156:	f000 f8a4 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 800f15a:	4603      	mov	r3, r0
 800f15c:	681a      	ldr	r2, [r3, #0]
 800f15e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f160:	601a      	str	r2, [r3, #0]
}
 800f162:	e005      	b.n	800f170 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 800f164:	68ba      	ldr	r2, [r7, #8]
 800f166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f168:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800f16a:	687a      	ldr	r2, [r7, #4]
 800f16c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f16e:	601a      	str	r2, [r3, #0]
}
 800f170:	bf00      	nop
 800f172:	3738      	adds	r7, #56	; 0x38
 800f174:	46bd      	mov	sp, r7
 800f176:	bd80      	pop	{r7, pc}
 800f178:	00000000 	.word	0x00000000

0800f17c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800f17c:	b590      	push	{r4, r7, lr}
 800f17e:	b089      	sub	sp, #36	; 0x24
 800f180:	af02      	add	r7, sp, #8
 800f182:	60f8      	str	r0, [r7, #12]
 800f184:	607a      	str	r2, [r7, #4]
 800f186:	603b      	str	r3, [r7, #0]
 800f188:	460b      	mov	r3, r1
 800f18a:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800f18c:	2300      	movs	r3, #0
 800f18e:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800f190:	2300      	movs	r3, #0
 800f192:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800f194:	687b      	ldr	r3, [r7, #4]
 800f196:	781b      	ldrb	r3, [r3, #0]
 800f198:	2b03      	cmp	r3, #3
 800f19a:	d108      	bne.n	800f1ae <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800f19c:	f7ff fc2e 	bl	800e9fc <_ZNSt14numeric_limitsIhE3minEv>
 800f1a0:	4603      	mov	r3, r0
 800f1a2:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800f1a4:	f7ff fc32 	bl	800ea0c <_ZNSt14numeric_limitsIhE3maxEv>
 800f1a8:	4603      	mov	r3, r0
 800f1aa:	613b      	str	r3, [r7, #16]
 800f1ac:	e024      	b.n	800f1f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	781b      	ldrb	r3, [r3, #0]
 800f1b2:	2b09      	cmp	r3, #9
 800f1b4:	d108      	bne.n	800f1c8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800f1b6:	f7ff fc10 	bl	800e9da <_ZNSt14numeric_limitsIaE3minEv>
 800f1ba:	4603      	mov	r3, r0
 800f1bc:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800f1be:	f7ff fc15 	bl	800e9ec <_ZNSt14numeric_limitsIaE3maxEv>
 800f1c2:	4603      	mov	r3, r0
 800f1c4:	613b      	str	r3, [r7, #16]
 800f1c6:	e017      	b.n	800f1f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 800f1c8:	687b      	ldr	r3, [r7, #4]
 800f1ca:	781b      	ldrb	r3, [r3, #0]
 800f1cc:	2b07      	cmp	r3, #7
 800f1ce:	d108      	bne.n	800f1e2 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800f1d0:	f7ff fc24 	bl	800ea1c <_ZNSt14numeric_limitsIsE3minEv>
 800f1d4:	4603      	mov	r3, r0
 800f1d6:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800f1d8:	f7ff fc2a 	bl	800ea30 <_ZNSt14numeric_limitsIsE3maxEv>
 800f1dc:	4603      	mov	r3, r0
 800f1de:	613b      	str	r3, [r7, #16]
 800f1e0:	e00a      	b.n	800f1f8 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 800f1e2:	68fb      	ldr	r3, [r7, #12]
 800f1e4:	695c      	ldr	r4, [r3, #20]
 800f1e6:	4b0c      	ldr	r3, [pc, #48]	; (800f218 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	23da      	movs	r3, #218	; 0xda
 800f1ec:	4a0b      	ldr	r2, [pc, #44]	; (800f21c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 800f1ee:	490c      	ldr	r1, [pc, #48]	; (800f220 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800f1f0:	68f8      	ldr	r0, [r7, #12]
 800f1f2:	47a0      	blx	r4
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	e00a      	b.n	800f20e <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 800f1f8:	7af8      	ldrb	r0, [r7, #11]
 800f1fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1fc:	9301      	str	r3, [sp, #4]
 800f1fe:	683b      	ldr	r3, [r7, #0]
 800f200:	9300      	str	r3, [sp, #0]
 800f202:	687b      	ldr	r3, [r7, #4]
 800f204:	693a      	ldr	r2, [r7, #16]
 800f206:	6979      	ldr	r1, [r7, #20]
 800f208:	f7ff ff24 	bl	800f054 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 800f20c:	2300      	movs	r3, #0
}
 800f20e:	4618      	mov	r0, r3
 800f210:	371c      	adds	r7, #28
 800f212:	46bd      	mov	sp, r7
 800f214:	bd90      	pop	{r4, r7, pc}
 800f216:	bf00      	nop
 800f218:	0801e388 	.word	0x0801e388
 800f21c:	0801e170 	.word	0x0801e170
 800f220:	0801e234 	.word	0x0801e234

0800f224 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
 800f224:	b580      	push	{r7, lr}
 800f226:	b082      	sub	sp, #8
 800f228:	af00      	add	r7, sp, #0
 800f22a:	6078      	str	r0, [r7, #4]
 800f22c:	6039      	str	r1, [r7, #0]
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	689a      	ldr	r2, [r3, #8]
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	4619      	mov	r1, r3
 800f238:	4610      	mov	r0, r2
 800f23a:	f7ff f909 	bl	800e450 <TfLiteIntArrayEqual>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b00      	cmp	r3, #0
 800f242:	bf14      	ite	ne
 800f244:	2301      	movne	r3, #1
 800f246:	2300      	moveq	r3, #0
 800f248:	b2db      	uxtb	r3, r3
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3708      	adds	r7, #8
 800f24e:	46bd      	mov	sp, r7
 800f250:	bd80      	pop	{r7, pc}

0800f252 <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f252:	b480      	push	{r7}
 800f254:	b083      	sub	sp, #12
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
 800f25a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f25c:	687b      	ldr	r3, [r7, #4]
 800f25e:	681a      	ldr	r2, [r3, #0]
 800f260:	683b      	ldr	r3, [r7, #0]
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	429a      	cmp	r2, r3
 800f266:	da01      	bge.n	800f26c <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800f268:	683b      	ldr	r3, [r7, #0]
 800f26a:	e000      	b.n	800f26e <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800f26c:	687b      	ldr	r3, [r7, #4]
    }
 800f26e:	4618      	mov	r0, r3
 800f270:	370c      	adds	r7, #12
 800f272:	46bd      	mov	sp, r7
 800f274:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f278:	4770      	bx	lr

0800f27a <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f27a:	b480      	push	{r7}
 800f27c:	b083      	sub	sp, #12
 800f27e:	af00      	add	r7, sp, #0
 800f280:	6078      	str	r0, [r7, #4]
 800f282:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f284:	687b      	ldr	r3, [r7, #4]
 800f286:	681a      	ldr	r2, [r3, #0]
 800f288:	683b      	ldr	r3, [r7, #0]
 800f28a:	681b      	ldr	r3, [r3, #0]
 800f28c:	429a      	cmp	r2, r3
 800f28e:	da01      	bge.n	800f294 <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800f290:	683b      	ldr	r3, [r7, #0]
 800f292:	e000      	b.n	800f296 <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800f294:	687b      	ldr	r3, [r7, #4]
    }
 800f296:	4618      	mov	r0, r3
 800f298:	370c      	adds	r7, #12
 800f29a:	46bd      	mov	sp, r7
 800f29c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2a0:	4770      	bx	lr

0800f2a2 <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f2a2:	b480      	push	{r7}
 800f2a4:	b083      	sub	sp, #12
 800f2a6:	af00      	add	r7, sp, #0
 800f2a8:	6078      	str	r0, [r7, #4]
 800f2aa:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	681a      	ldr	r2, [r3, #0]
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	681b      	ldr	r3, [r3, #0]
 800f2b4:	429a      	cmp	r2, r3
 800f2b6:	da01      	bge.n	800f2bc <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800f2b8:	683b      	ldr	r3, [r7, #0]
 800f2ba:	e000      	b.n	800f2be <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800f2bc:	687b      	ldr	r3, [r7, #4]
    }
 800f2be:	4618      	mov	r0, r3
 800f2c0:	370c      	adds	r7, #12
 800f2c2:	46bd      	mov	sp, r7
 800f2c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2c8:	4770      	bx	lr

0800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                                    const TfLiteNode* node, int index) {
 800f2ca:	b480      	push	{r7}
 800f2cc:	b085      	sub	sp, #20
 800f2ce:	af00      	add	r7, sp, #0
 800f2d0:	60f8      	str	r0, [r7, #12]
 800f2d2:	60b9      	str	r1, [r7, #8]
 800f2d4:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 800f2d6:	68fb      	ldr	r3, [r7, #12]
 800f2d8:	689a      	ldr	r2, [r3, #8]
 800f2da:	68bb      	ldr	r3, [r7, #8]
 800f2dc:	6819      	ldr	r1, [r3, #0]
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	009b      	lsls	r3, r3, #2
 800f2e2:	440b      	add	r3, r1
 800f2e4:	685b      	ldr	r3, [r3, #4]
 800f2e6:	019b      	lsls	r3, r3, #6
 800f2e8:	4413      	add	r3, r2
}
 800f2ea:	4618      	mov	r0, r3
 800f2ec:	3714      	adds	r7, #20
 800f2ee:	46bd      	mov	sp, r7
 800f2f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2f4:	4770      	bx	lr

0800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                               int index) {
 800f2f6:	b480      	push	{r7}
 800f2f8:	b085      	sub	sp, #20
 800f2fa:	af00      	add	r7, sp, #0
 800f2fc:	60f8      	str	r0, [r7, #12]
 800f2fe:	60b9      	str	r1, [r7, #8]
 800f300:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 800f302:	68fb      	ldr	r3, [r7, #12]
 800f304:	689a      	ldr	r2, [r3, #8]
 800f306:	68bb      	ldr	r3, [r7, #8]
 800f308:	6859      	ldr	r1, [r3, #4]
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	009b      	lsls	r3, r3, #2
 800f30e:	440b      	add	r3, r1
 800f310:	685b      	ldr	r3, [r3, #4]
 800f312:	019b      	lsls	r3, r3, #6
 800f314:	4413      	add	r3, r2
}
 800f316:	4618      	mov	r0, r3
 800f318:	3714      	adds	r7, #20
 800f31a:	46bd      	mov	sp, r7
 800f31c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f320:	4770      	bx	lr

0800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800f322:	b480      	push	{r7}
 800f324:	b083      	sub	sp, #12
 800f326:	af00      	add	r7, sp, #0
 800f328:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f32a:	687b      	ldr	r3, [r7, #4]
 800f32c:	2b00      	cmp	r3, #0
 800f32e:	d002      	beq.n	800f336 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 800f330:	687b      	ldr	r3, [r7, #4]
 800f332:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800f334:	e000      	b.n	800f338 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f336:	2300      	movs	r3, #0
}
 800f338:	4618      	mov	r0, r3
 800f33a:	370c      	adds	r7, #12
 800f33c:	46bd      	mov	sp, r7
 800f33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f342:	4770      	bx	lr

0800f344 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800f344:	b480      	push	{r7}
 800f346:	b083      	sub	sp, #12
 800f348:	af00      	add	r7, sp, #0
 800f34a:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800f34c:	687b      	ldr	r3, [r7, #4]
 800f34e:	2b00      	cmp	r3, #0
 800f350:	d002      	beq.n	800f358 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	685b      	ldr	r3, [r3, #4]
 800f356:	e000      	b.n	800f35a <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 800f358:	2300      	movs	r3, #0
}
 800f35a:	4618      	mov	r0, r3
 800f35c:	370c      	adds	r7, #12
 800f35e:	46bd      	mov	sp, r7
 800f360:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f364:	4770      	bx	lr

0800f366 <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800f366:	b480      	push	{r7}
 800f368:	b083      	sub	sp, #12
 800f36a:	af00      	add	r7, sp, #0
 800f36c:	6078      	str	r0, [r7, #4]
 800f36e:	687b      	ldr	r3, [r7, #4]
 800f370:	2200      	movs	r2, #0
 800f372:	601a      	str	r2, [r3, #0]
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	4618      	mov	r0, r3
 800f378:	370c      	adds	r7, #12
 800f37a:	46bd      	mov	sp, r7
 800f37c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f380:	4770      	bx	lr

0800f382 <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 800f382:	b580      	push	{r7, lr}
 800f384:	b084      	sub	sp, #16
 800f386:	af00      	add	r7, sp, #0
 800f388:	60f8      	str	r0, [r7, #12]
 800f38a:	60b9      	str	r1, [r7, #8]
 800f38c:	607a      	str	r2, [r7, #4]
 800f38e:	68fb      	ldr	r3, [r7, #12]
 800f390:	2200      	movs	r2, #0
 800f392:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800f394:	687a      	ldr	r2, [r7, #4]
 800f396:	68b9      	ldr	r1, [r7, #8]
 800f398:	68f8      	ldr	r0, [r7, #12]
 800f39a:	f000 f89e 	bl	800f4da <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800f39e:	68fb      	ldr	r3, [r7, #12]
 800f3a0:	4618      	mov	r0, r3
 800f3a2:	3710      	adds	r7, #16
 800f3a4:	46bd      	mov	sp, r7
 800f3a6:	bd80      	pop	{r7, pc}

0800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 800f3a8:	b580      	push	{r7, lr}
 800f3aa:	b082      	sub	sp, #8
 800f3ac:	af00      	add	r7, sp, #0
 800f3ae:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800f3b0:	687b      	ldr	r3, [r7, #4]
 800f3b2:	681b      	ldr	r3, [r3, #0]
 800f3b4:	2b05      	cmp	r3, #5
 800f3b6:	dd08      	ble.n	800f3ca <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800f3b8:	687b      	ldr	r3, [r7, #4]
 800f3ba:	685b      	ldr	r3, [r3, #4]
 800f3bc:	2b00      	cmp	r3, #0
 800f3be:	d004      	beq.n	800f3ca <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800f3c0:	687b      	ldr	r3, [r7, #4]
 800f3c2:	685b      	ldr	r3, [r3, #4]
 800f3c4:	4618      	mov	r0, r3
 800f3c6:	f008 fd37 	bl	8017e38 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	4618      	mov	r0, r3
 800f3ce:	3708      	adds	r7, #8
 800f3d0:	46bd      	mov	sp, r7
 800f3d2:	bd80      	pop	{r7, pc}

0800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 800f3d4:	b480      	push	{r7}
 800f3d6:	b083      	sub	sp, #12
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	681b      	ldr	r3, [r3, #0]
 800f3e0:	4618      	mov	r0, r3
 800f3e2:	370c      	adds	r7, #12
 800f3e4:	46bd      	mov	sp, r7
 800f3e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3ea:	4770      	bx	lr

0800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 800f3ec:	b580      	push	{r7, lr}
 800f3ee:	b082      	sub	sp, #8
 800f3f0:	af00      	add	r7, sp, #0
 800f3f2:	6078      	str	r0, [r7, #4]
 800f3f4:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800f3f6:	683b      	ldr	r3, [r7, #0]
 800f3f8:	2b00      	cmp	r3, #0
 800f3fa:	da01      	bge.n	800f400 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800f3fc:	f00b fde4 	bl	801afc8 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800f400:	687b      	ldr	r3, [r7, #4]
 800f402:	681b      	ldr	r3, [r3, #0]
 800f404:	683a      	ldr	r2, [r7, #0]
 800f406:	429a      	cmp	r2, r3
 800f408:	db01      	blt.n	800f40e <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800f40a:	f00b fddd 	bl	801afc8 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800f40e:	687b      	ldr	r3, [r7, #4]
 800f410:	681b      	ldr	r3, [r3, #0]
 800f412:	2b05      	cmp	r3, #5
 800f414:	dd06      	ble.n	800f424 <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800f416:	687b      	ldr	r3, [r7, #4]
 800f418:	685a      	ldr	r2, [r3, #4]
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	009b      	lsls	r3, r3, #2
 800f41e:	4413      	add	r3, r2
 800f420:	681b      	ldr	r3, [r3, #0]
 800f422:	e004      	b.n	800f42e <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800f424:	687a      	ldr	r2, [r7, #4]
 800f426:	683b      	ldr	r3, [r7, #0]
 800f428:	009b      	lsls	r3, r3, #2
 800f42a:	4413      	add	r3, r2
 800f42c:	685b      	ldr	r3, [r3, #4]
  }
 800f42e:	4618      	mov	r0, r3
 800f430:	3708      	adds	r7, #8
 800f432:	46bd      	mov	sp, r7
 800f434:	bd80      	pop	{r7, pc}

0800f436 <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 800f436:	b480      	push	{r7}
 800f438:	b083      	sub	sp, #12
 800f43a:	af00      	add	r7, sp, #0
 800f43c:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	681b      	ldr	r3, [r3, #0]
 800f442:	2b05      	cmp	r3, #5
 800f444:	dd02      	ble.n	800f44c <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	685b      	ldr	r3, [r3, #4]
 800f44a:	e001      	b.n	800f450 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	3304      	adds	r3, #4
  }
 800f450:	4618      	mov	r0, r3
 800f452:	370c      	adds	r7, #12
 800f454:	46bd      	mov	sp, r7
 800f456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f45a:	4770      	bx	lr

0800f45c <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 800f45c:	b480      	push	{r7}
 800f45e:	b083      	sub	sp, #12
 800f460:	af00      	add	r7, sp, #0
 800f462:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800f464:	687b      	ldr	r3, [r7, #4]
 800f466:	681b      	ldr	r3, [r3, #0]
 800f468:	2b05      	cmp	r3, #5
 800f46a:	dd02      	ble.n	800f472 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800f46c:	687b      	ldr	r3, [r7, #4]
 800f46e:	685b      	ldr	r3, [r3, #4]
 800f470:	e001      	b.n	800f476 <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800f472:	687b      	ldr	r3, [r7, #4]
 800f474:	3304      	adds	r3, #4
  }
 800f476:	4618      	mov	r0, r3
 800f478:	370c      	adds	r7, #12
 800f47a:	46bd      	mov	sp, r7
 800f47c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f480:	4770      	bx	lr

0800f482 <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800f482:	b580      	push	{r7, lr}
 800f484:	b082      	sub	sp, #8
 800f486:	af00      	add	r7, sp, #0
 800f488:	6078      	str	r0, [r7, #4]
 800f48a:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800f48c:	687b      	ldr	r3, [r7, #4]
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	2b05      	cmp	r3, #5
 800f492:	dd08      	ble.n	800f4a6 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	685b      	ldr	r3, [r3, #4]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d004      	beq.n	800f4a6 <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	685b      	ldr	r3, [r3, #4]
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f008 fcc9 	bl	8017e38 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	683a      	ldr	r2, [r7, #0]
 800f4aa:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800f4ac:	683b      	ldr	r3, [r7, #0]
 800f4ae:	2b05      	cmp	r3, #5
 800f4b0:	dd0f      	ble.n	800f4d2 <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800f4b8:	4293      	cmp	r3, r2
 800f4ba:	d201      	bcs.n	800f4c0 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800f4bc:	009b      	lsls	r3, r3, #2
 800f4be:	e001      	b.n	800f4c4 <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800f4c0:	f04f 33ff 	mov.w	r3, #4294967295
 800f4c4:	4618      	mov	r0, r3
 800f4c6:	f008 fcd9 	bl	8017e7c <_Znaj>
 800f4ca:	4603      	mov	r3, r0
 800f4cc:	461a      	mov	r2, r3
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800f4d2:	bf00      	nop
 800f4d4:	3708      	adds	r7, #8
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	bd80      	pop	{r7, pc}

0800f4da <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 800f4da:	b580      	push	{r7, lr}
 800f4dc:	b086      	sub	sp, #24
 800f4de:	af00      	add	r7, sp, #0
 800f4e0:	60f8      	str	r0, [r7, #12]
 800f4e2:	60b9      	str	r1, [r7, #8]
 800f4e4:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800f4e6:	68b9      	ldr	r1, [r7, #8]
 800f4e8:	68f8      	ldr	r0, [r7, #12]
 800f4ea:	f7ff ffca 	bl	800f482 <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 800f4ee:	68f8      	ldr	r0, [r7, #12]
 800f4f0:	f7ff ffa1 	bl	800f436 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800f4f4:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 800f4f6:	68bb      	ldr	r3, [r7, #8]
 800f4f8:	009b      	lsls	r3, r3, #2
 800f4fa:	461a      	mov	r2, r3
 800f4fc:	6879      	ldr	r1, [r7, #4]
 800f4fe:	6978      	ldr	r0, [r7, #20]
 800f500:	f00b fe76 	bl	801b1f0 <memcpy>
  }
 800f504:	bf00      	nop
 800f506:	3718      	adds	r7, #24
 800f508:	46bd      	mov	sp, r7
 800f50a:	bd80      	pop	{r7, pc}

0800f50c <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800f50c:	b580      	push	{r7, lr}
 800f50e:	b086      	sub	sp, #24
 800f510:	af00      	add	r7, sp, #0
 800f512:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800f514:	2301      	movs	r3, #1
 800f516:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800f518:	6878      	ldr	r0, [r7, #4]
 800f51a:	f7ff ff9f 	bl	800f45c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f51e:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800f520:	2300      	movs	r3, #0
 800f522:	613b      	str	r3, [r7, #16]
 800f524:	687b      	ldr	r3, [r7, #4]
 800f526:	681b      	ldr	r3, [r3, #0]
 800f528:	693a      	ldr	r2, [r7, #16]
 800f52a:	429a      	cmp	r2, r3
 800f52c:	da0c      	bge.n	800f548 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800f52e:	693b      	ldr	r3, [r7, #16]
 800f530:	009b      	lsls	r3, r3, #2
 800f532:	68fa      	ldr	r2, [r7, #12]
 800f534:	4413      	add	r3, r2
 800f536:	681a      	ldr	r2, [r3, #0]
 800f538:	697b      	ldr	r3, [r7, #20]
 800f53a:	fb02 f303 	mul.w	r3, r2, r3
 800f53e:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800f540:	693b      	ldr	r3, [r7, #16]
 800f542:	3301      	adds	r3, #1
 800f544:	613b      	str	r3, [r7, #16]
 800f546:	e7ed      	b.n	800f524 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800f548:	697b      	ldr	r3, [r7, #20]
  }
 800f54a:	4618      	mov	r0, r3
 800f54c:	3718      	adds	r7, #24
 800f54e:	46bd      	mov	sp, r7
 800f550:	bd80      	pop	{r7, pc}

0800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800f552:	b580      	push	{r7, lr}
 800f554:	b086      	sub	sp, #24
 800f556:	af00      	add	r7, sp, #0
 800f558:	6078      	str	r0, [r7, #4]
 800f55a:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800f55c:	683b      	ldr	r3, [r7, #0]
 800f55e:	2b00      	cmp	r3, #0
 800f560:	d103      	bne.n	800f56a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800f562:	6878      	ldr	r0, [r7, #4]
 800f564:	f7ff feff 	bl	800f366 <_ZN6tflite12RuntimeShapeC1Ev>
 800f568:	e00d      	b.n	800f586 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800f56a:	683b      	ldr	r3, [r7, #0]
 800f56c:	689b      	ldr	r3, [r3, #8]
 800f56e:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800f570:	697b      	ldr	r3, [r7, #20]
 800f572:	681b      	ldr	r3, [r3, #0]
 800f574:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800f576:	697b      	ldr	r3, [r7, #20]
 800f578:	3304      	adds	r3, #4
 800f57a:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800f57c:	68fa      	ldr	r2, [r7, #12]
 800f57e:	6939      	ldr	r1, [r7, #16]
 800f580:	6878      	ldr	r0, [r7, #4]
 800f582:	f7ff fefe 	bl	800f382 <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800f586:	6878      	ldr	r0, [r7, #4]
 800f588:	3718      	adds	r7, #24
 800f58a:	46bd      	mov	sp, r7
 800f58c:	bd80      	pop	{r7, pc}

0800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800f58e:	b480      	push	{r7}
 800f590:	b083      	sub	sp, #12
 800f592:	af00      	add	r7, sp, #0
 800f594:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	d002      	beq.n	800f5a2 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 800f59c:	687b      	ldr	r3, [r7, #4]
 800f59e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800f5a0:	e000      	b.n	800f5a4 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f5a2:	2300      	movs	r3, #0
}
 800f5a4:	4618      	mov	r0, r3
 800f5a6:	370c      	adds	r7, #12
 800f5a8:	46bd      	mov	sp, r7
 800f5aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ae:	4770      	bx	lr

0800f5b0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800f5b0:	b480      	push	{r7}
 800f5b2:	b083      	sub	sp, #12
 800f5b4:	af00      	add	r7, sp, #0
 800f5b6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800f5b8:	687b      	ldr	r3, [r7, #4]
 800f5ba:	2b00      	cmp	r3, #0
 800f5bc:	d002      	beq.n	800f5c4 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 800f5be:	687b      	ldr	r3, [r7, #4]
 800f5c0:	685b      	ldr	r3, [r3, #4]
 800f5c2:	e000      	b.n	800f5c6 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 800f5c4:	2300      	movs	r3, #0
}
 800f5c6:	4618      	mov	r0, r3
 800f5c8:	370c      	adds	r7, #12
 800f5ca:	46bd      	mov	sp, r7
 800f5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5d0:	4770      	bx	lr

0800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800f5d2:	b480      	push	{r7}
 800f5d4:	b083      	sub	sp, #12
 800f5d6:	af00      	add	r7, sp, #0
 800f5d8:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f5da:	687b      	ldr	r3, [r7, #4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d002      	beq.n	800f5e6 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 800f5e0:	687b      	ldr	r3, [r7, #4]
 800f5e2:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800f5e4:	e000      	b.n	800f5e8 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f5e6:	2300      	movs	r3, #0
}
 800f5e8:	4618      	mov	r0, r3
 800f5ea:	370c      	adds	r7, #12
 800f5ec:	46bd      	mov	sp, r7
 800f5ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5f2:	4770      	bx	lr

0800f5f4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800f5f4:	b480      	push	{r7}
 800f5f6:	b083      	sub	sp, #12
 800f5f8:	af00      	add	r7, sp, #0
 800f5fa:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800f5fc:	687b      	ldr	r3, [r7, #4]
 800f5fe:	2b00      	cmp	r3, #0
 800f600:	d002      	beq.n	800f608 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 800f602:	687b      	ldr	r3, [r7, #4]
 800f604:	685b      	ldr	r3, [r3, #4]
 800f606:	e000      	b.n	800f60a <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 800f608:	2300      	movs	r3, #0
}
 800f60a:	4618      	mov	r0, r3
 800f60c:	370c      	adds	r7, #12
 800f60e:	46bd      	mov	sp, r7
 800f610:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f614:	4770      	bx	lr

0800f616 <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800f616:	b480      	push	{r7}
 800f618:	af00      	add	r7, sp, #0
 800f61a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f61e:	4618      	mov	r0, r3
 800f620:	46bd      	mov	sp, r7
 800f622:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f626:	4770      	bx	lr

0800f628 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800f628:	b480      	push	{r7}
 800f62a:	af00      	add	r7, sp, #0
 800f62c:	4b04      	ldr	r3, [pc, #16]	; (800f640 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800f62e:	ee07 3a90 	vmov	s15, r3
 800f632:	eeb0 0a67 	vmov.f32	s0, s15
 800f636:	46bd      	mov	sp, r7
 800f638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f63c:	4770      	bx	lr
 800f63e:	bf00      	nop
 800f640:	7f7fffff 	.word	0x7f7fffff

0800f644 <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800f644:	b480      	push	{r7}
 800f646:	af00      	add	r7, sp, #0
 800f648:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800f64c:	ee07 3a90 	vmov	s15, r3
 800f650:	eeb0 0a67 	vmov.f32	s0, s15
 800f654:	46bd      	mov	sp, r7
 800f656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f65a:	4770      	bx	lr

0800f65c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800f65c:	b5b0      	push	{r4, r5, r7, lr}
 800f65e:	b08c      	sub	sp, #48	; 0x30
 800f660:	af00      	add	r7, sp, #0
 800f662:	6078      	str	r0, [r7, #4]
 800f664:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800f666:	687a      	ldr	r2, [r7, #4]
 800f668:	683b      	ldr	r3, [r7, #0]
 800f66a:	429a      	cmp	r2, r3
 800f66c:	d107      	bne.n	800f67e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800f66e:	f7ff ffd2 	bl	800f616 <_ZNSt14numeric_limitsIlE3minEv>
 800f672:	4602      	mov	r2, r0
 800f674:	687b      	ldr	r3, [r7, #4]
 800f676:	4293      	cmp	r3, r2
 800f678:	d101      	bne.n	800f67e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800f67a:	2301      	movs	r3, #1
 800f67c:	e000      	b.n	800f680 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800f67e:	2300      	movs	r3, #0
 800f680:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	461a      	mov	r2, r3
 800f688:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f68c:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800f690:	683b      	ldr	r3, [r7, #0]
 800f692:	461a      	mov	r2, r3
 800f694:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f698:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800f69c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f69e:	69ba      	ldr	r2, [r7, #24]
 800f6a0:	fb02 f203 	mul.w	r2, r2, r3
 800f6a4:	69fb      	ldr	r3, [r7, #28]
 800f6a6:	6a39      	ldr	r1, [r7, #32]
 800f6a8:	fb01 f303 	mul.w	r3, r1, r3
 800f6ac:	18d1      	adds	r1, r2, r3
 800f6ae:	6a3a      	ldr	r2, [r7, #32]
 800f6b0:	69bb      	ldr	r3, [r7, #24]
 800f6b2:	fba2 2303 	umull	r2, r3, r2, r3
 800f6b6:	4419      	add	r1, r3
 800f6b8:	460b      	mov	r3, r1
 800f6ba:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f6be:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800f6c2:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f6c6:	2a00      	cmp	r2, #0
 800f6c8:	f173 0300 	sbcs.w	r3, r3, #0
 800f6cc:	db02      	blt.n	800f6d4 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800f6ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f6d2:	e000      	b.n	800f6d6 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800f6d4:	4b18      	ldr	r3, [pc, #96]	; (800f738 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800f6d6:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800f6d8:	68fb      	ldr	r3, [r7, #12]
 800f6da:	4618      	mov	r0, r3
 800f6dc:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f6e0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f6e4:	1884      	adds	r4, r0, r2
 800f6e6:	eb41 0503 	adc.w	r5, r1, r3
 800f6ea:	4622      	mov	r2, r4
 800f6ec:	462b      	mov	r3, r5
 800f6ee:	2a00      	cmp	r2, #0
 800f6f0:	f173 0100 	sbcs.w	r1, r3, #0
 800f6f4:	da06      	bge.n	800f704 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800f6f6:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f6fa:	f04f 0100 	mov.w	r1, #0
 800f6fe:	1812      	adds	r2, r2, r0
 800f700:	eb41 0303 	adc.w	r3, r1, r3
 800f704:	f04f 0000 	mov.w	r0, #0
 800f708:	f04f 0100 	mov.w	r1, #0
 800f70c:	0fd0      	lsrs	r0, r2, #31
 800f70e:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f712:	17d9      	asrs	r1, r3, #31
 800f714:	4602      	mov	r2, r0
 800f716:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800f718:	4613      	mov	r3, r2
 800f71a:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800f71c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f720:	2b00      	cmp	r3, #0
 800f722:	d003      	beq.n	800f72c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800f724:	f7fe ff4a 	bl	800e5bc <_ZNSt14numeric_limitsIlE3maxEv>
 800f728:	4603      	mov	r3, r0
 800f72a:	e000      	b.n	800f72e <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800f72c:	68bb      	ldr	r3, [r7, #8]
}
 800f72e:	4618      	mov	r0, r3
 800f730:	3730      	adds	r7, #48	; 0x30
 800f732:	46bd      	mov	sp, r7
 800f734:	bdb0      	pop	{r4, r5, r7, pc}
 800f736:	bf00      	nop
 800f738:	c0000001 	.word	0xc0000001

0800f73c <_ZN6tflite12RuntimeShapeC1Eil>:
  RuntimeShape(int shape_size, int32 value) : size_(0) {
 800f73c:	b580      	push	{r7, lr}
 800f73e:	b086      	sub	sp, #24
 800f740:	af00      	add	r7, sp, #0
 800f742:	60f8      	str	r0, [r7, #12]
 800f744:	60b9      	str	r1, [r7, #8]
 800f746:	607a      	str	r2, [r7, #4]
 800f748:	68fb      	ldr	r3, [r7, #12]
 800f74a:	2200      	movs	r2, #0
 800f74c:	601a      	str	r2, [r3, #0]
    Resize(shape_size);
 800f74e:	68b9      	ldr	r1, [r7, #8]
 800f750:	68f8      	ldr	r0, [r7, #12]
 800f752:	f7ff fe96 	bl	800f482 <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
 800f756:	2300      	movs	r3, #0
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	697a      	ldr	r2, [r7, #20]
 800f75c:	68bb      	ldr	r3, [r7, #8]
 800f75e:	429a      	cmp	r2, r3
 800f760:	da08      	bge.n	800f774 <_ZN6tflite12RuntimeShapeC1Eil+0x38>
      SetDim(i, value);
 800f762:	687a      	ldr	r2, [r7, #4]
 800f764:	6979      	ldr	r1, [r7, #20]
 800f766:	68f8      	ldr	r0, [r7, #12]
 800f768:	f000 f82d 	bl	800f7c6 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < shape_size; ++i) {
 800f76c:	697b      	ldr	r3, [r7, #20]
 800f76e:	3301      	adds	r3, #1
 800f770:	617b      	str	r3, [r7, #20]
 800f772:	e7f2      	b.n	800f75a <_ZN6tflite12RuntimeShapeC1Eil+0x1e>
  }
 800f774:	68fb      	ldr	r3, [r7, #12]
 800f776:	4618      	mov	r0, r3
 800f778:	3718      	adds	r7, #24
 800f77a:	46bd      	mov	sp, r7
 800f77c:	bd80      	pop	{r7, pc}

0800f77e <_ZNK6tflite12RuntimeShapeeqERKS0_>:
  bool operator==(const RuntimeShape& comp) const {
 800f77e:	b590      	push	{r4, r7, lr}
 800f780:	b083      	sub	sp, #12
 800f782:	af00      	add	r7, sp, #0
 800f784:	6078      	str	r0, [r7, #4]
 800f786:	6039      	str	r1, [r7, #0]
    return this->size_ == comp.size_ &&
 800f788:	687b      	ldr	r3, [r7, #4]
 800f78a:	681a      	ldr	r2, [r3, #0]
 800f78c:	683b      	ldr	r3, [r7, #0]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	429a      	cmp	r2, r3
 800f792:	d113      	bne.n	800f7bc <_ZNK6tflite12RuntimeShapeeqERKS0_+0x3e>
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
 800f794:	6878      	ldr	r0, [r7, #4]
 800f796:	f7ff fe61 	bl	800f45c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f79a:	4604      	mov	r4, r0
 800f79c:	6838      	ldr	r0, [r7, #0]
 800f79e:	f7ff fe5d 	bl	800f45c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f7a2:	4601      	mov	r1, r0
 800f7a4:	687b      	ldr	r3, [r7, #4]
 800f7a6:	681b      	ldr	r3, [r3, #0]
 800f7a8:	009b      	lsls	r3, r3, #2
 800f7aa:	461a      	mov	r2, r3
 800f7ac:	4620      	mov	r0, r4
 800f7ae:	f00b fd11 	bl	801b1d4 <memcmp>
 800f7b2:	4603      	mov	r3, r0
    return this->size_ == comp.size_ &&
 800f7b4:	2b00      	cmp	r3, #0
 800f7b6:	d101      	bne.n	800f7bc <_ZNK6tflite12RuntimeShapeeqERKS0_+0x3e>
 800f7b8:	2301      	movs	r3, #1
 800f7ba:	e000      	b.n	800f7be <_ZNK6tflite12RuntimeShapeeqERKS0_+0x40>
 800f7bc:	2300      	movs	r3, #0
  }
 800f7be:	4618      	mov	r0, r3
 800f7c0:	370c      	adds	r7, #12
 800f7c2:	46bd      	mov	sp, r7
 800f7c4:	bd90      	pop	{r4, r7, pc}

0800f7c6 <_ZN6tflite12RuntimeShape6SetDimEil>:
  inline void SetDim(int i, int32 val) {
 800f7c6:	b580      	push	{r7, lr}
 800f7c8:	b084      	sub	sp, #16
 800f7ca:	af00      	add	r7, sp, #0
 800f7cc:	60f8      	str	r0, [r7, #12]
 800f7ce:	60b9      	str	r1, [r7, #8]
 800f7d0:	607a      	str	r2, [r7, #4]
    TFLITE_DCHECK_GE(i, 0);
 800f7d2:	68bb      	ldr	r3, [r7, #8]
 800f7d4:	2b00      	cmp	r3, #0
 800f7d6:	da01      	bge.n	800f7dc <_ZN6tflite12RuntimeShape6SetDimEil+0x16>
 800f7d8:	f00b fbf6 	bl	801afc8 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	681b      	ldr	r3, [r3, #0]
 800f7e0:	68ba      	ldr	r2, [r7, #8]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	db01      	blt.n	800f7ea <_ZN6tflite12RuntimeShape6SetDimEil+0x24>
 800f7e6:	f00b fbef 	bl	801afc8 <abort>
    if (size_ > kMaxSmallSize) {
 800f7ea:	68fb      	ldr	r3, [r7, #12]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	2b05      	cmp	r3, #5
 800f7f0:	dd07      	ble.n	800f802 <_ZN6tflite12RuntimeShape6SetDimEil+0x3c>
      dims_pointer_[i] = val;
 800f7f2:	68fb      	ldr	r3, [r7, #12]
 800f7f4:	685a      	ldr	r2, [r3, #4]
 800f7f6:	68bb      	ldr	r3, [r7, #8]
 800f7f8:	009b      	lsls	r3, r3, #2
 800f7fa:	4413      	add	r3, r2
 800f7fc:	687a      	ldr	r2, [r7, #4]
 800f7fe:	601a      	str	r2, [r3, #0]
  }
 800f800:	e005      	b.n	800f80e <_ZN6tflite12RuntimeShape6SetDimEil+0x48>
      dims_[i] = val;
 800f802:	68fa      	ldr	r2, [r7, #12]
 800f804:	68bb      	ldr	r3, [r7, #8]
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4413      	add	r3, r2
 800f80a:	687a      	ldr	r2, [r7, #4]
 800f80c:	605a      	str	r2, [r3, #4]
  }
 800f80e:	bf00      	nop
 800f810:	3710      	adds	r7, #16
 800f812:	46bd      	mov	sp, r7
 800f814:	bd80      	pop	{r7, pc}

0800f816 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32* DimsDataUpTo5D() const { return dims_; }
 800f816:	b480      	push	{r7}
 800f818:	b083      	sub	sp, #12
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	6078      	str	r0, [r7, #4]
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	3304      	adds	r3, #4
 800f822:	4618      	mov	r0, r3
 800f824:	370c      	adds	r7, #12
 800f826:	46bd      	mov	sp, r7
 800f828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f82c:	4770      	bx	lr

0800f82e <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>:
  inline static RuntimeShape ExtendedShape(int new_shape_size,
 800f82e:	b580      	push	{r7, lr}
 800f830:	b084      	sub	sp, #16
 800f832:	af00      	add	r7, sp, #0
 800f834:	60f8      	str	r0, [r7, #12]
 800f836:	60b9      	str	r1, [r7, #8]
 800f838:	607a      	str	r2, [r7, #4]
    return RuntimeShape(new_shape_size, shape, 1);
 800f83a:	2301      	movs	r3, #1
 800f83c:	687a      	ldr	r2, [r7, #4]
 800f83e:	68b9      	ldr	r1, [r7, #8]
 800f840:	68f8      	ldr	r0, [r7, #12]
 800f842:	f000 f804 	bl	800f84e <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  }
 800f846:	68f8      	ldr	r0, [r7, #12]
 800f848:	3710      	adds	r7, #16
 800f84a:	46bd      	mov	sp, r7
 800f84c:	bd80      	pop	{r7, pc}

0800f84e <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:

 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
 800f84e:	b5b0      	push	{r4, r5, r7, lr}
 800f850:	b086      	sub	sp, #24
 800f852:	af00      	add	r7, sp, #0
 800f854:	60f8      	str	r0, [r7, #12]
 800f856:	60b9      	str	r1, [r7, #8]
 800f858:	607a      	str	r2, [r7, #4]
 800f85a:	603b      	str	r3, [r7, #0]
      : size_(0) {
 800f85c:	68fb      	ldr	r3, [r7, #12]
 800f85e:	2200      	movs	r2, #0
 800f860:	601a      	str	r2, [r3, #0]
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
 800f862:	6878      	ldr	r0, [r7, #4]
 800f864:	f7ff fdb6 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f868:	4602      	mov	r2, r0
 800f86a:	68bb      	ldr	r3, [r7, #8]
 800f86c:	4293      	cmp	r3, r2
 800f86e:	da01      	bge.n	800f874 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x26>
 800f870:	f00b fbaa 	bl	801afc8 <abort>
    Resize(new_shape_size);
 800f874:	68b9      	ldr	r1, [r7, #8]
 800f876:	68f8      	ldr	r0, [r7, #12]
 800f878:	f7ff fe03 	bl	800f482 <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
 800f87c:	6878      	ldr	r0, [r7, #4]
 800f87e:	f7ff fda9 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f882:	4602      	mov	r2, r0
 800f884:	68bb      	ldr	r3, [r7, #8]
 800f886:	1a9b      	subs	r3, r3, r2
 800f888:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < size_increase; ++i) {
 800f88a:	2300      	movs	r3, #0
 800f88c:	617b      	str	r3, [r7, #20]
 800f88e:	697a      	ldr	r2, [r7, #20]
 800f890:	693b      	ldr	r3, [r7, #16]
 800f892:	429a      	cmp	r2, r3
 800f894:	da08      	bge.n	800f8a8 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x5a>
      SetDim(i, pad_value);
 800f896:	683a      	ldr	r2, [r7, #0]
 800f898:	6979      	ldr	r1, [r7, #20]
 800f89a:	68f8      	ldr	r0, [r7, #12]
 800f89c:	f7ff ff93 	bl	800f7c6 <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < size_increase; ++i) {
 800f8a0:	697b      	ldr	r3, [r7, #20]
 800f8a2:	3301      	adds	r3, #1
 800f8a4:	617b      	str	r3, [r7, #20]
 800f8a6:	e7f2      	b.n	800f88e <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x40>
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800f8a8:	68f8      	ldr	r0, [r7, #12]
 800f8aa:	f7ff fdc4 	bl	800f436 <_ZN6tflite12RuntimeShape8DimsDataEv>
 800f8ae:	4602      	mov	r2, r0
 800f8b0:	693b      	ldr	r3, [r7, #16]
 800f8b2:	009b      	lsls	r3, r3, #2
 800f8b4:	18d4      	adds	r4, r2, r3
 800f8b6:	6878      	ldr	r0, [r7, #4]
 800f8b8:	f7ff fdd0 	bl	800f45c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f8bc:	4605      	mov	r5, r0
                sizeof(int32) * shape.DimensionsCount());
 800f8be:	6878      	ldr	r0, [r7, #4]
 800f8c0:	f7ff fd88 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f8c4:	4603      	mov	r3, r0
 800f8c6:	009b      	lsls	r3, r3, #2
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800f8c8:	461a      	mov	r2, r3
 800f8ca:	4629      	mov	r1, r5
 800f8cc:	4620      	mov	r0, r4
 800f8ce:	f00b fc8f 	bl	801b1f0 <memcpy>
  }
 800f8d2:	68fb      	ldr	r3, [r7, #12]
 800f8d4:	4618      	mov	r0, r3
 800f8d6:	3718      	adds	r7, #24
 800f8d8:	46bd      	mov	sp, r7
 800f8da:	bdb0      	pop	{r4, r5, r7, pc}

0800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800f8dc:	b580      	push	{r7, lr}
 800f8de:	b086      	sub	sp, #24
 800f8e0:	af00      	add	r7, sp, #0
 800f8e2:	60f8      	str	r0, [r7, #12]
 800f8e4:	60b9      	str	r1, [r7, #8]
 800f8e6:	607a      	str	r2, [r7, #4]
 800f8e8:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800f8ea:	68f8      	ldr	r0, [r7, #12]
 800f8ec:	f7ff fd72 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f8f0:	4603      	mov	r3, r0
 800f8f2:	2b04      	cmp	r3, #4
 800f8f4:	d001      	beq.n	800f8fa <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800f8f6:	f00b fb67 	bl	801afc8 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 800f8fa:	68f8      	ldr	r0, [r7, #12]
 800f8fc:	f7ff ff8b 	bl	800f816 <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 800f900:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800f902:	68bb      	ldr	r3, [r7, #8]
 800f904:	2b00      	cmp	r3, #0
 800f906:	db04      	blt.n	800f912 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	681b      	ldr	r3, [r3, #0]
 800f90c:	68ba      	ldr	r2, [r7, #8]
 800f90e:	429a      	cmp	r2, r3
 800f910:	db01      	blt.n	800f916 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 800f912:	f00b fb59 	bl	801afc8 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800f916:	687b      	ldr	r3, [r7, #4]
 800f918:	2b00      	cmp	r3, #0
 800f91a:	db05      	blt.n	800f928 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 800f91c:	697b      	ldr	r3, [r7, #20]
 800f91e:	3304      	adds	r3, #4
 800f920:	681b      	ldr	r3, [r3, #0]
 800f922:	687a      	ldr	r2, [r7, #4]
 800f924:	429a      	cmp	r2, r3
 800f926:	db01      	blt.n	800f92c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800f928:	f00b fb4e 	bl	801afc8 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800f92c:	683b      	ldr	r3, [r7, #0]
 800f92e:	2b00      	cmp	r3, #0
 800f930:	db05      	blt.n	800f93e <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800f932:	697b      	ldr	r3, [r7, #20]
 800f934:	3308      	adds	r3, #8
 800f936:	681b      	ldr	r3, [r3, #0]
 800f938:	683a      	ldr	r2, [r7, #0]
 800f93a:	429a      	cmp	r2, r3
 800f93c:	db01      	blt.n	800f942 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 800f93e:	f00b fb43 	bl	801afc8 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800f942:	6a3b      	ldr	r3, [r7, #32]
 800f944:	2b00      	cmp	r3, #0
 800f946:	db05      	blt.n	800f954 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 800f948:	697b      	ldr	r3, [r7, #20]
 800f94a:	330c      	adds	r3, #12
 800f94c:	681b      	ldr	r3, [r3, #0]
 800f94e:	6a3a      	ldr	r2, [r7, #32]
 800f950:	429a      	cmp	r2, r3
 800f952:	db01      	blt.n	800f958 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800f954:	f00b fb38 	bl	801afc8 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800f958:	697b      	ldr	r3, [r7, #20]
 800f95a:	3304      	adds	r3, #4
 800f95c:	681b      	ldr	r3, [r3, #0]
 800f95e:	68ba      	ldr	r2, [r7, #8]
 800f960:	fb02 f203 	mul.w	r2, r2, r3
 800f964:	687b      	ldr	r3, [r7, #4]
 800f966:	4413      	add	r3, r2
 800f968:	697a      	ldr	r2, [r7, #20]
 800f96a:	3208      	adds	r2, #8
 800f96c:	6812      	ldr	r2, [r2, #0]
 800f96e:	fb02 f203 	mul.w	r2, r2, r3
 800f972:	683b      	ldr	r3, [r7, #0]
 800f974:	4413      	add	r3, r2
 800f976:	697a      	ldr	r2, [r7, #20]
 800f978:	320c      	adds	r2, #12
 800f97a:	6812      	ldr	r2, [r2, #0]
 800f97c:	fb02 f203 	mul.w	r2, r2, r3
 800f980:	6a3b      	ldr	r3, [r7, #32]
 800f982:	4413      	add	r3, r2
}
 800f984:	4618      	mov	r0, r3
 800f986:	3718      	adds	r7, #24
 800f988:	46bd      	mov	sp, r7
 800f98a:	bd80      	pop	{r7, pc}

0800f98c <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
  return size_1;
}

inline int MatchingElementsSize(const RuntimeShape& shape,
                                const RuntimeShape& check_shape_0,
                                const RuntimeShape& check_shape_1) {
 800f98c:	b580      	push	{r7, lr}
 800f98e:	b088      	sub	sp, #32
 800f990:	af00      	add	r7, sp, #0
 800f992:	60f8      	str	r0, [r7, #12]
 800f994:	60b9      	str	r1, [r7, #8]
 800f996:	607a      	str	r2, [r7, #4]
  const int size_1 = shape.FlatSize();
 800f998:	68f8      	ldr	r0, [r7, #12]
 800f99a:	f7ff fdb7 	bl	800f50c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f99e:	61f8      	str	r0, [r7, #28]
  const int size_2 = check_shape_0.FlatSize();
 800f9a0:	68b8      	ldr	r0, [r7, #8]
 800f9a2:	f7ff fdb3 	bl	800f50c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f9a6:	61b8      	str	r0, [r7, #24]
  const int size_3 = check_shape_1.FlatSize();
 800f9a8:	6878      	ldr	r0, [r7, #4]
 800f9aa:	f7ff fdaf 	bl	800f50c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f9ae:	6178      	str	r0, [r7, #20]
  TFLITE_CHECK_EQ(size_1, size_2);
 800f9b0:	69fa      	ldr	r2, [r7, #28]
 800f9b2:	69bb      	ldr	r3, [r7, #24]
 800f9b4:	429a      	cmp	r2, r3
 800f9b6:	d001      	beq.n	800f9bc <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x30>
 800f9b8:	f00b fb06 	bl	801afc8 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
 800f9bc:	69ba      	ldr	r2, [r7, #24]
 800f9be:	697b      	ldr	r3, [r7, #20]
 800f9c0:	429a      	cmp	r2, r3
 800f9c2:	d001      	beq.n	800f9c8 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x3c>
 800f9c4:	f00b fb00 	bl	801afc8 <abort>
  return size_1;
 800f9c8:	69fb      	ldr	r3, [r7, #28]
}
 800f9ca:	4618      	mov	r0, r3
 800f9cc:	3720      	adds	r7, #32
 800f9ce:	46bd      	mov	sp, r7
 800f9d0:	bd80      	pop	{r7, pc}

0800f9d2 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 800f9d2:	b580      	push	{r7, lr}
 800f9d4:	b084      	sub	sp, #16
 800f9d6:	af00      	add	r7, sp, #0
 800f9d8:	ed87 0a03 	vstr	s0, [r7, #12]
 800f9dc:	edc7 0a02 	vstr	s1, [r7, #8]
 800f9e0:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 800f9e4:	f107 0208 	add.w	r2, r7, #8
 800f9e8:	f107 030c 	add.w	r3, r7, #12
 800f9ec:	4611      	mov	r1, r2
 800f9ee:	4618      	mov	r0, r3
 800f9f0:	f7fe ffb6 	bl	800e960 <_ZSt3maxIfERKT_S2_S2_>
 800f9f4:	4602      	mov	r2, r0
 800f9f6:	1d3b      	adds	r3, r7, #4
 800f9f8:	4619      	mov	r1, r3
 800f9fa:	4610      	mov	r0, r2
 800f9fc:	f7fe ff97 	bl	800e92e <_ZSt3minIfERKT_S2_S2_>
 800fa00:	4603      	mov	r3, r0
 800fa02:	681b      	ldr	r3, [r3, #0]
 800fa04:	ee07 3a90 	vmov	s15, r3
}
 800fa08:	eeb0 0a67 	vmov.f32	s0, s15
 800fa0c:	3710      	adds	r7, #16
 800fa0e:	46bd      	mov	sp, r7
 800fa10:	bd80      	pop	{r7, pc}

0800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>:
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
 800fa12:	b580      	push	{r7, lr}
 800fa14:	b084      	sub	sp, #16
 800fa16:	af00      	add	r7, sp, #0
 800fa18:	60f8      	str	r0, [r7, #12]
 800fa1a:	60b9      	str	r1, [r7, #8]
 800fa1c:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
 800fa1e:	68b9      	ldr	r1, [r7, #8]
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f7ff fe1b 	bl	800f65c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800fa26:	4602      	mov	r2, r0
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	425b      	negs	r3, r3
 800fa2c:	4619      	mov	r1, r3
 800fa2e:	4610      	mov	r0, r2
 800fa30:	f001 fa06 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800fa34:	4603      	mov	r3, r0
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
 800fa36:	4618      	mov	r0, r3
 800fa38:	3710      	adds	r7, #16
 800fa3a:	46bd      	mov	sp, r7
 800fa3c:	bd80      	pop	{r7, pc}

0800fa3e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
// DO NOT USE THIS FUNCTION FOR NEW FUNCTIONALITY BEYOND IMPLEMENTING
// BROADCASTING.
//
// Same as Offset(), except takes as NdArrayDesc<N> instead of Dims<N>.
inline int SubscriptToIndex(const NdArrayDesc<4>& desc, int i0, int i1, int i2,
                            int i3) {
 800fa3e:	b580      	push	{r7, lr}
 800fa40:	b084      	sub	sp, #16
 800fa42:	af00      	add	r7, sp, #0
 800fa44:	60f8      	str	r0, [r7, #12]
 800fa46:	60b9      	str	r1, [r7, #8]
 800fa48:	607a      	str	r2, [r7, #4]
 800fa4a:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
 800fa4c:	68bb      	ldr	r3, [r7, #8]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	db04      	blt.n	800fa5c <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x1e>
 800fa52:	68fb      	ldr	r3, [r7, #12]
 800fa54:	681b      	ldr	r3, [r3, #0]
 800fa56:	68ba      	ldr	r2, [r7, #8]
 800fa58:	429a      	cmp	r2, r3
 800fa5a:	db01      	blt.n	800fa60 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x22>
 800fa5c:	f00b fab4 	bl	801afc8 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
 800fa60:	687b      	ldr	r3, [r7, #4]
 800fa62:	2b00      	cmp	r3, #0
 800fa64:	db04      	blt.n	800fa70 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x32>
 800fa66:	68fb      	ldr	r3, [r7, #12]
 800fa68:	685b      	ldr	r3, [r3, #4]
 800fa6a:	687a      	ldr	r2, [r7, #4]
 800fa6c:	429a      	cmp	r2, r3
 800fa6e:	db01      	blt.n	800fa74 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x36>
 800fa70:	f00b faaa 	bl	801afc8 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
 800fa74:	683b      	ldr	r3, [r7, #0]
 800fa76:	2b00      	cmp	r3, #0
 800fa78:	db04      	blt.n	800fa84 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x46>
 800fa7a:	68fb      	ldr	r3, [r7, #12]
 800fa7c:	689b      	ldr	r3, [r3, #8]
 800fa7e:	683a      	ldr	r2, [r7, #0]
 800fa80:	429a      	cmp	r2, r3
 800fa82:	db01      	blt.n	800fa88 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x4a>
 800fa84:	f00b faa0 	bl	801afc8 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
 800fa88:	69bb      	ldr	r3, [r7, #24]
 800fa8a:	2b00      	cmp	r3, #0
 800fa8c:	db04      	blt.n	800fa98 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x5a>
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	68db      	ldr	r3, [r3, #12]
 800fa92:	69ba      	ldr	r2, [r7, #24]
 800fa94:	429a      	cmp	r2, r3
 800fa96:	db01      	blt.n	800fa9c <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x5e>
 800fa98:	f00b fa96 	bl	801afc8 <abort>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
 800fa9c:	68fb      	ldr	r3, [r7, #12]
 800fa9e:	691b      	ldr	r3, [r3, #16]
 800faa0:	68ba      	ldr	r2, [r7, #8]
 800faa2:	fb02 f203 	mul.w	r2, r2, r3
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	695b      	ldr	r3, [r3, #20]
 800faaa:	6879      	ldr	r1, [r7, #4]
 800faac:	fb01 f303 	mul.w	r3, r1, r3
 800fab0:	441a      	add	r2, r3
 800fab2:	68fb      	ldr	r3, [r7, #12]
 800fab4:	699b      	ldr	r3, [r3, #24]
 800fab6:	6839      	ldr	r1, [r7, #0]
 800fab8:	fb01 f303 	mul.w	r3, r1, r3
 800fabc:	441a      	add	r2, r3
         i3 * desc.strides[3];
 800fabe:	68fb      	ldr	r3, [r7, #12]
 800fac0:	69db      	ldr	r3, [r3, #28]
 800fac2:	69b9      	ldr	r1, [r7, #24]
 800fac4:	fb01 f303 	mul.w	r3, r1, r3
 800fac8:	4413      	add	r3, r2
}
 800faca:	4618      	mov	r0, r3
 800facc:	3710      	adds	r7, #16
 800face:	46bd      	mov	sp, r7
 800fad0:	bd80      	pop	{r7, pc}

0800fad2 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const float* input1_data,
                const RuntimeShape& input2_shape, const float* input2_data,
                const RuntimeShape& output_shape, float* output_data) {
 800fad2:	b590      	push	{r4, r7, lr}
 800fad4:	b089      	sub	sp, #36	; 0x24
 800fad6:	af00      	add	r7, sp, #0
 800fad8:	60f8      	str	r0, [r7, #12]
 800fada:	60b9      	str	r1, [r7, #8]
 800fadc:	607a      	str	r2, [r7, #4]
 800fade:	603b      	str	r3, [r7, #0]
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800fae0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fae2:	6839      	ldr	r1, [r7, #0]
 800fae4:	68b8      	ldr	r0, [r7, #8]
 800fae6:	f7ff ff51 	bl	800f98c <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800faea:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; i++) {
 800faec:	2300      	movs	r3, #0
 800faee:	61fb      	str	r3, [r7, #28]
 800faf0:	69fa      	ldr	r2, [r7, #28]
 800faf2:	69bb      	ldr	r3, [r7, #24]
 800faf4:	429a      	cmp	r2, r3
 800faf6:	da29      	bge.n	800fb4c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x7a>
    auto x = input1_data[i] + input2_data[i];
 800faf8:	69fb      	ldr	r3, [r7, #28]
 800fafa:	009b      	lsls	r3, r3, #2
 800fafc:	687a      	ldr	r2, [r7, #4]
 800fafe:	4413      	add	r3, r2
 800fb00:	ed93 7a00 	vldr	s14, [r3]
 800fb04:	69fb      	ldr	r3, [r7, #28]
 800fb06:	009b      	lsls	r3, r3, #2
 800fb08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fb0a:	4413      	add	r3, r2
 800fb0c:	edd3 7a00 	vldr	s15, [r3]
 800fb10:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fb14:	edc7 7a05 	vstr	s15, [r7, #20]
    output_data[i] = ActivationFunctionWithMinMax(
        x, params.float_activation_min, params.float_activation_max);
 800fb18:	68fb      	ldr	r3, [r7, #12]
 800fb1a:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800fb1e:	68fb      	ldr	r3, [r7, #12]
 800fb20:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    output_data[i] = ActivationFunctionWithMinMax(
 800fb24:	69fb      	ldr	r3, [r7, #28]
 800fb26:	009b      	lsls	r3, r3, #2
 800fb28:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb2a:	18d4      	adds	r4, r2, r3
 800fb2c:	eeb0 1a47 	vmov.f32	s2, s14
 800fb30:	eef0 0a67 	vmov.f32	s1, s15
 800fb34:	ed97 0a05 	vldr	s0, [r7, #20]
 800fb38:	f7ff ff4b 	bl	800f9d2 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 800fb3c:	eef0 7a40 	vmov.f32	s15, s0
 800fb40:	edc4 7a00 	vstr	s15, [r4]
  for (int i = 0; i < flat_size; i++) {
 800fb44:	69fb      	ldr	r3, [r7, #28]
 800fb46:	3301      	adds	r3, #1
 800fb48:	61fb      	str	r3, [r7, #28]
 800fb4a:	e7d1      	b.n	800faf0 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x1e>
  }
}
 800fb4c:	bf00      	nop
 800fb4e:	3724      	adds	r7, #36	; 0x24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd90      	pop	{r4, r7, pc}

0800fb54 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph>:

// Element-wise add that can often be used for inner loop of broadcast add as
// well as the non-broadcast add.
inline void AddElementwise(int size, const ArithmeticParams& params,
                           const uint8* input1_data, const uint8* input2_data,
                           uint8* output_data) {
 800fb54:	b590      	push	{r4, r7, lr}
 800fb56:	b08f      	sub	sp, #60	; 0x3c
 800fb58:	af00      	add	r7, sp, #0
 800fb5a:	60f8      	str	r0, [r7, #12]
 800fb5c:	60b9      	str	r1, [r7, #8]
 800fb5e:	607a      	str	r2, [r7, #4]
 800fb60:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_GT(params.input1_offset, -256);
 800fb62:	68bb      	ldr	r3, [r7, #8]
 800fb64:	685b      	ldr	r3, [r3, #4]
 800fb66:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800fb6a:	da01      	bge.n	800fb70 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x1c>
 800fb6c:	f00b fa2c 	bl	801afc8 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
 800fb70:	68bb      	ldr	r3, [r7, #8]
 800fb72:	689b      	ldr	r3, [r3, #8]
 800fb74:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800fb78:	da01      	bge.n	800fb7e <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x2a>
 800fb7a:	f00b fa25 	bl	801afc8 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
 800fb7e:	68bb      	ldr	r3, [r7, #8]
 800fb80:	685b      	ldr	r3, [r3, #4]
 800fb82:	2bff      	cmp	r3, #255	; 0xff
 800fb84:	dd01      	ble.n	800fb8a <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x36>
 800fb86:	f00b fa1f 	bl	801afc8 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	689b      	ldr	r3, [r3, #8]
 800fb8e:	2bff      	cmp	r3, #255	; 0xff
 800fb90:	dd01      	ble.n	800fb96 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x42>
 800fb92:	f00b fa19 	bl	801afc8 <abort>

  for (int i = 0; i < size; ++i) {
 800fb96:	2300      	movs	r3, #0
 800fb98:	637b      	str	r3, [r7, #52]	; 0x34
 800fb9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb9c:	68fb      	ldr	r3, [r7, #12]
 800fb9e:	429a      	cmp	r2, r3
 800fba0:	da5b      	bge.n	800fc5a <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x106>
    const int32 input1_val = params.input1_offset + input1_data[i];
 800fba2:	68bb      	ldr	r3, [r7, #8]
 800fba4:	685b      	ldr	r3, [r3, #4]
 800fba6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fba8:	6879      	ldr	r1, [r7, #4]
 800fbaa:	440a      	add	r2, r1
 800fbac:	7812      	ldrb	r2, [r2, #0]
 800fbae:	4413      	add	r3, r2
 800fbb0:	633b      	str	r3, [r7, #48]	; 0x30
    const int32 input2_val = params.input2_offset + input2_data[i];
 800fbb2:	68bb      	ldr	r3, [r7, #8]
 800fbb4:	689b      	ldr	r3, [r3, #8]
 800fbb6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fbb8:	6839      	ldr	r1, [r7, #0]
 800fbba:	440a      	add	r2, r1
 800fbbc:	7812      	ldrb	r2, [r2, #0]
 800fbbe:	4413      	add	r3, r2
 800fbc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	699b      	ldr	r3, [r3, #24]
 800fbc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbc8:	fa02 f303 	lsl.w	r3, r2, r3
 800fbcc:	62bb      	str	r3, [r7, #40]	; 0x28
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
 800fbce:	68bb      	ldr	r3, [r7, #8]
 800fbd0:	699b      	ldr	r3, [r3, #24]
 800fbd2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbd4:	fa02 f303 	lsl.w	r3, r2, r3
 800fbd8:	627b      	str	r3, [r7, #36]	; 0x24
    const int32 scaled_input1_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
 800fbda:	68bb      	ldr	r3, [r7, #8]
 800fbdc:	69d9      	ldr	r1, [r3, #28]
 800fbde:	68bb      	ldr	r3, [r7, #8]
 800fbe0:	6a1b      	ldr	r3, [r3, #32]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800fbe2:	461a      	mov	r2, r3
 800fbe4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbe6:	f7ff ff14 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800fbea:	6238      	str	r0, [r7, #32]
    const int32 scaled_input2_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
 800fbec:	68bb      	ldr	r3, [r7, #8]
 800fbee:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fbf0:	68bb      	ldr	r3, [r7, #8]
 800fbf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800fbf4:	461a      	mov	r2, r3
 800fbf6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbf8:	f7ff ff0b 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800fbfc:	61f8      	str	r0, [r7, #28]
    const int32 raw_sum = scaled_input1_val + scaled_input2_val;
 800fbfe:	6a3a      	ldr	r2, [r7, #32]
 800fc00:	69fb      	ldr	r3, [r7, #28]
 800fc02:	4413      	add	r3, r2
 800fc04:	61bb      	str	r3, [r7, #24]
    const int32 raw_output =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            raw_sum, params.output_multiplier, params.output_shift) +
 800fc06:	68bb      	ldr	r3, [r7, #8]
 800fc08:	6919      	ldr	r1, [r3, #16]
 800fc0a:	68bb      	ldr	r3, [r7, #8]
 800fc0c:	695b      	ldr	r3, [r3, #20]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800fc0e:	461a      	mov	r2, r3
 800fc10:	69b8      	ldr	r0, [r7, #24]
 800fc12:	f7ff fefe 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800fc16:	4602      	mov	r2, r0
        params.output_offset;
 800fc18:	68bb      	ldr	r3, [r7, #8]
 800fc1a:	68db      	ldr	r3, [r3, #12]
            raw_sum, params.output_multiplier, params.output_shift) +
 800fc1c:	4413      	add	r3, r2
        params.output_offset;
 800fc1e:	613b      	str	r3, [r7, #16]
    const int32 clamped_output =
        std::min(params.quantized_activation_max,
 800fc20:	68bb      	ldr	r3, [r7, #8]
 800fc22:	f103 0430 	add.w	r4, r3, #48	; 0x30
                 std::max(params.quantized_activation_min, raw_output));
 800fc26:	68bb      	ldr	r3, [r7, #8]
 800fc28:	332c      	adds	r3, #44	; 0x2c
 800fc2a:	f107 0210 	add.w	r2, r7, #16
 800fc2e:	4611      	mov	r1, r2
 800fc30:	4618      	mov	r0, r3
 800fc32:	f7ff fb22 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 800fc36:	4603      	mov	r3, r0
 800fc38:	4619      	mov	r1, r3
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f7ff fb31 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 800fc40:	4603      	mov	r3, r0
 800fc42:	681b      	ldr	r3, [r3, #0]
 800fc44:	617b      	str	r3, [r7, #20]
    output_data[i] = static_cast<uint8>(clamped_output);
 800fc46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc4a:	4413      	add	r3, r2
 800fc4c:	697a      	ldr	r2, [r7, #20]
 800fc4e:	b2d2      	uxtb	r2, r2
 800fc50:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 800fc52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc54:	3301      	adds	r3, #1
 800fc56:	637b      	str	r3, [r7, #52]	; 0x34
 800fc58:	e79f      	b.n	800fb9a <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x46>
  }
}
 800fc5a:	bf00      	nop
 800fc5c:	373c      	adds	r7, #60	; 0x3c
 800fc5e:	46bd      	mov	sp, r7
 800fc60:	bd90      	pop	{r4, r7, pc}

0800fc62 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
 800fc62:	b580      	push	{r7, lr}
 800fc64:	b088      	sub	sp, #32
 800fc66:	af02      	add	r7, sp, #8
 800fc68:	60f8      	str	r0, [r7, #12]
 800fc6a:	60b9      	str	r1, [r7, #8]
 800fc6c:	607a      	str	r2, [r7, #4]
 800fc6e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800fc70:	68fb      	ldr	r3, [r7, #12]
 800fc72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc78:	429a      	cmp	r2, r3
 800fc7a:	dd01      	ble.n	800fc80 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1e>
 800fc7c:	f00b f9a4 	bl	801afc8 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800fc80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc82:	6839      	ldr	r1, [r7, #0]
 800fc84:	68b8      	ldr	r0, [r7, #8]
 800fc86:	f7ff fe81 	bl	800f98c <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800fc8a:	6178      	str	r0, [r7, #20]

  TFLITE_DCHECK_GT(params.input1_offset, -256);
 800fc8c:	68fb      	ldr	r3, [r7, #12]
 800fc8e:	685b      	ldr	r3, [r3, #4]
 800fc90:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800fc94:	da01      	bge.n	800fc9a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x38>
 800fc96:	f00b f997 	bl	801afc8 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
 800fc9a:	68fb      	ldr	r3, [r7, #12]
 800fc9c:	689b      	ldr	r3, [r3, #8]
 800fc9e:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800fca2:	da01      	bge.n	800fca8 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x46>
 800fca4:	f00b f990 	bl	801afc8 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
 800fca8:	68fb      	ldr	r3, [r7, #12]
 800fcaa:	685b      	ldr	r3, [r3, #4]
 800fcac:	2bff      	cmp	r3, #255	; 0xff
 800fcae:	dd01      	ble.n	800fcb4 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x52>
 800fcb0:	f00b f98a 	bl	801afc8 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
 800fcb4:	68fb      	ldr	r3, [r7, #12]
 800fcb6:	689b      	ldr	r3, [r3, #8]
 800fcb8:	2bff      	cmp	r3, #255	; 0xff
 800fcba:	dd01      	ble.n	800fcc0 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5e>
 800fcbc:	f00b f984 	bl	801afc8 <abort>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
 800fcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcc2:	9300      	str	r3, [sp, #0]
 800fcc4:	6a3b      	ldr	r3, [r7, #32]
 800fcc6:	687a      	ldr	r2, [r7, #4]
 800fcc8:	68f9      	ldr	r1, [r7, #12]
 800fcca:	6978      	ldr	r0, [r7, #20]
 800fccc:	f7ff ff42 	bl	800fb54 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph>
}
 800fcd0:	bf00      	nop
 800fcd2:	3718      	adds	r7, #24
 800fcd4:	46bd      	mov	sp, r7
 800fcd6:	bd80      	pop	{r7, pc}

0800fcd8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
 800fcd8:	b590      	push	{r4, r7, lr}
 800fcda:	ed2d 8b04 	vpush	{d8-d9}
 800fcde:	b0a1      	sub	sp, #132	; 0x84
 800fce0:	af02      	add	r7, sp, #8
 800fce2:	60f8      	str	r0, [r7, #12]
 800fce4:	60b9      	str	r1, [r7, #8]
 800fce6:	607a      	str	r2, [r7, #4]
 800fce8:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 800fcea:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcee:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fcf2:	6839      	ldr	r1, [r7, #0]
 800fcf4:	68b8      	ldr	r0, [r7, #8]
 800fcf6:	f001 f917 	bl	8010f28 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 800fcfa:	f107 0310 	add.w	r3, r7, #16
 800fcfe:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800fd02:	2104      	movs	r1, #4
 800fd04:	4618      	mov	r0, r3
 800fd06:	f7ff fd92 	bl	800f82e <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800fd0a:	2300      	movs	r3, #0
 800fd0c:	677b      	str	r3, [r7, #116]	; 0x74
 800fd0e:	f107 0310 	add.w	r3, r7, #16
 800fd12:	2100      	movs	r1, #0
 800fd14:	4618      	mov	r0, r3
 800fd16:	f7ff fb69 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd1a:	4602      	mov	r2, r0
 800fd1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd1e:	4293      	cmp	r3, r2
 800fd20:	bfb4      	ite	lt
 800fd22:	2301      	movlt	r3, #1
 800fd24:	2300      	movge	r3, #0
 800fd26:	b2db      	uxtb	r3, r3
 800fd28:	2b00      	cmp	r3, #0
 800fd2a:	f000 8084 	beq.w	800fe36 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x15e>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800fd2e:	2300      	movs	r3, #0
 800fd30:	673b      	str	r3, [r7, #112]	; 0x70
 800fd32:	f107 0310 	add.w	r3, r7, #16
 800fd36:	2101      	movs	r1, #1
 800fd38:	4618      	mov	r0, r3
 800fd3a:	f7ff fb57 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd3e:	4602      	mov	r2, r0
 800fd40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd42:	4293      	cmp	r3, r2
 800fd44:	bfb4      	ite	lt
 800fd46:	2301      	movlt	r3, #1
 800fd48:	2300      	movge	r3, #0
 800fd4a:	b2db      	uxtb	r3, r3
 800fd4c:	2b00      	cmp	r3, #0
 800fd4e:	d06e      	beq.n	800fe2e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x156>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800fd50:	2300      	movs	r3, #0
 800fd52:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fd54:	f107 0310 	add.w	r3, r7, #16
 800fd58:	2102      	movs	r1, #2
 800fd5a:	4618      	mov	r0, r3
 800fd5c:	f7ff fb46 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd60:	4602      	mov	r2, r0
 800fd62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd64:	4293      	cmp	r3, r2
 800fd66:	bfb4      	ite	lt
 800fd68:	2301      	movlt	r3, #1
 800fd6a:	2300      	movge	r3, #0
 800fd6c:	b2db      	uxtb	r3, r3
 800fd6e:	2b00      	cmp	r3, #0
 800fd70:	d059      	beq.n	800fe26 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x14e>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800fd72:	2300      	movs	r3, #0
 800fd74:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd76:	f107 0310 	add.w	r3, r7, #16
 800fd7a:	2103      	movs	r1, #3
 800fd7c:	4618      	mov	r0, r3
 800fd7e:	f7ff fb35 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd82:	4602      	mov	r2, r0
 800fd84:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd86:	4293      	cmp	r3, r2
 800fd88:	bfb4      	ite	lt
 800fd8a:	2301      	movlt	r3, #1
 800fd8c:	2300      	movge	r3, #0
 800fd8e:	b2db      	uxtb	r3, r3
 800fd90:	2b00      	cmp	r3, #0
 800fd92:	d044      	beq.n	800fe1e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x146>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
 800fd94:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800fd98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd9a:	9300      	str	r3, [sp, #0]
 800fd9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd9e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fda0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fda2:	f7ff fe4c 	bl	800fa3e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800fda6:	4603      	mov	r3, r0
 800fda8:	009b      	lsls	r3, r3, #2
 800fdaa:	687a      	ldr	r2, [r7, #4]
 800fdac:	4413      	add	r3, r2
 800fdae:	ed93 8a00 	vldr	s16, [r3]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
 800fdb2:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fdb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdb8:	9300      	str	r3, [sp, #0]
 800fdba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdbc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fdbe:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fdc0:	f7ff fe3d 	bl	800fa3e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800fdc4:	4603      	mov	r3, r0
 800fdc6:	009b      	lsls	r3, r3, #2
 800fdc8:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fdcc:	4413      	add	r3, r2
 800fdce:	edd3 7a00 	vldr	s15, [r3]
              ActivationFunctionWithMinMax(
 800fdd2:	ee38 8a27 	vadd.f32	s16, s16, s15
                  params.float_activation_min, params.float_activation_max);
 800fdd6:	68fb      	ldr	r3, [r7, #12]
 800fdd8:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 800fddc:	68fb      	ldr	r3, [r7, #12]
 800fdde:	ed93 9a0e 	vldr	s18, [r3, #56]	; 0x38
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 800fde2:	f107 0010 	add.w	r0, r7, #16
 800fde6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fde8:	9300      	str	r3, [sp, #0]
 800fdea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fdee:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fdf0:	f7ff fd74 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800fdf4:	4603      	mov	r3, r0
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fdfc:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(
 800fdfe:	eeb0 1a49 	vmov.f32	s2, s18
 800fe02:	eef0 0a68 	vmov.f32	s1, s17
 800fe06:	eeb0 0a48 	vmov.f32	s0, s16
 800fe0a:	f7ff fde2 	bl	800f9d2 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 800fe0e:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 800fe12:	edc4 7a00 	vstr	s15, [r4]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800fe16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe18:	3301      	adds	r3, #1
 800fe1a:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe1c:	e7ab      	b.n	800fd76 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x9e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800fe1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe20:	3301      	adds	r3, #1
 800fe22:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe24:	e796      	b.n	800fd54 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x7c>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800fe26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe28:	3301      	adds	r3, #1
 800fe2a:	673b      	str	r3, [r7, #112]	; 0x70
 800fe2c:	e781      	b.n	800fd32 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x5a>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800fe2e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe30:	3301      	adds	r3, #1
 800fe32:	677b      	str	r3, [r7, #116]	; 0x74
 800fe34:	e76b      	b.n	800fd0e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x36>
      RuntimeShape::ExtendedShape(4, output_shape);
 800fe36:	f107 0310 	add.w	r3, r7, #16
 800fe3a:	4618      	mov	r0, r3
 800fe3c:	f7ff fab4 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
 800fe40:	bf00      	nop
 800fe42:	377c      	adds	r7, #124	; 0x7c
 800fe44:	46bd      	mov	sp, r7
 800fe46:	ecbd 8b04 	vpop	{d8-d9}
 800fe4a:	bd90      	pop	{r4, r7, pc}

0800fe4c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
 800fe4c:	b590      	push	{r4, r7, lr}
 800fe4e:	b0ab      	sub	sp, #172	; 0xac
 800fe50:	af02      	add	r7, sp, #8
 800fe52:	60f8      	str	r0, [r7, #12]
 800fe54:	60b9      	str	r1, [r7, #8]
 800fe56:	607a      	str	r2, [r7, #4]
 800fe58:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 800fe5a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe5e:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe62:	6839      	ldr	r1, [r7, #0]
 800fe64:	68b8      	ldr	r0, [r7, #8]
 800fe66:	f001 f85f 	bl	8010f28 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 800fe6a:	f107 0318 	add.w	r3, r7, #24
 800fe6e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fe72:	2104      	movs	r1, #4
 800fe74:	4618      	mov	r0, r3
 800fe76:	f7ff fcda 	bl	800f82e <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800fe7a:	2300      	movs	r3, #0
 800fe7c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fe80:	f107 0318 	add.w	r3, r7, #24
 800fe84:	2100      	movs	r1, #0
 800fe86:	4618      	mov	r0, r3
 800fe88:	f7ff fab0 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 800fe8c:	4602      	mov	r2, r0
 800fe8e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fe92:	4293      	cmp	r3, r2
 800fe94:	bfb4      	ite	lt
 800fe96:	2301      	movlt	r3, #1
 800fe98:	2300      	movge	r3, #0
 800fe9a:	b2db      	uxtb	r3, r3
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	f000 80e0 	beq.w	8010062 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x216>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800fea2:	2300      	movs	r3, #0
 800fea4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fea8:	f107 0318 	add.w	r3, r7, #24
 800feac:	2101      	movs	r1, #1
 800feae:	4618      	mov	r0, r3
 800feb0:	f7ff fa9c 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 800feb4:	4602      	mov	r2, r0
 800feb6:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800feba:	4293      	cmp	r3, r2
 800febc:	bfb4      	ite	lt
 800febe:	2301      	movlt	r3, #1
 800fec0:	2300      	movge	r3, #0
 800fec2:	b2db      	uxtb	r3, r3
 800fec4:	2b00      	cmp	r3, #0
 800fec6:	f000 80c6 	beq.w	8010056 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x20a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800feca:	2300      	movs	r3, #0
 800fecc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800fed0:	f107 0318 	add.w	r3, r7, #24
 800fed4:	2102      	movs	r1, #2
 800fed6:	4618      	mov	r0, r3
 800fed8:	f7ff fa88 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 800fedc:	4602      	mov	r2, r0
 800fede:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fee2:	4293      	cmp	r3, r2
 800fee4:	bfb4      	ite	lt
 800fee6:	2301      	movlt	r3, #1
 800fee8:	2300      	movge	r3, #0
 800feea:	b2db      	uxtb	r3, r3
 800feec:	2b00      	cmp	r3, #0
 800feee:	f000 80ac 	beq.w	801004a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1fe>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800fef2:	2300      	movs	r3, #0
 800fef4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fef8:	f107 0318 	add.w	r3, r7, #24
 800fefc:	2103      	movs	r1, #3
 800fefe:	4618      	mov	r0, r3
 800ff00:	f7ff fa74 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 800ff04:	4602      	mov	r2, r0
 800ff06:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff0a:	4293      	cmp	r3, r2
 800ff0c:	bfb4      	ite	lt
 800ff0e:	2301      	movlt	r3, #1
 800ff10:	2300      	movge	r3, #0
 800ff12:	b2db      	uxtb	r3, r3
 800ff14:	2b00      	cmp	r3, #0
 800ff16:	f000 8092 	beq.w	801003e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1f2>
          const int32 input1_val =
              params.input1_offset +
 800ff1a:	68fb      	ldr	r3, [r7, #12]
 800ff1c:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 800ff1e:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800ff22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff26:	9300      	str	r3, [sp, #0]
 800ff28:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff2c:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff30:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ff34:	f7ff fd83 	bl	800fa3e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800ff38:	4603      	mov	r3, r0
 800ff3a:	461a      	mov	r2, r3
 800ff3c:	687b      	ldr	r3, [r7, #4]
 800ff3e:	4413      	add	r3, r2
 800ff40:	781b      	ldrb	r3, [r3, #0]
 800ff42:	4423      	add	r3, r4
 800ff44:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          const int32 input2_val =
              params.input2_offset +
 800ff48:	68fb      	ldr	r3, [r7, #12]
 800ff4a:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 800ff4c:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ff50:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff54:	9300      	str	r3, [sp, #0]
 800ff56:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff5e:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ff62:	f7ff fd6c 	bl	800fa3e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800ff66:	4603      	mov	r3, r0
 800ff68:	461a      	mov	r2, r3
 800ff6a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ff6e:	4413      	add	r3, r2
 800ff70:	781b      	ldrb	r3, [r3, #0]
 800ff72:	4423      	add	r3, r4
 800ff74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
 800ff78:	68fb      	ldr	r3, [r7, #12]
 800ff7a:	699b      	ldr	r3, [r3, #24]
          const int32 shifted_input1_val =
 800ff7c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ff80:	fa02 f303 	lsl.w	r3, r2, r3
 800ff84:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          const int32 shifted_input2_val =
              input2_val * (1 << params.left_shift);
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	699b      	ldr	r3, [r3, #24]
          const int32 shifted_input2_val =
 800ff8c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff90:	fa02 f303 	lsl.w	r3, r2, r3
 800ff94:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	69d9      	ldr	r1, [r3, #28]
                  params.input1_shift);
 800ff9c:	68fb      	ldr	r3, [r7, #12]
 800ff9e:	6a1b      	ldr	r3, [r3, #32]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800ffa0:	461a      	mov	r2, r3
 800ffa2:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ffa6:	f7ff fd34 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ffaa:	67f8      	str	r0, [r7, #124]	; 0x7c
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
 800ffac:	68fb      	ldr	r3, [r7, #12]
 800ffae:	6a59      	ldr	r1, [r3, #36]	; 0x24
                  params.input2_shift);
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ffba:	f7ff fd2a 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ffbe:	67b8      	str	r0, [r7, #120]	; 0x78
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
 800ffc0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ffc2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffc4:	4413      	add	r3, r2
 800ffc6:	677b      	str	r3, [r7, #116]	; 0x74
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	6919      	ldr	r1, [r3, #16]
 800ffcc:	68fb      	ldr	r3, [r7, #12]
 800ffce:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800ffd0:	461a      	mov	r2, r3
 800ffd2:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ffd4:	f7ff fd1d 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ffd8:	4602      	mov	r2, r0
              params.output_offset;
 800ffda:	68fb      	ldr	r3, [r7, #12]
 800ffdc:	68db      	ldr	r3, [r3, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
 800ffde:	4413      	add	r3, r2
              params.output_offset;
 800ffe0:	617b      	str	r3, [r7, #20]
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
 800ffe2:	68fb      	ldr	r3, [r7, #12]
 800ffe4:	f103 0430 	add.w	r4, r3, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
 800ffe8:	68fb      	ldr	r3, [r7, #12]
 800ffea:	332c      	adds	r3, #44	; 0x2c
 800ffec:	f107 0214 	add.w	r2, r7, #20
 800fff0:	4611      	mov	r1, r2
 800fff2:	4618      	mov	r0, r3
 800fff4:	f7ff f941 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 800fff8:	4603      	mov	r3, r0
 800fffa:	4619      	mov	r1, r3
 800fffc:	4620      	mov	r0, r4
 800fffe:	f7ff f950 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8010002:	4603      	mov	r3, r0
 8010004:	681b      	ldr	r3, [r3, #0]
 8010006:	673b      	str	r3, [r7, #112]	; 0x70
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 8010008:	f107 0018 	add.w	r0, r7, #24
 801000c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010010:	9300      	str	r3, [sp, #0]
 8010012:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010016:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801001a:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801001e:	f7ff fc5d 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8010022:	4603      	mov	r3, r0
 8010024:	461a      	mov	r2, r3
 8010026:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801002a:	4413      	add	r3, r2
 801002c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801002e:	b2d2      	uxtb	r2, r2
 8010030:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 8010032:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8010036:	3301      	adds	r3, #1
 8010038:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801003c:	e75c      	b.n	800fef8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xac>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 801003e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010042:	3301      	adds	r3, #1
 8010044:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010048:	e742      	b.n	800fed0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x84>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 801004a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801004e:	3301      	adds	r3, #1
 8010050:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010054:	e728      	b.n	800fea8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5c>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 8010056:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801005a:	3301      	adds	r3, #1
 801005c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010060:	e70e      	b.n	800fe80 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x34>
      RuntimeShape::ExtendedShape(4, output_shape);
 8010062:	f107 0318 	add.w	r3, r7, #24
 8010066:	4618      	mov	r0, r3
 8010068:	f7ff f99e 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
 801006c:	bf00      	nop
 801006e:	37a4      	adds	r7, #164	; 0xa4
 8010070:	46bd      	mov	sp, r7
 8010072:	bd90      	pop	{r4, r7, pc}

08010074 <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa>:

// Element-wise add that can often be used for inner loop of broadcast add as
// well as the non-broadcast add.
inline void AddElementwise(int size, const ArithmeticParams& params,
                           const int8_t* input1_data, const int8_t* input2_data,
                           int8_t* output_data) {
 8010074:	b590      	push	{r4, r7, lr}
 8010076:	b091      	sub	sp, #68	; 0x44
 8010078:	af00      	add	r7, sp, #0
 801007a:	60f8      	str	r0, [r7, #12]
 801007c:	60b9      	str	r1, [r7, #8]
 801007e:	607a      	str	r2, [r7, #4]
 8010080:	603b      	str	r3, [r7, #0]
  const int32_t int8_max_value = std::numeric_limits<int8_t>::max() + 1;
 8010082:	2380      	movs	r3, #128	; 0x80
 8010084:	63bb      	str	r3, [r7, #56]	; 0x38
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
 8010086:	68bb      	ldr	r3, [r7, #8]
 8010088:	685b      	ldr	r3, [r3, #4]
 801008a:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801008e:	da01      	bge.n	8010094 <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x20>
 8010090:	f00a ff9a 	bl	801afc8 <abort>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
 8010094:	68bb      	ldr	r3, [r7, #8]
 8010096:	689b      	ldr	r3, [r3, #8]
 8010098:	f113 0f80 	cmn.w	r3, #128	; 0x80
 801009c:	da01      	bge.n	80100a2 <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x2e>
 801009e:	f00a ff93 	bl	801afc8 <abort>
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
 80100a2:	68bb      	ldr	r3, [r7, #8]
 80100a4:	685b      	ldr	r3, [r3, #4]
 80100a6:	2b80      	cmp	r3, #128	; 0x80
 80100a8:	dd01      	ble.n	80100ae <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x3a>
 80100aa:	f00a ff8d 	bl	801afc8 <abort>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	689b      	ldr	r3, [r3, #8]
 80100b2:	2b80      	cmp	r3, #128	; 0x80
 80100b4:	dd01      	ble.n	80100ba <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x46>
 80100b6:	f00a ff87 	bl	801afc8 <abort>

  for (int i = 0; i < size; ++i) {
 80100ba:	2300      	movs	r3, #0
 80100bc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100be:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100c0:	68fb      	ldr	r3, [r7, #12]
 80100c2:	429a      	cmp	r2, r3
 80100c4:	da5d      	bge.n	8010182 <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x10e>
    const int32 input1_val = params.input1_offset + input1_data[i];
 80100c6:	68bb      	ldr	r3, [r7, #8]
 80100c8:	685b      	ldr	r3, [r3, #4]
 80100ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100cc:	6879      	ldr	r1, [r7, #4]
 80100ce:	440a      	add	r2, r1
 80100d0:	f992 2000 	ldrsb.w	r2, [r2]
 80100d4:	4413      	add	r3, r2
 80100d6:	637b      	str	r3, [r7, #52]	; 0x34
    const int32 input2_val = params.input2_offset + input2_data[i];
 80100d8:	68bb      	ldr	r3, [r7, #8]
 80100da:	689b      	ldr	r3, [r3, #8]
 80100dc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100de:	6839      	ldr	r1, [r7, #0]
 80100e0:	440a      	add	r2, r1
 80100e2:	f992 2000 	ldrsb.w	r2, [r2]
 80100e6:	4413      	add	r3, r2
 80100e8:	633b      	str	r3, [r7, #48]	; 0x30
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	699b      	ldr	r3, [r3, #24]
 80100ee:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100f0:	fa02 f303 	lsl.w	r3, r2, r3
 80100f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
 80100f6:	68bb      	ldr	r3, [r7, #8]
 80100f8:	699b      	ldr	r3, [r3, #24]
 80100fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100fc:	fa02 f303 	lsl.w	r3, r2, r3
 8010100:	62bb      	str	r3, [r7, #40]	; 0x28
    const int32 scaled_input1_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
 8010102:	68bb      	ldr	r3, [r7, #8]
 8010104:	69d9      	ldr	r1, [r3, #28]
 8010106:	68bb      	ldr	r3, [r7, #8]
 8010108:	6a1b      	ldr	r3, [r3, #32]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 801010a:	461a      	mov	r2, r3
 801010c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801010e:	f7ff fc80 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8010112:	6278      	str	r0, [r7, #36]	; 0x24
    const int32 scaled_input2_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
 8010114:	68bb      	ldr	r3, [r7, #8]
 8010116:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010118:	68bb      	ldr	r3, [r7, #8]
 801011a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 801011c:	461a      	mov	r2, r3
 801011e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010120:	f7ff fc77 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8010124:	6238      	str	r0, [r7, #32]
    const int32 raw_sum = scaled_input1_val + scaled_input2_val;
 8010126:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010128:	6a3b      	ldr	r3, [r7, #32]
 801012a:	4413      	add	r3, r2
 801012c:	61fb      	str	r3, [r7, #28]
    const int32 raw_output =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            raw_sum, params.output_multiplier, params.output_shift) +
 801012e:	68bb      	ldr	r3, [r7, #8]
 8010130:	6919      	ldr	r1, [r3, #16]
 8010132:	68bb      	ldr	r3, [r7, #8]
 8010134:	695b      	ldr	r3, [r3, #20]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8010136:	461a      	mov	r2, r3
 8010138:	69f8      	ldr	r0, [r7, #28]
 801013a:	f7ff fc6a 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 801013e:	4602      	mov	r2, r0
        params.output_offset;
 8010140:	68bb      	ldr	r3, [r7, #8]
 8010142:	68db      	ldr	r3, [r3, #12]
            raw_sum, params.output_multiplier, params.output_shift) +
 8010144:	4413      	add	r3, r2
        params.output_offset;
 8010146:	617b      	str	r3, [r7, #20]
    const int32 clamped_output =
        std::min(params.quantized_activation_max,
 8010148:	68bb      	ldr	r3, [r7, #8]
 801014a:	f103 0430 	add.w	r4, r3, #48	; 0x30
                 std::max(params.quantized_activation_min, raw_output));
 801014e:	68bb      	ldr	r3, [r7, #8]
 8010150:	332c      	adds	r3, #44	; 0x2c
 8010152:	f107 0214 	add.w	r2, r7, #20
 8010156:	4611      	mov	r1, r2
 8010158:	4618      	mov	r0, r3
 801015a:	f7ff f88e 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 801015e:	4603      	mov	r3, r0
 8010160:	4619      	mov	r1, r3
 8010162:	4620      	mov	r0, r4
 8010164:	f7ff f89d 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8010168:	4603      	mov	r3, r0
 801016a:	681b      	ldr	r3, [r3, #0]
 801016c:	61bb      	str	r3, [r7, #24]
    output_data[i] = static_cast<int8_t>(clamped_output);
 801016e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010170:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8010172:	4413      	add	r3, r2
 8010174:	69ba      	ldr	r2, [r7, #24]
 8010176:	b252      	sxtb	r2, r2
 8010178:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 801017a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801017c:	3301      	adds	r3, #1
 801017e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010180:	e79d      	b.n	80100be <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x4a>
  }
}
 8010182:	bf00      	nop
 8010184:	3744      	adds	r7, #68	; 0x44
 8010186:	46bd      	mov	sp, r7
 8010188:	bd90      	pop	{r4, r7, pc}

0801018a <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
 801018a:	b580      	push	{r7, lr}
 801018c:	b088      	sub	sp, #32
 801018e:	af02      	add	r7, sp, #8
 8010190:	60f8      	str	r0, [r7, #12]
 8010192:	60b9      	str	r1, [r7, #8]
 8010194:	607a      	str	r2, [r7, #4]
 8010196:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8010198:	68fb      	ldr	r3, [r7, #12]
 801019a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80101a0:	429a      	cmp	r2, r3
 80101a2:	dd01      	ble.n	80101a8 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1e>
 80101a4:	f00a ff10 	bl	801afc8 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 80101a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80101aa:	6839      	ldr	r1, [r7, #0]
 80101ac:	68b8      	ldr	r0, [r7, #8]
 80101ae:	f7ff fbed 	bl	800f98c <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 80101b2:	6178      	str	r0, [r7, #20]

  const int32_t int8_max_value = std::numeric_limits<int8_t>::max() + 1;
 80101b4:	2380      	movs	r3, #128	; 0x80
 80101b6:	613b      	str	r3, [r7, #16]
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	685b      	ldr	r3, [r3, #4]
 80101bc:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80101c0:	da01      	bge.n	80101c6 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3c>
 80101c2:	f00a ff01 	bl	801afc8 <abort>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
 80101c6:	68fb      	ldr	r3, [r7, #12]
 80101c8:	689b      	ldr	r3, [r3, #8]
 80101ca:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80101ce:	da01      	bge.n	80101d4 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x4a>
 80101d0:	f00a fefa 	bl	801afc8 <abort>
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
 80101d4:	68fb      	ldr	r3, [r7, #12]
 80101d6:	685b      	ldr	r3, [r3, #4]
 80101d8:	2b80      	cmp	r3, #128	; 0x80
 80101da:	dd01      	ble.n	80101e0 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x56>
 80101dc:	f00a fef4 	bl	801afc8 <abort>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
 80101e0:	68fb      	ldr	r3, [r7, #12]
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	2b80      	cmp	r3, #128	; 0x80
 80101e6:	dd01      	ble.n	80101ec <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x62>
 80101e8:	f00a feee 	bl	801afc8 <abort>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
 80101ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101ee:	9300      	str	r3, [sp, #0]
 80101f0:	6a3b      	ldr	r3, [r7, #32]
 80101f2:	687a      	ldr	r2, [r7, #4]
 80101f4:	68f9      	ldr	r1, [r7, #12]
 80101f6:	6978      	ldr	r0, [r7, #20]
 80101f8:	f7ff ff3c 	bl	8010074 <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa>
}
 80101fc:	bf00      	nop
 80101fe:	3718      	adds	r7, #24
 8010200:	46bd      	mov	sp, r7
 8010202:	bd80      	pop	{r7, pc}

08010204 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
 8010204:	b590      	push	{r4, r7, lr}
 8010206:	b0ab      	sub	sp, #172	; 0xac
 8010208:	af02      	add	r7, sp, #8
 801020a:	60f8      	str	r0, [r7, #12]
 801020c:	60b9      	str	r1, [r7, #8]
 801020e:	607a      	str	r2, [r7, #4]
 8010210:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 8010212:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8010216:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801021a:	6839      	ldr	r1, [r7, #0]
 801021c:	68b8      	ldr	r0, [r7, #8]
 801021e:	f000 fe83 	bl	8010f28 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 8010222:	f107 0318 	add.w	r3, r7, #24
 8010226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801022a:	2104      	movs	r1, #4
 801022c:	4618      	mov	r0, r3
 801022e:	f7ff fafe 	bl	800f82e <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 8010232:	2300      	movs	r3, #0
 8010234:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010238:	f107 0318 	add.w	r3, r7, #24
 801023c:	2100      	movs	r1, #0
 801023e:	4618      	mov	r0, r3
 8010240:	f7ff f8d4 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8010244:	4602      	mov	r2, r0
 8010246:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801024a:	4293      	cmp	r3, r2
 801024c:	bfb4      	ite	lt
 801024e:	2301      	movlt	r3, #1
 8010250:	2300      	movge	r3, #0
 8010252:	b2db      	uxtb	r3, r3
 8010254:	2b00      	cmp	r3, #0
 8010256:	f000 80e2 	beq.w	801041e <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x21a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 801025a:	2300      	movs	r3, #0
 801025c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010260:	f107 0318 	add.w	r3, r7, #24
 8010264:	2101      	movs	r1, #1
 8010266:	4618      	mov	r0, r3
 8010268:	f7ff f8c0 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801026c:	4602      	mov	r2, r0
 801026e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010272:	4293      	cmp	r3, r2
 8010274:	bfb4      	ite	lt
 8010276:	2301      	movlt	r3, #1
 8010278:	2300      	movge	r3, #0
 801027a:	b2db      	uxtb	r3, r3
 801027c:	2b00      	cmp	r3, #0
 801027e:	f000 80c8 	beq.w	8010412 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x20e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 8010282:	2300      	movs	r3, #0
 8010284:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010288:	f107 0318 	add.w	r3, r7, #24
 801028c:	2102      	movs	r1, #2
 801028e:	4618      	mov	r0, r3
 8010290:	f7ff f8ac 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8010294:	4602      	mov	r2, r0
 8010296:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801029a:	4293      	cmp	r3, r2
 801029c:	bfb4      	ite	lt
 801029e:	2301      	movlt	r3, #1
 80102a0:	2300      	movge	r3, #0
 80102a2:	b2db      	uxtb	r3, r3
 80102a4:	2b00      	cmp	r3, #0
 80102a6:	f000 80ae 	beq.w	8010406 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x202>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 80102aa:	2300      	movs	r3, #0
 80102ac:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80102b0:	f107 0318 	add.w	r3, r7, #24
 80102b4:	2103      	movs	r1, #3
 80102b6:	4618      	mov	r0, r3
 80102b8:	f7ff f898 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80102bc:	4602      	mov	r2, r0
 80102be:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102c2:	4293      	cmp	r3, r2
 80102c4:	bfb4      	ite	lt
 80102c6:	2301      	movlt	r3, #1
 80102c8:	2300      	movge	r3, #0
 80102ca:	b2db      	uxtb	r3, r3
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f000 8094 	beq.w	80103fa <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1f6>
          const int32_t input1_val =
              params.input1_offset +
 80102d2:	68fb      	ldr	r3, [r7, #12]
 80102d4:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 80102d6:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80102da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102de:	9300      	str	r3, [sp, #0]
 80102e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80102e8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80102ec:	f7ff fba7 	bl	800fa3e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 80102f0:	4603      	mov	r3, r0
 80102f2:	461a      	mov	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	4413      	add	r3, r2
 80102f8:	f993 3000 	ldrsb.w	r3, [r3]
 80102fc:	4423      	add	r3, r4
 80102fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          const int32_t input2_val =
              params.input2_offset +
 8010302:	68fb      	ldr	r3, [r7, #12]
 8010304:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 8010306:	f107 0030 	add.w	r0, r7, #48	; 0x30
 801030a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801030e:	9300      	str	r3, [sp, #0]
 8010310:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010314:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010318:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 801031c:	f7ff fb8f 	bl	800fa3e <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8010320:	4603      	mov	r3, r0
 8010322:	461a      	mov	r2, r3
 8010324:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010328:	4413      	add	r3, r2
 801032a:	f993 3000 	ldrsb.w	r3, [r3]
 801032e:	4423      	add	r3, r4
 8010330:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
 8010334:	68fb      	ldr	r3, [r7, #12]
 8010336:	699b      	ldr	r3, [r3, #24]
          const int32_t shifted_input1_val =
 8010338:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801033c:	fa02 f303 	lsl.w	r3, r2, r3
 8010340:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          const int32_t shifted_input2_val =
              input2_val * (1 << params.left_shift);
 8010344:	68fb      	ldr	r3, [r7, #12]
 8010346:	699b      	ldr	r3, [r3, #24]
          const int32_t shifted_input2_val =
 8010348:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801034c:	fa02 f303 	lsl.w	r3, r2, r3
 8010350:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	69d9      	ldr	r1, [r3, #28]
                  params.input1_shift);
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	6a1b      	ldr	r3, [r3, #32]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 801035c:	461a      	mov	r2, r3
 801035e:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 8010362:	f7ff fb56 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8010366:	67f8      	str	r0, [r7, #124]	; 0x7c
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
 8010368:	68fb      	ldr	r3, [r7, #12]
 801036a:	6a59      	ldr	r1, [r3, #36]	; 0x24
                  params.input2_shift);
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8010370:	461a      	mov	r2, r3
 8010372:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 8010376:	f7ff fb4c 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 801037a:	67b8      	str	r0, [r7, #120]	; 0x78
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
 801037c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801037e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010380:	4413      	add	r3, r2
 8010382:	677b      	str	r3, [r7, #116]	; 0x74
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
 8010384:	68fb      	ldr	r3, [r7, #12]
 8010386:	6919      	ldr	r1, [r3, #16]
 8010388:	68fb      	ldr	r3, [r7, #12]
 801038a:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 801038c:	461a      	mov	r2, r3
 801038e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8010390:	f7ff fb3f 	bl	800fa12 <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8010394:	4602      	mov	r2, r0
              params.output_offset;
 8010396:	68fb      	ldr	r3, [r7, #12]
 8010398:	68db      	ldr	r3, [r3, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
 801039a:	4413      	add	r3, r2
              params.output_offset;
 801039c:	617b      	str	r3, [r7, #20]
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	f103 0430 	add.w	r4, r3, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
 80103a4:	68fb      	ldr	r3, [r7, #12]
 80103a6:	332c      	adds	r3, #44	; 0x2c
 80103a8:	f107 0214 	add.w	r2, r7, #20
 80103ac:	4611      	mov	r1, r2
 80103ae:	4618      	mov	r0, r3
 80103b0:	f7fe ff63 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 80103b4:	4603      	mov	r3, r0
 80103b6:	4619      	mov	r1, r3
 80103b8:	4620      	mov	r0, r4
 80103ba:	f7fe ff72 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 80103be:	4603      	mov	r3, r0
 80103c0:	681b      	ldr	r3, [r3, #0]
 80103c2:	673b      	str	r3, [r7, #112]	; 0x70
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 80103c4:	f107 0018 	add.w	r0, r7, #24
 80103c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103cc:	9300      	str	r3, [sp, #0]
 80103ce:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80103d6:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80103da:	f7ff fa7f 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80103de:	4603      	mov	r3, r0
 80103e0:	461a      	mov	r2, r3
 80103e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80103e6:	4413      	add	r3, r2
 80103e8:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80103ea:	b252      	sxtb	r2, r2
 80103ec:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 80103ee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103f2:	3301      	adds	r3, #1
 80103f4:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103f8:	e75a      	b.n	80102b0 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xac>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 80103fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103fe:	3301      	adds	r3, #1
 8010400:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010404:	e740      	b.n	8010288 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x84>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 8010406:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801040a:	3301      	adds	r3, #1
 801040c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010410:	e726      	b.n	8010260 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x5c>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 8010412:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010416:	3301      	adds	r3, #1
 8010418:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801041c:	e70c      	b.n	8010238 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x34>
      RuntimeShape::ExtendedShape(4, output_shape);
 801041e:	f107 0318 	add.w	r3, r7, #24
 8010422:	4618      	mov	r0, r3
 8010424:	f7fe ffc0 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
 8010428:	bf00      	nop
 801042a:	37a4      	adds	r7, #164	; 0xa4
 801042c:	46bd      	mov	sp, r7
 801042e:	bd90      	pop	{r4, r7, pc}

08010430 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
 8010430:	b590      	push	{r4, r7, lr}
 8010432:	b09f      	sub	sp, #124	; 0x7c
 8010434:	af00      	add	r7, sp, #0
 8010436:	60f8      	str	r0, [r7, #12]
 8010438:	60b9      	str	r1, [r7, #8]
 801043a:	607a      	str	r2, [r7, #4]
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());
 801043c:	68f8      	ldr	r0, [r7, #12]
 801043e:	f7fe ffc9 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010442:	4603      	mov	r3, r0
 8010444:	65bb      	str	r3, [r7, #88]	; 0x58
 8010446:	68b8      	ldr	r0, [r7, #8]
 8010448:	f7fe ffc4 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801044c:	4603      	mov	r3, r0
 801044e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010450:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8010454:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010458:	4611      	mov	r1, r2
 801045a:	4618      	mov	r0, r3
 801045c:	f7fe ff0d 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 8010460:	4603      	mov	r3, r0
 8010462:	681b      	ldr	r3, [r3, #0]
 8010464:	66fb      	str	r3, [r7, #108]	; 0x6c

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 8010466:	687b      	ldr	r3, [r7, #4]
 8010468:	2204      	movs	r2, #4
 801046a:	701a      	strb	r2, [r3, #0]
  RuntimeShape scalar_shape(dims_count, 1);
 801046c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010470:	2201      	movs	r2, #1
 8010472:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010474:	4618      	mov	r0, r3
 8010476:	f7ff f961 	bl	800f73c <_ZN6tflite12RuntimeShapeC1Eil>

  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
 801047a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801047e:	68fa      	ldr	r2, [r7, #12]
 8010480:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010482:	4618      	mov	r0, r3
 8010484:	f7ff f9d3 	bl	800f82e <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
 8010488:	f107 0310 	add.w	r3, r7, #16
 801048c:	68ba      	ldr	r2, [r7, #8]
 801048e:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010490:	4618      	mov	r0, r3
 8010492:	f7ff f9cc 	bl	800f82e <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
 8010496:	f107 0210 	add.w	r2, r7, #16
 801049a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801049e:	4611      	mov	r1, r2
 80104a0:	4618      	mov	r0, r3
 80104a2:	f7ff f96c 	bl	800f77e <_ZNK6tflite12RuntimeShapeeqERKS0_>
 80104a6:	4603      	mov	r3, r0
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d004      	beq.n	80104b6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x86>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	2201      	movs	r2, #1
 80104b0:	701a      	strb	r2, [r3, #0]
    return false;
 80104b2:	2400      	movs	r4, #0
 80104b4:	e12c      	b.n	8010710 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2e0>
  }

  for (int i = dims_count - 1; i >= 0; --i) {
 80104b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104b8:	3b01      	subs	r3, #1
 80104ba:	677b      	str	r3, [r7, #116]	; 0x74
 80104bc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104be:	2b00      	cmp	r3, #0
 80104c0:	db42      	blt.n	8010548 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
 80104c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104c6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80104c8:	4618      	mov	r0, r3
 80104ca:	f7fe ff8f 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80104ce:	4604      	mov	r4, r0
 80104d0:	f107 0310 	add.w	r3, r7, #16
 80104d4:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80104d6:	4618      	mov	r0, r3
 80104d8:	f7fe ff88 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80104dc:	4603      	mov	r3, r0
 80104de:	429c      	cmp	r4, r3
 80104e0:	bf0c      	ite	eq
 80104e2:	2301      	moveq	r3, #1
 80104e4:	2300      	movne	r3, #0
 80104e6:	b2db      	uxtb	r3, r3
 80104e8:	2b00      	cmp	r3, #0
 80104ea:	d128      	bne.n	801053e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x10e>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
 80104ec:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104f0:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80104f2:	4618      	mov	r0, r3
 80104f4:	f7fe ff7a 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80104f8:	4603      	mov	r3, r0
 80104fa:	2b01      	cmp	r3, #1
 80104fc:	bf0c      	ite	eq
 80104fe:	2301      	moveq	r3, #1
 8010500:	2300      	movne	r3, #0
 8010502:	b2db      	uxtb	r3, r3
 8010504:	2b00      	cmp	r3, #0
 8010506:	d003      	beq.n	8010510 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xe0>
      params->broadcast_category =
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	2202      	movs	r2, #2
 801050c:	701a      	strb	r2, [r3, #0]
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
 801050e:	e01b      	b.n	8010548 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    } else if (extended_shape1.Dims(i) == 1) {
 8010510:	f107 0310 	add.w	r3, r7, #16
 8010514:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8010516:	4618      	mov	r0, r3
 8010518:	f7fe ff68 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801051c:	4603      	mov	r3, r0
 801051e:	2b01      	cmp	r3, #1
 8010520:	bf0c      	ite	eq
 8010522:	2301      	moveq	r3, #1
 8010524:	2300      	movne	r3, #0
 8010526:	b2db      	uxtb	r3, r3
 8010528:	2b00      	cmp	r3, #0
 801052a:	d003      	beq.n	8010534 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x104>
      params->broadcast_category =
 801052c:	687b      	ldr	r3, [r7, #4]
 801052e:	2203      	movs	r2, #3
 8010530:	701a      	strb	r2, [r3, #0]
          BroadcastableOpCategory::kSecondInputBroadcastsFast;
      break;
 8010532:	e009      	b.n	8010548 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    } else {
      // This case is erroneous: there is a dimension that does not match and
      // is not a broadcast from one shape to the other.
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 8010534:	687b      	ldr	r3, [r7, #4]
 8010536:	2204      	movs	r2, #4
 8010538:	701a      	strb	r2, [r3, #0]
      return true;
 801053a:	2401      	movs	r4, #1
 801053c:	e0e8      	b.n	8010710 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2e0>
      continue;
 801053e:	bf00      	nop
  for (int i = dims_count - 1; i >= 0; --i) {
 8010540:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8010542:	3b01      	subs	r3, #1
 8010544:	677b      	str	r3, [r7, #116]	; 0x74
 8010546:	e7b9      	b.n	80104bc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x8c>
    }
  }

  if (params->broadcast_category !=
 8010548:	687b      	ldr	r3, [r7, #4]
 801054a:	781b      	ldrb	r3, [r3, #0]
 801054c:	2b02      	cmp	r3, #2
 801054e:	d005      	beq.n	801055c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x12c>
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
      params->broadcast_category !=
 8010550:	687b      	ldr	r3, [r7, #4]
 8010552:	781b      	ldrb	r3, [r3, #0]
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
 8010554:	2b03      	cmp	r3, #3
 8010556:	d001      	beq.n	801055c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x12c>
          BroadcastableOpCategory::kSecondInputBroadcastsFast) {
    // This is unreachable because at least one else clause in the above loop
    // must be reached.
    TFLITE_DCHECK(false);
 8010558:	f00a fd36 	bl	801afc8 <abort>
    return false;
  }

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
 801055c:	687b      	ldr	r3, [r7, #4]
 801055e:	781b      	ldrb	r3, [r3, #0]
 8010560:	2b03      	cmp	r3, #3
 8010562:	bf0c      	ite	eq
 8010564:	2301      	moveq	r3, #1
 8010566:	2300      	movne	r3, #0
 8010568:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
 801056c:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010570:	2b00      	cmp	r3, #0
 8010572:	d002      	beq.n	801057a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x14a>
 8010574:	f107 0310 	add.w	r3, r7, #16
 8010578:	e001      	b.n	801057e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x14e>
 801057a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801057e:	667b      	str	r3, [r7, #100]	; 0x64
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
 8010580:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010584:	2b00      	cmp	r3, #0
 8010586:	d002      	beq.n	801058e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
 8010588:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801058c:	e001      	b.n	8010592 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x162>
 801058e:	f107 0310 	add.w	r3, r7, #16
 8010592:	663b      	str	r3, [r7, #96]	; 0x60
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
 8010594:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8010596:	3b01      	subs	r3, #1
 8010598:	673b      	str	r3, [r7, #112]	; 0x70
  params->broadcast_shape[0] = 1;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2201      	movs	r2, #1
 801059e:	63da      	str	r2, [r3, #60]	; 0x3c
  params->broadcast_shape[1] = 1;
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	2201      	movs	r2, #1
 80105a4:	641a      	str	r2, [r3, #64]	; 0x40
  params->broadcast_shape[2] = 1;
 80105a6:	687b      	ldr	r3, [r7, #4]
 80105a8:	2201      	movs	r2, #1
 80105aa:	645a      	str	r2, [r3, #68]	; 0x44
  params->broadcast_shape[3] = 1;
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	2201      	movs	r2, #1
 80105b0:	649a      	str	r2, [r3, #72]	; 0x48
  params->broadcast_shape[4] = 1;
 80105b2:	687b      	ldr	r3, [r7, #4]
 80105b4:	2201      	movs	r2, #1
 80105b6:	64da      	str	r2, [r3, #76]	; 0x4c
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 80105b8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105ba:	2b00      	cmp	r3, #0
 80105bc:	db0d      	blt.n	80105da <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1aa>
 80105be:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105c0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80105c2:	f7fe ff13 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80105c6:	4604      	mov	r4, r0
 80105c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80105cc:	f7fe ff0e 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80105d0:	4603      	mov	r3, r0
 80105d2:	429c      	cmp	r4, r3
 80105d4:	d101      	bne.n	80105da <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1aa>
 80105d6:	2301      	movs	r3, #1
 80105d8:	e000      	b.n	80105dc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ac>
 80105da:	2300      	movs	r3, #0
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d00e      	beq.n	80105fe <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ce>
    params->broadcast_shape[4] *= shape_b->Dims(i);
 80105e0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105e2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80105e4:	f7fe ff02 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80105e8:	4602      	mov	r2, r0
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105ee:	fb03 f202 	mul.w	r2, r3, r2
 80105f2:	687b      	ldr	r3, [r7, #4]
 80105f4:	64da      	str	r2, [r3, #76]	; 0x4c
    --i;
 80105f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105f8:	3b01      	subs	r3, #1
 80105fa:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 80105fc:	e7dc      	b.n	80105b8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x188>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
 80105fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010600:	2b00      	cmp	r3, #0
 8010602:	db08      	blt.n	8010616 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e6>
 8010604:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010606:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010608:	f7fe fef0 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801060c:	4603      	mov	r3, r0
 801060e:	2b01      	cmp	r3, #1
 8010610:	d101      	bne.n	8010616 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e6>
 8010612:	2301      	movs	r3, #1
 8010614:	e000      	b.n	8010618 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e8>
 8010616:	2300      	movs	r3, #0
 8010618:	2b00      	cmp	r3, #0
 801061a:	d00e      	beq.n	801063a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
 801061c:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801061e:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010620:	f7fe fee4 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8010624:	4602      	mov	r2, r0
 8010626:	687b      	ldr	r3, [r7, #4]
 8010628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801062a:	fb03 f202 	mul.w	r2, r3, r2
 801062e:	687b      	ldr	r3, [r7, #4]
 8010630:	649a      	str	r2, [r3, #72]	; 0x48
    --i;
 8010632:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010634:	3b01      	subs	r3, #1
 8010636:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == 1) {
 8010638:	e7e1      	b.n	80105fe <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ce>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 801063a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801063c:	2b00      	cmp	r3, #0
 801063e:	db0d      	blt.n	801065c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22c>
 8010640:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010642:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010644:	f7fe fed2 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8010648:	4604      	mov	r4, r0
 801064a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801064c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801064e:	f7fe fecd 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8010652:	4603      	mov	r3, r0
 8010654:	429c      	cmp	r4, r3
 8010656:	d101      	bne.n	801065c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22c>
 8010658:	2301      	movs	r3, #1
 801065a:	e000      	b.n	801065e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22e>
 801065c:	2300      	movs	r3, #0
 801065e:	2b00      	cmp	r3, #0
 8010660:	d00e      	beq.n	8010680 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x250>
    params->broadcast_shape[2] *= shape_a->Dims(i);
 8010662:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010664:	6e78      	ldr	r0, [r7, #100]	; 0x64
 8010666:	f7fe fec1 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801066a:	4602      	mov	r2, r0
 801066c:	687b      	ldr	r3, [r7, #4]
 801066e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010670:	fb03 f202 	mul.w	r2, r3, r2
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	645a      	str	r2, [r3, #68]	; 0x44
    --i;
 8010678:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801067a:	3b01      	subs	r3, #1
 801067c:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 801067e:	e7dc      	b.n	801063a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20a>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
 8010680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010682:	2b00      	cmp	r3, #0
 8010684:	db08      	blt.n	8010698 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x268>
 8010686:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010688:	6e38      	ldr	r0, [r7, #96]	; 0x60
 801068a:	f7fe feaf 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801068e:	4603      	mov	r3, r0
 8010690:	2b01      	cmp	r3, #1
 8010692:	d101      	bne.n	8010698 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x268>
 8010694:	2301      	movs	r3, #1
 8010696:	e000      	b.n	801069a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26a>
 8010698:	2300      	movs	r3, #0
 801069a:	2b00      	cmp	r3, #0
 801069c:	d00e      	beq.n	80106bc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28c>
    params->broadcast_shape[1] *= shape_a->Dims(i);
 801069e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80106a0:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80106a2:	f7fe fea3 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80106a6:	4602      	mov	r2, r0
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80106ac:	fb03 f202 	mul.w	r2, r3, r2
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	641a      	str	r2, [r3, #64]	; 0x40
    --i;
 80106b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106b6:	3b01      	subs	r3, #1
 80106b8:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_b->Dims(i) == 1) {
 80106ba:	e7e1      	b.n	8010680 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x250>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 80106bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106be:	2b00      	cmp	r3, #0
 80106c0:	db0d      	blt.n	80106de <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2ae>
 80106c2:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80106c4:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80106c6:	f7fe fe91 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80106ca:	4604      	mov	r4, r0
 80106cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80106ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80106d0:	f7fe fe8c 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80106d4:	4603      	mov	r3, r0
 80106d6:	429c      	cmp	r4, r3
 80106d8:	d101      	bne.n	80106de <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2ae>
 80106da:	2301      	movs	r3, #1
 80106dc:	e000      	b.n	80106e0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2b0>
 80106de:	2300      	movs	r3, #0
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	d00e      	beq.n	8010702 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2d2>
    params->broadcast_shape[0] *= shape_b->Dims(i);
 80106e4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80106e6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80106e8:	f7fe fe80 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80106ec:	4602      	mov	r2, r0
 80106ee:	687b      	ldr	r3, [r7, #4]
 80106f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106f2:	fb03 f202 	mul.w	r2, r3, r2
 80106f6:	687b      	ldr	r3, [r7, #4]
 80106f8:	63da      	str	r2, [r3, #60]	; 0x3c
    --i;
 80106fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106fc:	3b01      	subs	r3, #1
 80106fe:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8010700:	e7dc      	b.n	80106bc <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28c>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
 8010702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010704:	2b00      	cmp	r3, #0
 8010706:	db02      	blt.n	801070e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2de>
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 8010708:	687b      	ldr	r3, [r7, #4]
 801070a:	2204      	movs	r2, #4
 801070c:	701a      	strb	r2, [r3, #0]
  }
  return true;
 801070e:	2401      	movs	r4, #1
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
 8010710:	f107 0310 	add.w	r3, r7, #16
 8010714:	4618      	mov	r0, r3
 8010716:	f7fe fe47 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
 801071a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801071e:	4618      	mov	r0, r3
 8010720:	f7fe fe42 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
 8010724:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010728:	4618      	mov	r0, r3
 801072a:	f7fe fe3d 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 801072e:	4623      	mov	r3, r4
}
 8010730:	4618      	mov	r0, r3
 8010732:	377c      	adds	r7, #124	; 0x7c
 8010734:	46bd      	mov	sp, r7
 8010736:	bd90      	pop	{r4, r7, pc}

08010738 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
 8010738:	b5b0      	push	{r4, r5, r7, lr}
 801073a:	b090      	sub	sp, #64	; 0x40
 801073c:	af02      	add	r7, sp, #8
 801073e:	60f8      	str	r0, [r7, #12]
 8010740:	60b9      	str	r1, [r7, #8]
 8010742:	607a      	str	r2, [r7, #4]
 8010744:	603b      	str	r3, [r7, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
 8010746:	6839      	ldr	r1, [r7, #0]
 8010748:	6878      	ldr	r0, [r7, #4]
 801074a:	f7fe fd6b 	bl	800f224 <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
 801074e:	4603      	mov	r3, r0
 8010750:	f083 0301 	eor.w	r3, r3, #1
 8010754:	b2da      	uxtb	r2, r3
 8010756:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010758:	701a      	strb	r2, [r3, #0]

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 801075a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801075c:	781b      	ldrb	r3, [r3, #0]
 801075e:	2b03      	cmp	r3, #3
 8010760:	d004      	beq.n	801076c <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x34>
 8010762:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010764:	781b      	ldrb	r3, [r3, #0]
 8010766:	2b09      	cmp	r3, #9
 8010768:	f040 8095 	bne.w	8010896 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x15e>
    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
 801076c:	687b      	ldr	r3, [r7, #4]
 801076e:	691b      	ldr	r3, [r3, #16]
 8010770:	425a      	negs	r2, r3
 8010772:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010774:	629a      	str	r2, [r3, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
 8010776:	683b      	ldr	r3, [r7, #0]
 8010778:	691b      	ldr	r3, [r3, #16]
 801077a:	425a      	negs	r2, r3
 801077c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801077e:	62da      	str	r2, [r3, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
 8010780:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010782:	691a      	ldr	r2, [r3, #16]
 8010784:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010786:	631a      	str	r2, [r3, #48]	; 0x30
    data->left_shift = 20;
 8010788:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801078a:	2214      	movs	r2, #20
 801078c:	625a      	str	r2, [r3, #36]	; 0x24
    const double twice_max_input_scale =
        2 * static_cast<double>(
                std::max(input1->params.scale, input2->params.scale));
 801078e:	687b      	ldr	r3, [r7, #4]
 8010790:	f103 020c 	add.w	r2, r3, #12
 8010794:	683b      	ldr	r3, [r7, #0]
 8010796:	330c      	adds	r3, #12
 8010798:	4619      	mov	r1, r3
 801079a:	4610      	mov	r0, r2
 801079c:	f7fe f8e0 	bl	800e960 <_ZSt3maxIfERKT_S2_S2_>
 80107a0:	4603      	mov	r3, r0
 80107a2:	681b      	ldr	r3, [r3, #0]
        2 * static_cast<double>(
 80107a4:	4618      	mov	r0, r3
 80107a6:	f7ef feef 	bl	8000588 <__aeabi_f2d>
                std::max(input1->params.scale, input2->params.scale));
 80107aa:	4602      	mov	r2, r0
 80107ac:	460b      	mov	r3, r1
 80107ae:	f7ef fd8d 	bl	80002cc <__adddf3>
 80107b2:	4602      	mov	r2, r0
 80107b4:	460b      	mov	r3, r1
 80107b6:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
 80107ba:	687b      	ldr	r3, [r7, #4]
 80107bc:	68db      	ldr	r3, [r3, #12]
 80107be:	4618      	mov	r0, r3
 80107c0:	f7ef fee2 	bl	8000588 <__aeabi_f2d>
    const double real_input1_multiplier =
 80107c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80107c8:	f7f0 f860 	bl	800088c <__aeabi_ddiv>
 80107cc:	4602      	mov	r2, r0
 80107ce:	460b      	mov	r3, r1
 80107d0:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
 80107d4:	683b      	ldr	r3, [r7, #0]
 80107d6:	68db      	ldr	r3, [r3, #12]
 80107d8:	4618      	mov	r0, r3
 80107da:	f7ef fed5 	bl	8000588 <__aeabi_f2d>
    const double real_input2_multiplier =
 80107de:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80107e2:	f7f0 f853 	bl	800088c <__aeabi_ddiv>
 80107e6:	4602      	mov	r2, r0
 80107e8:	460b      	mov	r3, r1
 80107ea:	e9c7 2308 	strd	r2, r3, [r7, #32]
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
 80107ee:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107f2:	2201      	movs	r2, #1
 80107f4:	fa02 f303 	lsl.w	r3, r2, r3
 80107f8:	4618      	mov	r0, r3
 80107fa:	f7ef feb3 	bl	8000564 <__aeabi_i2d>
 80107fe:	4604      	mov	r4, r0
 8010800:	460d      	mov	r5, r1
 8010802:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010804:	68db      	ldr	r3, [r3, #12]
 8010806:	4618      	mov	r0, r3
 8010808:	f7ef febe 	bl	8000588 <__aeabi_f2d>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	4620      	mov	r0, r4
 8010812:	4629      	mov	r1, r5
 8010814:	f7ef ff10 	bl	8000638 <__aeabi_dmul>
 8010818:	4602      	mov	r2, r0
 801081a:	460b      	mov	r3, r1
    const double real_output_multiplier =
 801081c:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8010820:	f7f0 f834 	bl	800088c <__aeabi_ddiv>
 8010824:	4602      	mov	r2, r0
 8010826:	460b      	mov	r3, r1
 8010828:	e9c7 2306 	strd	r2, r3, [r7, #24]

    QuantizeMultiplierSmallerThanOneExp(
 801082c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801082e:	f103 0214 	add.w	r2, r3, #20
 8010832:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010834:	3304      	adds	r3, #4
 8010836:	4619      	mov	r1, r3
 8010838:	4610      	mov	r0, r2
 801083a:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 801083e:	f7fd ff77 	bl	800e730 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
 8010842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010844:	f103 0218 	add.w	r2, r3, #24
 8010848:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801084a:	3308      	adds	r3, #8
 801084c:	4619      	mov	r1, r3
 801084e:	4610      	mov	r0, r2
 8010850:	ed97 0b08 	vldr	d0, [r7, #32]
 8010854:	f7fd ff6c 	bl	800e730 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
 8010858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085a:	f103 021c 	add.w	r2, r3, #28
 801085e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010860:	3320      	adds	r3, #32
 8010862:	4619      	mov	r1, r3
 8010864:	4610      	mov	r0, r2
 8010866:	ed97 0b06 	vldr	d0, [r7, #24]
 801086a:	f7fd ff61 	bl	800e730 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 801086e:	68bb      	ldr	r3, [r7, #8]
 8010870:	7819      	ldrb	r1, [r3, #0]
 8010872:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010874:	f103 020c 	add.w	r2, r3, #12
 8010878:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801087a:	3310      	adds	r3, #16
 801087c:	9300      	str	r3, [sp, #0]
 801087e:	4613      	mov	r3, r2
 8010880:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f7fe fc7a 	bl	800f17c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8010888:	4603      	mov	r3, r0
 801088a:	75fb      	strb	r3, [r7, #23]
 801088c:	7dfb      	ldrb	r3, [r7, #23]
 801088e:	2b00      	cmp	r3, #0
 8010890:	d001      	beq.n	8010896 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x15e>
 8010892:	7dfb      	ldrb	r3, [r7, #23]
 8010894:	e000      	b.n	8010898 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x160>
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
 8010896:	2300      	movs	r3, #0
}
 8010898:	4618      	mov	r0, r3
 801089a:	3738      	adds	r7, #56	; 0x38
 801089c:	46bd      	mov	sp, r7
 801089e:	bdb0      	pop	{r4, r5, r7, pc}

080108a0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:

void EvalAdd(TfLiteContext* context, TfLiteNode* node, TfLiteAddParams* params,
             const OpData* data, const TfLiteTensor* input1,
             const TfLiteTensor* input2, TfLiteTensor* output) {
 80108a0:	b5b0      	push	{r4, r5, r7, lr}
 80108a2:	b0c2      	sub	sp, #264	; 0x108
 80108a4:	af04      	add	r7, sp, #16
 80108a6:	60f8      	str	r0, [r7, #12]
 80108a8:	60b9      	str	r1, [r7, #8]
 80108aa:	607a      	str	r2, [r7, #4]
 80108ac:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 80108ae:	687b      	ldr	r3, [r7, #4]
 80108b0:	781b      	ldrb	r3, [r3, #0]
 80108b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80108b6:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80108ba:	4618      	mov	r0, r3
 80108bc:	f000 fba8 	bl	8011010 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::ArithmeticParams op_params;
  SetActivationParams(output_activation_min, output_activation_max, &op_params);
 80108c0:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80108c4:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80108c8:	f107 0310 	add.w	r3, r7, #16
 80108cc:	4618      	mov	r0, r3
 80108ce:	eef0 0a47 	vmov.f32	s1, s14
 80108d2:	eeb0 0a67 	vmov.f32	s0, s15
 80108d6:	f000 fbdd 	bl	8011094 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>
#define TF_LITE_ADD(opname)                                                   \
  reference_ops::opname(op_params, GetTensorShape(input1),                    \
                        GetTensorData<float>(input1), GetTensorShape(input2), \
                        GetTensorData<float>(input2), GetTensorShape(output), \
                        GetTensorData<float>(output))
  if (data->requires_broadcast) {
 80108da:	683b      	ldr	r3, [r7, #0]
 80108dc:	781b      	ldrb	r3, [r3, #0]
 80108de:	2b00      	cmp	r3, #0
 80108e0:	d042      	beq.n	8010968 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xc8>
    TF_LITE_ADD(BroadcastAdd4DSlow);
 80108e2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80108e6:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fe fe31 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80108f0:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80108f4:	f7fe fe4b 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80108f8:	4605      	mov	r5, r0
 80108fa:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80108fe:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe fe25 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010908:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801090c:	f7fe fe3f 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8010910:	4604      	mov	r4, r0
 8010912:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010916:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 801091a:	4618      	mov	r0, r3
 801091c:	f7fe fe19 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010920:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8010924:	f7fe fe44 	bl	800f5b0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8010928:	4603      	mov	r3, r0
 801092a:	f107 0280 	add.w	r2, r7, #128	; 0x80
 801092e:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8010932:	f107 0010 	add.w	r0, r7, #16
 8010936:	9302      	str	r3, [sp, #8]
 8010938:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801093c:	9301      	str	r3, [sp, #4]
 801093e:	9400      	str	r4, [sp, #0]
 8010940:	4613      	mov	r3, r2
 8010942:	462a      	mov	r2, r5
 8010944:	f7ff f9c8 	bl	800fcd8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
 8010948:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801094c:	4618      	mov	r0, r3
 801094e:	f7fe fd2b 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010952:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8010956:	4618      	mov	r0, r3
 8010958:	f7fe fd26 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 801095c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010960:	4618      	mov	r0, r3
 8010962:	f7fe fd21 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    TF_LITE_ADD(Add);
  }
#undef TF_LITE_ADD
}
 8010966:	e041      	b.n	80109ec <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x14c>
    TF_LITE_ADD(Add);
 8010968:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801096c:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8010970:	4618      	mov	r0, r3
 8010972:	f7fe fdee 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010976:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 801097a:	f7fe fe08 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801097e:	4605      	mov	r5, r0
 8010980:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8010984:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8010988:	4618      	mov	r0, r3
 801098a:	f7fe fde2 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801098e:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 8010992:	f7fe fdfc 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8010996:	4604      	mov	r4, r0
 8010998:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 801099c:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 80109a0:	4618      	mov	r0, r3
 80109a2:	f7fe fdd6 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80109a6:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 80109aa:	f7fe fe01 	bl	800f5b0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 80109ae:	4603      	mov	r3, r0
 80109b0:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 80109b4:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80109b8:	f107 0010 	add.w	r0, r7, #16
 80109bc:	9302      	str	r3, [sp, #8]
 80109be:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80109c2:	9301      	str	r3, [sp, #4]
 80109c4:	9400      	str	r4, [sp, #0]
 80109c6:	4613      	mov	r3, r2
 80109c8:	462a      	mov	r2, r5
 80109ca:	f7ff f882 	bl	800fad2 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
 80109ce:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80109d2:	4618      	mov	r0, r3
 80109d4:	f7fe fce8 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 80109d8:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80109dc:	4618      	mov	r0, r3
 80109de:	f7fe fce3 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 80109e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80109e6:	4618      	mov	r0, r3
 80109e8:	f7fe fcde 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80109ec:	bf00      	nop
 80109ee:	37f8      	adds	r7, #248	; 0xf8
 80109f0:	46bd      	mov	sp, r7
 80109f2:	bdb0      	pop	{r4, r5, r7, pc}

080109f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:

TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
                              TfLiteAddParams* params, const OpData* data,
                              const TfLiteTensor* input1,
                              const TfLiteTensor* input2,
                              TfLiteTensor* output) {
 80109f4:	b5b0      	push	{r4, r5, r7, lr}
 80109f6:	b0f2      	sub	sp, #456	; 0x1c8
 80109f8:	af04      	add	r7, sp, #16
 80109fa:	f107 040c 	add.w	r4, r7, #12
 80109fe:	6020      	str	r0, [r4, #0]
 8010a00:	f107 0008 	add.w	r0, r7, #8
 8010a04:	6001      	str	r1, [r0, #0]
 8010a06:	1d39      	adds	r1, r7, #4
 8010a08:	600a      	str	r2, [r1, #0]
 8010a0a:	463a      	mov	r2, r7
 8010a0c:	6013      	str	r3, [r2, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 8010a0e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010a12:	781b      	ldrb	r3, [r3, #0]
 8010a14:	2b03      	cmp	r3, #3
 8010a16:	d005      	beq.n	8010a24 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x30>
 8010a18:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010a1c:	781b      	ldrb	r3, [r3, #0]
 8010a1e:	2b09      	cmp	r3, #9
 8010a20:	f040 8184 	bne.w	8010d2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x338>
    tflite::ArithmeticParams op_params;
    op_params.left_shift = data->left_shift;
 8010a24:	463b      	mov	r3, r7
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a2a:	f107 0314 	add.w	r3, r7, #20
 8010a2e:	619a      	str	r2, [r3, #24]
    op_params.input1_offset = data->input1_offset;
 8010a30:	463b      	mov	r3, r7
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a36:	f107 0314 	add.w	r3, r7, #20
 8010a3a:	605a      	str	r2, [r3, #4]
    op_params.input1_multiplier = data->input1_multiplier;
 8010a3c:	463b      	mov	r3, r7
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	695a      	ldr	r2, [r3, #20]
 8010a42:	f107 0314 	add.w	r3, r7, #20
 8010a46:	61da      	str	r2, [r3, #28]
    op_params.input1_shift = data->input1_shift;
 8010a48:	463b      	mov	r3, r7
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	685a      	ldr	r2, [r3, #4]
 8010a4e:	f107 0314 	add.w	r3, r7, #20
 8010a52:	621a      	str	r2, [r3, #32]
    op_params.input2_offset = data->input2_offset;
 8010a54:	463b      	mov	r3, r7
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a5a:	f107 0314 	add.w	r3, r7, #20
 8010a5e:	609a      	str	r2, [r3, #8]
    op_params.input2_multiplier = data->input2_multiplier;
 8010a60:	463b      	mov	r3, r7
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	699a      	ldr	r2, [r3, #24]
 8010a66:	f107 0314 	add.w	r3, r7, #20
 8010a6a:	625a      	str	r2, [r3, #36]	; 0x24
    op_params.input2_shift = data->input2_shift;
 8010a6c:	463b      	mov	r3, r7
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	689a      	ldr	r2, [r3, #8]
 8010a72:	f107 0314 	add.w	r3, r7, #20
 8010a76:	629a      	str	r2, [r3, #40]	; 0x28
    op_params.output_offset = data->output_offset;
 8010a78:	463b      	mov	r3, r7
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a7e:	f107 0314 	add.w	r3, r7, #20
 8010a82:	60da      	str	r2, [r3, #12]
    op_params.output_multiplier = data->output_multiplier;
 8010a84:	463b      	mov	r3, r7
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	69da      	ldr	r2, [r3, #28]
 8010a8a:	f107 0314 	add.w	r3, r7, #20
 8010a8e:	611a      	str	r2, [r3, #16]
    op_params.output_shift = data->output_shift;
 8010a90:	463b      	mov	r3, r7
 8010a92:	681b      	ldr	r3, [r3, #0]
 8010a94:	6a1a      	ldr	r2, [r3, #32]
 8010a96:	f107 0314 	add.w	r3, r7, #20
 8010a9a:	615a      	str	r2, [r3, #20]
    SetActivationParams(data->output_activation_min,
 8010a9c:	463b      	mov	r3, r7
 8010a9e:	681b      	ldr	r3, [r3, #0]
 8010aa0:	68d8      	ldr	r0, [r3, #12]
                        data->output_activation_max, &op_params);
 8010aa2:	463b      	mov	r3, r7
 8010aa4:	681b      	ldr	r3, [r3, #0]
 8010aa6:	691b      	ldr	r3, [r3, #16]
    SetActivationParams(data->output_activation_min,
 8010aa8:	f107 0214 	add.w	r2, r7, #20
 8010aac:	4619      	mov	r1, r3
 8010aae:	f000 fb05 	bl	80110bc <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
 8010ab2:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010ab6:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010aba:	4618      	mov	r0, r3
 8010abc:	f7fe fd49 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010ac0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010ac4:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010ac8:	4618      	mov	r0, r3
 8010aca:	f7fe fd42 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
 8010ace:	f107 0214 	add.w	r2, r7, #20
 8010ad2:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010ad6:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010ada:	4618      	mov	r0, r3
 8010adc:	f7ff fca8 	bl	8010430 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
 8010ae0:	4603      	mov	r3, r0
 8010ae2:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
 8010ae6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010aea:	4618      	mov	r0, r3
 8010aec:	f7fe fc5c 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010af0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010af4:	4618      	mov	r0, r3
 8010af6:	f7fe fc57 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
#define TF_LITE_ADD(type, opname, dtype)                             \
  type::opname(op_params, GetTensorShape(input1),                    \
               GetTensorData<dtype>(input1), GetTensorShape(input2), \
               GetTensorData<dtype>(input2), GetTensorShape(output), \
               GetTensorData<dtype>(output));
    if (output->type == kTfLiteInt8) {
 8010afa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	2b09      	cmp	r3, #9
 8010b02:	f040 808a 	bne.w	8010c1a <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x226>
      if (need_broadcast) {
 8010b06:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8010b0a:	2b00      	cmp	r3, #0
 8010b0c:	d042      	beq.n	8010b94 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1a0>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
 8010b0e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010b12:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fe fd1b 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010b1c:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8010b20:	f7fe fd57 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010b24:	4605      	mov	r5, r0
 8010b26:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010b2a:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe fd0f 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010b34:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8010b38:	f7fe fd4b 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010b3c:	4604      	mov	r4, r0
 8010b3e:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010b42:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8010b46:	4618      	mov	r0, r3
 8010b48:	f7fe fd03 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010b4c:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8010b50:	f7fe fd50 	bl	800f5f4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8010b54:	4603      	mov	r3, r0
 8010b56:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8010b5a:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8010b5e:	f107 0014 	add.w	r0, r7, #20
 8010b62:	9302      	str	r3, [sp, #8]
 8010b64:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010b68:	9301      	str	r3, [sp, #4]
 8010b6a:	9400      	str	r4, [sp, #0]
 8010b6c:	4613      	mov	r3, r2
 8010b6e:	462a      	mov	r2, r5
 8010b70:	f7ff fb48 	bl	8010204 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
 8010b74:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010b78:	4618      	mov	r0, r3
 8010b7a:	f7fe fc15 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010b7e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010b82:	4618      	mov	r0, r3
 8010b84:	f7fe fc10 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010b88:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010b8c:	4618      	mov	r0, r3
 8010b8e:	f7fe fc0b 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010b92:	e0cb      	b.n	8010d2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x338>
      } else {
        TF_LITE_ADD(reference_integer_ops, Add, int8_t);
 8010b94:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010b98:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fe fcd8 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010ba2:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8010ba6:	f7fe fd14 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010baa:	4605      	mov	r5, r0
 8010bac:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8010bb0:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fe fccc 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010bba:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8010bbe:	f7fe fd08 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010bc2:	4604      	mov	r4, r0
 8010bc4:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010bc8:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fe fcc0 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010bd2:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8010bd6:	f7fe fd0d 	bl	800f5f4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8010bda:	4603      	mov	r3, r0
 8010bdc:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8010be0:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8010be4:	f107 0014 	add.w	r0, r7, #20
 8010be8:	9302      	str	r3, [sp, #8]
 8010bea:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010bee:	9301      	str	r3, [sp, #4]
 8010bf0:	9400      	str	r4, [sp, #0]
 8010bf2:	4613      	mov	r3, r2
 8010bf4:	462a      	mov	r2, r5
 8010bf6:	f7ff fac8 	bl	801018a <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
 8010bfa:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010bfe:	4618      	mov	r0, r3
 8010c00:	f7fe fbd2 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c04:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8010c08:	4618      	mov	r0, r3
 8010c0a:	f7fe fbcd 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fe fbc8 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c18:	e088      	b.n	8010d2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x338>
      }
    } else {
      if (need_broadcast) {
 8010c1a:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8010c1e:	2b00      	cmp	r3, #0
 8010c20:	d042      	beq.n	8010ca8 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x2b4>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
 8010c22:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8010c26:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fe fc91 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c30:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8010c34:	f7fe fb75 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010c38:	4605      	mov	r5, r0
 8010c3a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8010c3e:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fe fc85 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c48:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8010c4c:	f7fe fb69 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010c50:	4604      	mov	r4, r0
 8010c52:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8010c56:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8010c5a:	4618      	mov	r0, r3
 8010c5c:	f7fe fc79 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c60:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8010c64:	f7fe fb6e 	bl	800f344 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8010c68:	4603      	mov	r3, r0
 8010c6a:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8010c6e:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8010c72:	f107 0014 	add.w	r0, r7, #20
 8010c76:	9302      	str	r3, [sp, #8]
 8010c78:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8010c7c:	9301      	str	r3, [sp, #4]
 8010c7e:	9400      	str	r4, [sp, #0]
 8010c80:	4613      	mov	r3, r2
 8010c82:	462a      	mov	r2, r5
 8010c84:	f7ff f8e2 	bl	800fe4c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 8010c88:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8010c8c:	4618      	mov	r0, r3
 8010c8e:	f7fe fb8b 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c92:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fe fb86 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c9c:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8010ca0:	4618      	mov	r0, r3
 8010ca2:	f7fe fb81 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010ca6:	e041      	b.n	8010d2c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x338>
      } else {
        TF_LITE_ADD(reference_ops, Add, uint8_t);
 8010ca8:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8010cac:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7fe fc4e 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010cb6:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8010cba:	f7fe fb32 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010cbe:	4605      	mov	r5, r0
 8010cc0:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010cc4:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fe fc42 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010cce:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8010cd2:	f7fe fb26 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010cd6:	4604      	mov	r4, r0
 8010cd8:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8010cdc:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8010ce0:	4618      	mov	r0, r3
 8010ce2:	f7fe fc36 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010ce6:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8010cea:	f7fe fb2b 	bl	800f344 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8010cee:	4603      	mov	r3, r0
 8010cf0:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8010cf4:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8010cf8:	f107 0014 	add.w	r0, r7, #20
 8010cfc:	9302      	str	r3, [sp, #8]
 8010cfe:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8010d02:	9301      	str	r3, [sp, #4]
 8010d04:	9400      	str	r4, [sp, #0]
 8010d06:	4613      	mov	r3, r2
 8010d08:	462a      	mov	r2, r5
 8010d0a:	f7fe ffaa 	bl	800fc62 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 8010d0e:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8010d12:	4618      	mov	r0, r3
 8010d14:	f7fe fb48 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010d18:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010d1c:	4618      	mov	r0, r3
 8010d1e:	f7fe fb43 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8010d22:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8010d26:	4618      	mov	r0, r3
 8010d28:	f7fe fb3e 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      }
    }
#undef TF_LITE_ADD
  }

  return kTfLiteOk;
 8010d2c:	2300      	movs	r3, #0
}
 8010d2e:	4618      	mov	r0, r3
 8010d30:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8010d34:	46bd      	mov	sp, r7
 8010d36:	bdb0      	pop	{r4, r5, r7, pc}

08010d38 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010d38:	b590      	push	{r4, r7, lr}
 8010d3a:	b099      	sub	sp, #100	; 0x64
 8010d3c:	af04      	add	r7, sp, #16
 8010d3e:	6078      	str	r0, [r7, #4]
 8010d40:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
 8010d42:	683b      	ldr	r3, [r7, #0]
 8010d44:	695b      	ldr	r3, [r3, #20]
 8010d46:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
 8010d48:	2200      	movs	r2, #0
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f7fe fabc 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010d52:	64b8      	str	r0, [r7, #72]	; 0x48
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
 8010d54:	2201      	movs	r2, #1
 8010d56:	6839      	ldr	r1, [r7, #0]
 8010d58:	6878      	ldr	r0, [r7, #4]
 8010d5a:	f7fe fab6 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010d5e:	6478      	str	r0, [r7, #68]	; 0x44
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8010d60:	2200      	movs	r2, #0
 8010d62:	6839      	ldr	r1, [r7, #0]
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7fe fac6 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010d6a:	6438      	str	r0, [r7, #64]	; 0x40

  OpData data;
  TF_LITE_ENSURE_STATUS(
 8010d6c:	f107 0308 	add.w	r3, r7, #8
 8010d70:	9301      	str	r3, [sp, #4]
 8010d72:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d74:	9300      	str	r3, [sp, #0]
 8010d76:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d78:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d7a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010d7c:	6878      	ldr	r0, [r7, #4]
 8010d7e:	f7ff fcdb 	bl	8010738 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
 8010d82:	4603      	mov	r3, r0
 8010d84:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d8c:	2b00      	cmp	r3, #0
 8010d8e:	d002      	beq.n	8010d96 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x5e>
 8010d90:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d94:	e043      	b.n	8010e1e <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
      CalculateOpData(context, params, input1, input2, output, &data));

  if (output->type == kTfLiteFloat32) {
 8010d96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d98:	781b      	ldrb	r3, [r3, #0]
 8010d9a:	2b01      	cmp	r3, #1
 8010d9c:	d10e      	bne.n	8010dbc <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x84>
    EvalAdd(context, node, params, &data, input1, input2, output);
 8010d9e:	f107 0208 	add.w	r2, r7, #8
 8010da2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010da4:	9302      	str	r3, [sp, #8]
 8010da6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010da8:	9301      	str	r3, [sp, #4]
 8010daa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dac:	9300      	str	r3, [sp, #0]
 8010dae:	4613      	mov	r3, r2
 8010db0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010db2:	6839      	ldr	r1, [r7, #0]
 8010db4:	6878      	ldr	r0, [r7, #4]
 8010db6:	f7ff fd73 	bl	80108a0 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
 8010dba:	e02f      	b.n	8010e1c <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe4>
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 8010dbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dbe:	781b      	ldrb	r3, [r3, #0]
 8010dc0:	2b03      	cmp	r3, #3
 8010dc2:	d003      	beq.n	8010dcc <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x94>
 8010dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dc6:	781b      	ldrb	r3, [r3, #0]
 8010dc8:	2b09      	cmp	r3, #9
 8010dca:	d117      	bne.n	8010dfc <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, &data,
 8010dcc:	f107 0208 	add.w	r2, r7, #8
 8010dd0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dd2:	9302      	str	r3, [sp, #8]
 8010dd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dd6:	9301      	str	r3, [sp, #4]
 8010dd8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dda:	9300      	str	r3, [sp, #0]
 8010ddc:	4613      	mov	r3, r2
 8010dde:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010de0:	6839      	ldr	r1, [r7, #0]
 8010de2:	6878      	ldr	r0, [r7, #4]
 8010de4:	f7ff fe06 	bl	80109f4 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
 8010de8:	4603      	mov	r3, r0
 8010dea:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010dee:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d011      	beq.n	8010e1a <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe2>
 8010df6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010dfa:	e010      	b.n	8010e1e <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
                                                input1, input2, output));
  } else {
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8010dfc:	687b      	ldr	r3, [r7, #4]
 8010dfe:	695c      	ldr	r4, [r3, #20]
 8010e00:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e02:	781b      	ldrb	r3, [r3, #0]
 8010e04:	4618      	mov	r0, r3
 8010e06:	f7fd fb7b 	bl	800e500 <TfLiteTypeGetName>
 8010e0a:	4602      	mov	r2, r0
 8010e0c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010e0e:	781b      	ldrb	r3, [r3, #0]
 8010e10:	4905      	ldr	r1, [pc, #20]	; (8010e28 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 8010e12:	6878      	ldr	r0, [r7, #4]
 8010e14:	47a0      	blx	r4
                       TfLiteTypeGetName(output->type), output->type);
    return kTfLiteError;
 8010e16:	2301      	movs	r3, #1
 8010e18:	e001      	b.n	8010e1e <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
                                                input1, input2, output));
 8010e1a:	bf00      	nop
  }

  return kTfLiteOk;
 8010e1c:	2300      	movs	r3, #0
}
 8010e1e:	4618      	mov	r0, r3
 8010e20:	3754      	adds	r7, #84	; 0x54
 8010e22:	46bd      	mov	sp, r7
 8010e24:	bd90      	pop	{r4, r7, pc}
 8010e26:	bf00      	nop
 8010e28:	0801e404 	.word	0x0801e404

08010e2c <_ZN6tflite3ops5micro12Register_ADDEv>:

}  // namespace add

TfLiteRegistration* Register_ADD() {
 8010e2c:	b480      	push	{r7}
 8010e2e:	af00      	add	r7, sp, #0
                                 /*invoke=*/add::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8010e30:	4b02      	ldr	r3, [pc, #8]	; (8010e3c <_ZN6tflite3ops5micro12Register_ADDEv+0x10>)
}
 8010e32:	4618      	mov	r0, r3
 8010e34:	46bd      	mov	sp, r7
 8010e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e3a:	4770      	bx	lr
 8010e3c:	20000064 	.word	0x20000064

08010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8010e40:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e42:	b089      	sub	sp, #36	; 0x24
 8010e44:	af00      	add	r7, sp, #0
 8010e46:	6078      	str	r0, [r7, #4]
 8010e48:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8010e4a:	6839      	ldr	r1, [r7, #0]
 8010e4c:	2900      	cmp	r1, #0
 8010e4e:	da06      	bge.n	8010e5e <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8010e50:	4b31      	ldr	r3, [pc, #196]	; (8010f18 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8010e52:	4a32      	ldr	r2, [pc, #200]	; (8010f1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8010e54:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8010e58:	4831      	ldr	r0, [pc, #196]	; (8010f20 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8010e5a:	f00a f8bd 	bl	801afd8 <__assert_func>
  assert(exponent <= 31);
 8010e5e:	6839      	ldr	r1, [r7, #0]
 8010e60:	291f      	cmp	r1, #31
 8010e62:	dd06      	ble.n	8010e72 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8010e64:	4b2f      	ldr	r3, [pc, #188]	; (8010f24 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8010e66:	4a2d      	ldr	r2, [pc, #180]	; (8010f1c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8010e68:	f240 1167 	movw	r1, #359	; 0x167
 8010e6c:	482c      	ldr	r0, [pc, #176]	; (8010f20 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8010e6e:	f00a f8b3 	bl	801afd8 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8010e72:	f04f 0001 	mov.w	r0, #1
 8010e76:	f04f 0100 	mov.w	r1, #0
 8010e7a:	683c      	ldr	r4, [r7, #0]
 8010e7c:	f1a4 0620 	sub.w	r6, r4, #32
 8010e80:	f1c4 0520 	rsb	r5, r4, #32
 8010e84:	fa01 f304 	lsl.w	r3, r1, r4
 8010e88:	fa00 f606 	lsl.w	r6, r0, r6
 8010e8c:	4333      	orrs	r3, r6
 8010e8e:	fa20 f505 	lsr.w	r5, r0, r5
 8010e92:	432b      	orrs	r3, r5
 8010e94:	fa00 f204 	lsl.w	r2, r0, r4
 8010e98:	4613      	mov	r3, r2
 8010e9a:	3b01      	subs	r3, #1
 8010e9c:	4618      	mov	r0, r3
 8010e9e:	f000 f91f 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010ea2:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8010ea4:	2000      	movs	r0, #0
 8010ea6:	f000 f91b 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010eaa:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8010eac:	2001      	movs	r0, #1
 8010eae:	f000 f917 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010eb2:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8010eb4:	69f9      	ldr	r1, [r7, #28]
 8010eb6:	6878      	ldr	r0, [r7, #4]
 8010eb8:	f000 f91d 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010ebc:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8010ebe:	2101      	movs	r1, #1
 8010ec0:	69f8      	ldr	r0, [r7, #28]
 8010ec2:	f000 f926 	bl	8011112 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8010ec6:	4604      	mov	r4, r0
 8010ec8:	69b9      	ldr	r1, [r7, #24]
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f000 f930 	bl	8011130 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8010ed0:	4603      	mov	r3, r0
 8010ed2:	6979      	ldr	r1, [r7, #20]
 8010ed4:	4618      	mov	r0, r3
 8010ed6:	f000 f90e 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010eda:	4603      	mov	r3, r0
 8010edc:	4619      	mov	r1, r3
 8010ede:	4620      	mov	r0, r4
 8010ee0:	f000 f93a 	bl	8011158 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8010ee4:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8010ee6:	6839      	ldr	r1, [r7, #0]
 8010ee8:	6878      	ldr	r0, [r7, #4]
 8010eea:	f000 f912 	bl	8011112 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8010eee:	4604      	mov	r4, r0
 8010ef0:	68f9      	ldr	r1, [r7, #12]
 8010ef2:	6938      	ldr	r0, [r7, #16]
 8010ef4:	f000 f93e 	bl	8011174 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8010ef8:	4603      	mov	r3, r0
 8010efa:	6979      	ldr	r1, [r7, #20]
 8010efc:	4618      	mov	r0, r3
 8010efe:	f000 f8fa 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010f02:	4603      	mov	r3, r0
 8010f04:	4619      	mov	r1, r3
 8010f06:	4620      	mov	r0, r4
 8010f08:	f000 f926 	bl	8011158 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8010f0c:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8010f0e:	4618      	mov	r0, r3
 8010f10:	3724      	adds	r7, #36	; 0x24
 8010f12:	46bd      	mov	sp, r7
 8010f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010f16:	bf00      	nop
 8010f18:	0801e420 	.word	0x0801e420
 8010f1c:	0801e430 	.word	0x0801e430
 8010f20:	0801e48c 	.word	0x0801e48c
 8010f24:	0801e518 	.word	0x0801e518

08010f28 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
    desc_stride *= input_shape.Dims(i);
  }
}

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
 8010f28:	b580      	push	{r7, lr}
 8010f2a:	b094      	sub	sp, #80	; 0x50
 8010f2c:	af00      	add	r7, sp, #0
 8010f2e:	60f8      	str	r0, [r7, #12]
 8010f30:	60b9      	str	r1, [r7, #8]
 8010f32:	607a      	str	r2, [r7, #4]
 8010f34:	603b      	str	r3, [r7, #0]
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
 8010f36:	687b      	ldr	r3, [r7, #4]
 8010f38:	2b00      	cmp	r3, #0
 8010f3a:	d101      	bne.n	8010f40 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x18>
 8010f3c:	f00a f844 	bl	801afc8 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
 8010f40:	683b      	ldr	r3, [r7, #0]
 8010f42:	2b00      	cmp	r3, #0
 8010f44:	d101      	bne.n	8010f4a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x22>
 8010f46:	f00a f83f 	bl	801afc8 <abort>

  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
 8010f4a:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f4e:	68fa      	ldr	r2, [r7, #12]
 8010f50:	2104      	movs	r1, #4
 8010f52:	4618      	mov	r0, r3
 8010f54:	f7fe fc6b 	bl	800f82e <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
 8010f58:	f107 0314 	add.w	r3, r7, #20
 8010f5c:	68ba      	ldr	r2, [r7, #8]
 8010f5e:	2104      	movs	r1, #4
 8010f60:	4618      	mov	r0, r3
 8010f62:	f7fe fc64 	bl	800f82e <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  // Copy dims to desc, calculating strides.
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
 8010f66:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f6a:	6879      	ldr	r1, [r7, #4]
 8010f6c:	4618      	mov	r0, r3
 8010f6e:	f000 f915 	bl	801119c <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
 8010f72:	f107 0314 	add.w	r3, r7, #20
 8010f76:	6839      	ldr	r1, [r7, #0]
 8010f78:	4618      	mov	r0, r3
 8010f7a:	f000 f90f 	bl	801119c <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
 8010f7e:	2300      	movs	r3, #0
 8010f80:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f82:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f84:	2b03      	cmp	r3, #3
 8010f86:	dc34      	bgt.n	8010ff2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xca>
    const int extent0 = extended_input0_shape.Dims(i);
 8010f88:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f8c:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010f8e:	4618      	mov	r0, r3
 8010f90:	f7fe fa2c 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f94:	64b8      	str	r0, [r7, #72]	; 0x48
    const int extent1 = extended_input1_shape.Dims(i);
 8010f96:	f107 0314 	add.w	r3, r7, #20
 8010f9a:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010f9c:	4618      	mov	r0, r3
 8010f9e:	f7fe fa25 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8010fa2:	6478      	str	r0, [r7, #68]	; 0x44
    if (extent0 != extent1) {
 8010fa4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010fa6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fa8:	429a      	cmp	r2, r3
 8010faa:	d01e      	beq.n	8010fea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc2>
      if (extent0 == 1) {
 8010fac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010fae:	2b01      	cmp	r3, #1
 8010fb0:	d10b      	bne.n	8010fca <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xa2>
        desc0_out->strides[i] = 0;
 8010fb2:	687b      	ldr	r3, [r7, #4]
 8010fb4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fb6:	3204      	adds	r2, #4
 8010fb8:	2100      	movs	r1, #0
 8010fba:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        desc0_out->extents[i] = extent1;
 8010fbe:	687b      	ldr	r3, [r7, #4]
 8010fc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fc2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010fc8:	e00f      	b.n	8010fea <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc2>
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
 8010fca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fcc:	2b01      	cmp	r3, #1
 8010fce:	d001      	beq.n	8010fd4 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xac>
 8010fd0:	f009 fffa 	bl	801afc8 <abort>
        desc1_out->strides[i] = 0;
 8010fd4:	683b      	ldr	r3, [r7, #0]
 8010fd6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fd8:	3204      	adds	r2, #4
 8010fda:	2100      	movs	r1, #0
 8010fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        desc1_out->extents[i] = extent0;
 8010fe0:	683b      	ldr	r3, [r7, #0]
 8010fe2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fe4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010fe6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < N; ++i) {
 8010fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fec:	3301      	adds	r3, #1
 8010fee:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ff0:	e7c7      	b.n	8010f82 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x5a>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
 8010ff2:	f107 0314 	add.w	r3, r7, #20
 8010ff6:	4618      	mov	r0, r3
 8010ff8:	f7fe f9d6 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
 8010ffc:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8011000:	4618      	mov	r0, r3
 8011002:	f7fe f9d1 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      }
    }
  }
}
 8011006:	bf00      	nop
 8011008:	3750      	adds	r7, #80	; 0x50
 801100a:	46bd      	mov	sp, r7
 801100c:	bd80      	pop	{r7, pc}
	...

08011010 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8011010:	b580      	push	{r7, lr}
 8011012:	b084      	sub	sp, #16
 8011014:	af00      	add	r7, sp, #0
 8011016:	4603      	mov	r3, r0
 8011018:	60b9      	str	r1, [r7, #8]
 801101a:	607a      	str	r2, [r7, #4]
 801101c:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 801101e:	7bfb      	ldrb	r3, [r7, #15]
 8011020:	2b01      	cmp	r3, #1
 8011022:	d10b      	bne.n	801103c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 8011024:	68bb      	ldr	r3, [r7, #8]
 8011026:	f04f 0200 	mov.w	r2, #0
 801102a:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 801102c:	f7fe fafc 	bl	800f628 <_ZNSt14numeric_limitsIfE3maxEv>
 8011030:	eef0 7a40 	vmov.f32	s15, s0
 8011034:	687b      	ldr	r3, [r7, #4]
 8011036:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 801103a:	e023      	b.n	8011084 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 801103c:	7bfb      	ldrb	r3, [r7, #15]
 801103e:	2b03      	cmp	r3, #3
 8011040:	d107      	bne.n	8011052 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 8011042:	68bb      	ldr	r3, [r7, #8]
 8011044:	f04f 0200 	mov.w	r2, #0
 8011048:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 801104a:	687b      	ldr	r3, [r7, #4]
 801104c:	4a0f      	ldr	r2, [pc, #60]	; (801108c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 801104e:	601a      	str	r2, [r3, #0]
}
 8011050:	e018      	b.n	8011084 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 8011052:	7bfb      	ldrb	r3, [r7, #15]
 8011054:	2b02      	cmp	r3, #2
 8011056:	d107      	bne.n	8011068 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	4a0d      	ldr	r2, [pc, #52]	; (8011090 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 801105c:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 801105e:	687b      	ldr	r3, [r7, #4]
 8011060:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8011064:	601a      	str	r2, [r3, #0]
}
 8011066:	e00d      	b.n	8011084 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8011068:	f7fe faec 	bl	800f644 <_ZNSt14numeric_limitsIfE6lowestEv>
 801106c:	eef0 7a40 	vmov.f32	s15, s0
 8011070:	68bb      	ldr	r3, [r7, #8]
 8011072:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 8011076:	f7fe fad7 	bl	800f628 <_ZNSt14numeric_limitsIfE3maxEv>
 801107a:	eef0 7a40 	vmov.f32	s15, s0
 801107e:	687b      	ldr	r3, [r7, #4]
 8011080:	edc3 7a00 	vstr	s15, [r3]
}
 8011084:	bf00      	nop
 8011086:	3710      	adds	r7, #16
 8011088:	46bd      	mov	sp, r7
 801108a:	bd80      	pop	{r7, pc}
 801108c:	40c00000 	.word	0x40c00000
 8011090:	bf800000 	.word	0xbf800000

08011094 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>:
  int32 output_multiplier_identity;
  int32 output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
 8011094:	b480      	push	{r7}
 8011096:	b085      	sub	sp, #20
 8011098:	af00      	add	r7, sp, #0
 801109a:	ed87 0a03 	vstr	s0, [r7, #12]
 801109e:	edc7 0a02 	vstr	s1, [r7, #8]
 80110a2:	6078      	str	r0, [r7, #4]
  params->float_activation_min = min;
 80110a4:	687b      	ldr	r3, [r7, #4]
 80110a6:	68fa      	ldr	r2, [r7, #12]
 80110a8:	635a      	str	r2, [r3, #52]	; 0x34
  params->float_activation_max = max;
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	68ba      	ldr	r2, [r7, #8]
 80110ae:	639a      	str	r2, [r3, #56]	; 0x38
}
 80110b0:	bf00      	nop
 80110b2:	3714      	adds	r7, #20
 80110b4:	46bd      	mov	sp, r7
 80110b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110ba:	4770      	bx	lr

080110bc <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>:

template <typename P>
inline void SetActivationParams(int32 min, int32 max, P* params) {
 80110bc:	b480      	push	{r7}
 80110be:	b085      	sub	sp, #20
 80110c0:	af00      	add	r7, sp, #0
 80110c2:	60f8      	str	r0, [r7, #12]
 80110c4:	60b9      	str	r1, [r7, #8]
 80110c6:	607a      	str	r2, [r7, #4]
  params->quantized_activation_min = min;
 80110c8:	687b      	ldr	r3, [r7, #4]
 80110ca:	68fa      	ldr	r2, [r7, #12]
 80110cc:	62da      	str	r2, [r3, #44]	; 0x2c
  params->quantized_activation_max = max;
 80110ce:	687b      	ldr	r3, [r7, #4]
 80110d0:	68ba      	ldr	r2, [r7, #8]
 80110d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80110d4:	bf00      	nop
 80110d6:	3714      	adds	r7, #20
 80110d8:	46bd      	mov	sp, r7
 80110da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110de:	4770      	bx	lr

080110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 80110e0:	b480      	push	{r7}
 80110e2:	b083      	sub	sp, #12
 80110e4:	af00      	add	r7, sp, #0
 80110e6:	6078      	str	r0, [r7, #4]
  return x;
 80110e8:	687b      	ldr	r3, [r7, #4]
}
 80110ea:	4618      	mov	r0, r3
 80110ec:	370c      	adds	r7, #12
 80110ee:	46bd      	mov	sp, r7
 80110f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f4:	4770      	bx	lr

080110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 80110f6:	b480      	push	{r7}
 80110f8:	b083      	sub	sp, #12
 80110fa:	af00      	add	r7, sp, #0
 80110fc:	6078      	str	r0, [r7, #4]
 80110fe:	6039      	str	r1, [r7, #0]
  return a & b;
 8011100:	687a      	ldr	r2, [r7, #4]
 8011102:	683b      	ldr	r3, [r7, #0]
 8011104:	4013      	ands	r3, r2
}
 8011106:	4618      	mov	r0, r3
 8011108:	370c      	adds	r7, #12
 801110a:	46bd      	mov	sp, r7
 801110c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011110:	4770      	bx	lr

08011112 <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 8011112:	b480      	push	{r7}
 8011114:	b083      	sub	sp, #12
 8011116:	af00      	add	r7, sp, #0
 8011118:	6078      	str	r0, [r7, #4]
 801111a:	6039      	str	r1, [r7, #0]
  return a >> offset;
 801111c:	687a      	ldr	r2, [r7, #4]
 801111e:	683b      	ldr	r3, [r7, #0]
 8011120:	fa42 f303 	asr.w	r3, r2, r3
}
 8011124:	4618      	mov	r0, r3
 8011126:	370c      	adds	r7, #12
 8011128:	46bd      	mov	sp, r7
 801112a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801112e:	4770      	bx	lr

08011130 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8011130:	b580      	push	{r7, lr}
 8011132:	b082      	sub	sp, #8
 8011134:	af00      	add	r7, sp, #0
 8011136:	6078      	str	r0, [r7, #4]
 8011138:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 801113a:	687a      	ldr	r2, [r7, #4]
 801113c:	683b      	ldr	r3, [r7, #0]
 801113e:	429a      	cmp	r2, r3
 8011140:	bfb4      	ite	lt
 8011142:	2301      	movlt	r3, #1
 8011144:	2300      	movge	r3, #0
 8011146:	b2db      	uxtb	r3, r3
 8011148:	4618      	mov	r0, r3
 801114a:	f000 f853 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801114e:	4603      	mov	r3, r0
}
 8011150:	4618      	mov	r0, r3
 8011152:	3708      	adds	r7, #8
 8011154:	46bd      	mov	sp, r7
 8011156:	bd80      	pop	{r7, pc}

08011158 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8011158:	b480      	push	{r7}
 801115a:	b083      	sub	sp, #12
 801115c:	af00      	add	r7, sp, #0
 801115e:	6078      	str	r0, [r7, #4]
 8011160:	6039      	str	r1, [r7, #0]
  return a + b;
 8011162:	687a      	ldr	r2, [r7, #4]
 8011164:	683b      	ldr	r3, [r7, #0]
 8011166:	4413      	add	r3, r2
}
 8011168:	4618      	mov	r0, r3
 801116a:	370c      	adds	r7, #12
 801116c:	46bd      	mov	sp, r7
 801116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011172:	4770      	bx	lr

08011174 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 8011174:	b580      	push	{r7, lr}
 8011176:	b082      	sub	sp, #8
 8011178:	af00      	add	r7, sp, #0
 801117a:	6078      	str	r0, [r7, #4]
 801117c:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 801117e:	687a      	ldr	r2, [r7, #4]
 8011180:	683b      	ldr	r3, [r7, #0]
 8011182:	429a      	cmp	r2, r3
 8011184:	bfcc      	ite	gt
 8011186:	2301      	movgt	r3, #1
 8011188:	2300      	movle	r3, #0
 801118a:	b2db      	uxtb	r3, r3
 801118c:	4618      	mov	r0, r3
 801118e:	f000 f831 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011192:	4603      	mov	r3, r0
}
 8011194:	4618      	mov	r0, r3
 8011196:	3708      	adds	r7, #8
 8011198:	46bd      	mov	sp, r7
 801119a:	bd80      	pop	{r7, pc}

0801119c <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
 801119c:	b580      	push	{r7, lr}
 801119e:	b084      	sub	sp, #16
 80111a0:	af00      	add	r7, sp, #0
 80111a2:	6078      	str	r0, [r7, #4]
 80111a4:	6039      	str	r1, [r7, #0]
  int desc_stride = 1;
 80111a6:	2301      	movs	r3, #1
 80111a8:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 80111aa:	2303      	movs	r3, #3
 80111ac:	60bb      	str	r3, [r7, #8]
 80111ae:	68bb      	ldr	r3, [r7, #8]
 80111b0:	2b00      	cmp	r3, #0
 80111b2:	db1b      	blt.n	80111ec <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x50>
    desc_out->extents[i] = input_shape.Dims(i);
 80111b4:	68b9      	ldr	r1, [r7, #8]
 80111b6:	6878      	ldr	r0, [r7, #4]
 80111b8:	f7fe f918 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80111bc:	4601      	mov	r1, r0
 80111be:	683b      	ldr	r3, [r7, #0]
 80111c0:	68ba      	ldr	r2, [r7, #8]
 80111c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_out->strides[i] = desc_stride;
 80111c6:	683b      	ldr	r3, [r7, #0]
 80111c8:	68ba      	ldr	r2, [r7, #8]
 80111ca:	3204      	adds	r2, #4
 80111cc:	68f9      	ldr	r1, [r7, #12]
 80111ce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_stride *= input_shape.Dims(i);
 80111d2:	68b9      	ldr	r1, [r7, #8]
 80111d4:	6878      	ldr	r0, [r7, #4]
 80111d6:	f7fe f909 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80111da:	4602      	mov	r2, r0
 80111dc:	68fb      	ldr	r3, [r7, #12]
 80111de:	fb02 f303 	mul.w	r3, r2, r3
 80111e2:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 80111e4:	68bb      	ldr	r3, [r7, #8]
 80111e6:	3b01      	subs	r3, #1
 80111e8:	60bb      	str	r3, [r7, #8]
 80111ea:	e7e0      	b.n	80111ae <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x12>
}
 80111ec:	bf00      	nop
 80111ee:	3710      	adds	r7, #16
 80111f0:	46bd      	mov	sp, r7
 80111f2:	bd80      	pop	{r7, pc}

080111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 80111f4:	b580      	push	{r7, lr}
 80111f6:	b082      	sub	sp, #8
 80111f8:	af00      	add	r7, sp, #0
 80111fa:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 80111fc:	687b      	ldr	r3, [r7, #4]
 80111fe:	2b00      	cmp	r3, #0
 8011200:	d004      	beq.n	801120c <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 8011202:	2000      	movs	r0, #0
 8011204:	f000 f807 	bl	8011216 <_ZN8gemmlowp6BitNotIlEET_S1_>
 8011208:	4603      	mov	r3, r0
 801120a:	e000      	b.n	801120e <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 801120c:	2300      	movs	r3, #0
}
 801120e:	4618      	mov	r0, r3
 8011210:	3708      	adds	r7, #8
 8011212:	46bd      	mov	sp, r7
 8011214:	bd80      	pop	{r7, pc}

08011216 <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 8011216:	b480      	push	{r7}
 8011218:	b083      	sub	sp, #12
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
  return ~a;
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	43db      	mvns	r3, r3
}
 8011222:	4618      	mov	r0, r3
 8011224:	370c      	adds	r7, #12
 8011226:	46bd      	mov	sp, r7
 8011228:	f85d 7b04 	ldr.w	r7, [sp], #4
 801122c:	4770      	bx	lr

0801122e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 801122e:	b480      	push	{r7}
 8011230:	b083      	sub	sp, #12
 8011232:	af00      	add	r7, sp, #0
 8011234:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8011236:	687b      	ldr	r3, [r7, #4]
 8011238:	2b00      	cmp	r3, #0
 801123a:	d002      	beq.n	8011242 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 801123c:	687b      	ldr	r3, [r7, #4]
 801123e:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8011240:	e000      	b.n	8011244 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 8011242:	2300      	movs	r3, #0
}
 8011244:	4618      	mov	r0, r3
 8011246:	370c      	adds	r7, #12
 8011248:	46bd      	mov	sp, r7
 801124a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801124e:	4770      	bx	lr

08011250 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8011250:	b480      	push	{r7}
 8011252:	b083      	sub	sp, #12
 8011254:	af00      	add	r7, sp, #0
 8011256:	6078      	str	r0, [r7, #4]
 8011258:	687b      	ldr	r3, [r7, #4]
 801125a:	681b      	ldr	r3, [r3, #0]
 801125c:	681b      	ldr	r3, [r3, #0]
 801125e:	4618      	mov	r0, r3
 8011260:	370c      	adds	r7, #12
 8011262:	46bd      	mov	sp, r7
 8011264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011268:	4770      	bx	lr

0801126a <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 801126a:	b480      	push	{r7}
 801126c:	b083      	sub	sp, #12
 801126e:	af00      	add	r7, sp, #0
 8011270:	6078      	str	r0, [r7, #4]
 8011272:	687b      	ldr	r3, [r7, #4]
 8011274:	685b      	ldr	r3, [r3, #4]
 8011276:	681b      	ldr	r3, [r3, #0]
 8011278:	4618      	mov	r0, r3
 801127a:	370c      	adds	r7, #12
 801127c:	46bd      	mov	sp, r7
 801127e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011282:	4770      	bx	lr

08011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 8011284:	b590      	push	{r4, r7, lr}
 8011286:	b085      	sub	sp, #20
 8011288:	af00      	add	r7, sp, #0
 801128a:	60f8      	str	r0, [r7, #12]
 801128c:	60b9      	str	r1, [r7, #8]
 801128e:	607a      	str	r2, [r7, #4]
 8011290:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 8011292:	68b9      	ldr	r1, [r7, #8]
 8011294:	68f8      	ldr	r0, [r7, #12]
 8011296:	f7fe f8a9 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801129a:	4604      	mov	r4, r0
 801129c:	6839      	ldr	r1, [r7, #0]
 801129e:	6878      	ldr	r0, [r7, #4]
 80112a0:	f7fe f8a4 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80112a4:	4603      	mov	r3, r0
 80112a6:	429c      	cmp	r4, r3
 80112a8:	d001      	beq.n	80112ae <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 80112aa:	f009 fe8d 	bl	801afc8 <abort>
  return shape1.Dims(index1);
 80112ae:	68b9      	ldr	r1, [r7, #8]
 80112b0:	68f8      	ldr	r0, [r7, #12]
 80112b2:	f7fe f89b 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80112b6:	4603      	mov	r3, r0
}
 80112b8:	4618      	mov	r0, r3
 80112ba:	3714      	adds	r7, #20
 80112bc:	46bd      	mov	sp, r7
 80112be:	bd90      	pop	{r4, r7, pc}

080112c0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           int shift) {
 80112c0:	b580      	push	{r7, lr}
 80112c2:	b086      	sub	sp, #24
 80112c4:	af00      	add	r7, sp, #0
 80112c6:	60f8      	str	r0, [r7, #12]
 80112c8:	60b9      	str	r1, [r7, #8]
 80112ca:	607a      	str	r2, [r7, #4]
  int left_shift = shift > 0 ? shift : 0;
 80112cc:	687b      	ldr	r3, [r7, #4]
 80112ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80112d2:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80112d4:	687b      	ldr	r3, [r7, #4]
 80112d6:	2b00      	cmp	r3, #0
 80112d8:	dc02      	bgt.n	80112e0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80112da:	687b      	ldr	r3, [r7, #4]
 80112dc:	425b      	negs	r3, r3
 80112de:	e000      	b.n	80112e2 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80112e0:	2300      	movs	r3, #0
 80112e2:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80112e4:	68fa      	ldr	r2, [r7, #12]
 80112e6:	697b      	ldr	r3, [r7, #20]
 80112e8:	fa02 f303 	lsl.w	r3, r2, r3
 80112ec:	68b9      	ldr	r1, [r7, #8]
 80112ee:	4618      	mov	r0, r3
 80112f0:	f7fe f9b4 	bl	800f65c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80112f4:	4603      	mov	r3, r0
 80112f6:	6939      	ldr	r1, [r7, #16]
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7ff fda1 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80112fe:	4603      	mov	r3, r0
}
 8011300:	4618      	mov	r0, r3
 8011302:	3718      	adds	r7, #24
 8011304:	46bd      	mov	sp, r7
 8011306:	bd80      	pop	{r7, pc}

08011308 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 8011308:	b590      	push	{r4, r7, lr}
 801130a:	ed2d 8b02 	vpush	{d8}
 801130e:	b0a7      	sub	sp, #156	; 0x9c
 8011310:	af02      	add	r7, sp, #8
 8011312:	60f8      	str	r0, [r7, #12]
 8011314:	60b9      	str	r1, [r7, #8]
 8011316:	607a      	str	r2, [r7, #4]
 8011318:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011320:	66bb      	str	r3, [r7, #104]	; 0x68
  const int stride_height = params.stride_height;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011328:	667b      	str	r3, [r7, #100]	; 0x64
  const int dilation_width_factor = params.dilation_width_factor;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011330:	663b      	str	r3, [r7, #96]	; 0x60
  const int dilation_height_factor = params.dilation_height_factor;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011338:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int pad_width = params.padding_values.width;
 801133a:	68fb      	ldr	r3, [r7, #12]
 801133c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011340:	65bb      	str	r3, [r7, #88]	; 0x58
  const int pad_height = params.padding_values.height;
 8011342:	68fb      	ldr	r3, [r7, #12]
 8011344:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011348:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_min = params.float_activation_min;
 801134a:	68fb      	ldr	r3, [r7, #12]
 801134c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801134e:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_activation_max = params.float_activation_max;
 8011350:	68fb      	ldr	r3, [r7, #12]
 8011352:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8011354:	64fb      	str	r3, [r7, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011356:	68b8      	ldr	r0, [r7, #8]
 8011358:	f7fe f83c 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801135c:	4603      	mov	r3, r0
 801135e:	2b04      	cmp	r3, #4
 8011360:	d001      	beq.n	8011366 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 8011362:	f009 fe31 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8011366:	6838      	ldr	r0, [r7, #0]
 8011368:	f7fe f834 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801136c:	4603      	mov	r3, r0
 801136e:	2b04      	cmp	r3, #4
 8011370:	d001      	beq.n	8011376 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 8011372:	f009 fe29 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8011376:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801137a:	f7fe f82b 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801137e:	4603      	mov	r3, r0
 8011380:	2b04      	cmp	r3, #4
 8011382:	d001      	beq.n	8011388 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 8011384:	f009 fe20 	bl	801afc8 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011388:	2300      	movs	r3, #0
 801138a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 801138e:	2100      	movs	r1, #0
 8011390:	68b8      	ldr	r0, [r7, #8]
 8011392:	f7ff ff77 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011396:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8011398:	2303      	movs	r3, #3
 801139a:	683a      	ldr	r2, [r7, #0]
 801139c:	2103      	movs	r1, #3
 801139e:	68b8      	ldr	r0, [r7, #8]
 80113a0:	f7ff ff70 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80113a4:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80113a6:	2303      	movs	r3, #3
 80113a8:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80113ac:	2100      	movs	r1, #0
 80113ae:	6838      	ldr	r0, [r7, #0]
 80113b0:	f7ff ff68 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80113b4:	6438      	str	r0, [r7, #64]	; 0x40
  if (bias_data) {
 80113b6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80113ba:	2b00      	cmp	r3, #0
 80113bc:	d009      	beq.n	80113d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80113be:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80113c2:	f7fe f8a3 	bl	800f50c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80113c6:	4602      	mov	r2, r0
 80113c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113ca:	4293      	cmp	r3, r2
 80113cc:	d001      	beq.n	80113d2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 80113ce:	f009 fdfb 	bl	801afc8 <abort>
  }
  const int input_height = input_shape.Dims(1);
 80113d2:	2101      	movs	r1, #1
 80113d4:	68b8      	ldr	r0, [r7, #8]
 80113d6:	f7fe f809 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80113da:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int input_width = input_shape.Dims(2);
 80113dc:	2102      	movs	r1, #2
 80113de:	68b8      	ldr	r0, [r7, #8]
 80113e0:	f7fe f804 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80113e4:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_height = filter_shape.Dims(1);
 80113e6:	2101      	movs	r1, #1
 80113e8:	6838      	ldr	r0, [r7, #0]
 80113ea:	f7fd ffff 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80113ee:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_width = filter_shape.Dims(2);
 80113f0:	2102      	movs	r1, #2
 80113f2:	6838      	ldr	r0, [r7, #0]
 80113f4:	f7fd fffa 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80113f8:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
 80113fa:	2101      	movs	r1, #1
 80113fc:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8011400:	f7fd fff4 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011404:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
 8011406:	2102      	movs	r1, #2
 8011408:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801140c:	f7fd ffee 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011410:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int batch = 0; batch < batches; ++batch) {
 8011412:	2300      	movs	r3, #0
 8011414:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011418:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801141c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801141e:	429a      	cmp	r2, r3
 8011420:	f280 80de 	bge.w	80115e0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011424:	2300      	movs	r3, #0
 8011426:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801142a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801142e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011430:	429a      	cmp	r2, r3
 8011432:	f280 80cf 	bge.w	80115d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011436:	2300      	movs	r3, #0
 8011438:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801143c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011442:	429a      	cmp	r2, r3
 8011444:	f280 80c0 	bge.w	80115c8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011448:	2300      	movs	r3, #0
 801144a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801144e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011452:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011454:	429a      	cmp	r2, r3
 8011456:	f280 80b1 	bge.w	80115bc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 801145a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801145e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011460:	fb02 f203 	mul.w	r2, r2, r3
 8011464:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011466:	1ad3      	subs	r3, r2, r3
 8011468:	627b      	str	r3, [r7, #36]	; 0x24
          const int in_y_origin = (out_y * stride_height) - pad_height;
 801146a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801146e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011470:	fb02 f203 	mul.w	r2, r2, r3
 8011474:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011476:	1ad3      	subs	r3, r2, r3
 8011478:	623b      	str	r3, [r7, #32]
          float total = 0.f;
 801147a:	f04f 0300 	mov.w	r3, #0
 801147e:	67fb      	str	r3, [r7, #124]	; 0x7c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011480:	2300      	movs	r3, #0
 8011482:	67bb      	str	r3, [r7, #120]	; 0x78
 8011484:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011486:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011488:	429a      	cmp	r2, r3
 801148a:	da5e      	bge.n	801154a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x242>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801148c:	2300      	movs	r3, #0
 801148e:	677b      	str	r3, [r7, #116]	; 0x74
 8011490:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011494:	429a      	cmp	r2, r3
 8011496:	da54      	bge.n	8011542 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x23a>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011498:	2300      	movs	r3, #0
 801149a:	673b      	str	r3, [r7, #112]	; 0x70
 801149c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801149e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80114a0:	429a      	cmp	r2, r3
 80114a2:	da4a      	bge.n	801153a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x232>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80114a4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80114a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80114a8:	fb02 f303 	mul.w	r3, r2, r3
 80114ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80114ae:	4413      	add	r3, r2
 80114b0:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80114b2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80114b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114b6:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80114ba:	6a3a      	ldr	r2, [r7, #32]
 80114bc:	4413      	add	r3, r2
 80114be:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80114c0:	69fb      	ldr	r3, [r7, #28]
 80114c2:	2b00      	cmp	r3, #0
 80114c4:	db35      	blt.n	8011532 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80114c6:	69fa      	ldr	r2, [r7, #28]
 80114c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114ca:	429a      	cmp	r2, r3
 80114cc:	da31      	bge.n	8011532 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80114ce:	69bb      	ldr	r3, [r7, #24]
 80114d0:	2b00      	cmp	r3, #0
 80114d2:	db2e      	blt.n	8011532 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80114d4:	69ba      	ldr	r2, [r7, #24]
 80114d6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114d8:	429a      	cmp	r2, r3
 80114da:	da2a      	bge.n	8011532 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
                    (in_y < input_height)) {
                  float input_value = input_data[Offset(
 80114dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114de:	9300      	str	r3, [sp, #0]
 80114e0:	69fb      	ldr	r3, [r7, #28]
 80114e2:	69ba      	ldr	r2, [r7, #24]
 80114e4:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80114e8:	68b8      	ldr	r0, [r7, #8]
 80114ea:	f7fe f9f7 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80114ee:	4603      	mov	r3, r0
                      input_shape, batch, in_y, in_x, in_channel)];
 80114f0:	009b      	lsls	r3, r3, #2
 80114f2:	687a      	ldr	r2, [r7, #4]
 80114f4:	4413      	add	r3, r2
 80114f6:	681b      	ldr	r3, [r3, #0]
 80114f8:	617b      	str	r3, [r7, #20]
                  float filter_value =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 80114fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114fc:	9300      	str	r3, [sp, #0]
 80114fe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011500:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011502:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 8011506:	6838      	ldr	r0, [r7, #0]
 8011508:	f7fe f9e8 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801150c:	4603      	mov	r3, r0
                                         filter_x, in_channel)];
 801150e:	009b      	lsls	r3, r3, #2
 8011510:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8011514:	4413      	add	r3, r2
 8011516:	681b      	ldr	r3, [r3, #0]
 8011518:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 801151a:	ed97 7a05 	vldr	s14, [r7, #20]
 801151e:	edd7 7a04 	vldr	s15, [r7, #16]
 8011522:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011526:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801152a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801152e:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011532:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011534:	3301      	adds	r3, #1
 8011536:	673b      	str	r3, [r7, #112]	; 0x70
 8011538:	e7b0      	b.n	801149c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x194>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801153a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801153c:	3301      	adds	r3, #1
 801153e:	677b      	str	r3, [r7, #116]	; 0x74
 8011540:	e7a6      	b.n	8011490 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x188>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011542:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011544:	3301      	adds	r3, #1
 8011546:	67bb      	str	r3, [r7, #120]	; 0x78
 8011548:	e79c      	b.n	8011484 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17c>
                }
              }
            }
          }
          float bias_value = 0.0f;
 801154a:	f04f 0300 	mov.w	r3, #0
 801154e:	66fb      	str	r3, [r7, #108]	; 0x6c
          if (bias_data) {
 8011550:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011554:	2b00      	cmp	r3, #0
 8011556:	d007      	beq.n	8011568 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x260>
            bias_value = bias_data[out_channel];
 8011558:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801155c:	009b      	lsls	r3, r3, #2
 801155e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8011562:	4413      	add	r3, r2
 8011564:	681b      	ldr	r3, [r3, #0]
 8011566:	66fb      	str	r3, [r7, #108]	; 0x6c
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 8011568:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 801156c:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8011570:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8011574:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011578:	9300      	str	r3, [sp, #0]
 801157a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801157e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011582:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8011586:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801158a:	f7fe f9a7 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801158e:	4603      	mov	r3, r0
 8011590:	009b      	lsls	r3, r3, #2
 8011592:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011596:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 8011598:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 801159c:	edd7 0a14 	vldr	s1, [r7, #80]	; 0x50
 80115a0:	eeb0 0a48 	vmov.f32	s0, s16
 80115a4:	f7fe fa15 	bl	800f9d2 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 80115a8:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80115ac:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80115b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80115b4:	3301      	adds	r3, #1
 80115b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80115ba:	e748      	b.n	801144e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x146>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80115bc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115c0:	3301      	adds	r3, #1
 80115c2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80115c6:	e739      	b.n	801143c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80115c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80115cc:	3301      	adds	r3, #1
 80115ce:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80115d2:	e72a      	b.n	801142a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 80115d4:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115d8:	3301      	adds	r3, #1
 80115da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80115de:	e71b      	b.n	8011418 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 80115e0:	bf00      	nop
 80115e2:	3794      	adds	r7, #148	; 0x94
 80115e4:	46bd      	mov	sp, r7
 80115e6:	ecbd 8b02 	vpop	{d8}
 80115ea:	bd90      	pop	{r4, r7, pc}

080115ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
 80115ec:	b590      	push	{r4, r7, lr}
 80115ee:	b0ab      	sub	sp, #172	; 0xac
 80115f0:	af02      	add	r7, sp, #8
 80115f2:	60f8      	str	r0, [r7, #12]
 80115f4:	60b9      	str	r1, [r7, #8]
 80115f6:	607a      	str	r2, [r7, #4]
 80115f8:	603b      	str	r3, [r7, #0]
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
 80115fa:	68fb      	ldr	r3, [r7, #12]
 80115fc:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011600:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801160a:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011612:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801161a:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 801161c:	68fb      	ldr	r3, [r7, #12]
 801161e:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011622:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 8011624:	68fb      	ldr	r3, [r7, #12]
 8011626:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801162a:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32 input_offset = params.input_offset;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	695b      	ldr	r3, [r3, #20]
 8011630:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32 filter_offset = params.weights_offset;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	699b      	ldr	r3, [r3, #24]
 8011636:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 output_offset = params.output_offset;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	69db      	ldr	r3, [r3, #28]
 801163c:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_multiplier = params.output_multiplier;
 801163e:	68fb      	ldr	r3, [r7, #12]
 8011640:	6a1b      	ldr	r3, [r3, #32]
 8011642:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int output_shift = params.output_shift;
 8011644:	68fb      	ldr	r3, [r7, #12]
 8011646:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011648:	65bb      	str	r3, [r7, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
 801164a:	68fb      	ldr	r3, [r7, #12]
 801164c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801164e:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8011650:	68fb      	ldr	r3, [r7, #12]
 8011652:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011654:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8011656:	69ba      	ldr	r2, [r7, #24]
 8011658:	697b      	ldr	r3, [r7, #20]
 801165a:	429a      	cmp	r2, r3
 801165c:	dd01      	ble.n	8011662 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x76>
 801165e:	f009 fcb3 	bl	801afc8 <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011662:	68b8      	ldr	r0, [r7, #8]
 8011664:	f7fd feb6 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011668:	4603      	mov	r3, r0
 801166a:	2b04      	cmp	r3, #4
 801166c:	d001      	beq.n	8011672 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x86>
 801166e:	f009 fcab 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8011672:	6838      	ldr	r0, [r7, #0]
 8011674:	f7fd feae 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011678:	4603      	mov	r3, r0
 801167a:	2b04      	cmp	r3, #4
 801167c:	d001      	beq.n	8011682 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x96>
 801167e:	f009 fca3 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8011682:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011686:	f7fd fea5 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801168a:	4603      	mov	r3, r0
 801168c:	2b04      	cmp	r3, #4
 801168e:	d001      	beq.n	8011694 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xa8>
 8011690:	f009 fc9a 	bl	801afc8 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011694:	2300      	movs	r3, #0
 8011696:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 801169a:	2100      	movs	r1, #0
 801169c:	68b8      	ldr	r0, [r7, #8]
 801169e:	f7ff fdf1 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80116a2:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80116a4:	2303      	movs	r3, #3
 80116a6:	683a      	ldr	r2, [r7, #0]
 80116a8:	2103      	movs	r1, #3
 80116aa:	68b8      	ldr	r0, [r7, #8]
 80116ac:	f7ff fdea 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80116b0:	6538      	str	r0, [r7, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80116b2:	2303      	movs	r3, #3
 80116b4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80116b8:	2100      	movs	r1, #0
 80116ba:	6838      	ldr	r0, [r7, #0]
 80116bc:	f7ff fde2 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80116c0:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (bias_data) {
 80116c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80116c6:	2b00      	cmp	r3, #0
 80116c8:	d009      	beq.n	80116de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80116ca:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80116ce:	f7fd ff1d 	bl	800f50c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80116d2:	4602      	mov	r2, r0
 80116d4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116d6:	4293      	cmp	r3, r2
 80116d8:	d001      	beq.n	80116de <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
 80116da:	f009 fc75 	bl	801afc8 <abort>
  }
  const int input_height = input_shape.Dims(1);
 80116de:	2101      	movs	r1, #1
 80116e0:	68b8      	ldr	r0, [r7, #8]
 80116e2:	f7fd fe83 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80116e6:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 80116e8:	2102      	movs	r1, #2
 80116ea:	68b8      	ldr	r0, [r7, #8]
 80116ec:	f7fd fe7e 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80116f0:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_height = filter_shape.Dims(1);
 80116f2:	2101      	movs	r1, #1
 80116f4:	6838      	ldr	r0, [r7, #0]
 80116f6:	f7fd fe79 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80116fa:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_width = filter_shape.Dims(2);
 80116fc:	2102      	movs	r1, #2
 80116fe:	6838      	ldr	r0, [r7, #0]
 8011700:	f7fd fe74 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011704:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
 8011706:	2101      	movs	r1, #1
 8011708:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801170c:	f7fd fe6e 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011710:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
 8011712:	2102      	movs	r1, #2
 8011714:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011718:	f7fd fe68 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801171c:	6378      	str	r0, [r7, #52]	; 0x34
  for (int batch = 0; batch < batches; ++batch) {
 801171e:	2300      	movs	r3, #0
 8011720:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011724:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011728:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801172a:	429a      	cmp	r2, r3
 801172c:	f280 8101 	bge.w	8011932 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x346>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011730:	2300      	movs	r3, #0
 8011732:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011736:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 801173a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801173c:	429a      	cmp	r2, r3
 801173e:	f280 80f2 	bge.w	8011926 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x33a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011742:	2300      	movs	r3, #0
 8011744:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011748:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 801174c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801174e:	429a      	cmp	r2, r3
 8011750:	f280 80e3 	bge.w	801191a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x32e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011754:	2300      	movs	r3, #0
 8011756:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801175a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 801175e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011760:	429a      	cmp	r2, r3
 8011762:	f280 80d4 	bge.w	801190e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x322>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8011766:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801176a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801176e:	fb02 f203 	mul.w	r2, r2, r3
 8011772:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8011774:	1ad3      	subs	r3, r2, r3
 8011776:	633b      	str	r3, [r7, #48]	; 0x30
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8011778:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801177c:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 801177e:	fb02 f203 	mul.w	r2, r2, r3
 8011782:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011784:	1ad3      	subs	r3, r2, r3
 8011786:	62fb      	str	r3, [r7, #44]	; 0x2c
          int32 acc = 0;
 8011788:	2300      	movs	r3, #0
 801178a:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 801178c:	2300      	movs	r3, #0
 801178e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011792:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011796:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011798:	429a      	cmp	r2, r3
 801179a:	da6d      	bge.n	8011878 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x28c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 801179c:	2300      	movs	r3, #0
 801179e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80117a2:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80117a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80117a8:	429a      	cmp	r2, r3
 80117aa:	da5f      	bge.n	801186c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x280>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 80117ac:	2300      	movs	r3, #0
 80117ae:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80117b2:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80117b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117b8:	429a      	cmp	r2, r3
 80117ba:	da51      	bge.n	8011860 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x274>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80117bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80117be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80117c2:	fb02 f303 	mul.w	r3, r2, r3
 80117c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117c8:	4413      	add	r3, r2
 80117ca:	62bb      	str	r3, [r7, #40]	; 0x28
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80117cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80117ce:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80117d2:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80117d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117d8:	4413      	add	r3, r2
 80117da:	627b      	str	r3, [r7, #36]	; 0x24
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80117dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117de:	2b00      	cmp	r3, #0
 80117e0:	db38      	blt.n	8011854 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 80117e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117e6:	429a      	cmp	r2, r3
 80117e8:	da34      	bge.n	8011854 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 80117ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117ec:	2b00      	cmp	r3, #0
 80117ee:	db31      	blt.n	8011854 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 80117f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117f4:	429a      	cmp	r2, r3
 80117f6:	da2d      	bge.n	8011854 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 80117f8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80117fc:	9300      	str	r3, [sp, #0]
 80117fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011800:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011802:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8011806:	68b8      	ldr	r0, [r7, #8]
 8011808:	f7fe f868 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801180c:	4603      	mov	r3, r0
 801180e:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8011810:	687b      	ldr	r3, [r7, #4]
 8011812:	4413      	add	r3, r2
 8011814:	781b      	ldrb	r3, [r3, #0]
 8011816:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8011818:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801181c:	9300      	str	r3, [sp, #0]
 801181e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011822:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011826:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 801182a:	6838      	ldr	r0, [r7, #0]
 801182c:	f7fe f856 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011830:	4603      	mov	r3, r0
 8011832:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8011834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011838:	4413      	add	r3, r2
 801183a:	781b      	ldrb	r3, [r3, #0]
 801183c:	61fb      	str	r3, [r7, #28]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
 801183e:	69fa      	ldr	r2, [r7, #28]
 8011840:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011842:	4413      	add	r3, r2
 8011844:	6a39      	ldr	r1, [r7, #32]
 8011846:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011848:	440a      	add	r2, r1
 801184a:	fb02 f203 	mul.w	r2, r2, r3
                  acc +=
 801184e:	693b      	ldr	r3, [r7, #16]
 8011850:	4413      	add	r3, r2
 8011852:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011854:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011858:	3301      	adds	r3, #1
 801185a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801185e:	e7a8      	b.n	80117b2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1c6>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011860:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011864:	3301      	adds	r3, #1
 8011866:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801186a:	e79a      	b.n	80117a2 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1b6>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 801186c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011870:	3301      	adds	r3, #1
 8011872:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011876:	e78c      	b.n	8011792 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1a6>
                }
              }
            }
          }
          if (bias_data) {
 8011878:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801187c:	2b00      	cmp	r3, #0
 801187e:	d009      	beq.n	8011894 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x2a8>
            acc += bias_data[out_channel];
 8011880:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011884:	009b      	lsls	r3, r3, #2
 8011886:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801188a:	4413      	add	r3, r2
 801188c:	681a      	ldr	r2, [r3, #0]
 801188e:	693b      	ldr	r3, [r7, #16]
 8011890:	4413      	add	r3, r2
 8011892:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
 8011894:	693b      	ldr	r3, [r7, #16]
 8011896:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011898:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 801189a:	4618      	mov	r0, r3
 801189c:	f7ff fd10 	bl	80112c0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 80118a0:	4603      	mov	r3, r0
 80118a2:	613b      	str	r3, [r7, #16]
                                              output_shift);
          acc += output_offset;
 80118a4:	693a      	ldr	r2, [r7, #16]
 80118a6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80118a8:	4413      	add	r3, r2
 80118aa:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 80118ac:	f107 0218 	add.w	r2, r7, #24
 80118b0:	f107 0310 	add.w	r3, r7, #16
 80118b4:	4611      	mov	r1, r2
 80118b6:	4618      	mov	r0, r3
 80118b8:	f7fd fcdf 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 80118bc:	4603      	mov	r3, r0
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 80118c2:	f107 0214 	add.w	r2, r7, #20
 80118c6:	f107 0310 	add.w	r3, r7, #16
 80118ca:	4611      	mov	r1, r2
 80118cc:	4618      	mov	r0, r3
 80118ce:	f7fd fce8 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 80118d2:	4603      	mov	r3, r0
 80118d4:	681b      	ldr	r3, [r3, #0]
 80118d6:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80118d8:	693c      	ldr	r4, [r7, #16]
 80118da:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80118de:	9300      	str	r3, [sp, #0]
 80118e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80118e4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80118e8:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80118ec:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80118f0:	f7fd fff4 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80118f4:	4603      	mov	r3, r0
 80118f6:	461a      	mov	r2, r3
 80118f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80118fc:	4413      	add	r3, r2
 80118fe:	b2e2      	uxtb	r2, r4
 8011900:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011902:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011906:	3301      	adds	r3, #1
 8011908:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 801190c:	e725      	b.n	801175a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x16e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801190e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011912:	3301      	adds	r3, #1
 8011914:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011918:	e716      	b.n	8011748 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x15c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801191a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801191e:	3301      	adds	r3, #1
 8011920:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8011924:	e707      	b.n	8011736 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x14a>
  for (int batch = 0; batch < batches; ++batch) {
 8011926:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 801192a:	3301      	adds	r3, #1
 801192c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011930:	e6f8      	b.n	8011724 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x138>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
 8011932:	bf00      	nop
 8011934:	37a4      	adds	r7, #164	; 0xa4
 8011936:	46bd      	mov	sp, r7
 8011938:	bd90      	pop	{r4, r7, pc}

0801193a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
 801193a:	b590      	push	{r4, r7, lr}
 801193c:	b0a9      	sub	sp, #164	; 0xa4
 801193e:	af02      	add	r7, sp, #8
 8011940:	60f8      	str	r0, [r7, #12]
 8011942:	60b9      	str	r1, [r7, #8]
 8011944:	607a      	str	r2, [r7, #4]
 8011946:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
 8011948:	68fb      	ldr	r3, [r7, #12]
 801194a:	695b      	ldr	r3, [r3, #20]
 801194c:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011954:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 801195c:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011964:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 801196c:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 801196e:	68fb      	ldr	r3, [r7, #12]
 8011970:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011974:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 8011976:	68fb      	ldr	r3, [r7, #12]
 8011978:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801197c:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_offset = params.output_offset;
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	69db      	ldr	r3, [r3, #28]
 8011982:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
 8011984:	68fb      	ldr	r3, [r7, #12]
 8011986:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011988:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801198e:	617b      	str	r3, [r7, #20]

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8011990:	69ba      	ldr	r2, [r7, #24]
 8011992:	697b      	ldr	r3, [r7, #20]
 8011994:	429a      	cmp	r2, r3
 8011996:	dd01      	ble.n	801199c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8011998:	f009 fb16 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801199c:	6838      	ldr	r0, [r7, #0]
 801199e:	f7fd fd19 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80119a2:	4603      	mov	r3, r0
 80119a4:	2b04      	cmp	r3, #4
 80119a6:	d001      	beq.n	80119ac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 80119a8:	f009 fb0e 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 80119ac:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80119b0:	f7fd fd10 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80119b4:	4603      	mov	r3, r0
 80119b6:	2b04      	cmp	r3, #4
 80119b8:	d001      	beq.n	80119be <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 80119ba:	f009 fb05 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80119be:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80119c2:	f7fd fd07 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80119c6:	4603      	mov	r3, r0
 80119c8:	2b04      	cmp	r3, #4
 80119ca:	d001      	beq.n	80119d0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 80119cc:	f009 fafc 	bl	801afc8 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80119d0:	2300      	movs	r3, #0
 80119d2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119d6:	2100      	movs	r1, #0
 80119d8:	6838      	ldr	r0, [r7, #0]
 80119da:	f7ff fc53 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80119de:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80119e0:	2303      	movs	r3, #3
 80119e2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80119e6:	2103      	movs	r1, #3
 80119e8:	6838      	ldr	r0, [r7, #0]
 80119ea:	f7ff fc4b 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80119ee:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80119f0:	2303      	movs	r3, #3
 80119f2:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119f6:	2100      	movs	r1, #0
 80119f8:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80119fc:	f7ff fc42 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011a00:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 8011a02:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011a06:	2b00      	cmp	r3, #0
 8011a08:	d009      	beq.n	8011a1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 8011a0a:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8011a0e:	f7fd fd7d 	bl	800f50c <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 8011a12:	4602      	mov	r2, r0
 8011a14:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a16:	4293      	cmp	r3, r2
 8011a18:	d001      	beq.n	8011a1e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8011a1a:	f009 fad5 	bl	801afc8 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8011a1e:	2101      	movs	r1, #1
 8011a20:	6838      	ldr	r0, [r7, #0]
 8011a22:	f7fd fce3 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a26:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8011a28:	2102      	movs	r1, #2
 8011a2a:	6838      	ldr	r0, [r7, #0]
 8011a2c:	f7fd fcde 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a30:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8011a32:	2101      	movs	r1, #1
 8011a34:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8011a38:	f7fd fcd8 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a3c:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8011a3e:	2102      	movs	r1, #2
 8011a40:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8011a44:	f7fd fcd2 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a48:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8011a4a:	2101      	movs	r1, #1
 8011a4c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011a50:	f7fd fccc 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a54:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8011a56:	2102      	movs	r1, #2
 8011a58:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011a5c:	f7fd fcc6 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a60:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8011a62:	2300      	movs	r3, #0
 8011a64:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011a68:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011a6c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a6e:	429a      	cmp	r2, r3
 8011a70:	f280 810f 	bge.w	8011c92 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011a74:	2300      	movs	r3, #0
 8011a76:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a7a:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011a7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a80:	429a      	cmp	r2, r3
 8011a82:	f280 8100 	bge.w	8011c86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011a86:	2300      	movs	r3, #0
 8011a88:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011a8c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011a90:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a92:	429a      	cmp	r2, r3
 8011a94:	f280 80f1 	bge.w	8011c7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x340>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011a98:	2300      	movs	r3, #0
 8011a9a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011a9e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011aa4:	429a      	cmp	r2, r3
 8011aa6:	f280 80e2 	bge.w	8011c6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x334>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8011aaa:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011aae:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011ab0:	fb02 f203 	mul.w	r2, r2, r3
 8011ab4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011ab6:	1ad3      	subs	r3, r2, r3
 8011ab8:	637b      	str	r3, [r7, #52]	; 0x34
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8011aba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011abe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011ac0:	fb02 f203 	mul.w	r2, r2, r3
 8011ac4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011ac6:	1ad3      	subs	r3, r2, r3
 8011ac8:	633b      	str	r3, [r7, #48]	; 0x30
          int32 acc = 0;
 8011aca:	2300      	movs	r3, #0
 8011acc:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011ace:	2300      	movs	r3, #0
 8011ad0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011ad4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011ad8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ada:	429a      	cmp	r2, r3
 8011adc:	da72      	bge.n	8011bc4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011ade:	2300      	movs	r3, #0
 8011ae0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011ae4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011ae8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011aea:	429a      	cmp	r2, r3
 8011aec:	da64      	bge.n	8011bb8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011aee:	2300      	movs	r3, #0
 8011af0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011af2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011af4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011af6:	429a      	cmp	r2, r3
 8011af8:	da58      	bge.n	8011bac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x272>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8011afa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011afc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011b00:	fb02 f303 	mul.w	r3, r2, r3
 8011b04:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011b06:	4413      	add	r3, r2
 8011b08:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8011b0a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011b0c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011b10:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8011b14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011b16:	4413      	add	r3, r2
 8011b18:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8011b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b1c:	2b00      	cmp	r3, #0
 8011b1e:	db0c      	blt.n	8011b3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8011b20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b22:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b24:	429a      	cmp	r2, r3
 8011b26:	da08      	bge.n	8011b3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8011b28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	db05      	blt.n	8011b3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8011b2e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b32:	429a      	cmp	r2, r3
 8011b34:	da01      	bge.n	8011b3a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8011b36:	2301      	movs	r3, #1
 8011b38:	e000      	b.n	8011b3c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
 8011b3a:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8011b3c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8011b40:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b44:	2b00      	cmp	r3, #0
 8011b46:	d02d      	beq.n	8011ba4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26a>
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8011b48:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b4a:	9300      	str	r3, [sp, #0]
 8011b4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b50:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011b54:	6838      	ldr	r0, [r7, #0]
 8011b56:	f7fd fec1 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011b5a:	4603      	mov	r3, r0
 8011b5c:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8011b5e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011b62:	4413      	add	r3, r2
 8011b64:	f993 3000 	ldrsb.w	r3, [r3]
 8011b68:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8011b6a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b6c:	9300      	str	r3, [sp, #0]
 8011b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011b72:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011b76:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011b7a:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8011b7e:	f7fd fead 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011b82:	4603      	mov	r3, r0
 8011b84:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8011b86:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011b8a:	4413      	add	r3, r2
 8011b8c:	f993 3000 	ldrsb.w	r3, [r3]
 8011b90:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8011b92:	6a3a      	ldr	r2, [r7, #32]
 8011b94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b96:	4413      	add	r3, r2
 8011b98:	69fa      	ldr	r2, [r7, #28]
 8011b9a:	fb02 f203 	mul.w	r2, r2, r3
 8011b9e:	693b      	ldr	r3, [r7, #16]
 8011ba0:	4413      	add	r3, r2
 8011ba2:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011ba4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011ba6:	3301      	adds	r3, #1
 8011ba8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011baa:	e7a2      	b.n	8011af2 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b8>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011bac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011bb0:	3301      	adds	r3, #1
 8011bb2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011bb6:	e795      	b.n	8011ae4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011bb8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011bbc:	3301      	adds	r3, #1
 8011bbe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011bc2:	e787      	b.n	8011ad4 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                }
              }
            }
          }

          if (bias_data) {
 8011bc4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011bc8:	2b00      	cmp	r3, #0
 8011bca:	d009      	beq.n	8011be0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a6>
            acc += bias_data[out_channel];
 8011bcc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011bd0:	009b      	lsls	r3, r3, #2
 8011bd2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011bd6:	4413      	add	r3, r2
 8011bd8:	681a      	ldr	r2, [r3, #0]
 8011bda:	693b      	ldr	r3, [r7, #16]
 8011bdc:	4413      	add	r3, r2
 8011bde:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8011be0:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8011be2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011be6:	009b      	lsls	r3, r3, #2
 8011be8:	68ba      	ldr	r2, [r7, #8]
 8011bea:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8011bec:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8011bee:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011bf2:	009b      	lsls	r3, r3, #2
 8011bf4:	687a      	ldr	r2, [r7, #4]
 8011bf6:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8011bf8:	681b      	ldr	r3, [r3, #0]
 8011bfa:	461a      	mov	r2, r3
 8011bfc:	f7ff fb60 	bl	80112c0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8011c00:	4603      	mov	r3, r0
 8011c02:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8011c04:	693a      	ldr	r2, [r7, #16]
 8011c06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011c08:	4413      	add	r3, r2
 8011c0a:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8011c0c:	f107 0218 	add.w	r2, r7, #24
 8011c10:	f107 0310 	add.w	r3, r7, #16
 8011c14:	4611      	mov	r1, r2
 8011c16:	4618      	mov	r0, r3
 8011c18:	f7fd fb2f 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 8011c1c:	4603      	mov	r3, r0
 8011c1e:	681b      	ldr	r3, [r3, #0]
 8011c20:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8011c22:	f107 0214 	add.w	r2, r7, #20
 8011c26:	f107 0310 	add.w	r3, r7, #16
 8011c2a:	4611      	mov	r1, r2
 8011c2c:	4618      	mov	r0, r3
 8011c2e:	f7fd fb38 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8011c32:	4603      	mov	r3, r0
 8011c34:	681b      	ldr	r3, [r3, #0]
 8011c36:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8011c38:	693c      	ldr	r4, [r7, #16]
 8011c3a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c3e:	9300      	str	r3, [sp, #0]
 8011c40:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c44:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011c48:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011c4c:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011c50:	f7fd fe44 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011c54:	4603      	mov	r3, r0
 8011c56:	461a      	mov	r2, r3
 8011c58:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c5c:	4413      	add	r3, r2
 8011c5e:	b262      	sxtb	r2, r4
 8011c60:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011c62:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c66:	3301      	adds	r3, #1
 8011c68:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011c6c:	e717      	b.n	8011a9e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x164>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011c6e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c72:	3301      	adds	r3, #1
 8011c74:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011c78:	e708      	b.n	8011a8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011c7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c7e:	3301      	adds	r3, #1
 8011c80:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011c84:	e6f9      	b.n	8011a7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8011c86:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011c8a:	3301      	adds	r3, #1
 8011c8c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011c90:	e6ea      	b.n	8011a68 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8011c92:	bf00      	nop
 8011c94:	379c      	adds	r7, #156	; 0x9c
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd90      	pop	{r4, r7, pc}

08011c9a <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 8011c9a:	b480      	push	{r7}
 8011c9c:	b087      	sub	sp, #28
 8011c9e:	af00      	add	r7, sp, #0
 8011ca0:	60f8      	str	r0, [r7, #12]
 8011ca2:	60b9      	str	r1, [r7, #8]
 8011ca4:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 8011ca6:	68bb      	ldr	r3, [r7, #8]
 8011ca8:	681b      	ldr	r3, [r3, #0]
 8011caa:	681b      	ldr	r3, [r3, #0]
 8011cac:	687a      	ldr	r2, [r7, #4]
 8011cae:	429a      	cmp	r2, r3
 8011cb0:	da0a      	bge.n	8011cc8 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 8011cb2:	68bb      	ldr	r3, [r7, #8]
 8011cb4:	681a      	ldr	r2, [r3, #0]
 8011cb6:	687b      	ldr	r3, [r7, #4]
 8011cb8:	009b      	lsls	r3, r3, #2
 8011cba:	4413      	add	r3, r2
 8011cbc:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 8011cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011cc2:	d001      	beq.n	8011cc8 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 8011cc4:	2301      	movs	r3, #1
 8011cc6:	e000      	b.n	8011cca <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 8011cc8:	2300      	movs	r3, #0
 8011cca:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 8011ccc:	7dfb      	ldrb	r3, [r7, #23]
 8011cce:	2b00      	cmp	r3, #0
 8011cd0:	d00a      	beq.n	8011ce8 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 8011cd2:	68fb      	ldr	r3, [r7, #12]
 8011cd4:	689a      	ldr	r2, [r3, #8]
 8011cd6:	68bb      	ldr	r3, [r7, #8]
 8011cd8:	6819      	ldr	r1, [r3, #0]
 8011cda:	687b      	ldr	r3, [r7, #4]
 8011cdc:	009b      	lsls	r3, r3, #2
 8011cde:	440b      	add	r3, r1
 8011ce0:	685b      	ldr	r3, [r3, #4]
 8011ce2:	019b      	lsls	r3, r3, #6
 8011ce4:	4413      	add	r3, r2
 8011ce6:	e000      	b.n	8011cea <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  return nullptr;
 8011ce8:	2300      	movs	r3, #0
}
 8011cea:	4618      	mov	r0, r3
 8011cec:	371c      	adds	r7, #28
 8011cee:	46bd      	mov	sp, r7
 8011cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cf4:	4770      	bx	lr

08011cf6 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8011cf6:	b480      	push	{r7}
 8011cf8:	b087      	sub	sp, #28
 8011cfa:	af00      	add	r7, sp, #0
 8011cfc:	60f8      	str	r0, [r7, #12]
 8011cfe:	60b9      	str	r1, [r7, #8]
 8011d00:	607a      	str	r2, [r7, #4]
 8011d02:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011d04:	683b      	ldr	r3, [r7, #0]
 8011d06:	3b01      	subs	r3, #1
 8011d08:	68ba      	ldr	r2, [r7, #8]
 8011d0a:	fb02 f303 	mul.w	r3, r2, r3
 8011d0e:	3301      	adds	r3, #1
 8011d10:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8011d12:	6a3b      	ldr	r3, [r7, #32]
 8011d14:	3b01      	subs	r3, #1
 8011d16:	68fa      	ldr	r2, [r7, #12]
 8011d18:	fb02 f203 	mul.w	r2, r2, r3
 8011d1c:	697b      	ldr	r3, [r7, #20]
 8011d1e:	441a      	add	r2, r3
  int total_padding =
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	1ad3      	subs	r3, r2, r3
 8011d24:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8011d26:	693b      	ldr	r3, [r7, #16]
 8011d28:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011d2c:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8011d2e:	693b      	ldr	r3, [r7, #16]
 8011d30:	2b00      	cmp	r3, #0
 8011d32:	f003 0301 	and.w	r3, r3, #1
 8011d36:	bfb8      	it	lt
 8011d38:	425b      	neglt	r3, r3
 8011d3a:	461a      	mov	r2, r3
 8011d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d3e:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8011d40:	693b      	ldr	r3, [r7, #16]
 8011d42:	0fda      	lsrs	r2, r3, #31
 8011d44:	4413      	add	r3, r2
 8011d46:	105b      	asrs	r3, r3, #1
}
 8011d48:	4618      	mov	r0, r3
 8011d4a:	371c      	adds	r7, #28
 8011d4c:	46bd      	mov	sp, r7
 8011d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d52:	4770      	bx	lr

08011d54 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8011d54:	b480      	push	{r7}
 8011d56:	b087      	sub	sp, #28
 8011d58:	af00      	add	r7, sp, #0
 8011d5a:	60b9      	str	r1, [r7, #8]
 8011d5c:	607a      	str	r2, [r7, #4]
 8011d5e:	603b      	str	r3, [r7, #0]
 8011d60:	4603      	mov	r3, r0
 8011d62:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011d64:	687b      	ldr	r3, [r7, #4]
 8011d66:	3b01      	subs	r3, #1
 8011d68:	6a3a      	ldr	r2, [r7, #32]
 8011d6a:	fb02 f303 	mul.w	r3, r2, r3
 8011d6e:	3301      	adds	r3, #1
 8011d70:	617b      	str	r3, [r7, #20]
  switch (padding) {
 8011d72:	7bfb      	ldrb	r3, [r7, #15]
 8011d74:	2b01      	cmp	r3, #1
 8011d76:	d002      	beq.n	8011d7e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 8011d78:	2b02      	cmp	r3, #2
 8011d7a:	d008      	beq.n	8011d8e <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 8011d7c:	e010      	b.n	8011da0 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8011d7e:	68ba      	ldr	r2, [r7, #8]
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	4413      	add	r3, r2
 8011d84:	1e5a      	subs	r2, r3, #1
 8011d86:	683b      	ldr	r3, [r7, #0]
 8011d88:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d8c:	e009      	b.n	8011da2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8011d8e:	68ba      	ldr	r2, [r7, #8]
 8011d90:	683b      	ldr	r3, [r7, #0]
 8011d92:	441a      	add	r2, r3
 8011d94:	697b      	ldr	r3, [r7, #20]
 8011d96:	1ad2      	subs	r2, r2, r3
 8011d98:	683b      	ldr	r3, [r7, #0]
 8011d9a:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d9e:	e000      	b.n	8011da2 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 8011da0:	2300      	movs	r3, #0
  }
}
 8011da2:	4618      	mov	r0, r3
 8011da4:	371c      	adds	r7, #28
 8011da6:	46bd      	mov	sp, r7
 8011da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dac:	4770      	bx	lr

08011dae <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8011dae:	b580      	push	{r7, lr}
 8011db0:	b088      	sub	sp, #32
 8011db2:	af02      	add	r7, sp, #8
 8011db4:	60f8      	str	r0, [r7, #12]
 8011db6:	60b9      	str	r1, [r7, #8]
 8011db8:	607a      	str	r2, [r7, #4]
 8011dba:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8011dbc:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8011dc0:	6a3b      	ldr	r3, [r7, #32]
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011dc8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011dca:	f7ff ffc3 	bl	8011d54 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dd2:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8011dd4:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8011dd8:	683b      	ldr	r3, [r7, #0]
 8011dda:	9300      	str	r3, [sp, #0]
 8011ddc:	68bb      	ldr	r3, [r7, #8]
 8011dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011de2:	f7ff ffb7 	bl	8011d54 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011de6:	4602      	mov	r2, r0
 8011de8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dea:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8011dec:	2300      	movs	r3, #0
 8011dee:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8011df0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011df2:	681b      	ldr	r3, [r3, #0]
 8011df4:	f107 0214 	add.w	r2, r7, #20
 8011df8:	9201      	str	r2, [sp, #4]
 8011dfa:	9300      	str	r3, [sp, #0]
 8011dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011dfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e00:	6839      	ldr	r1, [r7, #0]
 8011e02:	68b8      	ldr	r0, [r7, #8]
 8011e04:	f7ff ff77 	bl	8011cf6 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011e08:	4602      	mov	r2, r0
  padding_values.height =
 8011e0a:	68fb      	ldr	r3, [r7, #12]
 8011e0c:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8011e0e:	697a      	ldr	r2, [r7, #20]
 8011e10:	68fb      	ldr	r3, [r7, #12]
 8011e12:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8011e14:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011e16:	681b      	ldr	r3, [r3, #0]
 8011e18:	f107 0214 	add.w	r2, r7, #20
 8011e1c:	9201      	str	r2, [sp, #4]
 8011e1e:	9300      	str	r3, [sp, #0]
 8011e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e22:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e24:	6a39      	ldr	r1, [r7, #32]
 8011e26:	6878      	ldr	r0, [r7, #4]
 8011e28:	f7ff ff65 	bl	8011cf6 <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011e2c:	4602      	mov	r2, r0
  padding_values.width =
 8011e2e:	68fb      	ldr	r3, [r7, #12]
 8011e30:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8011e32:	697a      	ldr	r2, [r7, #20]
 8011e34:	68fb      	ldr	r3, [r7, #12]
 8011e36:	609a      	str	r2, [r3, #8]
  return padding_values;
 8011e38:	bf00      	nop
}
 8011e3a:	68f8      	ldr	r0, [r7, #12]
 8011e3c:	3718      	adds	r7, #24
 8011e3e:	46bd      	mov	sp, r7
 8011e40:	bd80      	pop	{r7, pc}

08011e42 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>:
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;
};

inline PaddingType RuntimePaddingType(TfLitePadding padding) {
 8011e42:	b480      	push	{r7}
 8011e44:	b083      	sub	sp, #12
 8011e46:	af00      	add	r7, sp, #0
 8011e48:	4603      	mov	r3, r0
 8011e4a:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8011e4c:	79fb      	ldrb	r3, [r7, #7]
 8011e4e:	2b01      	cmp	r3, #1
 8011e50:	d002      	beq.n	8011e58 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x16>
 8011e52:	2b02      	cmp	r3, #2
 8011e54:	d002      	beq.n	8011e5c <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1a>
 8011e56:	e003      	b.n	8011e60 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8011e58:	2301      	movs	r3, #1
 8011e5a:	e002      	b.n	8011e62 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 8011e5c:	2302      	movs	r3, #2
 8011e5e:	e000      	b.n	8011e62 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8011e60:	2300      	movs	r3, #0
  }
}
 8011e62:	4618      	mov	r0, r3
 8011e64:	370c      	adds	r7, #12
 8011e66:	46bd      	mov	sp, r7
 8011e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e6c:	4770      	bx	lr
	...

08011e70 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
 8011e70:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e72:	b09d      	sub	sp, #116	; 0x74
 8011e74:	af0a      	add	r7, sp, #40	; 0x28
 8011e76:	6278      	str	r0, [r7, #36]	; 0x24
 8011e78:	6239      	str	r1, [r7, #32]
 8011e7a:	61fa      	str	r2, [r7, #28]
 8011e7c:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8011e7e:	6a3b      	ldr	r3, [r7, #32]
 8011e80:	681b      	ldr	r3, [r3, #0]
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	2b03      	cmp	r3, #3
 8011e86:	bf0c      	ite	eq
 8011e88:	2301      	moveq	r3, #1
 8011e8a:	2300      	movne	r3, #0
 8011e8c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8011e90:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011e94:	f083 0301 	eor.w	r3, r3, #1
 8011e98:	b2db      	uxtb	r3, r3
 8011e9a:	2b00      	cmp	r3, #0
 8011e9c:	d010      	beq.n	8011ec0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x50>
 8011e9e:	6a3b      	ldr	r3, [r7, #32]
 8011ea0:	681b      	ldr	r3, [r3, #0]
 8011ea2:	681b      	ldr	r3, [r3, #0]
 8011ea4:	2b02      	cmp	r3, #2
 8011ea6:	d00b      	beq.n	8011ec0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x50>
 8011ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eaa:	695c      	ldr	r4, [r3, #20]
 8011eac:	4b4e      	ldr	r3, [pc, #312]	; (8011fe8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x178>)
 8011eae:	9300      	str	r3, [sp, #0]
 8011eb0:	f240 2323 	movw	r3, #547	; 0x223
 8011eb4:	4a4d      	ldr	r2, [pc, #308]	; (8011fec <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 8011eb6:	494e      	ldr	r1, [pc, #312]	; (8011ff0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x180>)
 8011eb8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eba:	47a0      	blx	r4
 8011ebc:	2301      	movs	r3, #1
 8011ebe:	e08f      	b.n	8011fe0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8011ec0:	6a3b      	ldr	r3, [r7, #32]
 8011ec2:	685b      	ldr	r3, [r3, #4]
 8011ec4:	681b      	ldr	r3, [r3, #0]
 8011ec6:	2b01      	cmp	r3, #1
 8011ec8:	d013      	beq.n	8011ef2 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x82>
 8011eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ecc:	695c      	ldr	r4, [r3, #20]
 8011ece:	6a3b      	ldr	r3, [r7, #32]
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	681b      	ldr	r3, [r3, #0]
 8011ed4:	2201      	movs	r2, #1
 8011ed6:	9203      	str	r2, [sp, #12]
 8011ed8:	9302      	str	r3, [sp, #8]
 8011eda:	4b46      	ldr	r3, [pc, #280]	; (8011ff4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x184>)
 8011edc:	9301      	str	r3, [sp, #4]
 8011ede:	4b46      	ldr	r3, [pc, #280]	; (8011ff8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x188>)
 8011ee0:	9300      	str	r3, [sp, #0]
 8011ee2:	f44f 7309 	mov.w	r3, #548	; 0x224
 8011ee6:	4a41      	ldr	r2, [pc, #260]	; (8011fec <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 8011ee8:	4944      	ldr	r1, [pc, #272]	; (8011ffc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18c>)
 8011eea:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011eec:	47a0      	blx	r4
 8011eee:	2301      	movs	r3, #1
 8011ef0:	e076      	b.n	8011fe0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
 8011ef2:	69fb      	ldr	r3, [r7, #28]
 8011ef4:	781b      	ldrb	r3, [r3, #0]
 8011ef6:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8011efa:	69fb      	ldr	r3, [r7, #28]
 8011efc:	6899      	ldr	r1, [r3, #8]
 8011efe:	69fb      	ldr	r3, [r7, #28]
 8011f00:	685c      	ldr	r4, [r3, #4]
      params->dilation_height_factor, params->dilation_width_factor, height,
 8011f02:	69fb      	ldr	r3, [r7, #28]
 8011f04:	695d      	ldr	r5, [r3, #20]
 8011f06:	69fb      	ldr	r3, [r7, #28]
 8011f08:	691b      	ldr	r3, [r3, #16]
      width, filter_height, filter_width, padding, &out_height, &out_width);
 8011f0a:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011f0c:	f107 0008 	add.w	r0, r7, #8
 8011f10:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011f14:	9207      	str	r2, [sp, #28]
 8011f16:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011f1a:	9206      	str	r2, [sp, #24]
 8011f1c:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8011f20:	9205      	str	r2, [sp, #20]
 8011f22:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011f24:	9204      	str	r2, [sp, #16]
 8011f26:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011f28:	9203      	str	r2, [sp, #12]
 8011f2a:	69ba      	ldr	r2, [r7, #24]
 8011f2c:	9202      	str	r2, [sp, #8]
 8011f2e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f30:	9201      	str	r2, [sp, #4]
 8011f32:	9300      	str	r3, [sp, #0]
 8011f34:	462b      	mov	r3, r5
 8011f36:	4622      	mov	r2, r4
 8011f38:	f7ff ff39 	bl	8011dae <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8011f3c:	4634      	mov	r4, r6
 8011f3e:	f107 0308 	add.w	r3, r7, #8
 8011f42:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f44:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8011f48:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011f4c:	2b01      	cmp	r3, #1
 8011f4e:	d046      	beq.n	8011fde <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x16e>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8011f50:	2200      	movs	r2, #0
 8011f52:	6a39      	ldr	r1, [r7, #32]
 8011f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f56:	f7fd f9b8 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011f5a:	6438      	str	r0, [r7, #64]	; 0x40
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8011f5c:	2201      	movs	r2, #1
 8011f5e:	6a39      	ldr	r1, [r7, #32]
 8011f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f62:	f7fd f9b2 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011f66:	63f8      	str	r0, [r7, #60]	; 0x3c
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 8011f68:	2202      	movs	r2, #2
 8011f6a:	6a39      	ldr	r1, [r7, #32]
 8011f6c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f6e:	f7ff fe94 	bl	8011c9a <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8011f72:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8011f74:	2200      	movs	r2, #0
 8011f76:	6a39      	ldr	r1, [r7, #32]
 8011f78:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f7a:	f7fd f9bc 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8011f7e:	6378      	str	r0, [r7, #52]	; 0x34
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 8011f80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f82:	689b      	ldr	r3, [r3, #8]
 8011f84:	685b      	ldr	r3, [r3, #4]
 8011f86:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8011f88:	69fb      	ldr	r3, [r7, #28]
 8011f8a:	330c      	adds	r3, #12
 8011f8c:	607b      	str	r3, [r7, #4]
 8011f8e:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011f90:	3210      	adds	r2, #16
 8011f92:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011f94:	3114      	adds	r1, #20
 8011f96:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8011f98:	3020      	adds	r0, #32
 8011f9a:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8011f9c:	3424      	adds	r4, #36	; 0x24
 8011f9e:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8011fa0:	69ad      	ldr	r5, [r5, #24]
 8011fa2:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011fa4:	69f6      	ldr	r6, [r6, #28]
 8011fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011fa8:	9308      	str	r3, [sp, #32]
 8011faa:	9607      	str	r6, [sp, #28]
 8011fac:	9506      	str	r5, [sp, #24]
 8011fae:	9405      	str	r4, [sp, #20]
 8011fb0:	9004      	str	r0, [sp, #16]
 8011fb2:	9103      	str	r1, [sp, #12]
 8011fb4:	9202      	str	r2, [sp, #8]
 8011fb6:	687b      	ldr	r3, [r7, #4]
 8011fb8:	9301      	str	r3, [sp, #4]
 8011fba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fbc:	9300      	str	r3, [sp, #0]
 8011fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fc0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011fc2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011fc4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fc6:	f7fc fdb5 	bl	800eb34 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 8011fca:	4603      	mov	r3, r0
 8011fcc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011fd0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d002      	beq.n	8011fde <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x16e>
 8011fd8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fdc:	e000      	b.n	8011fe0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
 8011fde:	2300      	movs	r3, #0
}
 8011fe0:	4618      	mov	r0, r3
 8011fe2:	374c      	adds	r7, #76	; 0x4c
 8011fe4:	46bd      	mov	sp, r7
 8011fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fe8:	0801e590 	.word	0x0801e590
 8011fec:	0801e528 	.word	0x0801e528
 8011ff0:	0801e578 	.word	0x0801e578
 8011ff4:	0801e5d0 	.word	0x0801e5d0
 8011ff8:	0801e5d4 	.word	0x0801e5d4
 8011ffc:	0801e5b4 	.word	0x0801e5b4

08012000 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8012000:	b580      	push	{r7, lr}
 8012002:	b086      	sub	sp, #24
 8012004:	af00      	add	r7, sp, #0
 8012006:	60f8      	str	r0, [r7, #12]
 8012008:	60b9      	str	r1, [r7, #8]
 801200a:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 801200c:	68fb      	ldr	r3, [r7, #12]
 801200e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012010:	2b00      	cmp	r3, #0
 8012012:	d101      	bne.n	8012018 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x18>
 8012014:	f008 ffd8 	bl	801afc8 <abort>
  void* data = nullptr;
 8012018:	2300      	movs	r3, #0
 801201a:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 801201c:	68fb      	ldr	r3, [r7, #12]
 801201e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012020:	f107 0214 	add.w	r2, r7, #20
 8012024:	2128      	movs	r1, #40	; 0x28
 8012026:	68f8      	ldr	r0, [r7, #12]
 8012028:	4798      	blx	r3
 801202a:	4603      	mov	r3, r0
 801202c:	2b01      	cmp	r3, #1
 801202e:	bf0c      	ite	eq
 8012030:	2301      	moveq	r3, #1
 8012032:	2300      	movne	r3, #0
 8012034:	b2db      	uxtb	r3, r3
 8012036:	2b00      	cmp	r3, #0
 8012038:	d001      	beq.n	801203e <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 801203a:	2300      	movs	r3, #0
 801203c:	e000      	b.n	8012040 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 801203e:	697b      	ldr	r3, [r7, #20]
}
 8012040:	4618      	mov	r0, r3
 8012042:	3718      	adds	r7, #24
 8012044:	46bd      	mov	sp, r7
 8012046:	bd80      	pop	{r7, pc}

08012048 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8012048:	b590      	push	{r4, r7, lr}
 801204a:	b099      	sub	sp, #100	; 0x64
 801204c:	af08      	add	r7, sp, #32
 801204e:	6078      	str	r0, [r7, #4]
 8012050:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	691b      	ldr	r3, [r3, #16]
 8012056:	2b00      	cmp	r3, #0
 8012058:	d101      	bne.n	801205e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 801205a:	f008 ffb5 	bl	801afc8 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 801205e:	683b      	ldr	r3, [r7, #0]
 8012060:	695b      	ldr	r3, [r3, #20]
 8012062:	2b00      	cmp	r3, #0
 8012064:	d101      	bne.n	801206a <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8012066:	f008 ffaf 	bl	801afc8 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 801206a:	683b      	ldr	r3, [r7, #0]
 801206c:	691b      	ldr	r3, [r3, #16]
 801206e:	63fb      	str	r3, [r7, #60]	; 0x3c
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);
 8012070:	683b      	ldr	r3, [r7, #0]
 8012072:	695b      	ldr	r3, [r3, #20]
 8012074:	63bb      	str	r3, [r7, #56]	; 0x38

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012076:	2200      	movs	r2, #0
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7fd f93b 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012080:	6378      	str	r0, [r7, #52]	; 0x34
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012082:	2200      	movs	r2, #0
 8012084:	6839      	ldr	r1, [r7, #0]
 8012086:	6878      	ldr	r0, [r7, #4]
 8012088:	f7fd f91f 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801208c:	6338      	str	r0, [r7, #48]	; 0x30
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 801208e:	2201      	movs	r2, #1
 8012090:	6839      	ldr	r1, [r7, #0]
 8012092:	6878      	ldr	r0, [r7, #4]
 8012094:	f7fd f919 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012098:	62f8      	str	r0, [r7, #44]	; 0x2c

  int input_width = input->dims->data[2];
 801209a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	68db      	ldr	r3, [r3, #12]
 80120a0:	62bb      	str	r3, [r7, #40]	; 0x28
  int input_height = input->dims->data[1];
 80120a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120a4:	689b      	ldr	r3, [r3, #8]
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	627b      	str	r3, [r7, #36]	; 0x24
  int filter_width = filter->dims->data[2];
 80120aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	68db      	ldr	r3, [r3, #12]
 80120b0:	623b      	str	r3, [r7, #32]
  int filter_height = filter->dims->data[1];
 80120b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b4:	689b      	ldr	r3, [r3, #8]
 80120b6:	689b      	ldr	r3, [r3, #8]
 80120b8:	61fb      	str	r3, [r7, #28]
  int output_width = output->dims->data[2];
 80120ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120bc:	689b      	ldr	r3, [r3, #8]
 80120be:	68db      	ldr	r3, [r3, #12]
 80120c0:	61bb      	str	r3, [r7, #24]
  int output_height = output->dims->data[1];
 80120c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c4:	689b      	ldr	r3, [r3, #8]
 80120c6:	689b      	ldr	r3, [r3, #8]
 80120c8:	617b      	str	r3, [r7, #20]

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 80120ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120cc:	689b      	ldr	r3, [r3, #8]
 80120ce:	685b      	ldr	r3, [r3, #4]
 80120d0:	613b      	str	r3, [r7, #16]
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 80120d2:	687b      	ldr	r3, [r7, #4]
 80120d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120d6:	693a      	ldr	r2, [r7, #16]
 80120d8:	0091      	lsls	r1, r2, #2
 80120da:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120dc:	3218      	adds	r2, #24
 80120de:	6878      	ldr	r0, [r7, #4]
 80120e0:	4798      	blx	r3
 80120e2:	4603      	mov	r3, r0
 80120e4:	73fb      	strb	r3, [r7, #15]
 80120e6:	7bfb      	ldrb	r3, [r7, #15]
 80120e8:	2b00      	cmp	r3, #0
 80120ea:	d001      	beq.n	80120f0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
 80120ec:	7bfb      	ldrb	r3, [r7, #15]
 80120ee:	e0ad      	b.n	801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 80120f0:	687b      	ldr	r3, [r7, #4]
 80120f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120f4:	693a      	ldr	r2, [r7, #16]
 80120f6:	0091      	lsls	r1, r2, #2
 80120f8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120fa:	321c      	adds	r2, #28
 80120fc:	6878      	ldr	r0, [r7, #4]
 80120fe:	4798      	blx	r3
 8012100:	4603      	mov	r3, r0
 8012102:	73bb      	strb	r3, [r7, #14]
 8012104:	7bbb      	ldrb	r3, [r7, #14]
 8012106:	2b00      	cmp	r3, #0
 8012108:	d001      	beq.n	801210e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
 801210a:	7bbb      	ldrb	r3, [r7, #14]
 801210c:	e09e      	b.n	801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 801210e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012110:	781b      	ldrb	r3, [r3, #0]
 8012112:	2b09      	cmp	r3, #9
 8012114:	f040 8083 	bne.w	801221e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8012118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801211a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801211e:	2b01      	cmp	r3, #1
 8012120:	d014      	beq.n	801214c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	695c      	ldr	r4, [r3, #20]
 8012126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012128:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801212c:	461a      	mov	r2, r3
 801212e:	2301      	movs	r3, #1
 8012130:	9303      	str	r3, [sp, #12]
 8012132:	9202      	str	r2, [sp, #8]
 8012134:	4b47      	ldr	r3, [pc, #284]	; (8012254 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 8012136:	9301      	str	r3, [sp, #4]
 8012138:	4b47      	ldr	r3, [pc, #284]	; (8012258 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 801213a:	9300      	str	r3, [sp, #0]
 801213c:	f240 2369 	movw	r3, #617	; 0x269
 8012140:	4a46      	ldr	r2, [pc, #280]	; (801225c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8012142:	4947      	ldr	r1, [pc, #284]	; (8012260 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 8012144:	6878      	ldr	r0, [r7, #4]
 8012146:	47a0      	blx	r4
 8012148:	2301      	movs	r3, #1
 801214a:	e07f      	b.n	801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 801214c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801214e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012150:	60bb      	str	r3, [r7, #8]
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 8012152:	68bb      	ldr	r3, [r7, #8]
 8012154:	2b00      	cmp	r3, #0
 8012156:	d10b      	bne.n	8012170 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
 8012158:	687b      	ldr	r3, [r7, #4]
 801215a:	695c      	ldr	r4, [r3, #20]
 801215c:	4b41      	ldr	r3, [pc, #260]	; (8012264 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 801215e:	9300      	str	r3, [sp, #0]
 8012160:	f240 236e 	movw	r3, #622	; 0x26e
 8012164:	4a3d      	ldr	r2, [pc, #244]	; (801225c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8012166:	4940      	ldr	r1, [pc, #256]	; (8012268 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8012168:	6878      	ldr	r0, [r7, #4]
 801216a:	47a0      	blx	r4
 801216c:	2301      	movs	r3, #1
 801216e:	e06d      	b.n	801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 8012170:	68bb      	ldr	r3, [r7, #8]
 8012172:	681b      	ldr	r3, [r3, #0]
 8012174:	2b00      	cmp	r3, #0
 8012176:	d10b      	bne.n	8012190 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8012178:	687b      	ldr	r3, [r7, #4]
 801217a:	695c      	ldr	r4, [r3, #20]
 801217c:	4b3b      	ldr	r3, [pc, #236]	; (801226c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 801217e:	9300      	str	r3, [sp, #0]
 8012180:	f240 236f 	movw	r3, #623	; 0x26f
 8012184:	4a35      	ldr	r2, [pc, #212]	; (801225c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8012186:	4938      	ldr	r1, [pc, #224]	; (8012268 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8012188:	6878      	ldr	r0, [r7, #4]
 801218a:	47a0      	blx	r4
 801218c:	2301      	movs	r3, #1
 801218e:	e05d      	b.n	801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 8012190:	68bb      	ldr	r3, [r7, #8]
 8012192:	685b      	ldr	r3, [r3, #4]
 8012194:	2b00      	cmp	r3, #0
 8012196:	d10b      	bne.n	80121b0 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x168>
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	695c      	ldr	r4, [r3, #20]
 801219c:	4b34      	ldr	r3, [pc, #208]	; (8012270 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 801219e:	9300      	str	r3, [sp, #0]
 80121a0:	f44f 731c 	mov.w	r3, #624	; 0x270
 80121a4:	4a2d      	ldr	r2, [pc, #180]	; (801225c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80121a6:	4930      	ldr	r1, [pc, #192]	; (8012268 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 80121a8:	6878      	ldr	r0, [r7, #4]
 80121aa:	47a0      	blx	r4
 80121ac:	2301      	movs	r3, #1
 80121ae:	e04d      	b.n	801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>

    TF_LITE_ENSURE(context,
 80121b0:	68bb      	ldr	r3, [r7, #8]
 80121b2:	681b      	ldr	r3, [r3, #0]
 80121b4:	681b      	ldr	r3, [r3, #0]
 80121b6:	2b01      	cmp	r3, #1
 80121b8:	d013      	beq.n	80121e2 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
 80121ba:	68bb      	ldr	r3, [r7, #8]
 80121bc:	681b      	ldr	r3, [r3, #0]
 80121be:	681a      	ldr	r2, [r3, #0]
 80121c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121c2:	689b      	ldr	r3, [r3, #8]
 80121c4:	685b      	ldr	r3, [r3, #4]
 80121c6:	429a      	cmp	r2, r3
 80121c8:	d00b      	beq.n	80121e2 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	695c      	ldr	r4, [r3, #20]
 80121ce:	4b29      	ldr	r3, [pc, #164]	; (8012274 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80121d0:	9300      	str	r3, [sp, #0]
 80121d2:	f240 2372 	movw	r3, #626	; 0x272
 80121d6:	4a21      	ldr	r2, [pc, #132]	; (801225c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80121d8:	4923      	ldr	r1, [pc, #140]	; (8012268 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 80121da:	6878      	ldr	r0, [r7, #4]
 80121dc:	47a0      	blx	r4
 80121de:	2301      	movs	r3, #1
 80121e0:	e034      	b.n	801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 80121e2:	68bb      	ldr	r3, [r7, #8]
 80121e4:	681b      	ldr	r3, [r3, #0]
 80121e6:	681a      	ldr	r2, [r3, #0]
 80121e8:	68bb      	ldr	r3, [r7, #8]
 80121ea:	685b      	ldr	r3, [r3, #4]
 80121ec:	681b      	ldr	r3, [r3, #0]
 80121ee:	429a      	cmp	r2, r3
 80121f0:	d015      	beq.n	801221e <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
 80121f2:	687b      	ldr	r3, [r7, #4]
 80121f4:	695c      	ldr	r4, [r3, #20]
 80121f6:	68bb      	ldr	r3, [r7, #8]
 80121f8:	681b      	ldr	r3, [r3, #0]
 80121fa:	681b      	ldr	r3, [r3, #0]
 80121fc:	68ba      	ldr	r2, [r7, #8]
 80121fe:	6852      	ldr	r2, [r2, #4]
 8012200:	6812      	ldr	r2, [r2, #0]
 8012202:	9203      	str	r2, [sp, #12]
 8012204:	9302      	str	r3, [sp, #8]
 8012206:	4b1c      	ldr	r3, [pc, #112]	; (8012278 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 8012208:	9301      	str	r3, [sp, #4]
 801220a:	4b1c      	ldr	r3, [pc, #112]	; (801227c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 801220c:	9300      	str	r3, [sp, #0]
 801220e:	f240 2376 	movw	r3, #630	; 0x276
 8012212:	4a12      	ldr	r2, [pc, #72]	; (801225c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 8012214:	4912      	ldr	r1, [pc, #72]	; (8012260 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 8012216:	6878      	ldr	r0, [r7, #4]
 8012218:	47a0      	blx	r4
 801221a:	2301      	movs	r3, #1
 801221c:	e016      	b.n	801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
 801221e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012220:	781b      	ldrb	r3, [r3, #0]
  return CalculateOpData(context, node, params, input_width, input_height,
 8012222:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012224:	9206      	str	r2, [sp, #24]
 8012226:	9305      	str	r3, [sp, #20]
 8012228:	697b      	ldr	r3, [r7, #20]
 801222a:	9304      	str	r3, [sp, #16]
 801222c:	69bb      	ldr	r3, [r7, #24]
 801222e:	9303      	str	r3, [sp, #12]
 8012230:	69fb      	ldr	r3, [r7, #28]
 8012232:	9302      	str	r3, [sp, #8]
 8012234:	6a3b      	ldr	r3, [r7, #32]
 8012236:	9301      	str	r3, [sp, #4]
 8012238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801223a:	9300      	str	r3, [sp, #0]
 801223c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801223e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012240:	6839      	ldr	r1, [r7, #0]
 8012242:	6878      	ldr	r0, [r7, #4]
 8012244:	f7ff fe14 	bl	8011e70 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
 8012248:	4603      	mov	r3, r0
                         output_height, input->type, data);
 801224a:	bf00      	nop
}  // namespace conv
 801224c:	4618      	mov	r0, r3
 801224e:	3744      	adds	r7, #68	; 0x44
 8012250:	46bd      	mov	sp, r7
 8012252:	bd90      	pop	{r4, r7, pc}
 8012254:	0801e5e8 	.word	0x0801e5e8
 8012258:	0801e604 	.word	0x0801e604
 801225c:	0801e528 	.word	0x0801e528
 8012260:	0801e5b4 	.word	0x0801e5b4
 8012264:	0801e620 	.word	0x0801e620
 8012268:	0801e578 	.word	0x0801e578
 801226c:	0801e634 	.word	0x0801e634
 8012270:	0801e650 	.word	0x0801e650
 8012274:	0801e670 	.word	0x0801e670
 8012278:	0801e6ec 	.word	0x0801e6ec
 801227c:	0801e714 	.word	0x0801e714

08012280 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, const OpData& data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 8012280:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012284:	b0be      	sub	sp, #248	; 0xf8
 8012286:	af08      	add	r7, sp, #32
 8012288:	6178      	str	r0, [r7, #20]
 801228a:	6139      	str	r1, [r7, #16]
 801228c:	60fa      	str	r2, [r7, #12]
 801228e:	60bb      	str	r3, [r7, #8]
  const int32_t input_offset = -input->params.zero_point;
 8012290:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8012294:	691b      	ldr	r3, [r3, #16]
 8012296:	425b      	negs	r3, r3
 8012298:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  const int32_t filter_offset = -filter->params.zero_point;
 801229c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80122a0:	691b      	ldr	r3, [r3, #16]
 80122a2:	425b      	negs	r3, r3
 80122a4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  const int32_t output_offset = output->params.zero_point;
 80122a8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80122ac:	691b      	ldr	r3, [r3, #16]
 80122ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 80122b2:	68fb      	ldr	r3, [r7, #12]
 80122b4:	781b      	ldrb	r3, [r3, #0]
 80122b6:	4618      	mov	r0, r3
 80122b8:	f7ff fdc3 	bl	8011e42 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 80122bc:	4603      	mov	r3, r0
 80122be:	773b      	strb	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 80122c0:	68bb      	ldr	r3, [r7, #8]
 80122c2:	681b      	ldr	r3, [r3, #0]
 80122c4:	b21b      	sxth	r3, r3
 80122c6:	83fb      	strh	r3, [r7, #30]
  op_params.padding_values.height = data.padding.height;
 80122c8:	68bb      	ldr	r3, [r7, #8]
 80122ca:	685b      	ldr	r3, [r3, #4]
 80122cc:	b21b      	sxth	r3, r3
 80122ce:	843b      	strh	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	685b      	ldr	r3, [r3, #4]
 80122d4:	b21b      	sxth	r3, r3
 80122d6:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.stride_height = params->stride_height;
 80122d8:	68fb      	ldr	r3, [r7, #12]
 80122da:	689b      	ldr	r3, [r3, #8]
 80122dc:	b21b      	sxth	r3, r3
 80122de:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 80122e0:	68fb      	ldr	r3, [r7, #12]
 80122e2:	691b      	ldr	r3, [r3, #16]
 80122e4:	b21b      	sxth	r3, r3
 80122e6:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.dilation_height_factor = params->dilation_height_factor;
 80122e8:	68fb      	ldr	r3, [r7, #12]
 80122ea:	695b      	ldr	r3, [r3, #20]
 80122ec:	b21b      	sxth	r3, r3
 80122ee:	85bb      	strh	r3, [r7, #44]	; 0x2c
  op_params.input_offset = input_offset;
 80122f0:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80122f4:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.weights_offset = filter_offset;
 80122f6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80122fa:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.output_offset = output_offset;
 80122fc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8012300:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.output_multiplier = data.output_multiplier;
 8012302:	68bb      	ldr	r3, [r7, #8]
 8012304:	691b      	ldr	r3, [r3, #16]
 8012306:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.output_shift = -data.output_shift;
 8012308:	68bb      	ldr	r3, [r7, #8]
 801230a:	695b      	ldr	r3, [r3, #20]
 801230c:	425b      	negs	r3, r3
 801230e:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_min = data.output_activation_min;
 8012310:	68bb      	ldr	r3, [r7, #8]
 8012312:	6a1b      	ldr	r3, [r3, #32]
 8012314:	647b      	str	r3, [r7, #68]	; 0x44
  op_params.quantized_activation_max = data.output_activation_max;
 8012316:	68bb      	ldr	r3, [r7, #8]
 8012318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801231a:	64bb      	str	r3, [r7, #72]	; 0x48
  reference_ops::Conv(op_params, GetTensorShape(input),
 801231c:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012320:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 8012324:	4618      	mov	r0, r3
 8012326:	f7fd f914 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801232a:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 801232e:	f7fc fff8 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8012332:	4680      	mov	r8, r0
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 8012334:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012338:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 801233c:	4618      	mov	r0, r3
 801233e:	f7fd f908 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8012342:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 8012346:	f7fc ffec 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801234a:	4604      	mov	r4, r0
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 801234c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012350:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 8012354:	4618      	mov	r0, r3
 8012356:	f7fd f8fc 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801235a:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 801235e:	f7fe ff66 	bl	801122e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8012362:	4605      	mov	r5, r0
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 8012364:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012368:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 801236c:	4618      	mov	r0, r3
 801236e:	f7fd f8f0 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8012372:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 8012376:	f7fc ffe5 	bl	800f344 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 801237a:	4606      	mov	r6, r0
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 801237c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012380:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 8012384:	4618      	mov	r0, r3
 8012386:	f7fd f8e4 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801238a:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 801238e:	f7fc ffd9 	bl	800f344 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8012392:	6078      	str	r0, [r7, #4]
 8012394:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8012398:	f107 0154 	add.w	r1, r7, #84	; 0x54
 801239c:	f107 001c 	add.w	r0, r7, #28
 80123a0:	2300      	movs	r3, #0
 80123a2:	9307      	str	r3, [sp, #28]
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	9306      	str	r3, [sp, #24]
 80123a8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80123ac:	9305      	str	r3, [sp, #20]
 80123ae:	9604      	str	r6, [sp, #16]
 80123b0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80123b4:	9303      	str	r3, [sp, #12]
 80123b6:	9502      	str	r5, [sp, #8]
 80123b8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123bc:	9301      	str	r3, [sp, #4]
 80123be:	9400      	str	r4, [sp, #0]
 80123c0:	4613      	mov	r3, r2
 80123c2:	4642      	mov	r2, r8
 80123c4:	f7ff f912 	bl	80115ec <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 80123c8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80123cc:	4618      	mov	r0, r3
 80123ce:	f7fc ffeb 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 80123d2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80123d6:	4618      	mov	r0, r3
 80123d8:	f7fc ffe6 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 80123dc:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123e0:	4618      	mov	r0, r3
 80123e2:	f7fc ffe1 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 80123e6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80123ea:	4618      	mov	r0, r3
 80123ec:	f7fc ffdc 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80123f0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80123f4:	4618      	mov	r0, r3
 80123f6:	f7fc ffd7 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(im2col), nullptr);
}
 80123fa:	bf00      	nop
 80123fc:	37d8      	adds	r7, #216	; 0xd8
 80123fe:	46bd      	mov	sp, r7
 8012400:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08012404 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, const OpData& data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
 8012404:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012406:	b0b5      	sub	sp, #212	; 0xd4
 8012408:	af08      	add	r7, sp, #32
 801240a:	6178      	str	r0, [r7, #20]
 801240c:	6139      	str	r1, [r7, #16]
 801240e:	60fa      	str	r2, [r7, #12]
 8012410:	60bb      	str	r3, [r7, #8]
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
 8012412:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8012416:	691b      	ldr	r3, [r3, #16]
 8012418:	425b      	negs	r3, r3
 801241a:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.output_offset = output->params.zero_point;
 801241c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012420:	691b      	ldr	r3, [r3, #16]
 8012422:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.stride_height = params->stride_height;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	689b      	ldr	r3, [r3, #8]
 8012428:	b21b      	sxth	r3, r3
 801242a:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.stride_width = params->stride_width;
 801242c:	68fb      	ldr	r3, [r7, #12]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	b21b      	sxth	r3, r3
 8012432:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.dilation_height_factor = params->dilation_height_factor;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	695b      	ldr	r3, [r3, #20]
 8012438:	b21b      	sxth	r3, r3
 801243a:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 801243c:	68fb      	ldr	r3, [r7, #12]
 801243e:	691b      	ldr	r3, [r3, #16]
 8012440:	b21b      	sxth	r3, r3
 8012442:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.padding_values.height = data.padding.height;
 8012444:	68bb      	ldr	r3, [r7, #8]
 8012446:	685b      	ldr	r3, [r3, #4]
 8012448:	b21b      	sxth	r3, r3
 801244a:	83bb      	strh	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	b21b      	sxth	r3, r3
 8012452:	837b      	strh	r3, [r7, #26]
  op_params.quantized_activation_min = data.output_activation_min;
 8012454:	68bb      	ldr	r3, [r7, #8]
 8012456:	6a1b      	ldr	r3, [r3, #32]
 8012458:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_max = data.output_activation_max;
 801245a:	68bb      	ldr	r3, [r7, #8]
 801245c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801245e:	647b      	str	r3, [r7, #68]	; 0x44

  reference_integer_ops::ConvPerChannel(
      op_params, data.per_channel_output_multiplier,
 8012460:	68bb      	ldr	r3, [r7, #8]
 8012462:	699c      	ldr	r4, [r3, #24]
      data.per_channel_output_shift, GetTensorShape(input),
 8012464:	68bb      	ldr	r3, [r7, #8]
 8012466:	69dd      	ldr	r5, [r3, #28]
 8012468:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801246c:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8012470:	4618      	mov	r0, r3
 8012472:	f7fd f86e 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 8012476:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 801247a:	f7fd f8aa 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801247e:	4606      	mov	r6, r0
      GetTensorData<int8>(input), GetTensorShape(filter),
 8012480:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012484:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8012488:	4618      	mov	r0, r3
 801248a:	f7fd f862 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 801248e:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 8012492:	f7fd f89e 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8012496:	6078      	str	r0, [r7, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
 8012498:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801249c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fd f856 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 80124a6:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 80124aa:	f7fe fec0 	bl	801122e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80124ae:	6038      	str	r0, [r7, #0]
      GetTensorData<int32>(bias), GetTensorShape(output),
 80124b0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80124b4:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80124b8:	4618      	mov	r0, r3
 80124ba:	f7fd f84a 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 80124be:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80124c2:	f7fd f897 	bl	800f5f4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80124c6:	4603      	mov	r3, r0
 80124c8:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80124cc:	f107 0018 	add.w	r0, r7, #24
 80124d0:	9306      	str	r3, [sp, #24]
 80124d2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80124d6:	9305      	str	r3, [sp, #20]
 80124d8:	683b      	ldr	r3, [r7, #0]
 80124da:	9304      	str	r3, [sp, #16]
 80124dc:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80124e0:	9303      	str	r3, [sp, #12]
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	9302      	str	r3, [sp, #8]
 80124e6:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80124ea:	9301      	str	r3, [sp, #4]
 80124ec:	9600      	str	r6, [sp, #0]
 80124ee:	4613      	mov	r3, r2
 80124f0:	462a      	mov	r2, r5
 80124f2:	4621      	mov	r1, r4
 80124f4:	f7ff fa21 	bl	801193a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
 80124f8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80124fc:	4618      	mov	r0, r3
 80124fe:	f7fc ff53 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
 8012502:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012506:	4618      	mov	r0, r3
 8012508:	f7fc ff4e 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
 801250c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012510:	4618      	mov	r0, r3
 8012512:	f7fc ff49 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
 8012516:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801251a:	4618      	mov	r0, r3
 801251c:	f7fc ff44 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(output));
}
 8012520:	bf00      	nop
 8012522:	37b4      	adds	r7, #180	; 0xb4
 8012524:	46bd      	mov	sp, r7
 8012526:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012528 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 8012528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801252c:	b0ba      	sub	sp, #232	; 0xe8
 801252e:	af08      	add	r7, sp, #32
 8012530:	60f8      	str	r0, [r7, #12]
 8012532:	60b9      	str	r1, [r7, #8]
 8012534:	607a      	str	r2, [r7, #4]
 8012536:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 8012538:	687b      	ldr	r3, [r7, #4]
 801253a:	7b1b      	ldrb	r3, [r3, #12]
 801253c:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012540:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8012544:	4618      	mov	r0, r3
 8012546:	f7fe fd63 	bl	8011010 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	781b      	ldrb	r3, [r3, #0]
 801254e:	4618      	mov	r0, r3
 8012550:	f7ff fc77 	bl	8011e42 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 8012554:	4603      	mov	r3, r0
 8012556:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data.padding.width;
 8012558:	683b      	ldr	r3, [r7, #0]
 801255a:	681b      	ldr	r3, [r3, #0]
 801255c:	b21b      	sxth	r3, r3
 801255e:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data.padding.height;
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	685b      	ldr	r3, [r3, #4]
 8012564:	b21b      	sxth	r3, r3
 8012566:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	b21b      	sxth	r3, r3
 801256e:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	689b      	ldr	r3, [r3, #8]
 8012574:	b21b      	sxth	r3, r3
 8012576:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8012578:	687b      	ldr	r3, [r7, #4]
 801257a:	691b      	ldr	r3, [r3, #16]
 801257c:	b21b      	sxth	r3, r3
 801257e:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	695b      	ldr	r3, [r3, #20]
 8012584:	b21b      	sxth	r3, r3
 8012586:	843b      	strh	r3, [r7, #32]
  op_params.float_activation_min = output_activation_min;
 8012588:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801258a:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 801258c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801258e:	647b      	str	r3, [r7, #68]	; 0x44

  reference_ops::Conv(op_params, GetTensorShape(input),
 8012590:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012594:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8012598:	4618      	mov	r0, r3
 801259a:	f7fc ffda 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801259e:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 80125a2:	f7fc fff4 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80125a6:	4680      	mov	r8, r0
                      GetTensorData<float>(input), GetTensorShape(filter),
 80125a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80125ac:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fc ffce 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80125b6:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80125ba:	f7fc ffe8 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80125be:	4604      	mov	r4, r0
                      GetTensorData<float>(filter), GetTensorShape(bias),
 80125c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80125c4:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7fc ffc2 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80125ce:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80125d2:	f7fc ffdc 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80125d6:	4605      	mov	r5, r0
                      GetTensorData<float>(bias), GetTensorShape(output),
 80125d8:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80125dc:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7fc ffb6 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80125e6:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80125ea:	f7fc ffe1 	bl	800f5b0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 80125ee:	4606      	mov	r6, r0
                      GetTensorData<float>(output), GetTensorShape(im2col),
 80125f0:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80125f4:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80125f8:	4618      	mov	r0, r3
 80125fa:	f7fc ffaa 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80125fe:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 8012602:	f7fc ffd5 	bl	800f5b0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8012606:	4603      	mov	r3, r0
 8012608:	f107 0268 	add.w	r2, r7, #104	; 0x68
 801260c:	f107 0150 	add.w	r1, r7, #80	; 0x50
 8012610:	f107 0010 	add.w	r0, r7, #16
 8012614:	9306      	str	r3, [sp, #24]
 8012616:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801261a:	9305      	str	r3, [sp, #20]
 801261c:	9604      	str	r6, [sp, #16]
 801261e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012622:	9303      	str	r3, [sp, #12]
 8012624:	9502      	str	r5, [sp, #8]
 8012626:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801262a:	9301      	str	r3, [sp, #4]
 801262c:	9400      	str	r4, [sp, #0]
 801262e:	4613      	mov	r3, r2
 8012630:	4642      	mov	r2, r8
 8012632:	f7fe fe69 	bl	8011308 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
 8012636:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 801263a:	4618      	mov	r0, r3
 801263c:	f7fc feb4 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
 8012640:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8012644:	4618      	mov	r0, r3
 8012646:	f7fc feaf 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
 801264a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801264e:	4618      	mov	r0, r3
 8012650:	f7fc feaa 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
 8012654:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012658:	4618      	mov	r0, r3
 801265a:	f7fc fea5 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801265e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012662:	4618      	mov	r0, r3
 8012664:	f7fc fea0 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
 8012668:	bf00      	nop
 801266a:	37c8      	adds	r7, #200	; 0xc8
 801266c:	46bd      	mov	sp, r7
 801266e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08012674 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8012674:	b590      	push	{r4, r7, lr}
 8012676:	b08f      	sub	sp, #60	; 0x3c
 8012678:	af06      	add	r7, sp, #24
 801267a:	6078      	str	r0, [r7, #4]
 801267c:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 801267e:	683b      	ldr	r3, [r7, #0]
 8012680:	695b      	ldr	r3, [r3, #20]
 8012682:	61fb      	str	r3, [r7, #28]

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012684:	2200      	movs	r2, #0
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7fc fe34 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801268e:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012690:	2200      	movs	r2, #0
 8012692:	6839      	ldr	r1, [r7, #0]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7fc fe18 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801269a:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 801269c:	2201      	movs	r2, #1
 801269e:	6839      	ldr	r1, [r7, #0]
 80126a0:	6878      	ldr	r0, [r7, #4]
 80126a2:	f7fc fe12 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80126a6:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 80126a8:	2202      	movs	r2, #2
 80126aa:	6839      	ldr	r1, [r7, #0]
 80126ac:	6878      	ldr	r0, [r7, #4]
 80126ae:	f7ff faf4 	bl	8011c9a <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 80126b2:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 80126b4:	683b      	ldr	r3, [r7, #0]
 80126b6:	691b      	ldr	r3, [r3, #16]
 80126b8:	2b00      	cmp	r3, #0
 80126ba:	d101      	bne.n	80126c0 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
 80126bc:	f008 fc84 	bl	801afc8 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80126c0:	683b      	ldr	r3, [r7, #0]
 80126c2:	691b      	ldr	r3, [r3, #16]
 80126c4:	60bb      	str	r3, [r7, #8]

  switch (input->type) {  // Already know in/out types are same.
 80126c6:	697b      	ldr	r3, [r7, #20]
 80126c8:	781b      	ldrb	r3, [r3, #0]
 80126ca:	2b09      	cmp	r3, #9
 80126cc:	d019      	beq.n	8012702 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
 80126ce:	2b09      	cmp	r3, #9
 80126d0:	dc3b      	bgt.n	801274a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6>
 80126d2:	2b01      	cmp	r3, #1
 80126d4:	d002      	beq.n	80126dc <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x68>
 80126d6:	2b03      	cmp	r3, #3
 80126d8:	d024      	beq.n	8012724 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 80126da:	e036      	b.n	801274a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
 80126dc:	69bb      	ldr	r3, [r7, #24]
 80126de:	9305      	str	r3, [sp, #20]
 80126e0:	2300      	movs	r3, #0
 80126e2:	9304      	str	r3, [sp, #16]
 80126e4:	2300      	movs	r3, #0
 80126e6:	9303      	str	r3, [sp, #12]
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	9302      	str	r3, [sp, #8]
 80126ec:	693b      	ldr	r3, [r7, #16]
 80126ee:	9301      	str	r3, [sp, #4]
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	9300      	str	r3, [sp, #0]
 80126f4:	68bb      	ldr	r3, [r7, #8]
 80126f6:	69fa      	ldr	r2, [r7, #28]
 80126f8:	6839      	ldr	r1, [r7, #0]
 80126fa:	6878      	ldr	r0, [r7, #4]
 80126fc:	f7ff ff14 	bl	8012528 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                nullptr, output);
      break;
 8012700:	e032      	b.n	8012768 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 8012702:	2300      	movs	r3, #0
 8012704:	9304      	str	r3, [sp, #16]
 8012706:	69bb      	ldr	r3, [r7, #24]
 8012708:	9303      	str	r3, [sp, #12]
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	9302      	str	r3, [sp, #8]
 801270e:	693b      	ldr	r3, [r7, #16]
 8012710:	9301      	str	r3, [sp, #4]
 8012712:	697b      	ldr	r3, [r7, #20]
 8012714:	9300      	str	r3, [sp, #0]
 8012716:	68bb      	ldr	r3, [r7, #8]
 8012718:	69fa      	ldr	r2, [r7, #28]
 801271a:	6839      	ldr	r1, [r7, #0]
 801271c:	6878      	ldr	r0, [r7, #4]
 801271e:	f7ff fe71 	bl	8012404 <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
                              output, nullptr);
      break;
 8012722:	e021      	b.n	8012768 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
 8012724:	69bb      	ldr	r3, [r7, #24]
 8012726:	9305      	str	r3, [sp, #20]
 8012728:	2300      	movs	r3, #0
 801272a:	9304      	str	r3, [sp, #16]
 801272c:	2300      	movs	r3, #0
 801272e:	9303      	str	r3, [sp, #12]
 8012730:	68fb      	ldr	r3, [r7, #12]
 8012732:	9302      	str	r3, [sp, #8]
 8012734:	693b      	ldr	r3, [r7, #16]
 8012736:	9301      	str	r3, [sp, #4]
 8012738:	697b      	ldr	r3, [r7, #20]
 801273a:	9300      	str	r3, [sp, #0]
 801273c:	68bb      	ldr	r3, [r7, #8]
 801273e:	69fa      	ldr	r2, [r7, #28]
 8012740:	6839      	ldr	r1, [r7, #0]
 8012742:	6878      	ldr	r0, [r7, #4]
 8012744:	f7ff fd9c 	bl	8012280 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                    nullptr, output);
      break;
 8012748:	e00e      	b.n	8012768 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	695c      	ldr	r4, [r3, #20]
 801274e:	697b      	ldr	r3, [r7, #20]
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	4618      	mov	r0, r3
 8012754:	f7fb fed4 	bl	800e500 <TfLiteTypeGetName>
 8012758:	4602      	mov	r2, r0
 801275a:	697b      	ldr	r3, [r7, #20]
 801275c:	781b      	ldrb	r3, [r3, #0]
 801275e:	4905      	ldr	r1, [pc, #20]	; (8012774 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x100>)
 8012760:	6878      	ldr	r0, [r7, #4]
 8012762:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8012764:	2301      	movs	r3, #1
 8012766:	e000      	b.n	801276a <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  }
  return kTfLiteOk;
 8012768:	2300      	movs	r3, #0
}
 801276a:	4618      	mov	r0, r3
 801276c:	3724      	adds	r7, #36	; 0x24
 801276e:	46bd      	mov	sp, r7
 8012770:	bd90      	pop	{r4, r7, pc}
 8012772:	bf00      	nop
 8012774:	0801e738 	.word	0x0801e738

08012778 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration* Register_CONV_2D() {
 8012778:	b480      	push	{r7}
 801277a:	af00      	add	r7, sp, #0
                                 /*invoke=*/conv::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 801277c:	4b02      	ldr	r3, [pc, #8]	; (8012788 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x10>)
}
 801277e:	4618      	mov	r0, r3
 8012780:	46bd      	mov	sp, r7
 8012782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012786:	4770      	bx	lr
 8012788:	20000084 	.word	0x20000084

0801278c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 801278c:	b580      	push	{r7, lr}
 801278e:	b086      	sub	sp, #24
 8012790:	af00      	add	r7, sp, #0
 8012792:	6078      	str	r0, [r7, #4]
 8012794:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 8012796:	6878      	ldr	r0, [r7, #4]
 8012798:	f7fc fe1c 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801279c:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 801279e:	683b      	ldr	r3, [r7, #0]
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	db03      	blt.n	80127ac <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 80127a4:	683a      	ldr	r2, [r7, #0]
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	429a      	cmp	r2, r3
 80127aa:	db01      	blt.n	80127b0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 80127ac:	f008 fc0c 	bl	801afc8 <abort>
  const auto* dims_data = shape.DimsData();
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f7fc fe53 	bl	800f45c <_ZNK6tflite12RuntimeShape8DimsDataEv>
 80127b6:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 80127b8:	2301      	movs	r3, #1
 80127ba:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80127bc:	2300      	movs	r3, #0
 80127be:	613b      	str	r3, [r7, #16]
 80127c0:	693a      	ldr	r2, [r7, #16]
 80127c2:	68fb      	ldr	r3, [r7, #12]
 80127c4:	429a      	cmp	r2, r3
 80127c6:	da12      	bge.n	80127ee <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80127c8:	693a      	ldr	r2, [r7, #16]
 80127ca:	683b      	ldr	r3, [r7, #0]
 80127cc:	429a      	cmp	r2, r3
 80127ce:	d005      	beq.n	80127dc <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 80127d0:	693b      	ldr	r3, [r7, #16]
 80127d2:	009b      	lsls	r3, r3, #2
 80127d4:	68ba      	ldr	r2, [r7, #8]
 80127d6:	4413      	add	r3, r2
 80127d8:	681b      	ldr	r3, [r3, #0]
 80127da:	e000      	b.n	80127de <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 80127dc:	2301      	movs	r3, #1
 80127de:	697a      	ldr	r2, [r7, #20]
 80127e0:	fb03 f302 	mul.w	r3, r3, r2
 80127e4:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80127e6:	693b      	ldr	r3, [r7, #16]
 80127e8:	3301      	adds	r3, #1
 80127ea:	613b      	str	r3, [r7, #16]
 80127ec:	e7e8      	b.n	80127c0 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  return flat_size;
 80127ee:	697b      	ldr	r3, [r7, #20]
}
 80127f0:	4618      	mov	r0, r3
 80127f2:	3718      	adds	r7, #24
 80127f4:	46bd      	mov	sp, r7
 80127f6:	bd80      	pop	{r7, pc}

080127f8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 80127f8:	b590      	push	{r4, r7, lr}
 80127fa:	b091      	sub	sp, #68	; 0x44
 80127fc:	af00      	add	r7, sp, #0
 80127fe:	60f8      	str	r0, [r7, #12]
 8012800:	60b9      	str	r1, [r7, #8]
 8012802:	607a      	str	r2, [r7, #4]
 8012804:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	69db      	ldr	r3, [r3, #28]
 801280a:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	6a1b      	ldr	r3, [r3, #32]
 8012810:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 8012812:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012814:	f7fc fdde 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012818:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 801281a:	6838      	ldr	r0, [r7, #0]
 801281c:	f7fc fdda 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012820:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 8012822:	6a3b      	ldr	r3, [r7, #32]
 8012824:	3b01      	subs	r3, #1
 8012826:	4619      	mov	r1, r3
 8012828:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 801282a:	f7ff ffaf 	bl	801278c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801282e:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8012830:	69fb      	ldr	r3, [r7, #28]
 8012832:	1e99      	subs	r1, r3, #2
 8012834:	6a3b      	ldr	r3, [r7, #32]
 8012836:	3b01      	subs	r3, #1
 8012838:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 801283a:	6838      	ldr	r0, [r7, #0]
 801283c:	f7fe fd22 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012840:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 8012842:	69fb      	ldr	r3, [r7, #28]
 8012844:	3b01      	subs	r3, #1
 8012846:	4619      	mov	r1, r3
 8012848:	6838      	ldr	r0, [r7, #0]
 801284a:	f7fc fdcf 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801284e:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8012850:	2300      	movs	r3, #0
 8012852:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012854:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012856:	69bb      	ldr	r3, [r7, #24]
 8012858:	429a      	cmp	r2, r3
 801285a:	da5f      	bge.n	801291c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801285c:	2300      	movs	r3, #0
 801285e:	63bb      	str	r3, [r7, #56]	; 0x38
 8012860:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012862:	697b      	ldr	r3, [r7, #20]
 8012864:	429a      	cmp	r2, r3
 8012866:	da55      	bge.n	8012914 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8012868:	f04f 0300 	mov.w	r3, #0
 801286c:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 801286e:	2300      	movs	r3, #0
 8012870:	633b      	str	r3, [r7, #48]	; 0x30
 8012872:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012874:	693b      	ldr	r3, [r7, #16]
 8012876:	429a      	cmp	r2, r3
 8012878:	da21      	bge.n	80128be <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 801287a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801287c:	693a      	ldr	r2, [r7, #16]
 801287e:	fb02 f203 	mul.w	r2, r2, r3
 8012882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012884:	4413      	add	r3, r2
 8012886:	009b      	lsls	r3, r3, #2
 8012888:	687a      	ldr	r2, [r7, #4]
 801288a:	4413      	add	r3, r2
 801288c:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8012890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012892:	693a      	ldr	r2, [r7, #16]
 8012894:	fb02 f203 	mul.w	r2, r2, r3
 8012898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801289a:	4413      	add	r3, r2
 801289c:	009b      	lsls	r3, r3, #2
 801289e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80128a0:	4413      	add	r3, r2
 80128a2:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 80128a6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80128aa:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80128ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128b2:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 80128b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128b8:	3301      	adds	r3, #1
 80128ba:	633b      	str	r3, [r7, #48]	; 0x30
 80128bc:	e7d9      	b.n	8012872 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 80128be:	f04f 0300 	mov.w	r3, #0
 80128c2:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 80128c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80128c6:	2b00      	cmp	r3, #0
 80128c8:	d005      	beq.n	80128d6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 80128ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128cc:	009b      	lsls	r3, r3, #2
 80128ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80128d0:	4413      	add	r3, r2
 80128d2:	681b      	ldr	r3, [r3, #0]
 80128d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 80128d6:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80128da:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80128de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128e2:	697b      	ldr	r3, [r7, #20]
 80128e4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128e6:	fb02 f203 	mul.w	r2, r2, r3
 80128ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128ec:	4413      	add	r3, r2
 80128ee:	009b      	lsls	r3, r3, #2
 80128f0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80128f2:	18d4      	adds	r4, r2, r3
 80128f4:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80128f8:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80128fc:	eeb0 0a67 	vmov.f32	s0, s15
 8012900:	f7fd f867 	bl	800f9d2 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 8012904:	eef0 7a40 	vmov.f32	s15, s0
 8012908:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 801290c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801290e:	3301      	adds	r3, #1
 8012910:	63bb      	str	r3, [r7, #56]	; 0x38
 8012912:	e7a5      	b.n	8012860 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 8012914:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012916:	3301      	adds	r3, #1
 8012918:	63fb      	str	r3, [r7, #60]	; 0x3c
 801291a:	e79b      	b.n	8012854 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 801291c:	bf00      	nop
 801291e:	3744      	adds	r7, #68	; 0x44
 8012920:	46bd      	mov	sp, r7
 8012922:	bd90      	pop	{r4, r7, pc}

08012924 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 8012924:	b580      	push	{r7, lr}
 8012926:	b096      	sub	sp, #88	; 0x58
 8012928:	af00      	add	r7, sp, #0
 801292a:	60f8      	str	r0, [r7, #12]
 801292c:	60b9      	str	r1, [r7, #8]
 801292e:	607a      	str	r2, [r7, #4]
 8012930:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	681b      	ldr	r3, [r3, #0]
 8012936:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	685b      	ldr	r3, [r3, #4]
 801293c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	689b      	ldr	r3, [r3, #8]
 8012942:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	68db      	ldr	r3, [r3, #12]
 8012948:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	691b      	ldr	r3, [r3, #16]
 801294e:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8012950:	68fb      	ldr	r3, [r7, #12]
 8012952:	695b      	ldr	r3, [r3, #20]
 8012954:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8012956:	68fb      	ldr	r3, [r7, #12]
 8012958:	699b      	ldr	r3, [r3, #24]
 801295a:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 801295c:	6838      	ldr	r0, [r7, #0]
 801295e:	f7fc fd39 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012962:	4603      	mov	r3, r0
 8012964:	2b01      	cmp	r3, #1
 8012966:	dc01      	bgt.n	801296c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8012968:	f008 fb2e 	bl	801afc8 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 801296c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801296e:	f7fc fd31 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012972:	4603      	mov	r3, r0
 8012974:	2b00      	cmp	r3, #0
 8012976:	dc01      	bgt.n	801297c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8012978:	f008 fb26 	bl	801afc8 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801297c:	69ba      	ldr	r2, [r7, #24]
 801297e:	697b      	ldr	r3, [r7, #20]
 8012980:	429a      	cmp	r2, r3
 8012982:	dd01      	ble.n	8012988 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 8012984:	f008 fb20 	bl	801afc8 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8012988:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 801298a:	f7fc fd23 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801298e:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8012990:	6838      	ldr	r0, [r7, #0]
 8012992:	f7fc fd1f 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012996:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8012998:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801299a:	3b01      	subs	r3, #1
 801299c:	4619      	mov	r1, r3
 801299e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 80129a0:	f7ff fef4 	bl	801278c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 80129a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 80129a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a8:	1e99      	subs	r1, r3, #2
 80129aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80129ac:	3b01      	subs	r3, #1
 80129ae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80129b0:	6838      	ldr	r0, [r7, #0]
 80129b2:	f7fe fc67 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80129b6:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80129b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129ba:	3b01      	subs	r3, #1
 80129bc:	4619      	mov	r1, r3
 80129be:	6838      	ldr	r0, [r7, #0]
 80129c0:	f7fc fd14 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80129c4:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 80129c6:	2300      	movs	r3, #0
 80129c8:	657b      	str	r3, [r7, #84]	; 0x54
 80129ca:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80129cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129ce:	429a      	cmp	r2, r3
 80129d0:	da73      	bge.n	8012aba <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80129d2:	2300      	movs	r3, #0
 80129d4:	653b      	str	r3, [r7, #80]	; 0x50
 80129d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129da:	429a      	cmp	r2, r3
 80129dc:	da69      	bge.n	8012ab2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 80129de:	2300      	movs	r3, #0
 80129e0:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 80129e2:	2300      	movs	r3, #0
 80129e4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80129e6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129ea:	429a      	cmp	r2, r3
 80129ec:	da24      	bge.n	8012a38 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 80129ee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f2:	fb02 f203 	mul.w	r2, r2, r3
 80129f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129f8:	4413      	add	r3, r2
 80129fa:	461a      	mov	r2, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	4413      	add	r3, r2
 8012a00:	781b      	ldrb	r3, [r3, #0]
 8012a02:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8012a04:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a06:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012a08:	fb02 f203 	mul.w	r2, r2, r3
 8012a0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a0e:	4413      	add	r3, r2
 8012a10:	461a      	mov	r2, r3
 8012a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012a14:	4413      	add	r3, r2
 8012a16:	781b      	ldrb	r3, [r3, #0]
 8012a18:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8012a1a:	69fa      	ldr	r2, [r7, #28]
 8012a1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a1e:	4413      	add	r3, r2
 8012a20:	6a39      	ldr	r1, [r7, #32]
 8012a22:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a24:	440a      	add	r2, r1
 8012a26:	fb02 f203 	mul.w	r2, r2, r3
 8012a2a:	693b      	ldr	r3, [r7, #16]
 8012a2c:	4413      	add	r3, r2
 8012a2e:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8012a30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a32:	3301      	adds	r3, #1
 8012a34:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a36:	e7d6      	b.n	80129e6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8012a38:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a3a:	2b00      	cmp	r3, #0
 8012a3c:	d007      	beq.n	8012a4e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 8012a3e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a40:	009b      	lsls	r3, r3, #2
 8012a42:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012a44:	4413      	add	r3, r2
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	693b      	ldr	r3, [r7, #16]
 8012a4a:	4413      	add	r3, r2
 8012a4c:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8012a4e:	693b      	ldr	r3, [r7, #16]
 8012a50:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a52:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a54:	4618      	mov	r0, r3
 8012a56:	f7fe fc33 	bl	80112c0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012a5a:	4603      	mov	r3, r0
 8012a5c:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8012a5e:	693a      	ldr	r2, [r7, #16]
 8012a60:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a62:	4413      	add	r3, r2
 8012a64:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8012a66:	f107 0218 	add.w	r2, r7, #24
 8012a6a:	f107 0310 	add.w	r3, r7, #16
 8012a6e:	4611      	mov	r1, r2
 8012a70:	4618      	mov	r0, r3
 8012a72:	f7fc fc02 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 8012a76:	4603      	mov	r3, r0
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8012a7c:	f107 0214 	add.w	r2, r7, #20
 8012a80:	f107 0310 	add.w	r3, r7, #16
 8012a84:	4611      	mov	r1, r2
 8012a86:	4618      	mov	r0, r3
 8012a88:	f7fc fc0b 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8012a8c:	4603      	mov	r3, r0
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 8012a92:	6939      	ldr	r1, [r7, #16]
 8012a94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a96:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a98:	fb02 f203 	mul.w	r2, r2, r3
 8012a9c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a9e:	4413      	add	r3, r2
 8012aa0:	461a      	mov	r2, r3
 8012aa2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012aa4:	4413      	add	r3, r2
 8012aa6:	b2ca      	uxtb	r2, r1
 8012aa8:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012aaa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012aac:	3301      	adds	r3, #1
 8012aae:	653b      	str	r3, [r7, #80]	; 0x50
 8012ab0:	e791      	b.n	80129d6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8012ab2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ab4:	3301      	adds	r3, #1
 8012ab6:	657b      	str	r3, [r7, #84]	; 0x54
 8012ab8:	e787      	b.n	80129ca <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8012aba:	bf00      	nop
 8012abc:	3758      	adds	r7, #88	; 0x58
 8012abe:	46bd      	mov	sp, r7
 8012ac0:	bd80      	pop	{r7, pc}

08012ac2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 8012ac2:	b580      	push	{r7, lr}
 8012ac4:	b098      	sub	sp, #96	; 0x60
 8012ac6:	af00      	add	r7, sp, #0
 8012ac8:	60f8      	str	r0, [r7, #12]
 8012aca:	60b9      	str	r1, [r7, #8]
 8012acc:	607a      	str	r2, [r7, #4]
 8012ace:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	681b      	ldr	r3, [r3, #0]
 8012ad4:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	685b      	ldr	r3, [r3, #4]
 8012ada:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	689b      	ldr	r3, [r3, #8]
 8012ae0:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 output_multiplier = params.output_multiplier;
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	68db      	ldr	r3, [r3, #12]
 8012ae6:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 8012ae8:	68fb      	ldr	r3, [r7, #12]
 8012aea:	691b      	ldr	r3, [r3, #16]
 8012aec:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_activation_min = params.quantized_activation_min;
 8012aee:	68fb      	ldr	r3, [r7, #12]
 8012af0:	695b      	ldr	r3, [r3, #20]
 8012af2:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32 output_activation_max = params.quantized_activation_max;
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	699b      	ldr	r3, [r3, #24]
 8012af8:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8012afa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012afe:	429a      	cmp	r2, r3
 8012b00:	dd01      	ble.n	8012b06 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 8012b02:	f008 fa61 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 8012b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012b08:	2b00      	cmp	r3, #0
 8012b0a:	d001      	beq.n	8012b10 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 8012b0c:	f008 fa5c 	bl	801afc8 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8012b10:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012b12:	f7fc fc5f 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012b16:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8012b18:	6838      	ldr	r0, [r7, #0]
 8012b1a:	f7fc fc5b 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012b1e:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8012b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b22:	3b01      	subs	r3, #1
 8012b24:	4619      	mov	r1, r3
 8012b26:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012b28:	f7ff fe30 	bl	801278c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8012b2c:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8012b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b30:	1e99      	subs	r1, r3, #2
 8012b32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b34:	3b01      	subs	r3, #1
 8012b36:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012b38:	6838      	ldr	r0, [r7, #0]
 8012b3a:	f7fe fba3 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012b3e:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8012b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b42:	3b01      	subs	r3, #1
 8012b44:	4619      	mov	r1, r3
 8012b46:	6838      	ldr	r0, [r7, #0]
 8012b48:	f7fc fc50 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8012b4c:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8012b4e:	2300      	movs	r3, #0
 8012b50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012b52:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012b54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b56:	429a      	cmp	r2, r3
 8012b58:	da7c      	bge.n	8012c54 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8012b5e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b62:	429a      	cmp	r2, r3
 8012b64:	da72      	bge.n	8012c4c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 8012b66:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012b68:	009b      	lsls	r3, r3, #2
 8012b6a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012b6c:	4413      	add	r3, r2
 8012b6e:	681b      	ldr	r3, [r3, #0]
 8012b70:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 8012b72:	2300      	movs	r3, #0
 8012b74:	657b      	str	r3, [r7, #84]	; 0x54
 8012b76:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b7a:	429a      	cmp	r2, r3
 8012b7c:	da2c      	bge.n	8012bd8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 8012b7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b82:	fb02 f203 	mul.w	r2, r2, r3
 8012b86:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b88:	4413      	add	r3, r2
 8012b8a:	461a      	mov	r2, r3
 8012b8c:	687b      	ldr	r3, [r7, #4]
 8012b8e:	4413      	add	r3, r2
 8012b90:	781b      	ldrb	r3, [r3, #0]
 8012b92:	b29a      	uxth	r2, r3
 8012b94:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b96:	b29b      	uxth	r3, r3
 8012b98:	4413      	add	r3, r2
 8012b9a:	b29b      	uxth	r3, r3
 8012b9c:	847b      	strh	r3, [r7, #34]	; 0x22
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 8012b9e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012ba0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012ba2:	fb02 f203 	mul.w	r2, r2, r3
 8012ba6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ba8:	4413      	add	r3, r2
 8012baa:	461a      	mov	r2, r3
 8012bac:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012bae:	4413      	add	r3, r2
 8012bb0:	781b      	ldrb	r3, [r3, #0]
 8012bb2:	b29a      	uxth	r2, r3
 8012bb4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012bb6:	b29b      	uxth	r3, r3
 8012bb8:	4413      	add	r3, r2
 8012bba:	b29b      	uxth	r3, r3
 8012bbc:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 8012bbe:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012bc2:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8012bc6:	fb02 f203 	mul.w	r2, r2, r3
 8012bca:	697b      	ldr	r3, [r7, #20]
 8012bcc:	4413      	add	r3, r2
 8012bce:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8012bd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bd2:	3301      	adds	r3, #1
 8012bd4:	657b      	str	r3, [r7, #84]	; 0x54
 8012bd6:	e7ce      	b.n	8012b76 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 8012bd8:	697b      	ldr	r3, [r7, #20]
 8012bda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012bdc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012bde:	4618      	mov	r0, r3
 8012be0:	f7fe fb6e 	bl	80112c0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012be4:	4603      	mov	r3, r0
      accum =
 8012be6:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 8012be8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bec:	1ad3      	subs	r3, r2, r3
 8012bee:	61bb      	str	r3, [r7, #24]
 8012bf0:	f107 0218 	add.w	r2, r7, #24
 8012bf4:	f107 0314 	add.w	r3, r7, #20
 8012bf8:	4611      	mov	r1, r2
 8012bfa:	4618      	mov	r0, r3
 8012bfc:	f7fc fb3d 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 8012c00:	4603      	mov	r3, r0
 8012c02:	681b      	ldr	r3, [r3, #0]
 8012c04:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 8012c06:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012c08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c0a:	1ad3      	subs	r3, r2, r3
 8012c0c:	61fb      	str	r3, [r7, #28]
 8012c0e:	f107 021c 	add.w	r2, r7, #28
 8012c12:	f107 0314 	add.w	r3, r7, #20
 8012c16:	4611      	mov	r1, r2
 8012c18:	4618      	mov	r0, r3
 8012c1a:	f7fc fb42 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8012c1e:	4603      	mov	r3, r0
 8012c20:	681b      	ldr	r3, [r3, #0]
 8012c22:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 8012c24:	697a      	ldr	r2, [r7, #20]
 8012c26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c28:	4413      	add	r3, r2
 8012c2a:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 8012c2c:	6979      	ldr	r1, [r7, #20]
 8012c2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c30:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012c32:	fb02 f203 	mul.w	r2, r2, r3
 8012c36:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c38:	4413      	add	r3, r2
 8012c3a:	005b      	lsls	r3, r3, #1
 8012c3c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c3e:	4413      	add	r3, r2
 8012c40:	b20a      	sxth	r2, r1
 8012c42:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012c44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c46:	3301      	adds	r3, #1
 8012c48:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c4a:	e788      	b.n	8012b5e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 8012c4c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c4e:	3301      	adds	r3, #1
 8012c50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012c52:	e77e      	b.n	8012b52 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 8012c54:	bf00      	nop
 8012c56:	3760      	adds	r7, #96	; 0x60
 8012c58:	46bd      	mov	sp, r7
 8012c5a:	bd80      	pop	{r7, pc}

08012c5c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8012c5c:	b580      	push	{r7, lr}
 8012c5e:	b096      	sub	sp, #88	; 0x58
 8012c60:	af00      	add	r7, sp, #0
 8012c62:	60f8      	str	r0, [r7, #12]
 8012c64:	60b9      	str	r1, [r7, #8]
 8012c66:	607a      	str	r2, [r7, #4]
 8012c68:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	681b      	ldr	r3, [r3, #0]
 8012c6e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	685b      	ldr	r3, [r3, #4]
 8012c74:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	689b      	ldr	r3, [r3, #8]
 8012c7a:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8012c7c:	68fb      	ldr	r3, [r7, #12]
 8012c7e:	68db      	ldr	r3, [r3, #12]
 8012c80:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8012c82:	68fb      	ldr	r3, [r7, #12]
 8012c84:	691b      	ldr	r3, [r3, #16]
 8012c86:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	695b      	ldr	r3, [r3, #20]
 8012c8c:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 8012c8e:	68fb      	ldr	r3, [r7, #12]
 8012c90:	699b      	ldr	r3, [r3, #24]
 8012c92:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8012c94:	6838      	ldr	r0, [r7, #0]
 8012c96:	f7fc fb9d 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012c9a:	4603      	mov	r3, r0
 8012c9c:	2b01      	cmp	r3, #1
 8012c9e:	dc01      	bgt.n	8012ca4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 8012ca0:	f008 f992 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8012ca4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012ca6:	f7fc fb95 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012caa:	4603      	mov	r3, r0
 8012cac:	2b02      	cmp	r3, #2
 8012cae:	d001      	beq.n	8012cb4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 8012cb0:	f008 f98a 	bl	801afc8 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8012cb4:	69fa      	ldr	r2, [r7, #28]
 8012cb6:	69bb      	ldr	r3, [r7, #24]
 8012cb8:	429a      	cmp	r2, r3
 8012cba:	dd01      	ble.n	8012cc0 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 8012cbc:	f008 f984 	bl	801afc8 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8012cc0:	6838      	ldr	r0, [r7, #0]
 8012cc2:	f7fc fb87 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012cc6:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 8012cc8:	2100      	movs	r1, #0
 8012cca:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012ccc:	f7fc fb8e 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8012cd0:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 8012cd2:	2101      	movs	r1, #1
 8012cd4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012cd6:	f7fc fb89 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8012cda:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 8012cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cde:	3b02      	subs	r3, #2
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6838      	ldr	r0, [r7, #0]
 8012ce4:	f7fc fb82 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ce8:	4602      	mov	r2, r0
 8012cea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cec:	4293      	cmp	r3, r2
 8012cee:	dd01      	ble.n	8012cf4 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 8012cf0:	f008 f96a 	bl	801afc8 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8012cf4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cf6:	3b01      	subs	r3, #1
 8012cf8:	4619      	mov	r1, r3
 8012cfa:	6838      	ldr	r0, [r7, #0]
 8012cfc:	f7fc fb76 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8012d00:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 8012d02:	2300      	movs	r3, #0
 8012d04:	657b      	str	r3, [r7, #84]	; 0x54
 8012d06:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012d0a:	429a      	cmp	r2, r3
 8012d0c:	da75      	bge.n	8012dfa <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012d0e:	2300      	movs	r3, #0
 8012d10:	653b      	str	r3, [r7, #80]	; 0x50
 8012d12:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012d16:	429a      	cmp	r2, r3
 8012d18:	da6b      	bge.n	8012df2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32 acc = 0;
 8012d1a:	2300      	movs	r3, #0
 8012d1c:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8012d1e:	2300      	movs	r3, #0
 8012d20:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d22:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d26:	429a      	cmp	r2, r3
 8012d28:	da26      	bge.n	8012d78 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32 input_val = input_data[b * accum_depth + d];
 8012d2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d2e:	fb02 f203 	mul.w	r2, r2, r3
 8012d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d34:	4413      	add	r3, r2
 8012d36:	461a      	mov	r2, r3
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8012d40:	627b      	str	r3, [r7, #36]	; 0x24
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8012d42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d44:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d46:	fb02 f203 	mul.w	r2, r2, r3
 8012d4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d4c:	4413      	add	r3, r2
 8012d4e:	461a      	mov	r2, r3
 8012d50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d52:	4413      	add	r3, r2
 8012d54:	f993 3000 	ldrsb.w	r3, [r3]
 8012d58:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8012d5a:	6a3a      	ldr	r2, [r7, #32]
 8012d5c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d5e:	4413      	add	r3, r2
 8012d60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d62:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d64:	440a      	add	r2, r1
 8012d66:	fb02 f203 	mul.w	r2, r2, r3
 8012d6a:	697b      	ldr	r3, [r7, #20]
 8012d6c:	4413      	add	r3, r2
 8012d6e:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8012d70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d72:	3301      	adds	r3, #1
 8012d74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d76:	e7d4      	b.n	8012d22 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 8012d78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d7a:	2b00      	cmp	r3, #0
 8012d7c:	d007      	beq.n	8012d8e <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 8012d7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d80:	009b      	lsls	r3, r3, #2
 8012d82:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012d84:	4413      	add	r3, r2
 8012d86:	681a      	ldr	r2, [r3, #0]
 8012d88:	697b      	ldr	r3, [r7, #20]
 8012d8a:	4413      	add	r3, r2
 8012d8c:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8012d8e:	697b      	ldr	r3, [r7, #20]
 8012d90:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d94:	4618      	mov	r0, r3
 8012d96:	f7fe fa93 	bl	80112c0 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012d9a:	4603      	mov	r3, r0
 8012d9c:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 8012d9e:	697a      	ldr	r2, [r7, #20]
 8012da0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012da2:	4413      	add	r3, r2
 8012da4:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 8012da6:	f107 021c 	add.w	r2, r7, #28
 8012daa:	f107 0314 	add.w	r3, r7, #20
 8012dae:	4611      	mov	r1, r2
 8012db0:	4618      	mov	r0, r3
 8012db2:	f7fc fa62 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 8012db6:	4603      	mov	r3, r0
 8012db8:	681b      	ldr	r3, [r3, #0]
 8012dba:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 8012dbc:	f107 0218 	add.w	r2, r7, #24
 8012dc0:	f107 0314 	add.w	r3, r7, #20
 8012dc4:	4611      	mov	r1, r2
 8012dc6:	4618      	mov	r0, r3
 8012dc8:	f7fc fa6b 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8012dcc:	4603      	mov	r3, r0
 8012dce:	681b      	ldr	r3, [r3, #0]
 8012dd0:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 8012dd2:	6979      	ldr	r1, [r7, #20]
 8012dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dd6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012dd8:	fb02 f203 	mul.w	r2, r2, r3
 8012ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dde:	4413      	add	r3, r2
 8012de0:	461a      	mov	r2, r3
 8012de2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012de4:	4413      	add	r3, r2
 8012de6:	b24a      	sxtb	r2, r1
 8012de8:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dec:	3301      	adds	r3, #1
 8012dee:	653b      	str	r3, [r7, #80]	; 0x50
 8012df0:	e78f      	b.n	8012d12 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 8012df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012df4:	3301      	adds	r3, #1
 8012df6:	657b      	str	r3, [r7, #84]	; 0x54
 8012df8:	e785      	b.n	8012d06 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 8012dfa:	bf00      	nop
 8012dfc:	3758      	adds	r7, #88	; 0x58
 8012dfe:	46bd      	mov	sp, r7
 8012e00:	bd80      	pop	{r7, pc}

08012e02 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 8012e02:	b580      	push	{r7, lr}
 8012e04:	b08c      	sub	sp, #48	; 0x30
 8012e06:	af02      	add	r7, sp, #8
 8012e08:	60f8      	str	r0, [r7, #12]
 8012e0a:	607b      	str	r3, [r7, #4]
 8012e0c:	460b      	mov	r3, r1
 8012e0e:	72fb      	strb	r3, [r7, #11]
 8012e10:	4613      	mov	r3, r2
 8012e12:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 8012e14:	2300      	movs	r3, #0
 8012e16:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 8012e1a:	7abb      	ldrb	r3, [r7, #10]
 8012e1c:	2b01      	cmp	r3, #1
 8012e1e:	d041      	beq.n	8012ea4 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 8012e20:	f04f 0200 	mov.w	r2, #0
 8012e24:	f04f 0300 	mov.w	r3, #0
 8012e28:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8012e2c:	f107 0318 	add.w	r3, r7, #24
 8012e30:	9301      	str	r3, [sp, #4]
 8012e32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e34:	9300      	str	r3, [sp, #0]
 8012e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e38:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e3a:	6879      	ldr	r1, [r7, #4]
 8012e3c:	68f8      	ldr	r0, [r7, #12]
 8012e3e:	f7fc f813 	bl	800ee68 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8012e42:	4603      	mov	r3, r0
 8012e44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012e48:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e4c:	2b00      	cmp	r3, #0
 8012e4e:	d002      	beq.n	8012e56 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 8012e50:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e54:	e028      	b.n	8012ea8 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 8012e56:	ed97 7b06 	vldr	d7, [r7, #24]
 8012e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e5c:	f107 0214 	add.w	r2, r7, #20
 8012e60:	4611      	mov	r1, r2
 8012e62:	4618      	mov	r0, r3
 8012e64:	eeb0 0a47 	vmov.f32	s0, s14
 8012e68:	eef0 0a67 	vmov.f32	s1, s15
 8012e6c:	f7fb fbb0 	bl	800e5d0 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 8012e70:	697b      	ldr	r3, [r7, #20]
 8012e72:	425a      	negs	r2, r3
 8012e74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e76:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8012e78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e7a:	f103 0208 	add.w	r2, r3, #8
 8012e7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e80:	330c      	adds	r3, #12
 8012e82:	7af9      	ldrb	r1, [r7, #11]
 8012e84:	9300      	str	r3, [sp, #0]
 8012e86:	4613      	mov	r3, r2
 8012e88:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e8a:	68f8      	ldr	r0, [r7, #12]
 8012e8c:	f7fc f976 	bl	800f17c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8012e90:	4603      	mov	r3, r0
 8012e92:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012e96:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012e9a:	2b00      	cmp	r3, #0
 8012e9c:	d002      	beq.n	8012ea4 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 8012e9e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012ea2:	e001      	b.n	8012ea8 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 8012ea4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012ea8:	4618      	mov	r0, r3
 8012eaa:	3728      	adds	r7, #40	; 0x28
 8012eac:	46bd      	mov	sp, r7
 8012eae:	bd80      	pop	{r7, pc}

08012eb0 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8012eb0:	b580      	push	{r7, lr}
 8012eb2:	b086      	sub	sp, #24
 8012eb4:	af00      	add	r7, sp, #0
 8012eb6:	60f8      	str	r0, [r7, #12]
 8012eb8:	60b9      	str	r1, [r7, #8]
 8012eba:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8012ebc:	68fb      	ldr	r3, [r7, #12]
 8012ebe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ec0:	2b00      	cmp	r3, #0
 8012ec2:	d101      	bne.n	8012ec8 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 8012ec4:	f008 f880 	bl	801afc8 <abort>
  void* data = nullptr;
 8012ec8:	2300      	movs	r3, #0
 8012eca:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 8012ecc:	68fb      	ldr	r3, [r7, #12]
 8012ece:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ed0:	f107 0214 	add.w	r2, r7, #20
 8012ed4:	2114      	movs	r1, #20
 8012ed6:	68f8      	ldr	r0, [r7, #12]
 8012ed8:	4798      	blx	r3
 8012eda:	4603      	mov	r3, r0
 8012edc:	2b01      	cmp	r3, #1
 8012ede:	bf0c      	ite	eq
 8012ee0:	2301      	moveq	r3, #1
 8012ee2:	2300      	movne	r3, #0
 8012ee4:	b2db      	uxtb	r3, r3
 8012ee6:	2b00      	cmp	r3, #0
 8012ee8:	d001      	beq.n	8012eee <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 8012eea:	2300      	movs	r3, #0
 8012eec:	e000      	b.n	8012ef0 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 8012eee:	697b      	ldr	r3, [r7, #20]
}
 8012ef0:	4618      	mov	r0, r3
 8012ef2:	3718      	adds	r7, #24
 8012ef4:	46bd      	mov	sp, r7
 8012ef6:	bd80      	pop	{r7, pc}

08012ef8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8012ef8:	b5b0      	push	{r4, r5, r7, lr}
 8012efa:	b08c      	sub	sp, #48	; 0x30
 8012efc:	af04      	add	r7, sp, #16
 8012efe:	6078      	str	r0, [r7, #4]
 8012f00:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	691b      	ldr	r3, [r3, #16]
 8012f06:	2b00      	cmp	r3, #0
 8012f08:	d101      	bne.n	8012f0e <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012f0a:	f008 f85d 	bl	801afc8 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8012f0e:	683b      	ldr	r3, [r7, #0]
 8012f10:	695b      	ldr	r3, [r3, #20]
 8012f12:	2b00      	cmp	r3, #0
 8012f14:	d101      	bne.n	8012f1a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8012f16:	f008 f857 	bl	801afc8 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	691b      	ldr	r3, [r3, #16]
 8012f1e:	61fb      	str	r3, [r7, #28]
  const auto params =
 8012f20:	683b      	ldr	r3, [r7, #0]
 8012f22:	695b      	ldr	r3, [r3, #20]
 8012f24:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012f26:	2200      	movs	r2, #0
 8012f28:	6839      	ldr	r1, [r7, #0]
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7fc f9cd 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012f30:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8012f32:	2201      	movs	r2, #1
 8012f34:	6839      	ldr	r1, [r7, #0]
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f7fc f9c7 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012f3c:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8012f3e:	2202      	movs	r2, #2
 8012f40:	6839      	ldr	r1, [r7, #0]
 8012f42:	6878      	ldr	r0, [r7, #4]
 8012f44:	f7fe fea9 	bl	8011c9a <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8012f48:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012f4a:	2200      	movs	r2, #0
 8012f4c:	6839      	ldr	r1, [r7, #0]
 8012f4e:	6878      	ldr	r0, [r7, #4]
 8012f50:	f7fc f9d1 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012f54:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8012f56:	697b      	ldr	r3, [r7, #20]
 8012f58:	781a      	ldrb	r2, [r3, #0]
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	429a      	cmp	r2, r3
 8012f60:	d01b      	beq.n	8012f9a <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 8012f62:	687b      	ldr	r3, [r7, #4]
 8012f64:	695c      	ldr	r4, [r3, #20]
 8012f66:	697b      	ldr	r3, [r7, #20]
 8012f68:	781b      	ldrb	r3, [r3, #0]
 8012f6a:	4618      	mov	r0, r3
 8012f6c:	f7fb fac8 	bl	800e500 <TfLiteTypeGetName>
 8012f70:	4605      	mov	r5, r0
 8012f72:	68bb      	ldr	r3, [r7, #8]
 8012f74:	781b      	ldrb	r3, [r3, #0]
 8012f76:	4618      	mov	r0, r3
 8012f78:	f7fb fac2 	bl	800e500 <TfLiteTypeGetName>
 8012f7c:	4603      	mov	r3, r0
 8012f7e:	9303      	str	r3, [sp, #12]
 8012f80:	9502      	str	r5, [sp, #8]
 8012f82:	4b17      	ldr	r3, [pc, #92]	; (8012fe0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8012f84:	9301      	str	r3, [sp, #4]
 8012f86:	4b17      	ldr	r3, [pc, #92]	; (8012fe4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8012f88:	9300      	str	r3, [sp, #0]
 8012f8a:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8012f8e:	4a16      	ldr	r2, [pc, #88]	; (8012fe8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 8012f90:	4916      	ldr	r1, [pc, #88]	; (8012fec <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 8012f92:	6878      	ldr	r0, [r7, #4]
 8012f94:	47a0      	blx	r4
 8012f96:	2301      	movs	r3, #1
 8012f98:	e01e      	b.n	8012fd8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8012f9a:	697b      	ldr	r3, [r7, #20]
 8012f9c:	781a      	ldrb	r2, [r3, #0]
 8012f9e:	693b      	ldr	r3, [r7, #16]
 8012fa0:	781b      	ldrb	r3, [r3, #0]
 8012fa2:	429a      	cmp	r2, r3
 8012fa4:	d006      	beq.n	8012fb4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	695b      	ldr	r3, [r3, #20]
 8012faa:	4911      	ldr	r1, [pc, #68]	; (8012ff0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 8012fac:	6878      	ldr	r0, [r7, #4]
 8012fae:	4798      	blx	r3
 8012fb0:	2301      	movs	r3, #1
 8012fb2:	e011      	b.n	8012fd8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 8012fb4:	69bb      	ldr	r3, [r7, #24]
 8012fb6:	7819      	ldrb	r1, [r3, #0]
 8012fb8:	697b      	ldr	r3, [r7, #20]
 8012fba:	781a      	ldrb	r2, [r3, #0]
 8012fbc:	69fb      	ldr	r3, [r7, #28]
 8012fbe:	9303      	str	r3, [sp, #12]
 8012fc0:	68bb      	ldr	r3, [r7, #8]
 8012fc2:	9302      	str	r3, [sp, #8]
 8012fc4:	68fb      	ldr	r3, [r7, #12]
 8012fc6:	9301      	str	r3, [sp, #4]
 8012fc8:	693b      	ldr	r3, [r7, #16]
 8012fca:	9300      	str	r3, [sp, #0]
 8012fcc:	697b      	ldr	r3, [r7, #20]
 8012fce:	6878      	ldr	r0, [r7, #4]
 8012fd0:	f7ff ff17 	bl	8012e02 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 8012fd4:	4603      	mov	r3, r0
                         filter, bias, output, data);
 8012fd6:	bf00      	nop
}
 8012fd8:	4618      	mov	r0, r3
 8012fda:	3720      	adds	r7, #32
 8012fdc:	46bd      	mov	sp, r7
 8012fde:	bdb0      	pop	{r4, r5, r7, pc}
 8012fe0:	0801e8d4 	.word	0x0801e8d4
 8012fe4:	0801e8e4 	.word	0x0801e8e4
 8012fe8:	0801e85c 	.word	0x0801e85c
 8012fec:	0801e8b8 	.word	0x0801e8b8
 8012ff0:	0801e8f0 	.word	0x0801e8f0

08012ff4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 8012ff4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012ff6:	b0ad      	sub	sp, #180	; 0xb4
 8012ff8:	af06      	add	r7, sp, #24
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
 8013000:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 8013002:	683b      	ldr	r3, [r7, #0]
 8013004:	691b      	ldr	r3, [r3, #16]
 8013006:	425b      	negs	r3, r3
 8013008:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 801300a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801300e:	691b      	ldr	r3, [r3, #16]
 8013010:	425b      	negs	r3, r3
 8013012:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 8013014:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013018:	691b      	ldr	r3, [r3, #16]
 801301a:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	425b      	negs	r3, r3
 8013028:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	689b      	ldr	r3, [r3, #8]
 801302e:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 8013030:	687b      	ldr	r3, [r7, #4]
 8013032:	68db      	ldr	r3, [r3, #12]
 8013034:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8013036:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801303a:	6839      	ldr	r1, [r7, #0]
 801303c:	4618      	mov	r0, r3
 801303e:	f7fc fa88 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013042:	6838      	ldr	r0, [r7, #0]
 8013044:	f7fc fac5 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8013048:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 801304a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801304e:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8013052:	4618      	mov	r0, r3
 8013054:	f7fc fa7d 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013058:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 801305c:	f7fc fab9 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8013060:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 8013062:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013066:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 801306a:	4618      	mov	r0, r3
 801306c:	f7fc fa71 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013070:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8013074:	f7fe f8db 	bl	801122e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8013078:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 801307a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801307e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013082:	4618      	mov	r0, r3
 8013084:	f7fc fa65 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013088:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801308c:	f7fc fab2 	bl	800f5f4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8013090:	4603      	mov	r3, r0
 8013092:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8013096:	f107 0138 	add.w	r1, r7, #56	; 0x38
 801309a:	f107 0010 	add.w	r0, r7, #16
 801309e:	9304      	str	r3, [sp, #16]
 80130a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80130a4:	9303      	str	r3, [sp, #12]
 80130a6:	9502      	str	r5, [sp, #8]
 80130a8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80130ac:	9301      	str	r3, [sp, #4]
 80130ae:	9400      	str	r4, [sp, #0]
 80130b0:	4613      	mov	r3, r2
 80130b2:	4632      	mov	r2, r6
 80130b4:	f7ff fdd2 	bl	8012c5c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 80130b8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80130bc:	4618      	mov	r0, r3
 80130be:	f7fc f973 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 80130c2:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80130c6:	4618      	mov	r0, r3
 80130c8:	f7fc f96e 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 80130cc:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80130d0:	4618      	mov	r0, r3
 80130d2:	f7fc f969 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 80130d6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80130da:	4618      	mov	r0, r3
 80130dc:	f7fc f964 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 80130e0:	2300      	movs	r3, #0
}
 80130e2:	4618      	mov	r0, r3
 80130e4:	379c      	adds	r7, #156	; 0x9c
 80130e6:	46bd      	mov	sp, r7
 80130e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080130ec <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 80130ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130ee:	b0c9      	sub	sp, #292	; 0x124
 80130f0:	af06      	add	r7, sp, #24
 80130f2:	60f8      	str	r0, [r7, #12]
 80130f4:	f107 0008 	add.w	r0, r7, #8
 80130f8:	6001      	str	r1, [r0, #0]
 80130fa:	1d39      	adds	r1, r7, #4
 80130fc:	600a      	str	r2, [r1, #0]
 80130fe:	463a      	mov	r2, r7
 8013100:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 8013102:	463b      	mov	r3, r7
 8013104:	681b      	ldr	r3, [r3, #0]
 8013106:	691b      	ldr	r3, [r3, #16]
 8013108:	425b      	negs	r3, r3
 801310a:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 801310e:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 8013112:	691b      	ldr	r3, [r3, #16]
 8013114:	425b      	negs	r3, r3
 8013116:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 801311a:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801311e:	691b      	ldr	r3, [r3, #16]
 8013120:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 8013124:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013128:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 801312a:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 801312e:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 8013130:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013134:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 8013136:	1d3b      	adds	r3, r7, #4
 8013138:	681b      	ldr	r3, [r3, #0]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 801313e:	1d3b      	adds	r3, r7, #4
 8013140:	681b      	ldr	r3, [r3, #0]
 8013142:	685b      	ldr	r3, [r3, #4]
 8013144:	425b      	negs	r3, r3
 8013146:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 8013148:	1d3b      	adds	r3, r7, #4
 801314a:	681b      	ldr	r3, [r3, #0]
 801314c:	689b      	ldr	r3, [r3, #8]
 801314e:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8013150:	1d3b      	adds	r3, r7, #4
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	68db      	ldr	r3, [r3, #12]
 8013156:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 8013158:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 801315c:	781b      	ldrb	r3, [r3, #0]
 801315e:	2b03      	cmp	r3, #3
 8013160:	d002      	beq.n	8013168 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 8013162:	2b07      	cmp	r3, #7
 8013164:	d058      	beq.n	8013218 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 8013166:	e0af      	b.n	80132c8 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 8013168:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 801316c:	463b      	mov	r3, r7
 801316e:	6819      	ldr	r1, [r3, #0]
 8013170:	4610      	mov	r0, r2
 8013172:	f7fc f9ee 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013176:	463b      	mov	r3, r7
 8013178:	6818      	ldr	r0, [r3, #0]
 801317a:	f7fc f8d2 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801317e:	4606      	mov	r6, r0
 8013180:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013184:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013188:	4618      	mov	r0, r3
 801318a:	f7fc f9e2 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801318e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8013192:	f7fc f8c6 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013196:	4604      	mov	r4, r0
 8013198:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 801319c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fc f9d6 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80131a6:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 80131aa:	f7fe f840 	bl	801122e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 80131ae:	4605      	mov	r5, r0
 80131b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80131b4:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80131b8:	4618      	mov	r0, r3
 80131ba:	f7fc f9ca 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80131be:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80131c2:	f7fc f8bf 	bl	800f344 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80131c6:	4603      	mov	r3, r0
 80131c8:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80131cc:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80131d0:	f107 0014 	add.w	r0, r7, #20
 80131d4:	9304      	str	r3, [sp, #16]
 80131d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80131da:	9303      	str	r3, [sp, #12]
 80131dc:	9502      	str	r5, [sp, #8]
 80131de:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80131e2:	9301      	str	r3, [sp, #4]
 80131e4:	9400      	str	r4, [sp, #0]
 80131e6:	4613      	mov	r3, r2
 80131e8:	4632      	mov	r2, r6
 80131ea:	f7ff fb9b 	bl	8012924 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 80131ee:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80131f2:	4618      	mov	r0, r3
 80131f4:	f7fc f8d8 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 80131f8:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80131fc:	4618      	mov	r0, r3
 80131fe:	f7fc f8d3 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 8013202:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8013206:	4618      	mov	r0, r3
 8013208:	f7fc f8ce 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 801320c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8013210:	4618      	mov	r0, r3
 8013212:	f7fc f8c9 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 8013216:	e068      	b.n	80132ea <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 8013218:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 801321c:	463b      	mov	r3, r7
 801321e:	6819      	ldr	r1, [r3, #0]
 8013220:	4610      	mov	r0, r2
 8013222:	f7fc f996 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013226:	463b      	mov	r3, r7
 8013228:	6818      	ldr	r0, [r3, #0]
 801322a:	f7fc f87a 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801322e:	4606      	mov	r6, r0
 8013230:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8013234:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013238:	4618      	mov	r0, r3
 801323a:	f7fc f98a 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801323e:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 8013242:	f7fc f86e 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013246:	4604      	mov	r4, r0
 8013248:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801324c:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013250:	4618      	mov	r0, r3
 8013252:	f7fc f97e 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013256:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 801325a:	f7fd ffe8 	bl	801122e <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801325e:	4605      	mov	r5, r0
 8013260:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013264:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8013268:	4618      	mov	r0, r3
 801326a:	f7fc f972 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801326e:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 8013272:	f000 f935 	bl	80134e0 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8013276:	4603      	mov	r3, r0
 8013278:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 801327c:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8013280:	f107 0014 	add.w	r0, r7, #20
 8013284:	9304      	str	r3, [sp, #16]
 8013286:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801328a:	9303      	str	r3, [sp, #12]
 801328c:	9502      	str	r5, [sp, #8]
 801328e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013292:	9301      	str	r3, [sp, #4]
 8013294:	9400      	str	r4, [sp, #0]
 8013296:	4613      	mov	r3, r2
 8013298:	4632      	mov	r2, r6
 801329a:	f7ff fc12 	bl	8012ac2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 801329e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80132a2:	4618      	mov	r0, r3
 80132a4:	f7fc f880 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 80132a8:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80132ac:	4618      	mov	r0, r3
 80132ae:	f7fc f87b 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 80132b2:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80132b6:	4618      	mov	r0, r3
 80132b8:	f7fc f876 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 80132bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80132c0:	4618      	mov	r0, r3
 80132c2:	f7fc f871 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80132c6:	e010      	b.n	80132ea <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80132c8:	68fb      	ldr	r3, [r7, #12]
 80132ca:	695c      	ldr	r4, [r3, #20]
 80132cc:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132d0:	781b      	ldrb	r3, [r3, #0]
 80132d2:	4618      	mov	r0, r3
 80132d4:	f7fb f914 	bl	800e500 <TfLiteTypeGetName>
 80132d8:	4602      	mov	r2, r0
 80132da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132de:	781b      	ldrb	r3, [r3, #0]
 80132e0:	4905      	ldr	r1, [pc, #20]	; (80132f8 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 80132e2:	68f8      	ldr	r0, [r7, #12]
 80132e4:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 80132e6:	2301      	movs	r3, #1
 80132e8:	e000      	b.n	80132ec <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
  }

  return kTfLiteOk;
 80132ea:	2300      	movs	r3, #0
}
 80132ec:	4618      	mov	r0, r3
 80132ee:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80132f2:	46bd      	mov	sp, r7
 80132f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132f6:	bf00      	nop
 80132f8:	0801e97c 	.word	0x0801e97c

080132fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 80132fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132fe:	b0af      	sub	sp, #188	; 0xbc
 8013300:	af06      	add	r7, sp, #24
 8013302:	60f8      	str	r0, [r7, #12]
 8013304:	60b9      	str	r1, [r7, #8]
 8013306:	603b      	str	r3, [r7, #0]
 8013308:	4613      	mov	r3, r2
 801330a:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 801330c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8013310:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 8013314:	79fb      	ldrb	r3, [r7, #7]
 8013316:	4618      	mov	r0, r3
 8013318:	f7fd fe7a 	bl	8011010 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 801331c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801331e:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 8013320:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8013322:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 8013324:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013328:	6839      	ldr	r1, [r7, #0]
 801332a:	4618      	mov	r0, r3
 801332c:	f7fc f911 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013330:	6838      	ldr	r0, [r7, #0]
 8013332:	f7fc f92c 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013336:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 8013338:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801333c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013340:	4618      	mov	r0, r3
 8013342:	f7fc f906 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013346:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801334a:	f7fc f920 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801334e:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8013350:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013354:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8013358:	4618      	mov	r0, r3
 801335a:	f7fc f8fa 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801335e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8013362:	f7fc f914 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013366:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8013368:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801336c:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8013370:	4618      	mov	r0, r3
 8013372:	f7fc f8ee 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013376:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 801337a:	f7fc f919 	bl	800f5b0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801337e:	4603      	mov	r3, r0
 8013380:	f107 0258 	add.w	r2, r7, #88	; 0x58
 8013384:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013388:	f107 0010 	add.w	r0, r7, #16
 801338c:	9304      	str	r3, [sp, #16]
 801338e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013392:	9303      	str	r3, [sp, #12]
 8013394:	9502      	str	r5, [sp, #8]
 8013396:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801339a:	9301      	str	r3, [sp, #4]
 801339c:	9400      	str	r4, [sp, #0]
 801339e:	4613      	mov	r3, r2
 80133a0:	4632      	mov	r2, r6
 80133a2:	f7ff fa29 	bl	80127f8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 80133a6:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80133aa:	4618      	mov	r0, r3
 80133ac:	f7fb fffc 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
 80133b0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80133b4:	4618      	mov	r0, r3
 80133b6:	f7fb fff7 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 80133ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80133be:	4618      	mov	r0, r3
 80133c0:	f7fb fff2 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 80133c4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80133c8:	4618      	mov	r0, r3
 80133ca:	f7fb ffed 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 80133ce:	2300      	movs	r3, #0
}
 80133d0:	4618      	mov	r0, r3
 80133d2:	37a4      	adds	r7, #164	; 0xa4
 80133d4:	46bd      	mov	sp, r7
 80133d6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133d8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80133d8:	b590      	push	{r4, r7, lr}
 80133da:	b08d      	sub	sp, #52	; 0x34
 80133dc:	af04      	add	r7, sp, #16
 80133de:	6078      	str	r0, [r7, #4]
 80133e0:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80133e2:	683b      	ldr	r3, [r7, #0]
 80133e4:	695b      	ldr	r3, [r3, #20]
 80133e6:	2b00      	cmp	r3, #0
 80133e8:	d101      	bne.n	80133ee <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80133ea:	f007 fded 	bl	801afc8 <abort>
  const auto* params =
 80133ee:	683b      	ldr	r3, [r7, #0]
 80133f0:	695b      	ldr	r3, [r3, #20]
 80133f2:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80133f4:	2200      	movs	r2, #0
 80133f6:	6839      	ldr	r1, [r7, #0]
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7fb ff66 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80133fe:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8013400:	2201      	movs	r2, #1
 8013402:	6839      	ldr	r1, [r7, #0]
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7fb ff60 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801340a:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 801340c:	2202      	movs	r2, #2
 801340e:	6839      	ldr	r1, [r7, #0]
 8013410:	6878      	ldr	r0, [r7, #4]
 8013412:	f7fe fc42 	bl	8011c9a <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8013416:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013418:	2200      	movs	r2, #0
 801341a:	6839      	ldr	r1, [r7, #0]
 801341c:	6878      	ldr	r0, [r7, #4]
 801341e:	f7fb ff6a 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8013422:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 8013424:	683b      	ldr	r3, [r7, #0]
 8013426:	691b      	ldr	r3, [r3, #16]
 8013428:	2b00      	cmp	r3, #0
 801342a:	d101      	bne.n	8013430 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 801342c:	f007 fdcc 	bl	801afc8 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8013430:	683b      	ldr	r3, [r7, #0]
 8013432:	691b      	ldr	r3, [r3, #16]
 8013434:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 8013436:	69bb      	ldr	r3, [r7, #24]
 8013438:	781b      	ldrb	r3, [r3, #0]
 801343a:	2b09      	cmp	r3, #9
 801343c:	d015      	beq.n	801346a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 801343e:	2b09      	cmp	r3, #9
 8013440:	dc2f      	bgt.n	80134a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 8013442:	2b01      	cmp	r3, #1
 8013444:	d002      	beq.n	801344c <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 8013446:	2b03      	cmp	r3, #3
 8013448:	d01d      	beq.n	8013486 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 801344a:	e02a      	b.n	80134a2 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 801344c:	69fb      	ldr	r3, [r7, #28]
 801344e:	781a      	ldrb	r2, [r3, #0]
 8013450:	68fb      	ldr	r3, [r7, #12]
 8013452:	9302      	str	r3, [sp, #8]
 8013454:	693b      	ldr	r3, [r7, #16]
 8013456:	9301      	str	r3, [sp, #4]
 8013458:	697b      	ldr	r3, [r7, #20]
 801345a:	9300      	str	r3, [sp, #0]
 801345c:	69bb      	ldr	r3, [r7, #24]
 801345e:	6839      	ldr	r1, [r7, #0]
 8013460:	6878      	ldr	r0, [r7, #4]
 8013462:	f7ff ff4b 	bl	80132fc <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 8013466:	4603      	mov	r3, r0
                       output);
 8013468:	e029      	b.n	80134be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 801346a:	68fb      	ldr	r3, [r7, #12]
 801346c:	9302      	str	r3, [sp, #8]
 801346e:	693b      	ldr	r3, [r7, #16]
 8013470:	9301      	str	r3, [sp, #4]
 8013472:	697b      	ldr	r3, [r7, #20]
 8013474:	9300      	str	r3, [sp, #0]
 8013476:	69bb      	ldr	r3, [r7, #24]
 8013478:	68ba      	ldr	r2, [r7, #8]
 801347a:	6839      	ldr	r1, [r7, #0]
 801347c:	6878      	ldr	r0, [r7, #4]
 801347e:	f7ff fdb9 	bl	8012ff4 <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 8013482:	4603      	mov	r3, r0
                               output);
 8013484:	e01b      	b.n	80134be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 8013486:	68fb      	ldr	r3, [r7, #12]
 8013488:	9302      	str	r3, [sp, #8]
 801348a:	693b      	ldr	r3, [r7, #16]
 801348c:	9301      	str	r3, [sp, #4]
 801348e:	697b      	ldr	r3, [r7, #20]
 8013490:	9300      	str	r3, [sp, #0]
 8013492:	69bb      	ldr	r3, [r7, #24]
 8013494:	68ba      	ldr	r2, [r7, #8]
 8013496:	6839      	ldr	r1, [r7, #0]
 8013498:	6878      	ldr	r0, [r7, #4]
 801349a:	f7ff fe27 	bl	80130ec <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 801349e:	4603      	mov	r3, r0
 80134a0:	e00d      	b.n	80134be <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80134a2:	687b      	ldr	r3, [r7, #4]
 80134a4:	695c      	ldr	r4, [r3, #20]
 80134a6:	69bb      	ldr	r3, [r7, #24]
 80134a8:	781b      	ldrb	r3, [r3, #0]
 80134aa:	4618      	mov	r0, r3
 80134ac:	f7fb f828 	bl	800e500 <TfLiteTypeGetName>
 80134b0:	4602      	mov	r2, r0
 80134b2:	69bb      	ldr	r3, [r7, #24]
 80134b4:	781b      	ldrb	r3, [r3, #0]
 80134b6:	4904      	ldr	r1, [pc, #16]	; (80134c8 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 80134b8:	6878      	ldr	r0, [r7, #4]
 80134ba:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80134bc:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3724      	adds	r7, #36	; 0x24
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd90      	pop	{r4, r7, pc}
 80134c6:	bf00      	nop
 80134c8:	0801e97c 	.word	0x0801e97c

080134cc <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 80134cc:	b480      	push	{r7}
 80134ce:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 80134d0:	4b02      	ldr	r3, [pc, #8]	; (80134dc <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 80134d2:	4618      	mov	r0, r3
 80134d4:	46bd      	mov	sp, r7
 80134d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134da:	4770      	bx	lr
 80134dc:	200000a4 	.word	0x200000a4

080134e0 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 80134e0:	b480      	push	{r7}
 80134e2:	b083      	sub	sp, #12
 80134e4:	af00      	add	r7, sp, #0
 80134e6:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	2b00      	cmp	r3, #0
 80134ec:	d002      	beq.n	80134f4 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	685b      	ldr	r3, [r3, #4]
 80134f2:	e000      	b.n	80134f6 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 80134f4:	2300      	movs	r3, #0
}
 80134f6:	4618      	mov	r0, r3
 80134f8:	370c      	adds	r7, #12
 80134fa:	46bd      	mov	sp, r7
 80134fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013500:	4770      	bx	lr

08013502 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
 8013502:	b590      	push	{r4, r7, lr}
 8013504:	b087      	sub	sp, #28
 8013506:	af00      	add	r7, sp, #0
 8013508:	60f8      	str	r0, [r7, #12]
 801350a:	60b9      	str	r1, [r7, #8]
 801350c:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 801350e:	68f8      	ldr	r0, [r7, #12]
 8013510:	f7fb ff60 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013514:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 8013516:	2300      	movs	r3, #0
 8013518:	617b      	str	r3, [r7, #20]
 801351a:	697a      	ldr	r2, [r7, #20]
 801351c:	693b      	ldr	r3, [r7, #16]
 801351e:	429a      	cmp	r2, r3
 8013520:	da15      	bge.n	801354e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 8013522:	697a      	ldr	r2, [r7, #20]
 8013524:	68bb      	ldr	r3, [r7, #8]
 8013526:	429a      	cmp	r2, r3
 8013528:	d00d      	beq.n	8013546 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 801352a:	6979      	ldr	r1, [r7, #20]
 801352c:	68f8      	ldr	r0, [r7, #12]
 801352e:	f7fb ff5d 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8013532:	4604      	mov	r4, r0
 8013534:	6979      	ldr	r1, [r7, #20]
 8013536:	6878      	ldr	r0, [r7, #4]
 8013538:	f7fb ff58 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801353c:	4603      	mov	r3, r0
 801353e:	429c      	cmp	r4, r3
 8013540:	d001      	beq.n	8013546 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 8013542:	f007 fd41 	bl	801afc8 <abort>
  for (int i = 0; i < dims_count; ++i) {
 8013546:	697b      	ldr	r3, [r7, #20]
 8013548:	3301      	adds	r3, #1
 801354a:	617b      	str	r3, [r7, #20]
 801354c:	e7e5      	b.n	801351a <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
  return FlatSizeSkipDim(shape, skip_dim);
 801354e:	68b9      	ldr	r1, [r7, #8]
 8013550:	68f8      	ldr	r0, [r7, #12]
 8013552:	f7ff f91b 	bl	801278c <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8013556:	4603      	mov	r3, r0
}
 8013558:	4618      	mov	r0, r3
 801355a:	371c      	adds	r7, #28
 801355c:	46bd      	mov	sp, r7
 801355e:	bd90      	pop	{r4, r7, pc}

08013560 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8013560:	b480      	push	{r7}
 8013562:	b083      	sub	sp, #12
 8013564:	af00      	add	r7, sp, #0
 8013566:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8013568:	687b      	ldr	r3, [r7, #4]
 801356a:	2b00      	cmp	r3, #0
 801356c:	d003      	beq.n	8013576 <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 8013574:	e000      	b.n	8013578 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 8013576:	2320      	movs	r3, #32
}
 8013578:	4618      	mov	r0, r3
 801357a:	370c      	adds	r7, #12
 801357c:	46bd      	mov	sp, r7
 801357e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013582:	4770      	bx	lr

08013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 8013584:	b480      	push	{r7}
 8013586:	b083      	sub	sp, #12
 8013588:	af00      	add	r7, sp, #0
 801358a:	6078      	str	r0, [r7, #4]
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	4618      	mov	r0, r3
 8013590:	370c      	adds	r7, #12
 8013592:	46bd      	mov	sp, r7
 8013594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013598:	4770      	bx	lr

0801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 801359a:	b590      	push	{r4, r7, lr}
 801359c:	b085      	sub	sp, #20
 801359e:	af00      	add	r7, sp, #0
 80135a0:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80135a2:	f107 030c 	add.w	r3, r7, #12
 80135a6:	4618      	mov	r0, r3
 80135a8:	f7ff ffec 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80135ac:	4604      	mov	r4, r0
 80135ae:	6878      	ldr	r0, [r7, #4]
 80135b0:	f7fd fd96 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80135b4:	4603      	mov	r3, r0
 80135b6:	6023      	str	r3, [r4, #0]
    return retval;
 80135b8:	68fb      	ldr	r3, [r7, #12]
  }
 80135ba:	4618      	mov	r0, r3
 80135bc:	3714      	adds	r7, #20
 80135be:	46bd      	mov	sp, r7
 80135c0:	bd90      	pop	{r4, r7, pc}

080135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80135c2:	b580      	push	{r7, lr}
 80135c4:	b082      	sub	sp, #8
 80135c6:	af00      	add	r7, sp, #0
 80135c8:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80135ca:	2100      	movs	r1, #0
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f7fd fc37 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80135d2:	4603      	mov	r3, r0
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}

080135dc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80135dc:	b580      	push	{r7, lr}
 80135de:	b082      	sub	sp, #8
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80135e4:	6878      	ldr	r0, [r7, #4]
 80135e6:	f000 f813 	bl	8013610 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 80135ea:	4603      	mov	r3, r0
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	3708      	adds	r7, #8
 80135f0:	46bd      	mov	sp, r7
 80135f2:	bd80      	pop	{r7, pc}

080135f4 <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 80135f4:	b480      	push	{r7}
 80135f6:	b083      	sub	sp, #12
 80135f8:	af00      	add	r7, sp, #0
 80135fa:	6078      	str	r0, [r7, #4]
 80135fc:	6039      	str	r1, [r7, #0]
  return a - b;
 80135fe:	687a      	ldr	r2, [r7, #4]
 8013600:	683b      	ldr	r3, [r7, #0]
 8013602:	1ad3      	subs	r3, r2, r3
}
 8013604:	4618      	mov	r0, r3
 8013606:	370c      	adds	r7, #12
 8013608:	46bd      	mov	sp, r7
 801360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801360e:	4770      	bx	lr

08013610 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013610:	b580      	push	{r7, lr}
 8013612:	b082      	sub	sp, #8
 8013614:	af00      	add	r7, sp, #0
 8013616:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013618:	2101      	movs	r1, #1
 801361a:	6878      	ldr	r0, [r7, #4]
 801361c:	f7fd fc10 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013620:	4603      	mov	r3, r0
  }
 8013622:	4618      	mov	r0, r3
 8013624:	3708      	adds	r7, #8
 8013626:	46bd      	mov	sp, r7
 8013628:	bd80      	pop	{r7, pc}

0801362a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 801362a:	b480      	push	{r7}
 801362c:	b089      	sub	sp, #36	; 0x24
 801362e:	af00      	add	r7, sp, #0
 8013630:	6078      	str	r0, [r7, #4]
 8013632:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	461a      	mov	r2, r3
 8013638:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801363c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8013640:	2201      	movs	r2, #1
 8013642:	683b      	ldr	r3, [r7, #0]
 8013644:	fa02 f303 	lsl.w	r3, r2, r3
 8013648:	461a      	mov	r2, r3
 801364a:	ea4f 73e2 	mov.w	r3, r2, asr #31
 801364e:	69f9      	ldr	r1, [r7, #28]
 8013650:	fb02 f001 	mul.w	r0, r2, r1
 8013654:	69b9      	ldr	r1, [r7, #24]
 8013656:	fb03 f101 	mul.w	r1, r3, r1
 801365a:	4401      	add	r1, r0
 801365c:	69b8      	ldr	r0, [r7, #24]
 801365e:	fba0 2302 	umull	r2, r3, r0, r2
 8013662:	4419      	add	r1, r3
 8013664:	460b      	mov	r3, r1
 8013666:	e9c7 2304 	strd	r2, r3, [r7, #16]
 801366a:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 801366e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8013672:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 8013674:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013678:	60bb      	str	r3, [r7, #8]
             ? min
 801367a:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801367e:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8013682:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 8013686:	db0e      	blt.n	80136a6 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8013688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 801368c:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013690:	f04f 0100 	mov.w	r1, #0
 8013694:	4290      	cmp	r0, r2
 8013696:	eb71 0303 	sbcs.w	r3, r1, r3
 801369a:	db01      	blt.n	80136a0 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 801369c:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 801369e:	e004      	b.n	80136aa <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 80136a0:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 80136a4:	e001      	b.n	80136aa <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 80136a6:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 80136aa:	4618      	mov	r0, r3
 80136ac:	3724      	adds	r7, #36	; 0x24
 80136ae:	46bd      	mov	sp, r7
 80136b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136b4:	4770      	bx	lr

080136b6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 80136b6:	b590      	push	{r4, r7, lr}
 80136b8:	b085      	sub	sp, #20
 80136ba:	af00      	add	r7, sp, #0
 80136bc:	60f8      	str	r0, [r7, #12]
 80136be:	60b9      	str	r1, [r7, #8]
 80136c0:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 80136c2:	68b9      	ldr	r1, [r7, #8]
 80136c4:	68f8      	ldr	r0, [r7, #12]
 80136c6:	f7fd fd16 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80136ca:	4604      	mov	r4, r0
 80136cc:	68f8      	ldr	r0, [r7, #12]
 80136ce:	f7fd fda2 	bl	8011216 <_ZN8gemmlowp6BitNotIlEET_S1_>
 80136d2:	4603      	mov	r3, r0
 80136d4:	6879      	ldr	r1, [r7, #4]
 80136d6:	4618      	mov	r0, r3
 80136d8:	f7fd fd0d 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80136dc:	4603      	mov	r3, r0
 80136de:	4619      	mov	r1, r3
 80136e0:	4620      	mov	r0, r4
 80136e2:	f000 f805 	bl	80136f0 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 80136e6:	4603      	mov	r3, r0
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	3714      	adds	r7, #20
 80136ec:	46bd      	mov	sp, r7
 80136ee:	bd90      	pop	{r4, r7, pc}

080136f0 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 80136f0:	b480      	push	{r7}
 80136f2:	b083      	sub	sp, #12
 80136f4:	af00      	add	r7, sp, #0
 80136f6:	6078      	str	r0, [r7, #4]
 80136f8:	6039      	str	r1, [r7, #0]
  return a ^ b;
 80136fa:	687a      	ldr	r2, [r7, #4]
 80136fc:	683b      	ldr	r3, [r7, #0]
 80136fe:	4053      	eors	r3, r2
}
 8013700:	4618      	mov	r0, r3
 8013702:	370c      	adds	r7, #12
 8013704:	46bd      	mov	sp, r7
 8013706:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370a:	4770      	bx	lr

0801370c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 801370c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8013710:	b08b      	sub	sp, #44	; 0x2c
 8013712:	af00      	add	r7, sp, #0
 8013714:	6078      	str	r0, [r7, #4]
 8013716:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8013718:	6879      	ldr	r1, [r7, #4]
 801371a:	4608      	mov	r0, r1
 801371c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8013720:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 8013724:	6839      	ldr	r1, [r7, #0]
 8013726:	4608      	mov	r0, r1
 8013728:	ea4f 71e0 	mov.w	r1, r0, asr #31
 801372c:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 8013730:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8013734:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013738:	eb18 0a00 	adds.w	sl, r8, r0
 801373c:	eb49 0b01 	adc.w	fp, r9, r1
 8013740:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 8013744:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013748:	2800      	cmp	r0, #0
 801374a:	f171 0100 	sbcs.w	r1, r1, #0
 801374e:	db04      	blt.n	801375a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 8013750:	f04f 0001 	mov.w	r0, #1
 8013754:	f04f 0100 	mov.w	r1, #0
 8013758:	e003      	b.n	8013762 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 801375a:	f04f 30ff 	mov.w	r0, #4294967295
 801375e:	f04f 31ff 	mov.w	r1, #4294967295
 8013762:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 8013766:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 801376a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 801376e:	eb18 0400 	adds.w	r4, r8, r0
 8013772:	eb49 0501 	adc.w	r5, r9, r1
 8013776:	0fe9      	lsrs	r1, r5, #31
 8013778:	4608      	mov	r0, r1
 801377a:	f04f 0100 	mov.w	r1, #0
 801377e:	1902      	adds	r2, r0, r4
 8013780:	eb41 0305 	adc.w	r3, r1, r5
 8013784:	f04f 0000 	mov.w	r0, #0
 8013788:	f04f 0100 	mov.w	r1, #0
 801378c:	0850      	lsrs	r0, r2, #1
 801378e:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 8013792:	1059      	asrs	r1, r3, #1
 8013794:	4602      	mov	r2, r0
 8013796:	460b      	mov	r3, r1
 8013798:	4613      	mov	r3, r2
}
 801379a:	4618      	mov	r0, r3
 801379c:	372c      	adds	r7, #44	; 0x2c
 801379e:	46bd      	mov	sp, r7
 80137a0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80137a4:	4770      	bx	lr

080137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 80137a6:	b580      	push	{r7, lr}
 80137a8:	b084      	sub	sp, #16
 80137aa:	af00      	add	r7, sp, #0
 80137ac:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 80137ae:	f107 030c 	add.w	r3, r7, #12
 80137b2:	4618      	mov	r0, r3
 80137b4:	f7ff fee6 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80137b8:	4602      	mov	r2, r0
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	6013      	str	r3, [r2, #0]
    return retval;
 80137be:	68fb      	ldr	r3, [r7, #12]
  }
 80137c0:	4618      	mov	r0, r3
 80137c2:	3710      	adds	r7, #16
 80137c4:	46bd      	mov	sp, r7
 80137c6:	bd80      	pop	{r7, pc}

080137c8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 80137c8:	b580      	push	{r7, lr}
 80137ca:	b08a      	sub	sp, #40	; 0x28
 80137cc:	af00      	add	r7, sp, #0
 80137ce:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 80137d0:	f000 f85a 	bl	8013888 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 80137d4:	4603      	mov	r3, r0
 80137d6:	4619      	mov	r1, r3
 80137d8:	6878      	ldr	r0, [r7, #4]
 80137da:	f000 f860 	bl	801389e <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80137de:	4603      	mov	r3, r0
 80137e0:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 80137e2:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 80137e6:	f000 f88c 	bl	8013902 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80137ea:	4603      	mov	r3, r0
 80137ec:	4618      	mov	r0, r3
 80137ee:	f000 f874 	bl	80138da <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80137f2:	4603      	mov	r3, r0
 80137f4:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 80137f6:	4823      	ldr	r0, [pc, #140]	; (8013884 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80137f8:	f000 f883 	bl	8013902 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80137fc:	4603      	mov	r3, r0
 80137fe:	4618      	mov	r0, r3
 8013800:	f000 f86b 	bl	80138da <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013804:	4603      	mov	r3, r0
 8013806:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 8013808:	69b9      	ldr	r1, [r7, #24]
 801380a:	6a38      	ldr	r0, [r7, #32]
 801380c:	f000 f886 	bl	801391c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013810:	4603      	mov	r3, r0
 8013812:	4619      	mov	r1, r3
 8013814:	69f8      	ldr	r0, [r7, #28]
 8013816:	f000 f8a3 	bl	8013960 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801381a:	4603      	mov	r3, r0
 801381c:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801381e:	2300      	movs	r3, #0
 8013820:	627b      	str	r3, [r7, #36]	; 0x24
 8013822:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013824:	2b02      	cmp	r3, #2
 8013826:	dc21      	bgt.n	801386c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8013828:	6979      	ldr	r1, [r7, #20]
 801382a:	6a38      	ldr	r0, [r7, #32]
 801382c:	f000 f876 	bl	801391c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013830:	4603      	mov	r3, r0
 8013832:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 8013834:	f000 f8b2 	bl	801399c <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8013838:	4603      	mov	r3, r0
 801383a:	6939      	ldr	r1, [r7, #16]
 801383c:	4618      	mov	r0, r3
 801383e:	f000 f8b6 	bl	80139ae <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013842:	4603      	mov	r3, r0
 8013844:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 8013846:	68f9      	ldr	r1, [r7, #12]
 8013848:	6978      	ldr	r0, [r7, #20]
 801384a:	f000 f8ce 	bl	80139ea <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801384e:	4603      	mov	r3, r0
 8013850:	4618      	mov	r0, r3
 8013852:	f000 f8ec 	bl	8013a2e <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8013856:	4603      	mov	r3, r0
 8013858:	4619      	mov	r1, r3
 801385a:	6978      	ldr	r0, [r7, #20]
 801385c:	f000 f880 	bl	8013960 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013860:	4603      	mov	r3, r0
 8013862:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8013864:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013866:	3301      	adds	r3, #1
 8013868:	627b      	str	r3, [r7, #36]	; 0x24
 801386a:	e7da      	b.n	8013822 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 801386c:	6978      	ldr	r0, [r7, #20]
 801386e:	f000 f8f8 	bl	8013a62 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 8013872:	4603      	mov	r3, r0
 8013874:	4618      	mov	r0, r3
 8013876:	f000 f90a 	bl	8013a8e <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801387a:	4603      	mov	r3, r0
}
 801387c:	4618      	mov	r0, r3
 801387e:	3728      	adds	r7, #40	; 0x28
 8013880:	46bd      	mov	sp, r7
 8013882:	bd80      	pop	{r7, pc}
 8013884:	c3c3c3c4 	.word	0xc3c3c3c4

08013888 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8013888:	b580      	push	{r7, lr}
 801388a:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 801388c:	f000 f945 	bl	8013b1a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8013890:	4603      	mov	r3, r0
 8013892:	4618      	mov	r0, r3
 8013894:	f7ff fe81 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013898:	4603      	mov	r3, r0
  }
 801389a:	4618      	mov	r0, r3
 801389c:	bd80      	pop	{r7, pc}

0801389e <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 801389e:	b590      	push	{r4, r7, lr}
 80138a0:	b083      	sub	sp, #12
 80138a2:	af00      	add	r7, sp, #0
 80138a4:	6078      	str	r0, [r7, #4]
 80138a6:	6039      	str	r1, [r7, #0]
 80138a8:	1d3b      	adds	r3, r7, #4
 80138aa:	4618      	mov	r0, r3
 80138ac:	f7ff fe6a 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80138b0:	4603      	mov	r3, r0
 80138b2:	681c      	ldr	r4, [r3, #0]
 80138b4:	463b      	mov	r3, r7
 80138b6:	4618      	mov	r0, r3
 80138b8:	f7ff fe64 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80138bc:	4603      	mov	r3, r0
 80138be:	681b      	ldr	r3, [r3, #0]
 80138c0:	4619      	mov	r1, r3
 80138c2:	4620      	mov	r0, r4
 80138c4:	f7ff ff22 	bl	801370c <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 80138c8:	4603      	mov	r3, r0
 80138ca:	4618      	mov	r0, r3
 80138cc:	f7ff ff6b 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80138d0:	4603      	mov	r3, r0
 80138d2:	4618      	mov	r0, r3
 80138d4:	370c      	adds	r7, #12
 80138d6:	46bd      	mov	sp, r7
 80138d8:	bd90      	pop	{r4, r7, pc}

080138da <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80138da:	b590      	push	{r4, r7, lr}
 80138dc:	b085      	sub	sp, #20
 80138de:	af00      	add	r7, sp, #0
 80138e0:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80138e2:	f107 030c 	add.w	r3, r7, #12
 80138e6:	4618      	mov	r0, r3
 80138e8:	f000 f91e 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80138ec:	4604      	mov	r4, r0
 80138ee:	6878      	ldr	r0, [r7, #4]
 80138f0:	f7fd fbf6 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80138f4:	4603      	mov	r3, r0
 80138f6:	6023      	str	r3, [r4, #0]
    return retval;
 80138f8:	68fb      	ldr	r3, [r7, #12]
  }
 80138fa:	4618      	mov	r0, r3
 80138fc:	3714      	adds	r7, #20
 80138fe:	46bd      	mov	sp, r7
 8013900:	bd90      	pop	{r4, r7, pc}

08013902 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 8013902:	b580      	push	{r7, lr}
 8013904:	b082      	sub	sp, #8
 8013906:	af00      	add	r7, sp, #0
 8013908:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 801390a:	2100      	movs	r1, #0
 801390c:	6878      	ldr	r0, [r7, #4]
 801390e:	f7fd fa97 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013912:	4603      	mov	r3, r0
}
 8013914:	4618      	mov	r0, r3
 8013916:	3708      	adds	r7, #8
 8013918:	46bd      	mov	sp, r7
 801391a:	bd80      	pop	{r7, pc}

0801391c <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 801391c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801391e:	b085      	sub	sp, #20
 8013920:	af00      	add	r7, sp, #0
 8013922:	6078      	str	r0, [r7, #4]
 8013924:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8013926:	1d3b      	adds	r3, r7, #4
 8013928:	4618      	mov	r0, r3
 801392a:	f7ff fe2b 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801392e:	4603      	mov	r3, r0
 8013930:	681d      	ldr	r5, [r3, #0]
 8013932:	463b      	mov	r3, r7
 8013934:	4618      	mov	r0, r3
 8013936:	f000 f8f7 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801393a:	4603      	mov	r3, r0
 801393c:	681e      	ldr	r6, [r3, #0]
 801393e:	f107 030c 	add.w	r3, r7, #12
 8013942:	4618      	mov	r0, r3
 8013944:	f000 f8f0 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013948:	4604      	mov	r4, r0
 801394a:	4631      	mov	r1, r6
 801394c:	4628      	mov	r0, r5
 801394e:	f7fb fe85 	bl	800f65c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013952:	4603      	mov	r3, r0
 8013954:	6023      	str	r3, [r4, #0]
  return c;
 8013956:	68fb      	ldr	r3, [r7, #12]
}
 8013958:	4618      	mov	r0, r3
 801395a:	3714      	adds	r7, #20
 801395c:	46bd      	mov	sp, r7
 801395e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013960 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013960:	b590      	push	{r4, r7, lr}
 8013962:	b083      	sub	sp, #12
 8013964:	af00      	add	r7, sp, #0
 8013966:	6078      	str	r0, [r7, #4]
 8013968:	6039      	str	r1, [r7, #0]
 801396a:	1d3b      	adds	r3, r7, #4
 801396c:	4618      	mov	r0, r3
 801396e:	f000 f8db 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013972:	4603      	mov	r3, r0
 8013974:	681c      	ldr	r4, [r3, #0]
 8013976:	463b      	mov	r3, r7
 8013978:	4618      	mov	r0, r3
 801397a:	f000 f8d5 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801397e:	4603      	mov	r3, r0
 8013980:	681b      	ldr	r3, [r3, #0]
 8013982:	4619      	mov	r1, r3
 8013984:	4620      	mov	r0, r4
 8013986:	f7fd fbe7 	bl	8011158 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 801398a:	4603      	mov	r3, r0
 801398c:	4618      	mov	r0, r3
 801398e:	f000 f8d6 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 8013992:	4603      	mov	r3, r0
 8013994:	4618      	mov	r0, r3
 8013996:	370c      	adds	r7, #12
 8013998:	46bd      	mov	sp, r7
 801399a:	bd90      	pop	{r4, r7, pc}

0801399c <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 801399c:	b580      	push	{r7, lr}
 801399e:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 80139a0:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 80139a4:	f7ff ff99 	bl	80138da <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80139a8:	4603      	mov	r3, r0
  }
 80139aa:	4618      	mov	r0, r3
 80139ac:	bd80      	pop	{r7, pc}

080139ae <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 80139ae:	b590      	push	{r4, r7, lr}
 80139b0:	b083      	sub	sp, #12
 80139b2:	af00      	add	r7, sp, #0
 80139b4:	6078      	str	r0, [r7, #4]
 80139b6:	6039      	str	r1, [r7, #0]
 80139b8:	1d3b      	adds	r3, r7, #4
 80139ba:	4618      	mov	r0, r3
 80139bc:	f000 f8b4 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80139c0:	4603      	mov	r3, r0
 80139c2:	681c      	ldr	r4, [r3, #0]
 80139c4:	463b      	mov	r3, r7
 80139c6:	4618      	mov	r0, r3
 80139c8:	f000 f8ae 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80139cc:	4603      	mov	r3, r0
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	4619      	mov	r1, r3
 80139d2:	4620      	mov	r0, r4
 80139d4:	f7ff fe0e 	bl	80135f4 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 80139d8:	4603      	mov	r3, r0
 80139da:	4618      	mov	r0, r3
 80139dc:	f000 f8af 	bl	8013b3e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80139e0:	4603      	mov	r3, r0
 80139e2:	4618      	mov	r0, r3
 80139e4:	370c      	adds	r7, #12
 80139e6:	46bd      	mov	sp, r7
 80139e8:	bd90      	pop	{r4, r7, pc}

080139ea <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80139ea:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139ec:	b085      	sub	sp, #20
 80139ee:	af00      	add	r7, sp, #0
 80139f0:	6078      	str	r0, [r7, #4]
 80139f2:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80139f4:	1d3b      	adds	r3, r7, #4
 80139f6:	4618      	mov	r0, r3
 80139f8:	f000 f896 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80139fc:	4603      	mov	r3, r0
 80139fe:	681d      	ldr	r5, [r3, #0]
 8013a00:	463b      	mov	r3, r7
 8013a02:	4618      	mov	r0, r3
 8013a04:	f000 f890 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	681e      	ldr	r6, [r3, #0]
 8013a0c:	f107 030c 	add.w	r3, r7, #12
 8013a10:	4618      	mov	r0, r3
 8013a12:	f000 f856 	bl	8013ac2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013a16:	4604      	mov	r4, r0
 8013a18:	4631      	mov	r1, r6
 8013a1a:	4628      	mov	r0, r5
 8013a1c:	f7fb fe1e 	bl	800f65c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013a20:	4603      	mov	r3, r0
 8013a22:	6023      	str	r3, [r4, #0]
  return c;
 8013a24:	68fb      	ldr	r3, [r7, #12]
}
 8013a26:	4618      	mov	r0, r3
 8013a28:	3714      	adds	r7, #20
 8013a2a:	46bd      	mov	sp, r7
 8013a2c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a2e <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013a2e:	b5b0      	push	{r4, r5, r7, lr}
 8013a30:	b084      	sub	sp, #16
 8013a32:	af00      	add	r7, sp, #0
 8013a34:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013a36:	1d3b      	adds	r3, r7, #4
 8013a38:	4618      	mov	r0, r3
 8013a3a:	f000 f842 	bl	8013ac2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013a3e:	4603      	mov	r3, r0
 8013a40:	681d      	ldr	r5, [r3, #0]
 8013a42:	f107 030c 	add.w	r3, r7, #12
 8013a46:	4618      	mov	r0, r3
 8013a48:	f000 f86e 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013a4c:	4604      	mov	r4, r0
 8013a4e:	4628      	mov	r0, r5
 8013a50:	f000 f886 	bl	8013b60 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8013a54:	4603      	mov	r3, r0
 8013a56:	6023      	str	r3, [r4, #0]
  return result;
 8013a58:	68fb      	ldr	r3, [r7, #12]
}
 8013a5a:	4618      	mov	r0, r3
 8013a5c:	3710      	adds	r7, #16
 8013a5e:	46bd      	mov	sp, r7
 8013a60:	bdb0      	pop	{r4, r5, r7, pc}

08013a62 <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8013a62:	b590      	push	{r4, r7, lr}
 8013a64:	b085      	sub	sp, #20
 8013a66:	af00      	add	r7, sp, #0
 8013a68:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8013a6a:	1d3b      	adds	r3, r7, #4
 8013a6c:	4618      	mov	r0, r3
 8013a6e:	f000 f85b 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013a72:	4604      	mov	r4, r0
 8013a74:	f107 030c 	add.w	r3, r7, #12
 8013a78:	4618      	mov	r0, r3
 8013a7a:	f000 f87d 	bl	8013b78 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013a7e:	4602      	mov	r2, r0
 8013a80:	6823      	ldr	r3, [r4, #0]
 8013a82:	6013      	str	r3, [r2, #0]
  return c;
 8013a84:	68fb      	ldr	r3, [r7, #12]
}
 8013a86:	4618      	mov	r0, r3
 8013a88:	3714      	adds	r7, #20
 8013a8a:	46bd      	mov	sp, r7
 8013a8c:	bd90      	pop	{r4, r7, pc}

08013a8e <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013a8e:	b5b0      	push	{r4, r5, r7, lr}
 8013a90:	b084      	sub	sp, #16
 8013a92:	af00      	add	r7, sp, #0
 8013a94:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013a96:	1d3b      	adds	r3, r7, #4
 8013a98:	4618      	mov	r0, r3
 8013a9a:	f000 f86d 	bl	8013b78 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013a9e:	4603      	mov	r3, r0
 8013aa0:	681d      	ldr	r5, [r3, #0]
 8013aa2:	f107 030c 	add.w	r3, r7, #12
 8013aa6:	4618      	mov	r0, r3
 8013aa8:	f7ff fd6c 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013aac:	4604      	mov	r4, r0
 8013aae:	4628      	mov	r0, r5
 8013ab0:	f000 f86d 	bl	8013b8e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8013ab4:	4603      	mov	r3, r0
 8013ab6:	6023      	str	r3, [r4, #0]
  return result;
 8013ab8:	68fb      	ldr	r3, [r7, #12]
}
 8013aba:	4618      	mov	r0, r3
 8013abc:	3710      	adds	r7, #16
 8013abe:	46bd      	mov	sp, r7
 8013ac0:	bdb0      	pop	{r4, r5, r7, pc}

08013ac2 <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8013ac2:	b480      	push	{r7}
 8013ac4:	b083      	sub	sp, #12
 8013ac6:	af00      	add	r7, sp, #0
 8013ac8:	6078      	str	r0, [r7, #4]
 8013aca:	687b      	ldr	r3, [r7, #4]
 8013acc:	4618      	mov	r0, r3
 8013ace:	370c      	adds	r7, #12
 8013ad0:	46bd      	mov	sp, r7
 8013ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad6:	4770      	bx	lr

08013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8013ad8:	b590      	push	{r4, r7, lr}
 8013ada:	b085      	sub	sp, #20
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	60f8      	str	r0, [r7, #12]
 8013ae0:	60b9      	str	r1, [r7, #8]
 8013ae2:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8013ae4:	f107 0308 	add.w	r3, r7, #8
 8013ae8:	4618      	mov	r0, r3
 8013aea:	f7ff fd4b 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013aee:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013af0:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8013af2:	1d3b      	adds	r3, r7, #4
 8013af4:	4618      	mov	r0, r3
 8013af6:	f7ff fd45 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013afa:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	461a      	mov	r2, r3
 8013b00:	4621      	mov	r1, r4
 8013b02:	68f8      	ldr	r0, [r7, #12]
 8013b04:	f7ff fdd7 	bl	80136b6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013b08:	4603      	mov	r3, r0
 8013b0a:	4618      	mov	r0, r3
 8013b0c:	f7ff fe4b 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013b10:	4603      	mov	r3, r0
}
 8013b12:	4618      	mov	r0, r3
 8013b14:	3714      	adds	r7, #20
 8013b16:	46bd      	mov	sp, r7
 8013b18:	bd90      	pop	{r4, r7, pc}

08013b1a <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8013b1a:	b580      	push	{r7, lr}
 8013b1c:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8013b1e:	f7fa fd4d 	bl	800e5bc <_ZNSt14numeric_limitsIlE3maxEv>
 8013b22:	4603      	mov	r3, r0
  }
 8013b24:	4618      	mov	r0, r3
 8013b26:	bd80      	pop	{r7, pc}

08013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8013b28:	b480      	push	{r7}
 8013b2a:	b083      	sub	sp, #12
 8013b2c:	af00      	add	r7, sp, #0
 8013b2e:	6078      	str	r0, [r7, #4]
 8013b30:	687b      	ldr	r3, [r7, #4]
 8013b32:	4618      	mov	r0, r3
 8013b34:	370c      	adds	r7, #12
 8013b36:	46bd      	mov	sp, r7
 8013b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b3c:	4770      	bx	lr

08013b3e <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8013b3e:	b580      	push	{r7, lr}
 8013b40:	b084      	sub	sp, #16
 8013b42:	af00      	add	r7, sp, #0
 8013b44:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013b46:	f107 030c 	add.w	r3, r7, #12
 8013b4a:	4618      	mov	r0, r3
 8013b4c:	f7ff ffec 	bl	8013b28 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013b50:	4602      	mov	r2, r0
 8013b52:	687b      	ldr	r3, [r7, #4]
 8013b54:	6013      	str	r3, [r2, #0]
    return retval;
 8013b56:	68fb      	ldr	r3, [r7, #12]
  }
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3710      	adds	r7, #16
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}

08013b60 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013b60:	b580      	push	{r7, lr}
 8013b62:	b082      	sub	sp, #8
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013b68:	6878      	ldr	r0, [r7, #4]
 8013b6a:	f000 f82f 	bl	8013bcc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8013b6e:	4603      	mov	r3, r0
}
 8013b70:	4618      	mov	r0, r3
 8013b72:	3708      	adds	r7, #8
 8013b74:	46bd      	mov	sp, r7
 8013b76:	bd80      	pop	{r7, pc}

08013b78 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8013b78:	b480      	push	{r7}
 8013b7a:	b083      	sub	sp, #12
 8013b7c:	af00      	add	r7, sp, #0
 8013b7e:	6078      	str	r0, [r7, #4]
 8013b80:	687b      	ldr	r3, [r7, #4]
 8013b82:	4618      	mov	r0, r3
 8013b84:	370c      	adds	r7, #12
 8013b86:	46bd      	mov	sp, r7
 8013b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b8c:	4770      	bx	lr

08013b8e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013b8e:	b580      	push	{r7, lr}
 8013b90:	b082      	sub	sp, #8
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013b96:	6878      	ldr	r0, [r7, #4]
 8013b98:	f000 f85a 	bl	8013c50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8013b9c:	4603      	mov	r3, r0
}
 8013b9e:	4618      	mov	r0, r3
 8013ba0:	3708      	adds	r7, #8
 8013ba2:	46bd      	mov	sp, r7
 8013ba4:	bd80      	pop	{r7, pc}

08013ba6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8013ba6:	b580      	push	{r7, lr}
 8013ba8:	b082      	sub	sp, #8
 8013baa:	af00      	add	r7, sp, #0
 8013bac:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8013bae:	687b      	ldr	r3, [r7, #4]
 8013bb0:	2b00      	cmp	r3, #0
 8013bb2:	bf0c      	ite	eq
 8013bb4:	2301      	moveq	r3, #1
 8013bb6:	2300      	movne	r3, #0
 8013bb8:	b2db      	uxtb	r3, r3
 8013bba:	4618      	mov	r0, r3
 8013bbc:	f7fd fb1a 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8013bc0:	4603      	mov	r3, r0
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3708      	adds	r7, #8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
	...

08013bcc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b08a      	sub	sp, #40	; 0x28
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013bd4:	f7fb fd1f 	bl	800f616 <_ZNSt14numeric_limitsIlE3minEv>
 8013bd8:	4603      	mov	r3, r0
 8013bda:	4618      	mov	r0, r3
 8013bdc:	f7fd fa80 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013be0:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013be2:	f7fa fceb 	bl	800e5bc <_ZNSt14numeric_limitsIlE3maxEv>
 8013be6:	4603      	mov	r3, r0
 8013be8:	4618      	mov	r0, r3
 8013bea:	f7fd fa79 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013bee:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013bf0:	2320      	movs	r3, #32
 8013bf2:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013bf4:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013bf8:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013bfa:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8013bfe:	f7fd fa6f 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c02:	4603      	mov	r3, r0
 8013c04:	4619      	mov	r1, r3
 8013c06:	6878      	ldr	r0, [r7, #4]
 8013c08:	f7fd fab4 	bl	8011174 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013c0c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013c0e:	480f      	ldr	r0, [pc, #60]	; (8013c4c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8013c10:	f7fd fa66 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c14:	4603      	mov	r3, r0
 8013c16:	4619      	mov	r1, r3
 8013c18:	6878      	ldr	r0, [r7, #4]
 8013c1a:	f7fd fa89 	bl	8011130 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013c1e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013c20:	2102      	movs	r1, #2
 8013c22:	6878      	ldr	r0, [r7, #4]
 8013c24:	f7ff fd01 	bl	801362a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013c28:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013c2a:	68fa      	ldr	r2, [r7, #12]
 8013c2c:	6a39      	ldr	r1, [r7, #32]
 8013c2e:	6978      	ldr	r0, [r7, #20]
 8013c30:	f7ff fd41 	bl	80136b6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013c34:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013c36:	68fa      	ldr	r2, [r7, #12]
 8013c38:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c3a:	6938      	ldr	r0, [r7, #16]
 8013c3c:	f7ff fd3b 	bl	80136b6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013c40:	60f8      	str	r0, [r7, #12]
    return result;
 8013c42:	68fb      	ldr	r3, [r7, #12]
  }
 8013c44:	4618      	mov	r0, r3
 8013c46:	3728      	adds	r7, #40	; 0x28
 8013c48:	46bd      	mov	sp, r7
 8013c4a:	bd80      	pop	{r7, pc}
 8013c4c:	e0000001 	.word	0xe0000001

08013c50 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013c50:	b580      	push	{r7, lr}
 8013c52:	b08a      	sub	sp, #40	; 0x28
 8013c54:	af00      	add	r7, sp, #0
 8013c56:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013c58:	f7fb fcdd 	bl	800f616 <_ZNSt14numeric_limitsIlE3minEv>
 8013c5c:	4603      	mov	r3, r0
 8013c5e:	4618      	mov	r0, r3
 8013c60:	f7fd fa3e 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c64:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013c66:	f7fa fca9 	bl	800e5bc <_ZNSt14numeric_limitsIlE3maxEv>
 8013c6a:	4603      	mov	r3, r0
 8013c6c:	4618      	mov	r0, r3
 8013c6e:	f7fd fa37 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c72:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013c74:	2320      	movs	r3, #32
 8013c76:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013c78:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013c7c:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013c7e:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8013c82:	f7fd fa2d 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c86:	4603      	mov	r3, r0
 8013c88:	4619      	mov	r1, r3
 8013c8a:	6878      	ldr	r0, [r7, #4]
 8013c8c:	f7fd fa72 	bl	8011174 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013c90:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013c92:	480f      	ldr	r0, [pc, #60]	; (8013cd0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8013c94:	f7fd fa24 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c98:	4603      	mov	r3, r0
 8013c9a:	4619      	mov	r1, r3
 8013c9c:	6878      	ldr	r0, [r7, #4]
 8013c9e:	f7fd fa47 	bl	8011130 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013ca2:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013ca4:	2101      	movs	r1, #1
 8013ca6:	6878      	ldr	r0, [r7, #4]
 8013ca8:	f7ff fcbf 	bl	801362a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013cac:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013cae:	68fa      	ldr	r2, [r7, #12]
 8013cb0:	6a39      	ldr	r1, [r7, #32]
 8013cb2:	6978      	ldr	r0, [r7, #20]
 8013cb4:	f7ff fcff 	bl	80136b6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013cb8:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013cba:	68fa      	ldr	r2, [r7, #12]
 8013cbc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013cbe:	6938      	ldr	r0, [r7, #16]
 8013cc0:	f7ff fcf9 	bl	80136b6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013cc4:	60f8      	str	r0, [r7, #12]
    return result;
 8013cc6:	68fb      	ldr	r3, [r7, #12]
  }
 8013cc8:	4618      	mov	r0, r3
 8013cca:	3728      	adds	r7, #40	; 0x28
 8013ccc:	46bd      	mov	sp, r7
 8013cce:	bd80      	pop	{r7, pc}
 8013cd0:	c0000001 	.word	0xc0000001

08013cd4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b08a      	sub	sp, #40	; 0x28
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8013cdc:	482c      	ldr	r0, [pc, #176]	; (8013d90 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8013cde:	f7ff fc70 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8013ce2:	4603      	mov	r3, r0
 8013ce4:	4618      	mov	r0, r3
 8013ce6:	f7ff fc58 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013cea:	4603      	mov	r3, r0
 8013cec:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8013cee:	4829      	ldr	r0, [pc, #164]	; (8013d94 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8013cf0:	f7ff fc67 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8013cf4:	4603      	mov	r3, r0
 8013cf6:	4618      	mov	r0, r3
 8013cf8:	f7ff fc4f 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013cfc:	4603      	mov	r3, r0
 8013cfe:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8013d00:	f000 f86c 	bl	8013ddc <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8013d04:	4603      	mov	r3, r0
 8013d06:	4619      	mov	r1, r3
 8013d08:	6878      	ldr	r0, [r7, #4]
 8013d0a:	f000 f870 	bl	8013dee <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8013d12:	69f9      	ldr	r1, [r7, #28]
 8013d14:	69f8      	ldr	r0, [r7, #28]
 8013d16:	f000 f83f 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8013d1e:	69f9      	ldr	r1, [r7, #28]
 8013d20:	69b8      	ldr	r0, [r7, #24]
 8013d22:	f000 f839 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d26:	4603      	mov	r3, r0
 8013d28:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8013d2a:	69b9      	ldr	r1, [r7, #24]
 8013d2c:	69b8      	ldr	r0, [r7, #24]
 8013d2e:	f000 f833 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d32:	4603      	mov	r3, r0
 8013d34:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8013d36:	6938      	ldr	r0, [r7, #16]
 8013d38:	f000 f877 	bl	8013e2a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8013d3c:	4603      	mov	r3, r0
 8013d3e:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8013d40:	6979      	ldr	r1, [r7, #20]
 8013d42:	68f8      	ldr	r0, [r7, #12]
 8013d44:	f000 f853 	bl	8013dee <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d48:	4603      	mov	r3, r0
 8013d4a:	6a39      	ldr	r1, [r7, #32]
 8013d4c:	4618      	mov	r0, r3
 8013d4e:	f000 f823 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d52:	4603      	mov	r3, r0
 8013d54:	69b9      	ldr	r1, [r7, #24]
 8013d56:	4618      	mov	r0, r3
 8013d58:	f000 f849 	bl	8013dee <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d5c:	4603      	mov	r3, r0
 8013d5e:	4618      	mov	r0, r3
 8013d60:	f000 f879 	bl	8013e56 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8013d64:	4603      	mov	r3, r0
 8013d66:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8013d68:	68b9      	ldr	r1, [r7, #8]
 8013d6a:	69f8      	ldr	r0, [r7, #28]
 8013d6c:	f000 f83f 	bl	8013dee <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d70:	4603      	mov	r3, r0
 8013d72:	4619      	mov	r1, r3
 8013d74:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d76:	f000 f80f 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d7a:	4603      	mov	r3, r0
 8013d7c:	4619      	mov	r1, r3
 8013d7e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d80:	f000 f87f 	bl	8013e82 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d84:	4603      	mov	r3, r0
}
 8013d86:	4618      	mov	r0, r3
 8013d88:	3728      	adds	r7, #40	; 0x28
 8013d8a:	46bd      	mov	sp, r7
 8013d8c:	bd80      	pop	{r7, pc}
 8013d8e:	bf00      	nop
 8013d90:	70f5a894 	.word	0x70f5a894
 8013d94:	2aaaaaab 	.word	0x2aaaaaab

08013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d9a:	b085      	sub	sp, #20
 8013d9c:	af00      	add	r7, sp, #0
 8013d9e:	6078      	str	r0, [r7, #4]
 8013da0:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8013da2:	1d3b      	adds	r3, r7, #4
 8013da4:	4618      	mov	r0, r3
 8013da6:	f7ff fbed 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013daa:	4603      	mov	r3, r0
 8013dac:	681d      	ldr	r5, [r3, #0]
 8013dae:	463b      	mov	r3, r7
 8013db0:	4618      	mov	r0, r3
 8013db2:	f7ff fbe7 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013db6:	4603      	mov	r3, r0
 8013db8:	681e      	ldr	r6, [r3, #0]
 8013dba:	f107 030c 	add.w	r3, r7, #12
 8013dbe:	4618      	mov	r0, r3
 8013dc0:	f7ff fbe0 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013dc4:	4604      	mov	r4, r0
 8013dc6:	4631      	mov	r1, r6
 8013dc8:	4628      	mov	r0, r5
 8013dca:	f7fb fc47 	bl	800f65c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013dce:	4603      	mov	r3, r0
 8013dd0:	6023      	str	r3, [r4, #0]
  return c;
 8013dd2:	68fb      	ldr	r3, [r7, #12]
}
 8013dd4:	4618      	mov	r0, r3
 8013dd6:	3714      	adds	r7, #20
 8013dd8:	46bd      	mov	sp, r7
 8013dda:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013ddc <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8013ddc:	b580      	push	{r7, lr}
 8013dde:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8013de0:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8013de4:	f7ff fbd9 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013de8:	4603      	mov	r3, r0
  }
 8013dea:	4618      	mov	r0, r3
 8013dec:	bd80      	pop	{r7, pc}

08013dee <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013dee:	b590      	push	{r4, r7, lr}
 8013df0:	b083      	sub	sp, #12
 8013df2:	af00      	add	r7, sp, #0
 8013df4:	6078      	str	r0, [r7, #4]
 8013df6:	6039      	str	r1, [r7, #0]
 8013df8:	1d3b      	adds	r3, r7, #4
 8013dfa:	4618      	mov	r0, r3
 8013dfc:	f7ff fbc2 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e00:	4603      	mov	r3, r0
 8013e02:	681c      	ldr	r4, [r3, #0]
 8013e04:	463b      	mov	r3, r7
 8013e06:	4618      	mov	r0, r3
 8013e08:	f7ff fbbc 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e0c:	4603      	mov	r3, r0
 8013e0e:	681b      	ldr	r3, [r3, #0]
 8013e10:	4619      	mov	r1, r3
 8013e12:	4620      	mov	r0, r4
 8013e14:	f7fd f9a0 	bl	8011158 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013e18:	4603      	mov	r3, r0
 8013e1a:	4618      	mov	r0, r3
 8013e1c:	f7ff fcc3 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013e20:	4603      	mov	r3, r0
 8013e22:	4618      	mov	r0, r3
 8013e24:	370c      	adds	r7, #12
 8013e26:	46bd      	mov	sp, r7
 8013e28:	bd90      	pop	{r4, r7, pc}

08013e2a <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8013e2a:	b580      	push	{r7, lr}
 8013e2c:	b082      	sub	sp, #8
 8013e2e:	af00      	add	r7, sp, #0
 8013e30:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8013e32:	1d3b      	adds	r3, r7, #4
 8013e34:	4618      	mov	r0, r3
 8013e36:	f7ff fba5 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e3a:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013e3c:	681b      	ldr	r3, [r3, #0]
 8013e3e:	4618      	mov	r0, r3
 8013e40:	f000 f83d 	bl	8013ebe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8013e44:	4603      	mov	r3, r0
 8013e46:	4618      	mov	r0, r3
 8013e48:	f7ff fcad 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013e4c:	4603      	mov	r3, r0
}
 8013e4e:	4618      	mov	r0, r3
 8013e50:	3708      	adds	r7, #8
 8013e52:	46bd      	mov	sp, r7
 8013e54:	bd80      	pop	{r7, pc}

08013e56 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8013e56:	b580      	push	{r7, lr}
 8013e58:	b082      	sub	sp, #8
 8013e5a:	af00      	add	r7, sp, #0
 8013e5c:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8013e5e:	1d3b      	adds	r3, r7, #4
 8013e60:	4618      	mov	r0, r3
 8013e62:	f7ff fb8f 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e66:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	4618      	mov	r0, r3
 8013e6c:	f7ff fbb6 	bl	80135dc <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8013e70:	4603      	mov	r3, r0
 8013e72:	4618      	mov	r0, r3
 8013e74:	f7ff fc97 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013e78:	4603      	mov	r3, r0
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3708      	adds	r7, #8
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	bd80      	pop	{r7, pc}

08013e82 <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8013e82:	b590      	push	{r4, r7, lr}
 8013e84:	b083      	sub	sp, #12
 8013e86:	af00      	add	r7, sp, #0
 8013e88:	6078      	str	r0, [r7, #4]
 8013e8a:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8013e8c:	1d3b      	adds	r3, r7, #4
 8013e8e:	4618      	mov	r0, r3
 8013e90:	f7ff fb78 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e94:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013e96:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8013e98:	463b      	mov	r3, r7
 8013e9a:	4618      	mov	r0, r3
 8013e9c:	f7ff fb72 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013ea0:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	4619      	mov	r1, r3
 8013ea6:	4620      	mov	r0, r4
 8013ea8:	f000 f815 	bl	8013ed6 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8013eac:	4603      	mov	r3, r0
 8013eae:	4618      	mov	r0, r3
 8013eb0:	f7ff fc79 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013eb4:	4603      	mov	r3, r0
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	370c      	adds	r7, #12
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd90      	pop	{r4, r7, pc}

08013ebe <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013ebe:	b580      	push	{r7, lr}
 8013ec0:	b082      	sub	sp, #8
 8013ec2:	af00      	add	r7, sp, #0
 8013ec4:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013ec6:	6878      	ldr	r0, [r7, #4]
 8013ec8:	f000 f813 	bl	8013ef2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8013ecc:	4603      	mov	r3, r0
}
 8013ece:	4618      	mov	r0, r3
 8013ed0:	3708      	adds	r7, #8
 8013ed2:	46bd      	mov	sp, r7
 8013ed4:	bd80      	pop	{r7, pc}

08013ed6 <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8013ed6:	b580      	push	{r7, lr}
 8013ed8:	b082      	sub	sp, #8
 8013eda:	af00      	add	r7, sp, #0
 8013edc:	6078      	str	r0, [r7, #4]
 8013ede:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 8013ee0:	6839      	ldr	r1, [r7, #0]
 8013ee2:	6878      	ldr	r0, [r7, #4]
 8013ee4:	f000 f812 	bl	8013f0c <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8013ee8:	4603      	mov	r3, r0
}
 8013eea:	4618      	mov	r0, r3
 8013eec:	3708      	adds	r7, #8
 8013eee:	46bd      	mov	sp, r7
 8013ef0:	bd80      	pop	{r7, pc}

08013ef2 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013ef2:	b580      	push	{r7, lr}
 8013ef4:	b082      	sub	sp, #8
 8013ef6:	af00      	add	r7, sp, #0
 8013ef8:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013efa:	2102      	movs	r1, #2
 8013efc:	6878      	ldr	r0, [r7, #4]
 8013efe:	f7fc ff9f 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013f02:	4603      	mov	r3, r0
  }
 8013f04:	4618      	mov	r0, r3
 8013f06:	3708      	adds	r7, #8
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b082      	sub	sp, #8
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
 8013f14:	6039      	str	r1, [r7, #0]
 8013f16:	6839      	ldr	r1, [r7, #0]
 8013f18:	6878      	ldr	r0, [r7, #4]
 8013f1a:	f7fd f91d 	bl	8011158 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013f1e:	4603      	mov	r3, r0
 8013f20:	4618      	mov	r0, r3
 8013f22:	3708      	adds	r7, #8
 8013f24:	46bd      	mov	sp, r7
 8013f26:	bd80      	pop	{r7, pc}

08013f28 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8013f28:	b590      	push	{r4, r7, lr}
 8013f2a:	ed2d 8b04 	vpush	{d8-d9}
 8013f2e:	b0a5      	sub	sp, #148	; 0x94
 8013f30:	af02      	add	r7, sp, #8
 8013f32:	60f8      	str	r0, [r7, #12]
 8013f34:	60b9      	str	r1, [r7, #8]
 8013f36:	607a      	str	r2, [r7, #4]
 8013f38:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8013f3a:	68b8      	ldr	r0, [r7, #8]
 8013f3c:	f7fb fa4a 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013f40:	4603      	mov	r3, r0
 8013f42:	2b04      	cmp	r3, #4
 8013f44:	d001      	beq.n	8013f4a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8013f46:	f007 f83f 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8013f4a:	6838      	ldr	r0, [r7, #0]
 8013f4c:	f7fb fa42 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013f50:	4603      	mov	r3, r0
 8013f52:	2b04      	cmp	r3, #4
 8013f54:	d001      	beq.n	8013f5a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8013f56:	f007 f837 	bl	801afc8 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8013f5a:	2300      	movs	r3, #0
 8013f5c:	683a      	ldr	r2, [r7, #0]
 8013f5e:	2100      	movs	r1, #0
 8013f60:	68b8      	ldr	r0, [r7, #8]
 8013f62:	f7fd f98f 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013f66:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8013f68:	2303      	movs	r3, #3
 8013f6a:	683a      	ldr	r2, [r7, #0]
 8013f6c:	2103      	movs	r1, #3
 8013f6e:	68b8      	ldr	r0, [r7, #8]
 8013f70:	f7fd f988 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013f74:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8013f76:	2101      	movs	r1, #1
 8013f78:	68b8      	ldr	r0, [r7, #8]
 8013f7a:	f7fb fa37 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8013f7e:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8013f80:	2102      	movs	r1, #2
 8013f82:	68b8      	ldr	r0, [r7, #8]
 8013f84:	f7fb fa32 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8013f88:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8013f8a:	2101      	movs	r1, #1
 8013f8c:	6838      	ldr	r0, [r7, #0]
 8013f8e:	f7fb fa2d 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8013f92:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8013f94:	2102      	movs	r1, #2
 8013f96:	6838      	ldr	r0, [r7, #0]
 8013f98:	f7fb fa28 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8013f9c:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8013f9e:	68fb      	ldr	r3, [r7, #12]
 8013fa0:	68db      	ldr	r3, [r3, #12]
 8013fa2:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8013fa4:	68fb      	ldr	r3, [r7, #12]
 8013fa6:	691b      	ldr	r3, [r3, #16]
 8013fa8:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8013faa:	2300      	movs	r3, #0
 8013fac:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013fb0:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013fb6:	429a      	cmp	r2, r3
 8013fb8:	f280 80d4 	bge.w	8014164 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8013fbc:	2300      	movs	r3, #0
 8013fbe:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013fc2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013fc6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fc8:	429a      	cmp	r2, r3
 8013fca:	f280 80c5 	bge.w	8014158 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8013fce:	2300      	movs	r3, #0
 8013fd0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013fd2:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013fd4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fd6:	429a      	cmp	r2, r3
 8013fd8:	f280 80b8 	bge.w	801414c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 8013fdc:	2300      	movs	r3, #0
 8013fde:	67bb      	str	r3, [r7, #120]	; 0x78
 8013fe0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013fe2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013fe4:	429a      	cmp	r2, r3
 8013fe6:	f280 80ad 	bge.w	8014144 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8013fea:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013fec:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013fee:	fb02 f303 	mul.w	r3, r2, r3
 8013ff2:	68fa      	ldr	r2, [r7, #12]
 8013ff4:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8013ff8:	1a9b      	subs	r3, r3, r2
 8013ffa:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8013ffc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014000:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014002:	fb02 f303 	mul.w	r3, r2, r3
 8014006:	68fa      	ldr	r2, [r7, #12]
 8014008:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 801400c:	1a9b      	subs	r3, r3, r2
 801400e:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8014010:	2300      	movs	r3, #0
 8014012:	61bb      	str	r3, [r7, #24]
 8014014:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014016:	425b      	negs	r3, r3
 8014018:	61fb      	str	r3, [r7, #28]
 801401a:	f107 021c 	add.w	r2, r7, #28
 801401e:	f107 0318 	add.w	r3, r7, #24
 8014022:	4611      	mov	r1, r2
 8014024:	4618      	mov	r0, r3
 8014026:	f7fb f914 	bl	800f252 <_ZSt3maxIiERKT_S2_S2_>
 801402a:	4603      	mov	r3, r0
 801402c:	681b      	ldr	r3, [r3, #0]
 801402e:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8014030:	68fb      	ldr	r3, [r7, #12]
 8014032:	f103 0018 	add.w	r0, r3, #24
 8014036:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014038:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801403a:	1ad3      	subs	r3, r2, r3
 801403c:	623b      	str	r3, [r7, #32]
 801403e:	f107 0320 	add.w	r3, r7, #32
 8014042:	4619      	mov	r1, r3
 8014044:	f000 fcba 	bl	80149bc <_ZSt3minIiERKT_S2_S2_>
 8014048:	4603      	mov	r3, r0
 801404a:	681b      	ldr	r3, [r3, #0]
 801404c:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 801404e:	2300      	movs	r3, #0
 8014050:	627b      	str	r3, [r7, #36]	; 0x24
 8014052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014054:	425b      	negs	r3, r3
 8014056:	62bb      	str	r3, [r7, #40]	; 0x28
 8014058:	f107 0228 	add.w	r2, r7, #40	; 0x28
 801405c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014060:	4611      	mov	r1, r2
 8014062:	4618      	mov	r0, r3
 8014064:	f7fb f8f5 	bl	800f252 <_ZSt3maxIiERKT_S2_S2_>
 8014068:	4603      	mov	r3, r0
 801406a:	681b      	ldr	r3, [r3, #0]
 801406c:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 801406e:	68fb      	ldr	r3, [r7, #12]
 8014070:	f103 0014 	add.w	r0, r3, #20
 8014074:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014076:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014078:	1ad3      	subs	r3, r2, r3
 801407a:	62fb      	str	r3, [r7, #44]	; 0x2c
 801407c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014080:	4619      	mov	r1, r3
 8014082:	f000 fc9b 	bl	80149bc <_ZSt3minIiERKT_S2_S2_>
 8014086:	4603      	mov	r3, r0
 8014088:	681b      	ldr	r3, [r3, #0]
 801408a:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 801408c:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8014090:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8014092:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014094:	677b      	str	r3, [r7, #116]	; 0x74
 8014096:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014098:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801409a:	429a      	cmp	r2, r3
 801409c:	da2b      	bge.n	80140f6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801409e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80140a0:	673b      	str	r3, [r7, #112]	; 0x70
 80140a2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80140a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80140a6:	429a      	cmp	r2, r3
 80140a8:	da21      	bge.n	80140ee <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80140aa:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80140ac:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80140ae:	4413      	add	r3, r2
 80140b0:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80140b2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80140b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80140b6:	4413      	add	r3, r2
 80140b8:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80140ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80140bc:	9300      	str	r3, [sp, #0]
 80140be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140c2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80140c6:	68b8      	ldr	r0, [r7, #8]
 80140c8:	f7fb fc08 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80140cc:	4603      	mov	r3, r0
 80140ce:	009b      	lsls	r3, r3, #2
 80140d0:	687a      	ldr	r2, [r7, #4]
 80140d2:	441a      	add	r2, r3
 80140d4:	f107 0314 	add.w	r3, r7, #20
 80140d8:	4611      	mov	r1, r2
 80140da:	4618      	mov	r0, r3
 80140dc:	f7fa fc40 	bl	800e960 <_ZSt3maxIfERKT_S2_S2_>
 80140e0:	4603      	mov	r3, r0
              max = std::max(
 80140e2:	681b      	ldr	r3, [r3, #0]
 80140e4:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80140e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80140e8:	3301      	adds	r3, #1
 80140ea:	673b      	str	r3, [r7, #112]	; 0x70
 80140ec:	e7d9      	b.n	80140a2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80140ee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80140f0:	3301      	adds	r3, #1
 80140f2:	677b      	str	r3, [r7, #116]	; 0x74
 80140f4:	e7cf      	b.n	8014096 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 80140f6:	ed97 8a05 	vldr	s16, [r7, #20]
 80140fa:	68fb      	ldr	r3, [r7, #12]
 80140fc:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8014106:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014108:	9300      	str	r3, [sp, #0]
 801410a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801410c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014110:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8014114:	6838      	ldr	r0, [r7, #0]
 8014116:	f7fb fbe1 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801411a:	4603      	mov	r3, r0
 801411c:	009b      	lsls	r3, r3, #2
 801411e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8014122:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 8014124:	eeb0 1a49 	vmov.f32	s2, s18
 8014128:	eef0 0a68 	vmov.f32	s1, s17
 801412c:	eeb0 0a48 	vmov.f32	s0, s16
 8014130:	f7fb fc4f 	bl	800f9d2 <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 8014134:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8014138:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 801413c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801413e:	3301      	adds	r3, #1
 8014140:	67bb      	str	r3, [r7, #120]	; 0x78
 8014142:	e74d      	b.n	8013fe0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014144:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014146:	3301      	adds	r3, #1
 8014148:	67fb      	str	r3, [r7, #124]	; 0x7c
 801414a:	e742      	b.n	8013fd2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801414c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014150:	3301      	adds	r3, #1
 8014152:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014156:	e734      	b.n	8013fc2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8014158:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 801415c:	3301      	adds	r3, #1
 801415e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014162:	e725      	b.n	8013fb0 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 8014164:	bf00      	nop
 8014166:	378c      	adds	r7, #140	; 0x8c
 8014168:	46bd      	mov	sp, r7
 801416a:	ecbd 8b04 	vpop	{d8-d9}
 801416e:	bd90      	pop	{r4, r7, pc}

08014170 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
 8014170:	b580      	push	{r7, lr}
 8014172:	b0a4      	sub	sp, #144	; 0x90
 8014174:	af02      	add	r7, sp, #8
 8014176:	60f8      	str	r0, [r7, #12]
 8014178:	60b9      	str	r1, [r7, #8]
 801417a:	607a      	str	r2, [r7, #4]
 801417c:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 801417e:	68fb      	ldr	r3, [r7, #12]
 8014180:	69da      	ldr	r2, [r3, #28]
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	6a1b      	ldr	r3, [r3, #32]
 8014186:	429a      	cmp	r2, r3
 8014188:	dd01      	ble.n	801418e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 801418a:	f006 ff1d 	bl	801afc8 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	69db      	ldr	r3, [r3, #28]
 8014192:	2b00      	cmp	r3, #0
 8014194:	da01      	bge.n	801419a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 8014196:	f006 ff17 	bl	801afc8 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 801419a:	68fb      	ldr	r3, [r7, #12]
 801419c:	6a1b      	ldr	r3, [r3, #32]
 801419e:	2bff      	cmp	r3, #255	; 0xff
 80141a0:	dd01      	ble.n	80141a6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 80141a2:	f006 ff11 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 80141a6:	68b8      	ldr	r0, [r7, #8]
 80141a8:	f7fb f914 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80141ac:	4603      	mov	r3, r0
 80141ae:	2b04      	cmp	r3, #4
 80141b0:	d001      	beq.n	80141b6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 80141b2:	f006 ff09 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80141b6:	6838      	ldr	r0, [r7, #0]
 80141b8:	f7fb f90c 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80141bc:	4603      	mov	r3, r0
 80141be:	2b04      	cmp	r3, #4
 80141c0:	d001      	beq.n	80141c6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 80141c2:	f006 ff01 	bl	801afc8 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80141c6:	2300      	movs	r3, #0
 80141c8:	683a      	ldr	r2, [r7, #0]
 80141ca:	2100      	movs	r1, #0
 80141cc:	68b8      	ldr	r0, [r7, #8]
 80141ce:	f7fd f859 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80141d2:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80141d4:	2303      	movs	r3, #3
 80141d6:	683a      	ldr	r2, [r7, #0]
 80141d8:	2103      	movs	r1, #3
 80141da:	68b8      	ldr	r0, [r7, #8]
 80141dc:	f7fd f852 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80141e0:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 80141e2:	2101      	movs	r1, #1
 80141e4:	68b8      	ldr	r0, [r7, #8]
 80141e6:	f7fb f901 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80141ea:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 80141ec:	2102      	movs	r1, #2
 80141ee:	68b8      	ldr	r0, [r7, #8]
 80141f0:	f7fb f8fc 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80141f4:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 80141f6:	2101      	movs	r1, #1
 80141f8:	6838      	ldr	r0, [r7, #0]
 80141fa:	f7fb f8f7 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 80141fe:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8014200:	2102      	movs	r1, #2
 8014202:	6838      	ldr	r0, [r7, #0]
 8014204:	f7fb f8f2 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8014208:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 801420a:	68fb      	ldr	r3, [r7, #12]
 801420c:	68db      	ldr	r3, [r3, #12]
 801420e:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8014210:	68fb      	ldr	r3, [r7, #12]
 8014212:	691b      	ldr	r3, [r3, #16]
 8014214:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8014216:	2300      	movs	r3, #0
 8014218:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801421c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014220:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014222:	429a      	cmp	r2, r3
 8014224:	f280 80e1 	bge.w	80143ea <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014228:	2300      	movs	r3, #0
 801422a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801422e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014232:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8014234:	429a      	cmp	r2, r3
 8014236:	f280 80d2 	bge.w	80143de <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801423a:	2300      	movs	r3, #0
 801423c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801423e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014240:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8014242:	429a      	cmp	r2, r3
 8014244:	f280 80c5 	bge.w	80143d2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 8014248:	2300      	movs	r3, #0
 801424a:	67bb      	str	r3, [r7, #120]	; 0x78
 801424c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801424e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014250:	429a      	cmp	r2, r3
 8014252:	f280 80ba 	bge.w	80143ca <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8014256:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014258:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801425a:	fb02 f303 	mul.w	r3, r2, r3
 801425e:	68fa      	ldr	r2, [r7, #12]
 8014260:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8014264:	1a9b      	subs	r3, r3, r2
 8014266:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8014268:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801426c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 801426e:	fb02 f303 	mul.w	r3, r2, r3
 8014272:	68fa      	ldr	r2, [r7, #12]
 8014274:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8014278:	1a9b      	subs	r3, r3, r2
 801427a:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801427c:	2300      	movs	r3, #0
 801427e:	617b      	str	r3, [r7, #20]
 8014280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014282:	425b      	negs	r3, r3
 8014284:	61bb      	str	r3, [r7, #24]
 8014286:	f107 0218 	add.w	r2, r7, #24
 801428a:	f107 0314 	add.w	r3, r7, #20
 801428e:	4611      	mov	r1, r2
 8014290:	4618      	mov	r0, r3
 8014292:	f7fa ffde 	bl	800f252 <_ZSt3maxIiERKT_S2_S2_>
 8014296:	4603      	mov	r3, r0
 8014298:	681b      	ldr	r3, [r3, #0]
 801429a:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 801429c:	68fb      	ldr	r3, [r7, #12]
 801429e:	f103 0018 	add.w	r0, r3, #24
 80142a2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80142a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80142a6:	1ad3      	subs	r3, r2, r3
 80142a8:	61fb      	str	r3, [r7, #28]
 80142aa:	f107 031c 	add.w	r3, r7, #28
 80142ae:	4619      	mov	r1, r3
 80142b0:	f000 fb84 	bl	80149bc <_ZSt3minIiERKT_S2_S2_>
 80142b4:	4603      	mov	r3, r0
 80142b6:	681b      	ldr	r3, [r3, #0]
 80142b8:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80142ba:	2300      	movs	r3, #0
 80142bc:	623b      	str	r3, [r7, #32]
 80142be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142c0:	425b      	negs	r3, r3
 80142c2:	627b      	str	r3, [r7, #36]	; 0x24
 80142c4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80142c8:	f107 0320 	add.w	r3, r7, #32
 80142cc:	4611      	mov	r1, r2
 80142ce:	4618      	mov	r0, r3
 80142d0:	f7fa ffbf 	bl	800f252 <_ZSt3maxIiERKT_S2_S2_>
 80142d4:	4603      	mov	r3, r0
 80142d6:	681b      	ldr	r3, [r3, #0]
 80142d8:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80142da:	68fb      	ldr	r3, [r7, #12]
 80142dc:	f103 0014 	add.w	r0, r3, #20
 80142e0:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80142e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142e4:	1ad3      	subs	r3, r2, r3
 80142e6:	62bb      	str	r3, [r7, #40]	; 0x28
 80142e8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80142ec:	4619      	mov	r1, r3
 80142ee:	f000 fb65 	bl	80149bc <_ZSt3minIiERKT_S2_S2_>
 80142f2:	4603      	mov	r3, r0
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8 max = 0;
 80142f8:	2300      	movs	r3, #0
 80142fa:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80142fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142fe:	677b      	str	r3, [r7, #116]	; 0x74
 8014300:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014304:	429a      	cmp	r2, r3
 8014306:	da2b      	bge.n	8014360 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8014308:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801430a:	673b      	str	r3, [r7, #112]	; 0x70
 801430c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801430e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014310:	429a      	cmp	r2, r3
 8014312:	da21      	bge.n	8014358 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8014314:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014316:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014318:	4413      	add	r3, r2
 801431a:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 801431c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801431e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014320:	4413      	add	r3, r2
 8014322:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 8014324:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014326:	9300      	str	r3, [sp, #0]
 8014328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801432a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801432c:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8014330:	68b8      	ldr	r0, [r7, #8]
 8014332:	f7fb fad3 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014336:	4603      	mov	r3, r0
 8014338:	461a      	mov	r2, r3
 801433a:	687b      	ldr	r3, [r7, #4]
 801433c:	441a      	add	r2, r3
 801433e:	f107 0313 	add.w	r3, r7, #19
 8014342:	4611      	mov	r1, r2
 8014344:	4618      	mov	r0, r3
 8014346:	f000 fb4d 	bl	80149e4 <_ZSt3maxIhERKT_S2_S2_>
 801434a:	4603      	mov	r3, r0
              max = std::max(
 801434c:	781b      	ldrb	r3, [r3, #0]
 801434e:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8014350:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014352:	3301      	adds	r3, #1
 8014354:	673b      	str	r3, [r7, #112]	; 0x70
 8014356:	e7d9      	b.n	801430c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8014358:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801435a:	3301      	adds	r3, #1
 801435c:	677b      	str	r3, [r7, #116]	; 0x74
 801435e:	e7cf      	b.n	8014300 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
 8014360:	68fb      	ldr	r3, [r7, #12]
 8014362:	69db      	ldr	r3, [r3, #28]
 8014364:	b2db      	uxtb	r3, r3
 8014366:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 801436a:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 801436e:	f107 0313 	add.w	r3, r7, #19
 8014372:	4611      	mov	r1, r2
 8014374:	4618      	mov	r0, r3
 8014376:	f000 fb35 	bl	80149e4 <_ZSt3maxIhERKT_S2_S2_>
 801437a:	4603      	mov	r3, r0
 801437c:	781b      	ldrb	r3, [r3, #0]
 801437e:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8>(max, params.quantized_activation_max);
 8014380:	68fb      	ldr	r3, [r7, #12]
 8014382:	6a1b      	ldr	r3, [r3, #32]
 8014384:	b2db      	uxtb	r3, r3
 8014386:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801438a:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 801438e:	f107 0313 	add.w	r3, r7, #19
 8014392:	4611      	mov	r1, r2
 8014394:	4618      	mov	r0, r3
 8014396:	f000 fb39 	bl	8014a0c <_ZSt3minIhERKT_S2_S2_>
 801439a:	4603      	mov	r3, r0
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80143a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143a2:	9300      	str	r3, [sp, #0]
 80143a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80143aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80143ae:	6838      	ldr	r0, [r7, #0]
 80143b0:	f7fb fa94 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80143b4:	4603      	mov	r3, r0
 80143b6:	461a      	mov	r2, r3
 80143b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80143bc:	4413      	add	r3, r2
 80143be:	7cfa      	ldrb	r2, [r7, #19]
 80143c0:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 80143c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143c4:	3301      	adds	r3, #1
 80143c6:	67bb      	str	r3, [r7, #120]	; 0x78
 80143c8:	e740      	b.n	801424c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80143ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143cc:	3301      	adds	r3, #1
 80143ce:	67fb      	str	r3, [r7, #124]	; 0x7c
 80143d0:	e735      	b.n	801423e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80143d2:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80143d6:	3301      	adds	r3, #1
 80143d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80143dc:	e727      	b.n	801422e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 80143de:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80143e2:	3301      	adds	r3, #1
 80143e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80143e8:	e718      	b.n	801421c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
 80143ea:	bf00      	nop
 80143ec:	3788      	adds	r7, #136	; 0x88
 80143ee:	46bd      	mov	sp, r7
 80143f0:	bd80      	pop	{r7, pc}

080143f2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
 80143f2:	b590      	push	{r4, r7, lr}
 80143f4:	b0a5      	sub	sp, #148	; 0x94
 80143f6:	af02      	add	r7, sp, #8
 80143f8:	60f8      	str	r0, [r7, #12]
 80143fa:	60b9      	str	r1, [r7, #8]
 80143fc:	607a      	str	r2, [r7, #4]
 80143fe:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8014400:	68fb      	ldr	r3, [r7, #12]
 8014402:	69da      	ldr	r2, [r3, #28]
 8014404:	68fb      	ldr	r3, [r7, #12]
 8014406:	6a1b      	ldr	r3, [r3, #32]
 8014408:	429a      	cmp	r2, r3
 801440a:	dd01      	ble.n	8014410 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e>
 801440c:	f006 fddc 	bl	801afc8 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
 8014410:	68fb      	ldr	r3, [r7, #12]
 8014412:	69dc      	ldr	r4, [r3, #28]
 8014414:	f7fa fae1 	bl	800e9da <_ZNSt14numeric_limitsIaE3minEv>
 8014418:	4603      	mov	r3, r0
 801441a:	429c      	cmp	r4, r3
 801441c:	da01      	bge.n	8014422 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x30>
 801441e:	f006 fdd3 	bl	801afc8 <abort>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
 8014422:	68fb      	ldr	r3, [r7, #12]
 8014424:	6a1c      	ldr	r4, [r3, #32]
 8014426:	f7fa fae1 	bl	800e9ec <_ZNSt14numeric_limitsIaE3maxEv>
 801442a:	4603      	mov	r3, r0
 801442c:	429c      	cmp	r4, r3
 801442e:	dd01      	ble.n	8014434 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x42>
 8014430:	f006 fdca 	bl	801afc8 <abort>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8014434:	68b8      	ldr	r0, [r7, #8]
 8014436:	f7fa ffcd 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801443a:	4603      	mov	r3, r0
 801443c:	2b04      	cmp	r3, #4
 801443e:	d001      	beq.n	8014444 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x52>
 8014440:	f006 fdc2 	bl	801afc8 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8014444:	6838      	ldr	r0, [r7, #0]
 8014446:	f7fa ffc5 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801444a:	4603      	mov	r3, r0
 801444c:	2b04      	cmp	r3, #4
 801444e:	d001      	beq.n	8014454 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x62>
 8014450:	f006 fdba 	bl	801afc8 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8014454:	2300      	movs	r3, #0
 8014456:	683a      	ldr	r2, [r7, #0]
 8014458:	2100      	movs	r1, #0
 801445a:	68b8      	ldr	r0, [r7, #8]
 801445c:	f7fc ff12 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014460:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8014462:	2303      	movs	r3, #3
 8014464:	683a      	ldr	r2, [r7, #0]
 8014466:	2103      	movs	r1, #3
 8014468:	68b8      	ldr	r0, [r7, #8]
 801446a:	f7fc ff0b 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801446e:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8014470:	2101      	movs	r1, #1
 8014472:	68b8      	ldr	r0, [r7, #8]
 8014474:	f7fa ffba 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8014478:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 801447a:	2102      	movs	r1, #2
 801447c:	68b8      	ldr	r0, [r7, #8]
 801447e:	f7fa ffb5 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8014482:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8014484:	2101      	movs	r1, #1
 8014486:	6838      	ldr	r0, [r7, #0]
 8014488:	f7fa ffb0 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 801448c:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 801448e:	2102      	movs	r1, #2
 8014490:	6838      	ldr	r0, [r7, #0]
 8014492:	f7fa ffab 	bl	800f3ec <_ZNK6tflite12RuntimeShape4DimsEi>
 8014496:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8014498:	68fb      	ldr	r3, [r7, #12]
 801449a:	68db      	ldr	r3, [r3, #12]
 801449c:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 801449e:	68fb      	ldr	r3, [r7, #12]
 80144a0:	691b      	ldr	r3, [r3, #16]
 80144a2:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80144a4:	2300      	movs	r3, #0
 80144a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80144aa:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 80144ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80144b0:	429a      	cmp	r2, r3
 80144b2:	f280 80e5 	bge.w	8014680 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80144b6:	2300      	movs	r3, #0
 80144b8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80144bc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80144c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144c2:	429a      	cmp	r2, r3
 80144c4:	f280 80d6 	bge.w	8014674 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x282>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80144c8:	2300      	movs	r3, #0
 80144ca:	67fb      	str	r3, [r7, #124]	; 0x7c
 80144cc:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80144ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144d0:	429a      	cmp	r2, r3
 80144d2:	f280 80c9 	bge.w	8014668 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x276>
        for (int channel = 0; channel < depth; ++channel) {
 80144d6:	2300      	movs	r3, #0
 80144d8:	67bb      	str	r3, [r7, #120]	; 0x78
 80144da:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80144dc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144de:	429a      	cmp	r2, r3
 80144e0:	f280 80be 	bge.w	8014660 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x26e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80144e4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80144e6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144e8:	fb02 f303 	mul.w	r3, r2, r3
 80144ec:	68fa      	ldr	r2, [r7, #12]
 80144ee:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80144f2:	1a9b      	subs	r3, r3, r2
 80144f4:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80144f6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80144fa:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80144fc:	fb02 f303 	mul.w	r3, r2, r3
 8014500:	68fa      	ldr	r2, [r7, #12]
 8014502:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8014506:	1a9b      	subs	r3, r3, r2
 8014508:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 801450a:	2300      	movs	r3, #0
 801450c:	617b      	str	r3, [r7, #20]
 801450e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014510:	425b      	negs	r3, r3
 8014512:	61bb      	str	r3, [r7, #24]
 8014514:	f107 0218 	add.w	r2, r7, #24
 8014518:	f107 0314 	add.w	r3, r7, #20
 801451c:	4611      	mov	r1, r2
 801451e:	4618      	mov	r0, r3
 8014520:	f7fa fe97 	bl	800f252 <_ZSt3maxIiERKT_S2_S2_>
 8014524:	4603      	mov	r3, r0
 8014526:	681b      	ldr	r3, [r3, #0]
 8014528:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 801452a:	68fb      	ldr	r3, [r7, #12]
 801452c:	f103 0018 	add.w	r0, r3, #24
 8014530:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014532:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014534:	1ad3      	subs	r3, r2, r3
 8014536:	61fb      	str	r3, [r7, #28]
 8014538:	f107 031c 	add.w	r3, r7, #28
 801453c:	4619      	mov	r1, r3
 801453e:	f000 fa3d 	bl	80149bc <_ZSt3minIiERKT_S2_S2_>
 8014542:	4603      	mov	r3, r0
 8014544:	681b      	ldr	r3, [r3, #0]
 8014546:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8014548:	2300      	movs	r3, #0
 801454a:	623b      	str	r3, [r7, #32]
 801454c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801454e:	425b      	negs	r3, r3
 8014550:	627b      	str	r3, [r7, #36]	; 0x24
 8014552:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8014556:	f107 0320 	add.w	r3, r7, #32
 801455a:	4611      	mov	r1, r2
 801455c:	4618      	mov	r0, r3
 801455e:	f7fa fe78 	bl	800f252 <_ZSt3maxIiERKT_S2_S2_>
 8014562:	4603      	mov	r3, r0
 8014564:	681b      	ldr	r3, [r3, #0]
 8014566:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8014568:	68fb      	ldr	r3, [r7, #12]
 801456a:	f103 0014 	add.w	r0, r3, #20
 801456e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014570:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014572:	1ad3      	subs	r3, r2, r3
 8014574:	62bb      	str	r3, [r7, #40]	; 0x28
 8014576:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801457a:	4619      	mov	r1, r3
 801457c:	f000 fa1e 	bl	80149bc <_ZSt3minIiERKT_S2_S2_>
 8014580:	4603      	mov	r3, r0
 8014582:	681b      	ldr	r3, [r3, #0]
 8014584:	63bb      	str	r3, [r7, #56]	; 0x38
          int8_t max = std::numeric_limits<int8_t>::lowest();
 8014586:	2380      	movs	r3, #128	; 0x80
 8014588:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801458a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801458c:	677b      	str	r3, [r7, #116]	; 0x74
 801458e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014592:	429a      	cmp	r2, r3
 8014594:	da2c      	bge.n	80145f0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1fe>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8014596:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014598:	673b      	str	r3, [r7, #112]	; 0x70
 801459a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801459c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801459e:	429a      	cmp	r2, r3
 80145a0:	da22      	bge.n	80145e8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1f6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80145a2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80145a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80145a6:	4413      	add	r3, r2
 80145a8:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 80145aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80145ac:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80145ae:	4413      	add	r3, r2
 80145b0:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80145b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80145b4:	9300      	str	r3, [sp, #0]
 80145b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145ba:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80145be:	68b8      	ldr	r0, [r7, #8]
 80145c0:	f7fb f98c 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80145c4:	4603      	mov	r3, r0
 80145c6:	461a      	mov	r2, r3
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	441a      	add	r2, r3
 80145cc:	f107 0313 	add.w	r3, r7, #19
 80145d0:	4611      	mov	r1, r2
 80145d2:	4618      	mov	r0, r3
 80145d4:	f000 fa2e 	bl	8014a34 <_ZSt3maxIaERKT_S2_S2_>
 80145d8:	4603      	mov	r3, r0
              max = std::max(
 80145da:	f993 3000 	ldrsb.w	r3, [r3]
 80145de:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80145e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80145e2:	3301      	adds	r3, #1
 80145e4:	673b      	str	r3, [r7, #112]	; 0x70
 80145e6:	e7d8      	b.n	801459a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a8>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80145e8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80145ea:	3301      	adds	r3, #1
 80145ec:	677b      	str	r3, [r7, #116]	; 0x74
 80145ee:	e7ce      	b.n	801458e <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19c>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
 80145f0:	68fb      	ldr	r3, [r7, #12]
 80145f2:	69db      	ldr	r3, [r3, #28]
 80145f4:	b25b      	sxtb	r3, r3
 80145f6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80145fa:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80145fe:	f107 0313 	add.w	r3, r7, #19
 8014602:	4611      	mov	r1, r2
 8014604:	4618      	mov	r0, r3
 8014606:	f000 fa15 	bl	8014a34 <_ZSt3maxIaERKT_S2_S2_>
 801460a:	4603      	mov	r3, r0
 801460c:	f993 3000 	ldrsb.w	r3, [r3]
 8014610:	74fb      	strb	r3, [r7, #19]
          max = std::min<int8_t>(max, params.quantized_activation_max);
 8014612:	68fb      	ldr	r3, [r7, #12]
 8014614:	6a1b      	ldr	r3, [r3, #32]
 8014616:	b25b      	sxtb	r3, r3
 8014618:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 801461c:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8014620:	f107 0313 	add.w	r3, r7, #19
 8014624:	4611      	mov	r1, r2
 8014626:	4618      	mov	r0, r3
 8014628:	f000 fa1a 	bl	8014a60 <_ZSt3minIaERKT_S2_S2_>
 801462c:	4603      	mov	r3, r0
 801462e:	f993 3000 	ldrsb.w	r3, [r3]
 8014632:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8014634:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014636:	9300      	str	r3, [sp, #0]
 8014638:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801463a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801463e:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8014642:	6838      	ldr	r0, [r7, #0]
 8014644:	f7fb f94a 	bl	800f8dc <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014648:	4603      	mov	r3, r0
 801464a:	461a      	mov	r2, r3
 801464c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014650:	4413      	add	r3, r2
 8014652:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8014656:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8014658:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801465a:	3301      	adds	r3, #1
 801465c:	67bb      	str	r3, [r7, #120]	; 0x78
 801465e:	e73c      	b.n	80144da <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xe8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014660:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014662:	3301      	adds	r3, #1
 8014664:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014666:	e731      	b.n	80144cc <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xda>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014668:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801466c:	3301      	adds	r3, #1
 801466e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014672:	e723      	b.n	80144bc <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xca>
  for (int batch = 0; batch < batches; ++batch) {
 8014674:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014678:	3301      	adds	r3, #1
 801467a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801467e:	e714      	b.n	80144aa <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xb8>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
 8014680:	bf00      	nop
 8014682:	378c      	adds	r7, #140	; 0x8c
 8014684:	46bd      	mov	sp, r7
 8014686:	bd90      	pop	{r4, r7, pc}

08014688 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(const TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input,
                             const TfLiteTensor* output, OpData* data) {
 8014688:	b5f0      	push	{r4, r5, r6, r7, lr}
 801468a:	b097      	sub	sp, #92	; 0x5c
 801468c:	af08      	add	r7, sp, #32
 801468e:	6278      	str	r0, [r7, #36]	; 0x24
 8014690:	6239      	str	r1, [r7, #32]
 8014692:	61fa      	str	r2, [r7, #28]
 8014694:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 8014696:	2101      	movs	r1, #1
 8014698:	69f8      	ldr	r0, [r7, #28]
 801469a:	f7fa f9df 	bl	800ea5c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 801469e:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 80146a0:	2102      	movs	r1, #2
 80146a2:	69f8      	ldr	r0, [r7, #28]
 80146a4:	f7fa f9da 	bl	800ea5c <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 80146a8:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 80146aa:	6a3b      	ldr	r3, [r7, #32]
 80146ac:	689d      	ldr	r5, [r3, #8]
 80146ae:	6a3b      	ldr	r3, [r7, #32]
 80146b0:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 80146b2:	6a3b      	ldr	r3, [r7, #32]
 80146b4:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 80146b6:	6a3a      	ldr	r2, [r7, #32]
 80146b8:	68d2      	ldr	r2, [r2, #12]
 80146ba:	6a39      	ldr	r1, [r7, #32]
 80146bc:	7809      	ldrb	r1, [r1, #0]
 80146be:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80146c0:	6078      	str	r0, [r7, #4]
 80146c2:	f107 0408 	add.w	r4, r7, #8
 80146c6:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80146ca:	9007      	str	r0, [sp, #28]
 80146cc:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80146d0:	9006      	str	r0, [sp, #24]
 80146d2:	9105      	str	r1, [sp, #20]
 80146d4:	9204      	str	r2, [sp, #16]
 80146d6:	9303      	str	r3, [sp, #12]
 80146d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146da:	9302      	str	r3, [sp, #8]
 80146dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146de:	9301      	str	r3, [sp, #4]
 80146e0:	2301      	movs	r3, #1
 80146e2:	9300      	str	r3, [sp, #0]
 80146e4:	2301      	movs	r3, #1
 80146e6:	4632      	mov	r2, r6
 80146e8:	4629      	mov	r1, r5
 80146ea:	4620      	mov	r0, r4
 80146ec:	f7fd fb5f 	bl	8011dae <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80146f0:	687c      	ldr	r4, [r7, #4]
 80146f2:	f107 0308 	add.w	r3, r7, #8
 80146f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80146f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 80146fc:	2300      	movs	r3, #0
}
 80146fe:	4618      	mov	r0, r3
 8014700:	373c      	adds	r7, #60	; 0x3c
 8014702:	46bd      	mov	sp, r7
 8014704:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014706 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:
  }
}

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, OpData* data,
                  const TfLiteTensor* input, TfLiteTensor* output) {
 8014706:	b590      	push	{r4, r7, lr}
 8014708:	b0a1      	sub	sp, #132	; 0x84
 801470a:	af02      	add	r7, sp, #8
 801470c:	60f8      	str	r0, [r7, #12]
 801470e:	60b9      	str	r1, [r7, #8]
 8014710:	607a      	str	r2, [r7, #4]
 8014712:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	7d1b      	ldrb	r3, [r3, #20]
 8014718:	f107 0240 	add.w	r2, r7, #64	; 0x40
 801471c:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8014720:	4618      	mov	r0, r3
 8014722:	f7fc fc75 	bl	8011010 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 8014726:	687b      	ldr	r3, [r7, #4]
 8014728:	689b      	ldr	r3, [r3, #8]
 801472a:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 801472c:	687b      	ldr	r3, [r7, #4]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	691b      	ldr	r3, [r3, #16]
 8014736:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	68db      	ldr	r3, [r3, #12]
 801473c:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 801473e:	683b      	ldr	r3, [r7, #0]
 8014740:	685b      	ldr	r3, [r3, #4]
 8014742:	b21b      	sxth	r3, r3
 8014744:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8014746:	683b      	ldr	r3, [r7, #0]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	b21b      	sxth	r3, r3
 801474c:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 801474e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014750:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 8014752:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014754:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8014756:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801475a:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 801475e:	4618      	mov	r0, r3
 8014760:	f7fa fef7 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8014764:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8014768:	f7fa ff11 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801476c:	4604      	mov	r4, r0
                         GetTensorData<float>(input), GetTensorShape(output),
 801476e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014772:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 8014776:	4618      	mov	r0, r3
 8014778:	f7fa feeb 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 801477c:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8014780:	f7fa ff16 	bl	800f5b0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8014784:	4602      	mov	r2, r0
 8014786:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801478a:	f107 0148 	add.w	r1, r7, #72	; 0x48
 801478e:	f107 0014 	add.w	r0, r7, #20
 8014792:	9200      	str	r2, [sp, #0]
 8014794:	4622      	mov	r2, r4
 8014796:	f7ff fbc7 	bl	8013f28 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         GetTensorData<float>(input), GetTensorShape(output),
 801479a:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801479e:	4618      	mov	r0, r3
 80147a0:	f7fa fe02 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 80147a4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80147a8:	4618      	mov	r0, r3
 80147aa:	f7fa fdfd 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
                         GetTensorData<float>(output));
}
 80147ae:	bf00      	nop
 80147b0:	377c      	adds	r7, #124	; 0x7c
 80147b2:	46bd      	mov	sp, r7
 80147b4:	bd90      	pop	{r4, r7, pc}

080147b6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:

void MaxEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                      TfLitePoolParams* params, OpData* data,
                      const TfLiteTensor* input, TfLiteTensor* output) {
 80147b6:	b590      	push	{r4, r7, lr}
 80147b8:	b0ad      	sub	sp, #180	; 0xb4
 80147ba:	af02      	add	r7, sp, #8
 80147bc:	60f8      	str	r0, [r7, #12]
 80147be:	60b9      	str	r1, [r7, #8]
 80147c0:	607a      	str	r2, [r7, #4]
 80147c2:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 80147c4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80147c8:	781b      	ldrb	r3, [r3, #0]
 80147ca:	2b03      	cmp	r3, #3
 80147cc:	d006      	beq.n	80147dc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 80147ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80147d2:	781b      	ldrb	r3, [r3, #0]
 80147d4:	2b09      	cmp	r3, #9
 80147d6:	d001      	beq.n	80147dc <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 80147d8:	f006 fbf6 	bl	801afc8 <abort>

  int32_t activation_min, activation_max;
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	7d19      	ldrb	r1, [r3, #20]
 80147e0:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80147e4:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80147e8:	9300      	str	r3, [sp, #0]
 80147ea:	4613      	mov	r3, r2
 80147ec:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80147f0:	68f8      	ldr	r0, [r7, #12]
 80147f2:	f7fa fcc3 	bl	800f17c <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                          &activation_min, &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	689b      	ldr	r3, [r3, #8]
 80147fa:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80147fc:	687b      	ldr	r3, [r7, #4]
 80147fe:	685b      	ldr	r3, [r3, #4]
 8014800:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	691b      	ldr	r3, [r3, #16]
 8014806:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8014808:	687b      	ldr	r3, [r7, #4]
 801480a:	68db      	ldr	r3, [r3, #12]
 801480c:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 801480e:	683b      	ldr	r3, [r7, #0]
 8014810:	685b      	ldr	r3, [r3, #4]
 8014812:	b21b      	sxth	r3, r3
 8014814:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 8014816:	683b      	ldr	r3, [r7, #0]
 8014818:	681b      	ldr	r3, [r3, #0]
 801481a:	b21b      	sxth	r3, r3
 801481c:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = activation_min;
 801481e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014820:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = activation_max;
 8014822:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014824:	637b      	str	r3, [r7, #52]	; 0x34

  if (input->type == kTfLiteUInt8) {
 8014826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 801482a:	781b      	ldrb	r3, [r3, #0]
 801482c:	2b03      	cmp	r3, #3
 801482e:	d12c      	bne.n	801488a <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0xd4>
    reference_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8014830:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014834:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8014838:	4618      	mov	r0, r3
 801483a:	f7fa fe8a 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 801483e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8014842:	f7fa fd6e 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8014846:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8014848:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801484c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8014850:	4618      	mov	r0, r3
 8014852:	f7fa fe7e 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 8014856:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801485a:	f7fa fd73 	bl	800f344 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 801485e:	4602      	mov	r2, r0
 8014860:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014864:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8014868:	f107 0014 	add.w	r0, r7, #20
 801486c:	9200      	str	r2, [sp, #0]
 801486e:	4622      	mov	r2, r4
 8014870:	f7ff fc7e 	bl	8014170 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8014874:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014878:	4618      	mov	r0, r3
 801487a:	f7fa fd95 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 801487e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014882:	4618      	mov	r0, r3
 8014884:	f7fa fd90 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    reference_integer_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
        GetTensorShape(output), GetTensorData<int8_t>(output));
  }
}
 8014888:	e02b      	b.n	80148e2 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x12c>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 801488a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 801488e:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8014892:	4618      	mov	r0, r3
 8014894:	f7fa fe5d 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 8014898:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801489c:	f7fa fe99 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80148a0:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<int8_t>(output));
 80148a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80148a6:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 80148aa:	4618      	mov	r0, r3
 80148ac:	f7fa fe51 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 80148b0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80148b4:	f7fa fe9e 	bl	800f5f4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80148b8:	4602      	mov	r2, r0
 80148ba:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80148be:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80148c2:	f107 0014 	add.w	r0, r7, #20
 80148c6:	9200      	str	r2, [sp, #0]
 80148c8:	4622      	mov	r2, r4
 80148ca:	f7ff fd92 	bl	80143f2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
        GetTensorShape(output), GetTensorData<int8_t>(output));
 80148ce:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80148d2:	4618      	mov	r0, r3
 80148d4:	f7fa fd68 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 80148d8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80148dc:	4618      	mov	r0, r3
 80148de:	f7fa fd63 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80148e2:	bf00      	nop
 80148e4:	37ac      	adds	r7, #172	; 0xac
 80148e6:	46bd      	mov	sp, r7
 80148e8:	bd90      	pop	{r4, r7, pc}
	...

080148ec <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 80148ec:	b590      	push	{r4, r7, lr}
 80148ee:	b08d      	sub	sp, #52	; 0x34
 80148f0:	af02      	add	r7, sp, #8
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 80148f6:	683b      	ldr	r3, [r7, #0]
 80148f8:	695b      	ldr	r3, [r3, #20]
 80148fa:	627b      	str	r3, [r7, #36]	; 0x24
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80148fc:	2200      	movs	r2, #0
 80148fe:	6839      	ldr	r1, [r7, #0]
 8014900:	6878      	ldr	r0, [r7, #4]
 8014902:	f7fa fce2 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014906:	6238      	str	r0, [r7, #32]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8014908:	2200      	movs	r2, #0
 801490a:	6839      	ldr	r1, [r7, #0]
 801490c:	6878      	ldr	r0, [r7, #4]
 801490e:	f7fa fcf2 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014912:	61f8      	str	r0, [r7, #28]

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
 8014914:	f107 0308 	add.w	r3, r7, #8
 8014918:	9300      	str	r3, [sp, #0]
 801491a:	69fb      	ldr	r3, [r7, #28]
 801491c:	6a3a      	ldr	r2, [r7, #32]
 801491e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014920:	6878      	ldr	r0, [r7, #4]
 8014922:	f7ff feb1 	bl	8014688 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>
 8014926:	4603      	mov	r3, r0
 8014928:	76fb      	strb	r3, [r7, #27]
 801492a:	7efb      	ldrb	r3, [r7, #27]
 801492c:	2b00      	cmp	r3, #0
 801492e:	d001      	beq.n	8014934 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x48>
 8014930:	7efb      	ldrb	r3, [r7, #27]
 8014932:	e033      	b.n	801499c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>

  switch (input->type) {
 8014934:	6a3b      	ldr	r3, [r7, #32]
 8014936:	781b      	ldrb	r3, [r3, #0]
 8014938:	2b09      	cmp	r3, #9
 801493a:	d013      	beq.n	8014964 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
 801493c:	2b09      	cmp	r3, #9
 801493e:	dc1e      	bgt.n	801497e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
 8014940:	2b01      	cmp	r3, #1
 8014942:	d002      	beq.n	801494a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e>
 8014944:	2b03      	cmp	r3, #3
 8014946:	d00d      	beq.n	8014964 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
 8014948:	e019      	b.n	801497e <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, &data, input, output);
 801494a:	f107 0208 	add.w	r2, r7, #8
 801494e:	69fb      	ldr	r3, [r7, #28]
 8014950:	9301      	str	r3, [sp, #4]
 8014952:	6a3b      	ldr	r3, [r7, #32]
 8014954:	9300      	str	r3, [sp, #0]
 8014956:	4613      	mov	r3, r2
 8014958:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801495a:	6839      	ldr	r1, [r7, #0]
 801495c:	6878      	ldr	r0, [r7, #4]
 801495e:	f7ff fed2 	bl	8014706 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 8014962:	e01a      	b.n	801499a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      MaxEvalQuantized(context, node, params, &data, input, output);
 8014964:	f107 0208 	add.w	r2, r7, #8
 8014968:	69fb      	ldr	r3, [r7, #28]
 801496a:	9301      	str	r3, [sp, #4]
 801496c:	6a3b      	ldr	r3, [r7, #32]
 801496e:	9300      	str	r3, [sp, #0]
 8014970:	4613      	mov	r3, r2
 8014972:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014974:	6839      	ldr	r1, [r7, #0]
 8014976:	6878      	ldr	r0, [r7, #4]
 8014978:	f7ff ff1d 	bl	80147b6 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 801497c:	e00d      	b.n	801499a <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 801497e:	687b      	ldr	r3, [r7, #4]
 8014980:	695c      	ldr	r4, [r3, #20]
 8014982:	6a3b      	ldr	r3, [r7, #32]
 8014984:	781b      	ldrb	r3, [r3, #0]
 8014986:	4618      	mov	r0, r3
 8014988:	f7f9 fdba 	bl	800e500 <TfLiteTypeGetName>
 801498c:	4603      	mov	r3, r0
 801498e:	461a      	mov	r2, r3
 8014990:	4904      	ldr	r1, [pc, #16]	; (80149a4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 8014992:	6878      	ldr	r0, [r7, #4]
 8014994:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 8014996:	2301      	movs	r3, #1
 8014998:	e000      	b.n	801499c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
  }
  return kTfLiteOk;
 801499a:	2300      	movs	r3, #0
}
 801499c:	4618      	mov	r0, r3
 801499e:	372c      	adds	r7, #44	; 0x2c
 80149a0:	46bd      	mov	sp, r7
 80149a2:	bd90      	pop	{r4, r7, pc}
 80149a4:	0801eacc 	.word	0x0801eacc

080149a8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}

TfLiteRegistration* Register_MAX_POOL_2D() {
 80149a8:	b480      	push	{r7}
 80149aa:	af00      	add	r7, sp, #0
                                 /*invoke=*/pooling::MaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 80149ac:	4b02      	ldr	r3, [pc, #8]	; (80149b8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x10>)
}
 80149ae:	4618      	mov	r0, r3
 80149b0:	46bd      	mov	sp, r7
 80149b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149b6:	4770      	bx	lr
 80149b8:	200000c4 	.word	0x200000c4

080149bc <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80149bc:	b480      	push	{r7}
 80149be:	b083      	sub	sp, #12
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
 80149c4:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80149c6:	683b      	ldr	r3, [r7, #0]
 80149c8:	681a      	ldr	r2, [r3, #0]
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	429a      	cmp	r2, r3
 80149d0:	da01      	bge.n	80149d6 <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 80149d2:	683b      	ldr	r3, [r7, #0]
 80149d4:	e000      	b.n	80149d8 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 80149d6:	687b      	ldr	r3, [r7, #4]
    }
 80149d8:	4618      	mov	r0, r3
 80149da:	370c      	adds	r7, #12
 80149dc:	46bd      	mov	sp, r7
 80149de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149e2:	4770      	bx	lr

080149e4 <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80149e4:	b480      	push	{r7}
 80149e6:	b083      	sub	sp, #12
 80149e8:	af00      	add	r7, sp, #0
 80149ea:	6078      	str	r0, [r7, #4]
 80149ec:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	781a      	ldrb	r2, [r3, #0]
 80149f2:	683b      	ldr	r3, [r7, #0]
 80149f4:	781b      	ldrb	r3, [r3, #0]
 80149f6:	429a      	cmp	r2, r3
 80149f8:	d201      	bcs.n	80149fe <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 80149fa:	683b      	ldr	r3, [r7, #0]
 80149fc:	e000      	b.n	8014a00 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 80149fe:	687b      	ldr	r3, [r7, #4]
    }
 8014a00:	4618      	mov	r0, r3
 8014a02:	370c      	adds	r7, #12
 8014a04:	46bd      	mov	sp, r7
 8014a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a0a:	4770      	bx	lr

08014a0c <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8014a0c:	b480      	push	{r7}
 8014a0e:	b083      	sub	sp, #12
 8014a10:	af00      	add	r7, sp, #0
 8014a12:	6078      	str	r0, [r7, #4]
 8014a14:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8014a16:	683b      	ldr	r3, [r7, #0]
 8014a18:	781a      	ldrb	r2, [r3, #0]
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	781b      	ldrb	r3, [r3, #0]
 8014a1e:	429a      	cmp	r2, r3
 8014a20:	d201      	bcs.n	8014a26 <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 8014a22:	683b      	ldr	r3, [r7, #0]
 8014a24:	e000      	b.n	8014a28 <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 8014a26:	687b      	ldr	r3, [r7, #4]
    }
 8014a28:	4618      	mov	r0, r3
 8014a2a:	370c      	adds	r7, #12
 8014a2c:	46bd      	mov	sp, r7
 8014a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a32:	4770      	bx	lr

08014a34 <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014a34:	b480      	push	{r7}
 8014a36:	b083      	sub	sp, #12
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	f993 2000 	ldrsb.w	r2, [r3]
 8014a44:	683b      	ldr	r3, [r7, #0]
 8014a46:	f993 3000 	ldrsb.w	r3, [r3]
 8014a4a:	429a      	cmp	r2, r3
 8014a4c:	da01      	bge.n	8014a52 <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8014a4e:	683b      	ldr	r3, [r7, #0]
 8014a50:	e000      	b.n	8014a54 <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8014a52:	687b      	ldr	r3, [r7, #4]
    }
 8014a54:	4618      	mov	r0, r3
 8014a56:	370c      	adds	r7, #12
 8014a58:	46bd      	mov	sp, r7
 8014a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a5e:	4770      	bx	lr

08014a60 <_ZSt3minIaERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8014a60:	b480      	push	{r7}
 8014a62:	b083      	sub	sp, #12
 8014a64:	af00      	add	r7, sp, #0
 8014a66:	6078      	str	r0, [r7, #4]
 8014a68:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8014a6a:	683b      	ldr	r3, [r7, #0]
 8014a6c:	f993 2000 	ldrsb.w	r2, [r3]
 8014a70:	687b      	ldr	r3, [r7, #4]
 8014a72:	f993 3000 	ldrsb.w	r3, [r3]
 8014a76:	429a      	cmp	r2, r3
 8014a78:	da01      	bge.n	8014a7e <_ZSt3minIaERKT_S2_S2_+0x1e>
	return __b;
 8014a7a:	683b      	ldr	r3, [r7, #0]
 8014a7c:	e000      	b.n	8014a80 <_ZSt3minIaERKT_S2_S2_+0x20>
      return __a;
 8014a7e:	687b      	ldr	r3, [r7, #4]
    }
 8014a80:	4618      	mov	r0, r3
 8014a82:	370c      	adds	r7, #12
 8014a84:	46bd      	mov	sp, r7
 8014a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a8a:	4770      	bx	lr

08014a8c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8014a8c:	b5b0      	push	{r4, r5, r7, lr}
 8014a8e:	b08e      	sub	sp, #56	; 0x38
 8014a90:	af04      	add	r7, sp, #16
 8014a92:	6078      	str	r0, [r7, #4]
 8014a94:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8014a96:	2200      	movs	r2, #0
 8014a98:	6839      	ldr	r1, [r7, #0]
 8014a9a:	6878      	ldr	r0, [r7, #4]
 8014a9c:	f7fa fc15 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014aa0:	61b8      	str	r0, [r7, #24]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8014aa2:	2200      	movs	r2, #0
 8014aa4:	6839      	ldr	r1, [r7, #0]
 8014aa6:	6878      	ldr	r0, [r7, #4]
 8014aa8:	f7fa fc25 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014aac:	6178      	str	r0, [r7, #20]
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8014aae:	69b8      	ldr	r0, [r7, #24]
 8014ab0:	f7fa f81b 	bl	800eaea <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 8014ab4:	4602      	mov	r2, r0
 8014ab6:	460b      	mov	r3, r1
 8014ab8:	4613      	mov	r3, r2
 8014aba:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 8014abc:	697b      	ldr	r3, [r7, #20]
 8014abe:	689b      	ldr	r3, [r3, #8]
 8014ac0:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8014ac2:	6838      	ldr	r0, [r7, #0]
 8014ac4:	f7fc fbc4 	bl	8011250 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014ac8:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8014aca:	2b01      	cmp	r3, #1
 8014acc:	d109      	bne.n	8014ae2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8014ad2:	2b01      	cmp	r3, #1
 8014ad4:	d105      	bne.n	8014ae2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8014ad6:	68fb      	ldr	r3, [r7, #12]
 8014ad8:	685b      	ldr	r3, [r3, #4]
 8014ada:	2b00      	cmp	r3, #0
 8014adc:	d101      	bne.n	8014ae2 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8014ade:	2301      	movs	r3, #1
 8014ae0:	e000      	b.n	8014ae4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x58>
 8014ae2:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8014ae4:	2b00      	cmp	r3, #0
 8014ae6:	d002      	beq.n	8014aee <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x62>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 8014ae8:	68fb      	ldr	r3, [r7, #12]
 8014aea:	2200      	movs	r2, #0
 8014aec:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 8014aee:	2301      	movs	r3, #1
 8014af0:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 8014af2:	f04f 33ff 	mov.w	r3, #4294967295
 8014af6:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 8014af8:	2300      	movs	r3, #0
 8014afa:	61fb      	str	r3, [r7, #28]
 8014afc:	68fb      	ldr	r3, [r7, #12]
 8014afe:	681b      	ldr	r3, [r3, #0]
 8014b00:	69fa      	ldr	r2, [r7, #28]
 8014b02:	429a      	cmp	r2, r3
 8014b04:	da2b      	bge.n	8014b5e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd2>
    int value = output_shape->data[i];
 8014b06:	68fa      	ldr	r2, [r7, #12]
 8014b08:	69fb      	ldr	r3, [r7, #28]
 8014b0a:	009b      	lsls	r3, r3, #2
 8014b0c:	4413      	add	r3, r2
 8014b0e:	685b      	ldr	r3, [r3, #4]
 8014b10:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 8014b12:	68bb      	ldr	r3, [r7, #8]
 8014b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b18:	d118      	bne.n	8014b4c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8014b1a:	6a3b      	ldr	r3, [r7, #32]
 8014b1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b20:	d011      	beq.n	8014b46 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
 8014b22:	687b      	ldr	r3, [r7, #4]
 8014b24:	695c      	ldr	r4, [r3, #20]
 8014b26:	f04f 33ff 	mov.w	r3, #4294967295
 8014b2a:	9303      	str	r3, [sp, #12]
 8014b2c:	6a3b      	ldr	r3, [r7, #32]
 8014b2e:	9302      	str	r3, [sp, #8]
 8014b30:	4b33      	ldr	r3, [pc, #204]	; (8014c00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
 8014b32:	9301      	str	r3, [sp, #4]
 8014b34:	4b33      	ldr	r3, [pc, #204]	; (8014c04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 8014b36:	9300      	str	r3, [sp, #0]
 8014b38:	2335      	movs	r3, #53	; 0x35
 8014b3a:	4a33      	ldr	r2, [pc, #204]	; (8014c08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8014b3c:	4933      	ldr	r1, [pc, #204]	; (8014c0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 8014b3e:	6878      	ldr	r0, [r7, #4]
 8014b40:	47a0      	blx	r4
 8014b42:	2301      	movs	r3, #1
 8014b44:	e058      	b.n	8014bf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
      stretch_dim = i;
 8014b46:	69fb      	ldr	r3, [r7, #28]
 8014b48:	623b      	str	r3, [r7, #32]
 8014b4a:	e004      	b.n	8014b56 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xca>
    } else {
      num_output_elements *= value;
 8014b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b4e:	68ba      	ldr	r2, [r7, #8]
 8014b50:	fb02 f303 	mul.w	r3, r2, r3
 8014b54:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 8014b56:	69fb      	ldr	r3, [r7, #28]
 8014b58:	3301      	adds	r3, #1
 8014b5a:	61fb      	str	r3, [r7, #28]
 8014b5c:	e7ce      	b.n	8014afc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
    }
  }
  if (stretch_dim != -1) {
 8014b5e:	6a3b      	ldr	r3, [r7, #32]
 8014b60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b64:	d011      	beq.n	8014b8a <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 8014b66:	693a      	ldr	r2, [r7, #16]
 8014b68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6a:	fb92 f2f3 	sdiv	r2, r2, r3
 8014b6e:	68f9      	ldr	r1, [r7, #12]
 8014b70:	6a3b      	ldr	r3, [r7, #32]
 8014b72:	009b      	lsls	r3, r3, #2
 8014b74:	440b      	add	r3, r1
 8014b76:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 8014b78:	68fa      	ldr	r2, [r7, #12]
 8014b7a:	6a3b      	ldr	r3, [r7, #32]
 8014b7c:	009b      	lsls	r3, r3, #2
 8014b7e:	4413      	add	r3, r2
 8014b80:	685a      	ldr	r2, [r3, #4]
 8014b82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b84:	fb02 f303 	mul.w	r3, r2, r3
 8014b88:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8014b8a:	69bb      	ldr	r3, [r7, #24]
 8014b8c:	781a      	ldrb	r2, [r3, #0]
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	429a      	cmp	r2, r3
 8014b94:	d01a      	beq.n	8014bcc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>
 8014b96:	687b      	ldr	r3, [r7, #4]
 8014b98:	695c      	ldr	r4, [r3, #20]
 8014b9a:	69bb      	ldr	r3, [r7, #24]
 8014b9c:	781b      	ldrb	r3, [r3, #0]
 8014b9e:	4618      	mov	r0, r3
 8014ba0:	f7f9 fcae 	bl	800e500 <TfLiteTypeGetName>
 8014ba4:	4605      	mov	r5, r0
 8014ba6:	697b      	ldr	r3, [r7, #20]
 8014ba8:	781b      	ldrb	r3, [r3, #0]
 8014baa:	4618      	mov	r0, r3
 8014bac:	f7f9 fca8 	bl	800e500 <TfLiteTypeGetName>
 8014bb0:	4603      	mov	r3, r0
 8014bb2:	9303      	str	r3, [sp, #12]
 8014bb4:	9502      	str	r5, [sp, #8]
 8014bb6:	4b16      	ldr	r3, [pc, #88]	; (8014c10 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x184>)
 8014bb8:	9301      	str	r3, [sp, #4]
 8014bba:	4b16      	ldr	r3, [pc, #88]	; (8014c14 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x188>)
 8014bbc:	9300      	str	r3, [sp, #0]
 8014bbe:	2340      	movs	r3, #64	; 0x40
 8014bc0:	4a11      	ldr	r2, [pc, #68]	; (8014c08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8014bc2:	4915      	ldr	r1, [pc, #84]	; (8014c18 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x18c>)
 8014bc4:	6878      	ldr	r0, [r7, #4]
 8014bc6:	47a0      	blx	r4
 8014bc8:	2301      	movs	r3, #1
 8014bca:	e015      	b.n	8014bf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8014bcc:	693a      	ldr	r2, [r7, #16]
 8014bce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bd0:	429a      	cmp	r2, r3
 8014bd2:	d010      	beq.n	8014bf6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16a>
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	695c      	ldr	r4, [r3, #20]
 8014bd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bda:	9303      	str	r3, [sp, #12]
 8014bdc:	693b      	ldr	r3, [r7, #16]
 8014bde:	9302      	str	r3, [sp, #8]
 8014be0:	4b0e      	ldr	r3, [pc, #56]	; (8014c1c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x190>)
 8014be2:	9301      	str	r3, [sp, #4]
 8014be4:	4b0e      	ldr	r3, [pc, #56]	; (8014c20 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x194>)
 8014be6:	9300      	str	r3, [sp, #0]
 8014be8:	2341      	movs	r3, #65	; 0x41
 8014bea:	4a07      	ldr	r2, [pc, #28]	; (8014c08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8014bec:	4907      	ldr	r1, [pc, #28]	; (8014c0c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 8014bee:	6878      	ldr	r0, [r7, #4]
 8014bf0:	47a0      	blx	r4
 8014bf2:	2301      	movs	r3, #1
 8014bf4:	e000      	b.n	8014bf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  return kTfLiteOk;
 8014bf6:	2300      	movs	r3, #0
}
 8014bf8:	4618      	mov	r0, r3
 8014bfa:	3728      	adds	r7, #40	; 0x28
 8014bfc:	46bd      	mov	sp, r7
 8014bfe:	bdb0      	pop	{r4, r5, r7, pc}
 8014c00:	0801eb60 	.word	0x0801eb60
 8014c04:	0801eb64 	.word	0x0801eb64
 8014c08:	0801eaf0 	.word	0x0801eaf0
 8014c0c:	0801eb44 	.word	0x0801eb44
 8014c10:	0801eb8c 	.word	0x0801eb8c
 8014c14:	0801eb9c 	.word	0x0801eb9c
 8014c18:	0801eb70 	.word	0x0801eb70
 8014c1c:	0801eba8 	.word	0x0801eba8
 8014c20:	0801ebbc 	.word	0x0801ebbc

08014c24 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014c24:	b590      	push	{r4, r7, lr}
 8014c26:	b087      	sub	sp, #28
 8014c28:	af04      	add	r7, sp, #16
 8014c2a:	6078      	str	r0, [r7, #4]
 8014c2c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8014c2e:	6838      	ldr	r0, [r7, #0]
 8014c30:	f7fc fb0e 	bl	8011250 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014c34:	4603      	mov	r3, r0
 8014c36:	2b01      	cmp	r3, #1
 8014c38:	d007      	beq.n	8014c4a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8014c3a:	6838      	ldr	r0, [r7, #0]
 8014c3c:	f7fc fb08 	bl	8011250 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014c40:	4603      	mov	r3, r0
 8014c42:	2b02      	cmp	r3, #2
 8014c44:	d001      	beq.n	8014c4a <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8014c46:	2301      	movs	r3, #1
 8014c48:	e000      	b.n	8014c4c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8014c4a:	2300      	movs	r3, #0
 8014c4c:	2b00      	cmp	r3, #0
 8014c4e:	d00a      	beq.n	8014c66 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8014c50:	687b      	ldr	r3, [r7, #4]
 8014c52:	695c      	ldr	r4, [r3, #20]
 8014c54:	4b27      	ldr	r3, [pc, #156]	; (8014cf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8014c56:	9300      	str	r3, [sp, #0]
 8014c58:	2346      	movs	r3, #70	; 0x46
 8014c5a:	4a27      	ldr	r2, [pc, #156]	; (8014cf8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8014c5c:	4927      	ldr	r1, [pc, #156]	; (8014cfc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8014c5e:	6878      	ldr	r0, [r7, #4]
 8014c60:	47a0      	blx	r4
 8014c62:	2301      	movs	r3, #1
 8014c64:	e041      	b.n	8014cea <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8014c66:	6838      	ldr	r0, [r7, #0]
 8014c68:	f7fc faff 	bl	801126a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8014c6c:	4603      	mov	r3, r0
 8014c6e:	2b01      	cmp	r3, #1
 8014c70:	bf14      	ite	ne
 8014c72:	2301      	movne	r3, #1
 8014c74:	2300      	moveq	r3, #0
 8014c76:	b2db      	uxtb	r3, r3
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d013      	beq.n	8014ca4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	695c      	ldr	r4, [r3, #20]
 8014c80:	6838      	ldr	r0, [r7, #0]
 8014c82:	f7fc faf2 	bl	801126a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8014c86:	4603      	mov	r3, r0
 8014c88:	2201      	movs	r2, #1
 8014c8a:	9203      	str	r2, [sp, #12]
 8014c8c:	9302      	str	r3, [sp, #8]
 8014c8e:	4b1c      	ldr	r3, [pc, #112]	; (8014d00 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8014c90:	9301      	str	r3, [sp, #4]
 8014c92:	4b1c      	ldr	r3, [pc, #112]	; (8014d04 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8014c94:	9300      	str	r3, [sp, #0]
 8014c96:	2347      	movs	r3, #71	; 0x47
 8014c98:	4a17      	ldr	r2, [pc, #92]	; (8014cf8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8014c9a:	491b      	ldr	r1, [pc, #108]	; (8014d08 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8014c9c:	6878      	ldr	r0, [r7, #4]
 8014c9e:	47a0      	blx	r4
 8014ca0:	2301      	movs	r3, #1
 8014ca2:	e022      	b.n	8014cea <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8014ca4:	6839      	ldr	r1, [r7, #0]
 8014ca6:	6878      	ldr	r0, [r7, #4]
 8014ca8:	f7ff fef0 	bl	8014a8c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8014cac:	4603      	mov	r3, r0
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	bf14      	ite	ne
 8014cb2:	2301      	movne	r3, #1
 8014cb4:	2300      	moveq	r3, #0
 8014cb6:	b2db      	uxtb	r3, r3
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d015      	beq.n	8014ce8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	695c      	ldr	r4, [r3, #20]
 8014cc0:	6839      	ldr	r1, [r7, #0]
 8014cc2:	6878      	ldr	r0, [r7, #4]
 8014cc4:	f7ff fee2 	bl	8014a8c <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8014cc8:	4603      	mov	r3, r0
 8014cca:	461a      	mov	r2, r3
 8014ccc:	2300      	movs	r3, #0
 8014cce:	9303      	str	r3, [sp, #12]
 8014cd0:	9202      	str	r2, [sp, #8]
 8014cd2:	4b0e      	ldr	r3, [pc, #56]	; (8014d0c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8014cd4:	9301      	str	r3, [sp, #4]
 8014cd6:	4b0e      	ldr	r3, [pc, #56]	; (8014d10 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8014cd8:	9300      	str	r3, [sp, #0]
 8014cda:	2348      	movs	r3, #72	; 0x48
 8014cdc:	4a06      	ldr	r2, [pc, #24]	; (8014cf8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8014cde:	490a      	ldr	r1, [pc, #40]	; (8014d08 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8014ce0:	6878      	ldr	r0, [r7, #4]
 8014ce2:	47a0      	blx	r4
 8014ce4:	2301      	movs	r3, #1
 8014ce6:	e000      	b.n	8014cea <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 8014ce8:	2300      	movs	r3, #0
}
 8014cea:	4618      	mov	r0, r3
 8014cec:	370c      	adds	r7, #12
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	bd90      	pop	{r4, r7, pc}
 8014cf2:	bf00      	nop
 8014cf4:	0801ebe8 	.word	0x0801ebe8
 8014cf8:	0801eaf0 	.word	0x0801eaf0
 8014cfc:	0801ebd0 	.word	0x0801ebd0
 8014d00:	0801ec18 	.word	0x0801ec18
 8014d04:	0801ec1c 	.word	0x0801ec1c
 8014d08:	0801eb44 	.word	0x0801eb44
 8014d0c:	0801ec30 	.word	0x0801ec30
 8014d10:	0801ec3c 	.word	0x0801ec3c

08014d14 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8014d14:	b580      	push	{r7, lr}
 8014d16:	b086      	sub	sp, #24
 8014d18:	af00      	add	r7, sp, #0
 8014d1a:	6078      	str	r0, [r7, #4]
 8014d1c:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8014d1e:	2200      	movs	r2, #0
 8014d20:	6839      	ldr	r1, [r7, #0]
 8014d22:	6878      	ldr	r0, [r7, #4]
 8014d24:	f7fa fad1 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014d28:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8014d2a:	2200      	movs	r2, #0
 8014d2c:	6839      	ldr	r1, [r7, #0]
 8014d2e:	6878      	ldr	r0, [r7, #4]
 8014d30:	f7fa fae1 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014d34:	60f8      	str	r0, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8014d36:	693b      	ldr	r3, [r7, #16]
 8014d38:	685a      	ldr	r2, [r3, #4]
 8014d3a:	68fb      	ldr	r3, [r7, #12]
 8014d3c:	685b      	ldr	r3, [r3, #4]
 8014d3e:	429a      	cmp	r2, r3
 8014d40:	d014      	beq.n	8014d6c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input->bytes; ++i) {
 8014d42:	2300      	movs	r3, #0
 8014d44:	617b      	str	r3, [r7, #20]
 8014d46:	693b      	ldr	r3, [r7, #16]
 8014d48:	699b      	ldr	r3, [r3, #24]
 8014d4a:	697a      	ldr	r2, [r7, #20]
 8014d4c:	429a      	cmp	r2, r3
 8014d4e:	d20d      	bcs.n	8014d6c <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
      output->data.raw[i] = input->data.raw[i];
 8014d50:	693b      	ldr	r3, [r7, #16]
 8014d52:	685a      	ldr	r2, [r3, #4]
 8014d54:	697b      	ldr	r3, [r7, #20]
 8014d56:	441a      	add	r2, r3
 8014d58:	68fb      	ldr	r3, [r7, #12]
 8014d5a:	6859      	ldr	r1, [r3, #4]
 8014d5c:	697b      	ldr	r3, [r7, #20]
 8014d5e:	440b      	add	r3, r1
 8014d60:	7812      	ldrb	r2, [r2, #0]
 8014d62:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input->bytes; ++i) {
 8014d64:	697b      	ldr	r3, [r7, #20]
 8014d66:	3301      	adds	r3, #1
 8014d68:	617b      	str	r3, [r7, #20]
 8014d6a:	e7ec      	b.n	8014d46 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    }
  }
  return kTfLiteOk;
 8014d6c:	2300      	movs	r3, #0
}
 8014d6e:	4618      	mov	r0, r3
 8014d70:	3718      	adds	r7, #24
 8014d72:	46bd      	mov	sp, r7
 8014d74:	bd80      	pop	{r7, pc}
	...

08014d78 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration* Register_RESHAPE() {
 8014d78:	b480      	push	{r7}
 8014d7a:	af00      	add	r7, sp, #0
                                 /*invoke=*/reshape::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8014d7c:	4b02      	ldr	r3, [pc, #8]	; (8014d88 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x10>)
}
 8014d7e:	4618      	mov	r0, r3
 8014d80:	46bd      	mov	sp, r7
 8014d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d86:	4770      	bx	lr
 8014d88:	200000e4 	.word	0x200000e4

08014d8c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 8014d8c:	b580      	push	{r7, lr}
 8014d8e:	b084      	sub	sp, #16
 8014d90:	af00      	add	r7, sp, #0
 8014d92:	60f8      	str	r0, [r7, #12]
 8014d94:	60b9      	str	r1, [r7, #8]
 8014d96:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8014d98:	68fa      	ldr	r2, [r7, #12]
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8014da0:	68b9      	ldr	r1, [r7, #8]
 8014da2:	4618      	mov	r0, r3
 8014da4:	f7fa fc5a 	bl	800f65c <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014da8:	4603      	mov	r3, r0
}
 8014daa:	4618      	mov	r0, r3
 8014dac:	3710      	adds	r7, #16
 8014dae:	46bd      	mov	sp, r7
 8014db0:	bd80      	pop	{r7, pc}

08014db2 <_ZN6tflite13GetReciprocalEliPi>:
                           int* num_bits_over_unit) {
 8014db2:	b580      	push	{r7, lr}
 8014db4:	b088      	sub	sp, #32
 8014db6:	af00      	add	r7, sp, #0
 8014db8:	60f8      	str	r0, [r7, #12]
 8014dba:	60b9      	str	r1, [r7, #8]
 8014dbc:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	4618      	mov	r0, r3
 8014dc2:	f7fe fbcd 	bl	8013560 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8014dc6:	61f8      	str	r0, [r7, #28]
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8014dc8:	68ba      	ldr	r2, [r7, #8]
 8014dca:	69fb      	ldr	r3, [r7, #28]
 8014dcc:	1ad2      	subs	r2, r2, r3
 8014dce:	687b      	ldr	r3, [r7, #4]
 8014dd0:	601a      	str	r2, [r3, #0]
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 8014dd2:	68fa      	ldr	r2, [r7, #12]
 8014dd4:	69fb      	ldr	r3, [r7, #28]
 8014dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8014dda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 8014dde:	61bb      	str	r3, [r7, #24]
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
 8014de0:	69b8      	ldr	r0, [r7, #24]
 8014de2:	f7fe fce0 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014de6:	4603      	mov	r3, r0
 8014de8:	4618      	mov	r0, r3
 8014dea:	f7fe fced 	bl	80137c8 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8014dee:	4603      	mov	r3, r0
 8014df0:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8014df2:	f107 0314 	add.w	r3, r7, #20
 8014df6:	4618      	mov	r0, r3
 8014df8:	f7fe fbc4 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014dfc:	4603      	mov	r3, r0
 8014dfe:	681b      	ldr	r3, [r3, #0]
}
 8014e00:	4618      	mov	r0, r3
 8014e02:	3720      	adds	r7, #32
 8014e04:	46bd      	mov	sp, r7
 8014e06:	bd80      	pop	{r7, pc}

08014e08 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8014e08:	b580      	push	{r7, lr}
 8014e0a:	ed2d 8b02 	vpush	{d8}
 8014e0e:	b08e      	sub	sp, #56	; 0x38
 8014e10:	af00      	add	r7, sp, #0
 8014e12:	60f8      	str	r0, [r7, #12]
 8014e14:	60b9      	str	r1, [r7, #8]
 8014e16:	607a      	str	r2, [r7, #4]
 8014e18:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014e1a:	68b8      	ldr	r0, [r7, #8]
 8014e1c:	f7fa fada 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014e20:	4603      	mov	r3, r0
 8014e22:	3b01      	subs	r3, #1
 8014e24:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014e26:	683a      	ldr	r2, [r7, #0]
 8014e28:	6a39      	ldr	r1, [r7, #32]
 8014e2a:	68b8      	ldr	r0, [r7, #8]
 8014e2c:	f7fe fb69 	bl	8013502 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014e30:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014e32:	6a3b      	ldr	r3, [r7, #32]
 8014e34:	683a      	ldr	r2, [r7, #0]
 8014e36:	6a39      	ldr	r1, [r7, #32]
 8014e38:	68b8      	ldr	r0, [r7, #8]
 8014e3a:	f7fc fa23 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014e3e:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8014e40:	2300      	movs	r3, #0
 8014e42:	637b      	str	r3, [r7, #52]	; 0x34
 8014e44:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e46:	69fb      	ldr	r3, [r7, #28]
 8014e48:	429a      	cmp	r2, r3
 8014e4a:	f280 808f 	bge.w	8014f6c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x164>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8014e4e:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8014e52:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8014e54:	2300      	movs	r3, #0
 8014e56:	633b      	str	r3, [r7, #48]	; 0x30
 8014e58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e5a:	69bb      	ldr	r3, [r7, #24]
 8014e5c:	429a      	cmp	r2, r3
 8014e5e:	da15      	bge.n	8014e8c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 8014e60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e62:	69ba      	ldr	r2, [r7, #24]
 8014e64:	fb02 f203 	mul.w	r2, r2, r3
 8014e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e6a:	4413      	add	r3, r2
 8014e6c:	009b      	lsls	r3, r3, #2
 8014e6e:	687a      	ldr	r2, [r7, #4]
 8014e70:	441a      	add	r2, r3
 8014e72:	f107 0314 	add.w	r3, r7, #20
 8014e76:	4611      	mov	r1, r2
 8014e78:	4618      	mov	r0, r3
 8014e7a:	f7f9 fd71 	bl	800e960 <_ZSt3maxIfERKT_S2_S2_>
 8014e7e:	4603      	mov	r3, r0
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8014e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e86:	3301      	adds	r3, #1
 8014e88:	633b      	str	r3, [r7, #48]	; 0x30
 8014e8a:	e7e5      	b.n	8014e58 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 8014e8c:	f04f 0300 	mov.w	r3, #0
 8014e90:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8014e92:	2300      	movs	r3, #0
 8014e94:	62bb      	str	r3, [r7, #40]	; 0x28
 8014e96:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e98:	69bb      	ldr	r3, [r7, #24]
 8014e9a:	429a      	cmp	r2, r3
 8014e9c:	da29      	bge.n	8014ef2 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xea>
      sum += std::exp((input_data[i * depth + c] - max) *
 8014e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ea0:	69ba      	ldr	r2, [r7, #24]
 8014ea2:	fb02 f203 	mul.w	r2, r2, r3
 8014ea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ea8:	4413      	add	r3, r2
 8014eaa:	009b      	lsls	r3, r3, #2
 8014eac:	687a      	ldr	r2, [r7, #4]
 8014eae:	4413      	add	r3, r2
 8014eb0:	ed93 7a00 	vldr	s14, [r3]
 8014eb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8014eb8:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 8014ebc:	68fb      	ldr	r3, [r7, #12]
 8014ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014ec2:	4610      	mov	r0, r2
 8014ec4:	4619      	mov	r1, r3
 8014ec6:	f7eb feaf 	bl	8000c28 <__aeabi_d2f>
 8014eca:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 8014ece:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014ed2:	eeb0 0a67 	vmov.f32	s0, s15
 8014ed6:	f7ec f8c5 	bl	8001064 <_ZSt3expf>
 8014eda:	eeb0 7a40 	vmov.f32	s14, s0
 8014ede:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014ee2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ee6:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8014eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eec:	3301      	adds	r3, #1
 8014eee:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ef0:	e7d1      	b.n	8014e96 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8014ef2:	2300      	movs	r3, #0
 8014ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8014ef6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ef8:	69bb      	ldr	r3, [r7, #24]
 8014efa:	429a      	cmp	r2, r3
 8014efc:	da32      	bge.n	8014f64 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8014efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f00:	69ba      	ldr	r2, [r7, #24]
 8014f02:	fb02 f203 	mul.w	r2, r2, r3
 8014f06:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f08:	4413      	add	r3, r2
 8014f0a:	009b      	lsls	r3, r3, #2
 8014f0c:	687a      	ldr	r2, [r7, #4]
 8014f0e:	4413      	add	r3, r2
 8014f10:	ed93 7a00 	vldr	s14, [r3]
 8014f14:	edd7 7a05 	vldr	s15, [r7, #20]
 8014f18:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 8014f1c:	68fb      	ldr	r3, [r7, #12]
 8014f1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f22:	4610      	mov	r0, r2
 8014f24:	4619      	mov	r1, r3
 8014f26:	f7eb fe7f 	bl	8000c28 <__aeabi_d2f>
 8014f2a:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8014f2e:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014f32:	eeb0 0a67 	vmov.f32	s0, s15
 8014f36:	f7ec f895 	bl	8001064 <_ZSt3expf>
 8014f3a:	eef0 6a40 	vmov.f32	s13, s0
 8014f3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f40:	69ba      	ldr	r2, [r7, #24]
 8014f42:	fb02 f203 	mul.w	r2, r2, r3
 8014f46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f48:	4413      	add	r3, r2
 8014f4a:	009b      	lsls	r3, r3, #2
 8014f4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f4e:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 8014f50:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014f54:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8014f58:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8014f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f5e:	3301      	adds	r3, #1
 8014f60:	627b      	str	r3, [r7, #36]	; 0x24
 8014f62:	e7c8      	b.n	8014ef6 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
  for (int i = 0; i < outer_size; ++i) {
 8014f64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f66:	3301      	adds	r3, #1
 8014f68:	637b      	str	r3, [r7, #52]	; 0x34
 8014f6a:	e76b      	b.n	8014e44 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
                                   sum;
    }
  }
}
 8014f6c:	bf00      	nop
 8014f6e:	3738      	adds	r7, #56	; 0x38
 8014f70:	46bd      	mov	sp, r7
 8014f72:	ecbd 8b02 	vpop	{d8}
 8014f76:	bd80      	pop	{r7, pc}

08014f78 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8014f78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f7c:	b08a      	sub	sp, #40	; 0x28
 8014f7e:	af04      	add	r7, sp, #16
 8014f80:	60f8      	str	r0, [r7, #12]
 8014f82:	60b9      	str	r1, [r7, #8]
 8014f84:	607a      	str	r2, [r7, #4]
 8014f86:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 8014f88:	68bb      	ldr	r3, [r7, #8]
 8014f8a:	781b      	ldrb	r3, [r3, #0]
 8014f8c:	2b03      	cmp	r3, #3
 8014f8e:	d004      	beq.n	8014f9a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8014f90:	68bb      	ldr	r3, [r7, #8]
 8014f92:	781b      	ldrb	r3, [r3, #0]
 8014f94:	2b09      	cmp	r3, #9
 8014f96:	f040 80ef 	bne.w	8015178 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
    if (input->type == kTfLiteUInt8) {
 8014f9a:	68bb      	ldr	r3, [r7, #8]
 8014f9c:	781b      	ldrb	r3, [r3, #0]
 8014f9e:	2b03      	cmp	r3, #3
 8014fa0:	d133      	bne.n	801500a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x92>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	781b      	ldrb	r3, [r3, #0]
 8014fa6:	2b03      	cmp	r3, #3
 8014fa8:	d018      	beq.n	8014fdc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x64>
 8014faa:	68fb      	ldr	r3, [r7, #12]
 8014fac:	695c      	ldr	r4, [r3, #20]
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	781b      	ldrb	r3, [r3, #0]
 8014fb2:	4618      	mov	r0, r3
 8014fb4:	f7f9 faa4 	bl	800e500 <TfLiteTypeGetName>
 8014fb8:	4605      	mov	r5, r0
 8014fba:	2003      	movs	r0, #3
 8014fbc:	f7f9 faa0 	bl	800e500 <TfLiteTypeGetName>
 8014fc0:	4603      	mov	r3, r0
 8014fc2:	9303      	str	r3, [sp, #12]
 8014fc4:	9502      	str	r5, [sp, #8]
 8014fc6:	4b91      	ldr	r3, [pc, #580]	; (801520c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>)
 8014fc8:	9301      	str	r3, [sp, #4]
 8014fca:	4b91      	ldr	r3, [pc, #580]	; (8015210 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 8014fcc:	9300      	str	r3, [sp, #0]
 8014fce:	23c2      	movs	r3, #194	; 0xc2
 8014fd0:	4a90      	ldr	r2, [pc, #576]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8014fd2:	4991      	ldr	r1, [pc, #580]	; (8015218 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8014fd4:	68f8      	ldr	r0, [r7, #12]
 8014fd6:	47a0      	blx	r4
 8014fd8:	2301      	movs	r3, #1
 8014fda:	e112      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8014fdc:	687b      	ldr	r3, [r7, #4]
 8014fde:	691b      	ldr	r3, [r3, #16]
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	f000 8094 	beq.w	801510e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	695c      	ldr	r4, [r3, #20]
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	691b      	ldr	r3, [r3, #16]
 8014fee:	2200      	movs	r2, #0
 8014ff0:	9203      	str	r2, [sp, #12]
 8014ff2:	9302      	str	r3, [sp, #8]
 8014ff4:	4b89      	ldr	r3, [pc, #548]	; (801521c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 8014ff6:	9301      	str	r3, [sp, #4]
 8014ff8:	4b89      	ldr	r3, [pc, #548]	; (8015220 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014ffa:	9300      	str	r3, [sp, #0]
 8014ffc:	23c3      	movs	r3, #195	; 0xc3
 8014ffe:	4a85      	ldr	r2, [pc, #532]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8015000:	4988      	ldr	r1, [pc, #544]	; (8015224 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8015002:	68f8      	ldr	r0, [r7, #12]
 8015004:	47a0      	blx	r4
 8015006:	2301      	movs	r3, #1
 8015008:	e0fb      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 801500a:	68bb      	ldr	r3, [r7, #8]
 801500c:	781b      	ldrb	r3, [r3, #0]
 801500e:	2b09      	cmp	r3, #9
 8015010:	d018      	beq.n	8015044 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
 8015012:	68fb      	ldr	r3, [r7, #12]
 8015014:	695c      	ldr	r4, [r3, #20]
 8015016:	68bb      	ldr	r3, [r7, #8]
 8015018:	781b      	ldrb	r3, [r3, #0]
 801501a:	4618      	mov	r0, r3
 801501c:	f7f9 fa70 	bl	800e500 <TfLiteTypeGetName>
 8015020:	4605      	mov	r5, r0
 8015022:	2009      	movs	r0, #9
 8015024:	f7f9 fa6c 	bl	800e500 <TfLiteTypeGetName>
 8015028:	4603      	mov	r3, r0
 801502a:	9303      	str	r3, [sp, #12]
 801502c:	9502      	str	r5, [sp, #8]
 801502e:	4b7e      	ldr	r3, [pc, #504]	; (8015228 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 8015030:	9301      	str	r3, [sp, #4]
 8015032:	4b7e      	ldr	r3, [pc, #504]	; (801522c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 8015034:	9300      	str	r3, [sp, #0]
 8015036:	23c5      	movs	r3, #197	; 0xc5
 8015038:	4a76      	ldr	r2, [pc, #472]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 801503a:	4977      	ldr	r1, [pc, #476]	; (8015218 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 801503c:	68f8      	ldr	r0, [r7, #12]
 801503e:	47a0      	blx	r4
 8015040:	2301      	movs	r3, #1
 8015042:	e0de      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      if (output->type == kTfLiteInt16) {
 8015044:	687b      	ldr	r3, [r7, #4]
 8015046:	781b      	ldrb	r3, [r3, #0]
 8015048:	2b07      	cmp	r3, #7
 801504a:	d116      	bne.n	801507a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 801504c:	687b      	ldr	r3, [r7, #4]
 801504e:	691b      	ldr	r3, [r3, #16]
 8015050:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 8015054:	d05b      	beq.n	801510e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8015056:	68fb      	ldr	r3, [r7, #12]
 8015058:	695c      	ldr	r4, [r3, #20]
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	691b      	ldr	r3, [r3, #16]
 801505e:	4a74      	ldr	r2, [pc, #464]	; (8015230 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8015060:	9203      	str	r2, [sp, #12]
 8015062:	9302      	str	r3, [sp, #8]
 8015064:	4b73      	ldr	r3, [pc, #460]	; (8015234 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 8015066:	9301      	str	r3, [sp, #4]
 8015068:	4b6d      	ldr	r3, [pc, #436]	; (8015220 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 801506a:	9300      	str	r3, [sp, #0]
 801506c:	23c7      	movs	r3, #199	; 0xc7
 801506e:	4a69      	ldr	r2, [pc, #420]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8015070:	496c      	ldr	r1, [pc, #432]	; (8015224 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8015072:	68f8      	ldr	r0, [r7, #12]
 8015074:	47a0      	blx	r4
 8015076:	2301      	movs	r3, #1
 8015078:	e0c3      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 801507a:	687b      	ldr	r3, [r7, #4]
 801507c:	781b      	ldrb	r3, [r3, #0]
 801507e:	2b09      	cmp	r3, #9
 8015080:	d018      	beq.n	80150b4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x13c>
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	695c      	ldr	r4, [r3, #20]
 8015086:	687b      	ldr	r3, [r7, #4]
 8015088:	781b      	ldrb	r3, [r3, #0]
 801508a:	4618      	mov	r0, r3
 801508c:	f7f9 fa38 	bl	800e500 <TfLiteTypeGetName>
 8015090:	4605      	mov	r5, r0
 8015092:	2009      	movs	r0, #9
 8015094:	f7f9 fa34 	bl	800e500 <TfLiteTypeGetName>
 8015098:	4603      	mov	r3, r0
 801509a:	9303      	str	r3, [sp, #12]
 801509c:	9502      	str	r5, [sp, #8]
 801509e:	4b62      	ldr	r3, [pc, #392]	; (8015228 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 80150a0:	9301      	str	r3, [sp, #4]
 80150a2:	4b5b      	ldr	r3, [pc, #364]	; (8015210 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 80150a4:	9300      	str	r3, [sp, #0]
 80150a6:	23cb      	movs	r3, #203	; 0xcb
 80150a8:	4a5a      	ldr	r2, [pc, #360]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80150aa:	495b      	ldr	r1, [pc, #364]	; (8015218 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80150ac:	68f8      	ldr	r0, [r7, #12]
 80150ae:	47a0      	blx	r4
 80150b0:	2301      	movs	r3, #1
 80150b2:	e0a6      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	691b      	ldr	r3, [r3, #16]
 80150b8:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80150bc:	d012      	beq.n	80150e4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 80150be:	68fb      	ldr	r3, [r7, #12]
 80150c0:	695c      	ldr	r4, [r3, #20]
 80150c2:	687b      	ldr	r3, [r7, #4]
 80150c4:	691b      	ldr	r3, [r3, #16]
 80150c6:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80150ca:	9203      	str	r2, [sp, #12]
 80150cc:	9302      	str	r3, [sp, #8]
 80150ce:	4b5a      	ldr	r3, [pc, #360]	; (8015238 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 80150d0:	9301      	str	r3, [sp, #4]
 80150d2:	4b53      	ldr	r3, [pc, #332]	; (8015220 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 80150d4:	9300      	str	r3, [sp, #0]
 80150d6:	23cc      	movs	r3, #204	; 0xcc
 80150d8:	4a4e      	ldr	r2, [pc, #312]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80150da:	4952      	ldr	r1, [pc, #328]	; (8015224 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 80150dc:	68f8      	ldr	r0, [r7, #12]
 80150de:	47a0      	blx	r4
 80150e0:	2301      	movs	r3, #1
 80150e2:	e08e      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	edd3 7a03 	vldr	s15, [r3, #12]
 80150ea:	ed9f 7a54 	vldr	s14, [pc, #336]	; 801523c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>
 80150ee:	eef4 7a47 	vcmp.f32	s15, s14
 80150f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150f6:	d00a      	beq.n	801510e <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 80150f8:	68fb      	ldr	r3, [r7, #12]
 80150fa:	695c      	ldr	r4, [r3, #20]
 80150fc:	4b50      	ldr	r3, [pc, #320]	; (8015240 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 80150fe:	9300      	str	r3, [sp, #0]
 8015100:	23cd      	movs	r3, #205	; 0xcd
 8015102:	4a44      	ldr	r2, [pc, #272]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8015104:	494f      	ldr	r1, [pc, #316]	; (8015244 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 8015106:	68f8      	ldr	r0, [r7, #12]
 8015108:	47a0      	blx	r4
 801510a:	2301      	movs	r3, #1
 801510c:	e079      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 801510e:	683b      	ldr	r3, [r7, #0]
 8015110:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 8015112:	4618      	mov	r0, r3
 8015114:	f7eb fa38 	bl	8000588 <__aeabi_f2d>
 8015118:	4680      	mov	r8, r0
 801511a:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 8015120:	4618      	mov	r0, r3
 8015122:	f7eb fa31 	bl	8000588 <__aeabi_f2d>
 8015126:	4682      	mov	sl, r0
 8015128:	468b      	mov	fp, r1
 801512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801512c:	3308      	adds	r3, #8
 801512e:	f107 0214 	add.w	r2, r7, #20
 8015132:	4619      	mov	r1, r3
 8015134:	2005      	movs	r0, #5
 8015136:	ec4b ab11 	vmov	d1, sl, fp
 801513a:	ec49 8b10 	vmov	d0, r8, r9
 801513e:	f7f9 fb47 	bl	800e7d0 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 8015142:	697a      	ldr	r2, [r7, #20]
 8015144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015146:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 8015148:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801514a:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 801514c:	221f      	movs	r2, #31
 801514e:	4619      	mov	r1, r3
 8015150:	2005      	movs	r0, #5
 8015152:	f7f9 fb85 	bl	800e860 <_ZN6tflite20CalculateInputRadiusEiii>
 8015156:	4603      	mov	r3, r0
 8015158:	4618      	mov	r0, r3
 801515a:	f7eb fa03 	bl	8000564 <__aeabi_i2d>
 801515e:	4602      	mov	r2, r0
 8015160:	460b      	mov	r3, r1
 8015162:	4614      	mov	r4, r2
 8015164:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 8015168:	4620      	mov	r0, r4
 801516a:	4629      	mov	r1, r5
 801516c:	f7eb fd14 	bl	8000b98 <__aeabi_d2iz>
 8015170:	4602      	mov	r2, r0
 8015172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015174:	619a      	str	r2, [r3, #24]
                                            op_data->input_left_shift);
 8015176:	e043      	b.n	8015200 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x288>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8015178:	68bb      	ldr	r3, [r7, #8]
 801517a:	781b      	ldrb	r3, [r3, #0]
 801517c:	2b01      	cmp	r3, #1
 801517e:	d018      	beq.n	80151b2 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x23a>
 8015180:	68fb      	ldr	r3, [r7, #12]
 8015182:	695c      	ldr	r4, [r3, #20]
 8015184:	68bb      	ldr	r3, [r7, #8]
 8015186:	781b      	ldrb	r3, [r3, #0]
 8015188:	4618      	mov	r0, r3
 801518a:	f7f9 f9b9 	bl	800e500 <TfLiteTypeGetName>
 801518e:	4605      	mov	r5, r0
 8015190:	2001      	movs	r0, #1
 8015192:	f7f9 f9b5 	bl	800e500 <TfLiteTypeGetName>
 8015196:	4603      	mov	r3, r0
 8015198:	9303      	str	r3, [sp, #12]
 801519a:	9502      	str	r5, [sp, #8]
 801519c:	4b2a      	ldr	r3, [pc, #168]	; (8015248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 801519e:	9301      	str	r3, [sp, #4]
 80151a0:	4b22      	ldr	r3, [pc, #136]	; (801522c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 80151a2:	9300      	str	r3, [sp, #0]
 80151a4:	23dd      	movs	r3, #221	; 0xdd
 80151a6:	4a1b      	ldr	r2, [pc, #108]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80151a8:	491b      	ldr	r1, [pc, #108]	; (8015218 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80151aa:	68f8      	ldr	r0, [r7, #12]
 80151ac:	47a0      	blx	r4
 80151ae:	2301      	movs	r3, #1
 80151b0:	e027      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	781b      	ldrb	r3, [r3, #0]
 80151b6:	2b01      	cmp	r3, #1
 80151b8:	d018      	beq.n	80151ec <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x274>
 80151ba:	68fb      	ldr	r3, [r7, #12]
 80151bc:	695c      	ldr	r4, [r3, #20]
 80151be:	687b      	ldr	r3, [r7, #4]
 80151c0:	781b      	ldrb	r3, [r3, #0]
 80151c2:	4618      	mov	r0, r3
 80151c4:	f7f9 f99c 	bl	800e500 <TfLiteTypeGetName>
 80151c8:	4605      	mov	r5, r0
 80151ca:	2001      	movs	r0, #1
 80151cc:	f7f9 f998 	bl	800e500 <TfLiteTypeGetName>
 80151d0:	4603      	mov	r3, r0
 80151d2:	9303      	str	r3, [sp, #12]
 80151d4:	9502      	str	r5, [sp, #8]
 80151d6:	4b1c      	ldr	r3, [pc, #112]	; (8015248 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80151d8:	9301      	str	r3, [sp, #4]
 80151da:	4b0d      	ldr	r3, [pc, #52]	; (8015210 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 80151dc:	9300      	str	r3, [sp, #0]
 80151de:	23de      	movs	r3, #222	; 0xde
 80151e0:	4a0c      	ldr	r2, [pc, #48]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80151e2:	490d      	ldr	r1, [pc, #52]	; (8015218 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80151e4:	68f8      	ldr	r0, [r7, #12]
 80151e6:	47a0      	blx	r4
 80151e8:	2301      	movs	r3, #1
 80151ea:	e00a      	b.n	8015202 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    op_data->beta = static_cast<double>(params->beta);
 80151ec:	683b      	ldr	r3, [r7, #0]
 80151ee:	681b      	ldr	r3, [r3, #0]
 80151f0:	4618      	mov	r0, r3
 80151f2:	f7eb f9c9 	bl	8000588 <__aeabi_f2d>
 80151f6:	4602      	mov	r2, r0
 80151f8:	460b      	mov	r3, r1
 80151fa:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80151fc:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 8015200:	2300      	movs	r3, #0
}
 8015202:	4618      	mov	r0, r3
 8015204:	3718      	adds	r7, #24
 8015206:	46bd      	mov	sp, r7
 8015208:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801520c:	0801eccc 	.word	0x0801eccc
 8015210:	0801ecdc 	.word	0x0801ecdc
 8015214:	0801ec5c 	.word	0x0801ec5c
 8015218:	0801ecb0 	.word	0x0801ecb0
 801521c:	0801ed08 	.word	0x0801ed08
 8015220:	0801ed0c 	.word	0x0801ed0c
 8015224:	0801ecec 	.word	0x0801ecec
 8015228:	0801ed28 	.word	0x0801ed28
 801522c:	0801ed34 	.word	0x0801ed34
 8015230:	ffff8000 	.word	0xffff8000
 8015234:	0801ed40 	.word	0x0801ed40
 8015238:	0801ed48 	.word	0x0801ed48
 801523c:	3b800000 	.word	0x3b800000
 8015240:	0801ed68 	.word	0x0801ed68
 8015244:	0801ed50 	.word	0x0801ed50
 8015248:	0801ed8c 	.word	0x0801ed8c

0801524c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 801524c:	b590      	push	{r4, r7, lr}
 801524e:	b089      	sub	sp, #36	; 0x24
 8015250:	af04      	add	r7, sp, #16
 8015252:	6078      	str	r0, [r7, #4]
 8015254:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 8015256:	6838      	ldr	r0, [r7, #0]
 8015258:	f7fb fffa 	bl	8011250 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801525c:	4603      	mov	r3, r0
 801525e:	2b01      	cmp	r3, #1
 8015260:	bf14      	ite	ne
 8015262:	2301      	movne	r3, #1
 8015264:	2300      	moveq	r3, #0
 8015266:	b2db      	uxtb	r3, r3
 8015268:	2b00      	cmp	r3, #0
 801526a:	d013      	beq.n	8015294 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	695c      	ldr	r4, [r3, #20]
 8015270:	6838      	ldr	r0, [r7, #0]
 8015272:	f7fb ffed 	bl	8011250 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8015276:	4603      	mov	r3, r0
 8015278:	2201      	movs	r2, #1
 801527a:	9203      	str	r2, [sp, #12]
 801527c:	9302      	str	r3, [sp, #8]
 801527e:	4b25      	ldr	r3, [pc, #148]	; (8015314 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 8015280:	9301      	str	r3, [sp, #4]
 8015282:	4b25      	ldr	r3, [pc, #148]	; (8015318 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 8015284:	9300      	str	r3, [sp, #0]
 8015286:	23e7      	movs	r3, #231	; 0xe7
 8015288:	4a24      	ldr	r2, [pc, #144]	; (801531c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 801528a:	4925      	ldr	r1, [pc, #148]	; (8015320 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 801528c:	6878      	ldr	r0, [r7, #4]
 801528e:	47a0      	blx	r4
 8015290:	2301      	movs	r3, #1
 8015292:	e03b      	b.n	801530c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8015294:	6838      	ldr	r0, [r7, #0]
 8015296:	f7fb ffe8 	bl	801126a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801529a:	4603      	mov	r3, r0
 801529c:	2b01      	cmp	r3, #1
 801529e:	bf14      	ite	ne
 80152a0:	2301      	movne	r3, #1
 80152a2:	2300      	moveq	r3, #0
 80152a4:	b2db      	uxtb	r3, r3
 80152a6:	2b00      	cmp	r3, #0
 80152a8:	d013      	beq.n	80152d2 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 80152aa:	687b      	ldr	r3, [r7, #4]
 80152ac:	695c      	ldr	r4, [r3, #20]
 80152ae:	6838      	ldr	r0, [r7, #0]
 80152b0:	f7fb ffdb 	bl	801126a <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 80152b4:	4603      	mov	r3, r0
 80152b6:	2201      	movs	r2, #1
 80152b8:	9203      	str	r2, [sp, #12]
 80152ba:	9302      	str	r3, [sp, #8]
 80152bc:	4b15      	ldr	r3, [pc, #84]	; (8015314 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 80152be:	9301      	str	r3, [sp, #4]
 80152c0:	4b18      	ldr	r3, [pc, #96]	; (8015324 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 80152c2:	9300      	str	r3, [sp, #0]
 80152c4:	23e8      	movs	r3, #232	; 0xe8
 80152c6:	4a15      	ldr	r2, [pc, #84]	; (801531c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 80152c8:	4915      	ldr	r1, [pc, #84]	; (8015320 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80152ca:	6878      	ldr	r0, [r7, #4]
 80152cc:	47a0      	blx	r4
 80152ce:	2301      	movs	r3, #1
 80152d0:	e01c      	b.n	801530c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  const TfLiteTensor* input = GetInput(context, node, 0);
 80152d2:	2200      	movs	r2, #0
 80152d4:	6839      	ldr	r1, [r7, #0]
 80152d6:	6878      	ldr	r0, [r7, #4]
 80152d8:	f7f9 fff7 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80152dc:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80152de:	68f8      	ldr	r0, [r7, #12]
 80152e0:	f7f9 fbaf 	bl	800ea42 <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80152e4:	4603      	mov	r3, r0
 80152e6:	2b00      	cmp	r3, #0
 80152e8:	bfd4      	ite	le
 80152ea:	2301      	movle	r3, #1
 80152ec:	2300      	movgt	r3, #0
 80152ee:	b2db      	uxtb	r3, r3
 80152f0:	2b00      	cmp	r3, #0
 80152f2:	d00a      	beq.n	801530a <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
 80152f4:	687b      	ldr	r3, [r7, #4]
 80152f6:	695c      	ldr	r4, [r3, #20]
 80152f8:	4b0b      	ldr	r3, [pc, #44]	; (8015328 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 80152fa:	9300      	str	r3, [sp, #0]
 80152fc:	23ea      	movs	r3, #234	; 0xea
 80152fe:	4a07      	ldr	r2, [pc, #28]	; (801531c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8015300:	490a      	ldr	r1, [pc, #40]	; (801532c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8015302:	6878      	ldr	r0, [r7, #4]
 8015304:	47a0      	blx	r4
 8015306:	2301      	movs	r3, #1
 8015308:	e000      	b.n	801530c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>

  return kTfLiteOk;
 801530a:	2300      	movs	r3, #0
}
 801530c:	4618      	mov	r0, r3
 801530e:	3714      	adds	r7, #20
 8015310:	46bd      	mov	sp, r7
 8015312:	bd90      	pop	{r4, r7, pc}
 8015314:	0801ed9c 	.word	0x0801ed9c
 8015318:	0801eda0 	.word	0x0801eda0
 801531c:	0801ec5c 	.word	0x0801ec5c
 8015320:	0801ecec 	.word	0x0801ecec
 8015324:	0801edb0 	.word	0x0801edb0
 8015328:	0801edc4 	.word	0x0801edc4
 801532c:	0801ed50 	.word	0x0801ed50

08015330 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 8015330:	b590      	push	{r4, r7, lr}
 8015332:	b093      	sub	sp, #76	; 0x4c
 8015334:	af02      	add	r7, sp, #8
 8015336:	60f8      	str	r0, [r7, #12]
 8015338:	60b9      	str	r1, [r7, #8]
 801533a:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 801533c:	f107 0310 	add.w	r3, r7, #16
 8015340:	68f9      	ldr	r1, [r7, #12]
 8015342:	4618      	mov	r0, r3
 8015344:	f7fa f905 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8015348:	68f8      	ldr	r0, [r7, #12]
 801534a:	f7fa f920 	bl	800f58e <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801534e:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 8015350:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015354:	68b9      	ldr	r1, [r7, #8]
 8015356:	4618      	mov	r0, r3
 8015358:	f7fa f8fb 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 801535c:	68b8      	ldr	r0, [r7, #8]
 801535e:	f7fa f927 	bl	800f5b0 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8015362:	4602      	mov	r2, r0
 8015364:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015368:	f107 0110 	add.w	r1, r7, #16
 801536c:	9200      	str	r2, [sp, #0]
 801536e:	4622      	mov	r2, r4
 8015370:	6878      	ldr	r0, [r7, #4]
 8015372:	f7ff fd49 	bl	8014e08 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 8015376:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801537a:	4618      	mov	r0, r3
 801537c:	f7fa f814 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8015380:	f107 0310 	add.w	r3, r7, #16
 8015384:	4618      	mov	r0, r3
 8015386:	f7fa f80f 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801538a:	bf00      	nop
 801538c:	3744      	adds	r7, #68	; 0x44
 801538e:	46bd      	mov	sp, r7
 8015390:	bd90      	pop	{r4, r7, pc}

08015392 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 8015392:	b590      	push	{r4, r7, lr}
 8015394:	b0ab      	sub	sp, #172	; 0xac
 8015396:	af02      	add	r7, sp, #8
 8015398:	60f8      	str	r0, [r7, #12]
 801539a:	60b9      	str	r1, [r7, #8]
 801539c:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 801539e:	68fb      	ldr	r3, [r7, #12]
 80153a0:	781b      	ldrb	r3, [r3, #0]
 80153a2:	2b03      	cmp	r3, #3
 80153a4:	d127      	bne.n	80153f6 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 80153a6:	f107 0310 	add.w	r3, r7, #16
 80153aa:	68f9      	ldr	r1, [r7, #12]
 80153ac:	4618      	mov	r0, r3
 80153ae:	f7fa f8d0 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 80153b2:	68f8      	ldr	r0, [r7, #12]
 80153b4:	f7f9 ffb5 	bl	800f322 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80153b8:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 80153ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80153be:	68b9      	ldr	r1, [r7, #8]
 80153c0:	4618      	mov	r0, r3
 80153c2:	f7fa f8c6 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 80153c6:	68b8      	ldr	r0, [r7, #8]
 80153c8:	f7f9 ffbc 	bl	800f344 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80153cc:	4602      	mov	r2, r0
 80153ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80153d2:	f107 0110 	add.w	r1, r7, #16
 80153d6:	9200      	str	r2, [sp, #0]
 80153d8:	4622      	mov	r2, r4
 80153da:	6878      	ldr	r0, [r7, #4]
 80153dc:	f000 f8c4 	bl	8015568 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 80153e0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80153e4:	4618      	mov	r0, r3
 80153e6:	f7f9 ffdf 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 80153ea:	f107 0310 	add.w	r3, r7, #16
 80153ee:	4618      	mov	r0, r3
 80153f0:	f7f9 ffda 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}
 80153f4:	e052      	b.n	801549c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
    if (output->type == kTfLiteInt16) {
 80153f6:	68bb      	ldr	r3, [r7, #8]
 80153f8:	781b      	ldrb	r3, [r3, #0]
 80153fa:	2b07      	cmp	r3, #7
 80153fc:	d127      	bne.n	801544e <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 80153fe:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015402:	68f9      	ldr	r1, [r7, #12]
 8015404:	4618      	mov	r0, r3
 8015406:	f7fa f8a4 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801540a:	68f8      	ldr	r0, [r7, #12]
 801540c:	f7fa f8e1 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8015410:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8015412:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015416:	68b9      	ldr	r1, [r7, #8]
 8015418:	4618      	mov	r0, r3
 801541a:	f7fa f89a 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801541e:	68b8      	ldr	r0, [r7, #8]
 8015420:	f7fe f85e 	bl	80134e0 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 8015424:	4602      	mov	r2, r0
 8015426:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801542a:	f107 0140 	add.w	r1, r7, #64	; 0x40
 801542e:	9200      	str	r2, [sp, #0]
 8015430:	4622      	mov	r2, r4
 8015432:	6878      	ldr	r0, [r7, #4]
 8015434:	f000 f9b3 	bl	801579e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8015438:	f107 0358 	add.w	r3, r7, #88	; 0x58
 801543c:	4618      	mov	r0, r3
 801543e:	f7f9 ffb3 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8015442:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8015446:	4618      	mov	r0, r3
 8015448:	f7f9 ffae 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801544c:	e026      	b.n	801549c <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801544e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015452:	68f9      	ldr	r1, [r7, #12]
 8015454:	4618      	mov	r0, r3
 8015456:	f7fa f87c 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801545a:	68f8      	ldr	r0, [r7, #12]
 801545c:	f7fa f8b9 	bl	800f5d2 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8015460:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int8_t>(output));
 8015462:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015466:	68b9      	ldr	r1, [r7, #8]
 8015468:	4618      	mov	r0, r3
 801546a:	f7fa f872 	bl	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 801546e:	68b8      	ldr	r0, [r7, #8]
 8015470:	f7fa f8c0 	bl	800f5f4 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8015474:	4602      	mov	r2, r0
 8015476:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801547a:	f107 0170 	add.w	r1, r7, #112	; 0x70
 801547e:	9200      	str	r2, [sp, #0]
 8015480:	4622      	mov	r2, r4
 8015482:	6878      	ldr	r0, [r7, #4]
 8015484:	f000 faa9 	bl	80159da <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
 8015488:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801548c:	4618      	mov	r0, r3
 801548e:	f7f9 ff8b 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8015492:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8015496:	4618      	mov	r0, r3
 8015498:	f7f9 ff86 	bl	800f3a8 <_ZN6tflite12RuntimeShapeD1Ev>
}
 801549c:	bf00      	nop
 801549e:	37a4      	adds	r7, #164	; 0xa4
 80154a0:	46bd      	mov	sp, r7
 80154a2:	bd90      	pop	{r4, r7, pc}

080154a4 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 80154a4:	b590      	push	{r4, r7, lr}
 80154a6:	b097      	sub	sp, #92	; 0x5c
 80154a8:	af02      	add	r7, sp, #8
 80154aa:	6078      	str	r0, [r7, #4]
 80154ac:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 80154ae:	683b      	ldr	r3, [r7, #0]
 80154b0:	695b      	ldr	r3, [r3, #20]
 80154b2:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 80154b4:	2200      	movs	r2, #0
 80154b6:	6839      	ldr	r1, [r7, #0]
 80154b8:	6878      	ldr	r0, [r7, #4]
 80154ba:	f7f9 ff06 	bl	800f2ca <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80154be:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 80154c0:	2200      	movs	r2, #0
 80154c2:	6839      	ldr	r1, [r7, #0]
 80154c4:	6878      	ldr	r0, [r7, #4]
 80154c6:	f7f9 ff16 	bl	800f2f6 <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80154ca:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 80154cc:	f107 0308 	add.w	r3, r7, #8
 80154d0:	9300      	str	r3, [sp, #0]
 80154d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154d4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80154d6:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80154d8:	6878      	ldr	r0, [r7, #4]
 80154da:	f7ff fd4d 	bl	8014f78 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 80154de:	4603      	mov	r3, r0
 80154e0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154e4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80154e8:	2b00      	cmp	r3, #0
 80154ea:	d002      	beq.n	80154f2 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
 80154ec:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80154f0:	e02a      	b.n	8015548 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 80154f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154f4:	781b      	ldrb	r3, [r3, #0]
 80154f6:	2b09      	cmp	r3, #9
 80154f8:	d00f      	beq.n	801551a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 80154fa:	2b09      	cmp	r3, #9
 80154fc:	dc16      	bgt.n	801552c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 80154fe:	2b01      	cmp	r3, #1
 8015500:	d002      	beq.n	8015508 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>
 8015502:	2b03      	cmp	r3, #3
 8015504:	d009      	beq.n	801551a <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 8015506:	e011      	b.n	801552c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 8015508:	f107 0308 	add.w	r3, r7, #8
 801550c:	461a      	mov	r2, r3
 801550e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015510:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015512:	f7ff ff0d 	bl	8015330 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8015516:	2300      	movs	r3, #0
 8015518:	e016      	b.n	8015548 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 801551a:	f107 0308 	add.w	r3, r7, #8
 801551e:	461a      	mov	r2, r3
 8015520:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8015522:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015524:	f7ff ff35 	bl	8015392 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8015528:	2300      	movs	r3, #0
 801552a:	e00d      	b.n	8015548 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	695c      	ldr	r4, [r3, #20]
 8015530:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015532:	781b      	ldrb	r3, [r3, #0]
 8015534:	4618      	mov	r0, r3
 8015536:	f7f8 ffe3 	bl	800e500 <TfLiteTypeGetName>
 801553a:	4602      	mov	r2, r0
 801553c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801553e:	781b      	ldrb	r3, [r3, #0]
 8015540:	4903      	ldr	r1, [pc, #12]	; (8015550 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 8015542:	6878      	ldr	r0, [r7, #4]
 8015544:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 8015546:	2301      	movs	r3, #1
  }
}
 8015548:	4618      	mov	r0, r3
 801554a:	3754      	adds	r7, #84	; 0x54
 801554c:	46bd      	mov	sp, r7
 801554e:	bd90      	pop	{r4, r7, pc}
 8015550:	0801ede0 	.word	0x0801ede0

08015554 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration* Register_SOFTMAX() {
 8015554:	b480      	push	{r7}
 8015556:	af00      	add	r7, sp, #0
                                 /*invoke=*/activations::SoftmaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8015558:	4b02      	ldr	r3, [pc, #8]	; (8015564 <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x10>)
}
 801555a:	4618      	mov	r0, r3
 801555c:	46bd      	mov	sp, r7
 801555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015562:	4770      	bx	lr
 8015564:	20000104 	.word	0x20000104

08015568 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 8015568:	b590      	push	{r4, r7, lr}
 801556a:	b09f      	sub	sp, #124	; 0x7c
 801556c:	af00      	add	r7, sp, #0
 801556e:	60f8      	str	r0, [r7, #12]
 8015570:	60b9      	str	r1, [r7, #8]
 8015572:	607a      	str	r2, [r7, #4]
 8015574:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 8015576:	68fb      	ldr	r3, [r7, #12]
 8015578:	689b      	ldr	r3, [r3, #8]
 801557a:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 801557c:	68fb      	ldr	r3, [r7, #12]
 801557e:	68db      	ldr	r3, [r3, #12]
 8015580:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	699b      	ldr	r3, [r3, #24]
 8015586:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8015588:	68b8      	ldr	r0, [r7, #8]
 801558a:	f7f9 ff23 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801558e:	4603      	mov	r3, r0
 8015590:	3b01      	subs	r3, #1
 8015592:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8015594:	683a      	ldr	r2, [r7, #0]
 8015596:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015598:	68b8      	ldr	r0, [r7, #8]
 801559a:	f7fd ffb2 	bl	8013502 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 801559e:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80155a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80155a2:	683a      	ldr	r2, [r7, #0]
 80155a4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80155a6:	68b8      	ldr	r0, [r7, #8]
 80155a8:	f7fb fe6c 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80155ac:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 80155ae:	2300      	movs	r3, #0
 80155b0:	677b      	str	r3, [r7, #116]	; 0x74
 80155b2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80155b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80155b6:	429a      	cmp	r2, r3
 80155b8:	f280 80ed 	bge.w	8015796 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80155bc:	2300      	movs	r3, #0
 80155be:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80155c2:	2300      	movs	r3, #0
 80155c4:	673b      	str	r3, [r7, #112]	; 0x70
 80155c6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80155c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155ca:	429a      	cmp	r2, r3
 80155cc:	da16      	bge.n	80155fc <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80155ce:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80155d0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155d2:	fb02 f203 	mul.w	r2, r2, r3
 80155d6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80155d8:	4413      	add	r3, r2
 80155da:	461a      	mov	r2, r3
 80155dc:	687b      	ldr	r3, [r7, #4]
 80155de:	441a      	add	r2, r3
 80155e0:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80155e4:	4611      	mov	r1, r2
 80155e6:	4618      	mov	r0, r3
 80155e8:	f7ff f9fc 	bl	80149e4 <_ZSt3maxIhERKT_S2_S2_>
 80155ec:	4603      	mov	r3, r0
 80155ee:	781b      	ldrb	r3, [r3, #0]
 80155f0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80155f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80155f6:	3301      	adds	r3, #1
 80155f8:	673b      	str	r3, [r7, #112]	; 0x70
 80155fa:	e7e4      	b.n	80155c6 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80155fc:	f000 fb0b 	bl	8015c16 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015600:	4603      	mov	r3, r0
 8015602:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015604:	2300      	movs	r3, #0
 8015606:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015608:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801560a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801560c:	429a      	cmp	r2, r3
 801560e:	da2f      	bge.n	8015670 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015610:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015612:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015614:	fb02 f203 	mul.w	r2, r2, r3
 8015618:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801561a:	4413      	add	r3, r2
 801561c:	461a      	mov	r2, r3
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	4413      	add	r3, r2
 8015622:	781b      	ldrb	r3, [r3, #0]
 8015624:	461a      	mov	r2, r3
 8015626:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801562a:	1ad3      	subs	r3, r2, r3
 801562c:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 801562e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015630:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015632:	429a      	cmp	r2, r3
 8015634:	db18      	blt.n	8015668 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015636:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015638:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801563a:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801563c:	f7ff fba6 	bl	8014d8c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015640:	64b8      	str	r0, [r7, #72]	; 0x48
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015642:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015644:	f000 faef 	bl	8015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015648:	4603      	mov	r3, r0
 801564a:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801564c:	69f8      	ldr	r0, [r7, #28]
 801564e:	f000 fb19 	bl	8015c84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015652:	4603      	mov	r3, r0
 8015654:	4618      	mov	r0, r3
 8015656:	f000 fc5d 	bl	8015f14 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801565a:	4603      	mov	r3, r0
 801565c:	4619      	mov	r1, r3
 801565e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015660:	f000 faf2 	bl	8015c48 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015664:	4603      	mov	r3, r0
 8015666:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015668:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801566a:	3301      	adds	r3, #1
 801566c:	66fb      	str	r3, [r7, #108]	; 0x6c
 801566e:	e7cb      	b.n	8015608 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015670:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015674:	4618      	mov	r0, r3
 8015676:	f000 fc67 	bl	8015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801567a:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801567c:	681b      	ldr	r3, [r3, #0]
 801567e:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015682:	210c      	movs	r1, #12
 8015684:	4618      	mov	r0, r3
 8015686:	f7ff fb94 	bl	8014db2 <_ZN6tflite13GetReciprocalEliPi>
 801568a:	4603      	mov	r3, r0
 801568c:	4618      	mov	r0, r3
 801568e:	f7fe f88a 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015692:	4603      	mov	r3, r0
 8015694:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 8015696:	2300      	movs	r3, #0
 8015698:	66bb      	str	r3, [r7, #104]	; 0x68
 801569a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 801569c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801569e:	429a      	cmp	r2, r3
 80156a0:	da75      	bge.n	801578e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80156a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80156a4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80156a6:	fb02 f203 	mul.w	r2, r2, r3
 80156aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80156ac:	4413      	add	r3, r2
 80156ae:	461a      	mov	r2, r3
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	4413      	add	r3, r2
 80156b4:	781b      	ldrb	r3, [r3, #0]
 80156b6:	461a      	mov	r2, r3
 80156b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80156bc:	1ad3      	subs	r3, r2, r3
 80156be:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80156c0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80156c2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156c4:	429a      	cmp	r2, r3
 80156c6:	db50      	blt.n	801576a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80156c8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80156ca:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80156cc:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80156ce:	f7ff fb5d 	bl	8014d8c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80156d2:	6438      	str	r0, [r7, #64]	; 0x40
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80156d4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80156d6:	f000 faa6 	bl	8015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80156da:	4603      	mov	r3, r0
 80156dc:	61bb      	str	r3, [r7, #24]

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80156de:	69b8      	ldr	r0, [r7, #24]
 80156e0:	f000 fad0 	bl	8015c84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80156e4:	4603      	mov	r3, r0
 80156e6:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 80156e8:	6979      	ldr	r1, [r7, #20]
 80156ea:	6a38      	ldr	r0, [r7, #32]
 80156ec:	f7fe fb54 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80156f0:	4603      	mov	r3, r0
 80156f2:	633b      	str	r3, [r7, #48]	; 0x30
 80156f4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80156f8:	4618      	mov	r0, r3
 80156fa:	f7fd ff43 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80156fe:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015700:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015702:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015704:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015706:	4611      	mov	r1, r2
 8015708:	4618      	mov	r0, r3
 801570a:	f7fb fb99 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801570e:	63f8      	str	r0, [r7, #60]	; 0x3c

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8015710:	f7f9 f974 	bl	800e9fc <_ZNSt14numeric_limitsIhE3minEv>
 8015714:	4603      	mov	r3, r0
 8015716:	461a      	mov	r2, r3
            unsat_output +
 8015718:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801571a:	4413      	add	r3, r2
        const int32 shifted_output =
 801571c:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801571e:	f7f9 f975 	bl	800ea0c <_ZNSt14numeric_limitsIhE3maxEv>
 8015722:	4603      	mov	r3, r0
 8015724:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8015726:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801572a:	f107 0310 	add.w	r3, r7, #16
 801572e:	4611      	mov	r1, r2
 8015730:	4618      	mov	r0, r3
 8015732:	f7f9 fdb6 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8015736:	4604      	mov	r4, r0
 8015738:	f7f9 f960 	bl	800e9fc <_ZNSt14numeric_limitsIhE3minEv>
 801573c:	4603      	mov	r3, r0
 801573e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015740:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015744:	4619      	mov	r1, r3
 8015746:	4620      	mov	r0, r4
 8015748:	f7f9 fd97 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 801574c:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801574e:	6819      	ldr	r1, [r3, #0]
 8015750:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015752:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015754:	fb02 f203 	mul.w	r2, r2, r3
 8015758:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801575a:	4413      	add	r3, r2
 801575c:	461a      	mov	r2, r3
 801575e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015762:	4413      	add	r3, r2
 8015764:	b2ca      	uxtb	r2, r1
 8015766:	701a      	strb	r2, [r3, #0]
 8015768:	e00d      	b.n	8015786 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801576a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801576c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801576e:	fb02 f203 	mul.w	r2, r2, r3
 8015772:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015774:	4413      	add	r3, r2
 8015776:	461a      	mov	r2, r3
 8015778:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801577c:	189c      	adds	r4, r3, r2
 801577e:	f7f9 f93d 	bl	800e9fc <_ZNSt14numeric_limitsIhE3minEv>
 8015782:	4603      	mov	r3, r0
 8015784:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8015786:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015788:	3301      	adds	r3, #1
 801578a:	66bb      	str	r3, [r7, #104]	; 0x68
 801578c:	e785      	b.n	801569a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 801578e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015790:	3301      	adds	r3, #1
 8015792:	677b      	str	r3, [r7, #116]	; 0x74
 8015794:	e70d      	b.n	80155b2 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
      }
    }
  }
}
 8015796:	bf00      	nop
 8015798:	377c      	adds	r7, #124	; 0x7c
 801579a:	46bd      	mov	sp, r7
 801579c:	bd90      	pop	{r4, r7, pc}

0801579e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 801579e:	b590      	push	{r4, r7, lr}
 80157a0:	b09f      	sub	sp, #124	; 0x7c
 80157a2:	af00      	add	r7, sp, #0
 80157a4:	60f8      	str	r0, [r7, #12]
 80157a6:	60b9      	str	r1, [r7, #8]
 80157a8:	607a      	str	r2, [r7, #4]
 80157aa:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 80157ac:	68fb      	ldr	r3, [r7, #12]
 80157ae:	689b      	ldr	r3, [r3, #8]
 80157b0:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 80157b2:	68fb      	ldr	r3, [r7, #12]
 80157b4:	68db      	ldr	r3, [r3, #12]
 80157b6:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80157b8:	68fb      	ldr	r3, [r7, #12]
 80157ba:	699b      	ldr	r3, [r3, #24]
 80157bc:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80157be:	68b8      	ldr	r0, [r7, #8]
 80157c0:	f7f9 fe08 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80157c4:	4603      	mov	r3, r0
 80157c6:	3b01      	subs	r3, #1
 80157c8:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80157ca:	683a      	ldr	r2, [r7, #0]
 80157cc:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80157ce:	68b8      	ldr	r0, [r7, #8]
 80157d0:	f7fd fe97 	bl	8013502 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80157d4:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80157d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157d8:	683a      	ldr	r2, [r7, #0]
 80157da:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80157dc:	68b8      	ldr	r0, [r7, #8]
 80157de:	f7fb fd51 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80157e2:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80157e4:	2300      	movs	r3, #0
 80157e6:	677b      	str	r3, [r7, #116]	; 0x74
 80157e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80157ea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157ec:	429a      	cmp	r2, r3
 80157ee:	f280 80f0 	bge.w	80159d2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80157f2:	2380      	movs	r3, #128	; 0x80
 80157f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80157f8:	2300      	movs	r3, #0
 80157fa:	673b      	str	r3, [r7, #112]	; 0x70
 80157fc:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80157fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015800:	429a      	cmp	r2, r3
 8015802:	da17      	bge.n	8015834 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015804:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015806:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015808:	fb02 f203 	mul.w	r2, r2, r3
 801580c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801580e:	4413      	add	r3, r2
 8015810:	461a      	mov	r2, r3
 8015812:	687b      	ldr	r3, [r7, #4]
 8015814:	441a      	add	r2, r3
 8015816:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 801581a:	4611      	mov	r1, r2
 801581c:	4618      	mov	r0, r3
 801581e:	f7ff f909 	bl	8014a34 <_ZSt3maxIaERKT_S2_S2_>
 8015822:	4603      	mov	r3, r0
 8015824:	f993 3000 	ldrsb.w	r3, [r3]
 8015828:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 801582c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801582e:	3301      	adds	r3, #1
 8015830:	673b      	str	r3, [r7, #112]	; 0x70
 8015832:	e7e3      	b.n	80157fc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015834:	f000 f9ef 	bl	8015c16 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015838:	4603      	mov	r3, r0
 801583a:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801583c:	2300      	movs	r3, #0
 801583e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015840:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015842:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015844:	429a      	cmp	r2, r3
 8015846:	da30      	bge.n	80158aa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015848:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801584a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801584c:	fb02 f203 	mul.w	r2, r2, r3
 8015850:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015852:	4413      	add	r3, r2
 8015854:	461a      	mov	r2, r3
 8015856:	687b      	ldr	r3, [r7, #4]
 8015858:	4413      	add	r3, r2
 801585a:	f993 3000 	ldrsb.w	r3, [r3]
 801585e:	461a      	mov	r2, r3
 8015860:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8015864:	1ad3      	subs	r3, r2, r3
 8015866:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015868:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801586a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801586c:	429a      	cmp	r2, r3
 801586e:	db18      	blt.n	80158a2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015870:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015872:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015874:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015876:	f7ff fa89 	bl	8014d8c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801587a:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801587c:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801587e:	f000 f9d2 	bl	8015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015882:	4603      	mov	r3, r0
 8015884:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8015886:	69f8      	ldr	r0, [r7, #28]
 8015888:	f000 f9fc 	bl	8015c84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801588c:	4603      	mov	r3, r0
 801588e:	4618      	mov	r0, r3
 8015890:	f000 fb40 	bl	8015f14 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015894:	4603      	mov	r3, r0
 8015896:	4619      	mov	r1, r3
 8015898:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801589a:	f000 f9d5 	bl	8015c48 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801589e:	4603      	mov	r3, r0
 80158a0:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80158a2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80158a4:	3301      	adds	r3, #1
 80158a6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80158a8:	e7ca      	b.n	8015840 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 80158aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80158ae:	4618      	mov	r0, r3
 80158b0:	f000 fb4a 	bl	8015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 80158b4:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 80158b6:	681b      	ldr	r3, [r3, #0]
 80158b8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80158bc:	210c      	movs	r1, #12
 80158be:	4618      	mov	r0, r3
 80158c0:	f7ff fa77 	bl	8014db2 <_ZN6tflite13GetReciprocalEliPi>
 80158c4:	4603      	mov	r3, r0
 80158c6:	4618      	mov	r0, r3
 80158c8:	f7fd ff6d 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80158cc:	4603      	mov	r3, r0
 80158ce:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 80158d0:	2300      	movs	r3, #0
 80158d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80158d4:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80158d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158d8:	429a      	cmp	r2, r3
 80158da:	da76      	bge.n	80159ca <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80158dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80158de:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80158e0:	fb02 f203 	mul.w	r2, r2, r3
 80158e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158e6:	4413      	add	r3, r2
 80158e8:	461a      	mov	r2, r3
 80158ea:	687b      	ldr	r3, [r7, #4]
 80158ec:	4413      	add	r3, r2
 80158ee:	f993 3000 	ldrsb.w	r3, [r3]
 80158f2:	461a      	mov	r2, r3
 80158f4:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80158f8:	1ad3      	subs	r3, r2, r3
 80158fa:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80158fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80158fe:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015900:	429a      	cmp	r2, r3
 8015902:	db50      	blt.n	80159a6 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015904:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015906:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015908:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801590a:	f7ff fa3f 	bl	8014d8c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 801590e:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015910:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015912:	f000 f988 	bl	8015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015916:	4603      	mov	r3, r0
 8015918:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 801591a:	69b8      	ldr	r0, [r7, #24]
 801591c:	f000 f9b2 	bl	8015c84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015920:	4603      	mov	r3, r0
 8015922:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015924:	6979      	ldr	r1, [r7, #20]
 8015926:	6a38      	ldr	r0, [r7, #32]
 8015928:	f7fe fa36 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 801592c:	4603      	mov	r3, r0
 801592e:	633b      	str	r3, [r7, #48]	; 0x30
 8015930:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015934:	4618      	mov	r0, r3
 8015936:	f7fd fe25 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801593a:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801593c:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 801593e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015940:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015942:	4611      	mov	r1, r2
 8015944:	4618      	mov	r0, r3
 8015946:	f7fb fa7b 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 801594a:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 801594c:	f7f9 f866 	bl	800ea1c <_ZNSt14numeric_limitsIsE3minEv>
 8015950:	4603      	mov	r3, r0
 8015952:	461a      	mov	r2, r3
            unsat_output +
 8015954:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015956:	4413      	add	r3, r2
        const int32 shifted_output =
 8015958:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 801595a:	f7f9 f869 	bl	800ea30 <_ZNSt14numeric_limitsIsE3maxEv>
 801595e:	4603      	mov	r3, r0
 8015960:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8015962:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015966:	f107 0310 	add.w	r3, r7, #16
 801596a:	4611      	mov	r1, r2
 801596c:	4618      	mov	r0, r3
 801596e:	f7f9 fc98 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8015972:	4604      	mov	r4, r0
 8015974:	f7f9 f852 	bl	800ea1c <_ZNSt14numeric_limitsIsE3minEv>
 8015978:	4603      	mov	r3, r0
 801597a:	63bb      	str	r3, [r7, #56]	; 0x38
 801597c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015980:	4619      	mov	r1, r3
 8015982:	4620      	mov	r0, r4
 8015984:	f7f9 fc79 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 8015988:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 801598a:	6819      	ldr	r1, [r3, #0]
 801598c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801598e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015990:	fb02 f203 	mul.w	r2, r2, r3
 8015994:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015996:	4413      	add	r3, r2
 8015998:	005b      	lsls	r3, r3, #1
 801599a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801599e:	4413      	add	r3, r2
 80159a0:	b20a      	sxth	r2, r1
 80159a2:	801a      	strh	r2, [r3, #0]
 80159a4:	e00d      	b.n	80159c2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 80159a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159a8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80159aa:	fb02 f203 	mul.w	r2, r2, r3
 80159ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80159b0:	4413      	add	r3, r2
 80159b2:	005b      	lsls	r3, r3, #1
 80159b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80159b8:	18d4      	adds	r4, r2, r3
 80159ba:	f7f9 f82f 	bl	800ea1c <_ZNSt14numeric_limitsIsE3minEv>
 80159be:	4603      	mov	r3, r0
 80159c0:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80159c2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80159c4:	3301      	adds	r3, #1
 80159c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80159c8:	e784      	b.n	80158d4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80159ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159cc:	3301      	adds	r3, #1
 80159ce:	677b      	str	r3, [r7, #116]	; 0x74
 80159d0:	e70a      	b.n	80157e8 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 80159d2:	bf00      	nop
 80159d4:	377c      	adds	r7, #124	; 0x7c
 80159d6:	46bd      	mov	sp, r7
 80159d8:	bd90      	pop	{r4, r7, pc}

080159da <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80159da:	b590      	push	{r4, r7, lr}
 80159dc:	b09f      	sub	sp, #124	; 0x7c
 80159de:	af00      	add	r7, sp, #0
 80159e0:	60f8      	str	r0, [r7, #12]
 80159e2:	60b9      	str	r1, [r7, #8]
 80159e4:	607a      	str	r2, [r7, #4]
 80159e6:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 80159e8:	68fb      	ldr	r3, [r7, #12]
 80159ea:	689b      	ldr	r3, [r3, #8]
 80159ec:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 80159ee:	68fb      	ldr	r3, [r7, #12]
 80159f0:	68db      	ldr	r3, [r3, #12]
 80159f2:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80159f4:	68fb      	ldr	r3, [r7, #12]
 80159f6:	699b      	ldr	r3, [r3, #24]
 80159f8:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80159fa:	68b8      	ldr	r0, [r7, #8]
 80159fc:	f7f9 fcea 	bl	800f3d4 <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015a00:	4603      	mov	r3, r0
 8015a02:	3b01      	subs	r3, #1
 8015a04:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8015a06:	683a      	ldr	r2, [r7, #0]
 8015a08:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015a0a:	68b8      	ldr	r0, [r7, #8]
 8015a0c:	f7fd fd79 	bl	8013502 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8015a10:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8015a12:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8015a14:	683a      	ldr	r2, [r7, #0]
 8015a16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015a18:	68b8      	ldr	r0, [r7, #8]
 8015a1a:	f7fb fc33 	bl	8011284 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015a1e:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8015a20:	2300      	movs	r3, #0
 8015a22:	677b      	str	r3, [r7, #116]	; 0x74
 8015a24:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a28:	429a      	cmp	r2, r3
 8015a2a:	f280 80f0 	bge.w	8015c0e <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8015a2e:	2380      	movs	r3, #128	; 0x80
 8015a30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015a34:	2300      	movs	r3, #0
 8015a36:	673b      	str	r3, [r7, #112]	; 0x70
 8015a38:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015a3a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a3c:	429a      	cmp	r2, r3
 8015a3e:	da17      	bge.n	8015a70 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015a40:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a42:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a44:	fb02 f203 	mul.w	r2, r2, r3
 8015a48:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a4a:	4413      	add	r3, r2
 8015a4c:	461a      	mov	r2, r3
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	441a      	add	r2, r3
 8015a52:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8015a56:	4611      	mov	r1, r2
 8015a58:	4618      	mov	r0, r3
 8015a5a:	f7fe ffeb 	bl	8014a34 <_ZSt3maxIaERKT_S2_S2_>
 8015a5e:	4603      	mov	r3, r0
 8015a60:	f993 3000 	ldrsb.w	r3, [r3]
 8015a64:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015a68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a6a:	3301      	adds	r3, #1
 8015a6c:	673b      	str	r3, [r7, #112]	; 0x70
 8015a6e:	e7e3      	b.n	8015a38 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015a70:	f000 f8d1 	bl	8015c16 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015a74:	4603      	mov	r3, r0
 8015a76:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015a78:	2300      	movs	r3, #0
 8015a7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a7e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a80:	429a      	cmp	r2, r3
 8015a82:	da30      	bge.n	8015ae6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015a84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a86:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a88:	fb02 f203 	mul.w	r2, r2, r3
 8015a8c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a8e:	4413      	add	r3, r2
 8015a90:	461a      	mov	r2, r3
 8015a92:	687b      	ldr	r3, [r7, #4]
 8015a94:	4413      	add	r3, r2
 8015a96:	f993 3000 	ldrsb.w	r3, [r3]
 8015a9a:	461a      	mov	r2, r3
 8015a9c:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8015aa0:	1ad3      	subs	r3, r2, r3
 8015aa2:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015aa4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015aa6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015aa8:	429a      	cmp	r2, r3
 8015aaa:	db18      	blt.n	8015ade <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015aae:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015ab0:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015ab2:	f7ff f96b 	bl	8014d8c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015ab6:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015ab8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015aba:	f000 f8b4 	bl	8015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015abe:	4603      	mov	r3, r0
 8015ac0:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8015ac2:	69f8      	ldr	r0, [r7, #28]
 8015ac4:	f000 f8de 	bl	8015c84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015ac8:	4603      	mov	r3, r0
 8015aca:	4618      	mov	r0, r3
 8015acc:	f000 fa22 	bl	8015f14 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015ad0:	4603      	mov	r3, r0
 8015ad2:	4619      	mov	r1, r3
 8015ad4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ad6:	f000 f8b7 	bl	8015c48 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ada:	4603      	mov	r3, r0
 8015adc:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015ade:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ae0:	3301      	adds	r3, #1
 8015ae2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015ae4:	e7ca      	b.n	8015a7c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015ae6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015aea:	4618      	mov	r0, r3
 8015aec:	f000 fa2c 	bl	8015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015af0:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8015af2:	681b      	ldr	r3, [r3, #0]
 8015af4:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015af8:	210c      	movs	r1, #12
 8015afa:	4618      	mov	r0, r3
 8015afc:	f7ff f959 	bl	8014db2 <_ZN6tflite13GetReciprocalEliPi>
 8015b00:	4603      	mov	r3, r0
 8015b02:	4618      	mov	r0, r3
 8015b04:	f7fd fe4f 	bl	80137a6 <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015b08:	4603      	mov	r3, r0
 8015b0a:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8015b0c:	2300      	movs	r3, #0
 8015b0e:	66bb      	str	r3, [r7, #104]	; 0x68
 8015b10:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015b12:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015b14:	429a      	cmp	r2, r3
 8015b16:	da76      	bge.n	8015c06 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015b18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015b1a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015b1c:	fb02 f203 	mul.w	r2, r2, r3
 8015b20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b22:	4413      	add	r3, r2
 8015b24:	461a      	mov	r2, r3
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	4413      	add	r3, r2
 8015b2a:	f993 3000 	ldrsb.w	r3, [r3]
 8015b2e:	461a      	mov	r2, r3
 8015b30:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8015b34:	1ad3      	subs	r3, r2, r3
 8015b36:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8015b38:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b3a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b3c:	429a      	cmp	r2, r3
 8015b3e:	db50      	blt.n	8015be2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015b40:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015b42:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015b44:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015b46:	f7ff f921 	bl	8014d8c <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015b4a:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015b4c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015b4e:	f000 f86a 	bl	8015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015b52:	4603      	mov	r3, r0
 8015b54:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015b56:	69b8      	ldr	r0, [r7, #24]
 8015b58:	f000 f894 	bl	8015c84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015b5c:	4603      	mov	r3, r0
 8015b5e:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015b60:	6979      	ldr	r1, [r7, #20]
 8015b62:	6a38      	ldr	r0, [r7, #32]
 8015b64:	f7fe f918 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015b68:	4603      	mov	r3, r0
 8015b6a:	633b      	str	r3, [r7, #48]	; 0x30
 8015b6c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b70:	4618      	mov	r0, r3
 8015b72:	f7fd fd07 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015b76:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015b78:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b7c:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015b7e:	4611      	mov	r1, r2
 8015b80:	4618      	mov	r0, r3
 8015b82:	f7fb f95d 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015b86:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8015b88:	f7f8 ff27 	bl	800e9da <_ZNSt14numeric_limitsIaE3minEv>
 8015b8c:	4603      	mov	r3, r0
 8015b8e:	461a      	mov	r2, r3
            unsat_output +
 8015b90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b92:	4413      	add	r3, r2
        const int32 shifted_output =
 8015b94:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8015b96:	f7f8 ff29 	bl	800e9ec <_ZNSt14numeric_limitsIaE3maxEv>
 8015b9a:	4603      	mov	r3, r0
 8015b9c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8015b9e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015ba2:	f107 0310 	add.w	r3, r7, #16
 8015ba6:	4611      	mov	r1, r2
 8015ba8:	4618      	mov	r0, r3
 8015baa:	f7f9 fb7a 	bl	800f2a2 <_ZSt3minIlERKT_S2_S2_>
 8015bae:	4604      	mov	r4, r0
 8015bb0:	f7f8 ff13 	bl	800e9da <_ZNSt14numeric_limitsIaE3minEv>
 8015bb4:	4603      	mov	r3, r0
 8015bb6:	63bb      	str	r3, [r7, #56]	; 0x38
 8015bb8:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015bbc:	4619      	mov	r1, r3
 8015bbe:	4620      	mov	r0, r4
 8015bc0:	f7f9 fb5b 	bl	800f27a <_ZSt3maxIlERKT_S2_S2_>
 8015bc4:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015bc6:	6819      	ldr	r1, [r3, #0]
 8015bc8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015bca:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015bcc:	fb02 f203 	mul.w	r2, r2, r3
 8015bd0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bd2:	4413      	add	r3, r2
 8015bd4:	461a      	mov	r2, r3
 8015bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015bda:	4413      	add	r3, r2
 8015bdc:	b24a      	sxtb	r2, r1
 8015bde:	701a      	strb	r2, [r3, #0]
 8015be0:	e00d      	b.n	8015bfe <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8015be2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015be4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015be6:	fb02 f203 	mul.w	r2, r2, r3
 8015bea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bec:	4413      	add	r3, r2
 8015bee:	461a      	mov	r2, r3
 8015bf0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015bf4:	189c      	adds	r4, r3, r2
 8015bf6:	f7f8 fef0 	bl	800e9da <_ZNSt14numeric_limitsIaE3minEv>
 8015bfa:	4603      	mov	r3, r0
 8015bfc:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8015bfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015c00:	3301      	adds	r3, #1
 8015c02:	66bb      	str	r3, [r7, #104]	; 0x68
 8015c04:	e784      	b.n	8015b10 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8015c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015c08:	3301      	adds	r3, #1
 8015c0a:	677b      	str	r3, [r7, #116]	; 0x74
 8015c0c:	e70a      	b.n	8015a24 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8015c0e:	bf00      	nop
 8015c10:	377c      	adds	r7, #124	; 0x7c
 8015c12:	46bd      	mov	sp, r7
 8015c14:	bd90      	pop	{r4, r7, pc}

08015c16 <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8015c16:	b580      	push	{r7, lr}
 8015c18:	af00      	add	r7, sp, #0
 8015c1a:	2000      	movs	r0, #0
 8015c1c:	f000 f99f 	bl	8015f5e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8015c20:	4603      	mov	r3, r0
 8015c22:	4618      	mov	r0, r3
 8015c24:	bd80      	pop	{r7, pc}

08015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015c26:	b580      	push	{r7, lr}
 8015c28:	b084      	sub	sp, #16
 8015c2a:	af00      	add	r7, sp, #0
 8015c2c:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015c2e:	f107 030c 	add.w	r3, r7, #12
 8015c32:	4618      	mov	r0, r3
 8015c34:	f000 f9a7 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015c38:	4602      	mov	r2, r0
 8015c3a:	687b      	ldr	r3, [r7, #4]
 8015c3c:	6013      	str	r3, [r2, #0]
    return retval;
 8015c3e:	68fb      	ldr	r3, [r7, #12]
  }
 8015c40:	4618      	mov	r0, r3
 8015c42:	3710      	adds	r7, #16
 8015c44:	46bd      	mov	sp, r7
 8015c46:	bd80      	pop	{r7, pc}

08015c48 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8015c48:	b590      	push	{r4, r7, lr}
 8015c4a:	b083      	sub	sp, #12
 8015c4c:	af00      	add	r7, sp, #0
 8015c4e:	6078      	str	r0, [r7, #4]
 8015c50:	6039      	str	r1, [r7, #0]
 8015c52:	1d3b      	adds	r3, r7, #4
 8015c54:	4618      	mov	r0, r3
 8015c56:	f000 f977 	bl	8015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	681c      	ldr	r4, [r3, #0]
 8015c5e:	463b      	mov	r3, r7
 8015c60:	4618      	mov	r0, r3
 8015c62:	f000 f971 	bl	8015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015c66:	4603      	mov	r3, r0
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	4619      	mov	r1, r3
 8015c6c:	4620      	mov	r0, r4
 8015c6e:	f7fb fa73 	bl	8011158 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015c72:	4603      	mov	r3, r0
 8015c74:	4618      	mov	r0, r3
 8015c76:	f000 f991 	bl	8015f9c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8015c7a:	4603      	mov	r3, r0
 8015c7c:	4618      	mov	r0, r3
 8015c7e:	370c      	adds	r7, #12
 8015c80:	46bd      	mov	sp, r7
 8015c82:	bd90      	pop	{r4, r7, pc}

08015c84 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8015c84:	b590      	push	{r4, r7, lr}
 8015c86:	b091      	sub	sp, #68	; 0x44
 8015c88:	af00      	add	r7, sp, #0
 8015c8a:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8015c8c:	f000 f997 	bl	8015fbe <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8015c90:	4603      	mov	r3, r0
 8015c92:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8015c94:	2001      	movs	r0, #1
 8015c96:	f000 f99b 	bl	8015fd0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8015c9a:	4603      	mov	r3, r0
 8015c9c:	4619      	mov	r1, r3
 8015c9e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015ca0:	f000 f9aa 	bl	8015ff8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ca4:	4603      	mov	r3, r0
 8015ca6:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8015ca8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015caa:	6878      	ldr	r0, [r7, #4]
 8015cac:	f000 f9c2 	bl	8016034 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015cb0:	4603      	mov	r3, r0
 8015cb2:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015cb4:	4618      	mov	r0, r3
 8015cb6:	f000 f99f 	bl	8015ff8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015cba:	4603      	mov	r3, r0
 8015cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8015cbe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cc0:	f000 f9d6 	bl	8016070 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015cc4:	4603      	mov	r3, r0
 8015cc6:	4618      	mov	r0, r3
 8015cc8:	f7fe f804 	bl	8013cd4 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8015ccc:	4603      	mov	r3, r0
 8015cce:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8015cd0:	6879      	ldr	r1, [r7, #4]
 8015cd2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cd4:	f000 f990 	bl	8015ff8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015cd8:	4603      	mov	r3, r0
 8015cda:	63bb      	str	r3, [r7, #56]	; 0x38
 8015cdc:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ce0:	4618      	mov	r0, r3
 8015ce2:	f000 f950 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015ce6:	4603      	mov	r3, r0
 8015ce8:	681b      	ldr	r3, [r3, #0]
 8015cea:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8015cec:	4883      	ldr	r0, [pc, #524]	; (8015efc <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8015cee:	f7fd fc68 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015cf2:	4603      	mov	r3, r0
 8015cf4:	4618      	mov	r0, r3
 8015cf6:	f7fd fc50 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015cfa:	4603      	mov	r3, r0
 8015cfc:	627b      	str	r3, [r7, #36]	; 0x24
 8015cfe:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8015d02:	f7fb f9ed 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015d06:	4603      	mov	r3, r0
 8015d08:	4619      	mov	r1, r3
 8015d0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d0c:	f7fb f9f3 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015d10:	4603      	mov	r3, r0
 8015d12:	4618      	mov	r0, r3
 8015d14:	f7fb fa6e 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015d18:	4604      	mov	r4, r0
 8015d1a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d1e:	f7fe f83b 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d22:	4603      	mov	r3, r0
 8015d24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d26:	4619      	mov	r1, r3
 8015d28:	4620      	mov	r0, r4
 8015d2a:	f7fd fed5 	bl	8013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015d2e:	4603      	mov	r3, r0
 8015d30:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8015d32:	4873      	ldr	r0, [pc, #460]	; (8015f00 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8015d34:	f7fd fc45 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	4618      	mov	r0, r3
 8015d3c:	f7fd fc2d 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015d40:	4603      	mov	r3, r0
 8015d42:	623b      	str	r3, [r7, #32]
 8015d44:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8015d48:	f7fb f9ca 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015d4c:	4603      	mov	r3, r0
 8015d4e:	4619      	mov	r1, r3
 8015d50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d52:	f7fb f9d0 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015d56:	4603      	mov	r3, r0
 8015d58:	4618      	mov	r0, r3
 8015d5a:	f7fb fa4b 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015d5e:	4604      	mov	r4, r0
 8015d60:	6a39      	ldr	r1, [r7, #32]
 8015d62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d64:	f7fe f818 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d68:	4603      	mov	r3, r0
 8015d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d6c:	4619      	mov	r1, r3
 8015d6e:	4620      	mov	r0, r4
 8015d70:	f7fd feb2 	bl	8013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015d74:	4603      	mov	r3, r0
 8015d76:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8015d78:	4862      	ldr	r0, [pc, #392]	; (8015f04 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8015d7a:	f7fd fc22 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015d7e:	4603      	mov	r3, r0
 8015d80:	4618      	mov	r0, r3
 8015d82:	f7fd fc0a 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015d86:	4603      	mov	r3, r0
 8015d88:	61fb      	str	r3, [r7, #28]
 8015d8a:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015d8e:	f7fb f9a7 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015d92:	4603      	mov	r3, r0
 8015d94:	4619      	mov	r1, r3
 8015d96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d98:	f7fb f9ad 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015d9c:	4603      	mov	r3, r0
 8015d9e:	4618      	mov	r0, r3
 8015da0:	f7fb fa28 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015da4:	4604      	mov	r4, r0
 8015da6:	69f9      	ldr	r1, [r7, #28]
 8015da8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015daa:	f7fd fff5 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015dae:	4603      	mov	r3, r0
 8015db0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015db2:	4619      	mov	r1, r3
 8015db4:	4620      	mov	r0, r4
 8015db6:	f7fd fe8f 	bl	8013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015dba:	4603      	mov	r3, r0
 8015dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8015dbe:	4852      	ldr	r0, [pc, #328]	; (8015f08 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8015dc0:	f7fd fbff 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015dc4:	4603      	mov	r3, r0
 8015dc6:	4618      	mov	r0, r3
 8015dc8:	f7fd fbe7 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015dcc:	4603      	mov	r3, r0
 8015dce:	61bb      	str	r3, [r7, #24]
 8015dd0:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8015dd4:	f7fb f984 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015dd8:	4603      	mov	r3, r0
 8015dda:	4619      	mov	r1, r3
 8015ddc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015dde:	f7fb f98a 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015de2:	4603      	mov	r3, r0
 8015de4:	4618      	mov	r0, r3
 8015de6:	f7fb fa05 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015dea:	4604      	mov	r4, r0
 8015dec:	69b9      	ldr	r1, [r7, #24]
 8015dee:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015df0:	f7fd ffd2 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015df4:	4603      	mov	r3, r0
 8015df6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015df8:	4619      	mov	r1, r3
 8015dfa:	4620      	mov	r0, r4
 8015dfc:	f7fd fe6c 	bl	8013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015e00:	4603      	mov	r3, r0
 8015e02:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8015e04:	4841      	ldr	r0, [pc, #260]	; (8015f0c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8015e06:	f7fd fbdc 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015e0a:	4603      	mov	r3, r0
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7fd fbc4 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015e12:	4603      	mov	r3, r0
 8015e14:	617b      	str	r3, [r7, #20]
 8015e16:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8015e1a:	f7fb f961 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015e1e:	4603      	mov	r3, r0
 8015e20:	4619      	mov	r1, r3
 8015e22:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e24:	f7fb f967 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015e28:	4603      	mov	r3, r0
 8015e2a:	4618      	mov	r0, r3
 8015e2c:	f7fb f9e2 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015e30:	4604      	mov	r4, r0
 8015e32:	6979      	ldr	r1, [r7, #20]
 8015e34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e36:	f7fd ffaf 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015e3a:	4603      	mov	r3, r0
 8015e3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e3e:	4619      	mov	r1, r3
 8015e40:	4620      	mov	r0, r4
 8015e42:	f7fd fe49 	bl	8013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015e46:	4603      	mov	r3, r0
 8015e48:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8015e4a:	4831      	ldr	r0, [pc, #196]	; (8015f10 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8015e4c:	f7fd fbb9 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015e50:	4603      	mov	r3, r0
 8015e52:	4618      	mov	r0, r3
 8015e54:	f7fd fba1 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015e58:	4603      	mov	r3, r0
 8015e5a:	613b      	str	r3, [r7, #16]
 8015e5c:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8015e60:	f7fb f93e 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015e64:	4603      	mov	r3, r0
 8015e66:	4619      	mov	r1, r3
 8015e68:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e6a:	f7fb f944 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015e6e:	4603      	mov	r3, r0
 8015e70:	4618      	mov	r0, r3
 8015e72:	f7fb f9bf 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015e76:	4604      	mov	r4, r0
 8015e78:	6939      	ldr	r1, [r7, #16]
 8015e7a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e7c:	f7fd ff8c 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015e80:	4603      	mov	r3, r0
 8015e82:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e84:	4619      	mov	r1, r3
 8015e86:	4620      	mov	r0, r4
 8015e88:	f7fd fe26 	bl	8013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015e8c:	4603      	mov	r3, r0
 8015e8e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8015e90:	20f2      	movs	r0, #242	; 0xf2
 8015e92:	f7fd fb96 	bl	80135c2 <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015e96:	4603      	mov	r3, r0
 8015e98:	4618      	mov	r0, r3
 8015e9a:	f7fd fb7e 	bl	801359a <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015e9e:	4603      	mov	r3, r0
 8015ea0:	60fb      	str	r3, [r7, #12]
 8015ea2:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8015ea6:	f7fb f91b 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015eaa:	4603      	mov	r3, r0
 8015eac:	4619      	mov	r1, r3
 8015eae:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015eb0:	f7fb f921 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015eb4:	4603      	mov	r3, r0
 8015eb6:	4618      	mov	r0, r3
 8015eb8:	f7fb f99c 	bl	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015ebc:	4604      	mov	r4, r0
 8015ebe:	68f9      	ldr	r1, [r7, #12]
 8015ec0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015ec2:	f7fd ff69 	bl	8013d98 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015ec6:	4603      	mov	r3, r0
 8015ec8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015eca:	4619      	mov	r1, r3
 8015ecc:	4620      	mov	r0, r4
 8015ece:	f7fd fe03 	bl	8013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015ed2:	4603      	mov	r3, r0
 8015ed4:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8015ed6:	6878      	ldr	r0, [r7, #4]
 8015ed8:	f000 f8e4 	bl	80160a4 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8015edc:	4604      	mov	r4, r0
 8015ede:	f7fd fcd3 	bl	8013888 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8015ee2:	4603      	mov	r3, r0
 8015ee4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ee6:	4619      	mov	r1, r3
 8015ee8:	4620      	mov	r0, r4
 8015eea:	f7fd fdf5 	bl	8013ad8 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015eee:	4603      	mov	r3, r0
 8015ef0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8015ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8015ef4:	4618      	mov	r0, r3
 8015ef6:	3744      	adds	r7, #68	; 0x44
 8015ef8:	46bd      	mov	sp, r7
 8015efa:	bd90      	pop	{r4, r7, pc}
 8015efc:	63afbe7b 	.word	0x63afbe7b
 8015f00:	4da2cbf2 	.word	0x4da2cbf2
 8015f04:	2f16ac6c 	.word	0x2f16ac6c
 8015f08:	1152aaa4 	.word	0x1152aaa4
 8015f0c:	02582ab7 	.word	0x02582ab7
 8015f10:	000afe11 	.word	0x000afe11

08015f14 <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015f14:	b5b0      	push	{r4, r5, r7, lr}
 8015f16:	b084      	sub	sp, #16
 8015f18:	af00      	add	r7, sp, #0
 8015f1a:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015f1c:	1d3b      	adds	r3, r7, #4
 8015f1e:	4618      	mov	r0, r3
 8015f20:	f7fd fb30 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f24:	4603      	mov	r3, r0
 8015f26:	681d      	ldr	r5, [r3, #0]
 8015f28:	f107 030c 	add.w	r3, r7, #12
 8015f2c:	4618      	mov	r0, r3
 8015f2e:	f000 f80b 	bl	8015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015f32:	4604      	mov	r4, r0
 8015f34:	4628      	mov	r0, r5
 8015f36:	f000 f8c7 	bl	80160c8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8015f3a:	4603      	mov	r3, r0
 8015f3c:	6023      	str	r3, [r4, #0]
  return result;
 8015f3e:	68fb      	ldr	r3, [r7, #12]
}
 8015f40:	4618      	mov	r0, r3
 8015f42:	3710      	adds	r7, #16
 8015f44:	46bd      	mov	sp, r7
 8015f46:	bdb0      	pop	{r4, r5, r7, pc}

08015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8015f48:	b480      	push	{r7}
 8015f4a:	b083      	sub	sp, #12
 8015f4c:	af00      	add	r7, sp, #0
 8015f4e:	6078      	str	r0, [r7, #4]
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	4618      	mov	r0, r3
 8015f54:	370c      	adds	r7, #12
 8015f56:	46bd      	mov	sp, r7
 8015f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f5c:	4770      	bx	lr

08015f5e <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015f5e:	b590      	push	{r4, r7, lr}
 8015f60:	b085      	sub	sp, #20
 8015f62:	af00      	add	r7, sp, #0
 8015f64:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015f66:	f107 030c 	add.w	r3, r7, #12
 8015f6a:	4618      	mov	r0, r3
 8015f6c:	f7ff ffec 	bl	8015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015f70:	4604      	mov	r4, r0
 8015f72:	6878      	ldr	r0, [r7, #4]
 8015f74:	f7fb f8b4 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015f78:	4603      	mov	r3, r0
 8015f7a:	6023      	str	r3, [r4, #0]
    return retval;
 8015f7c:	68fb      	ldr	r3, [r7, #12]
  }
 8015f7e:	4618      	mov	r0, r3
 8015f80:	3714      	adds	r7, #20
 8015f82:	46bd      	mov	sp, r7
 8015f84:	bd90      	pop	{r4, r7, pc}

08015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8015f86:	b480      	push	{r7}
 8015f88:	b083      	sub	sp, #12
 8015f8a:	af00      	add	r7, sp, #0
 8015f8c:	6078      	str	r0, [r7, #4]
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	4618      	mov	r0, r3
 8015f92:	370c      	adds	r7, #12
 8015f94:	46bd      	mov	sp, r7
 8015f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f9a:	4770      	bx	lr

08015f9c <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015f9c:	b580      	push	{r7, lr}
 8015f9e:	b084      	sub	sp, #16
 8015fa0:	af00      	add	r7, sp, #0
 8015fa2:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015fa4:	f107 030c 	add.w	r3, r7, #12
 8015fa8:	4618      	mov	r0, r3
 8015faa:	f7ff ffcd 	bl	8015f48 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015fae:	4602      	mov	r2, r0
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	6013      	str	r3, [r2, #0]
    return retval;
 8015fb4:	68fb      	ldr	r3, [r7, #12]
  }
 8015fb6:	4618      	mov	r0, r3
 8015fb8:	3710      	adds	r7, #16
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	bd80      	pop	{r7, pc}

08015fbe <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8015fbe:	b580      	push	{r7, lr}
 8015fc0:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8015fc2:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8015fc6:	f000 f803 	bl	8015fd0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8015fca:	4603      	mov	r3, r0
  }
 8015fcc:	4618      	mov	r0, r3
 8015fce:	bd80      	pop	{r7, pc}

08015fd0 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015fd0:	b590      	push	{r4, r7, lr}
 8015fd2:	b085      	sub	sp, #20
 8015fd4:	af00      	add	r7, sp, #0
 8015fd6:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015fd8:	f107 030c 	add.w	r3, r7, #12
 8015fdc:	4618      	mov	r0, r3
 8015fde:	f7ff ffd2 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015fe2:	4604      	mov	r4, r0
 8015fe4:	6878      	ldr	r0, [r7, #4]
 8015fe6:	f7fb f87b 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015fea:	4603      	mov	r3, r0
 8015fec:	6023      	str	r3, [r4, #0]
    return retval;
 8015fee:	68fb      	ldr	r3, [r7, #12]
  }
 8015ff0:	4618      	mov	r0, r3
 8015ff2:	3714      	adds	r7, #20
 8015ff4:	46bd      	mov	sp, r7
 8015ff6:	bd90      	pop	{r4, r7, pc}

08015ff8 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8015ff8:	b590      	push	{r4, r7, lr}
 8015ffa:	b083      	sub	sp, #12
 8015ffc:	af00      	add	r7, sp, #0
 8015ffe:	6078      	str	r0, [r7, #4]
 8016000:	6039      	str	r1, [r7, #0]
 8016002:	1d3b      	adds	r3, r7, #4
 8016004:	4618      	mov	r0, r3
 8016006:	f7ff ffbe 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801600a:	4603      	mov	r3, r0
 801600c:	681c      	ldr	r4, [r3, #0]
 801600e:	463b      	mov	r3, r7
 8016010:	4618      	mov	r0, r3
 8016012:	f7ff ffb8 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016016:	4603      	mov	r3, r0
 8016018:	681b      	ldr	r3, [r3, #0]
 801601a:	4619      	mov	r1, r3
 801601c:	4620      	mov	r0, r4
 801601e:	f7fd fae9 	bl	80135f4 <_ZN8gemmlowp3SubIlEET_S1_S1_>
 8016022:	4603      	mov	r3, r0
 8016024:	4618      	mov	r0, r3
 8016026:	f7ff fdfe 	bl	8015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801602a:	4603      	mov	r3, r0
 801602c:	4618      	mov	r0, r3
 801602e:	370c      	adds	r7, #12
 8016030:	46bd      	mov	sp, r7
 8016032:	bd90      	pop	{r4, r7, pc}

08016034 <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 8016034:	b590      	push	{r4, r7, lr}
 8016036:	b083      	sub	sp, #12
 8016038:	af00      	add	r7, sp, #0
 801603a:	6078      	str	r0, [r7, #4]
 801603c:	6039      	str	r1, [r7, #0]
 801603e:	1d3b      	adds	r3, r7, #4
 8016040:	4618      	mov	r0, r3
 8016042:	f7ff ffa0 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016046:	4603      	mov	r3, r0
 8016048:	681c      	ldr	r4, [r3, #0]
 801604a:	463b      	mov	r3, r7
 801604c:	4618      	mov	r0, r3
 801604e:	f7ff ff9a 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016052:	4603      	mov	r3, r0
 8016054:	681b      	ldr	r3, [r3, #0]
 8016056:	4619      	mov	r1, r3
 8016058:	4620      	mov	r0, r4
 801605a:	f7fb f84c 	bl	80110f6 <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 801605e:	4603      	mov	r3, r0
 8016060:	4618      	mov	r0, r3
 8016062:	f7ff fde0 	bl	8015c26 <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016066:	4603      	mov	r3, r0
 8016068:	4618      	mov	r0, r3
 801606a:	370c      	adds	r7, #12
 801606c:	46bd      	mov	sp, r7
 801606e:	bd90      	pop	{r4, r7, pc}

08016070 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016070:	b5b0      	push	{r4, r5, r7, lr}
 8016072:	b084      	sub	sp, #16
 8016074:	af00      	add	r7, sp, #0
 8016076:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016078:	1d3b      	adds	r3, r7, #4
 801607a:	4618      	mov	r0, r3
 801607c:	f7ff ff83 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016080:	4603      	mov	r3, r0
 8016082:	681d      	ldr	r5, [r3, #0]
 8016084:	f107 030c 	add.w	r3, r7, #12
 8016088:	4618      	mov	r0, r3
 801608a:	f7fd fa7b 	bl	8013584 <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 801608e:	4604      	mov	r4, r0
 8016090:	4628      	mov	r0, r5
 8016092:	f000 f825 	bl	80160e0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 8016096:	4603      	mov	r3, r0
 8016098:	6023      	str	r3, [r4, #0]
  return result;
 801609a:	68fb      	ldr	r3, [r7, #12]
}
 801609c:	4618      	mov	r0, r3
 801609e:	3710      	adds	r7, #16
 80160a0:	46bd      	mov	sp, r7
 80160a2:	bdb0      	pop	{r4, r5, r7, pc}

080160a4 <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 80160a4:	b580      	push	{r7, lr}
 80160a6:	b082      	sub	sp, #8
 80160a8:	af00      	add	r7, sp, #0
 80160aa:	6078      	str	r0, [r7, #4]
 80160ac:	1d3b      	adds	r3, r7, #4
 80160ae:	4618      	mov	r0, r3
 80160b0:	f7ff ff69 	bl	8015f86 <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 80160b4:	4603      	mov	r3, r0
 80160b6:	681b      	ldr	r3, [r3, #0]
 80160b8:	4618      	mov	r0, r3
 80160ba:	f7fd fd74 	bl	8013ba6 <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 80160be:	4603      	mov	r3, r0
 80160c0:	4618      	mov	r0, r3
 80160c2:	3708      	adds	r7, #8
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b082      	sub	sp, #8
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 f811 	bl	80160f8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 80160d6:	4603      	mov	r3, r0
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80160e8:	6878      	ldr	r0, [r7, #4]
 80160ea:	f000 f813 	bl	8016114 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 80160ee:	4603      	mov	r3, r0
}
 80160f0:	4618      	mov	r0, r3
 80160f2:	3708      	adds	r7, #8
 80160f4:	46bd      	mov	sp, r7
 80160f6:	bd80      	pop	{r7, pc}

080160f8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80160f8:	b580      	push	{r7, lr}
 80160fa:	b082      	sub	sp, #8
 80160fc:	af00      	add	r7, sp, #0
 80160fe:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8016100:	210c      	movs	r1, #12
 8016102:	6878      	ldr	r0, [r7, #4]
 8016104:	f7fa fe9c 	bl	8010e40 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8016108:	4603      	mov	r3, r0
  }
 801610a:	4618      	mov	r0, r3
 801610c:	3708      	adds	r7, #8
 801610e:	46bd      	mov	sp, r7
 8016110:	bd80      	pop	{r7, pc}
	...

08016114 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8016114:	b580      	push	{r7, lr}
 8016116:	b08a      	sub	sp, #40	; 0x28
 8016118:	af00      	add	r7, sp, #0
 801611a:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 801611c:	f7f9 fa7b 	bl	800f616 <_ZNSt14numeric_limitsIlE3minEv>
 8016120:	4603      	mov	r3, r0
 8016122:	4618      	mov	r0, r3
 8016124:	f7fa ffdc 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016128:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 801612a:	f7f8 fa47 	bl	800e5bc <_ZNSt14numeric_limitsIlE3maxEv>
 801612e:	4603      	mov	r3, r0
 8016130:	4618      	mov	r0, r3
 8016132:	f7fa ffd5 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016136:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8016138:	2320      	movs	r3, #32
 801613a:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 801613c:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8016140:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8016142:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 8016146:	f7fa ffcb 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801614a:	4603      	mov	r3, r0
 801614c:	4619      	mov	r1, r3
 801614e:	6878      	ldr	r0, [r7, #4]
 8016150:	f7fb f810 	bl	8011174 <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8016154:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8016156:	480f      	ldr	r0, [pc, #60]	; (8016194 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8016158:	f7fa ffc2 	bl	80110e0 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801615c:	4603      	mov	r3, r0
 801615e:	4619      	mov	r1, r3
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f7fa ffe5 	bl	8011130 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8016166:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8016168:	2105      	movs	r1, #5
 801616a:	6878      	ldr	r0, [r7, #4]
 801616c:	f7fd fa5d 	bl	801362a <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8016170:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8016172:	68fa      	ldr	r2, [r7, #12]
 8016174:	6a39      	ldr	r1, [r7, #32]
 8016176:	6978      	ldr	r0, [r7, #20]
 8016178:	f7fd fa9d 	bl	80136b6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 801617c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 801617e:	68fa      	ldr	r2, [r7, #12]
 8016180:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016182:	6938      	ldr	r0, [r7, #16]
 8016184:	f7fd fa97 	bl	80136b6 <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8016188:	60f8      	str	r0, [r7, #12]
    return result;
 801618a:	68fb      	ldr	r3, [r7, #12]
  }
 801618c:	4618      	mov	r0, r3
 801618e:	3728      	adds	r7, #40	; 0x28
 8016190:	46bd      	mov	sp, r7
 8016192:	bd80      	pop	{r7, pc}
 8016194:	fc000001 	.word	0xfc000001

08016198 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8016198:	b580      	push	{r7, lr}
 801619a:	b082      	sub	sp, #8
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f000 fb97 	bl	80168d4 <_ZNSaIPvED1Ev>
 80161a6:	687b      	ldr	r3, [r7, #4]
 80161a8:	4618      	mov	r0, r3
 80161aa:	3708      	adds	r7, #8
 80161ac:	46bd      	mov	sp, r7
 80161ae:	bd80      	pop	{r7, pc}

080161b0 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      _Vector_base() = default;
 80161b0:	b580      	push	{r7, lr}
 80161b2:	b082      	sub	sp, #8
 80161b4:	af00      	add	r7, sp, #0
 80161b6:	6078      	str	r0, [r7, #4]
 80161b8:	687b      	ldr	r3, [r7, #4]
 80161ba:	4618      	mov	r0, r3
 80161bc:	f000 fb7a 	bl	80168b4 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 80161c0:	687b      	ldr	r3, [r7, #4]
 80161c2:	4618      	mov	r0, r3
 80161c4:	3708      	adds	r7, #8
 80161c6:	46bd      	mov	sp, r7
 80161c8:	bd80      	pop	{r7, pc}

080161ca <_ZNSt6vectorIPvSaIS0_EEC1Ev>:
      vector() = default;
 80161ca:	b580      	push	{r7, lr}
 80161cc:	b082      	sub	sp, #8
 80161ce:	af00      	add	r7, sp, #0
 80161d0:	6078      	str	r0, [r7, #4]
 80161d2:	687b      	ldr	r3, [r7, #4]
 80161d4:	4618      	mov	r0, r3
 80161d6:	f7ff ffeb 	bl	80161b0 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 80161da:	687b      	ldr	r3, [r7, #4]
 80161dc:	4618      	mov	r0, r3
 80161de:	3708      	adds	r7, #8
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}

080161e4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>:
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
 80161e4:	b580      	push	{r7, lr}
 80161e6:	b084      	sub	sp, #16
 80161e8:	af00      	add	r7, sp, #0
 80161ea:	60f8      	str	r0, [r7, #12]
 80161ec:	60b9      	str	r1, [r7, #8]
 80161ee:	607a      	str	r2, [r7, #4]
  if (current_location - bytes < tensor_boundary) {
 80161f0:	4b18      	ldr	r3, [pc, #96]	; (8016254 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 80161f2:	681a      	ldr	r2, [r3, #0]
 80161f4:	68bb      	ldr	r3, [r7, #8]
 80161f6:	425b      	negs	r3, r3
 80161f8:	441a      	add	r2, r3
 80161fa:	4b17      	ldr	r3, [pc, #92]	; (8016258 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x74>)
 80161fc:	681b      	ldr	r3, [r3, #0]
 80161fe:	429a      	cmp	r2, r3
 8016200:	d217      	bcs.n	8016232 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x4e>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
 8016202:	68b8      	ldr	r0, [r7, #8]
 8016204:	f004 ffd6 	bl	801b1b4 <malloc>
 8016208:	4603      	mov	r3, r0
 801620a:	461a      	mov	r2, r3
 801620c:	687b      	ldr	r3, [r7, #4]
 801620e:	601a      	str	r2, [r3, #0]
    if (*ptr == NULL) {
 8016210:	687b      	ldr	r3, [r7, #4]
 8016212:	681b      	ldr	r3, [r3, #0]
 8016214:	2b00      	cmp	r3, #0
 8016216:	d106      	bne.n	8016226 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x42>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8016218:	68bb      	ldr	r3, [r7, #8]
 801621a:	4619      	mov	r1, r3
 801621c:	480f      	ldr	r0, [pc, #60]	; (801625c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x78>)
 801621e:	f005 fbbf 	bl	801b9a0 <iprintf>
      return kTfLiteError;
 8016222:	2301      	movs	r3, #1
 8016224:	e011      	b.n	801624a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
    }
    overflow_buffers.push_back(*ptr);
 8016226:	6879      	ldr	r1, [r7, #4]
 8016228:	480d      	ldr	r0, [pc, #52]	; (8016260 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x7c>)
 801622a:	f000 fb78 	bl	801691e <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return kTfLiteOk;
 801622e:	2300      	movs	r3, #0
 8016230:	e00b      	b.n	801624a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
  }

  current_location -= bytes;
 8016232:	4b08      	ldr	r3, [pc, #32]	; (8016254 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 8016234:	681a      	ldr	r2, [r3, #0]
 8016236:	68bb      	ldr	r3, [r7, #8]
 8016238:	425b      	negs	r3, r3
 801623a:	4413      	add	r3, r2
 801623c:	4a05      	ldr	r2, [pc, #20]	; (8016254 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 801623e:	6013      	str	r3, [r2, #0]

  *ptr = current_location;
 8016240:	4b04      	ldr	r3, [pc, #16]	; (8016254 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 8016242:	681a      	ldr	r2, [r3, #0]
 8016244:	687b      	ldr	r3, [r7, #4]
 8016246:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8016248:	2300      	movs	r3, #0
}
 801624a:	4618      	mov	r0, r3
 801624c:	3710      	adds	r7, #16
 801624e:	46bd      	mov	sp, r7
 8016250:	bd80      	pop	{r7, pc}
 8016252:	bf00      	nop
 8016254:	20006b80 	.word	0x20006b80
 8016258:	20006b7c 	.word	0x20006b7c
 801625c:	0801ef04 	.word	0x0801ef04
 8016260:	20007a08 	.word	0x20007a08

08016264 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	6878      	ldr	r0, [r7, #4]
 801626e:	f000 fb8b 	bl	8016988 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8016272:	687b      	ldr	r3, [r7, #4]
 8016274:	4618      	mov	r0, r3
 8016276:	3708      	adds	r7, #8
 8016278:	46bd      	mov	sp, r7
 801627a:	bd80      	pop	{r7, pc}

0801627c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 801627c:	b580      	push	{r7, lr}
 801627e:	b082      	sub	sp, #8
 8016280:	af00      	add	r7, sp, #0
 8016282:	6078      	str	r0, [r7, #4]
 8016284:	687b      	ldr	r3, [r7, #4]
 8016286:	4618      	mov	r0, r3
 8016288:	f000 fb6e 	bl	8016968 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	4618      	mov	r0, r3
 8016290:	3708      	adds	r7, #8
 8016292:	46bd      	mov	sp, r7
 8016294:	bd80      	pop	{r7, pc}

08016296 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 8016296:	b580      	push	{r7, lr}
 8016298:	b082      	sub	sp, #8
 801629a:	af00      	add	r7, sp, #0
 801629c:	6078      	str	r0, [r7, #4]
 801629e:	687b      	ldr	r3, [r7, #4]
 80162a0:	4618      	mov	r0, r3
 80162a2:	f7ff ffeb 	bl	801627c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	4618      	mov	r0, r3
 80162aa:	3708      	adds	r7, #8
 80162ac:	46bd      	mov	sp, r7
 80162ae:	bd80      	pop	{r7, pc}

080162b0 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 80162b0:	b580      	push	{r7, lr}
 80162b2:	b088      	sub	sp, #32
 80162b4:	af00      	add	r7, sp, #0
 80162b6:	60f8      	str	r0, [r7, #12]
 80162b8:	60b9      	str	r1, [r7, #8]
 80162ba:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 80162bc:	68bb      	ldr	r3, [r7, #8]
 80162be:	617b      	str	r3, [r7, #20]

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
 80162c0:	6979      	ldr	r1, [r7, #20]
 80162c2:	f107 0314 	add.w	r3, r7, #20
 80162c6:	3304      	adds	r3, #4
 80162c8:	461a      	mov	r2, r3
 80162ca:	68f8      	ldr	r0, [r7, #12]
 80162cc:	f7ff ff8a 	bl	80161e4 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>
 80162d0:	4603      	mov	r3, r0
 80162d2:	77fb      	strb	r3, [r7, #31]
  if (s != kTfLiteOk) {
 80162d4:	7ffb      	ldrb	r3, [r7, #31]
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	d001      	beq.n	80162de <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2e>
    return s;
 80162da:	7ffb      	ldrb	r3, [r7, #31]
 80162dc:	e00e      	b.n	80162fc <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x4c>
  }

  scratch_buffers.push_back(b);
 80162de:	f107 0314 	add.w	r3, r7, #20
 80162e2:	4619      	mov	r1, r3
 80162e4:	4807      	ldr	r0, [pc, #28]	; (8016304 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 80162e6:	f000 fb74 	bl	80169d2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 80162ea:	4806      	ldr	r0, [pc, #24]	; (8016304 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 80162ec:	f000 fb97 	bl	8016a1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 80162f0:	4603      	mov	r3, r0
 80162f2:	3b01      	subs	r3, #1
 80162f4:	461a      	mov	r2, r3
 80162f6:	687b      	ldr	r3, [r7, #4]
 80162f8:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 80162fa:	2300      	movs	r3, #0
}
 80162fc:	4618      	mov	r0, r3
 80162fe:	3720      	adds	r7, #32
 8016300:	46bd      	mov	sp, r7
 8016302:	bd80      	pop	{r7, pc}
 8016304:	20007a14 	.word	0x20007a14

08016308 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 8016308:	b580      	push	{r7, lr}
 801630a:	b082      	sub	sp, #8
 801630c:	af00      	add	r7, sp, #0
 801630e:	6078      	str	r0, [r7, #4]
 8016310:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 8016312:	480d      	ldr	r0, [pc, #52]	; (8016348 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8016314:	f000 fb83 	bl	8016a1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8016318:	4603      	mov	r3, r0
 801631a:	461a      	mov	r2, r3
 801631c:	683b      	ldr	r3, [r7, #0]
 801631e:	4293      	cmp	r3, r2
 8016320:	bfac      	ite	ge
 8016322:	2301      	movge	r3, #1
 8016324:	2300      	movlt	r3, #0
 8016326:	b2db      	uxtb	r3, r3
 8016328:	2b00      	cmp	r3, #0
 801632a:	d001      	beq.n	8016330 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 801632c:	2300      	movs	r3, #0
 801632e:	e006      	b.n	801633e <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 8016330:	683b      	ldr	r3, [r7, #0]
 8016332:	4619      	mov	r1, r3
 8016334:	4804      	ldr	r0, [pc, #16]	; (8016348 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 8016336:	f000 fb82 	bl	8016a3e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 801633a:	4603      	mov	r3, r0
 801633c:	685b      	ldr	r3, [r3, #4]
}
 801633e:	4618      	mov	r0, r3
 8016340:	3708      	adds	r7, #8
 8016342:	46bd      	mov	sp, r7
 8016344:	bd80      	pop	{r7, pc}
 8016346:	bf00      	nop
 8016348:	20007a14 	.word	0x20007a14

0801634c <_Z18trained_model_initPFPvjjE>:
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 801634c:	b5b0      	push	{r4, r5, r7, lr}
 801634e:	b08a      	sub	sp, #40	; 0x28
 8016350:	af00      	add	r7, sp, #0
 8016352:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 8016354:	687b      	ldr	r3, [r7, #4]
 8016356:	f44f 610f 	mov.w	r1, #2288	; 0x8f0
 801635a:	2010      	movs	r0, #16
 801635c:	4798      	blx	r3
 801635e:	4603      	mov	r3, r0
 8016360:	4a80      	ldr	r2, [pc, #512]	; (8016564 <_Z18trained_model_initPFPvjjE+0x218>)
 8016362:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 8016364:	4b7f      	ldr	r3, [pc, #508]	; (8016564 <_Z18trained_model_initPFPvjjE+0x218>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	2b00      	cmp	r3, #0
 801636a:	d104      	bne.n	8016376 <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 801636c:	487e      	ldr	r0, [pc, #504]	; (8016568 <_Z18trained_model_initPFPvjjE+0x21c>)
 801636e:	f005 fb9d 	bl	801baac <puts>
    return kTfLiteError;
 8016372:	2301      	movs	r3, #1
 8016374:	e201      	b.n	801677a <_Z18trained_model_initPFPvjjE+0x42e>
  }
#endif
  tensor_boundary = tensor_arena;
 8016376:	4b7b      	ldr	r3, [pc, #492]	; (8016564 <_Z18trained_model_initPFPvjjE+0x218>)
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	4a7c      	ldr	r2, [pc, #496]	; (801656c <_Z18trained_model_initPFPvjjE+0x220>)
 801637c:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 801637e:	4b79      	ldr	r3, [pc, #484]	; (8016564 <_Z18trained_model_initPFPvjjE+0x218>)
 8016380:	681b      	ldr	r3, [r3, #0]
 8016382:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 8016386:	4a7a      	ldr	r2, [pc, #488]	; (8016570 <_Z18trained_model_initPFPvjjE+0x224>)
 8016388:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 801638a:	4b7a      	ldr	r3, [pc, #488]	; (8016574 <_Z18trained_model_initPFPvjjE+0x228>)
 801638c:	4a7a      	ldr	r2, [pc, #488]	; (8016578 <_Z18trained_model_initPFPvjjE+0x22c>)
 801638e:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8016390:	4b78      	ldr	r3, [pc, #480]	; (8016574 <_Z18trained_model_initPFPvjjE+0x228>)
 8016392:	4a7a      	ldr	r2, [pc, #488]	; (801657c <_Z18trained_model_initPFPvjjE+0x230>)
 8016394:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 8016396:	4b77      	ldr	r3, [pc, #476]	; (8016574 <_Z18trained_model_initPFPvjjE+0x228>)
 8016398:	4a79      	ldr	r2, [pc, #484]	; (8016580 <_Z18trained_model_initPFPvjjE+0x234>)
 801639a:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.tensors = tflTensors;
 801639c:	4b75      	ldr	r3, [pc, #468]	; (8016574 <_Z18trained_model_initPFPvjjE+0x228>)
 801639e:	4a79      	ldr	r2, [pc, #484]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 80163a0:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 42;
 80163a2:	4b74      	ldr	r3, [pc, #464]	; (8016574 <_Z18trained_model_initPFPvjjE+0x228>)
 80163a4:	222a      	movs	r2, #42	; 0x2a
 80163a6:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 42; ++i) {
 80163a8:	2300      	movs	r3, #0
 80163aa:	627b      	str	r3, [r7, #36]	; 0x24
 80163ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ae:	2b29      	cmp	r3, #41	; 0x29
 80163b0:	f200 80cd 	bhi.w	801654e <_Z18trained_model_initPFPvjjE+0x202>
    tflTensors[i].type = tensorData[i].type;
 80163b4:	4974      	ldr	r1, [pc, #464]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 80163b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163b8:	4613      	mov	r3, r2
 80163ba:	005b      	lsls	r3, r3, #1
 80163bc:	4413      	add	r3, r2
 80163be:	00db      	lsls	r3, r3, #3
 80163c0:	440b      	add	r3, r1
 80163c2:	3301      	adds	r3, #1
 80163c4:	7819      	ldrb	r1, [r3, #0]
 80163c6:	4a6f      	ldr	r2, [pc, #444]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 80163c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163ca:	019b      	lsls	r3, r3, #6
 80163cc:	4413      	add	r3, r2
 80163ce:	460a      	mov	r2, r1
 80163d0:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 80163d2:	4a6c      	ldr	r2, [pc, #432]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 80163d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163d6:	019b      	lsls	r3, r3, #6
 80163d8:	4413      	add	r3, r2
 80163da:	332d      	adds	r3, #45	; 0x2d
 80163dc:	2200      	movs	r2, #0
 80163de:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 80163e0:	4969      	ldr	r1, [pc, #420]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 80163e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163e4:	4613      	mov	r3, r2
 80163e6:	005b      	lsls	r3, r3, #1
 80163e8:	4413      	add	r3, r2
 80163ea:	00db      	lsls	r3, r3, #3
 80163ec:	440b      	add	r3, r1
 80163ee:	7819      	ldrb	r1, [r3, #0]
 80163f0:	4a64      	ldr	r2, [pc, #400]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 80163f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163f4:	019b      	lsls	r3, r3, #6
 80163f6:	4413      	add	r3, r2
 80163f8:	3314      	adds	r3, #20
 80163fa:	460a      	mov	r2, r1
 80163fc:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 80163fe:	4962      	ldr	r1, [pc, #392]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 8016400:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016402:	4613      	mov	r3, r2
 8016404:	005b      	lsls	r3, r3, #1
 8016406:	4413      	add	r3, r2
 8016408:	00db      	lsls	r3, r3, #3
 801640a:	440b      	add	r3, r1
 801640c:	330c      	adds	r3, #12
 801640e:	681a      	ldr	r2, [r3, #0]
 8016410:	495c      	ldr	r1, [pc, #368]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 8016412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016414:	019b      	lsls	r3, r3, #6
 8016416:	440b      	add	r3, r1
 8016418:	3318      	adds	r3, #24
 801641a:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 801641c:	495a      	ldr	r1, [pc, #360]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 801641e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016420:	4613      	mov	r3, r2
 8016422:	005b      	lsls	r3, r3, #1
 8016424:	4413      	add	r3, r2
 8016426:	00db      	lsls	r3, r3, #3
 8016428:	440b      	add	r3, r1
 801642a:	3308      	adds	r3, #8
 801642c:	681a      	ldr	r2, [r3, #0]
 801642e:	4955      	ldr	r1, [pc, #340]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 8016430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016432:	019b      	lsls	r3, r3, #6
 8016434:	440b      	add	r3, r1
 8016436:	3308      	adds	r3, #8
 8016438:	601a      	str	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 801643a:	4a52      	ldr	r2, [pc, #328]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 801643c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801643e:	019b      	lsls	r3, r3, #6
 8016440:	4413      	add	r3, r2
 8016442:	3314      	adds	r3, #20
 8016444:	781b      	ldrb	r3, [r3, #0]
 8016446:	2b02      	cmp	r3, #2
 8016448:	d115      	bne.n	8016476 <_Z18trained_model_initPFPvjjE+0x12a>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 801644a:	494f      	ldr	r1, [pc, #316]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 801644c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801644e:	4613      	mov	r3, r2
 8016450:	005b      	lsls	r3, r3, #1
 8016452:	4413      	add	r3, r2
 8016454:	00db      	lsls	r3, r3, #3
 8016456:	440b      	add	r3, r1
 8016458:	3304      	adds	r3, #4
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	461a      	mov	r2, r3
 801645e:	4b41      	ldr	r3, [pc, #260]	; (8016564 <_Z18trained_model_initPFPvjjE+0x218>)
 8016460:	681b      	ldr	r3, [r3, #0]
 8016462:	4413      	add	r3, r2
 8016464:	61bb      	str	r3, [r7, #24]

     tflTensors[i].data.data =  start;
 8016466:	4a47      	ldr	r2, [pc, #284]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 8016468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801646a:	019b      	lsls	r3, r3, #6
 801646c:	4413      	add	r3, r2
 801646e:	3304      	adds	r3, #4
 8016470:	69ba      	ldr	r2, [r7, #24]
 8016472:	601a      	str	r2, [r3, #0]
 8016474:	e00e      	b.n	8016494 <_Z18trained_model_initPFPvjjE+0x148>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 8016476:	4944      	ldr	r1, [pc, #272]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 8016478:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801647a:	4613      	mov	r3, r2
 801647c:	005b      	lsls	r3, r3, #1
 801647e:	4413      	add	r3, r2
 8016480:	00db      	lsls	r3, r3, #3
 8016482:	440b      	add	r3, r1
 8016484:	3304      	adds	r3, #4
 8016486:	681a      	ldr	r2, [r3, #0]
 8016488:	493e      	ldr	r1, [pc, #248]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 801648a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801648c:	019b      	lsls	r3, r3, #6
 801648e:	440b      	add	r3, r1
 8016490:	3304      	adds	r3, #4
 8016492:	601a      	str	r2, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 8016494:	4a3b      	ldr	r2, [pc, #236]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 8016496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016498:	019b      	lsls	r3, r3, #6
 801649a:	4413      	add	r3, r2
 801649c:	f103 0030 	add.w	r0, r3, #48	; 0x30
 80164a0:	4939      	ldr	r1, [pc, #228]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 80164a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164a4:	4613      	mov	r3, r2
 80164a6:	005b      	lsls	r3, r3, #1
 80164a8:	4413      	add	r3, r2
 80164aa:	00db      	lsls	r3, r3, #3
 80164ac:	440b      	add	r3, r1
 80164ae:	f103 0210 	add.w	r2, r3, #16
 80164b2:	4603      	mov	r3, r0
 80164b4:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164b8:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 80164bc:	4a31      	ldr	r2, [pc, #196]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 80164be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164c0:	019b      	lsls	r3, r3, #6
 80164c2:	4413      	add	r3, r2
 80164c4:	3330      	adds	r3, #48	; 0x30
 80164c6:	781b      	ldrb	r3, [r3, #0]
 80164c8:	2b01      	cmp	r3, #1
 80164ca:	d11b      	bne.n	8016504 <_Z18trained_model_initPFPvjjE+0x1b8>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 80164cc:	492e      	ldr	r1, [pc, #184]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 80164ce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164d0:	4613      	mov	r3, r2
 80164d2:	005b      	lsls	r3, r3, #1
 80164d4:	4413      	add	r3, r2
 80164d6:	00db      	lsls	r3, r3, #3
 80164d8:	440b      	add	r3, r1
 80164da:	3314      	adds	r3, #20
 80164dc:	681b      	ldr	r3, [r3, #0]
 80164de:	617b      	str	r3, [r7, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
 80164e0:	697b      	ldr	r3, [r7, #20]
 80164e2:	681b      	ldr	r3, [r3, #0]
 80164e4:	685a      	ldr	r2, [r3, #4]
 80164e6:	4927      	ldr	r1, [pc, #156]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 80164e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164ea:	019b      	lsls	r3, r3, #6
 80164ec:	440b      	add	r3, r1
 80164ee:	330c      	adds	r3, #12
 80164f0:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 80164f2:	697b      	ldr	r3, [r7, #20]
 80164f4:	685b      	ldr	r3, [r3, #4]
 80164f6:	685a      	ldr	r2, [r3, #4]
 80164f8:	4922      	ldr	r1, [pc, #136]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 80164fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164fc:	019b      	lsls	r3, r3, #6
 80164fe:	440b      	add	r3, r1
 8016500:	3310      	adds	r3, #16
 8016502:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 8016504:	4a1f      	ldr	r2, [pc, #124]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 8016506:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016508:	019b      	lsls	r3, r3, #6
 801650a:	4413      	add	r3, r2
 801650c:	3314      	adds	r3, #20
 801650e:	781b      	ldrb	r3, [r3, #0]
 8016510:	2b02      	cmp	r3, #2
 8016512:	d118      	bne.n	8016546 <_Z18trained_model_initPFPvjjE+0x1fa>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 8016514:	4a1b      	ldr	r2, [pc, #108]	; (8016584 <_Z18trained_model_initPFPvjjE+0x238>)
 8016516:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016518:	019b      	lsls	r3, r3, #6
 801651a:	4413      	add	r3, r2
 801651c:	3304      	adds	r3, #4
 801651e:	6819      	ldr	r1, [r3, #0]
 8016520:	4819      	ldr	r0, [pc, #100]	; (8016588 <_Z18trained_model_initPFPvjjE+0x23c>)
 8016522:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016524:	4613      	mov	r3, r2
 8016526:	005b      	lsls	r3, r3, #1
 8016528:	4413      	add	r3, r2
 801652a:	00db      	lsls	r3, r3, #3
 801652c:	4403      	add	r3, r0
 801652e:	330c      	adds	r3, #12
 8016530:	681b      	ldr	r3, [r3, #0]
 8016532:	440b      	add	r3, r1
 8016534:	613b      	str	r3, [r7, #16]
      if (data_end_ptr > tensor_boundary) {
 8016536:	4b0d      	ldr	r3, [pc, #52]	; (801656c <_Z18trained_model_initPFPvjjE+0x220>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	693a      	ldr	r2, [r7, #16]
 801653c:	429a      	cmp	r2, r3
 801653e:	d902      	bls.n	8016546 <_Z18trained_model_initPFPvjjE+0x1fa>
        tensor_boundary = data_end_ptr;
 8016540:	4a0a      	ldr	r2, [pc, #40]	; (801656c <_Z18trained_model_initPFPvjjE+0x220>)
 8016542:	693b      	ldr	r3, [r7, #16]
 8016544:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 42; ++i) {
 8016546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016548:	3301      	adds	r3, #1
 801654a:	627b      	str	r3, [r7, #36]	; 0x24
 801654c:	e72e      	b.n	80163ac <_Z18trained_model_initPFPvjjE+0x60>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 801654e:	4b07      	ldr	r3, [pc, #28]	; (801656c <_Z18trained_model_initPFPvjjE+0x220>)
 8016550:	681a      	ldr	r2, [r3, #0]
 8016552:	4b07      	ldr	r3, [pc, #28]	; (8016570 <_Z18trained_model_initPFPvjjE+0x224>)
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	429a      	cmp	r2, r3
 8016558:	d91a      	bls.n	8016590 <_Z18trained_model_initPFPvjjE+0x244>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 801655a:	480c      	ldr	r0, [pc, #48]	; (801658c <_Z18trained_model_initPFPvjjE+0x240>)
 801655c:	f005 faa6 	bl	801baac <puts>
    return kTfLiteError;
 8016560:	2301      	movs	r3, #1
 8016562:	e10a      	b.n	801677a <_Z18trained_model_initPFPvjjE+0x42e>
 8016564:	20006b78 	.word	0x20006b78
 8016568:	0801ef3c 	.word	0x0801ef3c
 801656c:	20006b7c 	.word	0x20006b7c
 8016570:	20006b80 	.word	0x20006b80
 8016574:	20006b84 	.word	0x20006b84
 8016578:	080161e5 	.word	0x080161e5
 801657c:	080162b1 	.word	0x080162b1
 8016580:	08016309 	.word	0x08016309
 8016584:	20006bd4 	.word	0x20006bd4
 8016588:	20000124 	.word	0x20000124
 801658c:	0801ef64 	.word	0x0801ef64
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
 8016590:	f7fe fbf2 	bl	8014d78 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 8016594:	4603      	mov	r3, r0
 8016596:	4a7b      	ldr	r2, [pc, #492]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 8016598:	4614      	mov	r4, r2
 801659a:	461d      	mov	r5, r3
 801659c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801659e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165a0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165a4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
 80165a8:	f7fc f8e6 	bl	8012778 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
 80165ac:	4602      	mov	r2, r0
 80165ae:	4b75      	ldr	r3, [pc, #468]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 80165b0:	f103 0420 	add.w	r4, r3, #32
 80165b4:	4615      	mov	r5, r2
 80165b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165ba:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165be:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
 80165c2:	f7fa fc33 	bl	8010e2c <_ZN6tflite3ops5micro12Register_ADDEv>
 80165c6:	4602      	mov	r2, r0
 80165c8:	4b6e      	ldr	r3, [pc, #440]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 80165ca:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80165ce:	4615      	mov	r5, r2
 80165d0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165d2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165d4:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165d8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
 80165dc:	f7fe f9e4 	bl	80149a8 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 80165e0:	4602      	mov	r2, r0
 80165e2:	4b68      	ldr	r3, [pc, #416]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 80165e4:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80165e8:	4615      	mov	r5, r2
 80165ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165ee:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165f2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
 80165f6:	f7fc ff69 	bl	80134cc <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 80165fa:	4602      	mov	r2, r0
 80165fc:	4b61      	ldr	r3, [pc, #388]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 80165fe:	f103 0480 	add.w	r4, r3, #128	; 0x80
 8016602:	4615      	mov	r5, r2
 8016604:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016606:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016608:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801660c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();
 8016610:	f7fe ffa0 	bl	8015554 <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
 8016614:	4602      	mov	r2, r0
 8016616:	4b5b      	ldr	r3, [pc, #364]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 8016618:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 801661c:	4615      	mov	r5, r2
 801661e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016620:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016622:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8016626:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 21; ++i) {
 801662a:	2300      	movs	r3, #0
 801662c:	623b      	str	r3, [r7, #32]
 801662e:	6a3b      	ldr	r3, [r7, #32]
 8016630:	2b14      	cmp	r3, #20
 8016632:	d86f      	bhi.n	8016714 <_Z18trained_model_initPFPvjjE+0x3c8>
    tflNodes[i].inputs = nodeData[i].inputs;
 8016634:	4a54      	ldr	r2, [pc, #336]	; (8016788 <_Z18trained_model_initPFPvjjE+0x43c>)
 8016636:	6a3b      	ldr	r3, [r7, #32]
 8016638:	011b      	lsls	r3, r3, #4
 801663a:	4413      	add	r3, r2
 801663c:	6819      	ldr	r1, [r3, #0]
 801663e:	4853      	ldr	r0, [pc, #332]	; (801678c <_Z18trained_model_initPFPvjjE+0x440>)
 8016640:	6a3a      	ldr	r2, [r7, #32]
 8016642:	4613      	mov	r3, r2
 8016644:	00db      	lsls	r3, r3, #3
 8016646:	4413      	add	r3, r2
 8016648:	009b      	lsls	r3, r3, #2
 801664a:	4403      	add	r3, r0
 801664c:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 801664e:	4a4e      	ldr	r2, [pc, #312]	; (8016788 <_Z18trained_model_initPFPvjjE+0x43c>)
 8016650:	6a3b      	ldr	r3, [r7, #32]
 8016652:	011b      	lsls	r3, r3, #4
 8016654:	4413      	add	r3, r2
 8016656:	3304      	adds	r3, #4
 8016658:	6819      	ldr	r1, [r3, #0]
 801665a:	484c      	ldr	r0, [pc, #304]	; (801678c <_Z18trained_model_initPFPvjjE+0x440>)
 801665c:	6a3a      	ldr	r2, [r7, #32]
 801665e:	4613      	mov	r3, r2
 8016660:	00db      	lsls	r3, r3, #3
 8016662:	4413      	add	r3, r2
 8016664:	009b      	lsls	r3, r3, #2
 8016666:	4403      	add	r3, r0
 8016668:	3304      	adds	r3, #4
 801666a:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 801666c:	4a46      	ldr	r2, [pc, #280]	; (8016788 <_Z18trained_model_initPFPvjjE+0x43c>)
 801666e:	6a3b      	ldr	r3, [r7, #32]
 8016670:	011b      	lsls	r3, r3, #4
 8016672:	4413      	add	r3, r2
 8016674:	3308      	adds	r3, #8
 8016676:	6819      	ldr	r1, [r3, #0]
 8016678:	4844      	ldr	r0, [pc, #272]	; (801678c <_Z18trained_model_initPFPvjjE+0x440>)
 801667a:	6a3a      	ldr	r2, [r7, #32]
 801667c:	4613      	mov	r3, r2
 801667e:	00db      	lsls	r3, r3, #3
 8016680:	4413      	add	r3, r2
 8016682:	009b      	lsls	r3, r3, #2
 8016684:	4403      	add	r3, r0
 8016686:	3314      	adds	r3, #20
 8016688:	6019      	str	r1, [r3, #0]
    tflNodes[i].custom_initial_data = nullptr;
 801668a:	4940      	ldr	r1, [pc, #256]	; (801678c <_Z18trained_model_initPFPvjjE+0x440>)
 801668c:	6a3a      	ldr	r2, [r7, #32]
 801668e:	4613      	mov	r3, r2
 8016690:	00db      	lsls	r3, r3, #3
 8016692:	4413      	add	r3, r2
 8016694:	009b      	lsls	r3, r3, #2
 8016696:	440b      	add	r3, r1
 8016698:	3318      	adds	r3, #24
 801669a:	2200      	movs	r2, #0
 801669c:	601a      	str	r2, [r3, #0]
    tflNodes[i].custom_initial_data_size = 0;
 801669e:	493b      	ldr	r1, [pc, #236]	; (801678c <_Z18trained_model_initPFPvjjE+0x440>)
 80166a0:	6a3a      	ldr	r2, [r7, #32]
 80166a2:	4613      	mov	r3, r2
 80166a4:	00db      	lsls	r3, r3, #3
 80166a6:	4413      	add	r3, r2
 80166a8:	009b      	lsls	r3, r3, #2
 80166aa:	440b      	add	r3, r1
 80166ac:	331c      	adds	r3, #28
 80166ae:	2200      	movs	r2, #0
 80166b0:	601a      	str	r2, [r3, #0]
    if (registrations[nodeData[i].used_op_index].init) {
 80166b2:	4a35      	ldr	r2, [pc, #212]	; (8016788 <_Z18trained_model_initPFPvjjE+0x43c>)
 80166b4:	6a3b      	ldr	r3, [r7, #32]
 80166b6:	011b      	lsls	r3, r3, #4
 80166b8:	4413      	add	r3, r2
 80166ba:	330c      	adds	r3, #12
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	4a31      	ldr	r2, [pc, #196]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 80166c0:	015b      	lsls	r3, r3, #5
 80166c2:	4413      	add	r3, r2
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d020      	beq.n	801670c <_Z18trained_model_initPFPvjjE+0x3c0>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80166ca:	4a2f      	ldr	r2, [pc, #188]	; (8016788 <_Z18trained_model_initPFPvjjE+0x43c>)
 80166cc:	6a3b      	ldr	r3, [r7, #32]
 80166ce:	011b      	lsls	r3, r3, #4
 80166d0:	4413      	add	r3, r2
 80166d2:	330c      	adds	r3, #12
 80166d4:	781b      	ldrb	r3, [r3, #0]
 80166d6:	4a2b      	ldr	r2, [pc, #172]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 80166d8:	015b      	lsls	r3, r3, #5
 80166da:	4413      	add	r3, r2
 80166dc:	681c      	ldr	r4, [r3, #0]
 80166de:	492b      	ldr	r1, [pc, #172]	; (801678c <_Z18trained_model_initPFPvjjE+0x440>)
 80166e0:	6a3a      	ldr	r2, [r7, #32]
 80166e2:	4613      	mov	r3, r2
 80166e4:	00db      	lsls	r3, r3, #3
 80166e6:	4413      	add	r3, r2
 80166e8:	009b      	lsls	r3, r3, #2
 80166ea:	440b      	add	r3, r1
 80166ec:	3314      	adds	r3, #20
 80166ee:	681b      	ldr	r3, [r3, #0]
 80166f0:	2200      	movs	r2, #0
 80166f2:	4619      	mov	r1, r3
 80166f4:	4826      	ldr	r0, [pc, #152]	; (8016790 <_Z18trained_model_initPFPvjjE+0x444>)
 80166f6:	47a0      	blx	r4
 80166f8:	4601      	mov	r1, r0
 80166fa:	4824      	ldr	r0, [pc, #144]	; (801678c <_Z18trained_model_initPFPvjjE+0x440>)
 80166fc:	6a3a      	ldr	r2, [r7, #32]
 80166fe:	4613      	mov	r3, r2
 8016700:	00db      	lsls	r3, r3, #3
 8016702:	4413      	add	r3, r2
 8016704:	009b      	lsls	r3, r3, #2
 8016706:	4403      	add	r3, r0
 8016708:	3310      	adds	r3, #16
 801670a:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 21; ++i) {
 801670c:	6a3b      	ldr	r3, [r7, #32]
 801670e:	3301      	adds	r3, #1
 8016710:	623b      	str	r3, [r7, #32]
 8016712:	e78c      	b.n	801662e <_Z18trained_model_initPFPvjjE+0x2e2>
    }
  }
  for(size_t i = 0; i < 21; ++i) {
 8016714:	2300      	movs	r3, #0
 8016716:	61fb      	str	r3, [r7, #28]
 8016718:	69fb      	ldr	r3, [r7, #28]
 801671a:	2b14      	cmp	r3, #20
 801671c:	d82c      	bhi.n	8016778 <_Z18trained_model_initPFPvjjE+0x42c>
    if (registrations[nodeData[i].used_op_index].prepare) {
 801671e:	4a1a      	ldr	r2, [pc, #104]	; (8016788 <_Z18trained_model_initPFPvjjE+0x43c>)
 8016720:	69fb      	ldr	r3, [r7, #28]
 8016722:	011b      	lsls	r3, r3, #4
 8016724:	4413      	add	r3, r2
 8016726:	330c      	adds	r3, #12
 8016728:	781b      	ldrb	r3, [r3, #0]
 801672a:	4a16      	ldr	r2, [pc, #88]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 801672c:	015b      	lsls	r3, r3, #5
 801672e:	4413      	add	r3, r2
 8016730:	3308      	adds	r3, #8
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	2b00      	cmp	r3, #0
 8016736:	d01b      	beq.n	8016770 <_Z18trained_model_initPFPvjjE+0x424>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 8016738:	4a13      	ldr	r2, [pc, #76]	; (8016788 <_Z18trained_model_initPFPvjjE+0x43c>)
 801673a:	69fb      	ldr	r3, [r7, #28]
 801673c:	011b      	lsls	r3, r3, #4
 801673e:	4413      	add	r3, r2
 8016740:	330c      	adds	r3, #12
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	4a0f      	ldr	r2, [pc, #60]	; (8016784 <_Z18trained_model_initPFPvjjE+0x438>)
 8016746:	015b      	lsls	r3, r3, #5
 8016748:	4413      	add	r3, r2
 801674a:	3308      	adds	r3, #8
 801674c:	681c      	ldr	r4, [r3, #0]
 801674e:	69fa      	ldr	r2, [r7, #28]
 8016750:	4613      	mov	r3, r2
 8016752:	00db      	lsls	r3, r3, #3
 8016754:	4413      	add	r3, r2
 8016756:	009b      	lsls	r3, r3, #2
 8016758:	4a0c      	ldr	r2, [pc, #48]	; (801678c <_Z18trained_model_initPFPvjjE+0x440>)
 801675a:	4413      	add	r3, r2
 801675c:	4619      	mov	r1, r3
 801675e:	480c      	ldr	r0, [pc, #48]	; (8016790 <_Z18trained_model_initPFPvjjE+0x444>)
 8016760:	47a0      	blx	r4
 8016762:	4603      	mov	r3, r0
 8016764:	73fb      	strb	r3, [r7, #15]
      if (status != kTfLiteOk) {
 8016766:	7bfb      	ldrb	r3, [r7, #15]
 8016768:	2b00      	cmp	r3, #0
 801676a:	d001      	beq.n	8016770 <_Z18trained_model_initPFPvjjE+0x424>
        return status;
 801676c:	7bfb      	ldrb	r3, [r7, #15]
 801676e:	e004      	b.n	801677a <_Z18trained_model_initPFPvjjE+0x42e>
  for(size_t i = 0; i < 21; ++i) {
 8016770:	69fb      	ldr	r3, [r7, #28]
 8016772:	3301      	adds	r3, #1
 8016774:	61fb      	str	r3, [r7, #28]
 8016776:	e7cf      	b.n	8016718 <_Z18trained_model_initPFPvjjE+0x3cc>
      }
    }
  }
  return kTfLiteOk;
 8016778:	2300      	movs	r3, #0
}
 801677a:	4618      	mov	r0, r3
 801677c:	3728      	adds	r7, #40	; 0x28
 801677e:	46bd      	mov	sp, r7
 8016780:	bdb0      	pop	{r4, r5, r7, pc}
 8016782:	bf00      	nop
 8016784:	20007654 	.word	0x20007654
 8016788:	0803e770 	.word	0x0803e770
 801678c:	20007714 	.word	0x20007714
 8016790:	20006b84 	.word	0x20006b84

08016794 <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 8016794:	b480      	push	{r7}
 8016796:	b083      	sub	sp, #12
 8016798:	af00      	add	r7, sp, #0
 801679a:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 801679c:	4b05      	ldr	r3, [pc, #20]	; (80167b4 <_Z19trained_model_inputi+0x20>)
 801679e:	689a      	ldr	r2, [r3, #8]
 80167a0:	2300      	movs	r3, #0
 80167a2:	019b      	lsls	r3, r3, #6
 80167a4:	4413      	add	r3, r2
}
 80167a6:	4618      	mov	r0, r3
 80167a8:	370c      	adds	r7, #12
 80167aa:	46bd      	mov	sp, r7
 80167ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167b0:	4770      	bx	lr
 80167b2:	bf00      	nop
 80167b4:	20006b84 	.word	0x20006b84

080167b8 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  41, 
};
TfLiteTensor* trained_model_output(int index) {
 80167b8:	b480      	push	{r7}
 80167ba:	b083      	sub	sp, #12
 80167bc:	af00      	add	r7, sp, #0
 80167be:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80167c0:	4b05      	ldr	r3, [pc, #20]	; (80167d8 <_Z20trained_model_outputi+0x20>)
 80167c2:	689a      	ldr	r2, [r3, #8]
 80167c4:	2329      	movs	r3, #41	; 0x29
 80167c6:	019b      	lsls	r3, r3, #6
 80167c8:	4413      	add	r3, r2
}
 80167ca:	4618      	mov	r0, r3
 80167cc:	370c      	adds	r7, #12
 80167ce:	46bd      	mov	sp, r7
 80167d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167d4:	4770      	bx	lr
 80167d6:	bf00      	nop
 80167d8:	20006b84 	.word	0x20006b84

080167dc <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 80167dc:	b590      	push	{r4, r7, lr}
 80167de:	b083      	sub	sp, #12
 80167e0:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 21; ++i) {
 80167e2:	2300      	movs	r3, #0
 80167e4:	607b      	str	r3, [r7, #4]
 80167e6:	687b      	ldr	r3, [r7, #4]
 80167e8:	2b14      	cmp	r3, #20
 80167ea:	d81f      	bhi.n	801682c <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 80167ec:	4a12      	ldr	r2, [pc, #72]	; (8016838 <_Z20trained_model_invokev+0x5c>)
 80167ee:	687b      	ldr	r3, [r7, #4]
 80167f0:	011b      	lsls	r3, r3, #4
 80167f2:	4413      	add	r3, r2
 80167f4:	330c      	adds	r3, #12
 80167f6:	781b      	ldrb	r3, [r3, #0]
 80167f8:	4a10      	ldr	r2, [pc, #64]	; (801683c <_Z20trained_model_invokev+0x60>)
 80167fa:	015b      	lsls	r3, r3, #5
 80167fc:	4413      	add	r3, r2
 80167fe:	330c      	adds	r3, #12
 8016800:	681c      	ldr	r4, [r3, #0]
 8016802:	687a      	ldr	r2, [r7, #4]
 8016804:	4613      	mov	r3, r2
 8016806:	00db      	lsls	r3, r3, #3
 8016808:	4413      	add	r3, r2
 801680a:	009b      	lsls	r3, r3, #2
 801680c:	4a0c      	ldr	r2, [pc, #48]	; (8016840 <_Z20trained_model_invokev+0x64>)
 801680e:	4413      	add	r3, r2
 8016810:	4619      	mov	r1, r3
 8016812:	480c      	ldr	r0, [pc, #48]	; (8016844 <_Z20trained_model_invokev+0x68>)
 8016814:	47a0      	blx	r4
 8016816:	4603      	mov	r3, r0
 8016818:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 801681a:	78fb      	ldrb	r3, [r7, #3]
 801681c:	2b00      	cmp	r3, #0
 801681e:	d001      	beq.n	8016824 <_Z20trained_model_invokev+0x48>
      return status;
 8016820:	78fb      	ldrb	r3, [r7, #3]
 8016822:	e004      	b.n	801682e <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 21; ++i) {
 8016824:	687b      	ldr	r3, [r7, #4]
 8016826:	3301      	adds	r3, #1
 8016828:	607b      	str	r3, [r7, #4]
 801682a:	e7dc      	b.n	80167e6 <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 801682c:	2300      	movs	r3, #0
}
 801682e:	4618      	mov	r0, r3
 8016830:	370c      	adds	r7, #12
 8016832:	46bd      	mov	sp, r7
 8016834:	bd90      	pop	{r4, r7, pc}
 8016836:	bf00      	nop
 8016838:	0803e770 	.word	0x0803e770
 801683c:	20007654 	.word	0x20007654
 8016840:	20007714 	.word	0x20007714
 8016844:	20006b84 	.word	0x20006b84

08016848 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8016848:	b580      	push	{r7, lr}
 801684a:	b084      	sub	sp, #16
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8016850:	4b15      	ldr	r3, [pc, #84]	; (80168a8 <_Z19trained_model_resetPFvPvE+0x60>)
 8016852:	681a      	ldr	r2, [r3, #0]
 8016854:	687b      	ldr	r3, [r7, #4]
 8016856:	4610      	mov	r0, r2
 8016858:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 801685a:	4814      	ldr	r0, [pc, #80]	; (80168ac <_Z19trained_model_resetPFvPvE+0x64>)
 801685c:	f000 f8ff 	bl	8016a5e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8016860:	2300      	movs	r3, #0
 8016862:	60fb      	str	r3, [r7, #12]
 8016864:	4812      	ldr	r0, [pc, #72]	; (80168b0 <_Z19trained_model_resetPFvPvE+0x68>)
 8016866:	f000 f908 	bl	8016a7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801686a:	4602      	mov	r2, r0
 801686c:	68fb      	ldr	r3, [r7, #12]
 801686e:	4293      	cmp	r3, r2
 8016870:	bf34      	ite	cc
 8016872:	2301      	movcc	r3, #1
 8016874:	2300      	movcs	r3, #0
 8016876:	b2db      	uxtb	r3, r3
 8016878:	2b00      	cmp	r3, #0
 801687a:	d00c      	beq.n	8016896 <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 801687c:	68f9      	ldr	r1, [r7, #12]
 801687e:	480c      	ldr	r0, [pc, #48]	; (80168b0 <_Z19trained_model_resetPFvPvE+0x68>)
 8016880:	f000 f90b 	bl	8016a9a <_ZNSt6vectorIPvSaIS0_EEixEj>
 8016884:	4603      	mov	r3, r0
 8016886:	681b      	ldr	r3, [r3, #0]
 8016888:	4618      	mov	r0, r3
 801688a:	f004 fc9b 	bl	801b1c4 <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 801688e:	68fb      	ldr	r3, [r7, #12]
 8016890:	3301      	adds	r3, #1
 8016892:	60fb      	str	r3, [r7, #12]
 8016894:	e7e6      	b.n	8016864 <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 8016896:	4806      	ldr	r0, [pc, #24]	; (80168b0 <_Z19trained_model_resetPFvPvE+0x68>)
 8016898:	f000 f90f 	bl	8016aba <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 801689c:	2300      	movs	r3, #0
}
 801689e:	4618      	mov	r0, r3
 80168a0:	3710      	adds	r7, #16
 80168a2:	46bd      	mov	sp, r7
 80168a4:	bd80      	pop	{r7, pc}
 80168a6:	bf00      	nop
 80168a8:	20006b78 	.word	0x20006b78
 80168ac:	20007a14 	.word	0x20007a14
 80168b0:	20007a08 	.word	0x20007a08

080168b4 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 80168b4:	b580      	push	{r7, lr}
 80168b6:	b082      	sub	sp, #8
 80168b8:	af00      	add	r7, sp, #0
 80168ba:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80168bc:	6878      	ldr	r0, [r7, #4]
 80168be:	f000 f90a 	bl	8016ad6 <_ZNSaIPvEC1Ev>
 80168c2:	687b      	ldr	r3, [r7, #4]
 80168c4:	4618      	mov	r0, r3
 80168c6:	f000 f912 	bl	8016aee <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	4618      	mov	r0, r3
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <_ZNSaIPvED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
 80168dc:	6878      	ldr	r0, [r7, #4]
 80168de:	f000 f91a 	bl	8016b16 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 80168e2:	687b      	ldr	r3, [r7, #4]
 80168e4:	4618      	mov	r0, r3
 80168e6:	3708      	adds	r7, #8
 80168e8:	46bd      	mov	sp, r7
 80168ea:	bd80      	pop	{r7, pc}

080168ec <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80168ec:	b580      	push	{r7, lr}
 80168ee:	b082      	sub	sp, #8
 80168f0:	af00      	add	r7, sp, #0
 80168f2:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80168f8:	687b      	ldr	r3, [r7, #4]
 80168fa:	689a      	ldr	r2, [r3, #8]
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	681b      	ldr	r3, [r3, #0]
 8016900:	1ad3      	subs	r3, r2, r3
 8016902:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 8016904:	461a      	mov	r2, r3
 8016906:	6878      	ldr	r0, [r7, #4]
 8016908:	f000 f910 	bl	8016b2c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 801690c:	687b      	ldr	r3, [r7, #4]
 801690e:	4618      	mov	r0, r3
 8016910:	f7ff fc42 	bl	8016198 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	4618      	mov	r0, r3
 8016918:	3708      	adds	r7, #8
 801691a:	46bd      	mov	sp, r7
 801691c:	bd80      	pop	{r7, pc}

0801691e <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 801691e:	b580      	push	{r7, lr}
 8016920:	b082      	sub	sp, #8
 8016922:	af00      	add	r7, sp, #0
 8016924:	6078      	str	r0, [r7, #4]
 8016926:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	685a      	ldr	r2, [r3, #4]
 801692c:	687b      	ldr	r3, [r7, #4]
 801692e:	689b      	ldr	r3, [r3, #8]
 8016930:	429a      	cmp	r2, r3
 8016932:	d00c      	beq.n	801694e <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 8016934:	6878      	ldr	r0, [r7, #4]
 8016936:	687b      	ldr	r3, [r7, #4]
 8016938:	685b      	ldr	r3, [r3, #4]
 801693a:	683a      	ldr	r2, [r7, #0]
 801693c:	4619      	mov	r1, r3
 801693e:	f000 f908 	bl	8016b52 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 8016942:	687b      	ldr	r3, [r7, #4]
 8016944:	685b      	ldr	r3, [r3, #4]
 8016946:	1d1a      	adds	r2, r3, #4
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	605a      	str	r2, [r3, #4]
      }
 801694c:	e008      	b.n	8016960 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 801694e:	6878      	ldr	r0, [r7, #4]
 8016950:	f000 f912 	bl	8016b78 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 8016954:	4603      	mov	r3, r0
 8016956:	683a      	ldr	r2, [r7, #0]
 8016958:	4619      	mov	r1, r3
 801695a:	6878      	ldr	r0, [r7, #4]
 801695c:	f000 f934 	bl	8016bc8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8016960:	bf00      	nop
 8016962:	3708      	adds	r7, #8
 8016964:	46bd      	mov	sp, r7
 8016966:	bd80      	pop	{r7, pc}

08016968 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8016968:	b580      	push	{r7, lr}
 801696a:	b082      	sub	sp, #8
 801696c:	af00      	add	r7, sp, #0
 801696e:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8016970:	6878      	ldr	r0, [r7, #4]
 8016972:	f000 f9e5 	bl	8016d40 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	4618      	mov	r0, r3
 801697a:	f000 f9ed 	bl	8016d58 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	4618      	mov	r0, r3
 8016982:	3708      	adds	r7, #8
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}

08016988 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8016988:	b580      	push	{r7, lr}
 801698a:	b082      	sub	sp, #8
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
 8016990:	6878      	ldr	r0, [r7, #4]
 8016992:	f000 f9f5 	bl	8016d80 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 8016996:	687b      	ldr	r3, [r7, #4]
 8016998:	4618      	mov	r0, r3
 801699a:	3708      	adds	r7, #8
 801699c:	46bd      	mov	sp, r7
 801699e:	bd80      	pop	{r7, pc}

080169a0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80169a0:	b580      	push	{r7, lr}
 80169a2:	b082      	sub	sp, #8
 80169a4:	af00      	add	r7, sp, #0
 80169a6:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80169ac:	687b      	ldr	r3, [r7, #4]
 80169ae:	689a      	ldr	r2, [r3, #8]
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	681b      	ldr	r3, [r3, #0]
 80169b4:	1ad3      	subs	r3, r2, r3
 80169b6:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80169b8:	461a      	mov	r2, r3
 80169ba:	6878      	ldr	r0, [r7, #4]
 80169bc:	f000 f9eb 	bl	8016d96 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	4618      	mov	r0, r3
 80169c4:	f7ff fc4e 	bl	8016264 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	4618      	mov	r0, r3
 80169cc:	3708      	adds	r7, #8
 80169ce:	46bd      	mov	sp, r7
 80169d0:	bd80      	pop	{r7, pc}

080169d2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80169d2:	b580      	push	{r7, lr}
 80169d4:	b082      	sub	sp, #8
 80169d6:	af00      	add	r7, sp, #0
 80169d8:	6078      	str	r0, [r7, #4]
 80169da:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	685a      	ldr	r2, [r3, #4]
 80169e0:	687b      	ldr	r3, [r7, #4]
 80169e2:	689b      	ldr	r3, [r3, #8]
 80169e4:	429a      	cmp	r2, r3
 80169e6:	d00d      	beq.n	8016a04 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	683a      	ldr	r2, [r7, #0]
 80169f0:	4619      	mov	r1, r3
 80169f2:	f000 f9e3 	bl	8016dbc <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80169f6:	687b      	ldr	r3, [r7, #4]
 80169f8:	685b      	ldr	r3, [r3, #4]
 80169fa:	f103 0208 	add.w	r2, r3, #8
 80169fe:	687b      	ldr	r3, [r7, #4]
 8016a00:	605a      	str	r2, [r3, #4]
      }
 8016a02:	e008      	b.n	8016a16 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 8016a04:	6878      	ldr	r0, [r7, #4]
 8016a06:	f000 f9ec 	bl	8016de2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 8016a0a:	4603      	mov	r3, r0
 8016a0c:	683a      	ldr	r2, [r7, #0]
 8016a0e:	4619      	mov	r1, r3
 8016a10:	6878      	ldr	r0, [r7, #4]
 8016a12:	f000 fa0d 	bl	8016e30 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 8016a16:	bf00      	nop
 8016a18:	3708      	adds	r7, #8
 8016a1a:	46bd      	mov	sp, r7
 8016a1c:	bd80      	pop	{r7, pc}

08016a1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016a1e:	b480      	push	{r7}
 8016a20:	b083      	sub	sp, #12
 8016a22:	af00      	add	r7, sp, #0
 8016a24:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	685a      	ldr	r2, [r3, #4]
 8016a2a:	687b      	ldr	r3, [r7, #4]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	1ad3      	subs	r3, r2, r3
 8016a30:	10db      	asrs	r3, r3, #3
 8016a32:	4618      	mov	r0, r3
 8016a34:	370c      	adds	r7, #12
 8016a36:	46bd      	mov	sp, r7
 8016a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a3c:	4770      	bx	lr

08016a3e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8016a3e:	b480      	push	{r7}
 8016a40:	b083      	sub	sp, #12
 8016a42:	af00      	add	r7, sp, #0
 8016a44:	6078      	str	r0, [r7, #4]
 8016a46:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8016a48:	687b      	ldr	r3, [r7, #4]
 8016a4a:	681a      	ldr	r2, [r3, #0]
 8016a4c:	683b      	ldr	r3, [r7, #0]
 8016a4e:	00db      	lsls	r3, r3, #3
 8016a50:	4413      	add	r3, r2
      }
 8016a52:	4618      	mov	r0, r3
 8016a54:	370c      	adds	r7, #12
 8016a56:	46bd      	mov	sp, r7
 8016a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a5c:	4770      	bx	lr

08016a5e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8016a5e:	b580      	push	{r7, lr}
 8016a60:	b082      	sub	sp, #8
 8016a62:	af00      	add	r7, sp, #0
 8016a64:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8016a66:	687b      	ldr	r3, [r7, #4]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	4619      	mov	r1, r3
 8016a6c:	6878      	ldr	r0, [r7, #4]
 8016a6e:	f000 fa9b 	bl	8016fa8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 8016a72:	bf00      	nop
 8016a74:	3708      	adds	r7, #8
 8016a76:	46bd      	mov	sp, r7
 8016a78:	bd80      	pop	{r7, pc}

08016a7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016a7a:	b480      	push	{r7}
 8016a7c:	b083      	sub	sp, #12
 8016a7e:	af00      	add	r7, sp, #0
 8016a80:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016a82:	687b      	ldr	r3, [r7, #4]
 8016a84:	685a      	ldr	r2, [r3, #4]
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	1ad3      	subs	r3, r2, r3
 8016a8c:	109b      	asrs	r3, r3, #2
 8016a8e:	4618      	mov	r0, r3
 8016a90:	370c      	adds	r7, #12
 8016a92:	46bd      	mov	sp, r7
 8016a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a98:	4770      	bx	lr

08016a9a <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8016a9a:	b480      	push	{r7}
 8016a9c:	b083      	sub	sp, #12
 8016a9e:	af00      	add	r7, sp, #0
 8016aa0:	6078      	str	r0, [r7, #4]
 8016aa2:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8016aa4:	687b      	ldr	r3, [r7, #4]
 8016aa6:	681a      	ldr	r2, [r3, #0]
 8016aa8:	683b      	ldr	r3, [r7, #0]
 8016aaa:	009b      	lsls	r3, r3, #2
 8016aac:	4413      	add	r3, r2
      }
 8016aae:	4618      	mov	r0, r3
 8016ab0:	370c      	adds	r7, #12
 8016ab2:	46bd      	mov	sp, r7
 8016ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ab8:	4770      	bx	lr

08016aba <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8016aba:	b580      	push	{r7, lr}
 8016abc:	b082      	sub	sp, #8
 8016abe:	af00      	add	r7, sp, #0
 8016ac0:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8016ac2:	687b      	ldr	r3, [r7, #4]
 8016ac4:	681b      	ldr	r3, [r3, #0]
 8016ac6:	4619      	mov	r1, r3
 8016ac8:	6878      	ldr	r0, [r7, #4]
 8016aca:	f000 fa8e 	bl	8016fea <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 8016ace:	bf00      	nop
 8016ad0:	3708      	adds	r7, #8
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}

08016ad6 <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8016ad6:	b580      	push	{r7, lr}
 8016ad8:	b082      	sub	sp, #8
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	6078      	str	r0, [r7, #4]
 8016ade:	6878      	ldr	r0, [r7, #4]
 8016ae0:	f000 faa4 	bl	801702c <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	4618      	mov	r0, r3
 8016ae8:	3708      	adds	r7, #8
 8016aea:	46bd      	mov	sp, r7
 8016aec:	bd80      	pop	{r7, pc}

08016aee <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8016aee:	b480      	push	{r7}
 8016af0:	b083      	sub	sp, #12
 8016af2:	af00      	add	r7, sp, #0
 8016af4:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016af6:	687b      	ldr	r3, [r7, #4]
 8016af8:	2200      	movs	r2, #0
 8016afa:	601a      	str	r2, [r3, #0]
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	2200      	movs	r2, #0
 8016b00:	605a      	str	r2, [r3, #4]
 8016b02:	687b      	ldr	r3, [r7, #4]
 8016b04:	2200      	movs	r2, #0
 8016b06:	609a      	str	r2, [r3, #8]
	{ }
 8016b08:	687b      	ldr	r3, [r7, #4]
 8016b0a:	4618      	mov	r0, r3
 8016b0c:	370c      	adds	r7, #12
 8016b0e:	46bd      	mov	sp, r7
 8016b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b14:	4770      	bx	lr

08016b16 <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016b16:	b480      	push	{r7}
 8016b18:	b083      	sub	sp, #12
 8016b1a:	af00      	add	r7, sp, #0
 8016b1c:	6078      	str	r0, [r7, #4]
 8016b1e:	687b      	ldr	r3, [r7, #4]
 8016b20:	4618      	mov	r0, r3
 8016b22:	370c      	adds	r7, #12
 8016b24:	46bd      	mov	sp, r7
 8016b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b2a:	4770      	bx	lr

08016b2c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8016b2c:	b580      	push	{r7, lr}
 8016b2e:	b084      	sub	sp, #16
 8016b30:	af00      	add	r7, sp, #0
 8016b32:	60f8      	str	r0, [r7, #12]
 8016b34:	60b9      	str	r1, [r7, #8]
 8016b36:	607a      	str	r2, [r7, #4]
	if (__p)
 8016b38:	68bb      	ldr	r3, [r7, #8]
 8016b3a:	2b00      	cmp	r3, #0
 8016b3c:	d005      	beq.n	8016b4a <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8016b3e:	68fb      	ldr	r3, [r7, #12]
 8016b40:	687a      	ldr	r2, [r7, #4]
 8016b42:	68b9      	ldr	r1, [r7, #8]
 8016b44:	4618      	mov	r0, r3
 8016b46:	f000 fa7c 	bl	8017042 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8016b4a:	bf00      	nop
 8016b4c:	3710      	adds	r7, #16
 8016b4e:	46bd      	mov	sp, r7
 8016b50:	bd80      	pop	{r7, pc}

08016b52 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8016b52:	b580      	push	{r7, lr}
 8016b54:	b084      	sub	sp, #16
 8016b56:	af00      	add	r7, sp, #0
 8016b58:	60f8      	str	r0, [r7, #12]
 8016b5a:	60b9      	str	r1, [r7, #8]
 8016b5c:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8016b5e:	6878      	ldr	r0, [r7, #4]
 8016b60:	f000 fa7e 	bl	8017060 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016b64:	4603      	mov	r3, r0
 8016b66:	461a      	mov	r2, r3
 8016b68:	68b9      	ldr	r1, [r7, #8]
 8016b6a:	68f8      	ldr	r0, [r7, #12]
 8016b6c:	f000 fa83 	bl	8017076 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8016b70:	bf00      	nop
 8016b72:	3710      	adds	r7, #16
 8016b74:	46bd      	mov	sp, r7
 8016b76:	bd80      	pop	{r7, pc}

08016b78 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016b78:	b580      	push	{r7, lr}
 8016b7a:	b084      	sub	sp, #16
 8016b7c:	af00      	add	r7, sp, #0
 8016b7e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	1d1a      	adds	r2, r3, #4
 8016b84:	f107 030c 	add.w	r3, r7, #12
 8016b88:	4611      	mov	r1, r2
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f000 fa89 	bl	80170a2 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8016b90:	68fb      	ldr	r3, [r7, #12]
 8016b92:	4618      	mov	r0, r3
 8016b94:	3710      	adds	r7, #16
 8016b96:	46bd      	mov	sp, r7
 8016b98:	bd80      	pop	{r7, pc}

08016b9a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8016b9a:	b580      	push	{r7, lr}
 8016b9c:	b082      	sub	sp, #8
 8016b9e:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8016ba0:	4618      	mov	r0, r3
 8016ba2:	f000 f805 	bl	8016bb0 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8016ba6:	4603      	mov	r3, r0
      }
 8016ba8:	4618      	mov	r0, r3
 8016baa:	3708      	adds	r7, #8
 8016bac:	46bd      	mov	sp, r7
 8016bae:	bd80      	pop	{r7, pc}

08016bb0 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8016bb0:	b480      	push	{r7}
 8016bb2:	b083      	sub	sp, #12
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8016bb8:	2301      	movs	r3, #1
      }
 8016bba:	4618      	mov	r0, r3
 8016bbc:	370c      	adds	r7, #12
 8016bbe:	46bd      	mov	sp, r7
 8016bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bc4:	4770      	bx	lr
	...

08016bc8 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016bc8:	b5b0      	push	{r4, r5, r7, lr}
 8016bca:	b08c      	sub	sp, #48	; 0x30
 8016bcc:	af00      	add	r7, sp, #0
 8016bce:	60f8      	str	r0, [r7, #12]
 8016bd0:	60b9      	str	r1, [r7, #8]
 8016bd2:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8016bd4:	4a59      	ldr	r2, [pc, #356]	; (8016d3c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8016bd6:	2101      	movs	r1, #1
 8016bd8:	68f8      	ldr	r0, [r7, #12]
 8016bda:	f000 fa72 	bl	80170c2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 8016bde:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8016be0:	68fb      	ldr	r3, [r7, #12]
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8016be6:	68fb      	ldr	r3, [r7, #12]
 8016be8:	685b      	ldr	r3, [r3, #4]
 8016bea:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8016bec:	68f8      	ldr	r0, [r7, #12]
 8016bee:	f000 faaf 	bl	8017150 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 8016bf2:	4603      	mov	r3, r0
 8016bf4:	617b      	str	r3, [r7, #20]
 8016bf6:	f107 0214 	add.w	r2, r7, #20
 8016bfa:	f107 0308 	add.w	r3, r7, #8
 8016bfe:	4611      	mov	r1, r2
 8016c00:	4618      	mov	r0, r3
 8016c02:	f000 fab5 	bl	8017170 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8016c06:	4603      	mov	r3, r0
 8016c08:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8016c0a:	68fb      	ldr	r3, [r7, #12]
 8016c0c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016c0e:	4618      	mov	r0, r3
 8016c10:	f000 fac3 	bl	801719a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8016c14:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8016c16:	69bb      	ldr	r3, [r7, #24]
 8016c18:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8016c1a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8016c1c:	69fb      	ldr	r3, [r7, #28]
 8016c1e:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8016c20:	69ba      	ldr	r2, [r7, #24]
 8016c22:	18d5      	adds	r5, r2, r3
 8016c24:	6878      	ldr	r0, [r7, #4]
 8016c26:	f000 fa1b 	bl	8017060 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016c2a:	4603      	mov	r3, r0
 8016c2c:	461a      	mov	r2, r3
 8016c2e:	4629      	mov	r1, r5
 8016c30:	4620      	mov	r0, r4
 8016c32:	f7ff ff8e 	bl	8016b52 <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8016c36:	2300      	movs	r3, #0
 8016c38:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8016c3a:	f7ff ffae 	bl	8016b9a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8016c3e:	4603      	mov	r3, r0
 8016c40:	2b00      	cmp	r3, #0
 8016c42:	d027      	beq.n	8016c94 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016c44:	f107 0308 	add.w	r3, r7, #8
 8016c48:	4618      	mov	r0, r3
 8016c4a:	f000 face 	bl	80171ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016c4e:	4603      	mov	r3, r0
 8016c50:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8016c52:	68fb      	ldr	r3, [r7, #12]
 8016c54:	4618      	mov	r0, r3
 8016c56:	f000 fad3 	bl	8017200 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016c5a:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016c5c:	69ba      	ldr	r2, [r7, #24]
 8016c5e:	4621      	mov	r1, r4
 8016c60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c62:	f000 faae 	bl	80171c2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8016c66:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016c68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c6a:	3304      	adds	r3, #4
 8016c6c:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016c6e:	f107 0308 	add.w	r3, r7, #8
 8016c72:	4618      	mov	r0, r3
 8016c74:	f000 fab9 	bl	80171ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016c78:	4603      	mov	r3, r0
 8016c7a:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8016c7c:	68fb      	ldr	r3, [r7, #12]
 8016c7e:	4618      	mov	r0, r3
 8016c80:	f000 fabe 	bl	8017200 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016c84:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016c86:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c88:	6a39      	ldr	r1, [r7, #32]
 8016c8a:	4620      	mov	r0, r4
 8016c8c:	f000 fa99 	bl	80171c2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8016c90:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016c92:	e026      	b.n	8016ce2 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8016c94:	f107 0308 	add.w	r3, r7, #8
 8016c98:	4618      	mov	r0, r3
 8016c9a:	f000 faa6 	bl	80171ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016c9e:	4603      	mov	r3, r0
 8016ca0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8016ca2:	68fb      	ldr	r3, [r7, #12]
 8016ca4:	4618      	mov	r0, r3
 8016ca6:	f000 faab 	bl	8017200 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016caa:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8016cac:	69ba      	ldr	r2, [r7, #24]
 8016cae:	4621      	mov	r1, r4
 8016cb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016cb2:	f000 fab0 	bl	8017216 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8016cb6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016cb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016cba:	3304      	adds	r3, #4
 8016cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8016cbe:	f107 0308 	add.w	r3, r7, #8
 8016cc2:	4618      	mov	r0, r3
 8016cc4:	f000 fa91 	bl	80171ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016cc8:	4603      	mov	r3, r0
 8016cca:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8016ccc:	68fb      	ldr	r3, [r7, #12]
 8016cce:	4618      	mov	r0, r3
 8016cd0:	f000 fa96 	bl	8017200 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016cd4:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8016cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cd8:	6a39      	ldr	r1, [r7, #32]
 8016cda:	4620      	mov	r0, r4
 8016cdc:	f000 fa9b 	bl	8017216 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8016ce0:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8016ce2:	f7ff ff5a 	bl	8016b9a <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8016ce6:	4603      	mov	r3, r0
 8016ce8:	f083 0301 	eor.w	r3, r3, #1
 8016cec:	b2db      	uxtb	r3, r3
 8016cee:	2b00      	cmp	r3, #0
 8016cf0:	d009      	beq.n	8016d06 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8016cf2:	68fb      	ldr	r3, [r7, #12]
 8016cf4:	4618      	mov	r0, r3
 8016cf6:	f000 fa83 	bl	8017200 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016cfa:	4603      	mov	r3, r0
 8016cfc:	461a      	mov	r2, r3
 8016cfe:	6a39      	ldr	r1, [r7, #32]
 8016d00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016d02:	f000 faa1 	bl	8017248 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 8016d06:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	689a      	ldr	r2, [r3, #8]
 8016d0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016d0e:	1ad3      	subs	r3, r2, r3
 8016d10:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8016d12:	461a      	mov	r2, r3
 8016d14:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016d16:	f7ff ff09 	bl	8016b2c <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8016d1a:	68fb      	ldr	r3, [r7, #12]
 8016d1c:	69ba      	ldr	r2, [r7, #24]
 8016d1e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8016d20:	68fb      	ldr	r3, [r7, #12]
 8016d22:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d24:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d28:	009b      	lsls	r3, r3, #2
 8016d2a:	69ba      	ldr	r2, [r7, #24]
 8016d2c:	441a      	add	r2, r3
 8016d2e:	68fb      	ldr	r3, [r7, #12]
 8016d30:	609a      	str	r2, [r3, #8]
    }
 8016d32:	bf00      	nop
 8016d34:	3730      	adds	r7, #48	; 0x30
 8016d36:	46bd      	mov	sp, r7
 8016d38:	bdb0      	pop	{r4, r5, r7, pc}
 8016d3a:	bf00      	nop
 8016d3c:	0801efb8 	.word	0x0801efb8

08016d40 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8016d40:	b580      	push	{r7, lr}
 8016d42:	b082      	sub	sp, #8
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
 8016d48:	6878      	ldr	r0, [r7, #4]
 8016d4a:	f000 fa8b 	bl	8017264 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	4618      	mov	r0, r3
 8016d52:	3708      	adds	r7, #8
 8016d54:	46bd      	mov	sp, r7
 8016d56:	bd80      	pop	{r7, pc}

08016d58 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8016d58:	b480      	push	{r7}
 8016d5a:	b083      	sub	sp, #12
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	2200      	movs	r2, #0
 8016d64:	601a      	str	r2, [r3, #0]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	2200      	movs	r2, #0
 8016d6a:	605a      	str	r2, [r3, #4]
 8016d6c:	687b      	ldr	r3, [r7, #4]
 8016d6e:	2200      	movs	r2, #0
 8016d70:	609a      	str	r2, [r3, #8]
	{ }
 8016d72:	687b      	ldr	r3, [r7, #4]
 8016d74:	4618      	mov	r0, r3
 8016d76:	370c      	adds	r7, #12
 8016d78:	46bd      	mov	sp, r7
 8016d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7e:	4770      	bx	lr

08016d80 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8016d80:	b480      	push	{r7}
 8016d82:	b083      	sub	sp, #12
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	6078      	str	r0, [r7, #4]
 8016d88:	687b      	ldr	r3, [r7, #4]
 8016d8a:	4618      	mov	r0, r3
 8016d8c:	370c      	adds	r7, #12
 8016d8e:	46bd      	mov	sp, r7
 8016d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d94:	4770      	bx	lr

08016d96 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8016d96:	b580      	push	{r7, lr}
 8016d98:	b084      	sub	sp, #16
 8016d9a:	af00      	add	r7, sp, #0
 8016d9c:	60f8      	str	r0, [r7, #12]
 8016d9e:	60b9      	str	r1, [r7, #8]
 8016da0:	607a      	str	r2, [r7, #4]
	if (__p)
 8016da2:	68bb      	ldr	r3, [r7, #8]
 8016da4:	2b00      	cmp	r3, #0
 8016da6:	d005      	beq.n	8016db4 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8016da8:	68fb      	ldr	r3, [r7, #12]
 8016daa:	687a      	ldr	r2, [r7, #4]
 8016dac:	68b9      	ldr	r1, [r7, #8]
 8016dae:	4618      	mov	r0, r3
 8016db0:	f000 fa63 	bl	801727a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8016db4:	bf00      	nop
 8016db6:	3710      	adds	r7, #16
 8016db8:	46bd      	mov	sp, r7
 8016dba:	bd80      	pop	{r7, pc}

08016dbc <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8016dbc:	b580      	push	{r7, lr}
 8016dbe:	b084      	sub	sp, #16
 8016dc0:	af00      	add	r7, sp, #0
 8016dc2:	60f8      	str	r0, [r7, #12]
 8016dc4:	60b9      	str	r1, [r7, #8]
 8016dc6:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8016dc8:	6878      	ldr	r0, [r7, #4]
 8016dca:	f000 fa65 	bl	8017298 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8016dce:	4603      	mov	r3, r0
 8016dd0:	461a      	mov	r2, r3
 8016dd2:	68b9      	ldr	r1, [r7, #8]
 8016dd4:	68f8      	ldr	r0, [r7, #12]
 8016dd6:	f000 fa6a 	bl	80172ae <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8016dda:	bf00      	nop
 8016ddc:	3710      	adds	r7, #16
 8016dde:	46bd      	mov	sp, r7
 8016de0:	bd80      	pop	{r7, pc}

08016de2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016de2:	b580      	push	{r7, lr}
 8016de4:	b084      	sub	sp, #16
 8016de6:	af00      	add	r7, sp, #0
 8016de8:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	1d1a      	adds	r2, r3, #4
 8016dee:	f107 030c 	add.w	r3, r7, #12
 8016df2:	4611      	mov	r1, r2
 8016df4:	4618      	mov	r0, r3
 8016df6:	f000 fa73 	bl	80172e0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8016dfa:	68fb      	ldr	r3, [r7, #12]
 8016dfc:	4618      	mov	r0, r3
 8016dfe:	3710      	adds	r7, #16
 8016e00:	46bd      	mov	sp, r7
 8016e02:	bd80      	pop	{r7, pc}

08016e04 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8016e04:	b580      	push	{r7, lr}
 8016e06:	b082      	sub	sp, #8
 8016e08:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8016e0a:	4618      	mov	r0, r3
 8016e0c:	f000 f805 	bl	8016e1a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8016e10:	4603      	mov	r3, r0
      }
 8016e12:	4618      	mov	r0, r3
 8016e14:	3708      	adds	r7, #8
 8016e16:	46bd      	mov	sp, r7
 8016e18:	bd80      	pop	{r7, pc}

08016e1a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8016e1a:	b480      	push	{r7}
 8016e1c:	b083      	sub	sp, #12
 8016e1e:	af00      	add	r7, sp, #0
 8016e20:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8016e22:	2301      	movs	r3, #1
      }
 8016e24:	4618      	mov	r0, r3
 8016e26:	370c      	adds	r7, #12
 8016e28:	46bd      	mov	sp, r7
 8016e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e2e:	4770      	bx	lr

08016e30 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016e30:	b5b0      	push	{r4, r5, r7, lr}
 8016e32:	b08c      	sub	sp, #48	; 0x30
 8016e34:	af00      	add	r7, sp, #0
 8016e36:	60f8      	str	r0, [r7, #12]
 8016e38:	60b9      	str	r1, [r7, #8]
 8016e3a:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8016e3c:	4a59      	ldr	r2, [pc, #356]	; (8016fa4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8016e3e:	2101      	movs	r1, #1
 8016e40:	68f8      	ldr	r0, [r7, #12]
 8016e42:	f000 fa5d 	bl	8017300 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 8016e46:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8016e48:	68fb      	ldr	r3, [r7, #12]
 8016e4a:	681b      	ldr	r3, [r3, #0]
 8016e4c:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8016e4e:	68fb      	ldr	r3, [r7, #12]
 8016e50:	685b      	ldr	r3, [r3, #4]
 8016e52:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8016e54:	68f8      	ldr	r0, [r7, #12]
 8016e56:	f000 fa9a 	bl	801738e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 8016e5a:	4603      	mov	r3, r0
 8016e5c:	617b      	str	r3, [r7, #20]
 8016e5e:	f107 0214 	add.w	r2, r7, #20
 8016e62:	f107 0308 	add.w	r3, r7, #8
 8016e66:	4611      	mov	r1, r2
 8016e68:	4618      	mov	r0, r3
 8016e6a:	f000 faa0 	bl	80173ae <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8016e6e:	4603      	mov	r3, r0
 8016e70:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8016e72:	68fb      	ldr	r3, [r7, #12]
 8016e74:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016e76:	4618      	mov	r0, r3
 8016e78:	f000 faae 	bl	80173d8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 8016e7c:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8016e7e:	69bb      	ldr	r3, [r7, #24]
 8016e80:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8016e82:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8016e84:	69fb      	ldr	r3, [r7, #28]
 8016e86:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8016e88:	69ba      	ldr	r2, [r7, #24]
 8016e8a:	18d5      	adds	r5, r2, r3
 8016e8c:	6878      	ldr	r0, [r7, #4]
 8016e8e:	f000 fa03 	bl	8017298 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8016e92:	4603      	mov	r3, r0
 8016e94:	461a      	mov	r2, r3
 8016e96:	4629      	mov	r1, r5
 8016e98:	4620      	mov	r0, r4
 8016e9a:	f7ff ff8f 	bl	8016dbc <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8016ea2:	f7ff ffaf 	bl	8016e04 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8016ea6:	4603      	mov	r3, r0
 8016ea8:	2b00      	cmp	r3, #0
 8016eaa:	d027      	beq.n	8016efc <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016eac:	f107 0308 	add.w	r3, r7, #8
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	f000 fab9 	bl	8017428 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8016eba:	68fb      	ldr	r3, [r7, #12]
 8016ebc:	4618      	mov	r0, r3
 8016ebe:	f000 fabe 	bl	801743e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016ec2:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016ec4:	69ba      	ldr	r2, [r7, #24]
 8016ec6:	4621      	mov	r1, r4
 8016ec8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016eca:	f000 fa99 	bl	8017400 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8016ece:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ed2:	3308      	adds	r3, #8
 8016ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016ed6:	f107 0308 	add.w	r3, r7, #8
 8016eda:	4618      	mov	r0, r3
 8016edc:	f000 faa4 	bl	8017428 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016ee0:	4603      	mov	r3, r0
 8016ee2:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8016ee4:	68fb      	ldr	r3, [r7, #12]
 8016ee6:	4618      	mov	r0, r3
 8016ee8:	f000 faa9 	bl	801743e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016eec:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016eee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ef0:	6a39      	ldr	r1, [r7, #32]
 8016ef2:	4620      	mov	r0, r4
 8016ef4:	f000 fa84 	bl	8017400 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8016ef8:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016efa:	e026      	b.n	8016f4a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8016efc:	f107 0308 	add.w	r3, r7, #8
 8016f00:	4618      	mov	r0, r3
 8016f02:	f000 fa91 	bl	8017428 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016f06:	4603      	mov	r3, r0
 8016f08:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8016f0a:	68fb      	ldr	r3, [r7, #12]
 8016f0c:	4618      	mov	r0, r3
 8016f0e:	f000 fa96 	bl	801743e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016f12:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8016f14:	69ba      	ldr	r2, [r7, #24]
 8016f16:	4621      	mov	r1, r4
 8016f18:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f1a:	f000 fa9b 	bl	8017454 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8016f1e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016f20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f22:	3308      	adds	r3, #8
 8016f24:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8016f26:	f107 0308 	add.w	r3, r7, #8
 8016f2a:	4618      	mov	r0, r3
 8016f2c:	f000 fa7c 	bl	8017428 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016f30:	4603      	mov	r3, r0
 8016f32:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8016f34:	68fb      	ldr	r3, [r7, #12]
 8016f36:	4618      	mov	r0, r3
 8016f38:	f000 fa81 	bl	801743e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016f3c:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8016f3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f40:	6a39      	ldr	r1, [r7, #32]
 8016f42:	4620      	mov	r0, r4
 8016f44:	f000 fa86 	bl	8017454 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8016f48:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8016f4a:	f7ff ff5b 	bl	8016e04 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8016f4e:	4603      	mov	r3, r0
 8016f50:	f083 0301 	eor.w	r3, r3, #1
 8016f54:	b2db      	uxtb	r3, r3
 8016f56:	2b00      	cmp	r3, #0
 8016f58:	d009      	beq.n	8016f6e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8016f5a:	68fb      	ldr	r3, [r7, #12]
 8016f5c:	4618      	mov	r0, r3
 8016f5e:	f000 fa6e 	bl	801743e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016f62:	4603      	mov	r3, r0
 8016f64:	461a      	mov	r2, r3
 8016f66:	6a39      	ldr	r1, [r7, #32]
 8016f68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f6a:	f000 fa8c 	bl	8017486 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8016f6e:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	689a      	ldr	r2, [r3, #8]
 8016f74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f76:	1ad3      	subs	r3, r2, r3
 8016f78:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8016f7a:	461a      	mov	r2, r3
 8016f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f7e:	f7ff ff0a 	bl	8016d96 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8016f82:	68fb      	ldr	r3, [r7, #12]
 8016f84:	69ba      	ldr	r2, [r7, #24]
 8016f86:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8016f88:	68fb      	ldr	r3, [r7, #12]
 8016f8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f8c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016f8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f90:	00db      	lsls	r3, r3, #3
 8016f92:	69ba      	ldr	r2, [r7, #24]
 8016f94:	441a      	add	r2, r3
 8016f96:	68fb      	ldr	r3, [r7, #12]
 8016f98:	609a      	str	r2, [r3, #8]
    }
 8016f9a:	bf00      	nop
 8016f9c:	3730      	adds	r7, #48	; 0x30
 8016f9e:	46bd      	mov	sp, r7
 8016fa0:	bdb0      	pop	{r4, r5, r7, pc}
 8016fa2:	bf00      	nop
 8016fa4:	0801efb8 	.word	0x0801efb8

08016fa8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8016fa8:	b590      	push	{r4, r7, lr}
 8016faa:	b085      	sub	sp, #20
 8016fac:	af00      	add	r7, sp, #0
 8016fae:	6078      	str	r0, [r7, #4]
 8016fb0:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	685a      	ldr	r2, [r3, #4]
 8016fb6:	683b      	ldr	r3, [r7, #0]
 8016fb8:	1ad3      	subs	r3, r2, r3
 8016fba:	10db      	asrs	r3, r3, #3
 8016fbc:	60fb      	str	r3, [r7, #12]
 8016fbe:	68fb      	ldr	r3, [r7, #12]
 8016fc0:	2b00      	cmp	r3, #0
 8016fc2:	d00e      	beq.n	8016fe2 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8016fc8:	687b      	ldr	r3, [r7, #4]
 8016fca:	4618      	mov	r0, r3
 8016fcc:	f000 fa37 	bl	801743e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016fd0:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8016fd2:	461a      	mov	r2, r3
 8016fd4:	4621      	mov	r1, r4
 8016fd6:	6838      	ldr	r0, [r7, #0]
 8016fd8:	f000 fa55 	bl	8017486 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	683a      	ldr	r2, [r7, #0]
 8016fe0:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8016fe2:	bf00      	nop
 8016fe4:	3714      	adds	r7, #20
 8016fe6:	46bd      	mov	sp, r7
 8016fe8:	bd90      	pop	{r4, r7, pc}

08016fea <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8016fea:	b590      	push	{r4, r7, lr}
 8016fec:	b085      	sub	sp, #20
 8016fee:	af00      	add	r7, sp, #0
 8016ff0:	6078      	str	r0, [r7, #4]
 8016ff2:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	685a      	ldr	r2, [r3, #4]
 8016ff8:	683b      	ldr	r3, [r7, #0]
 8016ffa:	1ad3      	subs	r3, r2, r3
 8016ffc:	109b      	asrs	r3, r3, #2
 8016ffe:	60fb      	str	r3, [r7, #12]
 8017000:	68fb      	ldr	r3, [r7, #12]
 8017002:	2b00      	cmp	r3, #0
 8017004:	d00e      	beq.n	8017024 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	4618      	mov	r0, r3
 801700e:	f000 f8f7 	bl	8017200 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017012:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8017014:	461a      	mov	r2, r3
 8017016:	4621      	mov	r1, r4
 8017018:	6838      	ldr	r0, [r7, #0]
 801701a:	f000 f915 	bl	8017248 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	683a      	ldr	r2, [r7, #0]
 8017022:	605a      	str	r2, [r3, #4]
      }
 8017024:	bf00      	nop
 8017026:	3714      	adds	r7, #20
 8017028:	46bd      	mov	sp, r7
 801702a:	bd90      	pop	{r4, r7, pc}

0801702c <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801702c:	b480      	push	{r7}
 801702e:	b083      	sub	sp, #12
 8017030:	af00      	add	r7, sp, #0
 8017032:	6078      	str	r0, [r7, #4]
 8017034:	687b      	ldr	r3, [r7, #4]
 8017036:	4618      	mov	r0, r3
 8017038:	370c      	adds	r7, #12
 801703a:	46bd      	mov	sp, r7
 801703c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017040:	4770      	bx	lr

08017042 <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017042:	b580      	push	{r7, lr}
 8017044:	b084      	sub	sp, #16
 8017046:	af00      	add	r7, sp, #0
 8017048:	60f8      	str	r0, [r7, #12]
 801704a:	60b9      	str	r1, [r7, #8]
 801704c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801704e:	687a      	ldr	r2, [r7, #4]
 8017050:	68b9      	ldr	r1, [r7, #8]
 8017052:	68f8      	ldr	r0, [r7, #12]
 8017054:	f000 fa25 	bl	80174a2 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 8017058:	bf00      	nop
 801705a:	3710      	adds	r7, #16
 801705c:	46bd      	mov	sp, r7
 801705e:	bd80      	pop	{r7, pc}

08017060 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017060:	b480      	push	{r7}
 8017062:	b083      	sub	sp, #12
 8017064:	af00      	add	r7, sp, #0
 8017066:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	4618      	mov	r0, r3
 801706c:	370c      	adds	r7, #12
 801706e:	46bd      	mov	sp, r7
 8017070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017074:	4770      	bx	lr

08017076 <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8017076:	b590      	push	{r4, r7, lr}
 8017078:	b085      	sub	sp, #20
 801707a:	af00      	add	r7, sp, #0
 801707c:	60f8      	str	r0, [r7, #12]
 801707e:	60b9      	str	r1, [r7, #8]
 8017080:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8017082:	6878      	ldr	r0, [r7, #4]
 8017084:	f7ff ffec 	bl	8017060 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8017088:	4603      	mov	r3, r0
 801708a:	681c      	ldr	r4, [r3, #0]
 801708c:	68bb      	ldr	r3, [r7, #8]
 801708e:	4619      	mov	r1, r3
 8017090:	2004      	movs	r0, #4
 8017092:	f7e9 ffcb 	bl	800102c <_ZnwjPv>
 8017096:	4603      	mov	r3, r0
 8017098:	601c      	str	r4, [r3, #0]
 801709a:	bf00      	nop
 801709c:	3714      	adds	r7, #20
 801709e:	46bd      	mov	sp, r7
 80170a0:	bd90      	pop	{r4, r7, pc}

080170a2 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80170a2:	b480      	push	{r7}
 80170a4:	b083      	sub	sp, #12
 80170a6:	af00      	add	r7, sp, #0
 80170a8:	6078      	str	r0, [r7, #4]
 80170aa:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80170ac:	683b      	ldr	r3, [r7, #0]
 80170ae:	681a      	ldr	r2, [r3, #0]
 80170b0:	687b      	ldr	r3, [r7, #4]
 80170b2:	601a      	str	r2, [r3, #0]
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	4618      	mov	r0, r3
 80170b8:	370c      	adds	r7, #12
 80170ba:	46bd      	mov	sp, r7
 80170bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170c0:	4770      	bx	lr

080170c2 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80170c2:	b590      	push	{r4, r7, lr}
 80170c4:	b087      	sub	sp, #28
 80170c6:	af00      	add	r7, sp, #0
 80170c8:	60f8      	str	r0, [r7, #12]
 80170ca:	60b9      	str	r1, [r7, #8]
 80170cc:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80170ce:	68f8      	ldr	r0, [r7, #12]
 80170d0:	f000 f9f4 	bl	80174bc <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 80170d4:	4604      	mov	r4, r0
 80170d6:	68f8      	ldr	r0, [r7, #12]
 80170d8:	f7ff fccf 	bl	8016a7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80170dc:	4603      	mov	r3, r0
 80170de:	1ae2      	subs	r2, r4, r3
 80170e0:	68bb      	ldr	r3, [r7, #8]
 80170e2:	429a      	cmp	r2, r3
 80170e4:	bf34      	ite	cc
 80170e6:	2301      	movcc	r3, #1
 80170e8:	2300      	movcs	r3, #0
 80170ea:	b2db      	uxtb	r3, r3
 80170ec:	2b00      	cmp	r3, #0
 80170ee:	d002      	beq.n	80170f6 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80170f0:	6878      	ldr	r0, [r7, #4]
 80170f2:	f000 fecb 	bl	8017e8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80170f6:	68f8      	ldr	r0, [r7, #12]
 80170f8:	f7ff fcbf 	bl	8016a7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80170fc:	4604      	mov	r4, r0
 80170fe:	68f8      	ldr	r0, [r7, #12]
 8017100:	f7ff fcbb 	bl	8016a7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017104:	4603      	mov	r3, r0
 8017106:	613b      	str	r3, [r7, #16]
 8017108:	f107 0208 	add.w	r2, r7, #8
 801710c:	f107 0310 	add.w	r3, r7, #16
 8017110:	4611      	mov	r1, r2
 8017112:	4618      	mov	r0, r3
 8017114:	f7ee ff02 	bl	8005f1c <_ZSt3maxIjERKT_S2_S2_>
 8017118:	4603      	mov	r3, r0
 801711a:	681b      	ldr	r3, [r3, #0]
 801711c:	4423      	add	r3, r4
 801711e:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017120:	68f8      	ldr	r0, [r7, #12]
 8017122:	f7ff fcaa 	bl	8016a7a <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8017126:	4602      	mov	r2, r0
 8017128:	697b      	ldr	r3, [r7, #20]
 801712a:	4293      	cmp	r3, r2
 801712c:	d306      	bcc.n	801713c <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 801712e:	68f8      	ldr	r0, [r7, #12]
 8017130:	f000 f9c4 	bl	80174bc <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017134:	4602      	mov	r2, r0
 8017136:	697b      	ldr	r3, [r7, #20]
 8017138:	4293      	cmp	r3, r2
 801713a:	d904      	bls.n	8017146 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 801713c:	68f8      	ldr	r0, [r7, #12]
 801713e:	f000 f9bd 	bl	80174bc <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 8017142:	4603      	mov	r3, r0
 8017144:	e000      	b.n	8017148 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 8017146:	697b      	ldr	r3, [r7, #20]
      }
 8017148:	4618      	mov	r0, r3
 801714a:	371c      	adds	r7, #28
 801714c:	46bd      	mov	sp, r7
 801714e:	bd90      	pop	{r4, r7, pc}

08017150 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017150:	b580      	push	{r7, lr}
 8017152:	b084      	sub	sp, #16
 8017154:	af00      	add	r7, sp, #0
 8017156:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8017158:	687a      	ldr	r2, [r7, #4]
 801715a:	f107 030c 	add.w	r3, r7, #12
 801715e:	4611      	mov	r1, r2
 8017160:	4618      	mov	r0, r3
 8017162:	f7ff ff9e 	bl	80170a2 <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8017166:	68fb      	ldr	r3, [r7, #12]
 8017168:	4618      	mov	r0, r3
 801716a:	3710      	adds	r7, #16
 801716c:	46bd      	mov	sp, r7
 801716e:	bd80      	pop	{r7, pc}

08017170 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8017170:	b590      	push	{r4, r7, lr}
 8017172:	b083      	sub	sp, #12
 8017174:	af00      	add	r7, sp, #0
 8017176:	6078      	str	r0, [r7, #4]
 8017178:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 801717a:	6878      	ldr	r0, [r7, #4]
 801717c:	f000 f835 	bl	80171ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017180:	4603      	mov	r3, r0
 8017182:	681c      	ldr	r4, [r3, #0]
 8017184:	6838      	ldr	r0, [r7, #0]
 8017186:	f000 f830 	bl	80171ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 801718a:	4603      	mov	r3, r0
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	1ae3      	subs	r3, r4, r3
 8017190:	109b      	asrs	r3, r3, #2
 8017192:	4618      	mov	r0, r3
 8017194:	370c      	adds	r7, #12
 8017196:	46bd      	mov	sp, r7
 8017198:	bd90      	pop	{r4, r7, pc}

0801719a <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 801719a:	b580      	push	{r7, lr}
 801719c:	b082      	sub	sp, #8
 801719e:	af00      	add	r7, sp, #0
 80171a0:	6078      	str	r0, [r7, #4]
 80171a2:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80171a4:	683b      	ldr	r3, [r7, #0]
 80171a6:	2b00      	cmp	r3, #0
 80171a8:	d006      	beq.n	80171b8 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 80171aa:	687b      	ldr	r3, [r7, #4]
 80171ac:	6839      	ldr	r1, [r7, #0]
 80171ae:	4618      	mov	r0, r3
 80171b0:	f000 f995 	bl	80174de <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 80171b4:	4603      	mov	r3, r0
 80171b6:	e000      	b.n	80171ba <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 80171b8:	2300      	movs	r3, #0
      }
 80171ba:	4618      	mov	r0, r3
 80171bc:	3708      	adds	r7, #8
 80171be:	46bd      	mov	sp, r7
 80171c0:	bd80      	pop	{r7, pc}

080171c2 <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80171c2:	b590      	push	{r4, r7, lr}
 80171c4:	b089      	sub	sp, #36	; 0x24
 80171c6:	af02      	add	r7, sp, #8
 80171c8:	60f8      	str	r0, [r7, #12]
 80171ca:	60b9      	str	r1, [r7, #8]
 80171cc:	607a      	str	r2, [r7, #4]
 80171ce:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80171d0:	f88d 4000 	strb.w	r4, [sp]
 80171d4:	683b      	ldr	r3, [r7, #0]
 80171d6:	687a      	ldr	r2, [r7, #4]
 80171d8:	68b9      	ldr	r1, [r7, #8]
 80171da:	68f8      	ldr	r0, [r7, #12]
 80171dc:	f000 f98e 	bl	80174fc <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80171e0:	4603      	mov	r3, r0
      }
 80171e2:	4618      	mov	r0, r3
 80171e4:	371c      	adds	r7, #28
 80171e6:	46bd      	mov	sp, r7
 80171e8:	bd90      	pop	{r4, r7, pc}

080171ea <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80171ea:	b480      	push	{r7}
 80171ec:	b083      	sub	sp, #12
 80171ee:	af00      	add	r7, sp, #0
 80171f0:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80171f2:	687b      	ldr	r3, [r7, #4]
 80171f4:	4618      	mov	r0, r3
 80171f6:	370c      	adds	r7, #12
 80171f8:	46bd      	mov	sp, r7
 80171fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fe:	4770      	bx	lr

08017200 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8017200:	b480      	push	{r7}
 8017202:	b083      	sub	sp, #12
 8017204:	af00      	add	r7, sp, #0
 8017206:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017208:	687b      	ldr	r3, [r7, #4]
 801720a:	4618      	mov	r0, r3
 801720c:	370c      	adds	r7, #12
 801720e:	46bd      	mov	sp, r7
 8017210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017214:	4770      	bx	lr

08017216 <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8017216:	b590      	push	{r4, r7, lr}
 8017218:	b085      	sub	sp, #20
 801721a:	af00      	add	r7, sp, #0
 801721c:	60f8      	str	r0, [r7, #12]
 801721e:	60b9      	str	r1, [r7, #8]
 8017220:	607a      	str	r2, [r7, #4]
 8017222:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8017224:	68f8      	ldr	r0, [r7, #12]
 8017226:	f000 f97b 	bl	8017520 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 801722a:	4604      	mov	r4, r0
 801722c:	68b8      	ldr	r0, [r7, #8]
 801722e:	f000 f977 	bl	8017520 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8017232:	4601      	mov	r1, r0
 8017234:	683b      	ldr	r3, [r7, #0]
 8017236:	687a      	ldr	r2, [r7, #4]
 8017238:	4620      	mov	r0, r4
 801723a:	f000 f980 	bl	801753e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 801723e:	4603      	mov	r3, r0
    }
 8017240:	4618      	mov	r0, r3
 8017242:	3714      	adds	r7, #20
 8017244:	46bd      	mov	sp, r7
 8017246:	bd90      	pop	{r4, r7, pc}

08017248 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8017248:	b580      	push	{r7, lr}
 801724a:	b084      	sub	sp, #16
 801724c:	af00      	add	r7, sp, #0
 801724e:	60f8      	str	r0, [r7, #12]
 8017250:	60b9      	str	r1, [r7, #8]
 8017252:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8017254:	68b9      	ldr	r1, [r7, #8]
 8017256:	68f8      	ldr	r0, [r7, #12]
 8017258:	f000 f982 	bl	8017560 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 801725c:	bf00      	nop
 801725e:	3710      	adds	r7, #16
 8017260:	46bd      	mov	sp, r7
 8017262:	bd80      	pop	{r7, pc}

08017264 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017264:	b480      	push	{r7}
 8017266:	b083      	sub	sp, #12
 8017268:	af00      	add	r7, sp, #0
 801726a:	6078      	str	r0, [r7, #4]
 801726c:	687b      	ldr	r3, [r7, #4]
 801726e:	4618      	mov	r0, r3
 8017270:	370c      	adds	r7, #12
 8017272:	46bd      	mov	sp, r7
 8017274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017278:	4770      	bx	lr

0801727a <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801727a:	b580      	push	{r7, lr}
 801727c:	b084      	sub	sp, #16
 801727e:	af00      	add	r7, sp, #0
 8017280:	60f8      	str	r0, [r7, #12]
 8017282:	60b9      	str	r1, [r7, #8]
 8017284:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017286:	687a      	ldr	r2, [r7, #4]
 8017288:	68b9      	ldr	r1, [r7, #8]
 801728a:	68f8      	ldr	r0, [r7, #12]
 801728c:	f000 f975 	bl	801757a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 8017290:	bf00      	nop
 8017292:	3710      	adds	r7, #16
 8017294:	46bd      	mov	sp, r7
 8017296:	bd80      	pop	{r7, pc}

08017298 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017298:	b480      	push	{r7}
 801729a:	b083      	sub	sp, #12
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80172a0:	687b      	ldr	r3, [r7, #4]
 80172a2:	4618      	mov	r0, r3
 80172a4:	370c      	adds	r7, #12
 80172a6:	46bd      	mov	sp, r7
 80172a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172ac:	4770      	bx	lr

080172ae <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 80172ae:	b590      	push	{r4, r7, lr}
 80172b0:	b085      	sub	sp, #20
 80172b2:	af00      	add	r7, sp, #0
 80172b4:	60f8      	str	r0, [r7, #12]
 80172b6:	60b9      	str	r1, [r7, #8]
 80172b8:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80172ba:	6878      	ldr	r0, [r7, #4]
 80172bc:	f7ff ffec 	bl	8017298 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 80172c0:	4604      	mov	r4, r0
 80172c2:	68bb      	ldr	r3, [r7, #8]
 80172c4:	4619      	mov	r1, r3
 80172c6:	2008      	movs	r0, #8
 80172c8:	f7e9 feb0 	bl	800102c <_ZnwjPv>
 80172cc:	4603      	mov	r3, r0
 80172ce:	4622      	mov	r2, r4
 80172d0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80172d8:	bf00      	nop
 80172da:	3714      	adds	r7, #20
 80172dc:	46bd      	mov	sp, r7
 80172de:	bd90      	pop	{r4, r7, pc}

080172e0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80172e0:	b480      	push	{r7}
 80172e2:	b083      	sub	sp, #12
 80172e4:	af00      	add	r7, sp, #0
 80172e6:	6078      	str	r0, [r7, #4]
 80172e8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80172ea:	683b      	ldr	r3, [r7, #0]
 80172ec:	681a      	ldr	r2, [r3, #0]
 80172ee:	687b      	ldr	r3, [r7, #4]
 80172f0:	601a      	str	r2, [r3, #0]
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	4618      	mov	r0, r3
 80172f6:	370c      	adds	r7, #12
 80172f8:	46bd      	mov	sp, r7
 80172fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172fe:	4770      	bx	lr

08017300 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 8017300:	b590      	push	{r4, r7, lr}
 8017302:	b087      	sub	sp, #28
 8017304:	af00      	add	r7, sp, #0
 8017306:	60f8      	str	r0, [r7, #12]
 8017308:	60b9      	str	r1, [r7, #8]
 801730a:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 801730c:	68f8      	ldr	r0, [r7, #12]
 801730e:	f000 f941 	bl	8017594 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8017312:	4604      	mov	r4, r0
 8017314:	68f8      	ldr	r0, [r7, #12]
 8017316:	f7ff fb82 	bl	8016a1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801731a:	4603      	mov	r3, r0
 801731c:	1ae2      	subs	r2, r4, r3
 801731e:	68bb      	ldr	r3, [r7, #8]
 8017320:	429a      	cmp	r2, r3
 8017322:	bf34      	ite	cc
 8017324:	2301      	movcc	r3, #1
 8017326:	2300      	movcs	r3, #0
 8017328:	b2db      	uxtb	r3, r3
 801732a:	2b00      	cmp	r3, #0
 801732c:	d002      	beq.n	8017334 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 801732e:	6878      	ldr	r0, [r7, #4]
 8017330:	f000 fdac 	bl	8017e8c <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 8017334:	68f8      	ldr	r0, [r7, #12]
 8017336:	f7ff fb72 	bl	8016a1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801733a:	4604      	mov	r4, r0
 801733c:	68f8      	ldr	r0, [r7, #12]
 801733e:	f7ff fb6e 	bl	8016a1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8017342:	4603      	mov	r3, r0
 8017344:	613b      	str	r3, [r7, #16]
 8017346:	f107 0208 	add.w	r2, r7, #8
 801734a:	f107 0310 	add.w	r3, r7, #16
 801734e:	4611      	mov	r1, r2
 8017350:	4618      	mov	r0, r3
 8017352:	f7ee fde3 	bl	8005f1c <_ZSt3maxIjERKT_S2_S2_>
 8017356:	4603      	mov	r3, r0
 8017358:	681b      	ldr	r3, [r3, #0]
 801735a:	4423      	add	r3, r4
 801735c:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 801735e:	68f8      	ldr	r0, [r7, #12]
 8017360:	f7ff fb5d 	bl	8016a1e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8017364:	4602      	mov	r2, r0
 8017366:	697b      	ldr	r3, [r7, #20]
 8017368:	4293      	cmp	r3, r2
 801736a:	d306      	bcc.n	801737a <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 801736c:	68f8      	ldr	r0, [r7, #12]
 801736e:	f000 f911 	bl	8017594 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8017372:	4602      	mov	r2, r0
 8017374:	697b      	ldr	r3, [r7, #20]
 8017376:	4293      	cmp	r3, r2
 8017378:	d904      	bls.n	8017384 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 801737a:	68f8      	ldr	r0, [r7, #12]
 801737c:	f000 f90a 	bl	8017594 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8017380:	4603      	mov	r3, r0
 8017382:	e000      	b.n	8017386 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 8017384:	697b      	ldr	r3, [r7, #20]
      }
 8017386:	4618      	mov	r0, r3
 8017388:	371c      	adds	r7, #28
 801738a:	46bd      	mov	sp, r7
 801738c:	bd90      	pop	{r4, r7, pc}

0801738e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 801738e:	b580      	push	{r7, lr}
 8017390:	b084      	sub	sp, #16
 8017392:	af00      	add	r7, sp, #0
 8017394:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8017396:	687a      	ldr	r2, [r7, #4]
 8017398:	f107 030c 	add.w	r3, r7, #12
 801739c:	4611      	mov	r1, r2
 801739e:	4618      	mov	r0, r3
 80173a0:	f7ff ff9e 	bl	80172e0 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 80173a4:	68fb      	ldr	r3, [r7, #12]
 80173a6:	4618      	mov	r0, r3
 80173a8:	3710      	adds	r7, #16
 80173aa:	46bd      	mov	sp, r7
 80173ac:	bd80      	pop	{r7, pc}

080173ae <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 80173ae:	b590      	push	{r4, r7, lr}
 80173b0:	b083      	sub	sp, #12
 80173b2:	af00      	add	r7, sp, #0
 80173b4:	6078      	str	r0, [r7, #4]
 80173b6:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80173b8:	6878      	ldr	r0, [r7, #4]
 80173ba:	f000 f835 	bl	8017428 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80173be:	4603      	mov	r3, r0
 80173c0:	681c      	ldr	r4, [r3, #0]
 80173c2:	6838      	ldr	r0, [r7, #0]
 80173c4:	f000 f830 	bl	8017428 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80173c8:	4603      	mov	r3, r0
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	1ae3      	subs	r3, r4, r3
 80173ce:	10db      	asrs	r3, r3, #3
 80173d0:	4618      	mov	r0, r3
 80173d2:	370c      	adds	r7, #12
 80173d4:	46bd      	mov	sp, r7
 80173d6:	bd90      	pop	{r4, r7, pc}

080173d8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80173d8:	b580      	push	{r7, lr}
 80173da:	b082      	sub	sp, #8
 80173dc:	af00      	add	r7, sp, #0
 80173de:	6078      	str	r0, [r7, #4]
 80173e0:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80173e2:	683b      	ldr	r3, [r7, #0]
 80173e4:	2b00      	cmp	r3, #0
 80173e6:	d006      	beq.n	80173f6 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 80173e8:	687b      	ldr	r3, [r7, #4]
 80173ea:	6839      	ldr	r1, [r7, #0]
 80173ec:	4618      	mov	r0, r3
 80173ee:	f000 f8e2 	bl	80175b6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 80173f2:	4603      	mov	r3, r0
 80173f4:	e000      	b.n	80173f8 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 80173f6:	2300      	movs	r3, #0
      }
 80173f8:	4618      	mov	r0, r3
 80173fa:	3708      	adds	r7, #8
 80173fc:	46bd      	mov	sp, r7
 80173fe:	bd80      	pop	{r7, pc}

08017400 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 8017400:	b590      	push	{r4, r7, lr}
 8017402:	b089      	sub	sp, #36	; 0x24
 8017404:	af02      	add	r7, sp, #8
 8017406:	60f8      	str	r0, [r7, #12]
 8017408:	60b9      	str	r1, [r7, #8]
 801740a:	607a      	str	r2, [r7, #4]
 801740c:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 801740e:	f88d 4000 	strb.w	r4, [sp]
 8017412:	683b      	ldr	r3, [r7, #0]
 8017414:	687a      	ldr	r2, [r7, #4]
 8017416:	68b9      	ldr	r1, [r7, #8]
 8017418:	68f8      	ldr	r0, [r7, #12]
 801741a:	f000 f8db 	bl	80175d4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 801741e:	4603      	mov	r3, r0
      }
 8017420:	4618      	mov	r0, r3
 8017422:	371c      	adds	r7, #28
 8017424:	46bd      	mov	sp, r7
 8017426:	bd90      	pop	{r4, r7, pc}

08017428 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8017428:	b480      	push	{r7}
 801742a:	b083      	sub	sp, #12
 801742c:	af00      	add	r7, sp, #0
 801742e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017430:	687b      	ldr	r3, [r7, #4]
 8017432:	4618      	mov	r0, r3
 8017434:	370c      	adds	r7, #12
 8017436:	46bd      	mov	sp, r7
 8017438:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743c:	4770      	bx	lr

0801743e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 801743e:	b480      	push	{r7}
 8017440:	b083      	sub	sp, #12
 8017442:	af00      	add	r7, sp, #0
 8017444:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017446:	687b      	ldr	r3, [r7, #4]
 8017448:	4618      	mov	r0, r3
 801744a:	370c      	adds	r7, #12
 801744c:	46bd      	mov	sp, r7
 801744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017452:	4770      	bx	lr

08017454 <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 8017454:	b590      	push	{r4, r7, lr}
 8017456:	b085      	sub	sp, #20
 8017458:	af00      	add	r7, sp, #0
 801745a:	60f8      	str	r0, [r7, #12]
 801745c:	60b9      	str	r1, [r7, #8]
 801745e:	607a      	str	r2, [r7, #4]
 8017460:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 8017462:	68f8      	ldr	r0, [r7, #12]
 8017464:	f000 f8c8 	bl	80175f8 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8017468:	4604      	mov	r4, r0
 801746a:	68b8      	ldr	r0, [r7, #8]
 801746c:	f000 f8c4 	bl	80175f8 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8017470:	4601      	mov	r1, r0
 8017472:	683b      	ldr	r3, [r7, #0]
 8017474:	687a      	ldr	r2, [r7, #4]
 8017476:	4620      	mov	r0, r4
 8017478:	f000 f8cd 	bl	8017616 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 801747c:	4603      	mov	r3, r0
    }
 801747e:	4618      	mov	r0, r3
 8017480:	3714      	adds	r7, #20
 8017482:	46bd      	mov	sp, r7
 8017484:	bd90      	pop	{r4, r7, pc}

08017486 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8017486:	b580      	push	{r7, lr}
 8017488:	b084      	sub	sp, #16
 801748a:	af00      	add	r7, sp, #0
 801748c:	60f8      	str	r0, [r7, #12]
 801748e:	60b9      	str	r1, [r7, #8]
 8017490:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 8017492:	68b9      	ldr	r1, [r7, #8]
 8017494:	68f8      	ldr	r0, [r7, #12]
 8017496:	f000 f8cf 	bl	8017638 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 801749a:	bf00      	nop
 801749c:	3710      	adds	r7, #16
 801749e:	46bd      	mov	sp, r7
 80174a0:	bd80      	pop	{r7, pc}

080174a2 <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 80174a2:	b580      	push	{r7, lr}
 80174a4:	b084      	sub	sp, #16
 80174a6:	af00      	add	r7, sp, #0
 80174a8:	60f8      	str	r0, [r7, #12]
 80174aa:	60b9      	str	r1, [r7, #8]
 80174ac:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 80174ae:	68b8      	ldr	r0, [r7, #8]
 80174b0:	f000 fcbe 	bl	8017e30 <_ZdlPv>
      }
 80174b4:	bf00      	nop
 80174b6:	3710      	adds	r7, #16
 80174b8:	46bd      	mov	sp, r7
 80174ba:	bd80      	pop	{r7, pc}

080174bc <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80174bc:	b580      	push	{r7, lr}
 80174be:	b082      	sub	sp, #8
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80174c4:	687b      	ldr	r3, [r7, #4]
 80174c6:	4618      	mov	r0, r3
 80174c8:	f000 f8dd 	bl	8017686 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80174cc:	4603      	mov	r3, r0
 80174ce:	4618      	mov	r0, r3
 80174d0:	f000 f8bf 	bl	8017652 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 80174d4:	4603      	mov	r3, r0
 80174d6:	4618      	mov	r0, r3
 80174d8:	3708      	adds	r7, #8
 80174da:	46bd      	mov	sp, r7
 80174dc:	bd80      	pop	{r7, pc}

080174de <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80174de:	b580      	push	{r7, lr}
 80174e0:	b082      	sub	sp, #8
 80174e2:	af00      	add	r7, sp, #0
 80174e4:	6078      	str	r0, [r7, #4]
 80174e6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80174e8:	2200      	movs	r2, #0
 80174ea:	6839      	ldr	r1, [r7, #0]
 80174ec:	6878      	ldr	r0, [r7, #4]
 80174ee:	f000 f8d5 	bl	801769c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 80174f2:	4603      	mov	r3, r0
 80174f4:	4618      	mov	r0, r3
 80174f6:	3708      	adds	r7, #8
 80174f8:	46bd      	mov	sp, r7
 80174fa:	bd80      	pop	{r7, pc}

080174fc <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80174fc:	b580      	push	{r7, lr}
 80174fe:	b084      	sub	sp, #16
 8017500:	af00      	add	r7, sp, #0
 8017502:	60f8      	str	r0, [r7, #12]
 8017504:	60b9      	str	r1, [r7, #8]
 8017506:	607a      	str	r2, [r7, #4]
 8017508:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 801750a:	683b      	ldr	r3, [r7, #0]
 801750c:	687a      	ldr	r2, [r7, #4]
 801750e:	68b9      	ldr	r1, [r7, #8]
 8017510:	68f8      	ldr	r0, [r7, #12]
 8017512:	f000 f8e1 	bl	80176d8 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8017516:	4603      	mov	r3, r0
      }
 8017518:	4618      	mov	r0, r3
 801751a:	3710      	adds	r7, #16
 801751c:	46bd      	mov	sp, r7
 801751e:	bd80      	pop	{r7, pc}

08017520 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8017520:	b580      	push	{r7, lr}
 8017522:	b084      	sub	sp, #16
 8017524:	af00      	add	r7, sp, #0
 8017526:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8017528:	f107 030c 	add.w	r3, r7, #12
 801752c:	6879      	ldr	r1, [r7, #4]
 801752e:	4618      	mov	r0, r3
 8017530:	f000 f8ef 	bl	8017712 <_ZNSt13move_iteratorIPPvEC1ES1_>
 8017534:	68fb      	ldr	r3, [r7, #12]
 8017536:	4618      	mov	r0, r3
 8017538:	3710      	adds	r7, #16
 801753a:	46bd      	mov	sp, r7
 801753c:	bd80      	pop	{r7, pc}

0801753e <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 801753e:	b580      	push	{r7, lr}
 8017540:	b084      	sub	sp, #16
 8017542:	af00      	add	r7, sp, #0
 8017544:	60f8      	str	r0, [r7, #12]
 8017546:	60b9      	str	r1, [r7, #8]
 8017548:	607a      	str	r2, [r7, #4]
 801754a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801754c:	687a      	ldr	r2, [r7, #4]
 801754e:	68b9      	ldr	r1, [r7, #8]
 8017550:	68f8      	ldr	r0, [r7, #12]
 8017552:	f000 f8ed 	bl	8017730 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8017556:	4603      	mov	r3, r0
 8017558:	4618      	mov	r0, r3
 801755a:	3710      	adds	r7, #16
 801755c:	46bd      	mov	sp, r7
 801755e:	bd80      	pop	{r7, pc}

08017560 <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8017560:	b580      	push	{r7, lr}
 8017562:	b082      	sub	sp, #8
 8017564:	af00      	add	r7, sp, #0
 8017566:	6078      	str	r0, [r7, #4]
 8017568:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 801756a:	6839      	ldr	r1, [r7, #0]
 801756c:	6878      	ldr	r0, [r7, #4]
 801756e:	f000 f8f1 	bl	8017754 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 8017572:	bf00      	nop
 8017574:	3708      	adds	r7, #8
 8017576:	46bd      	mov	sp, r7
 8017578:	bd80      	pop	{r7, pc}

0801757a <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 801757a:	b580      	push	{r7, lr}
 801757c:	b084      	sub	sp, #16
 801757e:	af00      	add	r7, sp, #0
 8017580:	60f8      	str	r0, [r7, #12]
 8017582:	60b9      	str	r1, [r7, #8]
 8017584:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8017586:	68b8      	ldr	r0, [r7, #8]
 8017588:	f000 fc52 	bl	8017e30 <_ZdlPv>
      }
 801758c:	bf00      	nop
 801758e:	3710      	adds	r7, #16
 8017590:	46bd      	mov	sp, r7
 8017592:	bd80      	pop	{r7, pc}

08017594 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 8017594:	b580      	push	{r7, lr}
 8017596:	b082      	sub	sp, #8
 8017598:	af00      	add	r7, sp, #0
 801759a:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 801759c:	687b      	ldr	r3, [r7, #4]
 801759e:	4618      	mov	r0, r3
 80175a0:	f000 f8fd 	bl	801779e <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 80175a4:	4603      	mov	r3, r0
 80175a6:	4618      	mov	r0, r3
 80175a8:	f000 f8df 	bl	801776a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 80175ac:	4603      	mov	r3, r0
 80175ae:	4618      	mov	r0, r3
 80175b0:	3708      	adds	r7, #8
 80175b2:	46bd      	mov	sp, r7
 80175b4:	bd80      	pop	{r7, pc}

080175b6 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 80175b6:	b580      	push	{r7, lr}
 80175b8:	b082      	sub	sp, #8
 80175ba:	af00      	add	r7, sp, #0
 80175bc:	6078      	str	r0, [r7, #4]
 80175be:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80175c0:	2200      	movs	r2, #0
 80175c2:	6839      	ldr	r1, [r7, #0]
 80175c4:	6878      	ldr	r0, [r7, #4]
 80175c6:	f000 f8f5 	bl	80177b4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 80175ca:	4603      	mov	r3, r0
 80175cc:	4618      	mov	r0, r3
 80175ce:	3708      	adds	r7, #8
 80175d0:	46bd      	mov	sp, r7
 80175d2:	bd80      	pop	{r7, pc}

080175d4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80175d4:	b580      	push	{r7, lr}
 80175d6:	b084      	sub	sp, #16
 80175d8:	af00      	add	r7, sp, #0
 80175da:	60f8      	str	r0, [r7, #12]
 80175dc:	60b9      	str	r1, [r7, #8]
 80175de:	607a      	str	r2, [r7, #4]
 80175e0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80175e2:	683b      	ldr	r3, [r7, #0]
 80175e4:	687a      	ldr	r2, [r7, #4]
 80175e6:	68b9      	ldr	r1, [r7, #8]
 80175e8:	68f8      	ldr	r0, [r7, #12]
 80175ea:	f000 f901 	bl	80177f0 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 80175ee:	4603      	mov	r3, r0
      }
 80175f0:	4618      	mov	r0, r3
 80175f2:	3710      	adds	r7, #16
 80175f4:	46bd      	mov	sp, r7
 80175f6:	bd80      	pop	{r7, pc}

080175f8 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80175f8:	b580      	push	{r7, lr}
 80175fa:	b084      	sub	sp, #16
 80175fc:	af00      	add	r7, sp, #0
 80175fe:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8017600:	f107 030c 	add.w	r3, r7, #12
 8017604:	6879      	ldr	r1, [r7, #4]
 8017606:	4618      	mov	r0, r3
 8017608:	f000 f90f 	bl	801782a <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 801760c:	68fb      	ldr	r3, [r7, #12]
 801760e:	4618      	mov	r0, r3
 8017610:	3710      	adds	r7, #16
 8017612:	46bd      	mov	sp, r7
 8017614:	bd80      	pop	{r7, pc}

08017616 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8017616:	b580      	push	{r7, lr}
 8017618:	b084      	sub	sp, #16
 801761a:	af00      	add	r7, sp, #0
 801761c:	60f8      	str	r0, [r7, #12]
 801761e:	60b9      	str	r1, [r7, #8]
 8017620:	607a      	str	r2, [r7, #4]
 8017622:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8017624:	687a      	ldr	r2, [r7, #4]
 8017626:	68b9      	ldr	r1, [r7, #8]
 8017628:	68f8      	ldr	r0, [r7, #12]
 801762a:	f000 f90d 	bl	8017848 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 801762e:	4603      	mov	r3, r0
 8017630:	4618      	mov	r0, r3
 8017632:	3710      	adds	r7, #16
 8017634:	46bd      	mov	sp, r7
 8017636:	bd80      	pop	{r7, pc}

08017638 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8017638:	b580      	push	{r7, lr}
 801763a:	b082      	sub	sp, #8
 801763c:	af00      	add	r7, sp, #0
 801763e:	6078      	str	r0, [r7, #4]
 8017640:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8017642:	6839      	ldr	r1, [r7, #0]
 8017644:	6878      	ldr	r0, [r7, #4]
 8017646:	f000 f911 	bl	801786c <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 801764a:	bf00      	nop
 801764c:	3708      	adds	r7, #8
 801764e:	46bd      	mov	sp, r7
 8017650:	bd80      	pop	{r7, pc}

08017652 <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8017652:	b580      	push	{r7, lr}
 8017654:	b084      	sub	sp, #16
 8017656:	af00      	add	r7, sp, #0
 8017658:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801765a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 801765e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8017660:	6878      	ldr	r0, [r7, #4]
 8017662:	f000 f90e 	bl	8017882 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 8017666:	4603      	mov	r3, r0
 8017668:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801766a:	f107 0208 	add.w	r2, r7, #8
 801766e:	f107 030c 	add.w	r3, r7, #12
 8017672:	4611      	mov	r1, r2
 8017674:	4618      	mov	r0, r3
 8017676:	f7ee fe2b 	bl	80062d0 <_ZSt3minIjERKT_S2_S2_>
 801767a:	4603      	mov	r3, r0
 801767c:	681b      	ldr	r3, [r3, #0]
      }
 801767e:	4618      	mov	r0, r3
 8017680:	3710      	adds	r7, #16
 8017682:	46bd      	mov	sp, r7
 8017684:	bd80      	pop	{r7, pc}

08017686 <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8017686:	b480      	push	{r7}
 8017688:	b083      	sub	sp, #12
 801768a:	af00      	add	r7, sp, #0
 801768c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801768e:	687b      	ldr	r3, [r7, #4]
 8017690:	4618      	mov	r0, r3
 8017692:	370c      	adds	r7, #12
 8017694:	46bd      	mov	sp, r7
 8017696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801769a:	4770      	bx	lr

0801769c <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801769c:	b580      	push	{r7, lr}
 801769e:	b084      	sub	sp, #16
 80176a0:	af00      	add	r7, sp, #0
 80176a2:	60f8      	str	r0, [r7, #12]
 80176a4:	60b9      	str	r1, [r7, #8]
 80176a6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80176a8:	68f8      	ldr	r0, [r7, #12]
 80176aa:	f000 f8f6 	bl	801789a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 80176ae:	4602      	mov	r2, r0
 80176b0:	68bb      	ldr	r3, [r7, #8]
 80176b2:	4293      	cmp	r3, r2
 80176b4:	bf8c      	ite	hi
 80176b6:	2301      	movhi	r3, #1
 80176b8:	2300      	movls	r3, #0
 80176ba:	b2db      	uxtb	r3, r3
 80176bc:	2b00      	cmp	r3, #0
 80176be:	d001      	beq.n	80176c4 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80176c0:	f000 fbde 	bl	8017e80 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80176c4:	68bb      	ldr	r3, [r7, #8]
 80176c6:	009b      	lsls	r3, r3, #2
 80176c8:	4618      	mov	r0, r3
 80176ca:	f000 fbc6 	bl	8017e5a <_Znwj>
 80176ce:	4603      	mov	r3, r0
      }
 80176d0:	4618      	mov	r0, r3
 80176d2:	3710      	adds	r7, #16
 80176d4:	46bd      	mov	sp, r7
 80176d6:	bd80      	pop	{r7, pc}

080176d8 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80176d8:	b5b0      	push	{r4, r5, r7, lr}
 80176da:	b084      	sub	sp, #16
 80176dc:	af00      	add	r7, sp, #0
 80176de:	60f8      	str	r0, [r7, #12]
 80176e0:	60b9      	str	r1, [r7, #8]
 80176e2:	607a      	str	r2, [r7, #4]
 80176e4:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80176e6:	68f8      	ldr	r0, [r7, #12]
 80176e8:	f000 f8e3 	bl	80178b2 <_ZSt12__niter_baseIPPvET_S2_>
 80176ec:	4604      	mov	r4, r0
 80176ee:	68b8      	ldr	r0, [r7, #8]
 80176f0:	f000 f8df 	bl	80178b2 <_ZSt12__niter_baseIPPvET_S2_>
 80176f4:	4605      	mov	r5, r0
 80176f6:	6878      	ldr	r0, [r7, #4]
 80176f8:	f000 f8db 	bl	80178b2 <_ZSt12__niter_baseIPPvET_S2_>
 80176fc:	4602      	mov	r2, r0
 80176fe:	683b      	ldr	r3, [r7, #0]
 8017700:	4629      	mov	r1, r5
 8017702:	4620      	mov	r0, r4
 8017704:	f000 f8e0 	bl	80178c8 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 8017708:	4603      	mov	r3, r0
    }
 801770a:	4618      	mov	r0, r3
 801770c:	3710      	adds	r7, #16
 801770e:	46bd      	mov	sp, r7
 8017710:	bdb0      	pop	{r4, r5, r7, pc}

08017712 <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 8017712:	b480      	push	{r7}
 8017714:	b083      	sub	sp, #12
 8017716:	af00      	add	r7, sp, #0
 8017718:	6078      	str	r0, [r7, #4]
 801771a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801771c:	687b      	ldr	r3, [r7, #4]
 801771e:	683a      	ldr	r2, [r7, #0]
 8017720:	601a      	str	r2, [r3, #0]
 8017722:	687b      	ldr	r3, [r7, #4]
 8017724:	4618      	mov	r0, r3
 8017726:	370c      	adds	r7, #12
 8017728:	46bd      	mov	sp, r7
 801772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801772e:	4770      	bx	lr

08017730 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017730:	b580      	push	{r7, lr}
 8017732:	b086      	sub	sp, #24
 8017734:	af00      	add	r7, sp, #0
 8017736:	60f8      	str	r0, [r7, #12]
 8017738:	60b9      	str	r1, [r7, #8]
 801773a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801773c:	2301      	movs	r3, #1
 801773e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017740:	687a      	ldr	r2, [r7, #4]
 8017742:	68b9      	ldr	r1, [r7, #8]
 8017744:	68f8      	ldr	r0, [r7, #12]
 8017746:	f000 f8dd 	bl	8017904 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 801774a:	4603      	mov	r3, r0
    }
 801774c:	4618      	mov	r0, r3
 801774e:	3718      	adds	r7, #24
 8017750:	46bd      	mov	sp, r7
 8017752:	bd80      	pop	{r7, pc}

08017754 <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8017754:	b480      	push	{r7}
 8017756:	b083      	sub	sp, #12
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	6039      	str	r1, [r7, #0]
 801775e:	bf00      	nop
 8017760:	370c      	adds	r7, #12
 8017762:	46bd      	mov	sp, r7
 8017764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017768:	4770      	bx	lr

0801776a <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801776a:	b580      	push	{r7, lr}
 801776c:	b084      	sub	sp, #16
 801776e:	af00      	add	r7, sp, #0
 8017770:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8017772:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 8017776:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8017778:	6878      	ldr	r0, [r7, #4]
 801777a:	f000 f8d3 	bl	8017924 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 801777e:	4603      	mov	r3, r0
 8017780:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8017782:	f107 0208 	add.w	r2, r7, #8
 8017786:	f107 030c 	add.w	r3, r7, #12
 801778a:	4611      	mov	r1, r2
 801778c:	4618      	mov	r0, r3
 801778e:	f7ee fd9f 	bl	80062d0 <_ZSt3minIjERKT_S2_S2_>
 8017792:	4603      	mov	r3, r0
 8017794:	681b      	ldr	r3, [r3, #0]
      }
 8017796:	4618      	mov	r0, r3
 8017798:	3710      	adds	r7, #16
 801779a:	46bd      	mov	sp, r7
 801779c:	bd80      	pop	{r7, pc}

0801779e <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801779e:	b480      	push	{r7}
 80177a0:	b083      	sub	sp, #12
 80177a2:	af00      	add	r7, sp, #0
 80177a4:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	4618      	mov	r0, r3
 80177aa:	370c      	adds	r7, #12
 80177ac:	46bd      	mov	sp, r7
 80177ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80177b2:	4770      	bx	lr

080177b4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 80177b4:	b580      	push	{r7, lr}
 80177b6:	b084      	sub	sp, #16
 80177b8:	af00      	add	r7, sp, #0
 80177ba:	60f8      	str	r0, [r7, #12]
 80177bc:	60b9      	str	r1, [r7, #8]
 80177be:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80177c0:	68f8      	ldr	r0, [r7, #12]
 80177c2:	f000 f8bb 	bl	801793c <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 80177c6:	4602      	mov	r2, r0
 80177c8:	68bb      	ldr	r3, [r7, #8]
 80177ca:	4293      	cmp	r3, r2
 80177cc:	bf8c      	ite	hi
 80177ce:	2301      	movhi	r3, #1
 80177d0:	2300      	movls	r3, #0
 80177d2:	b2db      	uxtb	r3, r3
 80177d4:	2b00      	cmp	r3, #0
 80177d6:	d001      	beq.n	80177dc <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80177d8:	f000 fb52 	bl	8017e80 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80177dc:	68bb      	ldr	r3, [r7, #8]
 80177de:	00db      	lsls	r3, r3, #3
 80177e0:	4618      	mov	r0, r3
 80177e2:	f000 fb3a 	bl	8017e5a <_Znwj>
 80177e6:	4603      	mov	r3, r0
      }
 80177e8:	4618      	mov	r0, r3
 80177ea:	3710      	adds	r7, #16
 80177ec:	46bd      	mov	sp, r7
 80177ee:	bd80      	pop	{r7, pc}

080177f0 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80177f0:	b5b0      	push	{r4, r5, r7, lr}
 80177f2:	b084      	sub	sp, #16
 80177f4:	af00      	add	r7, sp, #0
 80177f6:	60f8      	str	r0, [r7, #12]
 80177f8:	60b9      	str	r1, [r7, #8]
 80177fa:	607a      	str	r2, [r7, #4]
 80177fc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80177fe:	68f8      	ldr	r0, [r7, #12]
 8017800:	f000 f8a8 	bl	8017954 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017804:	4604      	mov	r4, r0
 8017806:	68b8      	ldr	r0, [r7, #8]
 8017808:	f000 f8a4 	bl	8017954 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 801780c:	4605      	mov	r5, r0
 801780e:	6878      	ldr	r0, [r7, #4]
 8017810:	f000 f8a0 	bl	8017954 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017814:	4602      	mov	r2, r0
 8017816:	683b      	ldr	r3, [r7, #0]
 8017818:	4629      	mov	r1, r5
 801781a:	4620      	mov	r0, r4
 801781c:	f000 f8a5 	bl	801796a <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8017820:	4603      	mov	r3, r0
    }
 8017822:	4618      	mov	r0, r3
 8017824:	3710      	adds	r7, #16
 8017826:	46bd      	mov	sp, r7
 8017828:	bdb0      	pop	{r4, r5, r7, pc}

0801782a <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 801782a:	b480      	push	{r7}
 801782c:	b083      	sub	sp, #12
 801782e:	af00      	add	r7, sp, #0
 8017830:	6078      	str	r0, [r7, #4]
 8017832:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017834:	687b      	ldr	r3, [r7, #4]
 8017836:	683a      	ldr	r2, [r7, #0]
 8017838:	601a      	str	r2, [r3, #0]
 801783a:	687b      	ldr	r3, [r7, #4]
 801783c:	4618      	mov	r0, r3
 801783e:	370c      	adds	r7, #12
 8017840:	46bd      	mov	sp, r7
 8017842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017846:	4770      	bx	lr

08017848 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017848:	b580      	push	{r7, lr}
 801784a:	b086      	sub	sp, #24
 801784c:	af00      	add	r7, sp, #0
 801784e:	60f8      	str	r0, [r7, #12]
 8017850:	60b9      	str	r1, [r7, #8]
 8017852:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8017854:	2301      	movs	r3, #1
 8017856:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017858:	687a      	ldr	r2, [r7, #4]
 801785a:	68b9      	ldr	r1, [r7, #8]
 801785c:	68f8      	ldr	r0, [r7, #12]
 801785e:	f000 f8a2 	bl	80179a6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 8017862:	4603      	mov	r3, r0
    }
 8017864:	4618      	mov	r0, r3
 8017866:	3718      	adds	r7, #24
 8017868:	46bd      	mov	sp, r7
 801786a:	bd80      	pop	{r7, pc}

0801786c <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 801786c:	b480      	push	{r7}
 801786e:	b083      	sub	sp, #12
 8017870:	af00      	add	r7, sp, #0
 8017872:	6078      	str	r0, [r7, #4]
 8017874:	6039      	str	r1, [r7, #0]
 8017876:	bf00      	nop
 8017878:	370c      	adds	r7, #12
 801787a:	46bd      	mov	sp, r7
 801787c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017880:	4770      	bx	lr

08017882 <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 8017882:	b580      	push	{r7, lr}
 8017884:	b082      	sub	sp, #8
 8017886:	af00      	add	r7, sp, #0
 8017888:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 801788a:	6878      	ldr	r0, [r7, #4]
 801788c:	f000 f805 	bl	801789a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 8017890:	4603      	mov	r3, r0
 8017892:	4618      	mov	r0, r3
 8017894:	3708      	adds	r7, #8
 8017896:	46bd      	mov	sp, r7
 8017898:	bd80      	pop	{r7, pc}

0801789a <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801789a:	b480      	push	{r7}
 801789c:	b083      	sub	sp, #12
 801789e:	af00      	add	r7, sp, #0
 80178a0:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 80178a2:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 80178a6:	4618      	mov	r0, r3
 80178a8:	370c      	adds	r7, #12
 80178aa:	46bd      	mov	sp, r7
 80178ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178b0:	4770      	bx	lr

080178b2 <_ZSt12__niter_baseIPPvET_S2_>:
    __niter_base(_Iterator __it)
 80178b2:	b480      	push	{r7}
 80178b4:	b083      	sub	sp, #12
 80178b6:	af00      	add	r7, sp, #0
 80178b8:	6078      	str	r0, [r7, #4]
    { return __it; }
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	4618      	mov	r0, r3
 80178be:	370c      	adds	r7, #12
 80178c0:	46bd      	mov	sp, r7
 80178c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178c6:	4770      	bx	lr

080178c8 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80178c8:	b580      	push	{r7, lr}
 80178ca:	b086      	sub	sp, #24
 80178cc:	af00      	add	r7, sp, #0
 80178ce:	60f8      	str	r0, [r7, #12]
 80178d0:	60b9      	str	r1, [r7, #8]
 80178d2:	607a      	str	r2, [r7, #4]
 80178d4:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80178d6:	68ba      	ldr	r2, [r7, #8]
 80178d8:	68fb      	ldr	r3, [r7, #12]
 80178da:	1ad3      	subs	r3, r2, r3
 80178dc:	109b      	asrs	r3, r3, #2
 80178de:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80178e0:	697b      	ldr	r3, [r7, #20]
 80178e2:	2b00      	cmp	r3, #0
 80178e4:	dd06      	ble.n	80178f4 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80178e6:	697b      	ldr	r3, [r7, #20]
 80178e8:	009b      	lsls	r3, r3, #2
 80178ea:	461a      	mov	r2, r3
 80178ec:	68f9      	ldr	r1, [r7, #12]
 80178ee:	6878      	ldr	r0, [r7, #4]
 80178f0:	f003 fc8c 	bl	801b20c <memmove>
      return __result + __count;
 80178f4:	697b      	ldr	r3, [r7, #20]
 80178f6:	009b      	lsls	r3, r3, #2
 80178f8:	687a      	ldr	r2, [r7, #4]
 80178fa:	4413      	add	r3, r2
    }
 80178fc:	4618      	mov	r0, r3
 80178fe:	3718      	adds	r7, #24
 8017900:	46bd      	mov	sp, r7
 8017902:	bd80      	pop	{r7, pc}

08017904 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8017904:	b580      	push	{r7, lr}
 8017906:	b084      	sub	sp, #16
 8017908:	af00      	add	r7, sp, #0
 801790a:	60f8      	str	r0, [r7, #12]
 801790c:	60b9      	str	r1, [r7, #8]
 801790e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8017910:	687a      	ldr	r2, [r7, #4]
 8017912:	68b9      	ldr	r1, [r7, #8]
 8017914:	68f8      	ldr	r0, [r7, #12]
 8017916:	f000 f856 	bl	80179c6 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 801791a:	4603      	mov	r3, r0
 801791c:	4618      	mov	r0, r3
 801791e:	3710      	adds	r7, #16
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}

08017924 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 8017924:	b580      	push	{r7, lr}
 8017926:	b082      	sub	sp, #8
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 801792c:	6878      	ldr	r0, [r7, #4]
 801792e:	f000 f805 	bl	801793c <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 8017932:	4603      	mov	r3, r0
 8017934:	4618      	mov	r0, r3
 8017936:	3708      	adds	r7, #8
 8017938:	46bd      	mov	sp, r7
 801793a:	bd80      	pop	{r7, pc}

0801793c <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 801793c:	b480      	push	{r7}
 801793e:	b083      	sub	sp, #12
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8017944:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8017948:	4618      	mov	r0, r3
 801794a:	370c      	adds	r7, #12
 801794c:	46bd      	mov	sp, r7
 801794e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017952:	4770      	bx	lr

08017954 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 8017954:	b480      	push	{r7}
 8017956:	b083      	sub	sp, #12
 8017958:	af00      	add	r7, sp, #0
 801795a:	6078      	str	r0, [r7, #4]
    { return __it; }
 801795c:	687b      	ldr	r3, [r7, #4]
 801795e:	4618      	mov	r0, r3
 8017960:	370c      	adds	r7, #12
 8017962:	46bd      	mov	sp, r7
 8017964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017968:	4770      	bx	lr

0801796a <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 801796a:	b580      	push	{r7, lr}
 801796c:	b086      	sub	sp, #24
 801796e:	af00      	add	r7, sp, #0
 8017970:	60f8      	str	r0, [r7, #12]
 8017972:	60b9      	str	r1, [r7, #8]
 8017974:	607a      	str	r2, [r7, #4]
 8017976:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8017978:	68ba      	ldr	r2, [r7, #8]
 801797a:	68fb      	ldr	r3, [r7, #12]
 801797c:	1ad3      	subs	r3, r2, r3
 801797e:	10db      	asrs	r3, r3, #3
 8017980:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8017982:	697b      	ldr	r3, [r7, #20]
 8017984:	2b00      	cmp	r3, #0
 8017986:	dd06      	ble.n	8017996 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017988:	697b      	ldr	r3, [r7, #20]
 801798a:	00db      	lsls	r3, r3, #3
 801798c:	461a      	mov	r2, r3
 801798e:	68f9      	ldr	r1, [r7, #12]
 8017990:	6878      	ldr	r0, [r7, #4]
 8017992:	f003 fc3b 	bl	801b20c <memmove>
      return __result + __count;
 8017996:	697b      	ldr	r3, [r7, #20]
 8017998:	00db      	lsls	r3, r3, #3
 801799a:	687a      	ldr	r2, [r7, #4]
 801799c:	4413      	add	r3, r2
    }
 801799e:	4618      	mov	r0, r3
 80179a0:	3718      	adds	r7, #24
 80179a2:	46bd      	mov	sp, r7
 80179a4:	bd80      	pop	{r7, pc}

080179a6 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80179a6:	b580      	push	{r7, lr}
 80179a8:	b084      	sub	sp, #16
 80179aa:	af00      	add	r7, sp, #0
 80179ac:	60f8      	str	r0, [r7, #12]
 80179ae:	60b9      	str	r1, [r7, #8]
 80179b0:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80179b2:	687a      	ldr	r2, [r7, #4]
 80179b4:	68b9      	ldr	r1, [r7, #8]
 80179b6:	68f8      	ldr	r0, [r7, #12]
 80179b8:	f000 f81d 	bl	80179f6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 80179bc:	4603      	mov	r3, r0
 80179be:	4618      	mov	r0, r3
 80179c0:	3710      	adds	r7, #16
 80179c2:	46bd      	mov	sp, r7
 80179c4:	bd80      	pop	{r7, pc}

080179c6 <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 80179c6:	b590      	push	{r4, r7, lr}
 80179c8:	b085      	sub	sp, #20
 80179ca:	af00      	add	r7, sp, #0
 80179cc:	60f8      	str	r0, [r7, #12]
 80179ce:	60b9      	str	r1, [r7, #8]
 80179d0:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80179d2:	68f8      	ldr	r0, [r7, #12]
 80179d4:	f000 f827 	bl	8017a26 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80179d8:	4604      	mov	r4, r0
 80179da:	68b8      	ldr	r0, [r7, #8]
 80179dc:	f000 f823 	bl	8017a26 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80179e0:	4603      	mov	r3, r0
 80179e2:	687a      	ldr	r2, [r7, #4]
 80179e4:	4619      	mov	r1, r3
 80179e6:	4620      	mov	r0, r4
 80179e8:	f000 f82e 	bl	8017a48 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 80179ec:	4603      	mov	r3, r0
    }
 80179ee:	4618      	mov	r0, r3
 80179f0:	3714      	adds	r7, #20
 80179f2:	46bd      	mov	sp, r7
 80179f4:	bd90      	pop	{r4, r7, pc}

080179f6 <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 80179f6:	b590      	push	{r4, r7, lr}
 80179f8:	b085      	sub	sp, #20
 80179fa:	af00      	add	r7, sp, #0
 80179fc:	60f8      	str	r0, [r7, #12]
 80179fe:	60b9      	str	r1, [r7, #8]
 8017a00:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8017a02:	68f8      	ldr	r0, [r7, #12]
 8017a04:	f000 f843 	bl	8017a8e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017a08:	4604      	mov	r4, r0
 8017a0a:	68b8      	ldr	r0, [r7, #8]
 8017a0c:	f000 f83f 	bl	8017a8e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8017a10:	4603      	mov	r3, r0
 8017a12:	687a      	ldr	r2, [r7, #4]
 8017a14:	4619      	mov	r1, r3
 8017a16:	4620      	mov	r0, r4
 8017a18:	f000 f84a 	bl	8017ab0 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017a1c:	4603      	mov	r3, r0
    }
 8017a1e:	4618      	mov	r0, r3
 8017a20:	3714      	adds	r7, #20
 8017a22:	46bd      	mov	sp, r7
 8017a24:	bd90      	pop	{r4, r7, pc}

08017a26 <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8017a26:	b580      	push	{r7, lr}
 8017a28:	b082      	sub	sp, #8
 8017a2a:	af00      	add	r7, sp, #0
 8017a2c:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8017a2e:	1d3b      	adds	r3, r7, #4
 8017a30:	4618      	mov	r0, r3
 8017a32:	f000 f860 	bl	8017af6 <_ZNKSt13move_iteratorIPPvE4baseEv>
 8017a36:	4603      	mov	r3, r0
 8017a38:	4618      	mov	r0, r3
 8017a3a:	f000 f868 	bl	8017b0e <_ZSt12__miter_baseIPPvET_S2_>
 8017a3e:	4603      	mov	r3, r0
 8017a40:	4618      	mov	r0, r3
 8017a42:	3708      	adds	r7, #8
 8017a44:	46bd      	mov	sp, r7
 8017a46:	bd80      	pop	{r7, pc}

08017a48 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017a48:	b5b0      	push	{r4, r5, r7, lr}
 8017a4a:	b084      	sub	sp, #16
 8017a4c:	af00      	add	r7, sp, #0
 8017a4e:	60f8      	str	r0, [r7, #12]
 8017a50:	60b9      	str	r1, [r7, #8]
 8017a52:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017a54:	68f8      	ldr	r0, [r7, #12]
 8017a56:	f7ff ff2c 	bl	80178b2 <_ZSt12__niter_baseIPPvET_S2_>
 8017a5a:	4604      	mov	r4, r0
 8017a5c:	68b8      	ldr	r0, [r7, #8]
 8017a5e:	f7ff ff28 	bl	80178b2 <_ZSt12__niter_baseIPPvET_S2_>
 8017a62:	4605      	mov	r5, r0
 8017a64:	687b      	ldr	r3, [r7, #4]
 8017a66:	4618      	mov	r0, r3
 8017a68:	f7ff ff23 	bl	80178b2 <_ZSt12__niter_baseIPPvET_S2_>
 8017a6c:	4603      	mov	r3, r0
 8017a6e:	461a      	mov	r2, r3
 8017a70:	4629      	mov	r1, r5
 8017a72:	4620      	mov	r0, r4
 8017a74:	f000 f856 	bl	8017b24 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8017a78:	4602      	mov	r2, r0
 8017a7a:	1d3b      	adds	r3, r7, #4
 8017a7c:	4611      	mov	r1, r2
 8017a7e:	4618      	mov	r0, r3
 8017a80:	f000 f862 	bl	8017b48 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 8017a84:	4603      	mov	r3, r0
    }
 8017a86:	4618      	mov	r0, r3
 8017a88:	3710      	adds	r7, #16
 8017a8a:	46bd      	mov	sp, r7
 8017a8c:	bdb0      	pop	{r4, r5, r7, pc}

08017a8e <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8017a8e:	b580      	push	{r7, lr}
 8017a90:	b082      	sub	sp, #8
 8017a92:	af00      	add	r7, sp, #0
 8017a94:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8017a96:	1d3b      	adds	r3, r7, #4
 8017a98:	4618      	mov	r0, r3
 8017a9a:	f000 f861 	bl	8017b60 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 8017a9e:	4603      	mov	r3, r0
 8017aa0:	4618      	mov	r0, r3
 8017aa2:	f000 f869 	bl	8017b78 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017aa6:	4603      	mov	r3, r0
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	3708      	adds	r7, #8
 8017aac:	46bd      	mov	sp, r7
 8017aae:	bd80      	pop	{r7, pc}

08017ab0 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017ab0:	b5b0      	push	{r4, r5, r7, lr}
 8017ab2:	b084      	sub	sp, #16
 8017ab4:	af00      	add	r7, sp, #0
 8017ab6:	60f8      	str	r0, [r7, #12]
 8017ab8:	60b9      	str	r1, [r7, #8]
 8017aba:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017abc:	68f8      	ldr	r0, [r7, #12]
 8017abe:	f7ff ff49 	bl	8017954 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017ac2:	4604      	mov	r4, r0
 8017ac4:	68b8      	ldr	r0, [r7, #8]
 8017ac6:	f7ff ff45 	bl	8017954 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017aca:	4605      	mov	r5, r0
 8017acc:	687b      	ldr	r3, [r7, #4]
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f7ff ff40 	bl	8017954 <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017ad4:	4603      	mov	r3, r0
 8017ad6:	461a      	mov	r2, r3
 8017ad8:	4629      	mov	r1, r5
 8017ada:	4620      	mov	r0, r4
 8017adc:	f000 f857 	bl	8017b8e <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017ae0:	4602      	mov	r2, r0
 8017ae2:	1d3b      	adds	r3, r7, #4
 8017ae4:	4611      	mov	r1, r2
 8017ae6:	4618      	mov	r0, r3
 8017ae8:	f000 f863 	bl	8017bb2 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 8017aec:	4603      	mov	r3, r0
    }
 8017aee:	4618      	mov	r0, r3
 8017af0:	3710      	adds	r7, #16
 8017af2:	46bd      	mov	sp, r7
 8017af4:	bdb0      	pop	{r4, r5, r7, pc}

08017af6 <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 8017af6:	b480      	push	{r7}
 8017af8:	b083      	sub	sp, #12
 8017afa:	af00      	add	r7, sp, #0
 8017afc:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	681b      	ldr	r3, [r3, #0]
 8017b02:	4618      	mov	r0, r3
 8017b04:	370c      	adds	r7, #12
 8017b06:	46bd      	mov	sp, r7
 8017b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0c:	4770      	bx	lr

08017b0e <_ZSt12__miter_baseIPPvET_S2_>:
    __miter_base(_Iterator __it)
 8017b0e:	b480      	push	{r7}
 8017b10:	b083      	sub	sp, #12
 8017b12:	af00      	add	r7, sp, #0
 8017b14:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017b16:	687b      	ldr	r3, [r7, #4]
 8017b18:	4618      	mov	r0, r3
 8017b1a:	370c      	adds	r7, #12
 8017b1c:	46bd      	mov	sp, r7
 8017b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b22:	4770      	bx	lr

08017b24 <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b086      	sub	sp, #24
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	60f8      	str	r0, [r7, #12]
 8017b2c:	60b9      	str	r1, [r7, #8]
 8017b2e:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8017b30:	2301      	movs	r3, #1
 8017b32:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8017b34:	687a      	ldr	r2, [r7, #4]
 8017b36:	68b9      	ldr	r1, [r7, #8]
 8017b38:	68f8      	ldr	r0, [r7, #12]
 8017b3a:	f000 f846 	bl	8017bca <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8017b3e:	4603      	mov	r3, r0
    }
 8017b40:	4618      	mov	r0, r3
 8017b42:	3718      	adds	r7, #24
 8017b44:	46bd      	mov	sp, r7
 8017b46:	bd80      	pop	{r7, pc}

08017b48 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8017b48:	b480      	push	{r7}
 8017b4a:	b083      	sub	sp, #12
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
 8017b50:	6039      	str	r1, [r7, #0]
    { return __res; }
 8017b52:	683b      	ldr	r3, [r7, #0]
 8017b54:	4618      	mov	r0, r3
 8017b56:	370c      	adds	r7, #12
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5e:	4770      	bx	lr

08017b60 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	4618      	mov	r0, r3
 8017b6e:	370c      	adds	r7, #12
 8017b70:	46bd      	mov	sp, r7
 8017b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b76:	4770      	bx	lr

08017b78 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8017b78:	b480      	push	{r7}
 8017b7a:	b083      	sub	sp, #12
 8017b7c:	af00      	add	r7, sp, #0
 8017b7e:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	4618      	mov	r0, r3
 8017b84:	370c      	adds	r7, #12
 8017b86:	46bd      	mov	sp, r7
 8017b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b8c:	4770      	bx	lr

08017b8e <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017b8e:	b580      	push	{r7, lr}
 8017b90:	b086      	sub	sp, #24
 8017b92:	af00      	add	r7, sp, #0
 8017b94:	60f8      	str	r0, [r7, #12]
 8017b96:	60b9      	str	r1, [r7, #8]
 8017b98:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8017b9a:	2301      	movs	r3, #1
 8017b9c:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8017b9e:	687a      	ldr	r2, [r7, #4]
 8017ba0:	68b9      	ldr	r1, [r7, #8]
 8017ba2:	68f8      	ldr	r0, [r7, #12]
 8017ba4:	f000 f82e 	bl	8017c04 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 8017ba8:	4603      	mov	r3, r0
    }
 8017baa:	4618      	mov	r0, r3
 8017bac:	3718      	adds	r7, #24
 8017bae:	46bd      	mov	sp, r7
 8017bb0:	bd80      	pop	{r7, pc}

08017bb2 <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8017bb2:	b480      	push	{r7}
 8017bb4:	b083      	sub	sp, #12
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	6078      	str	r0, [r7, #4]
 8017bba:	6039      	str	r1, [r7, #0]
    { return __res; }
 8017bbc:	683b      	ldr	r3, [r7, #0]
 8017bbe:	4618      	mov	r0, r3
 8017bc0:	370c      	adds	r7, #12
 8017bc2:	46bd      	mov	sp, r7
 8017bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bc8:	4770      	bx	lr

08017bca <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8017bca:	b580      	push	{r7, lr}
 8017bcc:	b086      	sub	sp, #24
 8017bce:	af00      	add	r7, sp, #0
 8017bd0:	60f8      	str	r0, [r7, #12]
 8017bd2:	60b9      	str	r1, [r7, #8]
 8017bd4:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8017bd6:	68ba      	ldr	r2, [r7, #8]
 8017bd8:	68fb      	ldr	r3, [r7, #12]
 8017bda:	1ad3      	subs	r3, r2, r3
 8017bdc:	109b      	asrs	r3, r3, #2
 8017bde:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8017be0:	697b      	ldr	r3, [r7, #20]
 8017be2:	2b00      	cmp	r3, #0
 8017be4:	d006      	beq.n	8017bf4 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017be6:	697b      	ldr	r3, [r7, #20]
 8017be8:	009b      	lsls	r3, r3, #2
 8017bea:	461a      	mov	r2, r3
 8017bec:	68f9      	ldr	r1, [r7, #12]
 8017bee:	6878      	ldr	r0, [r7, #4]
 8017bf0:	f003 fb0c 	bl	801b20c <memmove>
	  return __result + _Num;
 8017bf4:	697b      	ldr	r3, [r7, #20]
 8017bf6:	009b      	lsls	r3, r3, #2
 8017bf8:	687a      	ldr	r2, [r7, #4]
 8017bfa:	4413      	add	r3, r2
	}
 8017bfc:	4618      	mov	r0, r3
 8017bfe:	3718      	adds	r7, #24
 8017c00:	46bd      	mov	sp, r7
 8017c02:	bd80      	pop	{r7, pc}

08017c04 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8017c04:	b580      	push	{r7, lr}
 8017c06:	b086      	sub	sp, #24
 8017c08:	af00      	add	r7, sp, #0
 8017c0a:	60f8      	str	r0, [r7, #12]
 8017c0c:	60b9      	str	r1, [r7, #8]
 8017c0e:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8017c10:	68ba      	ldr	r2, [r7, #8]
 8017c12:	68fb      	ldr	r3, [r7, #12]
 8017c14:	1ad3      	subs	r3, r2, r3
 8017c16:	10db      	asrs	r3, r3, #3
 8017c18:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8017c1a:	697b      	ldr	r3, [r7, #20]
 8017c1c:	2b00      	cmp	r3, #0
 8017c1e:	d006      	beq.n	8017c2e <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017c20:	697b      	ldr	r3, [r7, #20]
 8017c22:	00db      	lsls	r3, r3, #3
 8017c24:	461a      	mov	r2, r3
 8017c26:	68f9      	ldr	r1, [r7, #12]
 8017c28:	6878      	ldr	r0, [r7, #4]
 8017c2a:	f003 faef 	bl	801b20c <memmove>
	  return __result + _Num;
 8017c2e:	697b      	ldr	r3, [r7, #20]
 8017c30:	00db      	lsls	r3, r3, #3
 8017c32:	687a      	ldr	r2, [r7, #4]
 8017c34:	4413      	add	r3, r2
	}
 8017c36:	4618      	mov	r0, r3
 8017c38:	3718      	adds	r7, #24
 8017c3a:	46bd      	mov	sp, r7
 8017c3c:	bd80      	pop	{r7, pc}
	...

08017c40 <_Z41__static_initialization_and_destruction_0ii>:
 8017c40:	b580      	push	{r7, lr}
 8017c42:	b082      	sub	sp, #8
 8017c44:	af00      	add	r7, sp, #0
 8017c46:	6078      	str	r0, [r7, #4]
 8017c48:	6039      	str	r1, [r7, #0]
 8017c4a:	687b      	ldr	r3, [r7, #4]
 8017c4c:	2b01      	cmp	r3, #1
 8017c4e:	f040 808e 	bne.w	8017d6e <_Z41__static_initialization_and_destruction_0ii+0x12e>
 8017c52:	683b      	ldr	r3, [r7, #0]
 8017c54:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c58:	4293      	cmp	r3, r2
 8017c5a:	f040 8088 	bne.w	8017d6e <_Z41__static_initialization_and_destruction_0ii+0x12e>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 8017c5e:	4b4d      	ldr	r3, [pc, #308]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	f503 7324 	add.w	r3, r3, #656	; 0x290
};const NodeInfo_t nodeData[] = {
 8017c66:	4a4c      	ldr	r2, [pc, #304]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c68:	6053      	str	r3, [r2, #4]
 8017c6a:	4b4a      	ldr	r3, [pc, #296]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	4a4a      	ldr	r2, [pc, #296]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c70:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension22, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
 8017c74:	4b47      	ldr	r3, [pc, #284]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 8017c7c:	4a46      	ldr	r2, [pc, #280]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c7e:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8017c82:	4b44      	ldr	r3, [pc, #272]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	4a44      	ldr	r2, [pc, #272]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c88:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension24, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
 8017c8c:	4b41      	ldr	r3, [pc, #260]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 8017c94:	4a40      	ldr	r2, [pc, #256]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c96:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 8017c9a:	4b3e      	ldr	r3, [pc, #248]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	4a3e      	ldr	r2, [pc, #248]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017ca0:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension26, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
 8017ca4:	4b3b      	ldr	r3, [pc, #236]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 8017cac:	4a3a      	ldr	r2, [pc, #232]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cae:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 8017cb2:	4b38      	ldr	r3, [pc, #224]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	4a38      	ldr	r2, [pc, #224]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cb8:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension28, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
 8017cbc:	4b35      	ldr	r3, [pc, #212]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8017cc4:	4a34      	ldr	r2, [pc, #208]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cc6:	f8c2 32a4 	str.w	r3, [r2, #676]	; 0x2a4
 8017cca:	4b32      	ldr	r3, [pc, #200]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	4a32      	ldr	r2, [pc, #200]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cd0:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension30, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
 8017cd4:	4b2f      	ldr	r3, [pc, #188]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8017cdc:	4a2e      	ldr	r2, [pc, #184]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cde:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
 8017ce2:	4b2c      	ldr	r3, [pc, #176]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	4a2c      	ldr	r2, [pc, #176]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017ce8:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension32, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
 8017cec:	4b29      	ldr	r3, [pc, #164]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8017cf4:	4a28      	ldr	r2, [pc, #160]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cf6:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8017cfa:	4b26      	ldr	r3, [pc, #152]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	4a26      	ldr	r2, [pc, #152]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d00:	f8c2 331c 	str.w	r3, [r2, #796]	; 0x31c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension34, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
 8017d04:	4b23      	ldr	r3, [pc, #140]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
};const NodeInfo_t nodeData[] = {
 8017d0c:	4a22      	ldr	r2, [pc, #136]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d0e:	f8c2 3334 	str.w	r3, [r2, #820]	; 0x334
 8017d12:	4b20      	ldr	r3, [pc, #128]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	4a20      	ldr	r2, [pc, #128]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d18:	f8c2 334c 	str.w	r3, [r2, #844]	; 0x34c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension36, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
 8017d1c:	4b1d      	ldr	r3, [pc, #116]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
};const NodeInfo_t nodeData[] = {
 8017d24:	4a1c      	ldr	r2, [pc, #112]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d26:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
 8017d2a:	4b1a      	ldr	r3, [pc, #104]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	4a1a      	ldr	r2, [pc, #104]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d30:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension38, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
 8017d34:	4b17      	ldr	r3, [pc, #92]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
};const NodeInfo_t nodeData[] = {
 8017d3c:	4a16      	ldr	r2, [pc, #88]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d3e:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
 8017d42:	4b14      	ldr	r3, [pc, #80]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d44:	681b      	ldr	r3, [r3, #0]
 8017d46:	4a14      	ldr	r2, [pc, #80]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d48:	f8c2 33ac 	str.w	r3, [r2, #940]	; 0x3ac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension40, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
 8017d4c:	4b11      	ldr	r3, [pc, #68]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d4e:	681b      	ldr	r3, [r3, #0]
 8017d50:	33e0      	adds	r3, #224	; 0xe0
};const NodeInfo_t nodeData[] = {
 8017d52:	4a11      	ldr	r2, [pc, #68]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d54:	f8c2 33c4 	str.w	r3, [r2, #964]	; 0x3c4
 8017d58:	4b0e      	ldr	r3, [pc, #56]	; (8017d94 <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d5a:	681b      	ldr	r3, [r3, #0]
 8017d5c:	4a0e      	ldr	r2, [pc, #56]	; (8017d98 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d5e:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
static std::vector<void*> overflow_buffers;
 8017d62:	480e      	ldr	r0, [pc, #56]	; (8017d9c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8017d64:	f7fe fa31 	bl	80161ca <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8017d68:	480d      	ldr	r0, [pc, #52]	; (8017da0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8017d6a:	f7fe fa94 	bl	8016296 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 8017d6e:	687b      	ldr	r3, [r7, #4]
 8017d70:	2b00      	cmp	r3, #0
 8017d72:	d10a      	bne.n	8017d8a <_Z41__static_initialization_and_destruction_0ii+0x14a>
 8017d74:	683b      	ldr	r3, [r7, #0]
 8017d76:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d7a:	4293      	cmp	r3, r2
 8017d7c:	d105      	bne.n	8017d8a <_Z41__static_initialization_and_destruction_0ii+0x14a>
 8017d7e:	4808      	ldr	r0, [pc, #32]	; (8017da0 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8017d80:	f000 f810 	bl	8017da4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8017d84:	4805      	ldr	r0, [pc, #20]	; (8017d9c <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8017d86:	f000 f828 	bl	8017dda <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8017d8a:	bf00      	nop
 8017d8c:	3708      	adds	r7, #8
 8017d8e:	46bd      	mov	sp, r7
 8017d90:	bd80      	pop	{r7, pc}
 8017d92:	bf00      	nop
 8017d94:	20006b78 	.word	0x20006b78
 8017d98:	20000124 	.word	0x20000124
 8017d9c:	20007a08 	.word	0x20007a08
 8017da0:	20007a14 	.word	0x20007a14

08017da4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8017da4:	b5b0      	push	{r4, r5, r7, lr}
 8017da6:	b082      	sub	sp, #8
 8017da8:	af00      	add	r7, sp, #0
 8017daa:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	681c      	ldr	r4, [r3, #0]
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8017db4:	687b      	ldr	r3, [r7, #4]
 8017db6:	4618      	mov	r0, r3
 8017db8:	f7ff fb41 	bl	801743e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017dbc:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017dbe:	461a      	mov	r2, r3
 8017dc0:	4629      	mov	r1, r5
 8017dc2:	4620      	mov	r0, r4
 8017dc4:	f7ff fb5f 	bl	8017486 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 8017dc8:	687b      	ldr	r3, [r7, #4]
 8017dca:	4618      	mov	r0, r3
 8017dcc:	f7fe fde8 	bl	80169a0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8017dd0:	687b      	ldr	r3, [r7, #4]
 8017dd2:	4618      	mov	r0, r3
 8017dd4:	3708      	adds	r7, #8
 8017dd6:	46bd      	mov	sp, r7
 8017dd8:	bdb0      	pop	{r4, r5, r7, pc}

08017dda <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8017dda:	b5b0      	push	{r4, r5, r7, lr}
 8017ddc:	b082      	sub	sp, #8
 8017dde:	af00      	add	r7, sp, #0
 8017de0:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681c      	ldr	r4, [r3, #0]
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	4618      	mov	r0, r3
 8017dee:	f7ff fa07 	bl	8017200 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017df2:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017df4:	461a      	mov	r2, r3
 8017df6:	4629      	mov	r1, r5
 8017df8:	4620      	mov	r0, r4
 8017dfa:	f7ff fa25 	bl	8017248 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 8017dfe:	687b      	ldr	r3, [r7, #4]
 8017e00:	4618      	mov	r0, r3
 8017e02:	f7fe fd73 	bl	80168ec <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8017e06:	687b      	ldr	r3, [r7, #4]
 8017e08:	4618      	mov	r0, r3
 8017e0a:	3708      	adds	r7, #8
 8017e0c:	46bd      	mov	sp, r7
 8017e0e:	bdb0      	pop	{r4, r5, r7, pc}

08017e10 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8017e10:	b580      	push	{r7, lr}
 8017e12:	af00      	add	r7, sp, #0
 8017e14:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017e18:	2001      	movs	r0, #1
 8017e1a:	f7ff ff11 	bl	8017c40 <_Z41__static_initialization_and_destruction_0ii>
 8017e1e:	bd80      	pop	{r7, pc}

08017e20 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8017e20:	b580      	push	{r7, lr}
 8017e22:	af00      	add	r7, sp, #0
 8017e24:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017e28:	2000      	movs	r0, #0
 8017e2a:	f7ff ff09 	bl	8017c40 <_Z41__static_initialization_and_destruction_0ii>
 8017e2e:	bd80      	pop	{r7, pc}

08017e30 <_ZdlPv>:
 8017e30:	f003 b9c8 	b.w	801b1c4 <free>

08017e34 <_ZdlPvj>:
 8017e34:	f7ff bffc 	b.w	8017e30 <_ZdlPv>

08017e38 <_ZdaPv>:
 8017e38:	f7ff bffa 	b.w	8017e30 <_ZdlPv>

08017e3c <__cxa_guard_acquire>:
 8017e3c:	6803      	ldr	r3, [r0, #0]
 8017e3e:	07db      	lsls	r3, r3, #31
 8017e40:	d406      	bmi.n	8017e50 <__cxa_guard_acquire+0x14>
 8017e42:	7843      	ldrb	r3, [r0, #1]
 8017e44:	b103      	cbz	r3, 8017e48 <__cxa_guard_acquire+0xc>
 8017e46:	deff      	udf	#255	; 0xff
 8017e48:	2301      	movs	r3, #1
 8017e4a:	7043      	strb	r3, [r0, #1]
 8017e4c:	4618      	mov	r0, r3
 8017e4e:	4770      	bx	lr
 8017e50:	2000      	movs	r0, #0
 8017e52:	4770      	bx	lr

08017e54 <__cxa_guard_release>:
 8017e54:	2301      	movs	r3, #1
 8017e56:	6003      	str	r3, [r0, #0]
 8017e58:	4770      	bx	lr

08017e5a <_Znwj>:
 8017e5a:	2801      	cmp	r0, #1
 8017e5c:	bf38      	it	cc
 8017e5e:	2001      	movcc	r0, #1
 8017e60:	b510      	push	{r4, lr}
 8017e62:	4604      	mov	r4, r0
 8017e64:	4620      	mov	r0, r4
 8017e66:	f003 f9a5 	bl	801b1b4 <malloc>
 8017e6a:	b930      	cbnz	r0, 8017e7a <_Znwj+0x20>
 8017e6c:	f000 f8c2 	bl	8017ff4 <_ZSt15get_new_handlerv>
 8017e70:	b908      	cbnz	r0, 8017e76 <_Znwj+0x1c>
 8017e72:	f003 f8a9 	bl	801afc8 <abort>
 8017e76:	4780      	blx	r0
 8017e78:	e7f4      	b.n	8017e64 <_Znwj+0xa>
 8017e7a:	bd10      	pop	{r4, pc}

08017e7c <_Znaj>:
 8017e7c:	f7ff bfed 	b.w	8017e5a <_Znwj>

08017e80 <_ZSt17__throw_bad_allocv>:
 8017e80:	b508      	push	{r3, lr}
 8017e82:	f003 f8a1 	bl	801afc8 <abort>

08017e86 <_ZSt19__throw_logic_errorPKc>:
 8017e86:	b508      	push	{r3, lr}
 8017e88:	f003 f89e 	bl	801afc8 <abort>

08017e8c <_ZSt20__throw_length_errorPKc>:
 8017e8c:	b508      	push	{r3, lr}
 8017e8e:	f003 f89b 	bl	801afc8 <abort>

08017e92 <_ZSt24__throw_out_of_range_fmtPKcz>:
 8017e92:	b40f      	push	{r0, r1, r2, r3}
 8017e94:	b580      	push	{r7, lr}
 8017e96:	b084      	sub	sp, #16
 8017e98:	af00      	add	r7, sp, #0
 8017e9a:	f107 0418 	add.w	r4, r7, #24
 8017e9e:	f854 2b04 	ldr.w	r2, [r4], #4
 8017ea2:	607a      	str	r2, [r7, #4]
 8017ea4:	4610      	mov	r0, r2
 8017ea6:	f7e8 f9b3 	bl	8000210 <strlen>
 8017eaa:	f200 2307 	addw	r3, r0, #519	; 0x207
 8017eae:	f023 0307 	bic.w	r3, r3, #7
 8017eb2:	ebad 0d03 	sub.w	sp, sp, r3
 8017eb6:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8017eba:	687a      	ldr	r2, [r7, #4]
 8017ebc:	60fc      	str	r4, [r7, #12]
 8017ebe:	4623      	mov	r3, r4
 8017ec0:	4668      	mov	r0, sp
 8017ec2:	f000 f855 	bl	8017f70 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8017ec6:	f003 f87f 	bl	801afc8 <abort>
	...

08017ecc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8017ecc:	b580      	push	{r7, lr}
 8017ece:	b09c      	sub	sp, #112	; 0x70
 8017ed0:	4606      	mov	r6, r0
 8017ed2:	af00      	add	r7, sp, #0
 8017ed4:	460c      	mov	r4, r1
 8017ed6:	1ba4      	subs	r4, r4, r6
 8017ed8:	490e      	ldr	r1, [pc, #56]	; (8017f14 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8017eda:	2269      	movs	r2, #105	; 0x69
 8017edc:	1d38      	adds	r0, r7, #4
 8017ede:	f003 f987 	bl	801b1f0 <memcpy>
 8017ee2:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8017ee6:	f023 0307 	bic.w	r3, r3, #7
 8017eea:	ebad 0d03 	sub.w	sp, sp, r3
 8017eee:	466d      	mov	r5, sp
 8017ef0:	2268      	movs	r2, #104	; 0x68
 8017ef2:	1d39      	adds	r1, r7, #4
 8017ef4:	4628      	mov	r0, r5
 8017ef6:	f003 f97b 	bl	801b1f0 <memcpy>
 8017efa:	4622      	mov	r2, r4
 8017efc:	4631      	mov	r1, r6
 8017efe:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8017f02:	442c      	add	r4, r5
 8017f04:	f003 f974 	bl	801b1f0 <memcpy>
 8017f08:	2300      	movs	r3, #0
 8017f0a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8017f0e:	4628      	mov	r0, r5
 8017f10:	f7ff ffb9 	bl	8017e86 <_ZSt19__throw_logic_errorPKc>
 8017f14:	0803e8c0 	.word	0x0803e8c0

08017f18 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8017f18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f1c:	af00      	add	r7, sp, #0
 8017f1e:	b084      	sub	sp, #16
 8017f20:	466d      	mov	r5, sp
 8017f22:	f105 040c 	add.w	r4, r5, #12
 8017f26:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8017f6c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8017f2a:	4623      	mov	r3, r4
 8017f2c:	f04f 0c0a 	mov.w	ip, #10
 8017f30:	fbb2 f6fc 	udiv	r6, r2, ip
 8017f34:	fb0c 2e16 	mls	lr, ip, r6, r2
 8017f38:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8017f3c:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8017f40:	4696      	mov	lr, r2
 8017f42:	f1be 0f09 	cmp.w	lr, #9
 8017f46:	4632      	mov	r2, r6
 8017f48:	d8f2      	bhi.n	8017f30 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8017f4a:	1ae4      	subs	r4, r4, r3
 8017f4c:	428c      	cmp	r4, r1
 8017f4e:	d809      	bhi.n	8017f64 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8017f50:	f1c4 010c 	rsb	r1, r4, #12
 8017f54:	4622      	mov	r2, r4
 8017f56:	4429      	add	r1, r5
 8017f58:	f003 f94a 	bl	801b1f0 <memcpy>
 8017f5c:	4620      	mov	r0, r4
 8017f5e:	46bd      	mov	sp, r7
 8017f60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f64:	f04f 34ff 	mov.w	r4, #4294967295
 8017f68:	e7f8      	b.n	8017f5c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8017f6a:	bf00      	nop
 8017f6c:	0803e929 	.word	0x0803e929

08017f70 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8017f70:	3901      	subs	r1, #1
 8017f72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f76:	4607      	mov	r7, r0
 8017f78:	4615      	mov	r5, r2
 8017f7a:	eb00 0801 	add.w	r8, r0, r1
 8017f7e:	4604      	mov	r4, r0
 8017f80:	782a      	ldrb	r2, [r5, #0]
 8017f82:	b362      	cbz	r2, 8017fde <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8017f84:	4544      	cmp	r4, r8
 8017f86:	d22e      	bcs.n	8017fe6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8017f88:	2a25      	cmp	r2, #37	; 0x25
 8017f8a:	d107      	bne.n	8017f9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8017f8c:	786a      	ldrb	r2, [r5, #1]
 8017f8e:	2a73      	cmp	r2, #115	; 0x73
 8017f90:	d009      	beq.n	8017fa6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8017f92:	2a7a      	cmp	r2, #122	; 0x7a
 8017f94:	d012      	beq.n	8017fbc <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8017f96:	2a25      	cmp	r2, #37	; 0x25
 8017f98:	d100      	bne.n	8017f9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8017f9a:	3501      	adds	r5, #1
 8017f9c:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017fa0:	f804 2b01 	strb.w	r2, [r4], #1
 8017fa4:	e7ec      	b.n	8017f80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8017fa6:	f853 2b04 	ldr.w	r2, [r3], #4
 8017faa:	3a01      	subs	r2, #1
 8017fac:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8017fb0:	b1e9      	cbz	r1, 8017fee <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 8017fb2:	4544      	cmp	r4, r8
 8017fb4:	d017      	beq.n	8017fe6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8017fb6:	f804 1b01 	strb.w	r1, [r4], #1
 8017fba:	e7f7      	b.n	8017fac <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8017fbc:	78aa      	ldrb	r2, [r5, #2]
 8017fbe:	2a75      	cmp	r2, #117	; 0x75
 8017fc0:	d1ec      	bne.n	8017f9c <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8017fc2:	461e      	mov	r6, r3
 8017fc4:	eba8 0104 	sub.w	r1, r8, r4
 8017fc8:	f856 2b04 	ldr.w	r2, [r6], #4
 8017fcc:	4620      	mov	r0, r4
 8017fce:	f7ff ffa3 	bl	8017f18 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8017fd2:	2800      	cmp	r0, #0
 8017fd4:	dd07      	ble.n	8017fe6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8017fd6:	4404      	add	r4, r0
 8017fd8:	3503      	adds	r5, #3
 8017fda:	4633      	mov	r3, r6
 8017fdc:	e7d0      	b.n	8017f80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8017fde:	7022      	strb	r2, [r4, #0]
 8017fe0:	1be0      	subs	r0, r4, r7
 8017fe2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fe6:	4621      	mov	r1, r4
 8017fe8:	4638      	mov	r0, r7
 8017fea:	f7ff ff6f 	bl	8017ecc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8017fee:	3502      	adds	r5, #2
 8017ff0:	e7c6      	b.n	8017f80 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
	...

08017ff4 <_ZSt15get_new_handlerv>:
 8017ff4:	4b02      	ldr	r3, [pc, #8]	; (8018000 <_ZSt15get_new_handlerv+0xc>)
 8017ff6:	6818      	ldr	r0, [r3, #0]
 8017ff8:	f3bf 8f5b 	dmb	ish
 8017ffc:	4770      	bx	lr
 8017ffe:	bf00      	nop
 8018000:	20007a20 	.word	0x20007a20
 8018004:	00000000 	.word	0x00000000

08018008 <cos>:
 8018008:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801800a:	ec53 2b10 	vmov	r2, r3, d0
 801800e:	4824      	ldr	r0, [pc, #144]	; (80180a0 <cos+0x98>)
 8018010:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018014:	4281      	cmp	r1, r0
 8018016:	dc06      	bgt.n	8018026 <cos+0x1e>
 8018018:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8018098 <cos+0x90>
 801801c:	f001 fe28 	bl	8019c70 <__kernel_cos>
 8018020:	ec51 0b10 	vmov	r0, r1, d0
 8018024:	e007      	b.n	8018036 <cos+0x2e>
 8018026:	481f      	ldr	r0, [pc, #124]	; (80180a4 <cos+0x9c>)
 8018028:	4281      	cmp	r1, r0
 801802a:	dd09      	ble.n	8018040 <cos+0x38>
 801802c:	ee10 0a10 	vmov	r0, s0
 8018030:	4619      	mov	r1, r3
 8018032:	f7e8 f949 	bl	80002c8 <__aeabi_dsub>
 8018036:	ec41 0b10 	vmov	d0, r0, r1
 801803a:	b005      	add	sp, #20
 801803c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018040:	4668      	mov	r0, sp
 8018042:	f001 f941 	bl	80192c8 <__ieee754_rem_pio2>
 8018046:	f000 0003 	and.w	r0, r0, #3
 801804a:	2801      	cmp	r0, #1
 801804c:	d007      	beq.n	801805e <cos+0x56>
 801804e:	2802      	cmp	r0, #2
 8018050:	d012      	beq.n	8018078 <cos+0x70>
 8018052:	b9c0      	cbnz	r0, 8018086 <cos+0x7e>
 8018054:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018058:	ed9d 0b00 	vldr	d0, [sp]
 801805c:	e7de      	b.n	801801c <cos+0x14>
 801805e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018062:	ed9d 0b00 	vldr	d0, [sp]
 8018066:	f002 fa0b 	bl	801a480 <__kernel_sin>
 801806a:	ec53 2b10 	vmov	r2, r3, d0
 801806e:	ee10 0a10 	vmov	r0, s0
 8018072:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018076:	e7de      	b.n	8018036 <cos+0x2e>
 8018078:	ed9d 1b02 	vldr	d1, [sp, #8]
 801807c:	ed9d 0b00 	vldr	d0, [sp]
 8018080:	f001 fdf6 	bl	8019c70 <__kernel_cos>
 8018084:	e7f1      	b.n	801806a <cos+0x62>
 8018086:	ed9d 1b02 	vldr	d1, [sp, #8]
 801808a:	ed9d 0b00 	vldr	d0, [sp]
 801808e:	2001      	movs	r0, #1
 8018090:	f002 f9f6 	bl	801a480 <__kernel_sin>
 8018094:	e7c4      	b.n	8018020 <cos+0x18>
 8018096:	bf00      	nop
	...
 80180a0:	3fe921fb 	.word	0x3fe921fb
 80180a4:	7fefffff 	.word	0x7fefffff

080180a8 <floor>:
 80180a8:	ec51 0b10 	vmov	r0, r1, d0
 80180ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80180b0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80180b4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80180b8:	2e13      	cmp	r6, #19
 80180ba:	ee10 5a10 	vmov	r5, s0
 80180be:	ee10 8a10 	vmov	r8, s0
 80180c2:	460c      	mov	r4, r1
 80180c4:	dc32      	bgt.n	801812c <floor+0x84>
 80180c6:	2e00      	cmp	r6, #0
 80180c8:	da14      	bge.n	80180f4 <floor+0x4c>
 80180ca:	a333      	add	r3, pc, #204	; (adr r3, 8018198 <floor+0xf0>)
 80180cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180d0:	f7e8 f8fc 	bl	80002cc <__adddf3>
 80180d4:	2200      	movs	r2, #0
 80180d6:	2300      	movs	r3, #0
 80180d8:	f7e8 fd3e 	bl	8000b58 <__aeabi_dcmpgt>
 80180dc:	b138      	cbz	r0, 80180ee <floor+0x46>
 80180de:	2c00      	cmp	r4, #0
 80180e0:	da57      	bge.n	8018192 <floor+0xea>
 80180e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80180e6:	431d      	orrs	r5, r3
 80180e8:	d001      	beq.n	80180ee <floor+0x46>
 80180ea:	4c2d      	ldr	r4, [pc, #180]	; (80181a0 <floor+0xf8>)
 80180ec:	2500      	movs	r5, #0
 80180ee:	4621      	mov	r1, r4
 80180f0:	4628      	mov	r0, r5
 80180f2:	e025      	b.n	8018140 <floor+0x98>
 80180f4:	4f2b      	ldr	r7, [pc, #172]	; (80181a4 <floor+0xfc>)
 80180f6:	4137      	asrs	r7, r6
 80180f8:	ea01 0307 	and.w	r3, r1, r7
 80180fc:	4303      	orrs	r3, r0
 80180fe:	d01f      	beq.n	8018140 <floor+0x98>
 8018100:	a325      	add	r3, pc, #148	; (adr r3, 8018198 <floor+0xf0>)
 8018102:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018106:	f7e8 f8e1 	bl	80002cc <__adddf3>
 801810a:	2200      	movs	r2, #0
 801810c:	2300      	movs	r3, #0
 801810e:	f7e8 fd23 	bl	8000b58 <__aeabi_dcmpgt>
 8018112:	2800      	cmp	r0, #0
 8018114:	d0eb      	beq.n	80180ee <floor+0x46>
 8018116:	2c00      	cmp	r4, #0
 8018118:	bfbe      	ittt	lt
 801811a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801811e:	fa43 f606 	asrlt.w	r6, r3, r6
 8018122:	19a4      	addlt	r4, r4, r6
 8018124:	ea24 0407 	bic.w	r4, r4, r7
 8018128:	2500      	movs	r5, #0
 801812a:	e7e0      	b.n	80180ee <floor+0x46>
 801812c:	2e33      	cmp	r6, #51	; 0x33
 801812e:	dd0b      	ble.n	8018148 <floor+0xa0>
 8018130:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8018134:	d104      	bne.n	8018140 <floor+0x98>
 8018136:	ee10 2a10 	vmov	r2, s0
 801813a:	460b      	mov	r3, r1
 801813c:	f7e8 f8c6 	bl	80002cc <__adddf3>
 8018140:	ec41 0b10 	vmov	d0, r0, r1
 8018144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018148:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801814c:	f04f 33ff 	mov.w	r3, #4294967295
 8018150:	fa23 f707 	lsr.w	r7, r3, r7
 8018154:	4207      	tst	r7, r0
 8018156:	d0f3      	beq.n	8018140 <floor+0x98>
 8018158:	a30f      	add	r3, pc, #60	; (adr r3, 8018198 <floor+0xf0>)
 801815a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801815e:	f7e8 f8b5 	bl	80002cc <__adddf3>
 8018162:	2200      	movs	r2, #0
 8018164:	2300      	movs	r3, #0
 8018166:	f7e8 fcf7 	bl	8000b58 <__aeabi_dcmpgt>
 801816a:	2800      	cmp	r0, #0
 801816c:	d0bf      	beq.n	80180ee <floor+0x46>
 801816e:	2c00      	cmp	r4, #0
 8018170:	da02      	bge.n	8018178 <floor+0xd0>
 8018172:	2e14      	cmp	r6, #20
 8018174:	d103      	bne.n	801817e <floor+0xd6>
 8018176:	3401      	adds	r4, #1
 8018178:	ea25 0507 	bic.w	r5, r5, r7
 801817c:	e7b7      	b.n	80180ee <floor+0x46>
 801817e:	2301      	movs	r3, #1
 8018180:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8018184:	fa03 f606 	lsl.w	r6, r3, r6
 8018188:	4435      	add	r5, r6
 801818a:	4545      	cmp	r5, r8
 801818c:	bf38      	it	cc
 801818e:	18e4      	addcc	r4, r4, r3
 8018190:	e7f2      	b.n	8018178 <floor+0xd0>
 8018192:	2500      	movs	r5, #0
 8018194:	462c      	mov	r4, r5
 8018196:	e7aa      	b.n	80180ee <floor+0x46>
 8018198:	8800759c 	.word	0x8800759c
 801819c:	7e37e43c 	.word	0x7e37e43c
 80181a0:	bff00000 	.word	0xbff00000
 80181a4:	000fffff 	.word	0x000fffff

080181a8 <frexp>:
 80181a8:	b570      	push	{r4, r5, r6, lr}
 80181aa:	2100      	movs	r1, #0
 80181ac:	ec55 4b10 	vmov	r4, r5, d0
 80181b0:	6001      	str	r1, [r0, #0]
 80181b2:	4916      	ldr	r1, [pc, #88]	; (801820c <frexp+0x64>)
 80181b4:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80181b8:	428a      	cmp	r2, r1
 80181ba:	4606      	mov	r6, r0
 80181bc:	462b      	mov	r3, r5
 80181be:	dc22      	bgt.n	8018206 <frexp+0x5e>
 80181c0:	ee10 1a10 	vmov	r1, s0
 80181c4:	4311      	orrs	r1, r2
 80181c6:	d01e      	beq.n	8018206 <frexp+0x5e>
 80181c8:	4911      	ldr	r1, [pc, #68]	; (8018210 <frexp+0x68>)
 80181ca:	4029      	ands	r1, r5
 80181cc:	b969      	cbnz	r1, 80181ea <frexp+0x42>
 80181ce:	4b11      	ldr	r3, [pc, #68]	; (8018214 <frexp+0x6c>)
 80181d0:	2200      	movs	r2, #0
 80181d2:	ee10 0a10 	vmov	r0, s0
 80181d6:	4629      	mov	r1, r5
 80181d8:	f7e8 fa2e 	bl	8000638 <__aeabi_dmul>
 80181dc:	460b      	mov	r3, r1
 80181de:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80181e2:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80181e6:	4604      	mov	r4, r0
 80181e8:	6031      	str	r1, [r6, #0]
 80181ea:	6831      	ldr	r1, [r6, #0]
 80181ec:	1512      	asrs	r2, r2, #20
 80181ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80181f2:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80181f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80181fa:	440a      	add	r2, r1
 80181fc:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 8018200:	6032      	str	r2, [r6, #0]
 8018202:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 8018206:	ec45 4b10 	vmov	d0, r4, r5
 801820a:	bd70      	pop	{r4, r5, r6, pc}
 801820c:	7fefffff 	.word	0x7fefffff
 8018210:	7ff00000 	.word	0x7ff00000
 8018214:	43500000 	.word	0x43500000

08018218 <round>:
 8018218:	ec51 0b10 	vmov	r0, r1, d0
 801821c:	b570      	push	{r4, r5, r6, lr}
 801821e:	f3c1 550a 	ubfx	r5, r1, #20, #11
 8018222:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 8018226:	2c13      	cmp	r4, #19
 8018228:	ee10 2a10 	vmov	r2, s0
 801822c:	460b      	mov	r3, r1
 801822e:	dc19      	bgt.n	8018264 <round+0x4c>
 8018230:	2c00      	cmp	r4, #0
 8018232:	da09      	bge.n	8018248 <round+0x30>
 8018234:	3401      	adds	r4, #1
 8018236:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 801823a:	d103      	bne.n	8018244 <round+0x2c>
 801823c:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018240:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8018244:	2100      	movs	r1, #0
 8018246:	e028      	b.n	801829a <round+0x82>
 8018248:	4d15      	ldr	r5, [pc, #84]	; (80182a0 <round+0x88>)
 801824a:	4125      	asrs	r5, r4
 801824c:	ea01 0605 	and.w	r6, r1, r5
 8018250:	4332      	orrs	r2, r6
 8018252:	d00e      	beq.n	8018272 <round+0x5a>
 8018254:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018258:	fa42 f404 	asr.w	r4, r2, r4
 801825c:	4423      	add	r3, r4
 801825e:	ea23 0305 	bic.w	r3, r3, r5
 8018262:	e7ef      	b.n	8018244 <round+0x2c>
 8018264:	2c33      	cmp	r4, #51	; 0x33
 8018266:	dd07      	ble.n	8018278 <round+0x60>
 8018268:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 801826c:	d101      	bne.n	8018272 <round+0x5a>
 801826e:	f7e8 f82d 	bl	80002cc <__adddf3>
 8018272:	ec41 0b10 	vmov	d0, r0, r1
 8018276:	bd70      	pop	{r4, r5, r6, pc}
 8018278:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 801827c:	f04f 35ff 	mov.w	r5, #4294967295
 8018280:	40f5      	lsrs	r5, r6
 8018282:	4228      	tst	r0, r5
 8018284:	d0f5      	beq.n	8018272 <round+0x5a>
 8018286:	2101      	movs	r1, #1
 8018288:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 801828c:	fa01 f404 	lsl.w	r4, r1, r4
 8018290:	1912      	adds	r2, r2, r4
 8018292:	bf28      	it	cs
 8018294:	185b      	addcs	r3, r3, r1
 8018296:	ea22 0105 	bic.w	r1, r2, r5
 801829a:	4608      	mov	r0, r1
 801829c:	4619      	mov	r1, r3
 801829e:	e7e8      	b.n	8018272 <round+0x5a>
 80182a0:	000fffff 	.word	0x000fffff
 80182a4:	00000000 	.word	0x00000000

080182a8 <sin>:
 80182a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80182aa:	ec53 2b10 	vmov	r2, r3, d0
 80182ae:	4826      	ldr	r0, [pc, #152]	; (8018348 <sin+0xa0>)
 80182b0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80182b4:	4281      	cmp	r1, r0
 80182b6:	dc07      	bgt.n	80182c8 <sin+0x20>
 80182b8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8018340 <sin+0x98>
 80182bc:	2000      	movs	r0, #0
 80182be:	f002 f8df 	bl	801a480 <__kernel_sin>
 80182c2:	ec51 0b10 	vmov	r0, r1, d0
 80182c6:	e007      	b.n	80182d8 <sin+0x30>
 80182c8:	4820      	ldr	r0, [pc, #128]	; (801834c <sin+0xa4>)
 80182ca:	4281      	cmp	r1, r0
 80182cc:	dd09      	ble.n	80182e2 <sin+0x3a>
 80182ce:	ee10 0a10 	vmov	r0, s0
 80182d2:	4619      	mov	r1, r3
 80182d4:	f7e7 fff8 	bl	80002c8 <__aeabi_dsub>
 80182d8:	ec41 0b10 	vmov	d0, r0, r1
 80182dc:	b005      	add	sp, #20
 80182de:	f85d fb04 	ldr.w	pc, [sp], #4
 80182e2:	4668      	mov	r0, sp
 80182e4:	f000 fff0 	bl	80192c8 <__ieee754_rem_pio2>
 80182e8:	f000 0003 	and.w	r0, r0, #3
 80182ec:	2801      	cmp	r0, #1
 80182ee:	d008      	beq.n	8018302 <sin+0x5a>
 80182f0:	2802      	cmp	r0, #2
 80182f2:	d00d      	beq.n	8018310 <sin+0x68>
 80182f4:	b9d0      	cbnz	r0, 801832c <sin+0x84>
 80182f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80182fa:	ed9d 0b00 	vldr	d0, [sp]
 80182fe:	2001      	movs	r0, #1
 8018300:	e7dd      	b.n	80182be <sin+0x16>
 8018302:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018306:	ed9d 0b00 	vldr	d0, [sp]
 801830a:	f001 fcb1 	bl	8019c70 <__kernel_cos>
 801830e:	e7d8      	b.n	80182c2 <sin+0x1a>
 8018310:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018314:	ed9d 0b00 	vldr	d0, [sp]
 8018318:	2001      	movs	r0, #1
 801831a:	f002 f8b1 	bl	801a480 <__kernel_sin>
 801831e:	ec53 2b10 	vmov	r2, r3, d0
 8018322:	ee10 0a10 	vmov	r0, s0
 8018326:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801832a:	e7d5      	b.n	80182d8 <sin+0x30>
 801832c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018330:	ed9d 0b00 	vldr	d0, [sp]
 8018334:	f001 fc9c 	bl	8019c70 <__kernel_cos>
 8018338:	e7f1      	b.n	801831e <sin+0x76>
 801833a:	bf00      	nop
 801833c:	f3af 8000 	nop.w
	...
 8018348:	3fe921fb 	.word	0x3fe921fb
 801834c:	7fefffff 	.word	0x7fefffff

08018350 <ceilf>:
 8018350:	ee10 3a10 	vmov	r3, s0
 8018354:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018358:	3a7f      	subs	r2, #127	; 0x7f
 801835a:	2a16      	cmp	r2, #22
 801835c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018360:	dc2a      	bgt.n	80183b8 <ceilf+0x68>
 8018362:	2a00      	cmp	r2, #0
 8018364:	da11      	bge.n	801838a <ceilf+0x3a>
 8018366:	eddf 7a19 	vldr	s15, [pc, #100]	; 80183cc <ceilf+0x7c>
 801836a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801836e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018376:	dd05      	ble.n	8018384 <ceilf+0x34>
 8018378:	2b00      	cmp	r3, #0
 801837a:	db23      	blt.n	80183c4 <ceilf+0x74>
 801837c:	2900      	cmp	r1, #0
 801837e:	bf18      	it	ne
 8018380:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 8018384:	ee00 3a10 	vmov	s0, r3
 8018388:	4770      	bx	lr
 801838a:	4911      	ldr	r1, [pc, #68]	; (80183d0 <ceilf+0x80>)
 801838c:	4111      	asrs	r1, r2
 801838e:	420b      	tst	r3, r1
 8018390:	d0fa      	beq.n	8018388 <ceilf+0x38>
 8018392:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80183cc <ceilf+0x7c>
 8018396:	ee30 0a27 	vadd.f32	s0, s0, s15
 801839a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801839e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80183a2:	ddef      	ble.n	8018384 <ceilf+0x34>
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	bfc2      	ittt	gt
 80183a8:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 80183ac:	fa40 f202 	asrgt.w	r2, r0, r2
 80183b0:	189b      	addgt	r3, r3, r2
 80183b2:	ea23 0301 	bic.w	r3, r3, r1
 80183b6:	e7e5      	b.n	8018384 <ceilf+0x34>
 80183b8:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80183bc:	d3e4      	bcc.n	8018388 <ceilf+0x38>
 80183be:	ee30 0a00 	vadd.f32	s0, s0, s0
 80183c2:	4770      	bx	lr
 80183c4:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80183c8:	e7dc      	b.n	8018384 <ceilf+0x34>
 80183ca:	bf00      	nop
 80183cc:	7149f2ca 	.word	0x7149f2ca
 80183d0:	007fffff 	.word	0x007fffff

080183d4 <cosf>:
 80183d4:	ee10 3a10 	vmov	r3, s0
 80183d8:	b507      	push	{r0, r1, r2, lr}
 80183da:	4a1c      	ldr	r2, [pc, #112]	; (801844c <cosf+0x78>)
 80183dc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80183e0:	4293      	cmp	r3, r2
 80183e2:	dc04      	bgt.n	80183ee <cosf+0x1a>
 80183e4:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8018450 <cosf+0x7c>
 80183e8:	f002 f908 	bl	801a5fc <__kernel_cosf>
 80183ec:	e004      	b.n	80183f8 <cosf+0x24>
 80183ee:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80183f2:	db04      	blt.n	80183fe <cosf+0x2a>
 80183f4:	ee30 0a40 	vsub.f32	s0, s0, s0
 80183f8:	b003      	add	sp, #12
 80183fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80183fe:	4668      	mov	r0, sp
 8018400:	f001 faf4 	bl	80199ec <__ieee754_rem_pio2f>
 8018404:	f000 0003 	and.w	r0, r0, #3
 8018408:	2801      	cmp	r0, #1
 801840a:	d007      	beq.n	801841c <cosf+0x48>
 801840c:	2802      	cmp	r0, #2
 801840e:	d00e      	beq.n	801842e <cosf+0x5a>
 8018410:	b9a0      	cbnz	r0, 801843c <cosf+0x68>
 8018412:	eddd 0a01 	vldr	s1, [sp, #4]
 8018416:	ed9d 0a00 	vldr	s0, [sp]
 801841a:	e7e5      	b.n	80183e8 <cosf+0x14>
 801841c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018420:	ed9d 0a00 	vldr	s0, [sp]
 8018424:	f002 fbd4 	bl	801abd0 <__kernel_sinf>
 8018428:	eeb1 0a40 	vneg.f32	s0, s0
 801842c:	e7e4      	b.n	80183f8 <cosf+0x24>
 801842e:	eddd 0a01 	vldr	s1, [sp, #4]
 8018432:	ed9d 0a00 	vldr	s0, [sp]
 8018436:	f002 f8e1 	bl	801a5fc <__kernel_cosf>
 801843a:	e7f5      	b.n	8018428 <cosf+0x54>
 801843c:	eddd 0a01 	vldr	s1, [sp, #4]
 8018440:	ed9d 0a00 	vldr	s0, [sp]
 8018444:	2001      	movs	r0, #1
 8018446:	f002 fbc3 	bl	801abd0 <__kernel_sinf>
 801844a:	e7d5      	b.n	80183f8 <cosf+0x24>
 801844c:	3f490fd8 	.word	0x3f490fd8
 8018450:	00000000 	.word	0x00000000

08018454 <floorf>:
 8018454:	ee10 3a10 	vmov	r3, s0
 8018458:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801845c:	3a7f      	subs	r2, #127	; 0x7f
 801845e:	2a16      	cmp	r2, #22
 8018460:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018464:	dc2a      	bgt.n	80184bc <floorf+0x68>
 8018466:	2a00      	cmp	r2, #0
 8018468:	da11      	bge.n	801848e <floorf+0x3a>
 801846a:	eddf 7a18 	vldr	s15, [pc, #96]	; 80184cc <floorf+0x78>
 801846e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018472:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018476:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801847a:	dd05      	ble.n	8018488 <floorf+0x34>
 801847c:	2b00      	cmp	r3, #0
 801847e:	da23      	bge.n	80184c8 <floorf+0x74>
 8018480:	4a13      	ldr	r2, [pc, #76]	; (80184d0 <floorf+0x7c>)
 8018482:	2900      	cmp	r1, #0
 8018484:	bf18      	it	ne
 8018486:	4613      	movne	r3, r2
 8018488:	ee00 3a10 	vmov	s0, r3
 801848c:	4770      	bx	lr
 801848e:	4911      	ldr	r1, [pc, #68]	; (80184d4 <floorf+0x80>)
 8018490:	4111      	asrs	r1, r2
 8018492:	420b      	tst	r3, r1
 8018494:	d0fa      	beq.n	801848c <floorf+0x38>
 8018496:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80184cc <floorf+0x78>
 801849a:	ee30 0a27 	vadd.f32	s0, s0, s15
 801849e:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 80184a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80184a6:	ddef      	ble.n	8018488 <floorf+0x34>
 80184a8:	2b00      	cmp	r3, #0
 80184aa:	bfbe      	ittt	lt
 80184ac:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 80184b0:	fa40 f202 	asrlt.w	r2, r0, r2
 80184b4:	189b      	addlt	r3, r3, r2
 80184b6:	ea23 0301 	bic.w	r3, r3, r1
 80184ba:	e7e5      	b.n	8018488 <floorf+0x34>
 80184bc:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80184c0:	d3e4      	bcc.n	801848c <floorf+0x38>
 80184c2:	ee30 0a00 	vadd.f32	s0, s0, s0
 80184c6:	4770      	bx	lr
 80184c8:	2300      	movs	r3, #0
 80184ca:	e7dd      	b.n	8018488 <floorf+0x34>
 80184cc:	7149f2ca 	.word	0x7149f2ca
 80184d0:	bf800000 	.word	0xbf800000
 80184d4:	007fffff 	.word	0x007fffff

080184d8 <fmaf>:
 80184d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184da:	ee10 0a10 	vmov	r0, s0
 80184de:	ee10 7a90 	vmov	r7, s1
 80184e2:	ee11 6a10 	vmov	r6, s2
 80184e6:	f7e8 f84f 	bl	8000588 <__aeabi_f2d>
 80184ea:	4604      	mov	r4, r0
 80184ec:	4638      	mov	r0, r7
 80184ee:	460d      	mov	r5, r1
 80184f0:	f7e8 f84a 	bl	8000588 <__aeabi_f2d>
 80184f4:	4602      	mov	r2, r0
 80184f6:	460b      	mov	r3, r1
 80184f8:	4620      	mov	r0, r4
 80184fa:	4629      	mov	r1, r5
 80184fc:	f7e8 f89c 	bl	8000638 <__aeabi_dmul>
 8018500:	4604      	mov	r4, r0
 8018502:	4630      	mov	r0, r6
 8018504:	460d      	mov	r5, r1
 8018506:	f7e8 f83f 	bl	8000588 <__aeabi_f2d>
 801850a:	4602      	mov	r2, r0
 801850c:	460b      	mov	r3, r1
 801850e:	4620      	mov	r0, r4
 8018510:	4629      	mov	r1, r5
 8018512:	f7e7 fedb 	bl	80002cc <__adddf3>
 8018516:	f7e8 fb87 	bl	8000c28 <__aeabi_d2f>
 801851a:	ee00 0a10 	vmov	s0, r0
 801851e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018520 <roundf>:
 8018520:	ee10 0a10 	vmov	r0, s0
 8018524:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018528:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 801852c:	2a16      	cmp	r2, #22
 801852e:	dc15      	bgt.n	801855c <roundf+0x3c>
 8018530:	2a00      	cmp	r2, #0
 8018532:	da08      	bge.n	8018546 <roundf+0x26>
 8018534:	3201      	adds	r2, #1
 8018536:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 801853a:	d101      	bne.n	8018540 <roundf+0x20>
 801853c:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018540:	ee00 3a10 	vmov	s0, r3
 8018544:	4770      	bx	lr
 8018546:	4908      	ldr	r1, [pc, #32]	; (8018568 <roundf+0x48>)
 8018548:	4111      	asrs	r1, r2
 801854a:	4208      	tst	r0, r1
 801854c:	d0fa      	beq.n	8018544 <roundf+0x24>
 801854e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8018552:	4113      	asrs	r3, r2
 8018554:	4403      	add	r3, r0
 8018556:	ea23 0301 	bic.w	r3, r3, r1
 801855a:	e7f1      	b.n	8018540 <roundf+0x20>
 801855c:	2a80      	cmp	r2, #128	; 0x80
 801855e:	d1f1      	bne.n	8018544 <roundf+0x24>
 8018560:	ee30 0a00 	vadd.f32	s0, s0, s0
 8018564:	4770      	bx	lr
 8018566:	bf00      	nop
 8018568:	007fffff 	.word	0x007fffff

0801856c <sinf>:
 801856c:	ee10 3a10 	vmov	r3, s0
 8018570:	b507      	push	{r0, r1, r2, lr}
 8018572:	4a1d      	ldr	r2, [pc, #116]	; (80185e8 <sinf+0x7c>)
 8018574:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018578:	4293      	cmp	r3, r2
 801857a:	dc05      	bgt.n	8018588 <sinf+0x1c>
 801857c:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80185ec <sinf+0x80>
 8018580:	2000      	movs	r0, #0
 8018582:	f002 fb25 	bl	801abd0 <__kernel_sinf>
 8018586:	e004      	b.n	8018592 <sinf+0x26>
 8018588:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 801858c:	db04      	blt.n	8018598 <sinf+0x2c>
 801858e:	ee30 0a40 	vsub.f32	s0, s0, s0
 8018592:	b003      	add	sp, #12
 8018594:	f85d fb04 	ldr.w	pc, [sp], #4
 8018598:	4668      	mov	r0, sp
 801859a:	f001 fa27 	bl	80199ec <__ieee754_rem_pio2f>
 801859e:	f000 0003 	and.w	r0, r0, #3
 80185a2:	2801      	cmp	r0, #1
 80185a4:	d008      	beq.n	80185b8 <sinf+0x4c>
 80185a6:	2802      	cmp	r0, #2
 80185a8:	d00d      	beq.n	80185c6 <sinf+0x5a>
 80185aa:	b9b0      	cbnz	r0, 80185da <sinf+0x6e>
 80185ac:	eddd 0a01 	vldr	s1, [sp, #4]
 80185b0:	ed9d 0a00 	vldr	s0, [sp]
 80185b4:	2001      	movs	r0, #1
 80185b6:	e7e4      	b.n	8018582 <sinf+0x16>
 80185b8:	eddd 0a01 	vldr	s1, [sp, #4]
 80185bc:	ed9d 0a00 	vldr	s0, [sp]
 80185c0:	f002 f81c 	bl	801a5fc <__kernel_cosf>
 80185c4:	e7e5      	b.n	8018592 <sinf+0x26>
 80185c6:	eddd 0a01 	vldr	s1, [sp, #4]
 80185ca:	ed9d 0a00 	vldr	s0, [sp]
 80185ce:	2001      	movs	r0, #1
 80185d0:	f002 fafe 	bl	801abd0 <__kernel_sinf>
 80185d4:	eeb1 0a40 	vneg.f32	s0, s0
 80185d8:	e7db      	b.n	8018592 <sinf+0x26>
 80185da:	eddd 0a01 	vldr	s1, [sp, #4]
 80185de:	ed9d 0a00 	vldr	s0, [sp]
 80185e2:	f002 f80b 	bl	801a5fc <__kernel_cosf>
 80185e6:	e7f5      	b.n	80185d4 <sinf+0x68>
 80185e8:	3f490fd8 	.word	0x3f490fd8
 80185ec:	00000000 	.word	0x00000000

080185f0 <pow>:
 80185f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185f4:	ec59 8b10 	vmov	r8, r9, d0
 80185f8:	ec57 6b11 	vmov	r6, r7, d1
 80185fc:	f000 f940 	bl	8018880 <__ieee754_pow>
 8018600:	4b4e      	ldr	r3, [pc, #312]	; (801873c <pow+0x14c>)
 8018602:	f993 3000 	ldrsb.w	r3, [r3]
 8018606:	3301      	adds	r3, #1
 8018608:	ec55 4b10 	vmov	r4, r5, d0
 801860c:	d015      	beq.n	801863a <pow+0x4a>
 801860e:	4632      	mov	r2, r6
 8018610:	463b      	mov	r3, r7
 8018612:	4630      	mov	r0, r6
 8018614:	4639      	mov	r1, r7
 8018616:	f7e8 faa9 	bl	8000b6c <__aeabi_dcmpun>
 801861a:	b970      	cbnz	r0, 801863a <pow+0x4a>
 801861c:	4642      	mov	r2, r8
 801861e:	464b      	mov	r3, r9
 8018620:	4640      	mov	r0, r8
 8018622:	4649      	mov	r1, r9
 8018624:	f7e8 faa2 	bl	8000b6c <__aeabi_dcmpun>
 8018628:	2200      	movs	r2, #0
 801862a:	2300      	movs	r3, #0
 801862c:	b148      	cbz	r0, 8018642 <pow+0x52>
 801862e:	4630      	mov	r0, r6
 8018630:	4639      	mov	r1, r7
 8018632:	f7e8 fa69 	bl	8000b08 <__aeabi_dcmpeq>
 8018636:	2800      	cmp	r0, #0
 8018638:	d17d      	bne.n	8018736 <pow+0x146>
 801863a:	ec45 4b10 	vmov	d0, r4, r5
 801863e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8018642:	4640      	mov	r0, r8
 8018644:	4649      	mov	r1, r9
 8018646:	f7e8 fa5f 	bl	8000b08 <__aeabi_dcmpeq>
 801864a:	b1e0      	cbz	r0, 8018686 <pow+0x96>
 801864c:	2200      	movs	r2, #0
 801864e:	2300      	movs	r3, #0
 8018650:	4630      	mov	r0, r6
 8018652:	4639      	mov	r1, r7
 8018654:	f7e8 fa58 	bl	8000b08 <__aeabi_dcmpeq>
 8018658:	2800      	cmp	r0, #0
 801865a:	d16c      	bne.n	8018736 <pow+0x146>
 801865c:	ec47 6b10 	vmov	d0, r6, r7
 8018660:	f002 fb07 	bl	801ac72 <finite>
 8018664:	2800      	cmp	r0, #0
 8018666:	d0e8      	beq.n	801863a <pow+0x4a>
 8018668:	2200      	movs	r2, #0
 801866a:	2300      	movs	r3, #0
 801866c:	4630      	mov	r0, r6
 801866e:	4639      	mov	r1, r7
 8018670:	f7e8 fa54 	bl	8000b1c <__aeabi_dcmplt>
 8018674:	2800      	cmp	r0, #0
 8018676:	d0e0      	beq.n	801863a <pow+0x4a>
 8018678:	f002 fcda 	bl	801b030 <__errno>
 801867c:	2321      	movs	r3, #33	; 0x21
 801867e:	6003      	str	r3, [r0, #0]
 8018680:	2400      	movs	r4, #0
 8018682:	4d2f      	ldr	r5, [pc, #188]	; (8018740 <pow+0x150>)
 8018684:	e7d9      	b.n	801863a <pow+0x4a>
 8018686:	ec45 4b10 	vmov	d0, r4, r5
 801868a:	f002 faf2 	bl	801ac72 <finite>
 801868e:	bbb8      	cbnz	r0, 8018700 <pow+0x110>
 8018690:	ec49 8b10 	vmov	d0, r8, r9
 8018694:	f002 faed 	bl	801ac72 <finite>
 8018698:	b390      	cbz	r0, 8018700 <pow+0x110>
 801869a:	ec47 6b10 	vmov	d0, r6, r7
 801869e:	f002 fae8 	bl	801ac72 <finite>
 80186a2:	b368      	cbz	r0, 8018700 <pow+0x110>
 80186a4:	4622      	mov	r2, r4
 80186a6:	462b      	mov	r3, r5
 80186a8:	4620      	mov	r0, r4
 80186aa:	4629      	mov	r1, r5
 80186ac:	f7e8 fa5e 	bl	8000b6c <__aeabi_dcmpun>
 80186b0:	b160      	cbz	r0, 80186cc <pow+0xdc>
 80186b2:	f002 fcbd 	bl	801b030 <__errno>
 80186b6:	2321      	movs	r3, #33	; 0x21
 80186b8:	6003      	str	r3, [r0, #0]
 80186ba:	2200      	movs	r2, #0
 80186bc:	2300      	movs	r3, #0
 80186be:	4610      	mov	r0, r2
 80186c0:	4619      	mov	r1, r3
 80186c2:	f7e8 f8e3 	bl	800088c <__aeabi_ddiv>
 80186c6:	4604      	mov	r4, r0
 80186c8:	460d      	mov	r5, r1
 80186ca:	e7b6      	b.n	801863a <pow+0x4a>
 80186cc:	f002 fcb0 	bl	801b030 <__errno>
 80186d0:	2322      	movs	r3, #34	; 0x22
 80186d2:	6003      	str	r3, [r0, #0]
 80186d4:	2200      	movs	r2, #0
 80186d6:	2300      	movs	r3, #0
 80186d8:	4640      	mov	r0, r8
 80186da:	4649      	mov	r1, r9
 80186dc:	f7e8 fa1e 	bl	8000b1c <__aeabi_dcmplt>
 80186e0:	2400      	movs	r4, #0
 80186e2:	b158      	cbz	r0, 80186fc <pow+0x10c>
 80186e4:	ec47 6b10 	vmov	d0, r6, r7
 80186e8:	f002 fad6 	bl	801ac98 <rint>
 80186ec:	4632      	mov	r2, r6
 80186ee:	ec51 0b10 	vmov	r0, r1, d0
 80186f2:	463b      	mov	r3, r7
 80186f4:	f7e8 fa08 	bl	8000b08 <__aeabi_dcmpeq>
 80186f8:	2800      	cmp	r0, #0
 80186fa:	d0c2      	beq.n	8018682 <pow+0x92>
 80186fc:	4d11      	ldr	r5, [pc, #68]	; (8018744 <pow+0x154>)
 80186fe:	e79c      	b.n	801863a <pow+0x4a>
 8018700:	2200      	movs	r2, #0
 8018702:	2300      	movs	r3, #0
 8018704:	4620      	mov	r0, r4
 8018706:	4629      	mov	r1, r5
 8018708:	f7e8 f9fe 	bl	8000b08 <__aeabi_dcmpeq>
 801870c:	2800      	cmp	r0, #0
 801870e:	d094      	beq.n	801863a <pow+0x4a>
 8018710:	ec49 8b10 	vmov	d0, r8, r9
 8018714:	f002 faad 	bl	801ac72 <finite>
 8018718:	2800      	cmp	r0, #0
 801871a:	d08e      	beq.n	801863a <pow+0x4a>
 801871c:	ec47 6b10 	vmov	d0, r6, r7
 8018720:	f002 faa7 	bl	801ac72 <finite>
 8018724:	2800      	cmp	r0, #0
 8018726:	d088      	beq.n	801863a <pow+0x4a>
 8018728:	f002 fc82 	bl	801b030 <__errno>
 801872c:	2322      	movs	r3, #34	; 0x22
 801872e:	6003      	str	r3, [r0, #0]
 8018730:	2400      	movs	r4, #0
 8018732:	2500      	movs	r5, #0
 8018734:	e781      	b.n	801863a <pow+0x4a>
 8018736:	4d04      	ldr	r5, [pc, #16]	; (8018748 <pow+0x158>)
 8018738:	2400      	movs	r4, #0
 801873a:	e77e      	b.n	801863a <pow+0x4a>
 801873c:	20000514 	.word	0x20000514
 8018740:	fff00000 	.word	0xfff00000
 8018744:	7ff00000 	.word	0x7ff00000
 8018748:	3ff00000 	.word	0x3ff00000

0801874c <sqrt>:
 801874c:	b538      	push	{r3, r4, r5, lr}
 801874e:	ed2d 8b02 	vpush	{d8}
 8018752:	ec55 4b10 	vmov	r4, r5, d0
 8018756:	f000 ffc1 	bl	80196dc <__ieee754_sqrt>
 801875a:	4b15      	ldr	r3, [pc, #84]	; (80187b0 <sqrt+0x64>)
 801875c:	eeb0 8a40 	vmov.f32	s16, s0
 8018760:	eef0 8a60 	vmov.f32	s17, s1
 8018764:	f993 3000 	ldrsb.w	r3, [r3]
 8018768:	3301      	adds	r3, #1
 801876a:	d019      	beq.n	80187a0 <sqrt+0x54>
 801876c:	4622      	mov	r2, r4
 801876e:	462b      	mov	r3, r5
 8018770:	4620      	mov	r0, r4
 8018772:	4629      	mov	r1, r5
 8018774:	f7e8 f9fa 	bl	8000b6c <__aeabi_dcmpun>
 8018778:	b990      	cbnz	r0, 80187a0 <sqrt+0x54>
 801877a:	2200      	movs	r2, #0
 801877c:	2300      	movs	r3, #0
 801877e:	4620      	mov	r0, r4
 8018780:	4629      	mov	r1, r5
 8018782:	f7e8 f9cb 	bl	8000b1c <__aeabi_dcmplt>
 8018786:	b158      	cbz	r0, 80187a0 <sqrt+0x54>
 8018788:	f002 fc52 	bl	801b030 <__errno>
 801878c:	2321      	movs	r3, #33	; 0x21
 801878e:	6003      	str	r3, [r0, #0]
 8018790:	2200      	movs	r2, #0
 8018792:	2300      	movs	r3, #0
 8018794:	4610      	mov	r0, r2
 8018796:	4619      	mov	r1, r3
 8018798:	f7e8 f878 	bl	800088c <__aeabi_ddiv>
 801879c:	ec41 0b18 	vmov	d8, r0, r1
 80187a0:	eeb0 0a48 	vmov.f32	s0, s16
 80187a4:	eef0 0a68 	vmov.f32	s1, s17
 80187a8:	ecbd 8b02 	vpop	{d8}
 80187ac:	bd38      	pop	{r3, r4, r5, pc}
 80187ae:	bf00      	nop
 80187b0:	20000514 	.word	0x20000514

080187b4 <expf>:
 80187b4:	b508      	push	{r3, lr}
 80187b6:	ed2d 8b02 	vpush	{d8}
 80187ba:	eef0 8a40 	vmov.f32	s17, s0
 80187be:	f001 f841 	bl	8019844 <__ieee754_expf>
 80187c2:	4b16      	ldr	r3, [pc, #88]	; (801881c <expf+0x68>)
 80187c4:	f993 3000 	ldrsb.w	r3, [r3]
 80187c8:	3301      	adds	r3, #1
 80187ca:	eeb0 8a40 	vmov.f32	s16, s0
 80187ce:	d011      	beq.n	80187f4 <expf+0x40>
 80187d0:	eeb0 0a68 	vmov.f32	s0, s17
 80187d4:	f002 fb79 	bl	801aeca <finitef>
 80187d8:	b160      	cbz	r0, 80187f4 <expf+0x40>
 80187da:	eddf 7a11 	vldr	s15, [pc, #68]	; 8018820 <expf+0x6c>
 80187de:	eef4 8ae7 	vcmpe.f32	s17, s15
 80187e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187e6:	dd0a      	ble.n	80187fe <expf+0x4a>
 80187e8:	f002 fc22 	bl	801b030 <__errno>
 80187ec:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 8018824 <expf+0x70>
 80187f0:	2322      	movs	r3, #34	; 0x22
 80187f2:	6003      	str	r3, [r0, #0]
 80187f4:	eeb0 0a48 	vmov.f32	s0, s16
 80187f8:	ecbd 8b02 	vpop	{d8}
 80187fc:	bd08      	pop	{r3, pc}
 80187fe:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8018828 <expf+0x74>
 8018802:	eef4 8ae7 	vcmpe.f32	s17, s15
 8018806:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801880a:	d5f3      	bpl.n	80187f4 <expf+0x40>
 801880c:	f002 fc10 	bl	801b030 <__errno>
 8018810:	2322      	movs	r3, #34	; 0x22
 8018812:	ed9f 8a06 	vldr	s16, [pc, #24]	; 801882c <expf+0x78>
 8018816:	6003      	str	r3, [r0, #0]
 8018818:	e7ec      	b.n	80187f4 <expf+0x40>
 801881a:	bf00      	nop
 801881c:	20000514 	.word	0x20000514
 8018820:	42b17180 	.word	0x42b17180
 8018824:	7f800000 	.word	0x7f800000
 8018828:	c2cff1b5 	.word	0xc2cff1b5
 801882c:	00000000 	.word	0x00000000

08018830 <sqrtf>:
 8018830:	b508      	push	{r3, lr}
 8018832:	ed2d 8b02 	vpush	{d8}
 8018836:	eeb0 8a40 	vmov.f32	s16, s0
 801883a:	f001 fa13 	bl	8019c64 <__ieee754_sqrtf>
 801883e:	4b0d      	ldr	r3, [pc, #52]	; (8018874 <sqrtf+0x44>)
 8018840:	f993 3000 	ldrsb.w	r3, [r3]
 8018844:	3301      	adds	r3, #1
 8018846:	d011      	beq.n	801886c <sqrtf+0x3c>
 8018848:	eeb4 8a48 	vcmp.f32	s16, s16
 801884c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018850:	d60c      	bvs.n	801886c <sqrtf+0x3c>
 8018852:	eddf 8a09 	vldr	s17, [pc, #36]	; 8018878 <sqrtf+0x48>
 8018856:	eeb4 8ae8 	vcmpe.f32	s16, s17
 801885a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801885e:	d505      	bpl.n	801886c <sqrtf+0x3c>
 8018860:	f002 fbe6 	bl	801b030 <__errno>
 8018864:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018868:	2321      	movs	r3, #33	; 0x21
 801886a:	6003      	str	r3, [r0, #0]
 801886c:	ecbd 8b02 	vpop	{d8}
 8018870:	bd08      	pop	{r3, pc}
 8018872:	bf00      	nop
 8018874:	20000514 	.word	0x20000514
	...

08018880 <__ieee754_pow>:
 8018880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018884:	ed2d 8b06 	vpush	{d8-d10}
 8018888:	b08d      	sub	sp, #52	; 0x34
 801888a:	ed8d 1b02 	vstr	d1, [sp, #8]
 801888e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8018892:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8018896:	ea56 0100 	orrs.w	r1, r6, r0
 801889a:	ec53 2b10 	vmov	r2, r3, d0
 801889e:	f000 84d1 	beq.w	8019244 <__ieee754_pow+0x9c4>
 80188a2:	497f      	ldr	r1, [pc, #508]	; (8018aa0 <__ieee754_pow+0x220>)
 80188a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80188a8:	428c      	cmp	r4, r1
 80188aa:	ee10 8a10 	vmov	r8, s0
 80188ae:	4699      	mov	r9, r3
 80188b0:	dc09      	bgt.n	80188c6 <__ieee754_pow+0x46>
 80188b2:	d103      	bne.n	80188bc <__ieee754_pow+0x3c>
 80188b4:	b97a      	cbnz	r2, 80188d6 <__ieee754_pow+0x56>
 80188b6:	42a6      	cmp	r6, r4
 80188b8:	dd02      	ble.n	80188c0 <__ieee754_pow+0x40>
 80188ba:	e00c      	b.n	80188d6 <__ieee754_pow+0x56>
 80188bc:	428e      	cmp	r6, r1
 80188be:	dc02      	bgt.n	80188c6 <__ieee754_pow+0x46>
 80188c0:	428e      	cmp	r6, r1
 80188c2:	d110      	bne.n	80188e6 <__ieee754_pow+0x66>
 80188c4:	b178      	cbz	r0, 80188e6 <__ieee754_pow+0x66>
 80188c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80188ca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80188ce:	ea54 0308 	orrs.w	r3, r4, r8
 80188d2:	f000 84b7 	beq.w	8019244 <__ieee754_pow+0x9c4>
 80188d6:	4873      	ldr	r0, [pc, #460]	; (8018aa4 <__ieee754_pow+0x224>)
 80188d8:	b00d      	add	sp, #52	; 0x34
 80188da:	ecbd 8b06 	vpop	{d8-d10}
 80188de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188e2:	f002 b9d1 	b.w	801ac88 <nan>
 80188e6:	f1b9 0f00 	cmp.w	r9, #0
 80188ea:	da36      	bge.n	801895a <__ieee754_pow+0xda>
 80188ec:	496e      	ldr	r1, [pc, #440]	; (8018aa8 <__ieee754_pow+0x228>)
 80188ee:	428e      	cmp	r6, r1
 80188f0:	dc51      	bgt.n	8018996 <__ieee754_pow+0x116>
 80188f2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80188f6:	428e      	cmp	r6, r1
 80188f8:	f340 84af 	ble.w	801925a <__ieee754_pow+0x9da>
 80188fc:	1531      	asrs	r1, r6, #20
 80188fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8018902:	2914      	cmp	r1, #20
 8018904:	dd0f      	ble.n	8018926 <__ieee754_pow+0xa6>
 8018906:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 801890a:	fa20 fc01 	lsr.w	ip, r0, r1
 801890e:	fa0c f101 	lsl.w	r1, ip, r1
 8018912:	4281      	cmp	r1, r0
 8018914:	f040 84a1 	bne.w	801925a <__ieee754_pow+0x9da>
 8018918:	f00c 0c01 	and.w	ip, ip, #1
 801891c:	f1cc 0102 	rsb	r1, ip, #2
 8018920:	9100      	str	r1, [sp, #0]
 8018922:	b180      	cbz	r0, 8018946 <__ieee754_pow+0xc6>
 8018924:	e059      	b.n	80189da <__ieee754_pow+0x15a>
 8018926:	2800      	cmp	r0, #0
 8018928:	d155      	bne.n	80189d6 <__ieee754_pow+0x156>
 801892a:	f1c1 0114 	rsb	r1, r1, #20
 801892e:	fa46 fc01 	asr.w	ip, r6, r1
 8018932:	fa0c f101 	lsl.w	r1, ip, r1
 8018936:	42b1      	cmp	r1, r6
 8018938:	f040 848c 	bne.w	8019254 <__ieee754_pow+0x9d4>
 801893c:	f00c 0c01 	and.w	ip, ip, #1
 8018940:	f1cc 0102 	rsb	r1, ip, #2
 8018944:	9100      	str	r1, [sp, #0]
 8018946:	4959      	ldr	r1, [pc, #356]	; (8018aac <__ieee754_pow+0x22c>)
 8018948:	428e      	cmp	r6, r1
 801894a:	d12d      	bne.n	80189a8 <__ieee754_pow+0x128>
 801894c:	2f00      	cmp	r7, #0
 801894e:	da79      	bge.n	8018a44 <__ieee754_pow+0x1c4>
 8018950:	4956      	ldr	r1, [pc, #344]	; (8018aac <__ieee754_pow+0x22c>)
 8018952:	2000      	movs	r0, #0
 8018954:	f7e7 ff9a 	bl	800088c <__aeabi_ddiv>
 8018958:	e016      	b.n	8018988 <__ieee754_pow+0x108>
 801895a:	2100      	movs	r1, #0
 801895c:	9100      	str	r1, [sp, #0]
 801895e:	2800      	cmp	r0, #0
 8018960:	d13b      	bne.n	80189da <__ieee754_pow+0x15a>
 8018962:	494f      	ldr	r1, [pc, #316]	; (8018aa0 <__ieee754_pow+0x220>)
 8018964:	428e      	cmp	r6, r1
 8018966:	d1ee      	bne.n	8018946 <__ieee754_pow+0xc6>
 8018968:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 801896c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018970:	ea53 0308 	orrs.w	r3, r3, r8
 8018974:	f000 8466 	beq.w	8019244 <__ieee754_pow+0x9c4>
 8018978:	4b4d      	ldr	r3, [pc, #308]	; (8018ab0 <__ieee754_pow+0x230>)
 801897a:	429c      	cmp	r4, r3
 801897c:	dd0d      	ble.n	801899a <__ieee754_pow+0x11a>
 801897e:	2f00      	cmp	r7, #0
 8018980:	f280 8464 	bge.w	801924c <__ieee754_pow+0x9cc>
 8018984:	2000      	movs	r0, #0
 8018986:	2100      	movs	r1, #0
 8018988:	ec41 0b10 	vmov	d0, r0, r1
 801898c:	b00d      	add	sp, #52	; 0x34
 801898e:	ecbd 8b06 	vpop	{d8-d10}
 8018992:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018996:	2102      	movs	r1, #2
 8018998:	e7e0      	b.n	801895c <__ieee754_pow+0xdc>
 801899a:	2f00      	cmp	r7, #0
 801899c:	daf2      	bge.n	8018984 <__ieee754_pow+0x104>
 801899e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80189a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80189a6:	e7ef      	b.n	8018988 <__ieee754_pow+0x108>
 80189a8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80189ac:	d104      	bne.n	80189b8 <__ieee754_pow+0x138>
 80189ae:	4610      	mov	r0, r2
 80189b0:	4619      	mov	r1, r3
 80189b2:	f7e7 fe41 	bl	8000638 <__aeabi_dmul>
 80189b6:	e7e7      	b.n	8018988 <__ieee754_pow+0x108>
 80189b8:	493e      	ldr	r1, [pc, #248]	; (8018ab4 <__ieee754_pow+0x234>)
 80189ba:	428f      	cmp	r7, r1
 80189bc:	d10d      	bne.n	80189da <__ieee754_pow+0x15a>
 80189be:	f1b9 0f00 	cmp.w	r9, #0
 80189c2:	db0a      	blt.n	80189da <__ieee754_pow+0x15a>
 80189c4:	ec43 2b10 	vmov	d0, r2, r3
 80189c8:	b00d      	add	sp, #52	; 0x34
 80189ca:	ecbd 8b06 	vpop	{d8-d10}
 80189ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189d2:	f000 be83 	b.w	80196dc <__ieee754_sqrt>
 80189d6:	2100      	movs	r1, #0
 80189d8:	9100      	str	r1, [sp, #0]
 80189da:	ec43 2b10 	vmov	d0, r2, r3
 80189de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80189e2:	f002 f93d 	bl	801ac60 <fabs>
 80189e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80189ea:	ec51 0b10 	vmov	r0, r1, d0
 80189ee:	f1b8 0f00 	cmp.w	r8, #0
 80189f2:	d12a      	bne.n	8018a4a <__ieee754_pow+0x1ca>
 80189f4:	b12c      	cbz	r4, 8018a02 <__ieee754_pow+0x182>
 80189f6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8018aac <__ieee754_pow+0x22c>
 80189fa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80189fe:	45e6      	cmp	lr, ip
 8018a00:	d123      	bne.n	8018a4a <__ieee754_pow+0x1ca>
 8018a02:	2f00      	cmp	r7, #0
 8018a04:	da05      	bge.n	8018a12 <__ieee754_pow+0x192>
 8018a06:	4602      	mov	r2, r0
 8018a08:	460b      	mov	r3, r1
 8018a0a:	2000      	movs	r0, #0
 8018a0c:	4927      	ldr	r1, [pc, #156]	; (8018aac <__ieee754_pow+0x22c>)
 8018a0e:	f7e7 ff3d 	bl	800088c <__aeabi_ddiv>
 8018a12:	f1b9 0f00 	cmp.w	r9, #0
 8018a16:	dab7      	bge.n	8018988 <__ieee754_pow+0x108>
 8018a18:	9b00      	ldr	r3, [sp, #0]
 8018a1a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018a1e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018a22:	4323      	orrs	r3, r4
 8018a24:	d108      	bne.n	8018a38 <__ieee754_pow+0x1b8>
 8018a26:	4602      	mov	r2, r0
 8018a28:	460b      	mov	r3, r1
 8018a2a:	4610      	mov	r0, r2
 8018a2c:	4619      	mov	r1, r3
 8018a2e:	f7e7 fc4b 	bl	80002c8 <__aeabi_dsub>
 8018a32:	4602      	mov	r2, r0
 8018a34:	460b      	mov	r3, r1
 8018a36:	e78d      	b.n	8018954 <__ieee754_pow+0xd4>
 8018a38:	9b00      	ldr	r3, [sp, #0]
 8018a3a:	2b01      	cmp	r3, #1
 8018a3c:	d1a4      	bne.n	8018988 <__ieee754_pow+0x108>
 8018a3e:	4602      	mov	r2, r0
 8018a40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a44:	4610      	mov	r0, r2
 8018a46:	4619      	mov	r1, r3
 8018a48:	e79e      	b.n	8018988 <__ieee754_pow+0x108>
 8018a4a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8018a4e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8018a52:	950a      	str	r5, [sp, #40]	; 0x28
 8018a54:	9d00      	ldr	r5, [sp, #0]
 8018a56:	46ac      	mov	ip, r5
 8018a58:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018a5a:	ea5c 0505 	orrs.w	r5, ip, r5
 8018a5e:	d0e4      	beq.n	8018a2a <__ieee754_pow+0x1aa>
 8018a60:	4b15      	ldr	r3, [pc, #84]	; (8018ab8 <__ieee754_pow+0x238>)
 8018a62:	429e      	cmp	r6, r3
 8018a64:	f340 80fc 	ble.w	8018c60 <__ieee754_pow+0x3e0>
 8018a68:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018a6c:	429e      	cmp	r6, r3
 8018a6e:	4b10      	ldr	r3, [pc, #64]	; (8018ab0 <__ieee754_pow+0x230>)
 8018a70:	dd07      	ble.n	8018a82 <__ieee754_pow+0x202>
 8018a72:	429c      	cmp	r4, r3
 8018a74:	dc0a      	bgt.n	8018a8c <__ieee754_pow+0x20c>
 8018a76:	2f00      	cmp	r7, #0
 8018a78:	da84      	bge.n	8018984 <__ieee754_pow+0x104>
 8018a7a:	a307      	add	r3, pc, #28	; (adr r3, 8018a98 <__ieee754_pow+0x218>)
 8018a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a80:	e795      	b.n	80189ae <__ieee754_pow+0x12e>
 8018a82:	429c      	cmp	r4, r3
 8018a84:	dbf7      	blt.n	8018a76 <__ieee754_pow+0x1f6>
 8018a86:	4b09      	ldr	r3, [pc, #36]	; (8018aac <__ieee754_pow+0x22c>)
 8018a88:	429c      	cmp	r4, r3
 8018a8a:	dd17      	ble.n	8018abc <__ieee754_pow+0x23c>
 8018a8c:	2f00      	cmp	r7, #0
 8018a8e:	dcf4      	bgt.n	8018a7a <__ieee754_pow+0x1fa>
 8018a90:	e778      	b.n	8018984 <__ieee754_pow+0x104>
 8018a92:	bf00      	nop
 8018a94:	f3af 8000 	nop.w
 8018a98:	8800759c 	.word	0x8800759c
 8018a9c:	7e37e43c 	.word	0x7e37e43c
 8018aa0:	7ff00000 	.word	0x7ff00000
 8018aa4:	0803ef73 	.word	0x0803ef73
 8018aa8:	433fffff 	.word	0x433fffff
 8018aac:	3ff00000 	.word	0x3ff00000
 8018ab0:	3fefffff 	.word	0x3fefffff
 8018ab4:	3fe00000 	.word	0x3fe00000
 8018ab8:	41e00000 	.word	0x41e00000
 8018abc:	4b64      	ldr	r3, [pc, #400]	; (8018c50 <__ieee754_pow+0x3d0>)
 8018abe:	2200      	movs	r2, #0
 8018ac0:	f7e7 fc02 	bl	80002c8 <__aeabi_dsub>
 8018ac4:	a356      	add	r3, pc, #344	; (adr r3, 8018c20 <__ieee754_pow+0x3a0>)
 8018ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018aca:	4604      	mov	r4, r0
 8018acc:	460d      	mov	r5, r1
 8018ace:	f7e7 fdb3 	bl	8000638 <__aeabi_dmul>
 8018ad2:	a355      	add	r3, pc, #340	; (adr r3, 8018c28 <__ieee754_pow+0x3a8>)
 8018ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ad8:	4606      	mov	r6, r0
 8018ada:	460f      	mov	r7, r1
 8018adc:	4620      	mov	r0, r4
 8018ade:	4629      	mov	r1, r5
 8018ae0:	f7e7 fdaa 	bl	8000638 <__aeabi_dmul>
 8018ae4:	4b5b      	ldr	r3, [pc, #364]	; (8018c54 <__ieee754_pow+0x3d4>)
 8018ae6:	4682      	mov	sl, r0
 8018ae8:	468b      	mov	fp, r1
 8018aea:	2200      	movs	r2, #0
 8018aec:	4620      	mov	r0, r4
 8018aee:	4629      	mov	r1, r5
 8018af0:	f7e7 fda2 	bl	8000638 <__aeabi_dmul>
 8018af4:	4602      	mov	r2, r0
 8018af6:	460b      	mov	r3, r1
 8018af8:	a14d      	add	r1, pc, #308	; (adr r1, 8018c30 <__ieee754_pow+0x3b0>)
 8018afa:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018afe:	f7e7 fbe3 	bl	80002c8 <__aeabi_dsub>
 8018b02:	4622      	mov	r2, r4
 8018b04:	462b      	mov	r3, r5
 8018b06:	f7e7 fd97 	bl	8000638 <__aeabi_dmul>
 8018b0a:	4602      	mov	r2, r0
 8018b0c:	460b      	mov	r3, r1
 8018b0e:	2000      	movs	r0, #0
 8018b10:	4951      	ldr	r1, [pc, #324]	; (8018c58 <__ieee754_pow+0x3d8>)
 8018b12:	f7e7 fbd9 	bl	80002c8 <__aeabi_dsub>
 8018b16:	4622      	mov	r2, r4
 8018b18:	4680      	mov	r8, r0
 8018b1a:	4689      	mov	r9, r1
 8018b1c:	462b      	mov	r3, r5
 8018b1e:	4620      	mov	r0, r4
 8018b20:	4629      	mov	r1, r5
 8018b22:	f7e7 fd89 	bl	8000638 <__aeabi_dmul>
 8018b26:	4602      	mov	r2, r0
 8018b28:	460b      	mov	r3, r1
 8018b2a:	4640      	mov	r0, r8
 8018b2c:	4649      	mov	r1, r9
 8018b2e:	f7e7 fd83 	bl	8000638 <__aeabi_dmul>
 8018b32:	a341      	add	r3, pc, #260	; (adr r3, 8018c38 <__ieee754_pow+0x3b8>)
 8018b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b38:	f7e7 fd7e 	bl	8000638 <__aeabi_dmul>
 8018b3c:	4602      	mov	r2, r0
 8018b3e:	460b      	mov	r3, r1
 8018b40:	4650      	mov	r0, sl
 8018b42:	4659      	mov	r1, fp
 8018b44:	f7e7 fbc0 	bl	80002c8 <__aeabi_dsub>
 8018b48:	4602      	mov	r2, r0
 8018b4a:	460b      	mov	r3, r1
 8018b4c:	4680      	mov	r8, r0
 8018b4e:	4689      	mov	r9, r1
 8018b50:	4630      	mov	r0, r6
 8018b52:	4639      	mov	r1, r7
 8018b54:	f7e7 fbba 	bl	80002cc <__adddf3>
 8018b58:	2400      	movs	r4, #0
 8018b5a:	4632      	mov	r2, r6
 8018b5c:	463b      	mov	r3, r7
 8018b5e:	4620      	mov	r0, r4
 8018b60:	460d      	mov	r5, r1
 8018b62:	f7e7 fbb1 	bl	80002c8 <__aeabi_dsub>
 8018b66:	4602      	mov	r2, r0
 8018b68:	460b      	mov	r3, r1
 8018b6a:	4640      	mov	r0, r8
 8018b6c:	4649      	mov	r1, r9
 8018b6e:	f7e7 fbab 	bl	80002c8 <__aeabi_dsub>
 8018b72:	9b00      	ldr	r3, [sp, #0]
 8018b74:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b76:	3b01      	subs	r3, #1
 8018b78:	4313      	orrs	r3, r2
 8018b7a:	4682      	mov	sl, r0
 8018b7c:	468b      	mov	fp, r1
 8018b7e:	f040 81f1 	bne.w	8018f64 <__ieee754_pow+0x6e4>
 8018b82:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8018c40 <__ieee754_pow+0x3c0>
 8018b86:	eeb0 8a47 	vmov.f32	s16, s14
 8018b8a:	eef0 8a67 	vmov.f32	s17, s15
 8018b8e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018b92:	2600      	movs	r6, #0
 8018b94:	4632      	mov	r2, r6
 8018b96:	463b      	mov	r3, r7
 8018b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018b9c:	f7e7 fb94 	bl	80002c8 <__aeabi_dsub>
 8018ba0:	4622      	mov	r2, r4
 8018ba2:	462b      	mov	r3, r5
 8018ba4:	f7e7 fd48 	bl	8000638 <__aeabi_dmul>
 8018ba8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018bac:	4680      	mov	r8, r0
 8018bae:	4689      	mov	r9, r1
 8018bb0:	4650      	mov	r0, sl
 8018bb2:	4659      	mov	r1, fp
 8018bb4:	f7e7 fd40 	bl	8000638 <__aeabi_dmul>
 8018bb8:	4602      	mov	r2, r0
 8018bba:	460b      	mov	r3, r1
 8018bbc:	4640      	mov	r0, r8
 8018bbe:	4649      	mov	r1, r9
 8018bc0:	f7e7 fb84 	bl	80002cc <__adddf3>
 8018bc4:	4632      	mov	r2, r6
 8018bc6:	463b      	mov	r3, r7
 8018bc8:	4680      	mov	r8, r0
 8018bca:	4689      	mov	r9, r1
 8018bcc:	4620      	mov	r0, r4
 8018bce:	4629      	mov	r1, r5
 8018bd0:	f7e7 fd32 	bl	8000638 <__aeabi_dmul>
 8018bd4:	460b      	mov	r3, r1
 8018bd6:	4604      	mov	r4, r0
 8018bd8:	460d      	mov	r5, r1
 8018bda:	4602      	mov	r2, r0
 8018bdc:	4649      	mov	r1, r9
 8018bde:	4640      	mov	r0, r8
 8018be0:	f7e7 fb74 	bl	80002cc <__adddf3>
 8018be4:	4b1d      	ldr	r3, [pc, #116]	; (8018c5c <__ieee754_pow+0x3dc>)
 8018be6:	4299      	cmp	r1, r3
 8018be8:	ec45 4b19 	vmov	d9, r4, r5
 8018bec:	4606      	mov	r6, r0
 8018bee:	460f      	mov	r7, r1
 8018bf0:	468b      	mov	fp, r1
 8018bf2:	f340 82fe 	ble.w	80191f2 <__ieee754_pow+0x972>
 8018bf6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018bfa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018bfe:	4303      	orrs	r3, r0
 8018c00:	f000 81f0 	beq.w	8018fe4 <__ieee754_pow+0x764>
 8018c04:	a310      	add	r3, pc, #64	; (adr r3, 8018c48 <__ieee754_pow+0x3c8>)
 8018c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c0a:	ec51 0b18 	vmov	r0, r1, d8
 8018c0e:	f7e7 fd13 	bl	8000638 <__aeabi_dmul>
 8018c12:	a30d      	add	r3, pc, #52	; (adr r3, 8018c48 <__ieee754_pow+0x3c8>)
 8018c14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c18:	e6cb      	b.n	80189b2 <__ieee754_pow+0x132>
 8018c1a:	bf00      	nop
 8018c1c:	f3af 8000 	nop.w
 8018c20:	60000000 	.word	0x60000000
 8018c24:	3ff71547 	.word	0x3ff71547
 8018c28:	f85ddf44 	.word	0xf85ddf44
 8018c2c:	3e54ae0b 	.word	0x3e54ae0b
 8018c30:	55555555 	.word	0x55555555
 8018c34:	3fd55555 	.word	0x3fd55555
 8018c38:	652b82fe 	.word	0x652b82fe
 8018c3c:	3ff71547 	.word	0x3ff71547
 8018c40:	00000000 	.word	0x00000000
 8018c44:	bff00000 	.word	0xbff00000
 8018c48:	8800759c 	.word	0x8800759c
 8018c4c:	7e37e43c 	.word	0x7e37e43c
 8018c50:	3ff00000 	.word	0x3ff00000
 8018c54:	3fd00000 	.word	0x3fd00000
 8018c58:	3fe00000 	.word	0x3fe00000
 8018c5c:	408fffff 	.word	0x408fffff
 8018c60:	4bd7      	ldr	r3, [pc, #860]	; (8018fc0 <__ieee754_pow+0x740>)
 8018c62:	ea03 0309 	and.w	r3, r3, r9
 8018c66:	2200      	movs	r2, #0
 8018c68:	b92b      	cbnz	r3, 8018c76 <__ieee754_pow+0x3f6>
 8018c6a:	4bd6      	ldr	r3, [pc, #856]	; (8018fc4 <__ieee754_pow+0x744>)
 8018c6c:	f7e7 fce4 	bl	8000638 <__aeabi_dmul>
 8018c70:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018c74:	460c      	mov	r4, r1
 8018c76:	1523      	asrs	r3, r4, #20
 8018c78:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018c7c:	4413      	add	r3, r2
 8018c7e:	9309      	str	r3, [sp, #36]	; 0x24
 8018c80:	4bd1      	ldr	r3, [pc, #836]	; (8018fc8 <__ieee754_pow+0x748>)
 8018c82:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018c86:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018c8a:	429c      	cmp	r4, r3
 8018c8c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018c90:	dd08      	ble.n	8018ca4 <__ieee754_pow+0x424>
 8018c92:	4bce      	ldr	r3, [pc, #824]	; (8018fcc <__ieee754_pow+0x74c>)
 8018c94:	429c      	cmp	r4, r3
 8018c96:	f340 8163 	ble.w	8018f60 <__ieee754_pow+0x6e0>
 8018c9a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c9c:	3301      	adds	r3, #1
 8018c9e:	9309      	str	r3, [sp, #36]	; 0x24
 8018ca0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018ca4:	2400      	movs	r4, #0
 8018ca6:	00e3      	lsls	r3, r4, #3
 8018ca8:	930b      	str	r3, [sp, #44]	; 0x2c
 8018caa:	4bc9      	ldr	r3, [pc, #804]	; (8018fd0 <__ieee754_pow+0x750>)
 8018cac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018cb0:	ed93 7b00 	vldr	d7, [r3]
 8018cb4:	4629      	mov	r1, r5
 8018cb6:	ec53 2b17 	vmov	r2, r3, d7
 8018cba:	eeb0 8a47 	vmov.f32	s16, s14
 8018cbe:	eef0 8a67 	vmov.f32	s17, s15
 8018cc2:	4682      	mov	sl, r0
 8018cc4:	f7e7 fb00 	bl	80002c8 <__aeabi_dsub>
 8018cc8:	4652      	mov	r2, sl
 8018cca:	4606      	mov	r6, r0
 8018ccc:	460f      	mov	r7, r1
 8018cce:	462b      	mov	r3, r5
 8018cd0:	ec51 0b18 	vmov	r0, r1, d8
 8018cd4:	f7e7 fafa 	bl	80002cc <__adddf3>
 8018cd8:	4602      	mov	r2, r0
 8018cda:	460b      	mov	r3, r1
 8018cdc:	2000      	movs	r0, #0
 8018cde:	49bd      	ldr	r1, [pc, #756]	; (8018fd4 <__ieee754_pow+0x754>)
 8018ce0:	f7e7 fdd4 	bl	800088c <__aeabi_ddiv>
 8018ce4:	ec41 0b19 	vmov	d9, r0, r1
 8018ce8:	4602      	mov	r2, r0
 8018cea:	460b      	mov	r3, r1
 8018cec:	4630      	mov	r0, r6
 8018cee:	4639      	mov	r1, r7
 8018cf0:	f7e7 fca2 	bl	8000638 <__aeabi_dmul>
 8018cf4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018cf8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018cfc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018d00:	2300      	movs	r3, #0
 8018d02:	9304      	str	r3, [sp, #16]
 8018d04:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018d08:	46ab      	mov	fp, r5
 8018d0a:	106d      	asrs	r5, r5, #1
 8018d0c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018d10:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018d14:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018d18:	2200      	movs	r2, #0
 8018d1a:	4640      	mov	r0, r8
 8018d1c:	4649      	mov	r1, r9
 8018d1e:	4614      	mov	r4, r2
 8018d20:	461d      	mov	r5, r3
 8018d22:	f7e7 fc89 	bl	8000638 <__aeabi_dmul>
 8018d26:	4602      	mov	r2, r0
 8018d28:	460b      	mov	r3, r1
 8018d2a:	4630      	mov	r0, r6
 8018d2c:	4639      	mov	r1, r7
 8018d2e:	f7e7 facb 	bl	80002c8 <__aeabi_dsub>
 8018d32:	ec53 2b18 	vmov	r2, r3, d8
 8018d36:	4606      	mov	r6, r0
 8018d38:	460f      	mov	r7, r1
 8018d3a:	4620      	mov	r0, r4
 8018d3c:	4629      	mov	r1, r5
 8018d3e:	f7e7 fac3 	bl	80002c8 <__aeabi_dsub>
 8018d42:	4602      	mov	r2, r0
 8018d44:	460b      	mov	r3, r1
 8018d46:	4650      	mov	r0, sl
 8018d48:	4659      	mov	r1, fp
 8018d4a:	f7e7 fabd 	bl	80002c8 <__aeabi_dsub>
 8018d4e:	4642      	mov	r2, r8
 8018d50:	464b      	mov	r3, r9
 8018d52:	f7e7 fc71 	bl	8000638 <__aeabi_dmul>
 8018d56:	4602      	mov	r2, r0
 8018d58:	460b      	mov	r3, r1
 8018d5a:	4630      	mov	r0, r6
 8018d5c:	4639      	mov	r1, r7
 8018d5e:	f7e7 fab3 	bl	80002c8 <__aeabi_dsub>
 8018d62:	ec53 2b19 	vmov	r2, r3, d9
 8018d66:	f7e7 fc67 	bl	8000638 <__aeabi_dmul>
 8018d6a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018d6e:	ec41 0b18 	vmov	d8, r0, r1
 8018d72:	4610      	mov	r0, r2
 8018d74:	4619      	mov	r1, r3
 8018d76:	f7e7 fc5f 	bl	8000638 <__aeabi_dmul>
 8018d7a:	a37d      	add	r3, pc, #500	; (adr r3, 8018f70 <__ieee754_pow+0x6f0>)
 8018d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d80:	4604      	mov	r4, r0
 8018d82:	460d      	mov	r5, r1
 8018d84:	f7e7 fc58 	bl	8000638 <__aeabi_dmul>
 8018d88:	a37b      	add	r3, pc, #492	; (adr r3, 8018f78 <__ieee754_pow+0x6f8>)
 8018d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d8e:	f7e7 fa9d 	bl	80002cc <__adddf3>
 8018d92:	4622      	mov	r2, r4
 8018d94:	462b      	mov	r3, r5
 8018d96:	f7e7 fc4f 	bl	8000638 <__aeabi_dmul>
 8018d9a:	a379      	add	r3, pc, #484	; (adr r3, 8018f80 <__ieee754_pow+0x700>)
 8018d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018da0:	f7e7 fa94 	bl	80002cc <__adddf3>
 8018da4:	4622      	mov	r2, r4
 8018da6:	462b      	mov	r3, r5
 8018da8:	f7e7 fc46 	bl	8000638 <__aeabi_dmul>
 8018dac:	a376      	add	r3, pc, #472	; (adr r3, 8018f88 <__ieee754_pow+0x708>)
 8018dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018db2:	f7e7 fa8b 	bl	80002cc <__adddf3>
 8018db6:	4622      	mov	r2, r4
 8018db8:	462b      	mov	r3, r5
 8018dba:	f7e7 fc3d 	bl	8000638 <__aeabi_dmul>
 8018dbe:	a374      	add	r3, pc, #464	; (adr r3, 8018f90 <__ieee754_pow+0x710>)
 8018dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dc4:	f7e7 fa82 	bl	80002cc <__adddf3>
 8018dc8:	4622      	mov	r2, r4
 8018dca:	462b      	mov	r3, r5
 8018dcc:	f7e7 fc34 	bl	8000638 <__aeabi_dmul>
 8018dd0:	a371      	add	r3, pc, #452	; (adr r3, 8018f98 <__ieee754_pow+0x718>)
 8018dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dd6:	f7e7 fa79 	bl	80002cc <__adddf3>
 8018dda:	4622      	mov	r2, r4
 8018ddc:	4606      	mov	r6, r0
 8018dde:	460f      	mov	r7, r1
 8018de0:	462b      	mov	r3, r5
 8018de2:	4620      	mov	r0, r4
 8018de4:	4629      	mov	r1, r5
 8018de6:	f7e7 fc27 	bl	8000638 <__aeabi_dmul>
 8018dea:	4602      	mov	r2, r0
 8018dec:	460b      	mov	r3, r1
 8018dee:	4630      	mov	r0, r6
 8018df0:	4639      	mov	r1, r7
 8018df2:	f7e7 fc21 	bl	8000638 <__aeabi_dmul>
 8018df6:	4642      	mov	r2, r8
 8018df8:	4604      	mov	r4, r0
 8018dfa:	460d      	mov	r5, r1
 8018dfc:	464b      	mov	r3, r9
 8018dfe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018e02:	f7e7 fa63 	bl	80002cc <__adddf3>
 8018e06:	ec53 2b18 	vmov	r2, r3, d8
 8018e0a:	f7e7 fc15 	bl	8000638 <__aeabi_dmul>
 8018e0e:	4622      	mov	r2, r4
 8018e10:	462b      	mov	r3, r5
 8018e12:	f7e7 fa5b 	bl	80002cc <__adddf3>
 8018e16:	4642      	mov	r2, r8
 8018e18:	4682      	mov	sl, r0
 8018e1a:	468b      	mov	fp, r1
 8018e1c:	464b      	mov	r3, r9
 8018e1e:	4640      	mov	r0, r8
 8018e20:	4649      	mov	r1, r9
 8018e22:	f7e7 fc09 	bl	8000638 <__aeabi_dmul>
 8018e26:	4b6c      	ldr	r3, [pc, #432]	; (8018fd8 <__ieee754_pow+0x758>)
 8018e28:	2200      	movs	r2, #0
 8018e2a:	4606      	mov	r6, r0
 8018e2c:	460f      	mov	r7, r1
 8018e2e:	f7e7 fa4d 	bl	80002cc <__adddf3>
 8018e32:	4652      	mov	r2, sl
 8018e34:	465b      	mov	r3, fp
 8018e36:	f7e7 fa49 	bl	80002cc <__adddf3>
 8018e3a:	9c04      	ldr	r4, [sp, #16]
 8018e3c:	460d      	mov	r5, r1
 8018e3e:	4622      	mov	r2, r4
 8018e40:	460b      	mov	r3, r1
 8018e42:	4640      	mov	r0, r8
 8018e44:	4649      	mov	r1, r9
 8018e46:	f7e7 fbf7 	bl	8000638 <__aeabi_dmul>
 8018e4a:	4b63      	ldr	r3, [pc, #396]	; (8018fd8 <__ieee754_pow+0x758>)
 8018e4c:	4680      	mov	r8, r0
 8018e4e:	4689      	mov	r9, r1
 8018e50:	2200      	movs	r2, #0
 8018e52:	4620      	mov	r0, r4
 8018e54:	4629      	mov	r1, r5
 8018e56:	f7e7 fa37 	bl	80002c8 <__aeabi_dsub>
 8018e5a:	4632      	mov	r2, r6
 8018e5c:	463b      	mov	r3, r7
 8018e5e:	f7e7 fa33 	bl	80002c8 <__aeabi_dsub>
 8018e62:	4602      	mov	r2, r0
 8018e64:	460b      	mov	r3, r1
 8018e66:	4650      	mov	r0, sl
 8018e68:	4659      	mov	r1, fp
 8018e6a:	f7e7 fa2d 	bl	80002c8 <__aeabi_dsub>
 8018e6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018e72:	f7e7 fbe1 	bl	8000638 <__aeabi_dmul>
 8018e76:	4622      	mov	r2, r4
 8018e78:	4606      	mov	r6, r0
 8018e7a:	460f      	mov	r7, r1
 8018e7c:	462b      	mov	r3, r5
 8018e7e:	ec51 0b18 	vmov	r0, r1, d8
 8018e82:	f7e7 fbd9 	bl	8000638 <__aeabi_dmul>
 8018e86:	4602      	mov	r2, r0
 8018e88:	460b      	mov	r3, r1
 8018e8a:	4630      	mov	r0, r6
 8018e8c:	4639      	mov	r1, r7
 8018e8e:	f7e7 fa1d 	bl	80002cc <__adddf3>
 8018e92:	4606      	mov	r6, r0
 8018e94:	460f      	mov	r7, r1
 8018e96:	4602      	mov	r2, r0
 8018e98:	460b      	mov	r3, r1
 8018e9a:	4640      	mov	r0, r8
 8018e9c:	4649      	mov	r1, r9
 8018e9e:	f7e7 fa15 	bl	80002cc <__adddf3>
 8018ea2:	9c04      	ldr	r4, [sp, #16]
 8018ea4:	a33e      	add	r3, pc, #248	; (adr r3, 8018fa0 <__ieee754_pow+0x720>)
 8018ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018eaa:	4620      	mov	r0, r4
 8018eac:	460d      	mov	r5, r1
 8018eae:	f7e7 fbc3 	bl	8000638 <__aeabi_dmul>
 8018eb2:	4642      	mov	r2, r8
 8018eb4:	ec41 0b18 	vmov	d8, r0, r1
 8018eb8:	464b      	mov	r3, r9
 8018eba:	4620      	mov	r0, r4
 8018ebc:	4629      	mov	r1, r5
 8018ebe:	f7e7 fa03 	bl	80002c8 <__aeabi_dsub>
 8018ec2:	4602      	mov	r2, r0
 8018ec4:	460b      	mov	r3, r1
 8018ec6:	4630      	mov	r0, r6
 8018ec8:	4639      	mov	r1, r7
 8018eca:	f7e7 f9fd 	bl	80002c8 <__aeabi_dsub>
 8018ece:	a336      	add	r3, pc, #216	; (adr r3, 8018fa8 <__ieee754_pow+0x728>)
 8018ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ed4:	f7e7 fbb0 	bl	8000638 <__aeabi_dmul>
 8018ed8:	a335      	add	r3, pc, #212	; (adr r3, 8018fb0 <__ieee754_pow+0x730>)
 8018eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ede:	4606      	mov	r6, r0
 8018ee0:	460f      	mov	r7, r1
 8018ee2:	4620      	mov	r0, r4
 8018ee4:	4629      	mov	r1, r5
 8018ee6:	f7e7 fba7 	bl	8000638 <__aeabi_dmul>
 8018eea:	4602      	mov	r2, r0
 8018eec:	460b      	mov	r3, r1
 8018eee:	4630      	mov	r0, r6
 8018ef0:	4639      	mov	r1, r7
 8018ef2:	f7e7 f9eb 	bl	80002cc <__adddf3>
 8018ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ef8:	4b38      	ldr	r3, [pc, #224]	; (8018fdc <__ieee754_pow+0x75c>)
 8018efa:	4413      	add	r3, r2
 8018efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018f00:	f7e7 f9e4 	bl	80002cc <__adddf3>
 8018f04:	4682      	mov	sl, r0
 8018f06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018f08:	468b      	mov	fp, r1
 8018f0a:	f7e7 fb2b 	bl	8000564 <__aeabi_i2d>
 8018f0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018f10:	4b33      	ldr	r3, [pc, #204]	; (8018fe0 <__ieee754_pow+0x760>)
 8018f12:	4413      	add	r3, r2
 8018f14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f18:	4606      	mov	r6, r0
 8018f1a:	460f      	mov	r7, r1
 8018f1c:	4652      	mov	r2, sl
 8018f1e:	465b      	mov	r3, fp
 8018f20:	ec51 0b18 	vmov	r0, r1, d8
 8018f24:	f7e7 f9d2 	bl	80002cc <__adddf3>
 8018f28:	4642      	mov	r2, r8
 8018f2a:	464b      	mov	r3, r9
 8018f2c:	f7e7 f9ce 	bl	80002cc <__adddf3>
 8018f30:	4632      	mov	r2, r6
 8018f32:	463b      	mov	r3, r7
 8018f34:	f7e7 f9ca 	bl	80002cc <__adddf3>
 8018f38:	9c04      	ldr	r4, [sp, #16]
 8018f3a:	4632      	mov	r2, r6
 8018f3c:	463b      	mov	r3, r7
 8018f3e:	4620      	mov	r0, r4
 8018f40:	460d      	mov	r5, r1
 8018f42:	f7e7 f9c1 	bl	80002c8 <__aeabi_dsub>
 8018f46:	4642      	mov	r2, r8
 8018f48:	464b      	mov	r3, r9
 8018f4a:	f7e7 f9bd 	bl	80002c8 <__aeabi_dsub>
 8018f4e:	ec53 2b18 	vmov	r2, r3, d8
 8018f52:	f7e7 f9b9 	bl	80002c8 <__aeabi_dsub>
 8018f56:	4602      	mov	r2, r0
 8018f58:	460b      	mov	r3, r1
 8018f5a:	4650      	mov	r0, sl
 8018f5c:	4659      	mov	r1, fp
 8018f5e:	e606      	b.n	8018b6e <__ieee754_pow+0x2ee>
 8018f60:	2401      	movs	r4, #1
 8018f62:	e6a0      	b.n	8018ca6 <__ieee754_pow+0x426>
 8018f64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018fb8 <__ieee754_pow+0x738>
 8018f68:	e60d      	b.n	8018b86 <__ieee754_pow+0x306>
 8018f6a:	bf00      	nop
 8018f6c:	f3af 8000 	nop.w
 8018f70:	4a454eef 	.word	0x4a454eef
 8018f74:	3fca7e28 	.word	0x3fca7e28
 8018f78:	93c9db65 	.word	0x93c9db65
 8018f7c:	3fcd864a 	.word	0x3fcd864a
 8018f80:	a91d4101 	.word	0xa91d4101
 8018f84:	3fd17460 	.word	0x3fd17460
 8018f88:	518f264d 	.word	0x518f264d
 8018f8c:	3fd55555 	.word	0x3fd55555
 8018f90:	db6fabff 	.word	0xdb6fabff
 8018f94:	3fdb6db6 	.word	0x3fdb6db6
 8018f98:	33333303 	.word	0x33333303
 8018f9c:	3fe33333 	.word	0x3fe33333
 8018fa0:	e0000000 	.word	0xe0000000
 8018fa4:	3feec709 	.word	0x3feec709
 8018fa8:	dc3a03fd 	.word	0xdc3a03fd
 8018fac:	3feec709 	.word	0x3feec709
 8018fb0:	145b01f5 	.word	0x145b01f5
 8018fb4:	be3e2fe0 	.word	0xbe3e2fe0
 8018fb8:	00000000 	.word	0x00000000
 8018fbc:	3ff00000 	.word	0x3ff00000
 8018fc0:	7ff00000 	.word	0x7ff00000
 8018fc4:	43400000 	.word	0x43400000
 8018fc8:	0003988e 	.word	0x0003988e
 8018fcc:	000bb679 	.word	0x000bb679
 8018fd0:	0803e938 	.word	0x0803e938
 8018fd4:	3ff00000 	.word	0x3ff00000
 8018fd8:	40080000 	.word	0x40080000
 8018fdc:	0803e958 	.word	0x0803e958
 8018fe0:	0803e948 	.word	0x0803e948
 8018fe4:	a3b5      	add	r3, pc, #724	; (adr r3, 80192bc <__ieee754_pow+0xa3c>)
 8018fe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fea:	4640      	mov	r0, r8
 8018fec:	4649      	mov	r1, r9
 8018fee:	f7e7 f96d 	bl	80002cc <__adddf3>
 8018ff2:	4622      	mov	r2, r4
 8018ff4:	ec41 0b1a 	vmov	d10, r0, r1
 8018ff8:	462b      	mov	r3, r5
 8018ffa:	4630      	mov	r0, r6
 8018ffc:	4639      	mov	r1, r7
 8018ffe:	f7e7 f963 	bl	80002c8 <__aeabi_dsub>
 8019002:	4602      	mov	r2, r0
 8019004:	460b      	mov	r3, r1
 8019006:	ec51 0b1a 	vmov	r0, r1, d10
 801900a:	f7e7 fda5 	bl	8000b58 <__aeabi_dcmpgt>
 801900e:	2800      	cmp	r0, #0
 8019010:	f47f adf8 	bne.w	8018c04 <__ieee754_pow+0x384>
 8019014:	4aa4      	ldr	r2, [pc, #656]	; (80192a8 <__ieee754_pow+0xa28>)
 8019016:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 801901a:	4293      	cmp	r3, r2
 801901c:	f340 810b 	ble.w	8019236 <__ieee754_pow+0x9b6>
 8019020:	151b      	asrs	r3, r3, #20
 8019022:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8019026:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 801902a:	fa4a f303 	asr.w	r3, sl, r3
 801902e:	445b      	add	r3, fp
 8019030:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8019034:	4e9d      	ldr	r6, [pc, #628]	; (80192ac <__ieee754_pow+0xa2c>)
 8019036:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 801903a:	4116      	asrs	r6, r2
 801903c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019040:	2000      	movs	r0, #0
 8019042:	ea23 0106 	bic.w	r1, r3, r6
 8019046:	f1c2 0214 	rsb	r2, r2, #20
 801904a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 801904e:	fa4a fa02 	asr.w	sl, sl, r2
 8019052:	f1bb 0f00 	cmp.w	fp, #0
 8019056:	4602      	mov	r2, r0
 8019058:	460b      	mov	r3, r1
 801905a:	4620      	mov	r0, r4
 801905c:	4629      	mov	r1, r5
 801905e:	bfb8      	it	lt
 8019060:	f1ca 0a00 	rsblt	sl, sl, #0
 8019064:	f7e7 f930 	bl	80002c8 <__aeabi_dsub>
 8019068:	ec41 0b19 	vmov	d9, r0, r1
 801906c:	4642      	mov	r2, r8
 801906e:	464b      	mov	r3, r9
 8019070:	ec51 0b19 	vmov	r0, r1, d9
 8019074:	f7e7 f92a 	bl	80002cc <__adddf3>
 8019078:	2400      	movs	r4, #0
 801907a:	a379      	add	r3, pc, #484	; (adr r3, 8019260 <__ieee754_pow+0x9e0>)
 801907c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019080:	4620      	mov	r0, r4
 8019082:	460d      	mov	r5, r1
 8019084:	f7e7 fad8 	bl	8000638 <__aeabi_dmul>
 8019088:	ec53 2b19 	vmov	r2, r3, d9
 801908c:	4606      	mov	r6, r0
 801908e:	460f      	mov	r7, r1
 8019090:	4620      	mov	r0, r4
 8019092:	4629      	mov	r1, r5
 8019094:	f7e7 f918 	bl	80002c8 <__aeabi_dsub>
 8019098:	4602      	mov	r2, r0
 801909a:	460b      	mov	r3, r1
 801909c:	4640      	mov	r0, r8
 801909e:	4649      	mov	r1, r9
 80190a0:	f7e7 f912 	bl	80002c8 <__aeabi_dsub>
 80190a4:	a370      	add	r3, pc, #448	; (adr r3, 8019268 <__ieee754_pow+0x9e8>)
 80190a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190aa:	f7e7 fac5 	bl	8000638 <__aeabi_dmul>
 80190ae:	a370      	add	r3, pc, #448	; (adr r3, 8019270 <__ieee754_pow+0x9f0>)
 80190b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190b4:	4680      	mov	r8, r0
 80190b6:	4689      	mov	r9, r1
 80190b8:	4620      	mov	r0, r4
 80190ba:	4629      	mov	r1, r5
 80190bc:	f7e7 fabc 	bl	8000638 <__aeabi_dmul>
 80190c0:	4602      	mov	r2, r0
 80190c2:	460b      	mov	r3, r1
 80190c4:	4640      	mov	r0, r8
 80190c6:	4649      	mov	r1, r9
 80190c8:	f7e7 f900 	bl	80002cc <__adddf3>
 80190cc:	4604      	mov	r4, r0
 80190ce:	460d      	mov	r5, r1
 80190d0:	4602      	mov	r2, r0
 80190d2:	460b      	mov	r3, r1
 80190d4:	4630      	mov	r0, r6
 80190d6:	4639      	mov	r1, r7
 80190d8:	f7e7 f8f8 	bl	80002cc <__adddf3>
 80190dc:	4632      	mov	r2, r6
 80190de:	463b      	mov	r3, r7
 80190e0:	4680      	mov	r8, r0
 80190e2:	4689      	mov	r9, r1
 80190e4:	f7e7 f8f0 	bl	80002c8 <__aeabi_dsub>
 80190e8:	4602      	mov	r2, r0
 80190ea:	460b      	mov	r3, r1
 80190ec:	4620      	mov	r0, r4
 80190ee:	4629      	mov	r1, r5
 80190f0:	f7e7 f8ea 	bl	80002c8 <__aeabi_dsub>
 80190f4:	4642      	mov	r2, r8
 80190f6:	4606      	mov	r6, r0
 80190f8:	460f      	mov	r7, r1
 80190fa:	464b      	mov	r3, r9
 80190fc:	4640      	mov	r0, r8
 80190fe:	4649      	mov	r1, r9
 8019100:	f7e7 fa9a 	bl	8000638 <__aeabi_dmul>
 8019104:	a35c      	add	r3, pc, #368	; (adr r3, 8019278 <__ieee754_pow+0x9f8>)
 8019106:	e9d3 2300 	ldrd	r2, r3, [r3]
 801910a:	4604      	mov	r4, r0
 801910c:	460d      	mov	r5, r1
 801910e:	f7e7 fa93 	bl	8000638 <__aeabi_dmul>
 8019112:	a35b      	add	r3, pc, #364	; (adr r3, 8019280 <__ieee754_pow+0xa00>)
 8019114:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019118:	f7e7 f8d6 	bl	80002c8 <__aeabi_dsub>
 801911c:	4622      	mov	r2, r4
 801911e:	462b      	mov	r3, r5
 8019120:	f7e7 fa8a 	bl	8000638 <__aeabi_dmul>
 8019124:	a358      	add	r3, pc, #352	; (adr r3, 8019288 <__ieee754_pow+0xa08>)
 8019126:	e9d3 2300 	ldrd	r2, r3, [r3]
 801912a:	f7e7 f8cf 	bl	80002cc <__adddf3>
 801912e:	4622      	mov	r2, r4
 8019130:	462b      	mov	r3, r5
 8019132:	f7e7 fa81 	bl	8000638 <__aeabi_dmul>
 8019136:	a356      	add	r3, pc, #344	; (adr r3, 8019290 <__ieee754_pow+0xa10>)
 8019138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801913c:	f7e7 f8c4 	bl	80002c8 <__aeabi_dsub>
 8019140:	4622      	mov	r2, r4
 8019142:	462b      	mov	r3, r5
 8019144:	f7e7 fa78 	bl	8000638 <__aeabi_dmul>
 8019148:	a353      	add	r3, pc, #332	; (adr r3, 8019298 <__ieee754_pow+0xa18>)
 801914a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801914e:	f7e7 f8bd 	bl	80002cc <__adddf3>
 8019152:	4622      	mov	r2, r4
 8019154:	462b      	mov	r3, r5
 8019156:	f7e7 fa6f 	bl	8000638 <__aeabi_dmul>
 801915a:	4602      	mov	r2, r0
 801915c:	460b      	mov	r3, r1
 801915e:	4640      	mov	r0, r8
 8019160:	4649      	mov	r1, r9
 8019162:	f7e7 f8b1 	bl	80002c8 <__aeabi_dsub>
 8019166:	4604      	mov	r4, r0
 8019168:	460d      	mov	r5, r1
 801916a:	4602      	mov	r2, r0
 801916c:	460b      	mov	r3, r1
 801916e:	4640      	mov	r0, r8
 8019170:	4649      	mov	r1, r9
 8019172:	f7e7 fa61 	bl	8000638 <__aeabi_dmul>
 8019176:	2200      	movs	r2, #0
 8019178:	ec41 0b19 	vmov	d9, r0, r1
 801917c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019180:	4620      	mov	r0, r4
 8019182:	4629      	mov	r1, r5
 8019184:	f7e7 f8a0 	bl	80002c8 <__aeabi_dsub>
 8019188:	4602      	mov	r2, r0
 801918a:	460b      	mov	r3, r1
 801918c:	ec51 0b19 	vmov	r0, r1, d9
 8019190:	f7e7 fb7c 	bl	800088c <__aeabi_ddiv>
 8019194:	4632      	mov	r2, r6
 8019196:	4604      	mov	r4, r0
 8019198:	460d      	mov	r5, r1
 801919a:	463b      	mov	r3, r7
 801919c:	4640      	mov	r0, r8
 801919e:	4649      	mov	r1, r9
 80191a0:	f7e7 fa4a 	bl	8000638 <__aeabi_dmul>
 80191a4:	4632      	mov	r2, r6
 80191a6:	463b      	mov	r3, r7
 80191a8:	f7e7 f890 	bl	80002cc <__adddf3>
 80191ac:	4602      	mov	r2, r0
 80191ae:	460b      	mov	r3, r1
 80191b0:	4620      	mov	r0, r4
 80191b2:	4629      	mov	r1, r5
 80191b4:	f7e7 f888 	bl	80002c8 <__aeabi_dsub>
 80191b8:	4642      	mov	r2, r8
 80191ba:	464b      	mov	r3, r9
 80191bc:	f7e7 f884 	bl	80002c8 <__aeabi_dsub>
 80191c0:	460b      	mov	r3, r1
 80191c2:	4602      	mov	r2, r0
 80191c4:	493a      	ldr	r1, [pc, #232]	; (80192b0 <__ieee754_pow+0xa30>)
 80191c6:	2000      	movs	r0, #0
 80191c8:	f7e7 f87e 	bl	80002c8 <__aeabi_dsub>
 80191cc:	e9cd 0100 	strd	r0, r1, [sp]
 80191d0:	9b01      	ldr	r3, [sp, #4]
 80191d2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80191d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80191da:	da2f      	bge.n	801923c <__ieee754_pow+0x9bc>
 80191dc:	4650      	mov	r0, sl
 80191de:	ed9d 0b00 	vldr	d0, [sp]
 80191e2:	f001 fde5 	bl	801adb0 <scalbn>
 80191e6:	ec51 0b10 	vmov	r0, r1, d0
 80191ea:	ec53 2b18 	vmov	r2, r3, d8
 80191ee:	f7ff bbe0 	b.w	80189b2 <__ieee754_pow+0x132>
 80191f2:	4b30      	ldr	r3, [pc, #192]	; (80192b4 <__ieee754_pow+0xa34>)
 80191f4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80191f8:	429e      	cmp	r6, r3
 80191fa:	f77f af0b 	ble.w	8019014 <__ieee754_pow+0x794>
 80191fe:	4b2e      	ldr	r3, [pc, #184]	; (80192b8 <__ieee754_pow+0xa38>)
 8019200:	440b      	add	r3, r1
 8019202:	4303      	orrs	r3, r0
 8019204:	d00b      	beq.n	801921e <__ieee754_pow+0x99e>
 8019206:	a326      	add	r3, pc, #152	; (adr r3, 80192a0 <__ieee754_pow+0xa20>)
 8019208:	e9d3 2300 	ldrd	r2, r3, [r3]
 801920c:	ec51 0b18 	vmov	r0, r1, d8
 8019210:	f7e7 fa12 	bl	8000638 <__aeabi_dmul>
 8019214:	a322      	add	r3, pc, #136	; (adr r3, 80192a0 <__ieee754_pow+0xa20>)
 8019216:	e9d3 2300 	ldrd	r2, r3, [r3]
 801921a:	f7ff bbca 	b.w	80189b2 <__ieee754_pow+0x132>
 801921e:	4622      	mov	r2, r4
 8019220:	462b      	mov	r3, r5
 8019222:	f7e7 f851 	bl	80002c8 <__aeabi_dsub>
 8019226:	4642      	mov	r2, r8
 8019228:	464b      	mov	r3, r9
 801922a:	f7e7 fc8b 	bl	8000b44 <__aeabi_dcmpge>
 801922e:	2800      	cmp	r0, #0
 8019230:	f43f aef0 	beq.w	8019014 <__ieee754_pow+0x794>
 8019234:	e7e7      	b.n	8019206 <__ieee754_pow+0x986>
 8019236:	f04f 0a00 	mov.w	sl, #0
 801923a:	e717      	b.n	801906c <__ieee754_pow+0x7ec>
 801923c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019240:	4619      	mov	r1, r3
 8019242:	e7d2      	b.n	80191ea <__ieee754_pow+0x96a>
 8019244:	491a      	ldr	r1, [pc, #104]	; (80192b0 <__ieee754_pow+0xa30>)
 8019246:	2000      	movs	r0, #0
 8019248:	f7ff bb9e 	b.w	8018988 <__ieee754_pow+0x108>
 801924c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019250:	f7ff bb9a 	b.w	8018988 <__ieee754_pow+0x108>
 8019254:	9000      	str	r0, [sp, #0]
 8019256:	f7ff bb76 	b.w	8018946 <__ieee754_pow+0xc6>
 801925a:	2100      	movs	r1, #0
 801925c:	f7ff bb60 	b.w	8018920 <__ieee754_pow+0xa0>
 8019260:	00000000 	.word	0x00000000
 8019264:	3fe62e43 	.word	0x3fe62e43
 8019268:	fefa39ef 	.word	0xfefa39ef
 801926c:	3fe62e42 	.word	0x3fe62e42
 8019270:	0ca86c39 	.word	0x0ca86c39
 8019274:	be205c61 	.word	0xbe205c61
 8019278:	72bea4d0 	.word	0x72bea4d0
 801927c:	3e663769 	.word	0x3e663769
 8019280:	c5d26bf1 	.word	0xc5d26bf1
 8019284:	3ebbbd41 	.word	0x3ebbbd41
 8019288:	af25de2c 	.word	0xaf25de2c
 801928c:	3f11566a 	.word	0x3f11566a
 8019290:	16bebd93 	.word	0x16bebd93
 8019294:	3f66c16c 	.word	0x3f66c16c
 8019298:	5555553e 	.word	0x5555553e
 801929c:	3fc55555 	.word	0x3fc55555
 80192a0:	c2f8f359 	.word	0xc2f8f359
 80192a4:	01a56e1f 	.word	0x01a56e1f
 80192a8:	3fe00000 	.word	0x3fe00000
 80192ac:	000fffff 	.word	0x000fffff
 80192b0:	3ff00000 	.word	0x3ff00000
 80192b4:	4090cbff 	.word	0x4090cbff
 80192b8:	3f6f3400 	.word	0x3f6f3400
 80192bc:	652b82fe 	.word	0x652b82fe
 80192c0:	3c971547 	.word	0x3c971547
 80192c4:	00000000 	.word	0x00000000

080192c8 <__ieee754_rem_pio2>:
 80192c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192cc:	ed2d 8b02 	vpush	{d8}
 80192d0:	ec55 4b10 	vmov	r4, r5, d0
 80192d4:	4bca      	ldr	r3, [pc, #808]	; (8019600 <__ieee754_rem_pio2+0x338>)
 80192d6:	b08b      	sub	sp, #44	; 0x2c
 80192d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80192dc:	4598      	cmp	r8, r3
 80192de:	4682      	mov	sl, r0
 80192e0:	9502      	str	r5, [sp, #8]
 80192e2:	dc08      	bgt.n	80192f6 <__ieee754_rem_pio2+0x2e>
 80192e4:	2200      	movs	r2, #0
 80192e6:	2300      	movs	r3, #0
 80192e8:	ed80 0b00 	vstr	d0, [r0]
 80192ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80192f0:	f04f 0b00 	mov.w	fp, #0
 80192f4:	e028      	b.n	8019348 <__ieee754_rem_pio2+0x80>
 80192f6:	4bc3      	ldr	r3, [pc, #780]	; (8019604 <__ieee754_rem_pio2+0x33c>)
 80192f8:	4598      	cmp	r8, r3
 80192fa:	dc78      	bgt.n	80193ee <__ieee754_rem_pio2+0x126>
 80192fc:	9b02      	ldr	r3, [sp, #8]
 80192fe:	4ec2      	ldr	r6, [pc, #776]	; (8019608 <__ieee754_rem_pio2+0x340>)
 8019300:	2b00      	cmp	r3, #0
 8019302:	ee10 0a10 	vmov	r0, s0
 8019306:	a3b0      	add	r3, pc, #704	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x300>)
 8019308:	e9d3 2300 	ldrd	r2, r3, [r3]
 801930c:	4629      	mov	r1, r5
 801930e:	dd39      	ble.n	8019384 <__ieee754_rem_pio2+0xbc>
 8019310:	f7e6 ffda 	bl	80002c8 <__aeabi_dsub>
 8019314:	45b0      	cmp	r8, r6
 8019316:	4604      	mov	r4, r0
 8019318:	460d      	mov	r5, r1
 801931a:	d01b      	beq.n	8019354 <__ieee754_rem_pio2+0x8c>
 801931c:	a3ac      	add	r3, pc, #688	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x308>)
 801931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019322:	f7e6 ffd1 	bl	80002c8 <__aeabi_dsub>
 8019326:	4602      	mov	r2, r0
 8019328:	460b      	mov	r3, r1
 801932a:	e9ca 2300 	strd	r2, r3, [sl]
 801932e:	4620      	mov	r0, r4
 8019330:	4629      	mov	r1, r5
 8019332:	f7e6 ffc9 	bl	80002c8 <__aeabi_dsub>
 8019336:	a3a6      	add	r3, pc, #664	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x308>)
 8019338:	e9d3 2300 	ldrd	r2, r3, [r3]
 801933c:	f7e6 ffc4 	bl	80002c8 <__aeabi_dsub>
 8019340:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019344:	f04f 0b01 	mov.w	fp, #1
 8019348:	4658      	mov	r0, fp
 801934a:	b00b      	add	sp, #44	; 0x2c
 801934c:	ecbd 8b02 	vpop	{d8}
 8019350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019354:	a3a0      	add	r3, pc, #640	; (adr r3, 80195d8 <__ieee754_rem_pio2+0x310>)
 8019356:	e9d3 2300 	ldrd	r2, r3, [r3]
 801935a:	f7e6 ffb5 	bl	80002c8 <__aeabi_dsub>
 801935e:	a3a0      	add	r3, pc, #640	; (adr r3, 80195e0 <__ieee754_rem_pio2+0x318>)
 8019360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019364:	4604      	mov	r4, r0
 8019366:	460d      	mov	r5, r1
 8019368:	f7e6 ffae 	bl	80002c8 <__aeabi_dsub>
 801936c:	4602      	mov	r2, r0
 801936e:	460b      	mov	r3, r1
 8019370:	e9ca 2300 	strd	r2, r3, [sl]
 8019374:	4620      	mov	r0, r4
 8019376:	4629      	mov	r1, r5
 8019378:	f7e6 ffa6 	bl	80002c8 <__aeabi_dsub>
 801937c:	a398      	add	r3, pc, #608	; (adr r3, 80195e0 <__ieee754_rem_pio2+0x318>)
 801937e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019382:	e7db      	b.n	801933c <__ieee754_rem_pio2+0x74>
 8019384:	f7e6 ffa2 	bl	80002cc <__adddf3>
 8019388:	45b0      	cmp	r8, r6
 801938a:	4604      	mov	r4, r0
 801938c:	460d      	mov	r5, r1
 801938e:	d016      	beq.n	80193be <__ieee754_rem_pio2+0xf6>
 8019390:	a38f      	add	r3, pc, #572	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x308>)
 8019392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019396:	f7e6 ff99 	bl	80002cc <__adddf3>
 801939a:	4602      	mov	r2, r0
 801939c:	460b      	mov	r3, r1
 801939e:	e9ca 2300 	strd	r2, r3, [sl]
 80193a2:	4620      	mov	r0, r4
 80193a4:	4629      	mov	r1, r5
 80193a6:	f7e6 ff8f 	bl	80002c8 <__aeabi_dsub>
 80193aa:	a389      	add	r3, pc, #548	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x308>)
 80193ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b0:	f7e6 ff8c 	bl	80002cc <__adddf3>
 80193b4:	f04f 3bff 	mov.w	fp, #4294967295
 80193b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80193bc:	e7c4      	b.n	8019348 <__ieee754_rem_pio2+0x80>
 80193be:	a386      	add	r3, pc, #536	; (adr r3, 80195d8 <__ieee754_rem_pio2+0x310>)
 80193c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193c4:	f7e6 ff82 	bl	80002cc <__adddf3>
 80193c8:	a385      	add	r3, pc, #532	; (adr r3, 80195e0 <__ieee754_rem_pio2+0x318>)
 80193ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193ce:	4604      	mov	r4, r0
 80193d0:	460d      	mov	r5, r1
 80193d2:	f7e6 ff7b 	bl	80002cc <__adddf3>
 80193d6:	4602      	mov	r2, r0
 80193d8:	460b      	mov	r3, r1
 80193da:	e9ca 2300 	strd	r2, r3, [sl]
 80193de:	4620      	mov	r0, r4
 80193e0:	4629      	mov	r1, r5
 80193e2:	f7e6 ff71 	bl	80002c8 <__aeabi_dsub>
 80193e6:	a37e      	add	r3, pc, #504	; (adr r3, 80195e0 <__ieee754_rem_pio2+0x318>)
 80193e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193ec:	e7e0      	b.n	80193b0 <__ieee754_rem_pio2+0xe8>
 80193ee:	4b87      	ldr	r3, [pc, #540]	; (801960c <__ieee754_rem_pio2+0x344>)
 80193f0:	4598      	cmp	r8, r3
 80193f2:	f300 80d9 	bgt.w	80195a8 <__ieee754_rem_pio2+0x2e0>
 80193f6:	f001 fc33 	bl	801ac60 <fabs>
 80193fa:	ec55 4b10 	vmov	r4, r5, d0
 80193fe:	ee10 0a10 	vmov	r0, s0
 8019402:	a379      	add	r3, pc, #484	; (adr r3, 80195e8 <__ieee754_rem_pio2+0x320>)
 8019404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019408:	4629      	mov	r1, r5
 801940a:	f7e7 f915 	bl	8000638 <__aeabi_dmul>
 801940e:	4b80      	ldr	r3, [pc, #512]	; (8019610 <__ieee754_rem_pio2+0x348>)
 8019410:	2200      	movs	r2, #0
 8019412:	f7e6 ff5b 	bl	80002cc <__adddf3>
 8019416:	f7e7 fbbf 	bl	8000b98 <__aeabi_d2iz>
 801941a:	4683      	mov	fp, r0
 801941c:	f7e7 f8a2 	bl	8000564 <__aeabi_i2d>
 8019420:	4602      	mov	r2, r0
 8019422:	460b      	mov	r3, r1
 8019424:	ec43 2b18 	vmov	d8, r2, r3
 8019428:	a367      	add	r3, pc, #412	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x300>)
 801942a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801942e:	f7e7 f903 	bl	8000638 <__aeabi_dmul>
 8019432:	4602      	mov	r2, r0
 8019434:	460b      	mov	r3, r1
 8019436:	4620      	mov	r0, r4
 8019438:	4629      	mov	r1, r5
 801943a:	f7e6 ff45 	bl	80002c8 <__aeabi_dsub>
 801943e:	a364      	add	r3, pc, #400	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x308>)
 8019440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019444:	4606      	mov	r6, r0
 8019446:	460f      	mov	r7, r1
 8019448:	ec51 0b18 	vmov	r0, r1, d8
 801944c:	f7e7 f8f4 	bl	8000638 <__aeabi_dmul>
 8019450:	f1bb 0f1f 	cmp.w	fp, #31
 8019454:	4604      	mov	r4, r0
 8019456:	460d      	mov	r5, r1
 8019458:	dc0d      	bgt.n	8019476 <__ieee754_rem_pio2+0x1ae>
 801945a:	4b6e      	ldr	r3, [pc, #440]	; (8019614 <__ieee754_rem_pio2+0x34c>)
 801945c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8019464:	4543      	cmp	r3, r8
 8019466:	d006      	beq.n	8019476 <__ieee754_rem_pio2+0x1ae>
 8019468:	4622      	mov	r2, r4
 801946a:	462b      	mov	r3, r5
 801946c:	4630      	mov	r0, r6
 801946e:	4639      	mov	r1, r7
 8019470:	f7e6 ff2a 	bl	80002c8 <__aeabi_dsub>
 8019474:	e00f      	b.n	8019496 <__ieee754_rem_pio2+0x1ce>
 8019476:	462b      	mov	r3, r5
 8019478:	4622      	mov	r2, r4
 801947a:	4630      	mov	r0, r6
 801947c:	4639      	mov	r1, r7
 801947e:	f7e6 ff23 	bl	80002c8 <__aeabi_dsub>
 8019482:	ea4f 5328 	mov.w	r3, r8, asr #20
 8019486:	9303      	str	r3, [sp, #12]
 8019488:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801948c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8019490:	f1b8 0f10 	cmp.w	r8, #16
 8019494:	dc02      	bgt.n	801949c <__ieee754_rem_pio2+0x1d4>
 8019496:	e9ca 0100 	strd	r0, r1, [sl]
 801949a:	e039      	b.n	8019510 <__ieee754_rem_pio2+0x248>
 801949c:	a34e      	add	r3, pc, #312	; (adr r3, 80195d8 <__ieee754_rem_pio2+0x310>)
 801949e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194a2:	ec51 0b18 	vmov	r0, r1, d8
 80194a6:	f7e7 f8c7 	bl	8000638 <__aeabi_dmul>
 80194aa:	4604      	mov	r4, r0
 80194ac:	460d      	mov	r5, r1
 80194ae:	4602      	mov	r2, r0
 80194b0:	460b      	mov	r3, r1
 80194b2:	4630      	mov	r0, r6
 80194b4:	4639      	mov	r1, r7
 80194b6:	f7e6 ff07 	bl	80002c8 <__aeabi_dsub>
 80194ba:	4602      	mov	r2, r0
 80194bc:	460b      	mov	r3, r1
 80194be:	4680      	mov	r8, r0
 80194c0:	4689      	mov	r9, r1
 80194c2:	4630      	mov	r0, r6
 80194c4:	4639      	mov	r1, r7
 80194c6:	f7e6 feff 	bl	80002c8 <__aeabi_dsub>
 80194ca:	4622      	mov	r2, r4
 80194cc:	462b      	mov	r3, r5
 80194ce:	f7e6 fefb 	bl	80002c8 <__aeabi_dsub>
 80194d2:	a343      	add	r3, pc, #268	; (adr r3, 80195e0 <__ieee754_rem_pio2+0x318>)
 80194d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194d8:	4604      	mov	r4, r0
 80194da:	460d      	mov	r5, r1
 80194dc:	ec51 0b18 	vmov	r0, r1, d8
 80194e0:	f7e7 f8aa 	bl	8000638 <__aeabi_dmul>
 80194e4:	4622      	mov	r2, r4
 80194e6:	462b      	mov	r3, r5
 80194e8:	f7e6 feee 	bl	80002c8 <__aeabi_dsub>
 80194ec:	4602      	mov	r2, r0
 80194ee:	460b      	mov	r3, r1
 80194f0:	4604      	mov	r4, r0
 80194f2:	460d      	mov	r5, r1
 80194f4:	4640      	mov	r0, r8
 80194f6:	4649      	mov	r1, r9
 80194f8:	f7e6 fee6 	bl	80002c8 <__aeabi_dsub>
 80194fc:	9a03      	ldr	r2, [sp, #12]
 80194fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019502:	1ad3      	subs	r3, r2, r3
 8019504:	2b31      	cmp	r3, #49	; 0x31
 8019506:	dc24      	bgt.n	8019552 <__ieee754_rem_pio2+0x28a>
 8019508:	e9ca 0100 	strd	r0, r1, [sl]
 801950c:	4646      	mov	r6, r8
 801950e:	464f      	mov	r7, r9
 8019510:	e9da 8900 	ldrd	r8, r9, [sl]
 8019514:	4630      	mov	r0, r6
 8019516:	4642      	mov	r2, r8
 8019518:	464b      	mov	r3, r9
 801951a:	4639      	mov	r1, r7
 801951c:	f7e6 fed4 	bl	80002c8 <__aeabi_dsub>
 8019520:	462b      	mov	r3, r5
 8019522:	4622      	mov	r2, r4
 8019524:	f7e6 fed0 	bl	80002c8 <__aeabi_dsub>
 8019528:	9b02      	ldr	r3, [sp, #8]
 801952a:	2b00      	cmp	r3, #0
 801952c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019530:	f6bf af0a 	bge.w	8019348 <__ieee754_rem_pio2+0x80>
 8019534:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019538:	f8ca 3004 	str.w	r3, [sl, #4]
 801953c:	f8ca 8000 	str.w	r8, [sl]
 8019540:	f8ca 0008 	str.w	r0, [sl, #8]
 8019544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019548:	f8ca 300c 	str.w	r3, [sl, #12]
 801954c:	f1cb 0b00 	rsb	fp, fp, #0
 8019550:	e6fa      	b.n	8019348 <__ieee754_rem_pio2+0x80>
 8019552:	a327      	add	r3, pc, #156	; (adr r3, 80195f0 <__ieee754_rem_pio2+0x328>)
 8019554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019558:	ec51 0b18 	vmov	r0, r1, d8
 801955c:	f7e7 f86c 	bl	8000638 <__aeabi_dmul>
 8019560:	4604      	mov	r4, r0
 8019562:	460d      	mov	r5, r1
 8019564:	4602      	mov	r2, r0
 8019566:	460b      	mov	r3, r1
 8019568:	4640      	mov	r0, r8
 801956a:	4649      	mov	r1, r9
 801956c:	f7e6 feac 	bl	80002c8 <__aeabi_dsub>
 8019570:	4602      	mov	r2, r0
 8019572:	460b      	mov	r3, r1
 8019574:	4606      	mov	r6, r0
 8019576:	460f      	mov	r7, r1
 8019578:	4640      	mov	r0, r8
 801957a:	4649      	mov	r1, r9
 801957c:	f7e6 fea4 	bl	80002c8 <__aeabi_dsub>
 8019580:	4622      	mov	r2, r4
 8019582:	462b      	mov	r3, r5
 8019584:	f7e6 fea0 	bl	80002c8 <__aeabi_dsub>
 8019588:	a31b      	add	r3, pc, #108	; (adr r3, 80195f8 <__ieee754_rem_pio2+0x330>)
 801958a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801958e:	4604      	mov	r4, r0
 8019590:	460d      	mov	r5, r1
 8019592:	ec51 0b18 	vmov	r0, r1, d8
 8019596:	f7e7 f84f 	bl	8000638 <__aeabi_dmul>
 801959a:	4622      	mov	r2, r4
 801959c:	462b      	mov	r3, r5
 801959e:	f7e6 fe93 	bl	80002c8 <__aeabi_dsub>
 80195a2:	4604      	mov	r4, r0
 80195a4:	460d      	mov	r5, r1
 80195a6:	e75f      	b.n	8019468 <__ieee754_rem_pio2+0x1a0>
 80195a8:	4b1b      	ldr	r3, [pc, #108]	; (8019618 <__ieee754_rem_pio2+0x350>)
 80195aa:	4598      	cmp	r8, r3
 80195ac:	dd36      	ble.n	801961c <__ieee754_rem_pio2+0x354>
 80195ae:	ee10 2a10 	vmov	r2, s0
 80195b2:	462b      	mov	r3, r5
 80195b4:	4620      	mov	r0, r4
 80195b6:	4629      	mov	r1, r5
 80195b8:	f7e6 fe86 	bl	80002c8 <__aeabi_dsub>
 80195bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80195c0:	e9ca 0100 	strd	r0, r1, [sl]
 80195c4:	e694      	b.n	80192f0 <__ieee754_rem_pio2+0x28>
 80195c6:	bf00      	nop
 80195c8:	54400000 	.word	0x54400000
 80195cc:	3ff921fb 	.word	0x3ff921fb
 80195d0:	1a626331 	.word	0x1a626331
 80195d4:	3dd0b461 	.word	0x3dd0b461
 80195d8:	1a600000 	.word	0x1a600000
 80195dc:	3dd0b461 	.word	0x3dd0b461
 80195e0:	2e037073 	.word	0x2e037073
 80195e4:	3ba3198a 	.word	0x3ba3198a
 80195e8:	6dc9c883 	.word	0x6dc9c883
 80195ec:	3fe45f30 	.word	0x3fe45f30
 80195f0:	2e000000 	.word	0x2e000000
 80195f4:	3ba3198a 	.word	0x3ba3198a
 80195f8:	252049c1 	.word	0x252049c1
 80195fc:	397b839a 	.word	0x397b839a
 8019600:	3fe921fb 	.word	0x3fe921fb
 8019604:	4002d97b 	.word	0x4002d97b
 8019608:	3ff921fb 	.word	0x3ff921fb
 801960c:	413921fb 	.word	0x413921fb
 8019610:	3fe00000 	.word	0x3fe00000
 8019614:	0803e968 	.word	0x0803e968
 8019618:	7fefffff 	.word	0x7fefffff
 801961c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8019620:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8019624:	ee10 0a10 	vmov	r0, s0
 8019628:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 801962c:	ee10 6a10 	vmov	r6, s0
 8019630:	460f      	mov	r7, r1
 8019632:	f7e7 fab1 	bl	8000b98 <__aeabi_d2iz>
 8019636:	f7e6 ff95 	bl	8000564 <__aeabi_i2d>
 801963a:	4602      	mov	r2, r0
 801963c:	460b      	mov	r3, r1
 801963e:	4630      	mov	r0, r6
 8019640:	4639      	mov	r1, r7
 8019642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8019646:	f7e6 fe3f 	bl	80002c8 <__aeabi_dsub>
 801964a:	4b22      	ldr	r3, [pc, #136]	; (80196d4 <__ieee754_rem_pio2+0x40c>)
 801964c:	2200      	movs	r2, #0
 801964e:	f7e6 fff3 	bl	8000638 <__aeabi_dmul>
 8019652:	460f      	mov	r7, r1
 8019654:	4606      	mov	r6, r0
 8019656:	f7e7 fa9f 	bl	8000b98 <__aeabi_d2iz>
 801965a:	f7e6 ff83 	bl	8000564 <__aeabi_i2d>
 801965e:	4602      	mov	r2, r0
 8019660:	460b      	mov	r3, r1
 8019662:	4630      	mov	r0, r6
 8019664:	4639      	mov	r1, r7
 8019666:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801966a:	f7e6 fe2d 	bl	80002c8 <__aeabi_dsub>
 801966e:	4b19      	ldr	r3, [pc, #100]	; (80196d4 <__ieee754_rem_pio2+0x40c>)
 8019670:	2200      	movs	r2, #0
 8019672:	f7e6 ffe1 	bl	8000638 <__aeabi_dmul>
 8019676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801967a:	ad04      	add	r5, sp, #16
 801967c:	f04f 0803 	mov.w	r8, #3
 8019680:	46a9      	mov	r9, r5
 8019682:	2600      	movs	r6, #0
 8019684:	2700      	movs	r7, #0
 8019686:	4632      	mov	r2, r6
 8019688:	463b      	mov	r3, r7
 801968a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 801968e:	46c3      	mov	fp, r8
 8019690:	3d08      	subs	r5, #8
 8019692:	f108 38ff 	add.w	r8, r8, #4294967295
 8019696:	f7e7 fa37 	bl	8000b08 <__aeabi_dcmpeq>
 801969a:	2800      	cmp	r0, #0
 801969c:	d1f3      	bne.n	8019686 <__ieee754_rem_pio2+0x3be>
 801969e:	4b0e      	ldr	r3, [pc, #56]	; (80196d8 <__ieee754_rem_pio2+0x410>)
 80196a0:	9301      	str	r3, [sp, #4]
 80196a2:	2302      	movs	r3, #2
 80196a4:	9300      	str	r3, [sp, #0]
 80196a6:	4622      	mov	r2, r4
 80196a8:	465b      	mov	r3, fp
 80196aa:	4651      	mov	r1, sl
 80196ac:	4648      	mov	r0, r9
 80196ae:	f000 fba7 	bl	8019e00 <__kernel_rem_pio2>
 80196b2:	9b02      	ldr	r3, [sp, #8]
 80196b4:	2b00      	cmp	r3, #0
 80196b6:	4683      	mov	fp, r0
 80196b8:	f6bf ae46 	bge.w	8019348 <__ieee754_rem_pio2+0x80>
 80196bc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80196c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80196c4:	f8ca 3004 	str.w	r3, [sl, #4]
 80196c8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80196cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80196d0:	e73a      	b.n	8019548 <__ieee754_rem_pio2+0x280>
 80196d2:	bf00      	nop
 80196d4:	41700000 	.word	0x41700000
 80196d8:	0803e9e8 	.word	0x0803e9e8

080196dc <__ieee754_sqrt>:
 80196dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196e0:	ec55 4b10 	vmov	r4, r5, d0
 80196e4:	4e56      	ldr	r6, [pc, #344]	; (8019840 <__ieee754_sqrt+0x164>)
 80196e6:	43ae      	bics	r6, r5
 80196e8:	ee10 0a10 	vmov	r0, s0
 80196ec:	ee10 3a10 	vmov	r3, s0
 80196f0:	4629      	mov	r1, r5
 80196f2:	462a      	mov	r2, r5
 80196f4:	d110      	bne.n	8019718 <__ieee754_sqrt+0x3c>
 80196f6:	ee10 2a10 	vmov	r2, s0
 80196fa:	462b      	mov	r3, r5
 80196fc:	f7e6 ff9c 	bl	8000638 <__aeabi_dmul>
 8019700:	4602      	mov	r2, r0
 8019702:	460b      	mov	r3, r1
 8019704:	4620      	mov	r0, r4
 8019706:	4629      	mov	r1, r5
 8019708:	f7e6 fde0 	bl	80002cc <__adddf3>
 801970c:	4604      	mov	r4, r0
 801970e:	460d      	mov	r5, r1
 8019710:	ec45 4b10 	vmov	d0, r4, r5
 8019714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019718:	2d00      	cmp	r5, #0
 801971a:	dc10      	bgt.n	801973e <__ieee754_sqrt+0x62>
 801971c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019720:	4330      	orrs	r0, r6
 8019722:	d0f5      	beq.n	8019710 <__ieee754_sqrt+0x34>
 8019724:	b15d      	cbz	r5, 801973e <__ieee754_sqrt+0x62>
 8019726:	ee10 2a10 	vmov	r2, s0
 801972a:	462b      	mov	r3, r5
 801972c:	ee10 0a10 	vmov	r0, s0
 8019730:	f7e6 fdca 	bl	80002c8 <__aeabi_dsub>
 8019734:	4602      	mov	r2, r0
 8019736:	460b      	mov	r3, r1
 8019738:	f7e7 f8a8 	bl	800088c <__aeabi_ddiv>
 801973c:	e7e6      	b.n	801970c <__ieee754_sqrt+0x30>
 801973e:	1509      	asrs	r1, r1, #20
 8019740:	d076      	beq.n	8019830 <__ieee754_sqrt+0x154>
 8019742:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8019746:	07ce      	lsls	r6, r1, #31
 8019748:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 801974c:	bf5e      	ittt	pl
 801974e:	0fda      	lsrpl	r2, r3, #31
 8019750:	005b      	lslpl	r3, r3, #1
 8019752:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8019756:	0fda      	lsrs	r2, r3, #31
 8019758:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 801975c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019760:	2000      	movs	r0, #0
 8019762:	106d      	asrs	r5, r5, #1
 8019764:	005b      	lsls	r3, r3, #1
 8019766:	f04f 0e16 	mov.w	lr, #22
 801976a:	4684      	mov	ip, r0
 801976c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019770:	eb0c 0401 	add.w	r4, ip, r1
 8019774:	4294      	cmp	r4, r2
 8019776:	bfde      	ittt	le
 8019778:	1b12      	suble	r2, r2, r4
 801977a:	eb04 0c01 	addle.w	ip, r4, r1
 801977e:	1840      	addle	r0, r0, r1
 8019780:	0052      	lsls	r2, r2, #1
 8019782:	f1be 0e01 	subs.w	lr, lr, #1
 8019786:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 801978a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 801978e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8019792:	d1ed      	bne.n	8019770 <__ieee754_sqrt+0x94>
 8019794:	4671      	mov	r1, lr
 8019796:	2720      	movs	r7, #32
 8019798:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 801979c:	4562      	cmp	r2, ip
 801979e:	eb04 060e 	add.w	r6, r4, lr
 80197a2:	dc02      	bgt.n	80197aa <__ieee754_sqrt+0xce>
 80197a4:	d113      	bne.n	80197ce <__ieee754_sqrt+0xf2>
 80197a6:	429e      	cmp	r6, r3
 80197a8:	d811      	bhi.n	80197ce <__ieee754_sqrt+0xf2>
 80197aa:	2e00      	cmp	r6, #0
 80197ac:	eb06 0e04 	add.w	lr, r6, r4
 80197b0:	da43      	bge.n	801983a <__ieee754_sqrt+0x15e>
 80197b2:	f1be 0f00 	cmp.w	lr, #0
 80197b6:	db40      	blt.n	801983a <__ieee754_sqrt+0x15e>
 80197b8:	f10c 0801 	add.w	r8, ip, #1
 80197bc:	eba2 020c 	sub.w	r2, r2, ip
 80197c0:	429e      	cmp	r6, r3
 80197c2:	bf88      	it	hi
 80197c4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80197c8:	1b9b      	subs	r3, r3, r6
 80197ca:	4421      	add	r1, r4
 80197cc:	46c4      	mov	ip, r8
 80197ce:	0052      	lsls	r2, r2, #1
 80197d0:	3f01      	subs	r7, #1
 80197d2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80197d6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80197da:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80197de:	d1dd      	bne.n	801979c <__ieee754_sqrt+0xc0>
 80197e0:	4313      	orrs	r3, r2
 80197e2:	d006      	beq.n	80197f2 <__ieee754_sqrt+0x116>
 80197e4:	1c4c      	adds	r4, r1, #1
 80197e6:	bf13      	iteet	ne
 80197e8:	3101      	addne	r1, #1
 80197ea:	3001      	addeq	r0, #1
 80197ec:	4639      	moveq	r1, r7
 80197ee:	f021 0101 	bicne.w	r1, r1, #1
 80197f2:	1043      	asrs	r3, r0, #1
 80197f4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80197f8:	0849      	lsrs	r1, r1, #1
 80197fa:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80197fe:	07c2      	lsls	r2, r0, #31
 8019800:	bf48      	it	mi
 8019802:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8019806:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 801980a:	460c      	mov	r4, r1
 801980c:	463d      	mov	r5, r7
 801980e:	e77f      	b.n	8019710 <__ieee754_sqrt+0x34>
 8019810:	0ada      	lsrs	r2, r3, #11
 8019812:	3815      	subs	r0, #21
 8019814:	055b      	lsls	r3, r3, #21
 8019816:	2a00      	cmp	r2, #0
 8019818:	d0fa      	beq.n	8019810 <__ieee754_sqrt+0x134>
 801981a:	02d7      	lsls	r7, r2, #11
 801981c:	d50a      	bpl.n	8019834 <__ieee754_sqrt+0x158>
 801981e:	f1c1 0420 	rsb	r4, r1, #32
 8019822:	fa23 f404 	lsr.w	r4, r3, r4
 8019826:	1e4d      	subs	r5, r1, #1
 8019828:	408b      	lsls	r3, r1
 801982a:	4322      	orrs	r2, r4
 801982c:	1b41      	subs	r1, r0, r5
 801982e:	e788      	b.n	8019742 <__ieee754_sqrt+0x66>
 8019830:	4608      	mov	r0, r1
 8019832:	e7f0      	b.n	8019816 <__ieee754_sqrt+0x13a>
 8019834:	0052      	lsls	r2, r2, #1
 8019836:	3101      	adds	r1, #1
 8019838:	e7ef      	b.n	801981a <__ieee754_sqrt+0x13e>
 801983a:	46e0      	mov	r8, ip
 801983c:	e7be      	b.n	80197bc <__ieee754_sqrt+0xe0>
 801983e:	bf00      	nop
 8019840:	7ff00000 	.word	0x7ff00000

08019844 <__ieee754_expf>:
 8019844:	ee10 2a10 	vmov	r2, s0
 8019848:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 801984c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019850:	d902      	bls.n	8019858 <__ieee754_expf+0x14>
 8019852:	ee30 0a00 	vadd.f32	s0, s0, s0
 8019856:	4770      	bx	lr
 8019858:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 801985c:	d106      	bne.n	801986c <__ieee754_expf+0x28>
 801985e:	eddf 7a51 	vldr	s15, [pc, #324]	; 80199a4 <__ieee754_expf+0x160>
 8019862:	2b00      	cmp	r3, #0
 8019864:	bf18      	it	ne
 8019866:	eeb0 0a67 	vmovne.f32	s0, s15
 801986a:	4770      	bx	lr
 801986c:	484e      	ldr	r0, [pc, #312]	; (80199a8 <__ieee754_expf+0x164>)
 801986e:	4282      	cmp	r2, r0
 8019870:	dd04      	ble.n	801987c <__ieee754_expf+0x38>
 8019872:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 80199ac <__ieee754_expf+0x168>
 8019876:	ee20 0a00 	vmul.f32	s0, s0, s0
 801987a:	4770      	bx	lr
 801987c:	2a00      	cmp	r2, #0
 801987e:	da03      	bge.n	8019888 <__ieee754_expf+0x44>
 8019880:	4a4b      	ldr	r2, [pc, #300]	; (80199b0 <__ieee754_expf+0x16c>)
 8019882:	4291      	cmp	r1, r2
 8019884:	f200 808a 	bhi.w	801999c <__ieee754_expf+0x158>
 8019888:	4a4a      	ldr	r2, [pc, #296]	; (80199b4 <__ieee754_expf+0x170>)
 801988a:	4291      	cmp	r1, r2
 801988c:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8019890:	d954      	bls.n	801993c <__ieee754_expf+0xf8>
 8019892:	4a49      	ldr	r2, [pc, #292]	; (80199b8 <__ieee754_expf+0x174>)
 8019894:	4291      	cmp	r1, r2
 8019896:	ea4f 0283 	mov.w	r2, r3, lsl #2
 801989a:	d836      	bhi.n	801990a <__ieee754_expf+0xc6>
 801989c:	4947      	ldr	r1, [pc, #284]	; (80199bc <__ieee754_expf+0x178>)
 801989e:	4411      	add	r1, r2
 80198a0:	ed91 7a00 	vldr	s14, [r1]
 80198a4:	4946      	ldr	r1, [pc, #280]	; (80199c0 <__ieee754_expf+0x17c>)
 80198a6:	440a      	add	r2, r1
 80198a8:	edd2 7a00 	vldr	s15, [r2]
 80198ac:	ee30 7a47 	vsub.f32	s14, s0, s14
 80198b0:	f1c3 0201 	rsb	r2, r3, #1
 80198b4:	1ad2      	subs	r2, r2, r3
 80198b6:	ee37 0a67 	vsub.f32	s0, s14, s15
 80198ba:	ee60 6a00 	vmul.f32	s13, s0, s0
 80198be:	eddf 5a41 	vldr	s11, [pc, #260]	; 80199c4 <__ieee754_expf+0x180>
 80198c2:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80199c8 <__ieee754_expf+0x184>
 80198c6:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80198ca:	eddf 5a40 	vldr	s11, [pc, #256]	; 80199cc <__ieee754_expf+0x188>
 80198ce:	eee5 5a26 	vfma.f32	s11, s10, s13
 80198d2:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80199d0 <__ieee754_expf+0x18c>
 80198d6:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80198da:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80199d4 <__ieee754_expf+0x190>
 80198de:	eee5 5a26 	vfma.f32	s11, s10, s13
 80198e2:	eeb0 5a40 	vmov.f32	s10, s0
 80198e6:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80198ea:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80198ee:	eef0 6a45 	vmov.f32	s13, s10
 80198f2:	ee20 5a05 	vmul.f32	s10, s0, s10
 80198f6:	bb92      	cbnz	r2, 801995e <__ieee754_expf+0x11a>
 80198f8:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80198fc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8019900:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8019904:	ee36 0a40 	vsub.f32	s0, s12, s0
 8019908:	4770      	bx	lr
 801990a:	4b33      	ldr	r3, [pc, #204]	; (80199d8 <__ieee754_expf+0x194>)
 801990c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80199dc <__ieee754_expf+0x198>
 8019910:	4413      	add	r3, r2
 8019912:	edd3 7a00 	vldr	s15, [r3]
 8019916:	eee0 7a07 	vfma.f32	s15, s0, s14
 801991a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80199e0 <__ieee754_expf+0x19c>
 801991e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019922:	ee17 2a90 	vmov	r2, s15
 8019926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801992a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801992e:	eeb0 7a40 	vmov.f32	s14, s0
 8019932:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80199e4 <__ieee754_expf+0x1a0>
 8019936:	ee67 7a80 	vmul.f32	s15, s15, s0
 801993a:	e7bc      	b.n	80198b6 <__ieee754_expf+0x72>
 801993c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8019940:	d20b      	bcs.n	801995a <__ieee754_expf+0x116>
 8019942:	eddf 6a1a 	vldr	s13, [pc, #104]	; 80199ac <__ieee754_expf+0x168>
 8019946:	ee70 6a26 	vadd.f32	s13, s0, s13
 801994a:	eef4 6ac6 	vcmpe.f32	s13, s12
 801994e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019952:	dd02      	ble.n	801995a <__ieee754_expf+0x116>
 8019954:	ee30 0a06 	vadd.f32	s0, s0, s12
 8019958:	4770      	bx	lr
 801995a:	2200      	movs	r2, #0
 801995c:	e7ad      	b.n	80198ba <__ieee754_expf+0x76>
 801995e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8019962:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8019966:	ee85 0a26 	vdiv.f32	s0, s10, s13
 801996a:	bfb8      	it	lt
 801996c:	3264      	addlt	r2, #100	; 0x64
 801996e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019972:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019976:	ee76 7a40 	vsub.f32	s15, s12, s0
 801997a:	ee17 3a90 	vmov	r3, s15
 801997e:	bfab      	itete	ge
 8019980:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8019984:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019988:	ee00 3a10 	vmovge	s0, r3
 801998c:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80199e8 <__ieee754_expf+0x1a4>
 8019990:	bfbc      	itt	lt
 8019992:	ee00 3a10 	vmovlt	s0, r3
 8019996:	ee20 0a27 	vmullt.f32	s0, s0, s15
 801999a:	4770      	bx	lr
 801999c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80199a4 <__ieee754_expf+0x160>
 80199a0:	4770      	bx	lr
 80199a2:	bf00      	nop
 80199a4:	00000000 	.word	0x00000000
 80199a8:	42b17217 	.word	0x42b17217
 80199ac:	7149f2ca 	.word	0x7149f2ca
 80199b0:	42cff1b5 	.word	0x42cff1b5
 80199b4:	3eb17218 	.word	0x3eb17218
 80199b8:	3f851591 	.word	0x3f851591
 80199bc:	0803eaf8 	.word	0x0803eaf8
 80199c0:	0803eb00 	.word	0x0803eb00
 80199c4:	3331bb4c 	.word	0x3331bb4c
 80199c8:	b5ddea0e 	.word	0xb5ddea0e
 80199cc:	388ab355 	.word	0x388ab355
 80199d0:	bb360b61 	.word	0xbb360b61
 80199d4:	3e2aaaab 	.word	0x3e2aaaab
 80199d8:	0803eaf0 	.word	0x0803eaf0
 80199dc:	3fb8aa3b 	.word	0x3fb8aa3b
 80199e0:	3f317180 	.word	0x3f317180
 80199e4:	3717f7d1 	.word	0x3717f7d1
 80199e8:	0d800000 	.word	0x0d800000

080199ec <__ieee754_rem_pio2f>:
 80199ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199ee:	ee10 6a10 	vmov	r6, s0
 80199f2:	4b8e      	ldr	r3, [pc, #568]	; (8019c2c <__ieee754_rem_pio2f+0x240>)
 80199f4:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80199f8:	429d      	cmp	r5, r3
 80199fa:	b087      	sub	sp, #28
 80199fc:	eef0 7a40 	vmov.f32	s15, s0
 8019a00:	4604      	mov	r4, r0
 8019a02:	dc05      	bgt.n	8019a10 <__ieee754_rem_pio2f+0x24>
 8019a04:	2300      	movs	r3, #0
 8019a06:	ed80 0a00 	vstr	s0, [r0]
 8019a0a:	6043      	str	r3, [r0, #4]
 8019a0c:	2000      	movs	r0, #0
 8019a0e:	e01a      	b.n	8019a46 <__ieee754_rem_pio2f+0x5a>
 8019a10:	4b87      	ldr	r3, [pc, #540]	; (8019c30 <__ieee754_rem_pio2f+0x244>)
 8019a12:	429d      	cmp	r5, r3
 8019a14:	dc46      	bgt.n	8019aa4 <__ieee754_rem_pio2f+0xb8>
 8019a16:	2e00      	cmp	r6, #0
 8019a18:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8019c34 <__ieee754_rem_pio2f+0x248>
 8019a1c:	4b86      	ldr	r3, [pc, #536]	; (8019c38 <__ieee754_rem_pio2f+0x24c>)
 8019a1e:	f025 050f 	bic.w	r5, r5, #15
 8019a22:	dd1f      	ble.n	8019a64 <__ieee754_rem_pio2f+0x78>
 8019a24:	429d      	cmp	r5, r3
 8019a26:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a2a:	d00e      	beq.n	8019a4a <__ieee754_rem_pio2f+0x5e>
 8019a2c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8019c3c <__ieee754_rem_pio2f+0x250>
 8019a30:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019a34:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a38:	ed80 0a00 	vstr	s0, [r0]
 8019a3c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a40:	2001      	movs	r0, #1
 8019a42:	edc4 7a01 	vstr	s15, [r4, #4]
 8019a46:	b007      	add	sp, #28
 8019a48:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a4a:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8019c40 <__ieee754_rem_pio2f+0x254>
 8019a4e:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8019c44 <__ieee754_rem_pio2f+0x258>
 8019a52:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a56:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019a5a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a5e:	edc0 6a00 	vstr	s13, [r0]
 8019a62:	e7eb      	b.n	8019a3c <__ieee754_rem_pio2f+0x50>
 8019a64:	429d      	cmp	r5, r3
 8019a66:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019a6a:	d00e      	beq.n	8019a8a <__ieee754_rem_pio2f+0x9e>
 8019a6c:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8019c3c <__ieee754_rem_pio2f+0x250>
 8019a70:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019a74:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a78:	ed80 0a00 	vstr	s0, [r0]
 8019a7c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a80:	f04f 30ff 	mov.w	r0, #4294967295
 8019a84:	edc4 7a01 	vstr	s15, [r4, #4]
 8019a88:	e7dd      	b.n	8019a46 <__ieee754_rem_pio2f+0x5a>
 8019a8a:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8019c40 <__ieee754_rem_pio2f+0x254>
 8019a8e:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8019c44 <__ieee754_rem_pio2f+0x258>
 8019a92:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019a96:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019a9a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a9e:	edc0 6a00 	vstr	s13, [r0]
 8019aa2:	e7eb      	b.n	8019a7c <__ieee754_rem_pio2f+0x90>
 8019aa4:	4b68      	ldr	r3, [pc, #416]	; (8019c48 <__ieee754_rem_pio2f+0x25c>)
 8019aa6:	429d      	cmp	r5, r3
 8019aa8:	dc72      	bgt.n	8019b90 <__ieee754_rem_pio2f+0x1a4>
 8019aaa:	f001 fa07 	bl	801aebc <fabsf>
 8019aae:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019c4c <__ieee754_rem_pio2f+0x260>
 8019ab2:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019ab6:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019aba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019abe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019ac2:	ee17 0a90 	vmov	r0, s15
 8019ac6:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019c34 <__ieee754_rem_pio2f+0x248>
 8019aca:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019ace:	281f      	cmp	r0, #31
 8019ad0:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8019c3c <__ieee754_rem_pio2f+0x250>
 8019ad4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ad8:	eeb1 6a47 	vneg.f32	s12, s14
 8019adc:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019ae0:	ee16 2a90 	vmov	r2, s13
 8019ae4:	dc1c      	bgt.n	8019b20 <__ieee754_rem_pio2f+0x134>
 8019ae6:	495a      	ldr	r1, [pc, #360]	; (8019c50 <__ieee754_rem_pio2f+0x264>)
 8019ae8:	1e47      	subs	r7, r0, #1
 8019aea:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8019aee:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019af2:	428b      	cmp	r3, r1
 8019af4:	d014      	beq.n	8019b20 <__ieee754_rem_pio2f+0x134>
 8019af6:	6022      	str	r2, [r4, #0]
 8019af8:	ed94 7a00 	vldr	s14, [r4]
 8019afc:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019b00:	2e00      	cmp	r6, #0
 8019b02:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019b06:	ed84 0a01 	vstr	s0, [r4, #4]
 8019b0a:	da9c      	bge.n	8019a46 <__ieee754_rem_pio2f+0x5a>
 8019b0c:	eeb1 7a47 	vneg.f32	s14, s14
 8019b10:	eeb1 0a40 	vneg.f32	s0, s0
 8019b14:	ed84 7a00 	vstr	s14, [r4]
 8019b18:	ed84 0a01 	vstr	s0, [r4, #4]
 8019b1c:	4240      	negs	r0, r0
 8019b1e:	e792      	b.n	8019a46 <__ieee754_rem_pio2f+0x5a>
 8019b20:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019b24:	15eb      	asrs	r3, r5, #23
 8019b26:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8019b2a:	2d08      	cmp	r5, #8
 8019b2c:	dde3      	ble.n	8019af6 <__ieee754_rem_pio2f+0x10a>
 8019b2e:	eddf 7a44 	vldr	s15, [pc, #272]	; 8019c40 <__ieee754_rem_pio2f+0x254>
 8019b32:	eef0 6a40 	vmov.f32	s13, s0
 8019b36:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019b3a:	ee30 0a66 	vsub.f32	s0, s0, s13
 8019b3e:	eea6 0a27 	vfma.f32	s0, s12, s15
 8019b42:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019c44 <__ieee754_rem_pio2f+0x258>
 8019b46:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8019b4a:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8019b4e:	eef0 7a40 	vmov.f32	s15, s0
 8019b52:	ee15 2a90 	vmov	r2, s11
 8019b56:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019b5a:	1a5b      	subs	r3, r3, r1
 8019b5c:	2b19      	cmp	r3, #25
 8019b5e:	dc04      	bgt.n	8019b6a <__ieee754_rem_pio2f+0x17e>
 8019b60:	edc4 5a00 	vstr	s11, [r4]
 8019b64:	eeb0 0a66 	vmov.f32	s0, s13
 8019b68:	e7c6      	b.n	8019af8 <__ieee754_rem_pio2f+0x10c>
 8019b6a:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019c54 <__ieee754_rem_pio2f+0x268>
 8019b6e:	eeb0 0a66 	vmov.f32	s0, s13
 8019b72:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019b76:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019b7a:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019c58 <__ieee754_rem_pio2f+0x26c>
 8019b7e:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019b82:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019b86:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019b8a:	ed84 7a00 	vstr	s14, [r4]
 8019b8e:	e7b3      	b.n	8019af8 <__ieee754_rem_pio2f+0x10c>
 8019b90:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019b94:	db06      	blt.n	8019ba4 <__ieee754_rem_pio2f+0x1b8>
 8019b96:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019b9a:	edc0 7a01 	vstr	s15, [r0, #4]
 8019b9e:	edc0 7a00 	vstr	s15, [r0]
 8019ba2:	e733      	b.n	8019a0c <__ieee754_rem_pio2f+0x20>
 8019ba4:	15ea      	asrs	r2, r5, #23
 8019ba6:	3a86      	subs	r2, #134	; 0x86
 8019ba8:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019bac:	ee07 3a90 	vmov	s15, r3
 8019bb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019bb4:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019c5c <__ieee754_rem_pio2f+0x270>
 8019bb8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019bbc:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019bc0:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019bc4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019bc8:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019bcc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019bd0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019bd4:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019bd8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019bdc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019be0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019be4:	edcd 7a05 	vstr	s15, [sp, #20]
 8019be8:	d11e      	bne.n	8019c28 <__ieee754_rem_pio2f+0x23c>
 8019bea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019bee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bf2:	bf14      	ite	ne
 8019bf4:	2302      	movne	r3, #2
 8019bf6:	2301      	moveq	r3, #1
 8019bf8:	4919      	ldr	r1, [pc, #100]	; (8019c60 <__ieee754_rem_pio2f+0x274>)
 8019bfa:	9101      	str	r1, [sp, #4]
 8019bfc:	2102      	movs	r1, #2
 8019bfe:	9100      	str	r1, [sp, #0]
 8019c00:	a803      	add	r0, sp, #12
 8019c02:	4621      	mov	r1, r4
 8019c04:	f000 fd5a 	bl	801a6bc <__kernel_rem_pio2f>
 8019c08:	2e00      	cmp	r6, #0
 8019c0a:	f6bf af1c 	bge.w	8019a46 <__ieee754_rem_pio2f+0x5a>
 8019c0e:	edd4 7a00 	vldr	s15, [r4]
 8019c12:	eef1 7a67 	vneg.f32	s15, s15
 8019c16:	edc4 7a00 	vstr	s15, [r4]
 8019c1a:	edd4 7a01 	vldr	s15, [r4, #4]
 8019c1e:	eef1 7a67 	vneg.f32	s15, s15
 8019c22:	edc4 7a01 	vstr	s15, [r4, #4]
 8019c26:	e779      	b.n	8019b1c <__ieee754_rem_pio2f+0x130>
 8019c28:	2303      	movs	r3, #3
 8019c2a:	e7e5      	b.n	8019bf8 <__ieee754_rem_pio2f+0x20c>
 8019c2c:	3f490fd8 	.word	0x3f490fd8
 8019c30:	4016cbe3 	.word	0x4016cbe3
 8019c34:	3fc90f80 	.word	0x3fc90f80
 8019c38:	3fc90fd0 	.word	0x3fc90fd0
 8019c3c:	37354443 	.word	0x37354443
 8019c40:	37354400 	.word	0x37354400
 8019c44:	2e85a308 	.word	0x2e85a308
 8019c48:	43490f80 	.word	0x43490f80
 8019c4c:	3f22f984 	.word	0x3f22f984
 8019c50:	0803eb08 	.word	0x0803eb08
 8019c54:	2e85a300 	.word	0x2e85a300
 8019c58:	248d3132 	.word	0x248d3132
 8019c5c:	43800000 	.word	0x43800000
 8019c60:	0803eb88 	.word	0x0803eb88

08019c64 <__ieee754_sqrtf>:
 8019c64:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019c68:	4770      	bx	lr
 8019c6a:	0000      	movs	r0, r0
 8019c6c:	0000      	movs	r0, r0
	...

08019c70 <__kernel_cos>:
 8019c70:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c74:	ec57 6b10 	vmov	r6, r7, d0
 8019c78:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019c7c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019c80:	ed8d 1b00 	vstr	d1, [sp]
 8019c84:	da07      	bge.n	8019c96 <__kernel_cos+0x26>
 8019c86:	ee10 0a10 	vmov	r0, s0
 8019c8a:	4639      	mov	r1, r7
 8019c8c:	f7e6 ff84 	bl	8000b98 <__aeabi_d2iz>
 8019c90:	2800      	cmp	r0, #0
 8019c92:	f000 8088 	beq.w	8019da6 <__kernel_cos+0x136>
 8019c96:	4632      	mov	r2, r6
 8019c98:	463b      	mov	r3, r7
 8019c9a:	4630      	mov	r0, r6
 8019c9c:	4639      	mov	r1, r7
 8019c9e:	f7e6 fccb 	bl	8000638 <__aeabi_dmul>
 8019ca2:	4b51      	ldr	r3, [pc, #324]	; (8019de8 <__kernel_cos+0x178>)
 8019ca4:	2200      	movs	r2, #0
 8019ca6:	4604      	mov	r4, r0
 8019ca8:	460d      	mov	r5, r1
 8019caa:	f7e6 fcc5 	bl	8000638 <__aeabi_dmul>
 8019cae:	a340      	add	r3, pc, #256	; (adr r3, 8019db0 <__kernel_cos+0x140>)
 8019cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cb4:	4682      	mov	sl, r0
 8019cb6:	468b      	mov	fp, r1
 8019cb8:	4620      	mov	r0, r4
 8019cba:	4629      	mov	r1, r5
 8019cbc:	f7e6 fcbc 	bl	8000638 <__aeabi_dmul>
 8019cc0:	a33d      	add	r3, pc, #244	; (adr r3, 8019db8 <__kernel_cos+0x148>)
 8019cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cc6:	f7e6 fb01 	bl	80002cc <__adddf3>
 8019cca:	4622      	mov	r2, r4
 8019ccc:	462b      	mov	r3, r5
 8019cce:	f7e6 fcb3 	bl	8000638 <__aeabi_dmul>
 8019cd2:	a33b      	add	r3, pc, #236	; (adr r3, 8019dc0 <__kernel_cos+0x150>)
 8019cd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cd8:	f7e6 faf6 	bl	80002c8 <__aeabi_dsub>
 8019cdc:	4622      	mov	r2, r4
 8019cde:	462b      	mov	r3, r5
 8019ce0:	f7e6 fcaa 	bl	8000638 <__aeabi_dmul>
 8019ce4:	a338      	add	r3, pc, #224	; (adr r3, 8019dc8 <__kernel_cos+0x158>)
 8019ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cea:	f7e6 faef 	bl	80002cc <__adddf3>
 8019cee:	4622      	mov	r2, r4
 8019cf0:	462b      	mov	r3, r5
 8019cf2:	f7e6 fca1 	bl	8000638 <__aeabi_dmul>
 8019cf6:	a336      	add	r3, pc, #216	; (adr r3, 8019dd0 <__kernel_cos+0x160>)
 8019cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cfc:	f7e6 fae4 	bl	80002c8 <__aeabi_dsub>
 8019d00:	4622      	mov	r2, r4
 8019d02:	462b      	mov	r3, r5
 8019d04:	f7e6 fc98 	bl	8000638 <__aeabi_dmul>
 8019d08:	a333      	add	r3, pc, #204	; (adr r3, 8019dd8 <__kernel_cos+0x168>)
 8019d0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019d0e:	f7e6 fadd 	bl	80002cc <__adddf3>
 8019d12:	4622      	mov	r2, r4
 8019d14:	462b      	mov	r3, r5
 8019d16:	f7e6 fc8f 	bl	8000638 <__aeabi_dmul>
 8019d1a:	4622      	mov	r2, r4
 8019d1c:	462b      	mov	r3, r5
 8019d1e:	f7e6 fc8b 	bl	8000638 <__aeabi_dmul>
 8019d22:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d26:	4604      	mov	r4, r0
 8019d28:	460d      	mov	r5, r1
 8019d2a:	4630      	mov	r0, r6
 8019d2c:	4639      	mov	r1, r7
 8019d2e:	f7e6 fc83 	bl	8000638 <__aeabi_dmul>
 8019d32:	460b      	mov	r3, r1
 8019d34:	4602      	mov	r2, r0
 8019d36:	4629      	mov	r1, r5
 8019d38:	4620      	mov	r0, r4
 8019d3a:	f7e6 fac5 	bl	80002c8 <__aeabi_dsub>
 8019d3e:	4b2b      	ldr	r3, [pc, #172]	; (8019dec <__kernel_cos+0x17c>)
 8019d40:	4598      	cmp	r8, r3
 8019d42:	4606      	mov	r6, r0
 8019d44:	460f      	mov	r7, r1
 8019d46:	dc10      	bgt.n	8019d6a <__kernel_cos+0xfa>
 8019d48:	4602      	mov	r2, r0
 8019d4a:	460b      	mov	r3, r1
 8019d4c:	4650      	mov	r0, sl
 8019d4e:	4659      	mov	r1, fp
 8019d50:	f7e6 faba 	bl	80002c8 <__aeabi_dsub>
 8019d54:	460b      	mov	r3, r1
 8019d56:	4926      	ldr	r1, [pc, #152]	; (8019df0 <__kernel_cos+0x180>)
 8019d58:	4602      	mov	r2, r0
 8019d5a:	2000      	movs	r0, #0
 8019d5c:	f7e6 fab4 	bl	80002c8 <__aeabi_dsub>
 8019d60:	ec41 0b10 	vmov	d0, r0, r1
 8019d64:	b003      	add	sp, #12
 8019d66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d6a:	4b22      	ldr	r3, [pc, #136]	; (8019df4 <__kernel_cos+0x184>)
 8019d6c:	4920      	ldr	r1, [pc, #128]	; (8019df0 <__kernel_cos+0x180>)
 8019d6e:	4598      	cmp	r8, r3
 8019d70:	bfcc      	ite	gt
 8019d72:	4d21      	ldrgt	r5, [pc, #132]	; (8019df8 <__kernel_cos+0x188>)
 8019d74:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019d78:	2400      	movs	r4, #0
 8019d7a:	4622      	mov	r2, r4
 8019d7c:	462b      	mov	r3, r5
 8019d7e:	2000      	movs	r0, #0
 8019d80:	f7e6 faa2 	bl	80002c8 <__aeabi_dsub>
 8019d84:	4622      	mov	r2, r4
 8019d86:	4680      	mov	r8, r0
 8019d88:	4689      	mov	r9, r1
 8019d8a:	462b      	mov	r3, r5
 8019d8c:	4650      	mov	r0, sl
 8019d8e:	4659      	mov	r1, fp
 8019d90:	f7e6 fa9a 	bl	80002c8 <__aeabi_dsub>
 8019d94:	4632      	mov	r2, r6
 8019d96:	463b      	mov	r3, r7
 8019d98:	f7e6 fa96 	bl	80002c8 <__aeabi_dsub>
 8019d9c:	4602      	mov	r2, r0
 8019d9e:	460b      	mov	r3, r1
 8019da0:	4640      	mov	r0, r8
 8019da2:	4649      	mov	r1, r9
 8019da4:	e7da      	b.n	8019d5c <__kernel_cos+0xec>
 8019da6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019de0 <__kernel_cos+0x170>
 8019daa:	e7db      	b.n	8019d64 <__kernel_cos+0xf4>
 8019dac:	f3af 8000 	nop.w
 8019db0:	be8838d4 	.word	0xbe8838d4
 8019db4:	bda8fae9 	.word	0xbda8fae9
 8019db8:	bdb4b1c4 	.word	0xbdb4b1c4
 8019dbc:	3e21ee9e 	.word	0x3e21ee9e
 8019dc0:	809c52ad 	.word	0x809c52ad
 8019dc4:	3e927e4f 	.word	0x3e927e4f
 8019dc8:	19cb1590 	.word	0x19cb1590
 8019dcc:	3efa01a0 	.word	0x3efa01a0
 8019dd0:	16c15177 	.word	0x16c15177
 8019dd4:	3f56c16c 	.word	0x3f56c16c
 8019dd8:	5555554c 	.word	0x5555554c
 8019ddc:	3fa55555 	.word	0x3fa55555
 8019de0:	00000000 	.word	0x00000000
 8019de4:	3ff00000 	.word	0x3ff00000
 8019de8:	3fe00000 	.word	0x3fe00000
 8019dec:	3fd33332 	.word	0x3fd33332
 8019df0:	3ff00000 	.word	0x3ff00000
 8019df4:	3fe90000 	.word	0x3fe90000
 8019df8:	3fd20000 	.word	0x3fd20000
 8019dfc:	00000000 	.word	0x00000000

08019e00 <__kernel_rem_pio2>:
 8019e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019e04:	ed2d 8b02 	vpush	{d8}
 8019e08:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8019e0c:	f112 0f14 	cmn.w	r2, #20
 8019e10:	9308      	str	r3, [sp, #32]
 8019e12:	9101      	str	r1, [sp, #4]
 8019e14:	4bc6      	ldr	r3, [pc, #792]	; (801a130 <__kernel_rem_pio2+0x330>)
 8019e16:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8019e18:	9009      	str	r0, [sp, #36]	; 0x24
 8019e1a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019e1e:	9304      	str	r3, [sp, #16]
 8019e20:	9b08      	ldr	r3, [sp, #32]
 8019e22:	f103 33ff 	add.w	r3, r3, #4294967295
 8019e26:	bfa8      	it	ge
 8019e28:	1ed4      	subge	r4, r2, #3
 8019e2a:	9306      	str	r3, [sp, #24]
 8019e2c:	bfb2      	itee	lt
 8019e2e:	2400      	movlt	r4, #0
 8019e30:	2318      	movge	r3, #24
 8019e32:	fb94 f4f3 	sdivge	r4, r4, r3
 8019e36:	f06f 0317 	mvn.w	r3, #23
 8019e3a:	fb04 3303 	mla	r3, r4, r3, r3
 8019e3e:	eb03 0a02 	add.w	sl, r3, r2
 8019e42:	9b04      	ldr	r3, [sp, #16]
 8019e44:	9a06      	ldr	r2, [sp, #24]
 8019e46:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a120 <__kernel_rem_pio2+0x320>
 8019e4a:	eb03 0802 	add.w	r8, r3, r2
 8019e4e:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8019e50:	1aa7      	subs	r7, r4, r2
 8019e52:	ae20      	add	r6, sp, #128	; 0x80
 8019e54:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019e58:	2500      	movs	r5, #0
 8019e5a:	4545      	cmp	r5, r8
 8019e5c:	dd18      	ble.n	8019e90 <__kernel_rem_pio2+0x90>
 8019e5e:	9b08      	ldr	r3, [sp, #32]
 8019e60:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019e64:	aa20      	add	r2, sp, #128	; 0x80
 8019e66:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801a120 <__kernel_rem_pio2+0x320>
 8019e6a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8019e6e:	f1c3 0301 	rsb	r3, r3, #1
 8019e72:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8019e76:	9307      	str	r3, [sp, #28]
 8019e78:	9b07      	ldr	r3, [sp, #28]
 8019e7a:	9a04      	ldr	r2, [sp, #16]
 8019e7c:	4443      	add	r3, r8
 8019e7e:	429a      	cmp	r2, r3
 8019e80:	db2f      	blt.n	8019ee2 <__kernel_rem_pio2+0xe2>
 8019e82:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019e86:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019e8a:	462f      	mov	r7, r5
 8019e8c:	2600      	movs	r6, #0
 8019e8e:	e01b      	b.n	8019ec8 <__kernel_rem_pio2+0xc8>
 8019e90:	42ef      	cmn	r7, r5
 8019e92:	d407      	bmi.n	8019ea4 <__kernel_rem_pio2+0xa4>
 8019e94:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019e98:	f7e6 fb64 	bl	8000564 <__aeabi_i2d>
 8019e9c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019ea0:	3501      	adds	r5, #1
 8019ea2:	e7da      	b.n	8019e5a <__kernel_rem_pio2+0x5a>
 8019ea4:	ec51 0b18 	vmov	r0, r1, d8
 8019ea8:	e7f8      	b.n	8019e9c <__kernel_rem_pio2+0x9c>
 8019eaa:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019eae:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019eb2:	f7e6 fbc1 	bl	8000638 <__aeabi_dmul>
 8019eb6:	4602      	mov	r2, r0
 8019eb8:	460b      	mov	r3, r1
 8019eba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ebe:	f7e6 fa05 	bl	80002cc <__adddf3>
 8019ec2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019ec6:	3601      	adds	r6, #1
 8019ec8:	9b06      	ldr	r3, [sp, #24]
 8019eca:	429e      	cmp	r6, r3
 8019ecc:	f1a7 0708 	sub.w	r7, r7, #8
 8019ed0:	ddeb      	ble.n	8019eaa <__kernel_rem_pio2+0xaa>
 8019ed2:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019ed6:	3508      	adds	r5, #8
 8019ed8:	ecab 7b02 	vstmia	fp!, {d7}
 8019edc:	f108 0801 	add.w	r8, r8, #1
 8019ee0:	e7ca      	b.n	8019e78 <__kernel_rem_pio2+0x78>
 8019ee2:	9b04      	ldr	r3, [sp, #16]
 8019ee4:	aa0c      	add	r2, sp, #48	; 0x30
 8019ee6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019eea:	930b      	str	r3, [sp, #44]	; 0x2c
 8019eec:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8019eee:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019ef2:	9c04      	ldr	r4, [sp, #16]
 8019ef4:	930a      	str	r3, [sp, #40]	; 0x28
 8019ef6:	ab98      	add	r3, sp, #608	; 0x260
 8019ef8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019efc:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8019f00:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8019f04:	f8cd b008 	str.w	fp, [sp, #8]
 8019f08:	4625      	mov	r5, r4
 8019f0a:	2d00      	cmp	r5, #0
 8019f0c:	dc78      	bgt.n	801a000 <__kernel_rem_pio2+0x200>
 8019f0e:	ec47 6b10 	vmov	d0, r6, r7
 8019f12:	4650      	mov	r0, sl
 8019f14:	f000 ff4c 	bl	801adb0 <scalbn>
 8019f18:	ec57 6b10 	vmov	r6, r7, d0
 8019f1c:	2200      	movs	r2, #0
 8019f1e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019f22:	ee10 0a10 	vmov	r0, s0
 8019f26:	4639      	mov	r1, r7
 8019f28:	f7e6 fb86 	bl	8000638 <__aeabi_dmul>
 8019f2c:	ec41 0b10 	vmov	d0, r0, r1
 8019f30:	f7fe f8ba 	bl	80180a8 <floor>
 8019f34:	4b7f      	ldr	r3, [pc, #508]	; (801a134 <__kernel_rem_pio2+0x334>)
 8019f36:	ec51 0b10 	vmov	r0, r1, d0
 8019f3a:	2200      	movs	r2, #0
 8019f3c:	f7e6 fb7c 	bl	8000638 <__aeabi_dmul>
 8019f40:	4602      	mov	r2, r0
 8019f42:	460b      	mov	r3, r1
 8019f44:	4630      	mov	r0, r6
 8019f46:	4639      	mov	r1, r7
 8019f48:	f7e6 f9be 	bl	80002c8 <__aeabi_dsub>
 8019f4c:	460f      	mov	r7, r1
 8019f4e:	4606      	mov	r6, r0
 8019f50:	f7e6 fe22 	bl	8000b98 <__aeabi_d2iz>
 8019f54:	9007      	str	r0, [sp, #28]
 8019f56:	f7e6 fb05 	bl	8000564 <__aeabi_i2d>
 8019f5a:	4602      	mov	r2, r0
 8019f5c:	460b      	mov	r3, r1
 8019f5e:	4630      	mov	r0, r6
 8019f60:	4639      	mov	r1, r7
 8019f62:	f7e6 f9b1 	bl	80002c8 <__aeabi_dsub>
 8019f66:	f1ba 0f00 	cmp.w	sl, #0
 8019f6a:	4606      	mov	r6, r0
 8019f6c:	460f      	mov	r7, r1
 8019f6e:	dd70      	ble.n	801a052 <__kernel_rem_pio2+0x252>
 8019f70:	1e62      	subs	r2, r4, #1
 8019f72:	ab0c      	add	r3, sp, #48	; 0x30
 8019f74:	9d07      	ldr	r5, [sp, #28]
 8019f76:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019f7a:	f1ca 0118 	rsb	r1, sl, #24
 8019f7e:	fa40 f301 	asr.w	r3, r0, r1
 8019f82:	441d      	add	r5, r3
 8019f84:	408b      	lsls	r3, r1
 8019f86:	1ac0      	subs	r0, r0, r3
 8019f88:	ab0c      	add	r3, sp, #48	; 0x30
 8019f8a:	9507      	str	r5, [sp, #28]
 8019f8c:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019f90:	f1ca 0317 	rsb	r3, sl, #23
 8019f94:	fa40 f303 	asr.w	r3, r0, r3
 8019f98:	9302      	str	r3, [sp, #8]
 8019f9a:	9b02      	ldr	r3, [sp, #8]
 8019f9c:	2b00      	cmp	r3, #0
 8019f9e:	dd66      	ble.n	801a06e <__kernel_rem_pio2+0x26e>
 8019fa0:	9b07      	ldr	r3, [sp, #28]
 8019fa2:	2200      	movs	r2, #0
 8019fa4:	3301      	adds	r3, #1
 8019fa6:	9307      	str	r3, [sp, #28]
 8019fa8:	4615      	mov	r5, r2
 8019faa:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019fae:	4294      	cmp	r4, r2
 8019fb0:	f300 8099 	bgt.w	801a0e6 <__kernel_rem_pio2+0x2e6>
 8019fb4:	f1ba 0f00 	cmp.w	sl, #0
 8019fb8:	dd07      	ble.n	8019fca <__kernel_rem_pio2+0x1ca>
 8019fba:	f1ba 0f01 	cmp.w	sl, #1
 8019fbe:	f000 80a5 	beq.w	801a10c <__kernel_rem_pio2+0x30c>
 8019fc2:	f1ba 0f02 	cmp.w	sl, #2
 8019fc6:	f000 80c1 	beq.w	801a14c <__kernel_rem_pio2+0x34c>
 8019fca:	9b02      	ldr	r3, [sp, #8]
 8019fcc:	2b02      	cmp	r3, #2
 8019fce:	d14e      	bne.n	801a06e <__kernel_rem_pio2+0x26e>
 8019fd0:	4632      	mov	r2, r6
 8019fd2:	463b      	mov	r3, r7
 8019fd4:	4958      	ldr	r1, [pc, #352]	; (801a138 <__kernel_rem_pio2+0x338>)
 8019fd6:	2000      	movs	r0, #0
 8019fd8:	f7e6 f976 	bl	80002c8 <__aeabi_dsub>
 8019fdc:	4606      	mov	r6, r0
 8019fde:	460f      	mov	r7, r1
 8019fe0:	2d00      	cmp	r5, #0
 8019fe2:	d044      	beq.n	801a06e <__kernel_rem_pio2+0x26e>
 8019fe4:	4650      	mov	r0, sl
 8019fe6:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a128 <__kernel_rem_pio2+0x328>
 8019fea:	f000 fee1 	bl	801adb0 <scalbn>
 8019fee:	4630      	mov	r0, r6
 8019ff0:	4639      	mov	r1, r7
 8019ff2:	ec53 2b10 	vmov	r2, r3, d0
 8019ff6:	f7e6 f967 	bl	80002c8 <__aeabi_dsub>
 8019ffa:	4606      	mov	r6, r0
 8019ffc:	460f      	mov	r7, r1
 8019ffe:	e036      	b.n	801a06e <__kernel_rem_pio2+0x26e>
 801a000:	4b4e      	ldr	r3, [pc, #312]	; (801a13c <__kernel_rem_pio2+0x33c>)
 801a002:	2200      	movs	r2, #0
 801a004:	4630      	mov	r0, r6
 801a006:	4639      	mov	r1, r7
 801a008:	f7e6 fb16 	bl	8000638 <__aeabi_dmul>
 801a00c:	f7e6 fdc4 	bl	8000b98 <__aeabi_d2iz>
 801a010:	f7e6 faa8 	bl	8000564 <__aeabi_i2d>
 801a014:	4b4a      	ldr	r3, [pc, #296]	; (801a140 <__kernel_rem_pio2+0x340>)
 801a016:	2200      	movs	r2, #0
 801a018:	4680      	mov	r8, r0
 801a01a:	4689      	mov	r9, r1
 801a01c:	f7e6 fb0c 	bl	8000638 <__aeabi_dmul>
 801a020:	4602      	mov	r2, r0
 801a022:	460b      	mov	r3, r1
 801a024:	4630      	mov	r0, r6
 801a026:	4639      	mov	r1, r7
 801a028:	f7e6 f94e 	bl	80002c8 <__aeabi_dsub>
 801a02c:	f7e6 fdb4 	bl	8000b98 <__aeabi_d2iz>
 801a030:	9b02      	ldr	r3, [sp, #8]
 801a032:	f843 0b04 	str.w	r0, [r3], #4
 801a036:	3d01      	subs	r5, #1
 801a038:	9302      	str	r3, [sp, #8]
 801a03a:	ab70      	add	r3, sp, #448	; 0x1c0
 801a03c:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a040:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a044:	4640      	mov	r0, r8
 801a046:	4649      	mov	r1, r9
 801a048:	f7e6 f940 	bl	80002cc <__adddf3>
 801a04c:	4606      	mov	r6, r0
 801a04e:	460f      	mov	r7, r1
 801a050:	e75b      	b.n	8019f0a <__kernel_rem_pio2+0x10a>
 801a052:	d105      	bne.n	801a060 <__kernel_rem_pio2+0x260>
 801a054:	1e63      	subs	r3, r4, #1
 801a056:	aa0c      	add	r2, sp, #48	; 0x30
 801a058:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a05c:	15c3      	asrs	r3, r0, #23
 801a05e:	e79b      	b.n	8019f98 <__kernel_rem_pio2+0x198>
 801a060:	4b38      	ldr	r3, [pc, #224]	; (801a144 <__kernel_rem_pio2+0x344>)
 801a062:	2200      	movs	r2, #0
 801a064:	f7e6 fd6e 	bl	8000b44 <__aeabi_dcmpge>
 801a068:	2800      	cmp	r0, #0
 801a06a:	d139      	bne.n	801a0e0 <__kernel_rem_pio2+0x2e0>
 801a06c:	9002      	str	r0, [sp, #8]
 801a06e:	2200      	movs	r2, #0
 801a070:	2300      	movs	r3, #0
 801a072:	4630      	mov	r0, r6
 801a074:	4639      	mov	r1, r7
 801a076:	f7e6 fd47 	bl	8000b08 <__aeabi_dcmpeq>
 801a07a:	2800      	cmp	r0, #0
 801a07c:	f000 80b4 	beq.w	801a1e8 <__kernel_rem_pio2+0x3e8>
 801a080:	f104 3bff 	add.w	fp, r4, #4294967295
 801a084:	465b      	mov	r3, fp
 801a086:	2200      	movs	r2, #0
 801a088:	9904      	ldr	r1, [sp, #16]
 801a08a:	428b      	cmp	r3, r1
 801a08c:	da65      	bge.n	801a15a <__kernel_rem_pio2+0x35a>
 801a08e:	2a00      	cmp	r2, #0
 801a090:	d07b      	beq.n	801a18a <__kernel_rem_pio2+0x38a>
 801a092:	ab0c      	add	r3, sp, #48	; 0x30
 801a094:	f1aa 0a18 	sub.w	sl, sl, #24
 801a098:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	f000 80a0 	beq.w	801a1e2 <__kernel_rem_pio2+0x3e2>
 801a0a2:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801a128 <__kernel_rem_pio2+0x328>
 801a0a6:	4650      	mov	r0, sl
 801a0a8:	f000 fe82 	bl	801adb0 <scalbn>
 801a0ac:	4f23      	ldr	r7, [pc, #140]	; (801a13c <__kernel_rem_pio2+0x33c>)
 801a0ae:	ec55 4b10 	vmov	r4, r5, d0
 801a0b2:	46d8      	mov	r8, fp
 801a0b4:	2600      	movs	r6, #0
 801a0b6:	f1b8 0f00 	cmp.w	r8, #0
 801a0ba:	f280 80cf 	bge.w	801a25c <__kernel_rem_pio2+0x45c>
 801a0be:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801a120 <__kernel_rem_pio2+0x320>
 801a0c2:	465f      	mov	r7, fp
 801a0c4:	f04f 0800 	mov.w	r8, #0
 801a0c8:	2f00      	cmp	r7, #0
 801a0ca:	f2c0 80fd 	blt.w	801a2c8 <__kernel_rem_pio2+0x4c8>
 801a0ce:	ab70      	add	r3, sp, #448	; 0x1c0
 801a0d0:	f8df a074 	ldr.w	sl, [pc, #116]	; 801a148 <__kernel_rem_pio2+0x348>
 801a0d4:	ec55 4b18 	vmov	r4, r5, d8
 801a0d8:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801a0dc:	2600      	movs	r6, #0
 801a0de:	e0e5      	b.n	801a2ac <__kernel_rem_pio2+0x4ac>
 801a0e0:	2302      	movs	r3, #2
 801a0e2:	9302      	str	r3, [sp, #8]
 801a0e4:	e75c      	b.n	8019fa0 <__kernel_rem_pio2+0x1a0>
 801a0e6:	f8db 3000 	ldr.w	r3, [fp]
 801a0ea:	b955      	cbnz	r5, 801a102 <__kernel_rem_pio2+0x302>
 801a0ec:	b123      	cbz	r3, 801a0f8 <__kernel_rem_pio2+0x2f8>
 801a0ee:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a0f2:	f8cb 3000 	str.w	r3, [fp]
 801a0f6:	2301      	movs	r3, #1
 801a0f8:	3201      	adds	r2, #1
 801a0fa:	f10b 0b04 	add.w	fp, fp, #4
 801a0fe:	461d      	mov	r5, r3
 801a100:	e755      	b.n	8019fae <__kernel_rem_pio2+0x1ae>
 801a102:	1acb      	subs	r3, r1, r3
 801a104:	f8cb 3000 	str.w	r3, [fp]
 801a108:	462b      	mov	r3, r5
 801a10a:	e7f5      	b.n	801a0f8 <__kernel_rem_pio2+0x2f8>
 801a10c:	1e62      	subs	r2, r4, #1
 801a10e:	ab0c      	add	r3, sp, #48	; 0x30
 801a110:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a114:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a118:	a90c      	add	r1, sp, #48	; 0x30
 801a11a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a11e:	e754      	b.n	8019fca <__kernel_rem_pio2+0x1ca>
	...
 801a12c:	3ff00000 	.word	0x3ff00000
 801a130:	0803eee0 	.word	0x0803eee0
 801a134:	40200000 	.word	0x40200000
 801a138:	3ff00000 	.word	0x3ff00000
 801a13c:	3e700000 	.word	0x3e700000
 801a140:	41700000 	.word	0x41700000
 801a144:	3fe00000 	.word	0x3fe00000
 801a148:	0803eea0 	.word	0x0803eea0
 801a14c:	1e62      	subs	r2, r4, #1
 801a14e:	ab0c      	add	r3, sp, #48	; 0x30
 801a150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a154:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a158:	e7de      	b.n	801a118 <__kernel_rem_pio2+0x318>
 801a15a:	a90c      	add	r1, sp, #48	; 0x30
 801a15c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a160:	3b01      	subs	r3, #1
 801a162:	430a      	orrs	r2, r1
 801a164:	e790      	b.n	801a088 <__kernel_rem_pio2+0x288>
 801a166:	3301      	adds	r3, #1
 801a168:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a16c:	2900      	cmp	r1, #0
 801a16e:	d0fa      	beq.n	801a166 <__kernel_rem_pio2+0x366>
 801a170:	9a08      	ldr	r2, [sp, #32]
 801a172:	18e3      	adds	r3, r4, r3
 801a174:	18a6      	adds	r6, r4, r2
 801a176:	aa20      	add	r2, sp, #128	; 0x80
 801a178:	1c65      	adds	r5, r4, #1
 801a17a:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801a17e:	9302      	str	r3, [sp, #8]
 801a180:	9b02      	ldr	r3, [sp, #8]
 801a182:	42ab      	cmp	r3, r5
 801a184:	da04      	bge.n	801a190 <__kernel_rem_pio2+0x390>
 801a186:	461c      	mov	r4, r3
 801a188:	e6b5      	b.n	8019ef6 <__kernel_rem_pio2+0xf6>
 801a18a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a18c:	2301      	movs	r3, #1
 801a18e:	e7eb      	b.n	801a168 <__kernel_rem_pio2+0x368>
 801a190:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a196:	f7e6 f9e5 	bl	8000564 <__aeabi_i2d>
 801a19a:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a19e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a1a0:	46b3      	mov	fp, r6
 801a1a2:	461c      	mov	r4, r3
 801a1a4:	2700      	movs	r7, #0
 801a1a6:	f04f 0800 	mov.w	r8, #0
 801a1aa:	f04f 0900 	mov.w	r9, #0
 801a1ae:	9b06      	ldr	r3, [sp, #24]
 801a1b0:	429f      	cmp	r7, r3
 801a1b2:	dd06      	ble.n	801a1c2 <__kernel_rem_pio2+0x3c2>
 801a1b4:	ab70      	add	r3, sp, #448	; 0x1c0
 801a1b6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a1ba:	e9c3 8900 	strd	r8, r9, [r3]
 801a1be:	3501      	adds	r5, #1
 801a1c0:	e7de      	b.n	801a180 <__kernel_rem_pio2+0x380>
 801a1c2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a1c6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a1ca:	f7e6 fa35 	bl	8000638 <__aeabi_dmul>
 801a1ce:	4602      	mov	r2, r0
 801a1d0:	460b      	mov	r3, r1
 801a1d2:	4640      	mov	r0, r8
 801a1d4:	4649      	mov	r1, r9
 801a1d6:	f7e6 f879 	bl	80002cc <__adddf3>
 801a1da:	3701      	adds	r7, #1
 801a1dc:	4680      	mov	r8, r0
 801a1de:	4689      	mov	r9, r1
 801a1e0:	e7e5      	b.n	801a1ae <__kernel_rem_pio2+0x3ae>
 801a1e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a1e6:	e754      	b.n	801a092 <__kernel_rem_pio2+0x292>
 801a1e8:	ec47 6b10 	vmov	d0, r6, r7
 801a1ec:	f1ca 0000 	rsb	r0, sl, #0
 801a1f0:	f000 fdde 	bl	801adb0 <scalbn>
 801a1f4:	ec57 6b10 	vmov	r6, r7, d0
 801a1f8:	4b9f      	ldr	r3, [pc, #636]	; (801a478 <__kernel_rem_pio2+0x678>)
 801a1fa:	ee10 0a10 	vmov	r0, s0
 801a1fe:	2200      	movs	r2, #0
 801a200:	4639      	mov	r1, r7
 801a202:	f7e6 fc9f 	bl	8000b44 <__aeabi_dcmpge>
 801a206:	b300      	cbz	r0, 801a24a <__kernel_rem_pio2+0x44a>
 801a208:	4b9c      	ldr	r3, [pc, #624]	; (801a47c <__kernel_rem_pio2+0x67c>)
 801a20a:	2200      	movs	r2, #0
 801a20c:	4630      	mov	r0, r6
 801a20e:	4639      	mov	r1, r7
 801a210:	f7e6 fa12 	bl	8000638 <__aeabi_dmul>
 801a214:	f7e6 fcc0 	bl	8000b98 <__aeabi_d2iz>
 801a218:	4605      	mov	r5, r0
 801a21a:	f7e6 f9a3 	bl	8000564 <__aeabi_i2d>
 801a21e:	4b96      	ldr	r3, [pc, #600]	; (801a478 <__kernel_rem_pio2+0x678>)
 801a220:	2200      	movs	r2, #0
 801a222:	f7e6 fa09 	bl	8000638 <__aeabi_dmul>
 801a226:	460b      	mov	r3, r1
 801a228:	4602      	mov	r2, r0
 801a22a:	4639      	mov	r1, r7
 801a22c:	4630      	mov	r0, r6
 801a22e:	f7e6 f84b 	bl	80002c8 <__aeabi_dsub>
 801a232:	f7e6 fcb1 	bl	8000b98 <__aeabi_d2iz>
 801a236:	f104 0b01 	add.w	fp, r4, #1
 801a23a:	ab0c      	add	r3, sp, #48	; 0x30
 801a23c:	f10a 0a18 	add.w	sl, sl, #24
 801a240:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a244:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801a248:	e72b      	b.n	801a0a2 <__kernel_rem_pio2+0x2a2>
 801a24a:	4630      	mov	r0, r6
 801a24c:	4639      	mov	r1, r7
 801a24e:	f7e6 fca3 	bl	8000b98 <__aeabi_d2iz>
 801a252:	ab0c      	add	r3, sp, #48	; 0x30
 801a254:	46a3      	mov	fp, r4
 801a256:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a25a:	e722      	b.n	801a0a2 <__kernel_rem_pio2+0x2a2>
 801a25c:	ab70      	add	r3, sp, #448	; 0x1c0
 801a25e:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801a262:	ab0c      	add	r3, sp, #48	; 0x30
 801a264:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a268:	f7e6 f97c 	bl	8000564 <__aeabi_i2d>
 801a26c:	4622      	mov	r2, r4
 801a26e:	462b      	mov	r3, r5
 801a270:	f7e6 f9e2 	bl	8000638 <__aeabi_dmul>
 801a274:	4632      	mov	r2, r6
 801a276:	e9c9 0100 	strd	r0, r1, [r9]
 801a27a:	463b      	mov	r3, r7
 801a27c:	4620      	mov	r0, r4
 801a27e:	4629      	mov	r1, r5
 801a280:	f7e6 f9da 	bl	8000638 <__aeabi_dmul>
 801a284:	f108 38ff 	add.w	r8, r8, #4294967295
 801a288:	4604      	mov	r4, r0
 801a28a:	460d      	mov	r5, r1
 801a28c:	e713      	b.n	801a0b6 <__kernel_rem_pio2+0x2b6>
 801a28e:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801a292:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801a296:	f7e6 f9cf 	bl	8000638 <__aeabi_dmul>
 801a29a:	4602      	mov	r2, r0
 801a29c:	460b      	mov	r3, r1
 801a29e:	4620      	mov	r0, r4
 801a2a0:	4629      	mov	r1, r5
 801a2a2:	f7e6 f813 	bl	80002cc <__adddf3>
 801a2a6:	3601      	adds	r6, #1
 801a2a8:	4604      	mov	r4, r0
 801a2aa:	460d      	mov	r5, r1
 801a2ac:	9b04      	ldr	r3, [sp, #16]
 801a2ae:	429e      	cmp	r6, r3
 801a2b0:	dc01      	bgt.n	801a2b6 <__kernel_rem_pio2+0x4b6>
 801a2b2:	45b0      	cmp	r8, r6
 801a2b4:	daeb      	bge.n	801a28e <__kernel_rem_pio2+0x48e>
 801a2b6:	ab48      	add	r3, sp, #288	; 0x120
 801a2b8:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a2bc:	e9c3 4500 	strd	r4, r5, [r3]
 801a2c0:	3f01      	subs	r7, #1
 801a2c2:	f108 0801 	add.w	r8, r8, #1
 801a2c6:	e6ff      	b.n	801a0c8 <__kernel_rem_pio2+0x2c8>
 801a2c8:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a2ca:	2b02      	cmp	r3, #2
 801a2cc:	dc0b      	bgt.n	801a2e6 <__kernel_rem_pio2+0x4e6>
 801a2ce:	2b00      	cmp	r3, #0
 801a2d0:	dc6e      	bgt.n	801a3b0 <__kernel_rem_pio2+0x5b0>
 801a2d2:	d045      	beq.n	801a360 <__kernel_rem_pio2+0x560>
 801a2d4:	9b07      	ldr	r3, [sp, #28]
 801a2d6:	f003 0007 	and.w	r0, r3, #7
 801a2da:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801a2de:	ecbd 8b02 	vpop	{d8}
 801a2e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2e6:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a2e8:	2b03      	cmp	r3, #3
 801a2ea:	d1f3      	bne.n	801a2d4 <__kernel_rem_pio2+0x4d4>
 801a2ec:	ab48      	add	r3, sp, #288	; 0x120
 801a2ee:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801a2f2:	46d0      	mov	r8, sl
 801a2f4:	46d9      	mov	r9, fp
 801a2f6:	f1b9 0f00 	cmp.w	r9, #0
 801a2fa:	f1a8 0808 	sub.w	r8, r8, #8
 801a2fe:	dc64      	bgt.n	801a3ca <__kernel_rem_pio2+0x5ca>
 801a300:	465c      	mov	r4, fp
 801a302:	2c01      	cmp	r4, #1
 801a304:	f1aa 0a08 	sub.w	sl, sl, #8
 801a308:	dc7e      	bgt.n	801a408 <__kernel_rem_pio2+0x608>
 801a30a:	2000      	movs	r0, #0
 801a30c:	2100      	movs	r1, #0
 801a30e:	f1bb 0f01 	cmp.w	fp, #1
 801a312:	f300 8097 	bgt.w	801a444 <__kernel_rem_pio2+0x644>
 801a316:	9b02      	ldr	r3, [sp, #8]
 801a318:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801a31c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a320:	2b00      	cmp	r3, #0
 801a322:	f040 8099 	bne.w	801a458 <__kernel_rem_pio2+0x658>
 801a326:	9b01      	ldr	r3, [sp, #4]
 801a328:	e9c3 5600 	strd	r5, r6, [r3]
 801a32c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801a330:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a334:	e7ce      	b.n	801a2d4 <__kernel_rem_pio2+0x4d4>
 801a336:	ab48      	add	r3, sp, #288	; 0x120
 801a338:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a340:	f7e5 ffc4 	bl	80002cc <__adddf3>
 801a344:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a348:	f1bb 0f00 	cmp.w	fp, #0
 801a34c:	daf3      	bge.n	801a336 <__kernel_rem_pio2+0x536>
 801a34e:	9b02      	ldr	r3, [sp, #8]
 801a350:	b113      	cbz	r3, 801a358 <__kernel_rem_pio2+0x558>
 801a352:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a356:	4619      	mov	r1, r3
 801a358:	9b01      	ldr	r3, [sp, #4]
 801a35a:	e9c3 0100 	strd	r0, r1, [r3]
 801a35e:	e7b9      	b.n	801a2d4 <__kernel_rem_pio2+0x4d4>
 801a360:	2000      	movs	r0, #0
 801a362:	2100      	movs	r1, #0
 801a364:	e7f0      	b.n	801a348 <__kernel_rem_pio2+0x548>
 801a366:	ab48      	add	r3, sp, #288	; 0x120
 801a368:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a370:	f7e5 ffac 	bl	80002cc <__adddf3>
 801a374:	3c01      	subs	r4, #1
 801a376:	2c00      	cmp	r4, #0
 801a378:	daf5      	bge.n	801a366 <__kernel_rem_pio2+0x566>
 801a37a:	9b02      	ldr	r3, [sp, #8]
 801a37c:	b1e3      	cbz	r3, 801a3b8 <__kernel_rem_pio2+0x5b8>
 801a37e:	4602      	mov	r2, r0
 801a380:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a384:	9c01      	ldr	r4, [sp, #4]
 801a386:	e9c4 2300 	strd	r2, r3, [r4]
 801a38a:	4602      	mov	r2, r0
 801a38c:	460b      	mov	r3, r1
 801a38e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801a392:	f7e5 ff99 	bl	80002c8 <__aeabi_dsub>
 801a396:	ad4a      	add	r5, sp, #296	; 0x128
 801a398:	2401      	movs	r4, #1
 801a39a:	45a3      	cmp	fp, r4
 801a39c:	da0f      	bge.n	801a3be <__kernel_rem_pio2+0x5be>
 801a39e:	9b02      	ldr	r3, [sp, #8]
 801a3a0:	b113      	cbz	r3, 801a3a8 <__kernel_rem_pio2+0x5a8>
 801a3a2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a3a6:	4619      	mov	r1, r3
 801a3a8:	9b01      	ldr	r3, [sp, #4]
 801a3aa:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a3ae:	e791      	b.n	801a2d4 <__kernel_rem_pio2+0x4d4>
 801a3b0:	465c      	mov	r4, fp
 801a3b2:	2000      	movs	r0, #0
 801a3b4:	2100      	movs	r1, #0
 801a3b6:	e7de      	b.n	801a376 <__kernel_rem_pio2+0x576>
 801a3b8:	4602      	mov	r2, r0
 801a3ba:	460b      	mov	r3, r1
 801a3bc:	e7e2      	b.n	801a384 <__kernel_rem_pio2+0x584>
 801a3be:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801a3c2:	f7e5 ff83 	bl	80002cc <__adddf3>
 801a3c6:	3401      	adds	r4, #1
 801a3c8:	e7e7      	b.n	801a39a <__kernel_rem_pio2+0x59a>
 801a3ca:	e9d8 4500 	ldrd	r4, r5, [r8]
 801a3ce:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801a3d2:	4620      	mov	r0, r4
 801a3d4:	4632      	mov	r2, r6
 801a3d6:	463b      	mov	r3, r7
 801a3d8:	4629      	mov	r1, r5
 801a3da:	f7e5 ff77 	bl	80002cc <__adddf3>
 801a3de:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a3e2:	4602      	mov	r2, r0
 801a3e4:	460b      	mov	r3, r1
 801a3e6:	4620      	mov	r0, r4
 801a3e8:	4629      	mov	r1, r5
 801a3ea:	f7e5 ff6d 	bl	80002c8 <__aeabi_dsub>
 801a3ee:	4632      	mov	r2, r6
 801a3f0:	463b      	mov	r3, r7
 801a3f2:	f7e5 ff6b 	bl	80002cc <__adddf3>
 801a3f6:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a3fa:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801a3fe:	ed88 7b00 	vstr	d7, [r8]
 801a402:	f109 39ff 	add.w	r9, r9, #4294967295
 801a406:	e776      	b.n	801a2f6 <__kernel_rem_pio2+0x4f6>
 801a408:	e9da 8900 	ldrd	r8, r9, [sl]
 801a40c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a410:	4640      	mov	r0, r8
 801a412:	4632      	mov	r2, r6
 801a414:	463b      	mov	r3, r7
 801a416:	4649      	mov	r1, r9
 801a418:	f7e5 ff58 	bl	80002cc <__adddf3>
 801a41c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a420:	4602      	mov	r2, r0
 801a422:	460b      	mov	r3, r1
 801a424:	4640      	mov	r0, r8
 801a426:	4649      	mov	r1, r9
 801a428:	f7e5 ff4e 	bl	80002c8 <__aeabi_dsub>
 801a42c:	4632      	mov	r2, r6
 801a42e:	463b      	mov	r3, r7
 801a430:	f7e5 ff4c 	bl	80002cc <__adddf3>
 801a434:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a438:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a43c:	ed8a 7b00 	vstr	d7, [sl]
 801a440:	3c01      	subs	r4, #1
 801a442:	e75e      	b.n	801a302 <__kernel_rem_pio2+0x502>
 801a444:	ab48      	add	r3, sp, #288	; 0x120
 801a446:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a44a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a44e:	f7e5 ff3d 	bl	80002cc <__adddf3>
 801a452:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a456:	e75a      	b.n	801a30e <__kernel_rem_pio2+0x50e>
 801a458:	9b01      	ldr	r3, [sp, #4]
 801a45a:	9a01      	ldr	r2, [sp, #4]
 801a45c:	601d      	str	r5, [r3, #0]
 801a45e:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801a462:	605c      	str	r4, [r3, #4]
 801a464:	609f      	str	r7, [r3, #8]
 801a466:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801a46a:	60d3      	str	r3, [r2, #12]
 801a46c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a470:	6110      	str	r0, [r2, #16]
 801a472:	6153      	str	r3, [r2, #20]
 801a474:	e72e      	b.n	801a2d4 <__kernel_rem_pio2+0x4d4>
 801a476:	bf00      	nop
 801a478:	41700000 	.word	0x41700000
 801a47c:	3e700000 	.word	0x3e700000

0801a480 <__kernel_sin>:
 801a480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a484:	ed2d 8b04 	vpush	{d8-d9}
 801a488:	eeb0 8a41 	vmov.f32	s16, s2
 801a48c:	eef0 8a61 	vmov.f32	s17, s3
 801a490:	ec55 4b10 	vmov	r4, r5, d0
 801a494:	b083      	sub	sp, #12
 801a496:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a49a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a49e:	9001      	str	r0, [sp, #4]
 801a4a0:	da06      	bge.n	801a4b0 <__kernel_sin+0x30>
 801a4a2:	ee10 0a10 	vmov	r0, s0
 801a4a6:	4629      	mov	r1, r5
 801a4a8:	f7e6 fb76 	bl	8000b98 <__aeabi_d2iz>
 801a4ac:	2800      	cmp	r0, #0
 801a4ae:	d051      	beq.n	801a554 <__kernel_sin+0xd4>
 801a4b0:	4622      	mov	r2, r4
 801a4b2:	462b      	mov	r3, r5
 801a4b4:	4620      	mov	r0, r4
 801a4b6:	4629      	mov	r1, r5
 801a4b8:	f7e6 f8be 	bl	8000638 <__aeabi_dmul>
 801a4bc:	4682      	mov	sl, r0
 801a4be:	468b      	mov	fp, r1
 801a4c0:	4602      	mov	r2, r0
 801a4c2:	460b      	mov	r3, r1
 801a4c4:	4620      	mov	r0, r4
 801a4c6:	4629      	mov	r1, r5
 801a4c8:	f7e6 f8b6 	bl	8000638 <__aeabi_dmul>
 801a4cc:	a341      	add	r3, pc, #260	; (adr r3, 801a5d4 <__kernel_sin+0x154>)
 801a4ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4d2:	4680      	mov	r8, r0
 801a4d4:	4689      	mov	r9, r1
 801a4d6:	4650      	mov	r0, sl
 801a4d8:	4659      	mov	r1, fp
 801a4da:	f7e6 f8ad 	bl	8000638 <__aeabi_dmul>
 801a4de:	a33f      	add	r3, pc, #252	; (adr r3, 801a5dc <__kernel_sin+0x15c>)
 801a4e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4e4:	f7e5 fef0 	bl	80002c8 <__aeabi_dsub>
 801a4e8:	4652      	mov	r2, sl
 801a4ea:	465b      	mov	r3, fp
 801a4ec:	f7e6 f8a4 	bl	8000638 <__aeabi_dmul>
 801a4f0:	a33c      	add	r3, pc, #240	; (adr r3, 801a5e4 <__kernel_sin+0x164>)
 801a4f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4f6:	f7e5 fee9 	bl	80002cc <__adddf3>
 801a4fa:	4652      	mov	r2, sl
 801a4fc:	465b      	mov	r3, fp
 801a4fe:	f7e6 f89b 	bl	8000638 <__aeabi_dmul>
 801a502:	a33a      	add	r3, pc, #232	; (adr r3, 801a5ec <__kernel_sin+0x16c>)
 801a504:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a508:	f7e5 fede 	bl	80002c8 <__aeabi_dsub>
 801a50c:	4652      	mov	r2, sl
 801a50e:	465b      	mov	r3, fp
 801a510:	f7e6 f892 	bl	8000638 <__aeabi_dmul>
 801a514:	a337      	add	r3, pc, #220	; (adr r3, 801a5f4 <__kernel_sin+0x174>)
 801a516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a51a:	f7e5 fed7 	bl	80002cc <__adddf3>
 801a51e:	9b01      	ldr	r3, [sp, #4]
 801a520:	4606      	mov	r6, r0
 801a522:	460f      	mov	r7, r1
 801a524:	b9eb      	cbnz	r3, 801a562 <__kernel_sin+0xe2>
 801a526:	4602      	mov	r2, r0
 801a528:	460b      	mov	r3, r1
 801a52a:	4650      	mov	r0, sl
 801a52c:	4659      	mov	r1, fp
 801a52e:	f7e6 f883 	bl	8000638 <__aeabi_dmul>
 801a532:	a325      	add	r3, pc, #148	; (adr r3, 801a5c8 <__kernel_sin+0x148>)
 801a534:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a538:	f7e5 fec6 	bl	80002c8 <__aeabi_dsub>
 801a53c:	4642      	mov	r2, r8
 801a53e:	464b      	mov	r3, r9
 801a540:	f7e6 f87a 	bl	8000638 <__aeabi_dmul>
 801a544:	4602      	mov	r2, r0
 801a546:	460b      	mov	r3, r1
 801a548:	4620      	mov	r0, r4
 801a54a:	4629      	mov	r1, r5
 801a54c:	f7e5 febe 	bl	80002cc <__adddf3>
 801a550:	4604      	mov	r4, r0
 801a552:	460d      	mov	r5, r1
 801a554:	ec45 4b10 	vmov	d0, r4, r5
 801a558:	b003      	add	sp, #12
 801a55a:	ecbd 8b04 	vpop	{d8-d9}
 801a55e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a562:	4b1b      	ldr	r3, [pc, #108]	; (801a5d0 <__kernel_sin+0x150>)
 801a564:	ec51 0b18 	vmov	r0, r1, d8
 801a568:	2200      	movs	r2, #0
 801a56a:	f7e6 f865 	bl	8000638 <__aeabi_dmul>
 801a56e:	4632      	mov	r2, r6
 801a570:	ec41 0b19 	vmov	d9, r0, r1
 801a574:	463b      	mov	r3, r7
 801a576:	4640      	mov	r0, r8
 801a578:	4649      	mov	r1, r9
 801a57a:	f7e6 f85d 	bl	8000638 <__aeabi_dmul>
 801a57e:	4602      	mov	r2, r0
 801a580:	460b      	mov	r3, r1
 801a582:	ec51 0b19 	vmov	r0, r1, d9
 801a586:	f7e5 fe9f 	bl	80002c8 <__aeabi_dsub>
 801a58a:	4652      	mov	r2, sl
 801a58c:	465b      	mov	r3, fp
 801a58e:	f7e6 f853 	bl	8000638 <__aeabi_dmul>
 801a592:	ec53 2b18 	vmov	r2, r3, d8
 801a596:	f7e5 fe97 	bl	80002c8 <__aeabi_dsub>
 801a59a:	a30b      	add	r3, pc, #44	; (adr r3, 801a5c8 <__kernel_sin+0x148>)
 801a59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a5a0:	4606      	mov	r6, r0
 801a5a2:	460f      	mov	r7, r1
 801a5a4:	4640      	mov	r0, r8
 801a5a6:	4649      	mov	r1, r9
 801a5a8:	f7e6 f846 	bl	8000638 <__aeabi_dmul>
 801a5ac:	4602      	mov	r2, r0
 801a5ae:	460b      	mov	r3, r1
 801a5b0:	4630      	mov	r0, r6
 801a5b2:	4639      	mov	r1, r7
 801a5b4:	f7e5 fe8a 	bl	80002cc <__adddf3>
 801a5b8:	4602      	mov	r2, r0
 801a5ba:	460b      	mov	r3, r1
 801a5bc:	4620      	mov	r0, r4
 801a5be:	4629      	mov	r1, r5
 801a5c0:	f7e5 fe82 	bl	80002c8 <__aeabi_dsub>
 801a5c4:	e7c4      	b.n	801a550 <__kernel_sin+0xd0>
 801a5c6:	bf00      	nop
 801a5c8:	55555549 	.word	0x55555549
 801a5cc:	3fc55555 	.word	0x3fc55555
 801a5d0:	3fe00000 	.word	0x3fe00000
 801a5d4:	5acfd57c 	.word	0x5acfd57c
 801a5d8:	3de5d93a 	.word	0x3de5d93a
 801a5dc:	8a2b9ceb 	.word	0x8a2b9ceb
 801a5e0:	3e5ae5e6 	.word	0x3e5ae5e6
 801a5e4:	57b1fe7d 	.word	0x57b1fe7d
 801a5e8:	3ec71de3 	.word	0x3ec71de3
 801a5ec:	19c161d5 	.word	0x19c161d5
 801a5f0:	3f2a01a0 	.word	0x3f2a01a0
 801a5f4:	1110f8a6 	.word	0x1110f8a6
 801a5f8:	3f811111 	.word	0x3f811111

0801a5fc <__kernel_cosf>:
 801a5fc:	ee10 3a10 	vmov	r3, s0
 801a600:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a604:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a608:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a60c:	da05      	bge.n	801a61a <__kernel_cosf+0x1e>
 801a60e:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a612:	ee17 2a90 	vmov	r2, s15
 801a616:	2a00      	cmp	r2, #0
 801a618:	d03d      	beq.n	801a696 <__kernel_cosf+0x9a>
 801a61a:	ee60 5a00 	vmul.f32	s11, s0, s0
 801a61e:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a69c <__kernel_cosf+0xa0>
 801a622:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801a6a0 <__kernel_cosf+0xa4>
 801a626:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801a6a4 <__kernel_cosf+0xa8>
 801a62a:	4a1f      	ldr	r2, [pc, #124]	; (801a6a8 <__kernel_cosf+0xac>)
 801a62c:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801a630:	4293      	cmp	r3, r2
 801a632:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a6ac <__kernel_cosf+0xb0>
 801a636:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a63a:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801a6b0 <__kernel_cosf+0xb4>
 801a63e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801a642:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801a6b4 <__kernel_cosf+0xb8>
 801a646:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a64a:	eeb0 7a66 	vmov.f32	s14, s13
 801a64e:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801a652:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a656:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801a65a:	ee67 6a25 	vmul.f32	s13, s14, s11
 801a65e:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801a662:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a666:	dc04      	bgt.n	801a672 <__kernel_cosf+0x76>
 801a668:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a66c:	ee36 0a47 	vsub.f32	s0, s12, s14
 801a670:	4770      	bx	lr
 801a672:	4a11      	ldr	r2, [pc, #68]	; (801a6b8 <__kernel_cosf+0xbc>)
 801a674:	4293      	cmp	r3, r2
 801a676:	bfda      	itte	le
 801a678:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a67c:	ee06 3a90 	vmovle	s13, r3
 801a680:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801a684:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a688:	ee36 0a66 	vsub.f32	s0, s12, s13
 801a68c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a690:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a694:	4770      	bx	lr
 801a696:	eeb0 0a46 	vmov.f32	s0, s12
 801a69a:	4770      	bx	lr
 801a69c:	ad47d74e 	.word	0xad47d74e
 801a6a0:	310f74f6 	.word	0x310f74f6
 801a6a4:	3d2aaaab 	.word	0x3d2aaaab
 801a6a8:	3e999999 	.word	0x3e999999
 801a6ac:	b493f27c 	.word	0xb493f27c
 801a6b0:	37d00d01 	.word	0x37d00d01
 801a6b4:	bab60b61 	.word	0xbab60b61
 801a6b8:	3f480000 	.word	0x3f480000

0801a6bc <__kernel_rem_pio2f>:
 801a6bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6c0:	ed2d 8b04 	vpush	{d8-d9}
 801a6c4:	b0d7      	sub	sp, #348	; 0x15c
 801a6c6:	4616      	mov	r6, r2
 801a6c8:	4698      	mov	r8, r3
 801a6ca:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a6cc:	4bbb      	ldr	r3, [pc, #748]	; (801a9bc <__kernel_rem_pio2f+0x300>)
 801a6ce:	9001      	str	r0, [sp, #4]
 801a6d0:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a6d4:	1d33      	adds	r3, r6, #4
 801a6d6:	460d      	mov	r5, r1
 801a6d8:	f108 39ff 	add.w	r9, r8, #4294967295
 801a6dc:	db29      	blt.n	801a732 <__kernel_rem_pio2f+0x76>
 801a6de:	1ef1      	subs	r1, r6, #3
 801a6e0:	bf48      	it	mi
 801a6e2:	1d31      	addmi	r1, r6, #4
 801a6e4:	10c9      	asrs	r1, r1, #3
 801a6e6:	1c4c      	adds	r4, r1, #1
 801a6e8:	00e3      	lsls	r3, r4, #3
 801a6ea:	9302      	str	r3, [sp, #8]
 801a6ec:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801a6ee:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801a9cc <__kernel_rem_pio2f+0x310>
 801a6f2:	eba1 0009 	sub.w	r0, r1, r9
 801a6f6:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801a6fa:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801a6fe:	eb07 0c09 	add.w	ip, r7, r9
 801a702:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801a706:	2300      	movs	r3, #0
 801a708:	4563      	cmp	r3, ip
 801a70a:	dd14      	ble.n	801a736 <__kernel_rem_pio2f+0x7a>
 801a70c:	ab1a      	add	r3, sp, #104	; 0x68
 801a70e:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801a712:	46cc      	mov	ip, r9
 801a714:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801a718:	f1c8 0b01 	rsb	fp, r8, #1
 801a71c:	eb0b 020c 	add.w	r2, fp, ip
 801a720:	4297      	cmp	r7, r2
 801a722:	db27      	blt.n	801a774 <__kernel_rem_pio2f+0xb8>
 801a724:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a728:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801a9cc <__kernel_rem_pio2f+0x310>
 801a72c:	4618      	mov	r0, r3
 801a72e:	2200      	movs	r2, #0
 801a730:	e016      	b.n	801a760 <__kernel_rem_pio2f+0xa4>
 801a732:	2100      	movs	r1, #0
 801a734:	e7d7      	b.n	801a6e6 <__kernel_rem_pio2f+0x2a>
 801a736:	42d8      	cmn	r0, r3
 801a738:	bf5d      	ittte	pl
 801a73a:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801a73e:	ee07 2a90 	vmovpl	s15, r2
 801a742:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a746:	eef0 7a47 	vmovmi.f32	s15, s14
 801a74a:	ecea 7a01 	vstmia	sl!, {s15}
 801a74e:	3301      	adds	r3, #1
 801a750:	e7da      	b.n	801a708 <__kernel_rem_pio2f+0x4c>
 801a752:	ecfe 6a01 	vldmia	lr!, {s13}
 801a756:	ed90 7a00 	vldr	s14, [r0]
 801a75a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a75e:	3201      	adds	r2, #1
 801a760:	454a      	cmp	r2, r9
 801a762:	f1a0 0004 	sub.w	r0, r0, #4
 801a766:	ddf4      	ble.n	801a752 <__kernel_rem_pio2f+0x96>
 801a768:	ecea 7a01 	vstmia	sl!, {s15}
 801a76c:	3304      	adds	r3, #4
 801a76e:	f10c 0c01 	add.w	ip, ip, #1
 801a772:	e7d3      	b.n	801a71c <__kernel_rem_pio2f+0x60>
 801a774:	ab06      	add	r3, sp, #24
 801a776:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801a77a:	9304      	str	r3, [sp, #16]
 801a77c:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801a77e:	eddf 8a92 	vldr	s17, [pc, #584]	; 801a9c8 <__kernel_rem_pio2f+0x30c>
 801a782:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801a9c4 <__kernel_rem_pio2f+0x308>
 801a786:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a78a:	9303      	str	r3, [sp, #12]
 801a78c:	46ba      	mov	sl, r7
 801a78e:	ab56      	add	r3, sp, #344	; 0x158
 801a790:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801a794:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801a798:	ab06      	add	r3, sp, #24
 801a79a:	4618      	mov	r0, r3
 801a79c:	4652      	mov	r2, sl
 801a79e:	2a00      	cmp	r2, #0
 801a7a0:	dc51      	bgt.n	801a846 <__kernel_rem_pio2f+0x18a>
 801a7a2:	4620      	mov	r0, r4
 801a7a4:	9305      	str	r3, [sp, #20]
 801a7a6:	f000 fb9d 	bl	801aee4 <scalbnf>
 801a7aa:	eeb0 8a40 	vmov.f32	s16, s0
 801a7ae:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801a7b2:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a7b6:	f7fd fe4d 	bl	8018454 <floorf>
 801a7ba:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801a7be:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a7c2:	2c00      	cmp	r4, #0
 801a7c4:	9b05      	ldr	r3, [sp, #20]
 801a7c6:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a7ca:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a7ce:	edcd 7a00 	vstr	s15, [sp]
 801a7d2:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a7d6:	dd4b      	ble.n	801a870 <__kernel_rem_pio2f+0x1b4>
 801a7d8:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a7dc:	aa06      	add	r2, sp, #24
 801a7de:	f1c4 0e08 	rsb	lr, r4, #8
 801a7e2:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a7e6:	ee17 1a90 	vmov	r1, s15
 801a7ea:	fa42 f00e 	asr.w	r0, r2, lr
 801a7ee:	4401      	add	r1, r0
 801a7f0:	9100      	str	r1, [sp, #0]
 801a7f2:	fa00 f00e 	lsl.w	r0, r0, lr
 801a7f6:	a906      	add	r1, sp, #24
 801a7f8:	1a12      	subs	r2, r2, r0
 801a7fa:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a7fe:	f1c4 0007 	rsb	r0, r4, #7
 801a802:	fa42 fb00 	asr.w	fp, r2, r0
 801a806:	f1bb 0f00 	cmp.w	fp, #0
 801a80a:	dd43      	ble.n	801a894 <__kernel_rem_pio2f+0x1d8>
 801a80c:	9a00      	ldr	r2, [sp, #0]
 801a80e:	f04f 0e00 	mov.w	lr, #0
 801a812:	3201      	adds	r2, #1
 801a814:	9200      	str	r2, [sp, #0]
 801a816:	4670      	mov	r0, lr
 801a818:	45f2      	cmp	sl, lr
 801a81a:	dc6c      	bgt.n	801a8f6 <__kernel_rem_pio2f+0x23a>
 801a81c:	2c00      	cmp	r4, #0
 801a81e:	dd04      	ble.n	801a82a <__kernel_rem_pio2f+0x16e>
 801a820:	2c01      	cmp	r4, #1
 801a822:	d079      	beq.n	801a918 <__kernel_rem_pio2f+0x25c>
 801a824:	2c02      	cmp	r4, #2
 801a826:	f000 8082 	beq.w	801a92e <__kernel_rem_pio2f+0x272>
 801a82a:	f1bb 0f02 	cmp.w	fp, #2
 801a82e:	d131      	bne.n	801a894 <__kernel_rem_pio2f+0x1d8>
 801a830:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a834:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a838:	b360      	cbz	r0, 801a894 <__kernel_rem_pio2f+0x1d8>
 801a83a:	4620      	mov	r0, r4
 801a83c:	f000 fb52 	bl	801aee4 <scalbnf>
 801a840:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a844:	e026      	b.n	801a894 <__kernel_rem_pio2f+0x1d8>
 801a846:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a84a:	3a01      	subs	r2, #1
 801a84c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a850:	a942      	add	r1, sp, #264	; 0x108
 801a852:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a856:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801a85a:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a85e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a862:	eca0 0a01 	vstmia	r0!, {s0}
 801a866:	ed9c 0a00 	vldr	s0, [ip]
 801a86a:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a86e:	e796      	b.n	801a79e <__kernel_rem_pio2f+0xe2>
 801a870:	d107      	bne.n	801a882 <__kernel_rem_pio2f+0x1c6>
 801a872:	f10a 32ff 	add.w	r2, sl, #4294967295
 801a876:	a906      	add	r1, sp, #24
 801a878:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a87c:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801a880:	e7c1      	b.n	801a806 <__kernel_rem_pio2f+0x14a>
 801a882:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a886:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a88a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a88e:	da2f      	bge.n	801a8f0 <__kernel_rem_pio2f+0x234>
 801a890:	f04f 0b00 	mov.w	fp, #0
 801a894:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a898:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a89c:	f040 8098 	bne.w	801a9d0 <__kernel_rem_pio2f+0x314>
 801a8a0:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a8a4:	469c      	mov	ip, r3
 801a8a6:	2200      	movs	r2, #0
 801a8a8:	45bc      	cmp	ip, r7
 801a8aa:	da48      	bge.n	801a93e <__kernel_rem_pio2f+0x282>
 801a8ac:	2a00      	cmp	r2, #0
 801a8ae:	d05f      	beq.n	801a970 <__kernel_rem_pio2f+0x2b4>
 801a8b0:	aa06      	add	r2, sp, #24
 801a8b2:	3c08      	subs	r4, #8
 801a8b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801a8b8:	2900      	cmp	r1, #0
 801a8ba:	d07d      	beq.n	801a9b8 <__kernel_rem_pio2f+0x2fc>
 801a8bc:	4620      	mov	r0, r4
 801a8be:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a8c2:	9301      	str	r3, [sp, #4]
 801a8c4:	f000 fb0e 	bl	801aee4 <scalbnf>
 801a8c8:	9b01      	ldr	r3, [sp, #4]
 801a8ca:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801a9c8 <__kernel_rem_pio2f+0x30c>
 801a8ce:	4619      	mov	r1, r3
 801a8d0:	2900      	cmp	r1, #0
 801a8d2:	f280 80af 	bge.w	801aa34 <__kernel_rem_pio2f+0x378>
 801a8d6:	4618      	mov	r0, r3
 801a8d8:	2400      	movs	r4, #0
 801a8da:	2800      	cmp	r0, #0
 801a8dc:	f2c0 80d0 	blt.w	801aa80 <__kernel_rem_pio2f+0x3c4>
 801a8e0:	a942      	add	r1, sp, #264	; 0x108
 801a8e2:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801a8e6:	4a36      	ldr	r2, [pc, #216]	; (801a9c0 <__kernel_rem_pio2f+0x304>)
 801a8e8:	eddf 7a38 	vldr	s15, [pc, #224]	; 801a9cc <__kernel_rem_pio2f+0x310>
 801a8ec:	2100      	movs	r1, #0
 801a8ee:	e0bb      	b.n	801aa68 <__kernel_rem_pio2f+0x3ac>
 801a8f0:	f04f 0b02 	mov.w	fp, #2
 801a8f4:	e78a      	b.n	801a80c <__kernel_rem_pio2f+0x150>
 801a8f6:	681a      	ldr	r2, [r3, #0]
 801a8f8:	b948      	cbnz	r0, 801a90e <__kernel_rem_pio2f+0x252>
 801a8fa:	b11a      	cbz	r2, 801a904 <__kernel_rem_pio2f+0x248>
 801a8fc:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a900:	601a      	str	r2, [r3, #0]
 801a902:	2201      	movs	r2, #1
 801a904:	f10e 0e01 	add.w	lr, lr, #1
 801a908:	3304      	adds	r3, #4
 801a90a:	4610      	mov	r0, r2
 801a90c:	e784      	b.n	801a818 <__kernel_rem_pio2f+0x15c>
 801a90e:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801a912:	601a      	str	r2, [r3, #0]
 801a914:	4602      	mov	r2, r0
 801a916:	e7f5      	b.n	801a904 <__kernel_rem_pio2f+0x248>
 801a918:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a91c:	ab06      	add	r3, sp, #24
 801a91e:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a926:	aa06      	add	r2, sp, #24
 801a928:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801a92c:	e77d      	b.n	801a82a <__kernel_rem_pio2f+0x16e>
 801a92e:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a932:	ab06      	add	r3, sp, #24
 801a934:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a938:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a93c:	e7f3      	b.n	801a926 <__kernel_rem_pio2f+0x26a>
 801a93e:	a906      	add	r1, sp, #24
 801a940:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801a944:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a948:	4302      	orrs	r2, r0
 801a94a:	e7ad      	b.n	801a8a8 <__kernel_rem_pio2f+0x1ec>
 801a94c:	3001      	adds	r0, #1
 801a94e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a952:	2a00      	cmp	r2, #0
 801a954:	d0fa      	beq.n	801a94c <__kernel_rem_pio2f+0x290>
 801a956:	a91a      	add	r1, sp, #104	; 0x68
 801a958:	eb0a 0208 	add.w	r2, sl, r8
 801a95c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a960:	f10a 0301 	add.w	r3, sl, #1
 801a964:	eb0a 0100 	add.w	r1, sl, r0
 801a968:	4299      	cmp	r1, r3
 801a96a:	da04      	bge.n	801a976 <__kernel_rem_pio2f+0x2ba>
 801a96c:	468a      	mov	sl, r1
 801a96e:	e70e      	b.n	801a78e <__kernel_rem_pio2f+0xd2>
 801a970:	9b04      	ldr	r3, [sp, #16]
 801a972:	2001      	movs	r0, #1
 801a974:	e7eb      	b.n	801a94e <__kernel_rem_pio2f+0x292>
 801a976:	9803      	ldr	r0, [sp, #12]
 801a978:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a97c:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a980:	9000      	str	r0, [sp, #0]
 801a982:	ee07 0a90 	vmov	s15, r0
 801a986:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a98a:	2000      	movs	r0, #0
 801a98c:	ece2 7a01 	vstmia	r2!, {s15}
 801a990:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801a9cc <__kernel_rem_pio2f+0x310>
 801a994:	4696      	mov	lr, r2
 801a996:	4548      	cmp	r0, r9
 801a998:	dd06      	ble.n	801a9a8 <__kernel_rem_pio2f+0x2ec>
 801a99a:	a842      	add	r0, sp, #264	; 0x108
 801a99c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801a9a0:	edc0 7a00 	vstr	s15, [r0]
 801a9a4:	3301      	adds	r3, #1
 801a9a6:	e7df      	b.n	801a968 <__kernel_rem_pio2f+0x2ac>
 801a9a8:	ecfc 6a01 	vldmia	ip!, {s13}
 801a9ac:	ed3e 7a01 	vldmdb	lr!, {s14}
 801a9b0:	3001      	adds	r0, #1
 801a9b2:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a9b6:	e7ee      	b.n	801a996 <__kernel_rem_pio2f+0x2da>
 801a9b8:	3b01      	subs	r3, #1
 801a9ba:	e779      	b.n	801a8b0 <__kernel_rem_pio2f+0x1f4>
 801a9bc:	0803ef1c 	.word	0x0803ef1c
 801a9c0:	0803eef0 	.word	0x0803eef0
 801a9c4:	43800000 	.word	0x43800000
 801a9c8:	3b800000 	.word	0x3b800000
 801a9cc:	00000000 	.word	0x00000000
 801a9d0:	9b02      	ldr	r3, [sp, #8]
 801a9d2:	eeb0 0a48 	vmov.f32	s0, s16
 801a9d6:	1b98      	subs	r0, r3, r6
 801a9d8:	f000 fa84 	bl	801aee4 <scalbnf>
 801a9dc:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801a9c4 <__kernel_rem_pio2f+0x308>
 801a9e0:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a9e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9e8:	db1b      	blt.n	801aa22 <__kernel_rem_pio2f+0x366>
 801a9ea:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801a9c8 <__kernel_rem_pio2f+0x30c>
 801a9ee:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a9f2:	aa06      	add	r2, sp, #24
 801a9f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a9f8:	a906      	add	r1, sp, #24
 801a9fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9fe:	3408      	adds	r4, #8
 801aa00:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801aa04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801aa08:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aa0c:	ee10 3a10 	vmov	r3, s0
 801aa10:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801aa14:	ee17 2a90 	vmov	r2, s15
 801aa18:	f10a 0301 	add.w	r3, sl, #1
 801aa1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801aa20:	e74c      	b.n	801a8bc <__kernel_rem_pio2f+0x200>
 801aa22:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aa26:	aa06      	add	r2, sp, #24
 801aa28:	ee10 3a10 	vmov	r3, s0
 801aa2c:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801aa30:	4653      	mov	r3, sl
 801aa32:	e743      	b.n	801a8bc <__kernel_rem_pio2f+0x200>
 801aa34:	aa42      	add	r2, sp, #264	; 0x108
 801aa36:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801aa3a:	aa06      	add	r2, sp, #24
 801aa3c:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801aa40:	9201      	str	r2, [sp, #4]
 801aa42:	ee07 2a90 	vmov	s15, r2
 801aa46:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa4a:	3901      	subs	r1, #1
 801aa4c:	ee67 7a80 	vmul.f32	s15, s15, s0
 801aa50:	ee20 0a07 	vmul.f32	s0, s0, s14
 801aa54:	edc0 7a00 	vstr	s15, [r0]
 801aa58:	e73a      	b.n	801a8d0 <__kernel_rem_pio2f+0x214>
 801aa5a:	ecf2 6a01 	vldmia	r2!, {s13}
 801aa5e:	ecb6 7a01 	vldmia	r6!, {s14}
 801aa62:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aa66:	3101      	adds	r1, #1
 801aa68:	42b9      	cmp	r1, r7
 801aa6a:	dc01      	bgt.n	801aa70 <__kernel_rem_pio2f+0x3b4>
 801aa6c:	428c      	cmp	r4, r1
 801aa6e:	daf4      	bge.n	801aa5a <__kernel_rem_pio2f+0x39e>
 801aa70:	aa56      	add	r2, sp, #344	; 0x158
 801aa72:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801aa76:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801aa7a:	3801      	subs	r0, #1
 801aa7c:	3401      	adds	r4, #1
 801aa7e:	e72c      	b.n	801a8da <__kernel_rem_pio2f+0x21e>
 801aa80:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801aa82:	2a02      	cmp	r2, #2
 801aa84:	dc0a      	bgt.n	801aa9c <__kernel_rem_pio2f+0x3e0>
 801aa86:	2a00      	cmp	r2, #0
 801aa88:	dc61      	bgt.n	801ab4e <__kernel_rem_pio2f+0x492>
 801aa8a:	d03c      	beq.n	801ab06 <__kernel_rem_pio2f+0x44a>
 801aa8c:	9b00      	ldr	r3, [sp, #0]
 801aa8e:	f003 0007 	and.w	r0, r3, #7
 801aa92:	b057      	add	sp, #348	; 0x15c
 801aa94:	ecbd 8b04 	vpop	{d8-d9}
 801aa98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa9c:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801aa9e:	2a03      	cmp	r2, #3
 801aaa0:	d1f4      	bne.n	801aa8c <__kernel_rem_pio2f+0x3d0>
 801aaa2:	aa2e      	add	r2, sp, #184	; 0xb8
 801aaa4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801aaa8:	4608      	mov	r0, r1
 801aaaa:	461c      	mov	r4, r3
 801aaac:	2c00      	cmp	r4, #0
 801aaae:	f1a0 0004 	sub.w	r0, r0, #4
 801aab2:	dc59      	bgt.n	801ab68 <__kernel_rem_pio2f+0x4ac>
 801aab4:	4618      	mov	r0, r3
 801aab6:	2801      	cmp	r0, #1
 801aab8:	f1a1 0104 	sub.w	r1, r1, #4
 801aabc:	dc64      	bgt.n	801ab88 <__kernel_rem_pio2f+0x4cc>
 801aabe:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801a9cc <__kernel_rem_pio2f+0x310>
 801aac2:	2b01      	cmp	r3, #1
 801aac4:	dc70      	bgt.n	801aba8 <__kernel_rem_pio2f+0x4ec>
 801aac6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801aaca:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801aace:	f1bb 0f00 	cmp.w	fp, #0
 801aad2:	d172      	bne.n	801abba <__kernel_rem_pio2f+0x4fe>
 801aad4:	edc5 6a00 	vstr	s13, [r5]
 801aad8:	ed85 7a01 	vstr	s14, [r5, #4]
 801aadc:	edc5 7a02 	vstr	s15, [r5, #8]
 801aae0:	e7d4      	b.n	801aa8c <__kernel_rem_pio2f+0x3d0>
 801aae2:	aa2e      	add	r2, sp, #184	; 0xb8
 801aae4:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801aae8:	ed91 7a00 	vldr	s14, [r1]
 801aaec:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aaf0:	3b01      	subs	r3, #1
 801aaf2:	2b00      	cmp	r3, #0
 801aaf4:	daf5      	bge.n	801aae2 <__kernel_rem_pio2f+0x426>
 801aaf6:	f1bb 0f00 	cmp.w	fp, #0
 801aafa:	d001      	beq.n	801ab00 <__kernel_rem_pio2f+0x444>
 801aafc:	eef1 7a67 	vneg.f32	s15, s15
 801ab00:	edc5 7a00 	vstr	s15, [r5]
 801ab04:	e7c2      	b.n	801aa8c <__kernel_rem_pio2f+0x3d0>
 801ab06:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801a9cc <__kernel_rem_pio2f+0x310>
 801ab0a:	e7f2      	b.n	801aaf2 <__kernel_rem_pio2f+0x436>
 801ab0c:	aa2e      	add	r2, sp, #184	; 0xb8
 801ab0e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801ab12:	edd0 7a00 	vldr	s15, [r0]
 801ab16:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab1a:	3901      	subs	r1, #1
 801ab1c:	2900      	cmp	r1, #0
 801ab1e:	daf5      	bge.n	801ab0c <__kernel_rem_pio2f+0x450>
 801ab20:	f1bb 0f00 	cmp.w	fp, #0
 801ab24:	d017      	beq.n	801ab56 <__kernel_rem_pio2f+0x49a>
 801ab26:	eef1 7a47 	vneg.f32	s15, s14
 801ab2a:	edc5 7a00 	vstr	s15, [r5]
 801ab2e:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801ab32:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab36:	a82f      	add	r0, sp, #188	; 0xbc
 801ab38:	2101      	movs	r1, #1
 801ab3a:	428b      	cmp	r3, r1
 801ab3c:	da0e      	bge.n	801ab5c <__kernel_rem_pio2f+0x4a0>
 801ab3e:	f1bb 0f00 	cmp.w	fp, #0
 801ab42:	d001      	beq.n	801ab48 <__kernel_rem_pio2f+0x48c>
 801ab44:	eef1 7a67 	vneg.f32	s15, s15
 801ab48:	edc5 7a01 	vstr	s15, [r5, #4]
 801ab4c:	e79e      	b.n	801aa8c <__kernel_rem_pio2f+0x3d0>
 801ab4e:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801a9cc <__kernel_rem_pio2f+0x310>
 801ab52:	4619      	mov	r1, r3
 801ab54:	e7e2      	b.n	801ab1c <__kernel_rem_pio2f+0x460>
 801ab56:	eef0 7a47 	vmov.f32	s15, s14
 801ab5a:	e7e6      	b.n	801ab2a <__kernel_rem_pio2f+0x46e>
 801ab5c:	ecb0 7a01 	vldmia	r0!, {s14}
 801ab60:	3101      	adds	r1, #1
 801ab62:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ab66:	e7e8      	b.n	801ab3a <__kernel_rem_pio2f+0x47e>
 801ab68:	edd0 7a00 	vldr	s15, [r0]
 801ab6c:	edd0 6a01 	vldr	s13, [r0, #4]
 801ab70:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ab74:	3c01      	subs	r4, #1
 801ab76:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab7a:	ed80 7a00 	vstr	s14, [r0]
 801ab7e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab82:	edc0 7a01 	vstr	s15, [r0, #4]
 801ab86:	e791      	b.n	801aaac <__kernel_rem_pio2f+0x3f0>
 801ab88:	edd1 7a00 	vldr	s15, [r1]
 801ab8c:	edd1 6a01 	vldr	s13, [r1, #4]
 801ab90:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ab94:	3801      	subs	r0, #1
 801ab96:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab9a:	ed81 7a00 	vstr	s14, [r1]
 801ab9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aba2:	edc1 7a01 	vstr	s15, [r1, #4]
 801aba6:	e786      	b.n	801aab6 <__kernel_rem_pio2f+0x3fa>
 801aba8:	aa2e      	add	r2, sp, #184	; 0xb8
 801abaa:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801abae:	ed91 7a00 	vldr	s14, [r1]
 801abb2:	3b01      	subs	r3, #1
 801abb4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801abb8:	e783      	b.n	801aac2 <__kernel_rem_pio2f+0x406>
 801abba:	eef1 6a66 	vneg.f32	s13, s13
 801abbe:	eeb1 7a47 	vneg.f32	s14, s14
 801abc2:	edc5 6a00 	vstr	s13, [r5]
 801abc6:	ed85 7a01 	vstr	s14, [r5, #4]
 801abca:	eef1 7a67 	vneg.f32	s15, s15
 801abce:	e785      	b.n	801aadc <__kernel_rem_pio2f+0x420>

0801abd0 <__kernel_sinf>:
 801abd0:	ee10 3a10 	vmov	r3, s0
 801abd4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801abd8:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801abdc:	da04      	bge.n	801abe8 <__kernel_sinf+0x18>
 801abde:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801abe2:	ee17 3a90 	vmov	r3, s15
 801abe6:	b35b      	cbz	r3, 801ac40 <__kernel_sinf+0x70>
 801abe8:	ee20 7a00 	vmul.f32	s14, s0, s0
 801abec:	eddf 7a15 	vldr	s15, [pc, #84]	; 801ac44 <__kernel_sinf+0x74>
 801abf0:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801ac48 <__kernel_sinf+0x78>
 801abf4:	eea7 6a27 	vfma.f32	s12, s14, s15
 801abf8:	eddf 7a14 	vldr	s15, [pc, #80]	; 801ac4c <__kernel_sinf+0x7c>
 801abfc:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ac00:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801ac50 <__kernel_sinf+0x80>
 801ac04:	eea7 6a87 	vfma.f32	s12, s15, s14
 801ac08:	eddf 7a12 	vldr	s15, [pc, #72]	; 801ac54 <__kernel_sinf+0x84>
 801ac0c:	ee60 6a07 	vmul.f32	s13, s0, s14
 801ac10:	eee6 7a07 	vfma.f32	s15, s12, s14
 801ac14:	b930      	cbnz	r0, 801ac24 <__kernel_sinf+0x54>
 801ac16:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801ac58 <__kernel_sinf+0x88>
 801ac1a:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ac1e:	eea6 0a26 	vfma.f32	s0, s12, s13
 801ac22:	4770      	bx	lr
 801ac24:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801ac28:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801ac2c:	eee0 7a86 	vfma.f32	s15, s1, s12
 801ac30:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801ac34:	eddf 7a09 	vldr	s15, [pc, #36]	; 801ac5c <__kernel_sinf+0x8c>
 801ac38:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801ac3c:	ee30 0a60 	vsub.f32	s0, s0, s1
 801ac40:	4770      	bx	lr
 801ac42:	bf00      	nop
 801ac44:	2f2ec9d3 	.word	0x2f2ec9d3
 801ac48:	b2d72f34 	.word	0xb2d72f34
 801ac4c:	3638ef1b 	.word	0x3638ef1b
 801ac50:	b9500d01 	.word	0xb9500d01
 801ac54:	3c088889 	.word	0x3c088889
 801ac58:	be2aaaab 	.word	0xbe2aaaab
 801ac5c:	3e2aaaab 	.word	0x3e2aaaab

0801ac60 <fabs>:
 801ac60:	ec51 0b10 	vmov	r0, r1, d0
 801ac64:	ee10 2a10 	vmov	r2, s0
 801ac68:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ac6c:	ec43 2b10 	vmov	d0, r2, r3
 801ac70:	4770      	bx	lr

0801ac72 <finite>:
 801ac72:	b082      	sub	sp, #8
 801ac74:	ed8d 0b00 	vstr	d0, [sp]
 801ac78:	9801      	ldr	r0, [sp, #4]
 801ac7a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ac7e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ac82:	0fc0      	lsrs	r0, r0, #31
 801ac84:	b002      	add	sp, #8
 801ac86:	4770      	bx	lr

0801ac88 <nan>:
 801ac88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ac90 <nan+0x8>
 801ac8c:	4770      	bx	lr
 801ac8e:	bf00      	nop
 801ac90:	00000000 	.word	0x00000000
 801ac94:	7ff80000 	.word	0x7ff80000

0801ac98 <rint>:
 801ac98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac9a:	ec51 0b10 	vmov	r0, r1, d0
 801ac9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801aca2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801aca6:	2e13      	cmp	r6, #19
 801aca8:	ee10 4a10 	vmov	r4, s0
 801acac:	460b      	mov	r3, r1
 801acae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801acb2:	dc58      	bgt.n	801ad66 <rint+0xce>
 801acb4:	2e00      	cmp	r6, #0
 801acb6:	da2b      	bge.n	801ad10 <rint+0x78>
 801acb8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801acbc:	4302      	orrs	r2, r0
 801acbe:	d023      	beq.n	801ad08 <rint+0x70>
 801acc0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801acc4:	4302      	orrs	r2, r0
 801acc6:	4254      	negs	r4, r2
 801acc8:	4314      	orrs	r4, r2
 801acca:	0c4b      	lsrs	r3, r1, #17
 801accc:	0b24      	lsrs	r4, r4, #12
 801acce:	045b      	lsls	r3, r3, #17
 801acd0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801acd4:	ea44 0103 	orr.w	r1, r4, r3
 801acd8:	4b32      	ldr	r3, [pc, #200]	; (801ada4 <rint+0x10c>)
 801acda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801acde:	e9d3 6700 	ldrd	r6, r7, [r3]
 801ace2:	4602      	mov	r2, r0
 801ace4:	460b      	mov	r3, r1
 801ace6:	4630      	mov	r0, r6
 801ace8:	4639      	mov	r1, r7
 801acea:	f7e5 faef 	bl	80002cc <__adddf3>
 801acee:	e9cd 0100 	strd	r0, r1, [sp]
 801acf2:	463b      	mov	r3, r7
 801acf4:	e9dd 0100 	ldrd	r0, r1, [sp]
 801acf8:	4632      	mov	r2, r6
 801acfa:	f7e5 fae5 	bl	80002c8 <__aeabi_dsub>
 801acfe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ad02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801ad06:	4639      	mov	r1, r7
 801ad08:	ec41 0b10 	vmov	d0, r0, r1
 801ad0c:	b003      	add	sp, #12
 801ad0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ad10:	4a25      	ldr	r2, [pc, #148]	; (801ada8 <rint+0x110>)
 801ad12:	4132      	asrs	r2, r6
 801ad14:	ea01 0702 	and.w	r7, r1, r2
 801ad18:	4307      	orrs	r7, r0
 801ad1a:	d0f5      	beq.n	801ad08 <rint+0x70>
 801ad1c:	0851      	lsrs	r1, r2, #1
 801ad1e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801ad22:	4314      	orrs	r4, r2
 801ad24:	d00c      	beq.n	801ad40 <rint+0xa8>
 801ad26:	ea23 0201 	bic.w	r2, r3, r1
 801ad2a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ad2e:	2e13      	cmp	r6, #19
 801ad30:	fa43 f606 	asr.w	r6, r3, r6
 801ad34:	bf0c      	ite	eq
 801ad36:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801ad3a:	2400      	movne	r4, #0
 801ad3c:	ea42 0306 	orr.w	r3, r2, r6
 801ad40:	4918      	ldr	r1, [pc, #96]	; (801ada4 <rint+0x10c>)
 801ad42:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801ad46:	4622      	mov	r2, r4
 801ad48:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ad4c:	4620      	mov	r0, r4
 801ad4e:	4629      	mov	r1, r5
 801ad50:	f7e5 fabc 	bl	80002cc <__adddf3>
 801ad54:	e9cd 0100 	strd	r0, r1, [sp]
 801ad58:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad5c:	4622      	mov	r2, r4
 801ad5e:	462b      	mov	r3, r5
 801ad60:	f7e5 fab2 	bl	80002c8 <__aeabi_dsub>
 801ad64:	e7d0      	b.n	801ad08 <rint+0x70>
 801ad66:	2e33      	cmp	r6, #51	; 0x33
 801ad68:	dd07      	ble.n	801ad7a <rint+0xe2>
 801ad6a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ad6e:	d1cb      	bne.n	801ad08 <rint+0x70>
 801ad70:	ee10 2a10 	vmov	r2, s0
 801ad74:	f7e5 faaa 	bl	80002cc <__adddf3>
 801ad78:	e7c6      	b.n	801ad08 <rint+0x70>
 801ad7a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801ad7e:	f04f 36ff 	mov.w	r6, #4294967295
 801ad82:	40d6      	lsrs	r6, r2
 801ad84:	4230      	tst	r0, r6
 801ad86:	d0bf      	beq.n	801ad08 <rint+0x70>
 801ad88:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801ad8c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801ad90:	bf1f      	itttt	ne
 801ad92:	ea24 0101 	bicne.w	r1, r4, r1
 801ad96:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801ad9a:	fa44 f202 	asrne.w	r2, r4, r2
 801ad9e:	ea41 0402 	orrne.w	r4, r1, r2
 801ada2:	e7cd      	b.n	801ad40 <rint+0xa8>
 801ada4:	0803ef28 	.word	0x0803ef28
 801ada8:	000fffff 	.word	0x000fffff
 801adac:	00000000 	.word	0x00000000

0801adb0 <scalbn>:
 801adb0:	b570      	push	{r4, r5, r6, lr}
 801adb2:	ec55 4b10 	vmov	r4, r5, d0
 801adb6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801adba:	4606      	mov	r6, r0
 801adbc:	462b      	mov	r3, r5
 801adbe:	b99a      	cbnz	r2, 801ade8 <scalbn+0x38>
 801adc0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801adc4:	4323      	orrs	r3, r4
 801adc6:	d036      	beq.n	801ae36 <scalbn+0x86>
 801adc8:	4b39      	ldr	r3, [pc, #228]	; (801aeb0 <scalbn+0x100>)
 801adca:	4629      	mov	r1, r5
 801adcc:	ee10 0a10 	vmov	r0, s0
 801add0:	2200      	movs	r2, #0
 801add2:	f7e5 fc31 	bl	8000638 <__aeabi_dmul>
 801add6:	4b37      	ldr	r3, [pc, #220]	; (801aeb4 <scalbn+0x104>)
 801add8:	429e      	cmp	r6, r3
 801adda:	4604      	mov	r4, r0
 801addc:	460d      	mov	r5, r1
 801adde:	da10      	bge.n	801ae02 <scalbn+0x52>
 801ade0:	a32b      	add	r3, pc, #172	; (adr r3, 801ae90 <scalbn+0xe0>)
 801ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ade6:	e03a      	b.n	801ae5e <scalbn+0xae>
 801ade8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801adec:	428a      	cmp	r2, r1
 801adee:	d10c      	bne.n	801ae0a <scalbn+0x5a>
 801adf0:	ee10 2a10 	vmov	r2, s0
 801adf4:	4620      	mov	r0, r4
 801adf6:	4629      	mov	r1, r5
 801adf8:	f7e5 fa68 	bl	80002cc <__adddf3>
 801adfc:	4604      	mov	r4, r0
 801adfe:	460d      	mov	r5, r1
 801ae00:	e019      	b.n	801ae36 <scalbn+0x86>
 801ae02:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ae06:	460b      	mov	r3, r1
 801ae08:	3a36      	subs	r2, #54	; 0x36
 801ae0a:	4432      	add	r2, r6
 801ae0c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801ae10:	428a      	cmp	r2, r1
 801ae12:	dd08      	ble.n	801ae26 <scalbn+0x76>
 801ae14:	2d00      	cmp	r5, #0
 801ae16:	a120      	add	r1, pc, #128	; (adr r1, 801ae98 <scalbn+0xe8>)
 801ae18:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae1c:	da1c      	bge.n	801ae58 <scalbn+0xa8>
 801ae1e:	a120      	add	r1, pc, #128	; (adr r1, 801aea0 <scalbn+0xf0>)
 801ae20:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae24:	e018      	b.n	801ae58 <scalbn+0xa8>
 801ae26:	2a00      	cmp	r2, #0
 801ae28:	dd08      	ble.n	801ae3c <scalbn+0x8c>
 801ae2a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ae2e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ae32:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ae36:	ec45 4b10 	vmov	d0, r4, r5
 801ae3a:	bd70      	pop	{r4, r5, r6, pc}
 801ae3c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ae40:	da19      	bge.n	801ae76 <scalbn+0xc6>
 801ae42:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ae46:	429e      	cmp	r6, r3
 801ae48:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ae4c:	dd0a      	ble.n	801ae64 <scalbn+0xb4>
 801ae4e:	a112      	add	r1, pc, #72	; (adr r1, 801ae98 <scalbn+0xe8>)
 801ae50:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae54:	2b00      	cmp	r3, #0
 801ae56:	d1e2      	bne.n	801ae1e <scalbn+0x6e>
 801ae58:	a30f      	add	r3, pc, #60	; (adr r3, 801ae98 <scalbn+0xe8>)
 801ae5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae5e:	f7e5 fbeb 	bl	8000638 <__aeabi_dmul>
 801ae62:	e7cb      	b.n	801adfc <scalbn+0x4c>
 801ae64:	a10a      	add	r1, pc, #40	; (adr r1, 801ae90 <scalbn+0xe0>)
 801ae66:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae6a:	2b00      	cmp	r3, #0
 801ae6c:	d0b8      	beq.n	801ade0 <scalbn+0x30>
 801ae6e:	a10e      	add	r1, pc, #56	; (adr r1, 801aea8 <scalbn+0xf8>)
 801ae70:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae74:	e7b4      	b.n	801ade0 <scalbn+0x30>
 801ae76:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ae7a:	3236      	adds	r2, #54	; 0x36
 801ae7c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ae80:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ae84:	4620      	mov	r0, r4
 801ae86:	4b0c      	ldr	r3, [pc, #48]	; (801aeb8 <scalbn+0x108>)
 801ae88:	2200      	movs	r2, #0
 801ae8a:	e7e8      	b.n	801ae5e <scalbn+0xae>
 801ae8c:	f3af 8000 	nop.w
 801ae90:	c2f8f359 	.word	0xc2f8f359
 801ae94:	01a56e1f 	.word	0x01a56e1f
 801ae98:	8800759c 	.word	0x8800759c
 801ae9c:	7e37e43c 	.word	0x7e37e43c
 801aea0:	8800759c 	.word	0x8800759c
 801aea4:	fe37e43c 	.word	0xfe37e43c
 801aea8:	c2f8f359 	.word	0xc2f8f359
 801aeac:	81a56e1f 	.word	0x81a56e1f
 801aeb0:	43500000 	.word	0x43500000
 801aeb4:	ffff3cb0 	.word	0xffff3cb0
 801aeb8:	3c900000 	.word	0x3c900000

0801aebc <fabsf>:
 801aebc:	ee10 3a10 	vmov	r3, s0
 801aec0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801aec4:	ee00 3a10 	vmov	s0, r3
 801aec8:	4770      	bx	lr

0801aeca <finitef>:
 801aeca:	b082      	sub	sp, #8
 801aecc:	ed8d 0a01 	vstr	s0, [sp, #4]
 801aed0:	9801      	ldr	r0, [sp, #4]
 801aed2:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801aed6:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801aeda:	bfac      	ite	ge
 801aedc:	2000      	movge	r0, #0
 801aede:	2001      	movlt	r0, #1
 801aee0:	b002      	add	sp, #8
 801aee2:	4770      	bx	lr

0801aee4 <scalbnf>:
 801aee4:	ee10 3a10 	vmov	r3, s0
 801aee8:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801aeec:	d025      	beq.n	801af3a <scalbnf+0x56>
 801aeee:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801aef2:	d302      	bcc.n	801aefa <scalbnf+0x16>
 801aef4:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aef8:	4770      	bx	lr
 801aefa:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801aefe:	d122      	bne.n	801af46 <scalbnf+0x62>
 801af00:	4b2a      	ldr	r3, [pc, #168]	; (801afac <scalbnf+0xc8>)
 801af02:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801afb0 <scalbnf+0xcc>
 801af06:	4298      	cmp	r0, r3
 801af08:	ee20 0a27 	vmul.f32	s0, s0, s15
 801af0c:	db16      	blt.n	801af3c <scalbnf+0x58>
 801af0e:	ee10 3a10 	vmov	r3, s0
 801af12:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801af16:	3a19      	subs	r2, #25
 801af18:	4402      	add	r2, r0
 801af1a:	2afe      	cmp	r2, #254	; 0xfe
 801af1c:	dd15      	ble.n	801af4a <scalbnf+0x66>
 801af1e:	ee10 3a10 	vmov	r3, s0
 801af22:	eddf 7a24 	vldr	s15, [pc, #144]	; 801afb4 <scalbnf+0xd0>
 801af26:	eddf 6a24 	vldr	s13, [pc, #144]	; 801afb8 <scalbnf+0xd4>
 801af2a:	2b00      	cmp	r3, #0
 801af2c:	eeb0 7a67 	vmov.f32	s14, s15
 801af30:	bfb8      	it	lt
 801af32:	eef0 7a66 	vmovlt.f32	s15, s13
 801af36:	ee27 0a27 	vmul.f32	s0, s14, s15
 801af3a:	4770      	bx	lr
 801af3c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801afbc <scalbnf+0xd8>
 801af40:	ee20 0a27 	vmul.f32	s0, s0, s15
 801af44:	4770      	bx	lr
 801af46:	0dd2      	lsrs	r2, r2, #23
 801af48:	e7e6      	b.n	801af18 <scalbnf+0x34>
 801af4a:	2a00      	cmp	r2, #0
 801af4c:	dd06      	ble.n	801af5c <scalbnf+0x78>
 801af4e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af52:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801af56:	ee00 3a10 	vmov	s0, r3
 801af5a:	4770      	bx	lr
 801af5c:	f112 0f16 	cmn.w	r2, #22
 801af60:	da1a      	bge.n	801af98 <scalbnf+0xb4>
 801af62:	f24c 3350 	movw	r3, #50000	; 0xc350
 801af66:	4298      	cmp	r0, r3
 801af68:	ee10 3a10 	vmov	r3, s0
 801af6c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801af70:	dd0a      	ble.n	801af88 <scalbnf+0xa4>
 801af72:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801afb4 <scalbnf+0xd0>
 801af76:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801afb8 <scalbnf+0xd4>
 801af7a:	eef0 7a40 	vmov.f32	s15, s0
 801af7e:	2b00      	cmp	r3, #0
 801af80:	bf18      	it	ne
 801af82:	eeb0 0a47 	vmovne.f32	s0, s14
 801af86:	e7db      	b.n	801af40 <scalbnf+0x5c>
 801af88:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801afbc <scalbnf+0xd8>
 801af8c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801afc0 <scalbnf+0xdc>
 801af90:	eef0 7a40 	vmov.f32	s15, s0
 801af94:	2b00      	cmp	r3, #0
 801af96:	e7f3      	b.n	801af80 <scalbnf+0x9c>
 801af98:	3219      	adds	r2, #25
 801af9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af9e:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801afa2:	eddf 7a08 	vldr	s15, [pc, #32]	; 801afc4 <scalbnf+0xe0>
 801afa6:	ee07 3a10 	vmov	s14, r3
 801afaa:	e7c4      	b.n	801af36 <scalbnf+0x52>
 801afac:	ffff3cb0 	.word	0xffff3cb0
 801afb0:	4c000000 	.word	0x4c000000
 801afb4:	7149f2ca 	.word	0x7149f2ca
 801afb8:	f149f2ca 	.word	0xf149f2ca
 801afbc:	0da24260 	.word	0x0da24260
 801afc0:	8da24260 	.word	0x8da24260
 801afc4:	33000000 	.word	0x33000000

0801afc8 <abort>:
 801afc8:	b508      	push	{r3, lr}
 801afca:	2006      	movs	r0, #6
 801afcc:	f000 fdae 	bl	801bb2c <raise>
 801afd0:	2001      	movs	r0, #1
 801afd2:	f7eb fc6b 	bl	80068ac <_exit>
	...

0801afd8 <__assert_func>:
 801afd8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801afda:	4614      	mov	r4, r2
 801afdc:	461a      	mov	r2, r3
 801afde:	4b09      	ldr	r3, [pc, #36]	; (801b004 <__assert_func+0x2c>)
 801afe0:	681b      	ldr	r3, [r3, #0]
 801afe2:	4605      	mov	r5, r0
 801afe4:	68d8      	ldr	r0, [r3, #12]
 801afe6:	b14c      	cbz	r4, 801affc <__assert_func+0x24>
 801afe8:	4b07      	ldr	r3, [pc, #28]	; (801b008 <__assert_func+0x30>)
 801afea:	9100      	str	r1, [sp, #0]
 801afec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801aff0:	4906      	ldr	r1, [pc, #24]	; (801b00c <__assert_func+0x34>)
 801aff2:	462b      	mov	r3, r5
 801aff4:	f000 f836 	bl	801b064 <fiprintf>
 801aff8:	f7ff ffe6 	bl	801afc8 <abort>
 801affc:	4b04      	ldr	r3, [pc, #16]	; (801b010 <__assert_func+0x38>)
 801affe:	461c      	mov	r4, r3
 801b000:	e7f3      	b.n	801afea <__assert_func+0x12>
 801b002:	bf00      	nop
 801b004:	20000518 	.word	0x20000518
 801b008:	0803ef38 	.word	0x0803ef38
 801b00c:	0803ef45 	.word	0x0803ef45
 801b010:	0803ef73 	.word	0x0803ef73

0801b014 <atexit>:
 801b014:	2300      	movs	r3, #0
 801b016:	4601      	mov	r1, r0
 801b018:	461a      	mov	r2, r3
 801b01a:	4618      	mov	r0, r3
 801b01c:	f000 be82 	b.w	801bd24 <__register_exitproc>

0801b020 <calloc>:
 801b020:	4b02      	ldr	r3, [pc, #8]	; (801b02c <calloc+0xc>)
 801b022:	460a      	mov	r2, r1
 801b024:	4601      	mov	r1, r0
 801b026:	6818      	ldr	r0, [r3, #0]
 801b028:	f000 b912 	b.w	801b250 <_calloc_r>
 801b02c:	20000518 	.word	0x20000518

0801b030 <__errno>:
 801b030:	4b01      	ldr	r3, [pc, #4]	; (801b038 <__errno+0x8>)
 801b032:	6818      	ldr	r0, [r3, #0]
 801b034:	4770      	bx	lr
 801b036:	bf00      	nop
 801b038:	20000518 	.word	0x20000518

0801b03c <exit>:
 801b03c:	b508      	push	{r3, lr}
 801b03e:	4b07      	ldr	r3, [pc, #28]	; (801b05c <exit+0x20>)
 801b040:	4604      	mov	r4, r0
 801b042:	b113      	cbz	r3, 801b04a <exit+0xe>
 801b044:	2100      	movs	r1, #0
 801b046:	f000 fecf 	bl	801bde8 <__call_exitprocs>
 801b04a:	4b05      	ldr	r3, [pc, #20]	; (801b060 <exit+0x24>)
 801b04c:	6818      	ldr	r0, [r3, #0]
 801b04e:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b050:	b103      	cbz	r3, 801b054 <exit+0x18>
 801b052:	4798      	blx	r3
 801b054:	4620      	mov	r0, r4
 801b056:	f7eb fc29 	bl	80068ac <_exit>
 801b05a:	bf00      	nop
 801b05c:	0801bde9 	.word	0x0801bde9
 801b060:	0803ef74 	.word	0x0803ef74

0801b064 <fiprintf>:
 801b064:	b40e      	push	{r1, r2, r3}
 801b066:	b503      	push	{r0, r1, lr}
 801b068:	4601      	mov	r1, r0
 801b06a:	ab03      	add	r3, sp, #12
 801b06c:	4805      	ldr	r0, [pc, #20]	; (801b084 <fiprintf+0x20>)
 801b06e:	f853 2b04 	ldr.w	r2, [r3], #4
 801b072:	6800      	ldr	r0, [r0, #0]
 801b074:	9301      	str	r3, [sp, #4]
 801b076:	f000 f9cf 	bl	801b418 <_vfiprintf_r>
 801b07a:	b002      	add	sp, #8
 801b07c:	f85d eb04 	ldr.w	lr, [sp], #4
 801b080:	b003      	add	sp, #12
 801b082:	4770      	bx	lr
 801b084:	20000518 	.word	0x20000518

0801b088 <_fwrite_r>:
 801b088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b08c:	9c08      	ldr	r4, [sp, #32]
 801b08e:	4689      	mov	r9, r1
 801b090:	4617      	mov	r7, r2
 801b092:	fb02 f803 	mul.w	r8, r2, r3
 801b096:	4605      	mov	r5, r0
 801b098:	b118      	cbz	r0, 801b0a2 <_fwrite_r+0x1a>
 801b09a:	6983      	ldr	r3, [r0, #24]
 801b09c:	b90b      	cbnz	r3, 801b0a2 <_fwrite_r+0x1a>
 801b09e:	f001 f81b 	bl	801c0d8 <__sinit>
 801b0a2:	4b26      	ldr	r3, [pc, #152]	; (801b13c <_fwrite_r+0xb4>)
 801b0a4:	429c      	cmp	r4, r3
 801b0a6:	d123      	bne.n	801b0f0 <_fwrite_r+0x68>
 801b0a8:	686c      	ldr	r4, [r5, #4]
 801b0aa:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b0ac:	07de      	lsls	r6, r3, #31
 801b0ae:	d405      	bmi.n	801b0bc <_fwrite_r+0x34>
 801b0b0:	89a3      	ldrh	r3, [r4, #12]
 801b0b2:	0598      	lsls	r0, r3, #22
 801b0b4:	d402      	bmi.n	801b0bc <_fwrite_r+0x34>
 801b0b6:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b0b8:	f000 f879 	bl	801b1ae <__retarget_lock_acquire_recursive>
 801b0bc:	89a3      	ldrh	r3, [r4, #12]
 801b0be:	0719      	lsls	r1, r3, #28
 801b0c0:	d520      	bpl.n	801b104 <_fwrite_r+0x7c>
 801b0c2:	6923      	ldr	r3, [r4, #16]
 801b0c4:	b1f3      	cbz	r3, 801b104 <_fwrite_r+0x7c>
 801b0c6:	2600      	movs	r6, #0
 801b0c8:	4546      	cmp	r6, r8
 801b0ca:	d029      	beq.n	801b120 <_fwrite_r+0x98>
 801b0cc:	68a0      	ldr	r0, [r4, #8]
 801b0ce:	f819 1006 	ldrb.w	r1, [r9, r6]
 801b0d2:	3801      	subs	r0, #1
 801b0d4:	2800      	cmp	r0, #0
 801b0d6:	60a0      	str	r0, [r4, #8]
 801b0d8:	da04      	bge.n	801b0e4 <_fwrite_r+0x5c>
 801b0da:	69a3      	ldr	r3, [r4, #24]
 801b0dc:	4298      	cmp	r0, r3
 801b0de:	db19      	blt.n	801b114 <_fwrite_r+0x8c>
 801b0e0:	290a      	cmp	r1, #10
 801b0e2:	d017      	beq.n	801b114 <_fwrite_r+0x8c>
 801b0e4:	6823      	ldr	r3, [r4, #0]
 801b0e6:	1c5a      	adds	r2, r3, #1
 801b0e8:	6022      	str	r2, [r4, #0]
 801b0ea:	7019      	strb	r1, [r3, #0]
 801b0ec:	3601      	adds	r6, #1
 801b0ee:	e7eb      	b.n	801b0c8 <_fwrite_r+0x40>
 801b0f0:	4b13      	ldr	r3, [pc, #76]	; (801b140 <_fwrite_r+0xb8>)
 801b0f2:	429c      	cmp	r4, r3
 801b0f4:	d101      	bne.n	801b0fa <_fwrite_r+0x72>
 801b0f6:	68ac      	ldr	r4, [r5, #8]
 801b0f8:	e7d7      	b.n	801b0aa <_fwrite_r+0x22>
 801b0fa:	4b12      	ldr	r3, [pc, #72]	; (801b144 <_fwrite_r+0xbc>)
 801b0fc:	429c      	cmp	r4, r3
 801b0fe:	bf08      	it	eq
 801b100:	68ec      	ldreq	r4, [r5, #12]
 801b102:	e7d2      	b.n	801b0aa <_fwrite_r+0x22>
 801b104:	4621      	mov	r1, r4
 801b106:	4628      	mov	r0, r5
 801b108:	f000 fd9e 	bl	801bc48 <__swsetup_r>
 801b10c:	2800      	cmp	r0, #0
 801b10e:	d0da      	beq.n	801b0c6 <_fwrite_r+0x3e>
 801b110:	2600      	movs	r6, #0
 801b112:	e005      	b.n	801b120 <_fwrite_r+0x98>
 801b114:	4622      	mov	r2, r4
 801b116:	4628      	mov	r0, r5
 801b118:	f000 fd44 	bl	801bba4 <__swbuf_r>
 801b11c:	3001      	adds	r0, #1
 801b11e:	d1e5      	bne.n	801b0ec <_fwrite_r+0x64>
 801b120:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b122:	07da      	lsls	r2, r3, #31
 801b124:	d405      	bmi.n	801b132 <_fwrite_r+0xaa>
 801b126:	89a3      	ldrh	r3, [r4, #12]
 801b128:	059b      	lsls	r3, r3, #22
 801b12a:	d402      	bmi.n	801b132 <_fwrite_r+0xaa>
 801b12c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b12e:	f000 f840 	bl	801b1b2 <__retarget_lock_release_recursive>
 801b132:	fbb6 f0f7 	udiv	r0, r6, r7
 801b136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b13a:	bf00      	nop
 801b13c:	0803efcc 	.word	0x0803efcc
 801b140:	0803efec 	.word	0x0803efec
 801b144:	0803efac 	.word	0x0803efac

0801b148 <fwrite>:
 801b148:	b507      	push	{r0, r1, r2, lr}
 801b14a:	9300      	str	r3, [sp, #0]
 801b14c:	4613      	mov	r3, r2
 801b14e:	460a      	mov	r2, r1
 801b150:	4601      	mov	r1, r0
 801b152:	4803      	ldr	r0, [pc, #12]	; (801b160 <fwrite+0x18>)
 801b154:	6800      	ldr	r0, [r0, #0]
 801b156:	f7ff ff97 	bl	801b088 <_fwrite_r>
 801b15a:	b003      	add	sp, #12
 801b15c:	f85d fb04 	ldr.w	pc, [sp], #4
 801b160:	20000518 	.word	0x20000518

0801b164 <__libc_init_array>:
 801b164:	b570      	push	{r4, r5, r6, lr}
 801b166:	4d0d      	ldr	r5, [pc, #52]	; (801b19c <__libc_init_array+0x38>)
 801b168:	4c0d      	ldr	r4, [pc, #52]	; (801b1a0 <__libc_init_array+0x3c>)
 801b16a:	1b64      	subs	r4, r4, r5
 801b16c:	10a4      	asrs	r4, r4, #2
 801b16e:	2600      	movs	r6, #0
 801b170:	42a6      	cmp	r6, r4
 801b172:	d109      	bne.n	801b188 <__libc_init_array+0x24>
 801b174:	4d0b      	ldr	r5, [pc, #44]	; (801b1a4 <__libc_init_array+0x40>)
 801b176:	4c0c      	ldr	r4, [pc, #48]	; (801b1a8 <__libc_init_array+0x44>)
 801b178:	f001 faf2 	bl	801c760 <_init>
 801b17c:	1b64      	subs	r4, r4, r5
 801b17e:	10a4      	asrs	r4, r4, #2
 801b180:	2600      	movs	r6, #0
 801b182:	42a6      	cmp	r6, r4
 801b184:	d105      	bne.n	801b192 <__libc_init_array+0x2e>
 801b186:	bd70      	pop	{r4, r5, r6, pc}
 801b188:	f855 3b04 	ldr.w	r3, [r5], #4
 801b18c:	4798      	blx	r3
 801b18e:	3601      	adds	r6, #1
 801b190:	e7ee      	b.n	801b170 <__libc_init_array+0xc>
 801b192:	f855 3b04 	ldr.w	r3, [r5], #4
 801b196:	4798      	blx	r3
 801b198:	3601      	adds	r6, #1
 801b19a:	e7f2      	b.n	801b182 <__libc_init_array+0x1e>
 801b19c:	0803f014 	.word	0x0803f014
 801b1a0:	0803f014 	.word	0x0803f014
 801b1a4:	0803f014 	.word	0x0803f014
 801b1a8:	0803f01c 	.word	0x0803f01c

0801b1ac <__retarget_lock_init_recursive>:
 801b1ac:	4770      	bx	lr

0801b1ae <__retarget_lock_acquire_recursive>:
 801b1ae:	4770      	bx	lr

0801b1b0 <__retarget_lock_release>:
 801b1b0:	4770      	bx	lr

0801b1b2 <__retarget_lock_release_recursive>:
 801b1b2:	4770      	bx	lr

0801b1b4 <malloc>:
 801b1b4:	4b02      	ldr	r3, [pc, #8]	; (801b1c0 <malloc+0xc>)
 801b1b6:	4601      	mov	r1, r0
 801b1b8:	6818      	ldr	r0, [r3, #0]
 801b1ba:	f000 b8a9 	b.w	801b310 <_malloc_r>
 801b1be:	bf00      	nop
 801b1c0:	20000518 	.word	0x20000518

0801b1c4 <free>:
 801b1c4:	4b02      	ldr	r3, [pc, #8]	; (801b1d0 <free+0xc>)
 801b1c6:	4601      	mov	r1, r0
 801b1c8:	6818      	ldr	r0, [r3, #0]
 801b1ca:	f000 b851 	b.w	801b270 <_free_r>
 801b1ce:	bf00      	nop
 801b1d0:	20000518 	.word	0x20000518

0801b1d4 <memcmp>:
 801b1d4:	b530      	push	{r4, r5, lr}
 801b1d6:	3901      	subs	r1, #1
 801b1d8:	2400      	movs	r4, #0
 801b1da:	42a2      	cmp	r2, r4
 801b1dc:	d101      	bne.n	801b1e2 <memcmp+0xe>
 801b1de:	2000      	movs	r0, #0
 801b1e0:	e005      	b.n	801b1ee <memcmp+0x1a>
 801b1e2:	5d03      	ldrb	r3, [r0, r4]
 801b1e4:	3401      	adds	r4, #1
 801b1e6:	5d0d      	ldrb	r5, [r1, r4]
 801b1e8:	42ab      	cmp	r3, r5
 801b1ea:	d0f6      	beq.n	801b1da <memcmp+0x6>
 801b1ec:	1b58      	subs	r0, r3, r5
 801b1ee:	bd30      	pop	{r4, r5, pc}

0801b1f0 <memcpy>:
 801b1f0:	440a      	add	r2, r1
 801b1f2:	4291      	cmp	r1, r2
 801b1f4:	f100 33ff 	add.w	r3, r0, #4294967295
 801b1f8:	d100      	bne.n	801b1fc <memcpy+0xc>
 801b1fa:	4770      	bx	lr
 801b1fc:	b510      	push	{r4, lr}
 801b1fe:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b202:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b206:	4291      	cmp	r1, r2
 801b208:	d1f9      	bne.n	801b1fe <memcpy+0xe>
 801b20a:	bd10      	pop	{r4, pc}

0801b20c <memmove>:
 801b20c:	4288      	cmp	r0, r1
 801b20e:	b510      	push	{r4, lr}
 801b210:	eb01 0402 	add.w	r4, r1, r2
 801b214:	d902      	bls.n	801b21c <memmove+0x10>
 801b216:	4284      	cmp	r4, r0
 801b218:	4623      	mov	r3, r4
 801b21a:	d807      	bhi.n	801b22c <memmove+0x20>
 801b21c:	1e43      	subs	r3, r0, #1
 801b21e:	42a1      	cmp	r1, r4
 801b220:	d008      	beq.n	801b234 <memmove+0x28>
 801b222:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b226:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b22a:	e7f8      	b.n	801b21e <memmove+0x12>
 801b22c:	4402      	add	r2, r0
 801b22e:	4601      	mov	r1, r0
 801b230:	428a      	cmp	r2, r1
 801b232:	d100      	bne.n	801b236 <memmove+0x2a>
 801b234:	bd10      	pop	{r4, pc}
 801b236:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b23a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b23e:	e7f7      	b.n	801b230 <memmove+0x24>

0801b240 <memset>:
 801b240:	4402      	add	r2, r0
 801b242:	4603      	mov	r3, r0
 801b244:	4293      	cmp	r3, r2
 801b246:	d100      	bne.n	801b24a <memset+0xa>
 801b248:	4770      	bx	lr
 801b24a:	f803 1b01 	strb.w	r1, [r3], #1
 801b24e:	e7f9      	b.n	801b244 <memset+0x4>

0801b250 <_calloc_r>:
 801b250:	b513      	push	{r0, r1, r4, lr}
 801b252:	434a      	muls	r2, r1
 801b254:	4611      	mov	r1, r2
 801b256:	9201      	str	r2, [sp, #4]
 801b258:	f000 f85a 	bl	801b310 <_malloc_r>
 801b25c:	4604      	mov	r4, r0
 801b25e:	b118      	cbz	r0, 801b268 <_calloc_r+0x18>
 801b260:	9a01      	ldr	r2, [sp, #4]
 801b262:	2100      	movs	r1, #0
 801b264:	f7ff ffec 	bl	801b240 <memset>
 801b268:	4620      	mov	r0, r4
 801b26a:	b002      	add	sp, #8
 801b26c:	bd10      	pop	{r4, pc}
	...

0801b270 <_free_r>:
 801b270:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b272:	2900      	cmp	r1, #0
 801b274:	d048      	beq.n	801b308 <_free_r+0x98>
 801b276:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b27a:	9001      	str	r0, [sp, #4]
 801b27c:	2b00      	cmp	r3, #0
 801b27e:	f1a1 0404 	sub.w	r4, r1, #4
 801b282:	bfb8      	it	lt
 801b284:	18e4      	addlt	r4, r4, r3
 801b286:	f001 f829 	bl	801c2dc <__malloc_lock>
 801b28a:	4a20      	ldr	r2, [pc, #128]	; (801b30c <_free_r+0x9c>)
 801b28c:	9801      	ldr	r0, [sp, #4]
 801b28e:	6813      	ldr	r3, [r2, #0]
 801b290:	4615      	mov	r5, r2
 801b292:	b933      	cbnz	r3, 801b2a2 <_free_r+0x32>
 801b294:	6063      	str	r3, [r4, #4]
 801b296:	6014      	str	r4, [r2, #0]
 801b298:	b003      	add	sp, #12
 801b29a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b29e:	f001 b823 	b.w	801c2e8 <__malloc_unlock>
 801b2a2:	42a3      	cmp	r3, r4
 801b2a4:	d90b      	bls.n	801b2be <_free_r+0x4e>
 801b2a6:	6821      	ldr	r1, [r4, #0]
 801b2a8:	1862      	adds	r2, r4, r1
 801b2aa:	4293      	cmp	r3, r2
 801b2ac:	bf04      	itt	eq
 801b2ae:	681a      	ldreq	r2, [r3, #0]
 801b2b0:	685b      	ldreq	r3, [r3, #4]
 801b2b2:	6063      	str	r3, [r4, #4]
 801b2b4:	bf04      	itt	eq
 801b2b6:	1852      	addeq	r2, r2, r1
 801b2b8:	6022      	streq	r2, [r4, #0]
 801b2ba:	602c      	str	r4, [r5, #0]
 801b2bc:	e7ec      	b.n	801b298 <_free_r+0x28>
 801b2be:	461a      	mov	r2, r3
 801b2c0:	685b      	ldr	r3, [r3, #4]
 801b2c2:	b10b      	cbz	r3, 801b2c8 <_free_r+0x58>
 801b2c4:	42a3      	cmp	r3, r4
 801b2c6:	d9fa      	bls.n	801b2be <_free_r+0x4e>
 801b2c8:	6811      	ldr	r1, [r2, #0]
 801b2ca:	1855      	adds	r5, r2, r1
 801b2cc:	42a5      	cmp	r5, r4
 801b2ce:	d10b      	bne.n	801b2e8 <_free_r+0x78>
 801b2d0:	6824      	ldr	r4, [r4, #0]
 801b2d2:	4421      	add	r1, r4
 801b2d4:	1854      	adds	r4, r2, r1
 801b2d6:	42a3      	cmp	r3, r4
 801b2d8:	6011      	str	r1, [r2, #0]
 801b2da:	d1dd      	bne.n	801b298 <_free_r+0x28>
 801b2dc:	681c      	ldr	r4, [r3, #0]
 801b2de:	685b      	ldr	r3, [r3, #4]
 801b2e0:	6053      	str	r3, [r2, #4]
 801b2e2:	4421      	add	r1, r4
 801b2e4:	6011      	str	r1, [r2, #0]
 801b2e6:	e7d7      	b.n	801b298 <_free_r+0x28>
 801b2e8:	d902      	bls.n	801b2f0 <_free_r+0x80>
 801b2ea:	230c      	movs	r3, #12
 801b2ec:	6003      	str	r3, [r0, #0]
 801b2ee:	e7d3      	b.n	801b298 <_free_r+0x28>
 801b2f0:	6825      	ldr	r5, [r4, #0]
 801b2f2:	1961      	adds	r1, r4, r5
 801b2f4:	428b      	cmp	r3, r1
 801b2f6:	bf04      	itt	eq
 801b2f8:	6819      	ldreq	r1, [r3, #0]
 801b2fa:	685b      	ldreq	r3, [r3, #4]
 801b2fc:	6063      	str	r3, [r4, #4]
 801b2fe:	bf04      	itt	eq
 801b300:	1949      	addeq	r1, r1, r5
 801b302:	6021      	streq	r1, [r4, #0]
 801b304:	6054      	str	r4, [r2, #4]
 801b306:	e7c7      	b.n	801b298 <_free_r+0x28>
 801b308:	b003      	add	sp, #12
 801b30a:	bd30      	pop	{r4, r5, pc}
 801b30c:	20007a24 	.word	0x20007a24

0801b310 <_malloc_r>:
 801b310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b312:	1ccd      	adds	r5, r1, #3
 801b314:	f025 0503 	bic.w	r5, r5, #3
 801b318:	3508      	adds	r5, #8
 801b31a:	2d0c      	cmp	r5, #12
 801b31c:	bf38      	it	cc
 801b31e:	250c      	movcc	r5, #12
 801b320:	2d00      	cmp	r5, #0
 801b322:	4606      	mov	r6, r0
 801b324:	db01      	blt.n	801b32a <_malloc_r+0x1a>
 801b326:	42a9      	cmp	r1, r5
 801b328:	d903      	bls.n	801b332 <_malloc_r+0x22>
 801b32a:	230c      	movs	r3, #12
 801b32c:	6033      	str	r3, [r6, #0]
 801b32e:	2000      	movs	r0, #0
 801b330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b332:	f000 ffd3 	bl	801c2dc <__malloc_lock>
 801b336:	4921      	ldr	r1, [pc, #132]	; (801b3bc <_malloc_r+0xac>)
 801b338:	680a      	ldr	r2, [r1, #0]
 801b33a:	4614      	mov	r4, r2
 801b33c:	b99c      	cbnz	r4, 801b366 <_malloc_r+0x56>
 801b33e:	4f20      	ldr	r7, [pc, #128]	; (801b3c0 <_malloc_r+0xb0>)
 801b340:	683b      	ldr	r3, [r7, #0]
 801b342:	b923      	cbnz	r3, 801b34e <_malloc_r+0x3e>
 801b344:	4621      	mov	r1, r4
 801b346:	4630      	mov	r0, r6
 801b348:	f000 fbb8 	bl	801babc <_sbrk_r>
 801b34c:	6038      	str	r0, [r7, #0]
 801b34e:	4629      	mov	r1, r5
 801b350:	4630      	mov	r0, r6
 801b352:	f000 fbb3 	bl	801babc <_sbrk_r>
 801b356:	1c43      	adds	r3, r0, #1
 801b358:	d123      	bne.n	801b3a2 <_malloc_r+0x92>
 801b35a:	230c      	movs	r3, #12
 801b35c:	6033      	str	r3, [r6, #0]
 801b35e:	4630      	mov	r0, r6
 801b360:	f000 ffc2 	bl	801c2e8 <__malloc_unlock>
 801b364:	e7e3      	b.n	801b32e <_malloc_r+0x1e>
 801b366:	6823      	ldr	r3, [r4, #0]
 801b368:	1b5b      	subs	r3, r3, r5
 801b36a:	d417      	bmi.n	801b39c <_malloc_r+0x8c>
 801b36c:	2b0b      	cmp	r3, #11
 801b36e:	d903      	bls.n	801b378 <_malloc_r+0x68>
 801b370:	6023      	str	r3, [r4, #0]
 801b372:	441c      	add	r4, r3
 801b374:	6025      	str	r5, [r4, #0]
 801b376:	e004      	b.n	801b382 <_malloc_r+0x72>
 801b378:	6863      	ldr	r3, [r4, #4]
 801b37a:	42a2      	cmp	r2, r4
 801b37c:	bf0c      	ite	eq
 801b37e:	600b      	streq	r3, [r1, #0]
 801b380:	6053      	strne	r3, [r2, #4]
 801b382:	4630      	mov	r0, r6
 801b384:	f000 ffb0 	bl	801c2e8 <__malloc_unlock>
 801b388:	f104 000b 	add.w	r0, r4, #11
 801b38c:	1d23      	adds	r3, r4, #4
 801b38e:	f020 0007 	bic.w	r0, r0, #7
 801b392:	1ac2      	subs	r2, r0, r3
 801b394:	d0cc      	beq.n	801b330 <_malloc_r+0x20>
 801b396:	1a1b      	subs	r3, r3, r0
 801b398:	50a3      	str	r3, [r4, r2]
 801b39a:	e7c9      	b.n	801b330 <_malloc_r+0x20>
 801b39c:	4622      	mov	r2, r4
 801b39e:	6864      	ldr	r4, [r4, #4]
 801b3a0:	e7cc      	b.n	801b33c <_malloc_r+0x2c>
 801b3a2:	1cc4      	adds	r4, r0, #3
 801b3a4:	f024 0403 	bic.w	r4, r4, #3
 801b3a8:	42a0      	cmp	r0, r4
 801b3aa:	d0e3      	beq.n	801b374 <_malloc_r+0x64>
 801b3ac:	1a21      	subs	r1, r4, r0
 801b3ae:	4630      	mov	r0, r6
 801b3b0:	f000 fb84 	bl	801babc <_sbrk_r>
 801b3b4:	3001      	adds	r0, #1
 801b3b6:	d1dd      	bne.n	801b374 <_malloc_r+0x64>
 801b3b8:	e7cf      	b.n	801b35a <_malloc_r+0x4a>
 801b3ba:	bf00      	nop
 801b3bc:	20007a24 	.word	0x20007a24
 801b3c0:	20007a28 	.word	0x20007a28

0801b3c4 <__sfputc_r>:
 801b3c4:	6893      	ldr	r3, [r2, #8]
 801b3c6:	3b01      	subs	r3, #1
 801b3c8:	2b00      	cmp	r3, #0
 801b3ca:	b410      	push	{r4}
 801b3cc:	6093      	str	r3, [r2, #8]
 801b3ce:	da08      	bge.n	801b3e2 <__sfputc_r+0x1e>
 801b3d0:	6994      	ldr	r4, [r2, #24]
 801b3d2:	42a3      	cmp	r3, r4
 801b3d4:	db01      	blt.n	801b3da <__sfputc_r+0x16>
 801b3d6:	290a      	cmp	r1, #10
 801b3d8:	d103      	bne.n	801b3e2 <__sfputc_r+0x1e>
 801b3da:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3de:	f000 bbe1 	b.w	801bba4 <__swbuf_r>
 801b3e2:	6813      	ldr	r3, [r2, #0]
 801b3e4:	1c58      	adds	r0, r3, #1
 801b3e6:	6010      	str	r0, [r2, #0]
 801b3e8:	7019      	strb	r1, [r3, #0]
 801b3ea:	4608      	mov	r0, r1
 801b3ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3f0:	4770      	bx	lr

0801b3f2 <__sfputs_r>:
 801b3f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3f4:	4606      	mov	r6, r0
 801b3f6:	460f      	mov	r7, r1
 801b3f8:	4614      	mov	r4, r2
 801b3fa:	18d5      	adds	r5, r2, r3
 801b3fc:	42ac      	cmp	r4, r5
 801b3fe:	d101      	bne.n	801b404 <__sfputs_r+0x12>
 801b400:	2000      	movs	r0, #0
 801b402:	e007      	b.n	801b414 <__sfputs_r+0x22>
 801b404:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b408:	463a      	mov	r2, r7
 801b40a:	4630      	mov	r0, r6
 801b40c:	f7ff ffda 	bl	801b3c4 <__sfputc_r>
 801b410:	1c43      	adds	r3, r0, #1
 801b412:	d1f3      	bne.n	801b3fc <__sfputs_r+0xa>
 801b414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b418 <_vfiprintf_r>:
 801b418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b41c:	460d      	mov	r5, r1
 801b41e:	b09d      	sub	sp, #116	; 0x74
 801b420:	4614      	mov	r4, r2
 801b422:	4698      	mov	r8, r3
 801b424:	4606      	mov	r6, r0
 801b426:	b118      	cbz	r0, 801b430 <_vfiprintf_r+0x18>
 801b428:	6983      	ldr	r3, [r0, #24]
 801b42a:	b90b      	cbnz	r3, 801b430 <_vfiprintf_r+0x18>
 801b42c:	f000 fe54 	bl	801c0d8 <__sinit>
 801b430:	4b89      	ldr	r3, [pc, #548]	; (801b658 <_vfiprintf_r+0x240>)
 801b432:	429d      	cmp	r5, r3
 801b434:	d11b      	bne.n	801b46e <_vfiprintf_r+0x56>
 801b436:	6875      	ldr	r5, [r6, #4]
 801b438:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b43a:	07d9      	lsls	r1, r3, #31
 801b43c:	d405      	bmi.n	801b44a <_vfiprintf_r+0x32>
 801b43e:	89ab      	ldrh	r3, [r5, #12]
 801b440:	059a      	lsls	r2, r3, #22
 801b442:	d402      	bmi.n	801b44a <_vfiprintf_r+0x32>
 801b444:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b446:	f7ff feb2 	bl	801b1ae <__retarget_lock_acquire_recursive>
 801b44a:	89ab      	ldrh	r3, [r5, #12]
 801b44c:	071b      	lsls	r3, r3, #28
 801b44e:	d501      	bpl.n	801b454 <_vfiprintf_r+0x3c>
 801b450:	692b      	ldr	r3, [r5, #16]
 801b452:	b9eb      	cbnz	r3, 801b490 <_vfiprintf_r+0x78>
 801b454:	4629      	mov	r1, r5
 801b456:	4630      	mov	r0, r6
 801b458:	f000 fbf6 	bl	801bc48 <__swsetup_r>
 801b45c:	b1c0      	cbz	r0, 801b490 <_vfiprintf_r+0x78>
 801b45e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b460:	07dc      	lsls	r4, r3, #31
 801b462:	d50e      	bpl.n	801b482 <_vfiprintf_r+0x6a>
 801b464:	f04f 30ff 	mov.w	r0, #4294967295
 801b468:	b01d      	add	sp, #116	; 0x74
 801b46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b46e:	4b7b      	ldr	r3, [pc, #492]	; (801b65c <_vfiprintf_r+0x244>)
 801b470:	429d      	cmp	r5, r3
 801b472:	d101      	bne.n	801b478 <_vfiprintf_r+0x60>
 801b474:	68b5      	ldr	r5, [r6, #8]
 801b476:	e7df      	b.n	801b438 <_vfiprintf_r+0x20>
 801b478:	4b79      	ldr	r3, [pc, #484]	; (801b660 <_vfiprintf_r+0x248>)
 801b47a:	429d      	cmp	r5, r3
 801b47c:	bf08      	it	eq
 801b47e:	68f5      	ldreq	r5, [r6, #12]
 801b480:	e7da      	b.n	801b438 <_vfiprintf_r+0x20>
 801b482:	89ab      	ldrh	r3, [r5, #12]
 801b484:	0598      	lsls	r0, r3, #22
 801b486:	d4ed      	bmi.n	801b464 <_vfiprintf_r+0x4c>
 801b488:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b48a:	f7ff fe92 	bl	801b1b2 <__retarget_lock_release_recursive>
 801b48e:	e7e9      	b.n	801b464 <_vfiprintf_r+0x4c>
 801b490:	2300      	movs	r3, #0
 801b492:	9309      	str	r3, [sp, #36]	; 0x24
 801b494:	2320      	movs	r3, #32
 801b496:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b49a:	f8cd 800c 	str.w	r8, [sp, #12]
 801b49e:	2330      	movs	r3, #48	; 0x30
 801b4a0:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b664 <_vfiprintf_r+0x24c>
 801b4a4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b4a8:	f04f 0901 	mov.w	r9, #1
 801b4ac:	4623      	mov	r3, r4
 801b4ae:	469a      	mov	sl, r3
 801b4b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b4b4:	b10a      	cbz	r2, 801b4ba <_vfiprintf_r+0xa2>
 801b4b6:	2a25      	cmp	r2, #37	; 0x25
 801b4b8:	d1f9      	bne.n	801b4ae <_vfiprintf_r+0x96>
 801b4ba:	ebba 0b04 	subs.w	fp, sl, r4
 801b4be:	d00b      	beq.n	801b4d8 <_vfiprintf_r+0xc0>
 801b4c0:	465b      	mov	r3, fp
 801b4c2:	4622      	mov	r2, r4
 801b4c4:	4629      	mov	r1, r5
 801b4c6:	4630      	mov	r0, r6
 801b4c8:	f7ff ff93 	bl	801b3f2 <__sfputs_r>
 801b4cc:	3001      	adds	r0, #1
 801b4ce:	f000 80aa 	beq.w	801b626 <_vfiprintf_r+0x20e>
 801b4d2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4d4:	445a      	add	r2, fp
 801b4d6:	9209      	str	r2, [sp, #36]	; 0x24
 801b4d8:	f89a 3000 	ldrb.w	r3, [sl]
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	f000 80a2 	beq.w	801b626 <_vfiprintf_r+0x20e>
 801b4e2:	2300      	movs	r3, #0
 801b4e4:	f04f 32ff 	mov.w	r2, #4294967295
 801b4e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b4ec:	f10a 0a01 	add.w	sl, sl, #1
 801b4f0:	9304      	str	r3, [sp, #16]
 801b4f2:	9307      	str	r3, [sp, #28]
 801b4f4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b4f8:	931a      	str	r3, [sp, #104]	; 0x68
 801b4fa:	4654      	mov	r4, sl
 801b4fc:	2205      	movs	r2, #5
 801b4fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b502:	4858      	ldr	r0, [pc, #352]	; (801b664 <_vfiprintf_r+0x24c>)
 801b504:	f7e4 fe8c 	bl	8000220 <memchr>
 801b508:	9a04      	ldr	r2, [sp, #16]
 801b50a:	b9d8      	cbnz	r0, 801b544 <_vfiprintf_r+0x12c>
 801b50c:	06d1      	lsls	r1, r2, #27
 801b50e:	bf44      	itt	mi
 801b510:	2320      	movmi	r3, #32
 801b512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b516:	0713      	lsls	r3, r2, #28
 801b518:	bf44      	itt	mi
 801b51a:	232b      	movmi	r3, #43	; 0x2b
 801b51c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b520:	f89a 3000 	ldrb.w	r3, [sl]
 801b524:	2b2a      	cmp	r3, #42	; 0x2a
 801b526:	d015      	beq.n	801b554 <_vfiprintf_r+0x13c>
 801b528:	9a07      	ldr	r2, [sp, #28]
 801b52a:	4654      	mov	r4, sl
 801b52c:	2000      	movs	r0, #0
 801b52e:	f04f 0c0a 	mov.w	ip, #10
 801b532:	4621      	mov	r1, r4
 801b534:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b538:	3b30      	subs	r3, #48	; 0x30
 801b53a:	2b09      	cmp	r3, #9
 801b53c:	d94e      	bls.n	801b5dc <_vfiprintf_r+0x1c4>
 801b53e:	b1b0      	cbz	r0, 801b56e <_vfiprintf_r+0x156>
 801b540:	9207      	str	r2, [sp, #28]
 801b542:	e014      	b.n	801b56e <_vfiprintf_r+0x156>
 801b544:	eba0 0308 	sub.w	r3, r0, r8
 801b548:	fa09 f303 	lsl.w	r3, r9, r3
 801b54c:	4313      	orrs	r3, r2
 801b54e:	9304      	str	r3, [sp, #16]
 801b550:	46a2      	mov	sl, r4
 801b552:	e7d2      	b.n	801b4fa <_vfiprintf_r+0xe2>
 801b554:	9b03      	ldr	r3, [sp, #12]
 801b556:	1d19      	adds	r1, r3, #4
 801b558:	681b      	ldr	r3, [r3, #0]
 801b55a:	9103      	str	r1, [sp, #12]
 801b55c:	2b00      	cmp	r3, #0
 801b55e:	bfbb      	ittet	lt
 801b560:	425b      	neglt	r3, r3
 801b562:	f042 0202 	orrlt.w	r2, r2, #2
 801b566:	9307      	strge	r3, [sp, #28]
 801b568:	9307      	strlt	r3, [sp, #28]
 801b56a:	bfb8      	it	lt
 801b56c:	9204      	strlt	r2, [sp, #16]
 801b56e:	7823      	ldrb	r3, [r4, #0]
 801b570:	2b2e      	cmp	r3, #46	; 0x2e
 801b572:	d10c      	bne.n	801b58e <_vfiprintf_r+0x176>
 801b574:	7863      	ldrb	r3, [r4, #1]
 801b576:	2b2a      	cmp	r3, #42	; 0x2a
 801b578:	d135      	bne.n	801b5e6 <_vfiprintf_r+0x1ce>
 801b57a:	9b03      	ldr	r3, [sp, #12]
 801b57c:	1d1a      	adds	r2, r3, #4
 801b57e:	681b      	ldr	r3, [r3, #0]
 801b580:	9203      	str	r2, [sp, #12]
 801b582:	2b00      	cmp	r3, #0
 801b584:	bfb8      	it	lt
 801b586:	f04f 33ff 	movlt.w	r3, #4294967295
 801b58a:	3402      	adds	r4, #2
 801b58c:	9305      	str	r3, [sp, #20]
 801b58e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b674 <_vfiprintf_r+0x25c>
 801b592:	7821      	ldrb	r1, [r4, #0]
 801b594:	2203      	movs	r2, #3
 801b596:	4650      	mov	r0, sl
 801b598:	f7e4 fe42 	bl	8000220 <memchr>
 801b59c:	b140      	cbz	r0, 801b5b0 <_vfiprintf_r+0x198>
 801b59e:	2340      	movs	r3, #64	; 0x40
 801b5a0:	eba0 000a 	sub.w	r0, r0, sl
 801b5a4:	fa03 f000 	lsl.w	r0, r3, r0
 801b5a8:	9b04      	ldr	r3, [sp, #16]
 801b5aa:	4303      	orrs	r3, r0
 801b5ac:	3401      	adds	r4, #1
 801b5ae:	9304      	str	r3, [sp, #16]
 801b5b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b5b4:	482c      	ldr	r0, [pc, #176]	; (801b668 <_vfiprintf_r+0x250>)
 801b5b6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5ba:	2206      	movs	r2, #6
 801b5bc:	f7e4 fe30 	bl	8000220 <memchr>
 801b5c0:	2800      	cmp	r0, #0
 801b5c2:	d03f      	beq.n	801b644 <_vfiprintf_r+0x22c>
 801b5c4:	4b29      	ldr	r3, [pc, #164]	; (801b66c <_vfiprintf_r+0x254>)
 801b5c6:	bb1b      	cbnz	r3, 801b610 <_vfiprintf_r+0x1f8>
 801b5c8:	9b03      	ldr	r3, [sp, #12]
 801b5ca:	3307      	adds	r3, #7
 801b5cc:	f023 0307 	bic.w	r3, r3, #7
 801b5d0:	3308      	adds	r3, #8
 801b5d2:	9303      	str	r3, [sp, #12]
 801b5d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5d6:	443b      	add	r3, r7
 801b5d8:	9309      	str	r3, [sp, #36]	; 0x24
 801b5da:	e767      	b.n	801b4ac <_vfiprintf_r+0x94>
 801b5dc:	fb0c 3202 	mla	r2, ip, r2, r3
 801b5e0:	460c      	mov	r4, r1
 801b5e2:	2001      	movs	r0, #1
 801b5e4:	e7a5      	b.n	801b532 <_vfiprintf_r+0x11a>
 801b5e6:	2300      	movs	r3, #0
 801b5e8:	3401      	adds	r4, #1
 801b5ea:	9305      	str	r3, [sp, #20]
 801b5ec:	4619      	mov	r1, r3
 801b5ee:	f04f 0c0a 	mov.w	ip, #10
 801b5f2:	4620      	mov	r0, r4
 801b5f4:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5f8:	3a30      	subs	r2, #48	; 0x30
 801b5fa:	2a09      	cmp	r2, #9
 801b5fc:	d903      	bls.n	801b606 <_vfiprintf_r+0x1ee>
 801b5fe:	2b00      	cmp	r3, #0
 801b600:	d0c5      	beq.n	801b58e <_vfiprintf_r+0x176>
 801b602:	9105      	str	r1, [sp, #20]
 801b604:	e7c3      	b.n	801b58e <_vfiprintf_r+0x176>
 801b606:	fb0c 2101 	mla	r1, ip, r1, r2
 801b60a:	4604      	mov	r4, r0
 801b60c:	2301      	movs	r3, #1
 801b60e:	e7f0      	b.n	801b5f2 <_vfiprintf_r+0x1da>
 801b610:	ab03      	add	r3, sp, #12
 801b612:	9300      	str	r3, [sp, #0]
 801b614:	462a      	mov	r2, r5
 801b616:	4b16      	ldr	r3, [pc, #88]	; (801b670 <_vfiprintf_r+0x258>)
 801b618:	a904      	add	r1, sp, #16
 801b61a:	4630      	mov	r0, r6
 801b61c:	f3af 8000 	nop.w
 801b620:	4607      	mov	r7, r0
 801b622:	1c78      	adds	r0, r7, #1
 801b624:	d1d6      	bne.n	801b5d4 <_vfiprintf_r+0x1bc>
 801b626:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b628:	07d9      	lsls	r1, r3, #31
 801b62a:	d405      	bmi.n	801b638 <_vfiprintf_r+0x220>
 801b62c:	89ab      	ldrh	r3, [r5, #12]
 801b62e:	059a      	lsls	r2, r3, #22
 801b630:	d402      	bmi.n	801b638 <_vfiprintf_r+0x220>
 801b632:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b634:	f7ff fdbd 	bl	801b1b2 <__retarget_lock_release_recursive>
 801b638:	89ab      	ldrh	r3, [r5, #12]
 801b63a:	065b      	lsls	r3, r3, #25
 801b63c:	f53f af12 	bmi.w	801b464 <_vfiprintf_r+0x4c>
 801b640:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b642:	e711      	b.n	801b468 <_vfiprintf_r+0x50>
 801b644:	ab03      	add	r3, sp, #12
 801b646:	9300      	str	r3, [sp, #0]
 801b648:	462a      	mov	r2, r5
 801b64a:	4b09      	ldr	r3, [pc, #36]	; (801b670 <_vfiprintf_r+0x258>)
 801b64c:	a904      	add	r1, sp, #16
 801b64e:	4630      	mov	r0, r6
 801b650:	f000 f880 	bl	801b754 <_printf_i>
 801b654:	e7e4      	b.n	801b620 <_vfiprintf_r+0x208>
 801b656:	bf00      	nop
 801b658:	0803efcc 	.word	0x0803efcc
 801b65c:	0803efec 	.word	0x0803efec
 801b660:	0803efac 	.word	0x0803efac
 801b664:	0803ef78 	.word	0x0803ef78
 801b668:	0803ef82 	.word	0x0803ef82
 801b66c:	00000000 	.word	0x00000000
 801b670:	0801b3f3 	.word	0x0801b3f3
 801b674:	0803ef7e 	.word	0x0803ef7e

0801b678 <_printf_common>:
 801b678:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b67c:	4616      	mov	r6, r2
 801b67e:	4699      	mov	r9, r3
 801b680:	688a      	ldr	r2, [r1, #8]
 801b682:	690b      	ldr	r3, [r1, #16]
 801b684:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b688:	4293      	cmp	r3, r2
 801b68a:	bfb8      	it	lt
 801b68c:	4613      	movlt	r3, r2
 801b68e:	6033      	str	r3, [r6, #0]
 801b690:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b694:	4607      	mov	r7, r0
 801b696:	460c      	mov	r4, r1
 801b698:	b10a      	cbz	r2, 801b69e <_printf_common+0x26>
 801b69a:	3301      	adds	r3, #1
 801b69c:	6033      	str	r3, [r6, #0]
 801b69e:	6823      	ldr	r3, [r4, #0]
 801b6a0:	0699      	lsls	r1, r3, #26
 801b6a2:	bf42      	ittt	mi
 801b6a4:	6833      	ldrmi	r3, [r6, #0]
 801b6a6:	3302      	addmi	r3, #2
 801b6a8:	6033      	strmi	r3, [r6, #0]
 801b6aa:	6825      	ldr	r5, [r4, #0]
 801b6ac:	f015 0506 	ands.w	r5, r5, #6
 801b6b0:	d106      	bne.n	801b6c0 <_printf_common+0x48>
 801b6b2:	f104 0a19 	add.w	sl, r4, #25
 801b6b6:	68e3      	ldr	r3, [r4, #12]
 801b6b8:	6832      	ldr	r2, [r6, #0]
 801b6ba:	1a9b      	subs	r3, r3, r2
 801b6bc:	42ab      	cmp	r3, r5
 801b6be:	dc26      	bgt.n	801b70e <_printf_common+0x96>
 801b6c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b6c4:	1e13      	subs	r3, r2, #0
 801b6c6:	6822      	ldr	r2, [r4, #0]
 801b6c8:	bf18      	it	ne
 801b6ca:	2301      	movne	r3, #1
 801b6cc:	0692      	lsls	r2, r2, #26
 801b6ce:	d42b      	bmi.n	801b728 <_printf_common+0xb0>
 801b6d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6d4:	4649      	mov	r1, r9
 801b6d6:	4638      	mov	r0, r7
 801b6d8:	47c0      	blx	r8
 801b6da:	3001      	adds	r0, #1
 801b6dc:	d01e      	beq.n	801b71c <_printf_common+0xa4>
 801b6de:	6823      	ldr	r3, [r4, #0]
 801b6e0:	68e5      	ldr	r5, [r4, #12]
 801b6e2:	6832      	ldr	r2, [r6, #0]
 801b6e4:	f003 0306 	and.w	r3, r3, #6
 801b6e8:	2b04      	cmp	r3, #4
 801b6ea:	bf08      	it	eq
 801b6ec:	1aad      	subeq	r5, r5, r2
 801b6ee:	68a3      	ldr	r3, [r4, #8]
 801b6f0:	6922      	ldr	r2, [r4, #16]
 801b6f2:	bf0c      	ite	eq
 801b6f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b6f8:	2500      	movne	r5, #0
 801b6fa:	4293      	cmp	r3, r2
 801b6fc:	bfc4      	itt	gt
 801b6fe:	1a9b      	subgt	r3, r3, r2
 801b700:	18ed      	addgt	r5, r5, r3
 801b702:	2600      	movs	r6, #0
 801b704:	341a      	adds	r4, #26
 801b706:	42b5      	cmp	r5, r6
 801b708:	d11a      	bne.n	801b740 <_printf_common+0xc8>
 801b70a:	2000      	movs	r0, #0
 801b70c:	e008      	b.n	801b720 <_printf_common+0xa8>
 801b70e:	2301      	movs	r3, #1
 801b710:	4652      	mov	r2, sl
 801b712:	4649      	mov	r1, r9
 801b714:	4638      	mov	r0, r7
 801b716:	47c0      	blx	r8
 801b718:	3001      	adds	r0, #1
 801b71a:	d103      	bne.n	801b724 <_printf_common+0xac>
 801b71c:	f04f 30ff 	mov.w	r0, #4294967295
 801b720:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b724:	3501      	adds	r5, #1
 801b726:	e7c6      	b.n	801b6b6 <_printf_common+0x3e>
 801b728:	18e1      	adds	r1, r4, r3
 801b72a:	1c5a      	adds	r2, r3, #1
 801b72c:	2030      	movs	r0, #48	; 0x30
 801b72e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b732:	4422      	add	r2, r4
 801b734:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b738:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b73c:	3302      	adds	r3, #2
 801b73e:	e7c7      	b.n	801b6d0 <_printf_common+0x58>
 801b740:	2301      	movs	r3, #1
 801b742:	4622      	mov	r2, r4
 801b744:	4649      	mov	r1, r9
 801b746:	4638      	mov	r0, r7
 801b748:	47c0      	blx	r8
 801b74a:	3001      	adds	r0, #1
 801b74c:	d0e6      	beq.n	801b71c <_printf_common+0xa4>
 801b74e:	3601      	adds	r6, #1
 801b750:	e7d9      	b.n	801b706 <_printf_common+0x8e>
	...

0801b754 <_printf_i>:
 801b754:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b758:	460c      	mov	r4, r1
 801b75a:	4691      	mov	r9, r2
 801b75c:	7e27      	ldrb	r7, [r4, #24]
 801b75e:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b760:	2f78      	cmp	r7, #120	; 0x78
 801b762:	4680      	mov	r8, r0
 801b764:	469a      	mov	sl, r3
 801b766:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b76a:	d807      	bhi.n	801b77c <_printf_i+0x28>
 801b76c:	2f62      	cmp	r7, #98	; 0x62
 801b76e:	d80a      	bhi.n	801b786 <_printf_i+0x32>
 801b770:	2f00      	cmp	r7, #0
 801b772:	f000 80d8 	beq.w	801b926 <_printf_i+0x1d2>
 801b776:	2f58      	cmp	r7, #88	; 0x58
 801b778:	f000 80a3 	beq.w	801b8c2 <_printf_i+0x16e>
 801b77c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b780:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b784:	e03a      	b.n	801b7fc <_printf_i+0xa8>
 801b786:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b78a:	2b15      	cmp	r3, #21
 801b78c:	d8f6      	bhi.n	801b77c <_printf_i+0x28>
 801b78e:	a001      	add	r0, pc, #4	; (adr r0, 801b794 <_printf_i+0x40>)
 801b790:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b794:	0801b7ed 	.word	0x0801b7ed
 801b798:	0801b801 	.word	0x0801b801
 801b79c:	0801b77d 	.word	0x0801b77d
 801b7a0:	0801b77d 	.word	0x0801b77d
 801b7a4:	0801b77d 	.word	0x0801b77d
 801b7a8:	0801b77d 	.word	0x0801b77d
 801b7ac:	0801b801 	.word	0x0801b801
 801b7b0:	0801b77d 	.word	0x0801b77d
 801b7b4:	0801b77d 	.word	0x0801b77d
 801b7b8:	0801b77d 	.word	0x0801b77d
 801b7bc:	0801b77d 	.word	0x0801b77d
 801b7c0:	0801b90d 	.word	0x0801b90d
 801b7c4:	0801b831 	.word	0x0801b831
 801b7c8:	0801b8ef 	.word	0x0801b8ef
 801b7cc:	0801b77d 	.word	0x0801b77d
 801b7d0:	0801b77d 	.word	0x0801b77d
 801b7d4:	0801b92f 	.word	0x0801b92f
 801b7d8:	0801b77d 	.word	0x0801b77d
 801b7dc:	0801b831 	.word	0x0801b831
 801b7e0:	0801b77d 	.word	0x0801b77d
 801b7e4:	0801b77d 	.word	0x0801b77d
 801b7e8:	0801b8f7 	.word	0x0801b8f7
 801b7ec:	680b      	ldr	r3, [r1, #0]
 801b7ee:	1d1a      	adds	r2, r3, #4
 801b7f0:	681b      	ldr	r3, [r3, #0]
 801b7f2:	600a      	str	r2, [r1, #0]
 801b7f4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b7f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b7fc:	2301      	movs	r3, #1
 801b7fe:	e0a3      	b.n	801b948 <_printf_i+0x1f4>
 801b800:	6825      	ldr	r5, [r4, #0]
 801b802:	6808      	ldr	r0, [r1, #0]
 801b804:	062e      	lsls	r6, r5, #24
 801b806:	f100 0304 	add.w	r3, r0, #4
 801b80a:	d50a      	bpl.n	801b822 <_printf_i+0xce>
 801b80c:	6805      	ldr	r5, [r0, #0]
 801b80e:	600b      	str	r3, [r1, #0]
 801b810:	2d00      	cmp	r5, #0
 801b812:	da03      	bge.n	801b81c <_printf_i+0xc8>
 801b814:	232d      	movs	r3, #45	; 0x2d
 801b816:	426d      	negs	r5, r5
 801b818:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b81c:	485e      	ldr	r0, [pc, #376]	; (801b998 <_printf_i+0x244>)
 801b81e:	230a      	movs	r3, #10
 801b820:	e019      	b.n	801b856 <_printf_i+0x102>
 801b822:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b826:	6805      	ldr	r5, [r0, #0]
 801b828:	600b      	str	r3, [r1, #0]
 801b82a:	bf18      	it	ne
 801b82c:	b22d      	sxthne	r5, r5
 801b82e:	e7ef      	b.n	801b810 <_printf_i+0xbc>
 801b830:	680b      	ldr	r3, [r1, #0]
 801b832:	6825      	ldr	r5, [r4, #0]
 801b834:	1d18      	adds	r0, r3, #4
 801b836:	6008      	str	r0, [r1, #0]
 801b838:	0628      	lsls	r0, r5, #24
 801b83a:	d501      	bpl.n	801b840 <_printf_i+0xec>
 801b83c:	681d      	ldr	r5, [r3, #0]
 801b83e:	e002      	b.n	801b846 <_printf_i+0xf2>
 801b840:	0669      	lsls	r1, r5, #25
 801b842:	d5fb      	bpl.n	801b83c <_printf_i+0xe8>
 801b844:	881d      	ldrh	r5, [r3, #0]
 801b846:	4854      	ldr	r0, [pc, #336]	; (801b998 <_printf_i+0x244>)
 801b848:	2f6f      	cmp	r7, #111	; 0x6f
 801b84a:	bf0c      	ite	eq
 801b84c:	2308      	moveq	r3, #8
 801b84e:	230a      	movne	r3, #10
 801b850:	2100      	movs	r1, #0
 801b852:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b856:	6866      	ldr	r6, [r4, #4]
 801b858:	60a6      	str	r6, [r4, #8]
 801b85a:	2e00      	cmp	r6, #0
 801b85c:	bfa2      	ittt	ge
 801b85e:	6821      	ldrge	r1, [r4, #0]
 801b860:	f021 0104 	bicge.w	r1, r1, #4
 801b864:	6021      	strge	r1, [r4, #0]
 801b866:	b90d      	cbnz	r5, 801b86c <_printf_i+0x118>
 801b868:	2e00      	cmp	r6, #0
 801b86a:	d04d      	beq.n	801b908 <_printf_i+0x1b4>
 801b86c:	4616      	mov	r6, r2
 801b86e:	fbb5 f1f3 	udiv	r1, r5, r3
 801b872:	fb03 5711 	mls	r7, r3, r1, r5
 801b876:	5dc7      	ldrb	r7, [r0, r7]
 801b878:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b87c:	462f      	mov	r7, r5
 801b87e:	42bb      	cmp	r3, r7
 801b880:	460d      	mov	r5, r1
 801b882:	d9f4      	bls.n	801b86e <_printf_i+0x11a>
 801b884:	2b08      	cmp	r3, #8
 801b886:	d10b      	bne.n	801b8a0 <_printf_i+0x14c>
 801b888:	6823      	ldr	r3, [r4, #0]
 801b88a:	07df      	lsls	r7, r3, #31
 801b88c:	d508      	bpl.n	801b8a0 <_printf_i+0x14c>
 801b88e:	6923      	ldr	r3, [r4, #16]
 801b890:	6861      	ldr	r1, [r4, #4]
 801b892:	4299      	cmp	r1, r3
 801b894:	bfde      	ittt	le
 801b896:	2330      	movle	r3, #48	; 0x30
 801b898:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b89c:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b8a0:	1b92      	subs	r2, r2, r6
 801b8a2:	6122      	str	r2, [r4, #16]
 801b8a4:	f8cd a000 	str.w	sl, [sp]
 801b8a8:	464b      	mov	r3, r9
 801b8aa:	aa03      	add	r2, sp, #12
 801b8ac:	4621      	mov	r1, r4
 801b8ae:	4640      	mov	r0, r8
 801b8b0:	f7ff fee2 	bl	801b678 <_printf_common>
 801b8b4:	3001      	adds	r0, #1
 801b8b6:	d14c      	bne.n	801b952 <_printf_i+0x1fe>
 801b8b8:	f04f 30ff 	mov.w	r0, #4294967295
 801b8bc:	b004      	add	sp, #16
 801b8be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8c2:	4835      	ldr	r0, [pc, #212]	; (801b998 <_printf_i+0x244>)
 801b8c4:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b8c8:	6823      	ldr	r3, [r4, #0]
 801b8ca:	680e      	ldr	r6, [r1, #0]
 801b8cc:	061f      	lsls	r7, r3, #24
 801b8ce:	f856 5b04 	ldr.w	r5, [r6], #4
 801b8d2:	600e      	str	r6, [r1, #0]
 801b8d4:	d514      	bpl.n	801b900 <_printf_i+0x1ac>
 801b8d6:	07d9      	lsls	r1, r3, #31
 801b8d8:	bf44      	itt	mi
 801b8da:	f043 0320 	orrmi.w	r3, r3, #32
 801b8de:	6023      	strmi	r3, [r4, #0]
 801b8e0:	b91d      	cbnz	r5, 801b8ea <_printf_i+0x196>
 801b8e2:	6823      	ldr	r3, [r4, #0]
 801b8e4:	f023 0320 	bic.w	r3, r3, #32
 801b8e8:	6023      	str	r3, [r4, #0]
 801b8ea:	2310      	movs	r3, #16
 801b8ec:	e7b0      	b.n	801b850 <_printf_i+0xfc>
 801b8ee:	6823      	ldr	r3, [r4, #0]
 801b8f0:	f043 0320 	orr.w	r3, r3, #32
 801b8f4:	6023      	str	r3, [r4, #0]
 801b8f6:	2378      	movs	r3, #120	; 0x78
 801b8f8:	4828      	ldr	r0, [pc, #160]	; (801b99c <_printf_i+0x248>)
 801b8fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b8fe:	e7e3      	b.n	801b8c8 <_printf_i+0x174>
 801b900:	065e      	lsls	r6, r3, #25
 801b902:	bf48      	it	mi
 801b904:	b2ad      	uxthmi	r5, r5
 801b906:	e7e6      	b.n	801b8d6 <_printf_i+0x182>
 801b908:	4616      	mov	r6, r2
 801b90a:	e7bb      	b.n	801b884 <_printf_i+0x130>
 801b90c:	680b      	ldr	r3, [r1, #0]
 801b90e:	6826      	ldr	r6, [r4, #0]
 801b910:	6960      	ldr	r0, [r4, #20]
 801b912:	1d1d      	adds	r5, r3, #4
 801b914:	600d      	str	r5, [r1, #0]
 801b916:	0635      	lsls	r5, r6, #24
 801b918:	681b      	ldr	r3, [r3, #0]
 801b91a:	d501      	bpl.n	801b920 <_printf_i+0x1cc>
 801b91c:	6018      	str	r0, [r3, #0]
 801b91e:	e002      	b.n	801b926 <_printf_i+0x1d2>
 801b920:	0671      	lsls	r1, r6, #25
 801b922:	d5fb      	bpl.n	801b91c <_printf_i+0x1c8>
 801b924:	8018      	strh	r0, [r3, #0]
 801b926:	2300      	movs	r3, #0
 801b928:	6123      	str	r3, [r4, #16]
 801b92a:	4616      	mov	r6, r2
 801b92c:	e7ba      	b.n	801b8a4 <_printf_i+0x150>
 801b92e:	680b      	ldr	r3, [r1, #0]
 801b930:	1d1a      	adds	r2, r3, #4
 801b932:	600a      	str	r2, [r1, #0]
 801b934:	681e      	ldr	r6, [r3, #0]
 801b936:	6862      	ldr	r2, [r4, #4]
 801b938:	2100      	movs	r1, #0
 801b93a:	4630      	mov	r0, r6
 801b93c:	f7e4 fc70 	bl	8000220 <memchr>
 801b940:	b108      	cbz	r0, 801b946 <_printf_i+0x1f2>
 801b942:	1b80      	subs	r0, r0, r6
 801b944:	6060      	str	r0, [r4, #4]
 801b946:	6863      	ldr	r3, [r4, #4]
 801b948:	6123      	str	r3, [r4, #16]
 801b94a:	2300      	movs	r3, #0
 801b94c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b950:	e7a8      	b.n	801b8a4 <_printf_i+0x150>
 801b952:	6923      	ldr	r3, [r4, #16]
 801b954:	4632      	mov	r2, r6
 801b956:	4649      	mov	r1, r9
 801b958:	4640      	mov	r0, r8
 801b95a:	47d0      	blx	sl
 801b95c:	3001      	adds	r0, #1
 801b95e:	d0ab      	beq.n	801b8b8 <_printf_i+0x164>
 801b960:	6823      	ldr	r3, [r4, #0]
 801b962:	079b      	lsls	r3, r3, #30
 801b964:	d413      	bmi.n	801b98e <_printf_i+0x23a>
 801b966:	68e0      	ldr	r0, [r4, #12]
 801b968:	9b03      	ldr	r3, [sp, #12]
 801b96a:	4298      	cmp	r0, r3
 801b96c:	bfb8      	it	lt
 801b96e:	4618      	movlt	r0, r3
 801b970:	e7a4      	b.n	801b8bc <_printf_i+0x168>
 801b972:	2301      	movs	r3, #1
 801b974:	4632      	mov	r2, r6
 801b976:	4649      	mov	r1, r9
 801b978:	4640      	mov	r0, r8
 801b97a:	47d0      	blx	sl
 801b97c:	3001      	adds	r0, #1
 801b97e:	d09b      	beq.n	801b8b8 <_printf_i+0x164>
 801b980:	3501      	adds	r5, #1
 801b982:	68e3      	ldr	r3, [r4, #12]
 801b984:	9903      	ldr	r1, [sp, #12]
 801b986:	1a5b      	subs	r3, r3, r1
 801b988:	42ab      	cmp	r3, r5
 801b98a:	dcf2      	bgt.n	801b972 <_printf_i+0x21e>
 801b98c:	e7eb      	b.n	801b966 <_printf_i+0x212>
 801b98e:	2500      	movs	r5, #0
 801b990:	f104 0619 	add.w	r6, r4, #25
 801b994:	e7f5      	b.n	801b982 <_printf_i+0x22e>
 801b996:	bf00      	nop
 801b998:	0803ef89 	.word	0x0803ef89
 801b99c:	0803ef9a 	.word	0x0803ef9a

0801b9a0 <iprintf>:
 801b9a0:	b40f      	push	{r0, r1, r2, r3}
 801b9a2:	4b0a      	ldr	r3, [pc, #40]	; (801b9cc <iprintf+0x2c>)
 801b9a4:	b513      	push	{r0, r1, r4, lr}
 801b9a6:	681c      	ldr	r4, [r3, #0]
 801b9a8:	b124      	cbz	r4, 801b9b4 <iprintf+0x14>
 801b9aa:	69a3      	ldr	r3, [r4, #24]
 801b9ac:	b913      	cbnz	r3, 801b9b4 <iprintf+0x14>
 801b9ae:	4620      	mov	r0, r4
 801b9b0:	f000 fb92 	bl	801c0d8 <__sinit>
 801b9b4:	ab05      	add	r3, sp, #20
 801b9b6:	9a04      	ldr	r2, [sp, #16]
 801b9b8:	68a1      	ldr	r1, [r4, #8]
 801b9ba:	9301      	str	r3, [sp, #4]
 801b9bc:	4620      	mov	r0, r4
 801b9be:	f7ff fd2b 	bl	801b418 <_vfiprintf_r>
 801b9c2:	b002      	add	sp, #8
 801b9c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9c8:	b004      	add	sp, #16
 801b9ca:	4770      	bx	lr
 801b9cc:	20000518 	.word	0x20000518

0801b9d0 <_puts_r>:
 801b9d0:	b570      	push	{r4, r5, r6, lr}
 801b9d2:	460e      	mov	r6, r1
 801b9d4:	4605      	mov	r5, r0
 801b9d6:	b118      	cbz	r0, 801b9e0 <_puts_r+0x10>
 801b9d8:	6983      	ldr	r3, [r0, #24]
 801b9da:	b90b      	cbnz	r3, 801b9e0 <_puts_r+0x10>
 801b9dc:	f000 fb7c 	bl	801c0d8 <__sinit>
 801b9e0:	69ab      	ldr	r3, [r5, #24]
 801b9e2:	68ac      	ldr	r4, [r5, #8]
 801b9e4:	b913      	cbnz	r3, 801b9ec <_puts_r+0x1c>
 801b9e6:	4628      	mov	r0, r5
 801b9e8:	f000 fb76 	bl	801c0d8 <__sinit>
 801b9ec:	4b2c      	ldr	r3, [pc, #176]	; (801baa0 <_puts_r+0xd0>)
 801b9ee:	429c      	cmp	r4, r3
 801b9f0:	d120      	bne.n	801ba34 <_puts_r+0x64>
 801b9f2:	686c      	ldr	r4, [r5, #4]
 801b9f4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9f6:	07db      	lsls	r3, r3, #31
 801b9f8:	d405      	bmi.n	801ba06 <_puts_r+0x36>
 801b9fa:	89a3      	ldrh	r3, [r4, #12]
 801b9fc:	0598      	lsls	r0, r3, #22
 801b9fe:	d402      	bmi.n	801ba06 <_puts_r+0x36>
 801ba00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba02:	f7ff fbd4 	bl	801b1ae <__retarget_lock_acquire_recursive>
 801ba06:	89a3      	ldrh	r3, [r4, #12]
 801ba08:	0719      	lsls	r1, r3, #28
 801ba0a:	d51d      	bpl.n	801ba48 <_puts_r+0x78>
 801ba0c:	6923      	ldr	r3, [r4, #16]
 801ba0e:	b1db      	cbz	r3, 801ba48 <_puts_r+0x78>
 801ba10:	3e01      	subs	r6, #1
 801ba12:	68a3      	ldr	r3, [r4, #8]
 801ba14:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ba18:	3b01      	subs	r3, #1
 801ba1a:	60a3      	str	r3, [r4, #8]
 801ba1c:	bb39      	cbnz	r1, 801ba6e <_puts_r+0x9e>
 801ba1e:	2b00      	cmp	r3, #0
 801ba20:	da38      	bge.n	801ba94 <_puts_r+0xc4>
 801ba22:	4622      	mov	r2, r4
 801ba24:	210a      	movs	r1, #10
 801ba26:	4628      	mov	r0, r5
 801ba28:	f000 f8bc 	bl	801bba4 <__swbuf_r>
 801ba2c:	3001      	adds	r0, #1
 801ba2e:	d011      	beq.n	801ba54 <_puts_r+0x84>
 801ba30:	250a      	movs	r5, #10
 801ba32:	e011      	b.n	801ba58 <_puts_r+0x88>
 801ba34:	4b1b      	ldr	r3, [pc, #108]	; (801baa4 <_puts_r+0xd4>)
 801ba36:	429c      	cmp	r4, r3
 801ba38:	d101      	bne.n	801ba3e <_puts_r+0x6e>
 801ba3a:	68ac      	ldr	r4, [r5, #8]
 801ba3c:	e7da      	b.n	801b9f4 <_puts_r+0x24>
 801ba3e:	4b1a      	ldr	r3, [pc, #104]	; (801baa8 <_puts_r+0xd8>)
 801ba40:	429c      	cmp	r4, r3
 801ba42:	bf08      	it	eq
 801ba44:	68ec      	ldreq	r4, [r5, #12]
 801ba46:	e7d5      	b.n	801b9f4 <_puts_r+0x24>
 801ba48:	4621      	mov	r1, r4
 801ba4a:	4628      	mov	r0, r5
 801ba4c:	f000 f8fc 	bl	801bc48 <__swsetup_r>
 801ba50:	2800      	cmp	r0, #0
 801ba52:	d0dd      	beq.n	801ba10 <_puts_r+0x40>
 801ba54:	f04f 35ff 	mov.w	r5, #4294967295
 801ba58:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba5a:	07da      	lsls	r2, r3, #31
 801ba5c:	d405      	bmi.n	801ba6a <_puts_r+0x9a>
 801ba5e:	89a3      	ldrh	r3, [r4, #12]
 801ba60:	059b      	lsls	r3, r3, #22
 801ba62:	d402      	bmi.n	801ba6a <_puts_r+0x9a>
 801ba64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba66:	f7ff fba4 	bl	801b1b2 <__retarget_lock_release_recursive>
 801ba6a:	4628      	mov	r0, r5
 801ba6c:	bd70      	pop	{r4, r5, r6, pc}
 801ba6e:	2b00      	cmp	r3, #0
 801ba70:	da04      	bge.n	801ba7c <_puts_r+0xac>
 801ba72:	69a2      	ldr	r2, [r4, #24]
 801ba74:	429a      	cmp	r2, r3
 801ba76:	dc06      	bgt.n	801ba86 <_puts_r+0xb6>
 801ba78:	290a      	cmp	r1, #10
 801ba7a:	d004      	beq.n	801ba86 <_puts_r+0xb6>
 801ba7c:	6823      	ldr	r3, [r4, #0]
 801ba7e:	1c5a      	adds	r2, r3, #1
 801ba80:	6022      	str	r2, [r4, #0]
 801ba82:	7019      	strb	r1, [r3, #0]
 801ba84:	e7c5      	b.n	801ba12 <_puts_r+0x42>
 801ba86:	4622      	mov	r2, r4
 801ba88:	4628      	mov	r0, r5
 801ba8a:	f000 f88b 	bl	801bba4 <__swbuf_r>
 801ba8e:	3001      	adds	r0, #1
 801ba90:	d1bf      	bne.n	801ba12 <_puts_r+0x42>
 801ba92:	e7df      	b.n	801ba54 <_puts_r+0x84>
 801ba94:	6823      	ldr	r3, [r4, #0]
 801ba96:	250a      	movs	r5, #10
 801ba98:	1c5a      	adds	r2, r3, #1
 801ba9a:	6022      	str	r2, [r4, #0]
 801ba9c:	701d      	strb	r5, [r3, #0]
 801ba9e:	e7db      	b.n	801ba58 <_puts_r+0x88>
 801baa0:	0803efcc 	.word	0x0803efcc
 801baa4:	0803efec 	.word	0x0803efec
 801baa8:	0803efac 	.word	0x0803efac

0801baac <puts>:
 801baac:	4b02      	ldr	r3, [pc, #8]	; (801bab8 <puts+0xc>)
 801baae:	4601      	mov	r1, r0
 801bab0:	6818      	ldr	r0, [r3, #0]
 801bab2:	f7ff bf8d 	b.w	801b9d0 <_puts_r>
 801bab6:	bf00      	nop
 801bab8:	20000518 	.word	0x20000518

0801babc <_sbrk_r>:
 801babc:	b538      	push	{r3, r4, r5, lr}
 801babe:	4d06      	ldr	r5, [pc, #24]	; (801bad8 <_sbrk_r+0x1c>)
 801bac0:	2300      	movs	r3, #0
 801bac2:	4604      	mov	r4, r0
 801bac4:	4608      	mov	r0, r1
 801bac6:	602b      	str	r3, [r5, #0]
 801bac8:	f7ea ff68 	bl	800699c <_sbrk>
 801bacc:	1c43      	adds	r3, r0, #1
 801bace:	d102      	bne.n	801bad6 <_sbrk_r+0x1a>
 801bad0:	682b      	ldr	r3, [r5, #0]
 801bad2:	b103      	cbz	r3, 801bad6 <_sbrk_r+0x1a>
 801bad4:	6023      	str	r3, [r4, #0]
 801bad6:	bd38      	pop	{r3, r4, r5, pc}
 801bad8:	20007acc 	.word	0x20007acc

0801badc <_raise_r>:
 801badc:	291f      	cmp	r1, #31
 801bade:	b538      	push	{r3, r4, r5, lr}
 801bae0:	4604      	mov	r4, r0
 801bae2:	460d      	mov	r5, r1
 801bae4:	d904      	bls.n	801baf0 <_raise_r+0x14>
 801bae6:	2316      	movs	r3, #22
 801bae8:	6003      	str	r3, [r0, #0]
 801baea:	f04f 30ff 	mov.w	r0, #4294967295
 801baee:	bd38      	pop	{r3, r4, r5, pc}
 801baf0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801baf2:	b112      	cbz	r2, 801bafa <_raise_r+0x1e>
 801baf4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801baf8:	b94b      	cbnz	r3, 801bb0e <_raise_r+0x32>
 801bafa:	4620      	mov	r0, r4
 801bafc:	f000 f830 	bl	801bb60 <_getpid_r>
 801bb00:	462a      	mov	r2, r5
 801bb02:	4601      	mov	r1, r0
 801bb04:	4620      	mov	r0, r4
 801bb06:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801bb0a:	f000 b817 	b.w	801bb3c <_kill_r>
 801bb0e:	2b01      	cmp	r3, #1
 801bb10:	d00a      	beq.n	801bb28 <_raise_r+0x4c>
 801bb12:	1c59      	adds	r1, r3, #1
 801bb14:	d103      	bne.n	801bb1e <_raise_r+0x42>
 801bb16:	2316      	movs	r3, #22
 801bb18:	6003      	str	r3, [r0, #0]
 801bb1a:	2001      	movs	r0, #1
 801bb1c:	e7e7      	b.n	801baee <_raise_r+0x12>
 801bb1e:	2400      	movs	r4, #0
 801bb20:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bb24:	4628      	mov	r0, r5
 801bb26:	4798      	blx	r3
 801bb28:	2000      	movs	r0, #0
 801bb2a:	e7e0      	b.n	801baee <_raise_r+0x12>

0801bb2c <raise>:
 801bb2c:	4b02      	ldr	r3, [pc, #8]	; (801bb38 <raise+0xc>)
 801bb2e:	4601      	mov	r1, r0
 801bb30:	6818      	ldr	r0, [r3, #0]
 801bb32:	f7ff bfd3 	b.w	801badc <_raise_r>
 801bb36:	bf00      	nop
 801bb38:	20000518 	.word	0x20000518

0801bb3c <_kill_r>:
 801bb3c:	b538      	push	{r3, r4, r5, lr}
 801bb3e:	4d07      	ldr	r5, [pc, #28]	; (801bb5c <_kill_r+0x20>)
 801bb40:	2300      	movs	r3, #0
 801bb42:	4604      	mov	r4, r0
 801bb44:	4608      	mov	r0, r1
 801bb46:	4611      	mov	r1, r2
 801bb48:	602b      	str	r3, [r5, #0]
 801bb4a:	f7ea fe9f 	bl	800688c <_kill>
 801bb4e:	1c43      	adds	r3, r0, #1
 801bb50:	d102      	bne.n	801bb58 <_kill_r+0x1c>
 801bb52:	682b      	ldr	r3, [r5, #0]
 801bb54:	b103      	cbz	r3, 801bb58 <_kill_r+0x1c>
 801bb56:	6023      	str	r3, [r4, #0]
 801bb58:	bd38      	pop	{r3, r4, r5, pc}
 801bb5a:	bf00      	nop
 801bb5c:	20007acc 	.word	0x20007acc

0801bb60 <_getpid_r>:
 801bb60:	f7ea be8c 	b.w	800687c <_getpid>

0801bb64 <_vsiprintf_r>:
 801bb64:	b500      	push	{lr}
 801bb66:	b09b      	sub	sp, #108	; 0x6c
 801bb68:	9100      	str	r1, [sp, #0]
 801bb6a:	9104      	str	r1, [sp, #16]
 801bb6c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bb70:	9105      	str	r1, [sp, #20]
 801bb72:	9102      	str	r1, [sp, #8]
 801bb74:	4905      	ldr	r1, [pc, #20]	; (801bb8c <_vsiprintf_r+0x28>)
 801bb76:	9103      	str	r1, [sp, #12]
 801bb78:	4669      	mov	r1, sp
 801bb7a:	f000 fc3d 	bl	801c3f8 <_svfiprintf_r>
 801bb7e:	9b00      	ldr	r3, [sp, #0]
 801bb80:	2200      	movs	r2, #0
 801bb82:	701a      	strb	r2, [r3, #0]
 801bb84:	b01b      	add	sp, #108	; 0x6c
 801bb86:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb8a:	bf00      	nop
 801bb8c:	ffff0208 	.word	0xffff0208

0801bb90 <vsiprintf>:
 801bb90:	4613      	mov	r3, r2
 801bb92:	460a      	mov	r2, r1
 801bb94:	4601      	mov	r1, r0
 801bb96:	4802      	ldr	r0, [pc, #8]	; (801bba0 <vsiprintf+0x10>)
 801bb98:	6800      	ldr	r0, [r0, #0]
 801bb9a:	f7ff bfe3 	b.w	801bb64 <_vsiprintf_r>
 801bb9e:	bf00      	nop
 801bba0:	20000518 	.word	0x20000518

0801bba4 <__swbuf_r>:
 801bba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bba6:	460e      	mov	r6, r1
 801bba8:	4614      	mov	r4, r2
 801bbaa:	4605      	mov	r5, r0
 801bbac:	b118      	cbz	r0, 801bbb6 <__swbuf_r+0x12>
 801bbae:	6983      	ldr	r3, [r0, #24]
 801bbb0:	b90b      	cbnz	r3, 801bbb6 <__swbuf_r+0x12>
 801bbb2:	f000 fa91 	bl	801c0d8 <__sinit>
 801bbb6:	4b21      	ldr	r3, [pc, #132]	; (801bc3c <__swbuf_r+0x98>)
 801bbb8:	429c      	cmp	r4, r3
 801bbba:	d12b      	bne.n	801bc14 <__swbuf_r+0x70>
 801bbbc:	686c      	ldr	r4, [r5, #4]
 801bbbe:	69a3      	ldr	r3, [r4, #24]
 801bbc0:	60a3      	str	r3, [r4, #8]
 801bbc2:	89a3      	ldrh	r3, [r4, #12]
 801bbc4:	071a      	lsls	r2, r3, #28
 801bbc6:	d52f      	bpl.n	801bc28 <__swbuf_r+0x84>
 801bbc8:	6923      	ldr	r3, [r4, #16]
 801bbca:	b36b      	cbz	r3, 801bc28 <__swbuf_r+0x84>
 801bbcc:	6923      	ldr	r3, [r4, #16]
 801bbce:	6820      	ldr	r0, [r4, #0]
 801bbd0:	1ac0      	subs	r0, r0, r3
 801bbd2:	6963      	ldr	r3, [r4, #20]
 801bbd4:	b2f6      	uxtb	r6, r6
 801bbd6:	4283      	cmp	r3, r0
 801bbd8:	4637      	mov	r7, r6
 801bbda:	dc04      	bgt.n	801bbe6 <__swbuf_r+0x42>
 801bbdc:	4621      	mov	r1, r4
 801bbde:	4628      	mov	r0, r5
 801bbe0:	f000 f9e6 	bl	801bfb0 <_fflush_r>
 801bbe4:	bb30      	cbnz	r0, 801bc34 <__swbuf_r+0x90>
 801bbe6:	68a3      	ldr	r3, [r4, #8]
 801bbe8:	3b01      	subs	r3, #1
 801bbea:	60a3      	str	r3, [r4, #8]
 801bbec:	6823      	ldr	r3, [r4, #0]
 801bbee:	1c5a      	adds	r2, r3, #1
 801bbf0:	6022      	str	r2, [r4, #0]
 801bbf2:	701e      	strb	r6, [r3, #0]
 801bbf4:	6963      	ldr	r3, [r4, #20]
 801bbf6:	3001      	adds	r0, #1
 801bbf8:	4283      	cmp	r3, r0
 801bbfa:	d004      	beq.n	801bc06 <__swbuf_r+0x62>
 801bbfc:	89a3      	ldrh	r3, [r4, #12]
 801bbfe:	07db      	lsls	r3, r3, #31
 801bc00:	d506      	bpl.n	801bc10 <__swbuf_r+0x6c>
 801bc02:	2e0a      	cmp	r6, #10
 801bc04:	d104      	bne.n	801bc10 <__swbuf_r+0x6c>
 801bc06:	4621      	mov	r1, r4
 801bc08:	4628      	mov	r0, r5
 801bc0a:	f000 f9d1 	bl	801bfb0 <_fflush_r>
 801bc0e:	b988      	cbnz	r0, 801bc34 <__swbuf_r+0x90>
 801bc10:	4638      	mov	r0, r7
 801bc12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bc14:	4b0a      	ldr	r3, [pc, #40]	; (801bc40 <__swbuf_r+0x9c>)
 801bc16:	429c      	cmp	r4, r3
 801bc18:	d101      	bne.n	801bc1e <__swbuf_r+0x7a>
 801bc1a:	68ac      	ldr	r4, [r5, #8]
 801bc1c:	e7cf      	b.n	801bbbe <__swbuf_r+0x1a>
 801bc1e:	4b09      	ldr	r3, [pc, #36]	; (801bc44 <__swbuf_r+0xa0>)
 801bc20:	429c      	cmp	r4, r3
 801bc22:	bf08      	it	eq
 801bc24:	68ec      	ldreq	r4, [r5, #12]
 801bc26:	e7ca      	b.n	801bbbe <__swbuf_r+0x1a>
 801bc28:	4621      	mov	r1, r4
 801bc2a:	4628      	mov	r0, r5
 801bc2c:	f000 f80c 	bl	801bc48 <__swsetup_r>
 801bc30:	2800      	cmp	r0, #0
 801bc32:	d0cb      	beq.n	801bbcc <__swbuf_r+0x28>
 801bc34:	f04f 37ff 	mov.w	r7, #4294967295
 801bc38:	e7ea      	b.n	801bc10 <__swbuf_r+0x6c>
 801bc3a:	bf00      	nop
 801bc3c:	0803efcc 	.word	0x0803efcc
 801bc40:	0803efec 	.word	0x0803efec
 801bc44:	0803efac 	.word	0x0803efac

0801bc48 <__swsetup_r>:
 801bc48:	4b32      	ldr	r3, [pc, #200]	; (801bd14 <__swsetup_r+0xcc>)
 801bc4a:	b570      	push	{r4, r5, r6, lr}
 801bc4c:	681d      	ldr	r5, [r3, #0]
 801bc4e:	4606      	mov	r6, r0
 801bc50:	460c      	mov	r4, r1
 801bc52:	b125      	cbz	r5, 801bc5e <__swsetup_r+0x16>
 801bc54:	69ab      	ldr	r3, [r5, #24]
 801bc56:	b913      	cbnz	r3, 801bc5e <__swsetup_r+0x16>
 801bc58:	4628      	mov	r0, r5
 801bc5a:	f000 fa3d 	bl	801c0d8 <__sinit>
 801bc5e:	4b2e      	ldr	r3, [pc, #184]	; (801bd18 <__swsetup_r+0xd0>)
 801bc60:	429c      	cmp	r4, r3
 801bc62:	d10f      	bne.n	801bc84 <__swsetup_r+0x3c>
 801bc64:	686c      	ldr	r4, [r5, #4]
 801bc66:	89a3      	ldrh	r3, [r4, #12]
 801bc68:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc6c:	0719      	lsls	r1, r3, #28
 801bc6e:	d42c      	bmi.n	801bcca <__swsetup_r+0x82>
 801bc70:	06dd      	lsls	r5, r3, #27
 801bc72:	d411      	bmi.n	801bc98 <__swsetup_r+0x50>
 801bc74:	2309      	movs	r3, #9
 801bc76:	6033      	str	r3, [r6, #0]
 801bc78:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bc7c:	81a3      	strh	r3, [r4, #12]
 801bc7e:	f04f 30ff 	mov.w	r0, #4294967295
 801bc82:	e03e      	b.n	801bd02 <__swsetup_r+0xba>
 801bc84:	4b25      	ldr	r3, [pc, #148]	; (801bd1c <__swsetup_r+0xd4>)
 801bc86:	429c      	cmp	r4, r3
 801bc88:	d101      	bne.n	801bc8e <__swsetup_r+0x46>
 801bc8a:	68ac      	ldr	r4, [r5, #8]
 801bc8c:	e7eb      	b.n	801bc66 <__swsetup_r+0x1e>
 801bc8e:	4b24      	ldr	r3, [pc, #144]	; (801bd20 <__swsetup_r+0xd8>)
 801bc90:	429c      	cmp	r4, r3
 801bc92:	bf08      	it	eq
 801bc94:	68ec      	ldreq	r4, [r5, #12]
 801bc96:	e7e6      	b.n	801bc66 <__swsetup_r+0x1e>
 801bc98:	0758      	lsls	r0, r3, #29
 801bc9a:	d512      	bpl.n	801bcc2 <__swsetup_r+0x7a>
 801bc9c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc9e:	b141      	cbz	r1, 801bcb2 <__swsetup_r+0x6a>
 801bca0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bca4:	4299      	cmp	r1, r3
 801bca6:	d002      	beq.n	801bcae <__swsetup_r+0x66>
 801bca8:	4630      	mov	r0, r6
 801bcaa:	f7ff fae1 	bl	801b270 <_free_r>
 801bcae:	2300      	movs	r3, #0
 801bcb0:	6363      	str	r3, [r4, #52]	; 0x34
 801bcb2:	89a3      	ldrh	r3, [r4, #12]
 801bcb4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bcb8:	81a3      	strh	r3, [r4, #12]
 801bcba:	2300      	movs	r3, #0
 801bcbc:	6063      	str	r3, [r4, #4]
 801bcbe:	6923      	ldr	r3, [r4, #16]
 801bcc0:	6023      	str	r3, [r4, #0]
 801bcc2:	89a3      	ldrh	r3, [r4, #12]
 801bcc4:	f043 0308 	orr.w	r3, r3, #8
 801bcc8:	81a3      	strh	r3, [r4, #12]
 801bcca:	6923      	ldr	r3, [r4, #16]
 801bccc:	b94b      	cbnz	r3, 801bce2 <__swsetup_r+0x9a>
 801bcce:	89a3      	ldrh	r3, [r4, #12]
 801bcd0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bcd4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bcd8:	d003      	beq.n	801bce2 <__swsetup_r+0x9a>
 801bcda:	4621      	mov	r1, r4
 801bcdc:	4630      	mov	r0, r6
 801bcde:	f000 fabd 	bl	801c25c <__smakebuf_r>
 801bce2:	89a0      	ldrh	r0, [r4, #12]
 801bce4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bce8:	f010 0301 	ands.w	r3, r0, #1
 801bcec:	d00a      	beq.n	801bd04 <__swsetup_r+0xbc>
 801bcee:	2300      	movs	r3, #0
 801bcf0:	60a3      	str	r3, [r4, #8]
 801bcf2:	6963      	ldr	r3, [r4, #20]
 801bcf4:	425b      	negs	r3, r3
 801bcf6:	61a3      	str	r3, [r4, #24]
 801bcf8:	6923      	ldr	r3, [r4, #16]
 801bcfa:	b943      	cbnz	r3, 801bd0e <__swsetup_r+0xc6>
 801bcfc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bd00:	d1ba      	bne.n	801bc78 <__swsetup_r+0x30>
 801bd02:	bd70      	pop	{r4, r5, r6, pc}
 801bd04:	0781      	lsls	r1, r0, #30
 801bd06:	bf58      	it	pl
 801bd08:	6963      	ldrpl	r3, [r4, #20]
 801bd0a:	60a3      	str	r3, [r4, #8]
 801bd0c:	e7f4      	b.n	801bcf8 <__swsetup_r+0xb0>
 801bd0e:	2000      	movs	r0, #0
 801bd10:	e7f7      	b.n	801bd02 <__swsetup_r+0xba>
 801bd12:	bf00      	nop
 801bd14:	20000518 	.word	0x20000518
 801bd18:	0803efcc 	.word	0x0803efcc
 801bd1c:	0803efec 	.word	0x0803efec
 801bd20:	0803efac 	.word	0x0803efac

0801bd24 <__register_exitproc>:
 801bd24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd28:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801bde4 <__register_exitproc+0xc0>
 801bd2c:	4606      	mov	r6, r0
 801bd2e:	f8d8 0000 	ldr.w	r0, [r8]
 801bd32:	461f      	mov	r7, r3
 801bd34:	460d      	mov	r5, r1
 801bd36:	4691      	mov	r9, r2
 801bd38:	f7ff fa39 	bl	801b1ae <__retarget_lock_acquire_recursive>
 801bd3c:	4b25      	ldr	r3, [pc, #148]	; (801bdd4 <__register_exitproc+0xb0>)
 801bd3e:	681c      	ldr	r4, [r3, #0]
 801bd40:	b934      	cbnz	r4, 801bd50 <__register_exitproc+0x2c>
 801bd42:	4c25      	ldr	r4, [pc, #148]	; (801bdd8 <__register_exitproc+0xb4>)
 801bd44:	601c      	str	r4, [r3, #0]
 801bd46:	4b25      	ldr	r3, [pc, #148]	; (801bddc <__register_exitproc+0xb8>)
 801bd48:	b113      	cbz	r3, 801bd50 <__register_exitproc+0x2c>
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801bd50:	6863      	ldr	r3, [r4, #4]
 801bd52:	2b1f      	cmp	r3, #31
 801bd54:	dd07      	ble.n	801bd66 <__register_exitproc+0x42>
 801bd56:	f8d8 0000 	ldr.w	r0, [r8]
 801bd5a:	f7ff fa2a 	bl	801b1b2 <__retarget_lock_release_recursive>
 801bd5e:	f04f 30ff 	mov.w	r0, #4294967295
 801bd62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd66:	b34e      	cbz	r6, 801bdbc <__register_exitproc+0x98>
 801bd68:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801bd6c:	b988      	cbnz	r0, 801bd92 <__register_exitproc+0x6e>
 801bd6e:	4b1c      	ldr	r3, [pc, #112]	; (801bde0 <__register_exitproc+0xbc>)
 801bd70:	b923      	cbnz	r3, 801bd7c <__register_exitproc+0x58>
 801bd72:	f8d8 0000 	ldr.w	r0, [r8]
 801bd76:	f7ff fa1b 	bl	801b1b0 <__retarget_lock_release>
 801bd7a:	e7f0      	b.n	801bd5e <__register_exitproc+0x3a>
 801bd7c:	f44f 7084 	mov.w	r0, #264	; 0x108
 801bd80:	f7ff fa18 	bl	801b1b4 <malloc>
 801bd84:	2800      	cmp	r0, #0
 801bd86:	d0f4      	beq.n	801bd72 <__register_exitproc+0x4e>
 801bd88:	2300      	movs	r3, #0
 801bd8a:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801bd8e:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801bd92:	6863      	ldr	r3, [r4, #4]
 801bd94:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801bd98:	2201      	movs	r2, #1
 801bd9a:	409a      	lsls	r2, r3
 801bd9c:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801bda0:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801bda4:	4313      	orrs	r3, r2
 801bda6:	2e02      	cmp	r6, #2
 801bda8:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801bdac:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801bdb0:	bf02      	ittt	eq
 801bdb2:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801bdb6:	431a      	orreq	r2, r3
 801bdb8:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801bdbc:	6863      	ldr	r3, [r4, #4]
 801bdbe:	f8d8 0000 	ldr.w	r0, [r8]
 801bdc2:	1c5a      	adds	r2, r3, #1
 801bdc4:	3302      	adds	r3, #2
 801bdc6:	6062      	str	r2, [r4, #4]
 801bdc8:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801bdcc:	f7ff f9f1 	bl	801b1b2 <__retarget_lock_release_recursive>
 801bdd0:	2000      	movs	r0, #0
 801bdd2:	e7c6      	b.n	801bd62 <__register_exitproc+0x3e>
 801bdd4:	20007ab8 	.word	0x20007ab8
 801bdd8:	20007a2c 	.word	0x20007a2c
 801bddc:	00000000 	.word	0x00000000
 801bde0:	0801b1b5 	.word	0x0801b1b5
 801bde4:	2000057c 	.word	0x2000057c

0801bde8 <__call_exitprocs>:
 801bde8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdec:	4c2b      	ldr	r4, [pc, #172]	; (801be9c <__call_exitprocs+0xb4>)
 801bdee:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801bea0 <__call_exitprocs+0xb8>
 801bdf2:	4607      	mov	r7, r0
 801bdf4:	6820      	ldr	r0, [r4, #0]
 801bdf6:	460e      	mov	r6, r1
 801bdf8:	f7ff f9d9 	bl	801b1ae <__retarget_lock_acquire_recursive>
 801bdfc:	46a3      	mov	fp, r4
 801bdfe:	f8d8 5000 	ldr.w	r5, [r8]
 801be02:	b935      	cbnz	r5, 801be12 <__call_exitprocs+0x2a>
 801be04:	f8db 0000 	ldr.w	r0, [fp]
 801be08:	b003      	add	sp, #12
 801be0a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be0e:	f7ff b9d0 	b.w	801b1b2 <__retarget_lock_release_recursive>
 801be12:	686c      	ldr	r4, [r5, #4]
 801be14:	f8d5 a088 	ldr.w	sl, [r5, #136]	; 0x88
 801be18:	3c01      	subs	r4, #1
 801be1a:	f105 0908 	add.w	r9, r5, #8
 801be1e:	2c00      	cmp	r4, #0
 801be20:	dbf0      	blt.n	801be04 <__call_exitprocs+0x1c>
 801be22:	b156      	cbz	r6, 801be3a <__call_exitprocs+0x52>
 801be24:	f1ba 0f00 	cmp.w	sl, #0
 801be28:	d101      	bne.n	801be2e <__call_exitprocs+0x46>
 801be2a:	3c01      	subs	r4, #1
 801be2c:	e7f7      	b.n	801be1e <__call_exitprocs+0x36>
 801be2e:	f10a 0280 	add.w	r2, sl, #128	; 0x80
 801be32:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801be36:	42b2      	cmp	r2, r6
 801be38:	d1f7      	bne.n	801be2a <__call_exitprocs+0x42>
 801be3a:	6869      	ldr	r1, [r5, #4]
 801be3c:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 801be40:	3901      	subs	r1, #1
 801be42:	42a1      	cmp	r1, r4
 801be44:	bf1a      	itte	ne
 801be46:	2300      	movne	r3, #0
 801be48:	f849 3024 	strne.w	r3, [r9, r4, lsl #2]
 801be4c:	606c      	streq	r4, [r5, #4]
 801be4e:	2a00      	cmp	r2, #0
 801be50:	d0eb      	beq.n	801be2a <__call_exitprocs+0x42>
 801be52:	686b      	ldr	r3, [r5, #4]
 801be54:	9301      	str	r3, [sp, #4]
 801be56:	f1ba 0f00 	cmp.w	sl, #0
 801be5a:	d007      	beq.n	801be6c <__call_exitprocs+0x84>
 801be5c:	f8da 1100 	ldr.w	r1, [sl, #256]	; 0x100
 801be60:	2301      	movs	r3, #1
 801be62:	fa03 fc04 	lsl.w	ip, r3, r4
 801be66:	ea1c 0f01 	tst.w	ip, r1
 801be6a:	d109      	bne.n	801be80 <__call_exitprocs+0x98>
 801be6c:	4790      	blx	r2
 801be6e:	4b0c      	ldr	r3, [pc, #48]	; (801bea0 <__call_exitprocs+0xb8>)
 801be70:	6869      	ldr	r1, [r5, #4]
 801be72:	681a      	ldr	r2, [r3, #0]
 801be74:	9b01      	ldr	r3, [sp, #4]
 801be76:	4299      	cmp	r1, r3
 801be78:	d1c1      	bne.n	801bdfe <__call_exitprocs+0x16>
 801be7a:	4295      	cmp	r5, r2
 801be7c:	d0d5      	beq.n	801be2a <__call_exitprocs+0x42>
 801be7e:	e7be      	b.n	801bdfe <__call_exitprocs+0x16>
 801be80:	f8da 0104 	ldr.w	r0, [sl, #260]	; 0x104
 801be84:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801be88:	ea1c 0f00 	tst.w	ip, r0
 801be8c:	d102      	bne.n	801be94 <__call_exitprocs+0xac>
 801be8e:	4638      	mov	r0, r7
 801be90:	4790      	blx	r2
 801be92:	e7ec      	b.n	801be6e <__call_exitprocs+0x86>
 801be94:	4608      	mov	r0, r1
 801be96:	4790      	blx	r2
 801be98:	e7e9      	b.n	801be6e <__call_exitprocs+0x86>
 801be9a:	bf00      	nop
 801be9c:	2000057c 	.word	0x2000057c
 801bea0:	20007ab8 	.word	0x20007ab8

0801bea4 <__sflush_r>:
 801bea4:	898a      	ldrh	r2, [r1, #12]
 801bea6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801beaa:	4605      	mov	r5, r0
 801beac:	0710      	lsls	r0, r2, #28
 801beae:	460c      	mov	r4, r1
 801beb0:	d458      	bmi.n	801bf64 <__sflush_r+0xc0>
 801beb2:	684b      	ldr	r3, [r1, #4]
 801beb4:	2b00      	cmp	r3, #0
 801beb6:	dc05      	bgt.n	801bec4 <__sflush_r+0x20>
 801beb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801beba:	2b00      	cmp	r3, #0
 801bebc:	dc02      	bgt.n	801bec4 <__sflush_r+0x20>
 801bebe:	2000      	movs	r0, #0
 801bec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801bec4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bec6:	2e00      	cmp	r6, #0
 801bec8:	d0f9      	beq.n	801bebe <__sflush_r+0x1a>
 801beca:	2300      	movs	r3, #0
 801becc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801bed0:	682f      	ldr	r7, [r5, #0]
 801bed2:	602b      	str	r3, [r5, #0]
 801bed4:	d032      	beq.n	801bf3c <__sflush_r+0x98>
 801bed6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bed8:	89a3      	ldrh	r3, [r4, #12]
 801beda:	075a      	lsls	r2, r3, #29
 801bedc:	d505      	bpl.n	801beea <__sflush_r+0x46>
 801bede:	6863      	ldr	r3, [r4, #4]
 801bee0:	1ac0      	subs	r0, r0, r3
 801bee2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801bee4:	b10b      	cbz	r3, 801beea <__sflush_r+0x46>
 801bee6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bee8:	1ac0      	subs	r0, r0, r3
 801beea:	2300      	movs	r3, #0
 801beec:	4602      	mov	r2, r0
 801beee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bef0:	6a21      	ldr	r1, [r4, #32]
 801bef2:	4628      	mov	r0, r5
 801bef4:	47b0      	blx	r6
 801bef6:	1c43      	adds	r3, r0, #1
 801bef8:	89a3      	ldrh	r3, [r4, #12]
 801befa:	d106      	bne.n	801bf0a <__sflush_r+0x66>
 801befc:	6829      	ldr	r1, [r5, #0]
 801befe:	291d      	cmp	r1, #29
 801bf00:	d82c      	bhi.n	801bf5c <__sflush_r+0xb8>
 801bf02:	4a2a      	ldr	r2, [pc, #168]	; (801bfac <__sflush_r+0x108>)
 801bf04:	40ca      	lsrs	r2, r1
 801bf06:	07d6      	lsls	r6, r2, #31
 801bf08:	d528      	bpl.n	801bf5c <__sflush_r+0xb8>
 801bf0a:	2200      	movs	r2, #0
 801bf0c:	6062      	str	r2, [r4, #4]
 801bf0e:	04d9      	lsls	r1, r3, #19
 801bf10:	6922      	ldr	r2, [r4, #16]
 801bf12:	6022      	str	r2, [r4, #0]
 801bf14:	d504      	bpl.n	801bf20 <__sflush_r+0x7c>
 801bf16:	1c42      	adds	r2, r0, #1
 801bf18:	d101      	bne.n	801bf1e <__sflush_r+0x7a>
 801bf1a:	682b      	ldr	r3, [r5, #0]
 801bf1c:	b903      	cbnz	r3, 801bf20 <__sflush_r+0x7c>
 801bf1e:	6560      	str	r0, [r4, #84]	; 0x54
 801bf20:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bf22:	602f      	str	r7, [r5, #0]
 801bf24:	2900      	cmp	r1, #0
 801bf26:	d0ca      	beq.n	801bebe <__sflush_r+0x1a>
 801bf28:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bf2c:	4299      	cmp	r1, r3
 801bf2e:	d002      	beq.n	801bf36 <__sflush_r+0x92>
 801bf30:	4628      	mov	r0, r5
 801bf32:	f7ff f99d 	bl	801b270 <_free_r>
 801bf36:	2000      	movs	r0, #0
 801bf38:	6360      	str	r0, [r4, #52]	; 0x34
 801bf3a:	e7c1      	b.n	801bec0 <__sflush_r+0x1c>
 801bf3c:	6a21      	ldr	r1, [r4, #32]
 801bf3e:	2301      	movs	r3, #1
 801bf40:	4628      	mov	r0, r5
 801bf42:	47b0      	blx	r6
 801bf44:	1c41      	adds	r1, r0, #1
 801bf46:	d1c7      	bne.n	801bed8 <__sflush_r+0x34>
 801bf48:	682b      	ldr	r3, [r5, #0]
 801bf4a:	2b00      	cmp	r3, #0
 801bf4c:	d0c4      	beq.n	801bed8 <__sflush_r+0x34>
 801bf4e:	2b1d      	cmp	r3, #29
 801bf50:	d001      	beq.n	801bf56 <__sflush_r+0xb2>
 801bf52:	2b16      	cmp	r3, #22
 801bf54:	d101      	bne.n	801bf5a <__sflush_r+0xb6>
 801bf56:	602f      	str	r7, [r5, #0]
 801bf58:	e7b1      	b.n	801bebe <__sflush_r+0x1a>
 801bf5a:	89a3      	ldrh	r3, [r4, #12]
 801bf5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf60:	81a3      	strh	r3, [r4, #12]
 801bf62:	e7ad      	b.n	801bec0 <__sflush_r+0x1c>
 801bf64:	690f      	ldr	r7, [r1, #16]
 801bf66:	2f00      	cmp	r7, #0
 801bf68:	d0a9      	beq.n	801bebe <__sflush_r+0x1a>
 801bf6a:	0793      	lsls	r3, r2, #30
 801bf6c:	680e      	ldr	r6, [r1, #0]
 801bf6e:	bf08      	it	eq
 801bf70:	694b      	ldreq	r3, [r1, #20]
 801bf72:	600f      	str	r7, [r1, #0]
 801bf74:	bf18      	it	ne
 801bf76:	2300      	movne	r3, #0
 801bf78:	eba6 0807 	sub.w	r8, r6, r7
 801bf7c:	608b      	str	r3, [r1, #8]
 801bf7e:	f1b8 0f00 	cmp.w	r8, #0
 801bf82:	dd9c      	ble.n	801bebe <__sflush_r+0x1a>
 801bf84:	6a21      	ldr	r1, [r4, #32]
 801bf86:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bf88:	4643      	mov	r3, r8
 801bf8a:	463a      	mov	r2, r7
 801bf8c:	4628      	mov	r0, r5
 801bf8e:	47b0      	blx	r6
 801bf90:	2800      	cmp	r0, #0
 801bf92:	dc06      	bgt.n	801bfa2 <__sflush_r+0xfe>
 801bf94:	89a3      	ldrh	r3, [r4, #12]
 801bf96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf9a:	81a3      	strh	r3, [r4, #12]
 801bf9c:	f04f 30ff 	mov.w	r0, #4294967295
 801bfa0:	e78e      	b.n	801bec0 <__sflush_r+0x1c>
 801bfa2:	4407      	add	r7, r0
 801bfa4:	eba8 0800 	sub.w	r8, r8, r0
 801bfa8:	e7e9      	b.n	801bf7e <__sflush_r+0xda>
 801bfaa:	bf00      	nop
 801bfac:	20400001 	.word	0x20400001

0801bfb0 <_fflush_r>:
 801bfb0:	b538      	push	{r3, r4, r5, lr}
 801bfb2:	690b      	ldr	r3, [r1, #16]
 801bfb4:	4605      	mov	r5, r0
 801bfb6:	460c      	mov	r4, r1
 801bfb8:	b913      	cbnz	r3, 801bfc0 <_fflush_r+0x10>
 801bfba:	2500      	movs	r5, #0
 801bfbc:	4628      	mov	r0, r5
 801bfbe:	bd38      	pop	{r3, r4, r5, pc}
 801bfc0:	b118      	cbz	r0, 801bfca <_fflush_r+0x1a>
 801bfc2:	6983      	ldr	r3, [r0, #24]
 801bfc4:	b90b      	cbnz	r3, 801bfca <_fflush_r+0x1a>
 801bfc6:	f000 f887 	bl	801c0d8 <__sinit>
 801bfca:	4b14      	ldr	r3, [pc, #80]	; (801c01c <_fflush_r+0x6c>)
 801bfcc:	429c      	cmp	r4, r3
 801bfce:	d11b      	bne.n	801c008 <_fflush_r+0x58>
 801bfd0:	686c      	ldr	r4, [r5, #4]
 801bfd2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfd6:	2b00      	cmp	r3, #0
 801bfd8:	d0ef      	beq.n	801bfba <_fflush_r+0xa>
 801bfda:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bfdc:	07d0      	lsls	r0, r2, #31
 801bfde:	d404      	bmi.n	801bfea <_fflush_r+0x3a>
 801bfe0:	0599      	lsls	r1, r3, #22
 801bfe2:	d402      	bmi.n	801bfea <_fflush_r+0x3a>
 801bfe4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfe6:	f7ff f8e2 	bl	801b1ae <__retarget_lock_acquire_recursive>
 801bfea:	4628      	mov	r0, r5
 801bfec:	4621      	mov	r1, r4
 801bfee:	f7ff ff59 	bl	801bea4 <__sflush_r>
 801bff2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bff4:	07da      	lsls	r2, r3, #31
 801bff6:	4605      	mov	r5, r0
 801bff8:	d4e0      	bmi.n	801bfbc <_fflush_r+0xc>
 801bffa:	89a3      	ldrh	r3, [r4, #12]
 801bffc:	059b      	lsls	r3, r3, #22
 801bffe:	d4dd      	bmi.n	801bfbc <_fflush_r+0xc>
 801c000:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801c002:	f7ff f8d6 	bl	801b1b2 <__retarget_lock_release_recursive>
 801c006:	e7d9      	b.n	801bfbc <_fflush_r+0xc>
 801c008:	4b05      	ldr	r3, [pc, #20]	; (801c020 <_fflush_r+0x70>)
 801c00a:	429c      	cmp	r4, r3
 801c00c:	d101      	bne.n	801c012 <_fflush_r+0x62>
 801c00e:	68ac      	ldr	r4, [r5, #8]
 801c010:	e7df      	b.n	801bfd2 <_fflush_r+0x22>
 801c012:	4b04      	ldr	r3, [pc, #16]	; (801c024 <_fflush_r+0x74>)
 801c014:	429c      	cmp	r4, r3
 801c016:	bf08      	it	eq
 801c018:	68ec      	ldreq	r4, [r5, #12]
 801c01a:	e7da      	b.n	801bfd2 <_fflush_r+0x22>
 801c01c:	0803efcc 	.word	0x0803efcc
 801c020:	0803efec 	.word	0x0803efec
 801c024:	0803efac 	.word	0x0803efac

0801c028 <std>:
 801c028:	2300      	movs	r3, #0
 801c02a:	b510      	push	{r4, lr}
 801c02c:	4604      	mov	r4, r0
 801c02e:	e9c0 3300 	strd	r3, r3, [r0]
 801c032:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c036:	6083      	str	r3, [r0, #8]
 801c038:	8181      	strh	r1, [r0, #12]
 801c03a:	6643      	str	r3, [r0, #100]	; 0x64
 801c03c:	81c2      	strh	r2, [r0, #14]
 801c03e:	6183      	str	r3, [r0, #24]
 801c040:	4619      	mov	r1, r3
 801c042:	2208      	movs	r2, #8
 801c044:	305c      	adds	r0, #92	; 0x5c
 801c046:	f7ff f8fb 	bl	801b240 <memset>
 801c04a:	4b05      	ldr	r3, [pc, #20]	; (801c060 <std+0x38>)
 801c04c:	6263      	str	r3, [r4, #36]	; 0x24
 801c04e:	4b05      	ldr	r3, [pc, #20]	; (801c064 <std+0x3c>)
 801c050:	62a3      	str	r3, [r4, #40]	; 0x28
 801c052:	4b05      	ldr	r3, [pc, #20]	; (801c068 <std+0x40>)
 801c054:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c056:	4b05      	ldr	r3, [pc, #20]	; (801c06c <std+0x44>)
 801c058:	6224      	str	r4, [r4, #32]
 801c05a:	6323      	str	r3, [r4, #48]	; 0x30
 801c05c:	bd10      	pop	{r4, pc}
 801c05e:	bf00      	nop
 801c060:	0801c5f9 	.word	0x0801c5f9
 801c064:	0801c61b 	.word	0x0801c61b
 801c068:	0801c653 	.word	0x0801c653
 801c06c:	0801c677 	.word	0x0801c677

0801c070 <_cleanup_r>:
 801c070:	4901      	ldr	r1, [pc, #4]	; (801c078 <_cleanup_r+0x8>)
 801c072:	f000 b8af 	b.w	801c1d4 <_fwalk_reent>
 801c076:	bf00      	nop
 801c078:	0801bfb1 	.word	0x0801bfb1

0801c07c <__sfmoreglue>:
 801c07c:	b570      	push	{r4, r5, r6, lr}
 801c07e:	1e4a      	subs	r2, r1, #1
 801c080:	2568      	movs	r5, #104	; 0x68
 801c082:	4355      	muls	r5, r2
 801c084:	460e      	mov	r6, r1
 801c086:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c08a:	f7ff f941 	bl	801b310 <_malloc_r>
 801c08e:	4604      	mov	r4, r0
 801c090:	b140      	cbz	r0, 801c0a4 <__sfmoreglue+0x28>
 801c092:	2100      	movs	r1, #0
 801c094:	e9c0 1600 	strd	r1, r6, [r0]
 801c098:	300c      	adds	r0, #12
 801c09a:	60a0      	str	r0, [r4, #8]
 801c09c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c0a0:	f7ff f8ce 	bl	801b240 <memset>
 801c0a4:	4620      	mov	r0, r4
 801c0a6:	bd70      	pop	{r4, r5, r6, pc}

0801c0a8 <__sfp_lock_acquire>:
 801c0a8:	4801      	ldr	r0, [pc, #4]	; (801c0b0 <__sfp_lock_acquire+0x8>)
 801c0aa:	f7ff b880 	b.w	801b1ae <__retarget_lock_acquire_recursive>
 801c0ae:	bf00      	nop
 801c0b0:	20007ac4 	.word	0x20007ac4

0801c0b4 <__sfp_lock_release>:
 801c0b4:	4801      	ldr	r0, [pc, #4]	; (801c0bc <__sfp_lock_release+0x8>)
 801c0b6:	f7ff b87c 	b.w	801b1b2 <__retarget_lock_release_recursive>
 801c0ba:	bf00      	nop
 801c0bc:	20007ac4 	.word	0x20007ac4

0801c0c0 <__sinit_lock_acquire>:
 801c0c0:	4801      	ldr	r0, [pc, #4]	; (801c0c8 <__sinit_lock_acquire+0x8>)
 801c0c2:	f7ff b874 	b.w	801b1ae <__retarget_lock_acquire_recursive>
 801c0c6:	bf00      	nop
 801c0c8:	20007ac3 	.word	0x20007ac3

0801c0cc <__sinit_lock_release>:
 801c0cc:	4801      	ldr	r0, [pc, #4]	; (801c0d4 <__sinit_lock_release+0x8>)
 801c0ce:	f7ff b870 	b.w	801b1b2 <__retarget_lock_release_recursive>
 801c0d2:	bf00      	nop
 801c0d4:	20007ac3 	.word	0x20007ac3

0801c0d8 <__sinit>:
 801c0d8:	b510      	push	{r4, lr}
 801c0da:	4604      	mov	r4, r0
 801c0dc:	f7ff fff0 	bl	801c0c0 <__sinit_lock_acquire>
 801c0e0:	69a3      	ldr	r3, [r4, #24]
 801c0e2:	b11b      	cbz	r3, 801c0ec <__sinit+0x14>
 801c0e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0e8:	f7ff bff0 	b.w	801c0cc <__sinit_lock_release>
 801c0ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c0f0:	6523      	str	r3, [r4, #80]	; 0x50
 801c0f2:	4b13      	ldr	r3, [pc, #76]	; (801c140 <__sinit+0x68>)
 801c0f4:	4a13      	ldr	r2, [pc, #76]	; (801c144 <__sinit+0x6c>)
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	62a2      	str	r2, [r4, #40]	; 0x28
 801c0fa:	42a3      	cmp	r3, r4
 801c0fc:	bf04      	itt	eq
 801c0fe:	2301      	moveq	r3, #1
 801c100:	61a3      	streq	r3, [r4, #24]
 801c102:	4620      	mov	r0, r4
 801c104:	f000 f820 	bl	801c148 <__sfp>
 801c108:	6060      	str	r0, [r4, #4]
 801c10a:	4620      	mov	r0, r4
 801c10c:	f000 f81c 	bl	801c148 <__sfp>
 801c110:	60a0      	str	r0, [r4, #8]
 801c112:	4620      	mov	r0, r4
 801c114:	f000 f818 	bl	801c148 <__sfp>
 801c118:	2200      	movs	r2, #0
 801c11a:	60e0      	str	r0, [r4, #12]
 801c11c:	2104      	movs	r1, #4
 801c11e:	6860      	ldr	r0, [r4, #4]
 801c120:	f7ff ff82 	bl	801c028 <std>
 801c124:	68a0      	ldr	r0, [r4, #8]
 801c126:	2201      	movs	r2, #1
 801c128:	2109      	movs	r1, #9
 801c12a:	f7ff ff7d 	bl	801c028 <std>
 801c12e:	68e0      	ldr	r0, [r4, #12]
 801c130:	2202      	movs	r2, #2
 801c132:	2112      	movs	r1, #18
 801c134:	f7ff ff78 	bl	801c028 <std>
 801c138:	2301      	movs	r3, #1
 801c13a:	61a3      	str	r3, [r4, #24]
 801c13c:	e7d2      	b.n	801c0e4 <__sinit+0xc>
 801c13e:	bf00      	nop
 801c140:	0803ef74 	.word	0x0803ef74
 801c144:	0801c071 	.word	0x0801c071

0801c148 <__sfp>:
 801c148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c14a:	4607      	mov	r7, r0
 801c14c:	f7ff ffac 	bl	801c0a8 <__sfp_lock_acquire>
 801c150:	4b1e      	ldr	r3, [pc, #120]	; (801c1cc <__sfp+0x84>)
 801c152:	681e      	ldr	r6, [r3, #0]
 801c154:	69b3      	ldr	r3, [r6, #24]
 801c156:	b913      	cbnz	r3, 801c15e <__sfp+0x16>
 801c158:	4630      	mov	r0, r6
 801c15a:	f7ff ffbd 	bl	801c0d8 <__sinit>
 801c15e:	3648      	adds	r6, #72	; 0x48
 801c160:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c164:	3b01      	subs	r3, #1
 801c166:	d503      	bpl.n	801c170 <__sfp+0x28>
 801c168:	6833      	ldr	r3, [r6, #0]
 801c16a:	b30b      	cbz	r3, 801c1b0 <__sfp+0x68>
 801c16c:	6836      	ldr	r6, [r6, #0]
 801c16e:	e7f7      	b.n	801c160 <__sfp+0x18>
 801c170:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c174:	b9d5      	cbnz	r5, 801c1ac <__sfp+0x64>
 801c176:	4b16      	ldr	r3, [pc, #88]	; (801c1d0 <__sfp+0x88>)
 801c178:	60e3      	str	r3, [r4, #12]
 801c17a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c17e:	6665      	str	r5, [r4, #100]	; 0x64
 801c180:	f7ff f814 	bl	801b1ac <__retarget_lock_init_recursive>
 801c184:	f7ff ff96 	bl	801c0b4 <__sfp_lock_release>
 801c188:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c18c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c190:	6025      	str	r5, [r4, #0]
 801c192:	61a5      	str	r5, [r4, #24]
 801c194:	2208      	movs	r2, #8
 801c196:	4629      	mov	r1, r5
 801c198:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c19c:	f7ff f850 	bl	801b240 <memset>
 801c1a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c1a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c1a8:	4620      	mov	r0, r4
 801c1aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c1ac:	3468      	adds	r4, #104	; 0x68
 801c1ae:	e7d9      	b.n	801c164 <__sfp+0x1c>
 801c1b0:	2104      	movs	r1, #4
 801c1b2:	4638      	mov	r0, r7
 801c1b4:	f7ff ff62 	bl	801c07c <__sfmoreglue>
 801c1b8:	4604      	mov	r4, r0
 801c1ba:	6030      	str	r0, [r6, #0]
 801c1bc:	2800      	cmp	r0, #0
 801c1be:	d1d5      	bne.n	801c16c <__sfp+0x24>
 801c1c0:	f7ff ff78 	bl	801c0b4 <__sfp_lock_release>
 801c1c4:	230c      	movs	r3, #12
 801c1c6:	603b      	str	r3, [r7, #0]
 801c1c8:	e7ee      	b.n	801c1a8 <__sfp+0x60>
 801c1ca:	bf00      	nop
 801c1cc:	0803ef74 	.word	0x0803ef74
 801c1d0:	ffff0001 	.word	0xffff0001

0801c1d4 <_fwalk_reent>:
 801c1d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1d8:	4606      	mov	r6, r0
 801c1da:	4688      	mov	r8, r1
 801c1dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c1e0:	2700      	movs	r7, #0
 801c1e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c1e6:	f1b9 0901 	subs.w	r9, r9, #1
 801c1ea:	d505      	bpl.n	801c1f8 <_fwalk_reent+0x24>
 801c1ec:	6824      	ldr	r4, [r4, #0]
 801c1ee:	2c00      	cmp	r4, #0
 801c1f0:	d1f7      	bne.n	801c1e2 <_fwalk_reent+0xe>
 801c1f2:	4638      	mov	r0, r7
 801c1f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1f8:	89ab      	ldrh	r3, [r5, #12]
 801c1fa:	2b01      	cmp	r3, #1
 801c1fc:	d907      	bls.n	801c20e <_fwalk_reent+0x3a>
 801c1fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c202:	3301      	adds	r3, #1
 801c204:	d003      	beq.n	801c20e <_fwalk_reent+0x3a>
 801c206:	4629      	mov	r1, r5
 801c208:	4630      	mov	r0, r6
 801c20a:	47c0      	blx	r8
 801c20c:	4307      	orrs	r7, r0
 801c20e:	3568      	adds	r5, #104	; 0x68
 801c210:	e7e9      	b.n	801c1e6 <_fwalk_reent+0x12>

0801c212 <__swhatbuf_r>:
 801c212:	b570      	push	{r4, r5, r6, lr}
 801c214:	460e      	mov	r6, r1
 801c216:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c21a:	2900      	cmp	r1, #0
 801c21c:	b096      	sub	sp, #88	; 0x58
 801c21e:	4614      	mov	r4, r2
 801c220:	461d      	mov	r5, r3
 801c222:	da07      	bge.n	801c234 <__swhatbuf_r+0x22>
 801c224:	2300      	movs	r3, #0
 801c226:	602b      	str	r3, [r5, #0]
 801c228:	89b3      	ldrh	r3, [r6, #12]
 801c22a:	061a      	lsls	r2, r3, #24
 801c22c:	d410      	bmi.n	801c250 <__swhatbuf_r+0x3e>
 801c22e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c232:	e00e      	b.n	801c252 <__swhatbuf_r+0x40>
 801c234:	466a      	mov	r2, sp
 801c236:	f000 fa45 	bl	801c6c4 <_fstat_r>
 801c23a:	2800      	cmp	r0, #0
 801c23c:	dbf2      	blt.n	801c224 <__swhatbuf_r+0x12>
 801c23e:	9a01      	ldr	r2, [sp, #4]
 801c240:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c244:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c248:	425a      	negs	r2, r3
 801c24a:	415a      	adcs	r2, r3
 801c24c:	602a      	str	r2, [r5, #0]
 801c24e:	e7ee      	b.n	801c22e <__swhatbuf_r+0x1c>
 801c250:	2340      	movs	r3, #64	; 0x40
 801c252:	2000      	movs	r0, #0
 801c254:	6023      	str	r3, [r4, #0]
 801c256:	b016      	add	sp, #88	; 0x58
 801c258:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c25c <__smakebuf_r>:
 801c25c:	898b      	ldrh	r3, [r1, #12]
 801c25e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c260:	079d      	lsls	r5, r3, #30
 801c262:	4606      	mov	r6, r0
 801c264:	460c      	mov	r4, r1
 801c266:	d507      	bpl.n	801c278 <__smakebuf_r+0x1c>
 801c268:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c26c:	6023      	str	r3, [r4, #0]
 801c26e:	6123      	str	r3, [r4, #16]
 801c270:	2301      	movs	r3, #1
 801c272:	6163      	str	r3, [r4, #20]
 801c274:	b002      	add	sp, #8
 801c276:	bd70      	pop	{r4, r5, r6, pc}
 801c278:	ab01      	add	r3, sp, #4
 801c27a:	466a      	mov	r2, sp
 801c27c:	f7ff ffc9 	bl	801c212 <__swhatbuf_r>
 801c280:	9900      	ldr	r1, [sp, #0]
 801c282:	4605      	mov	r5, r0
 801c284:	4630      	mov	r0, r6
 801c286:	f7ff f843 	bl	801b310 <_malloc_r>
 801c28a:	b948      	cbnz	r0, 801c2a0 <__smakebuf_r+0x44>
 801c28c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c290:	059a      	lsls	r2, r3, #22
 801c292:	d4ef      	bmi.n	801c274 <__smakebuf_r+0x18>
 801c294:	f023 0303 	bic.w	r3, r3, #3
 801c298:	f043 0302 	orr.w	r3, r3, #2
 801c29c:	81a3      	strh	r3, [r4, #12]
 801c29e:	e7e3      	b.n	801c268 <__smakebuf_r+0xc>
 801c2a0:	4b0d      	ldr	r3, [pc, #52]	; (801c2d8 <__smakebuf_r+0x7c>)
 801c2a2:	62b3      	str	r3, [r6, #40]	; 0x28
 801c2a4:	89a3      	ldrh	r3, [r4, #12]
 801c2a6:	6020      	str	r0, [r4, #0]
 801c2a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c2ac:	81a3      	strh	r3, [r4, #12]
 801c2ae:	9b00      	ldr	r3, [sp, #0]
 801c2b0:	6163      	str	r3, [r4, #20]
 801c2b2:	9b01      	ldr	r3, [sp, #4]
 801c2b4:	6120      	str	r0, [r4, #16]
 801c2b6:	b15b      	cbz	r3, 801c2d0 <__smakebuf_r+0x74>
 801c2b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2bc:	4630      	mov	r0, r6
 801c2be:	f000 fa13 	bl	801c6e8 <_isatty_r>
 801c2c2:	b128      	cbz	r0, 801c2d0 <__smakebuf_r+0x74>
 801c2c4:	89a3      	ldrh	r3, [r4, #12]
 801c2c6:	f023 0303 	bic.w	r3, r3, #3
 801c2ca:	f043 0301 	orr.w	r3, r3, #1
 801c2ce:	81a3      	strh	r3, [r4, #12]
 801c2d0:	89a0      	ldrh	r0, [r4, #12]
 801c2d2:	4305      	orrs	r5, r0
 801c2d4:	81a5      	strh	r5, [r4, #12]
 801c2d6:	e7cd      	b.n	801c274 <__smakebuf_r+0x18>
 801c2d8:	0801c071 	.word	0x0801c071

0801c2dc <__malloc_lock>:
 801c2dc:	4801      	ldr	r0, [pc, #4]	; (801c2e4 <__malloc_lock+0x8>)
 801c2de:	f7fe bf66 	b.w	801b1ae <__retarget_lock_acquire_recursive>
 801c2e2:	bf00      	nop
 801c2e4:	20007ac0 	.word	0x20007ac0

0801c2e8 <__malloc_unlock>:
 801c2e8:	4801      	ldr	r0, [pc, #4]	; (801c2f0 <__malloc_unlock+0x8>)
 801c2ea:	f7fe bf62 	b.w	801b1b2 <__retarget_lock_release_recursive>
 801c2ee:	bf00      	nop
 801c2f0:	20007ac0 	.word	0x20007ac0

0801c2f4 <_realloc_r>:
 801c2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2f6:	4607      	mov	r7, r0
 801c2f8:	4614      	mov	r4, r2
 801c2fa:	460e      	mov	r6, r1
 801c2fc:	b921      	cbnz	r1, 801c308 <_realloc_r+0x14>
 801c2fe:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c302:	4611      	mov	r1, r2
 801c304:	f7ff b804 	b.w	801b310 <_malloc_r>
 801c308:	b922      	cbnz	r2, 801c314 <_realloc_r+0x20>
 801c30a:	f7fe ffb1 	bl	801b270 <_free_r>
 801c30e:	4625      	mov	r5, r4
 801c310:	4628      	mov	r0, r5
 801c312:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c314:	f000 fa0a 	bl	801c72c <_malloc_usable_size_r>
 801c318:	42a0      	cmp	r0, r4
 801c31a:	d20f      	bcs.n	801c33c <_realloc_r+0x48>
 801c31c:	4621      	mov	r1, r4
 801c31e:	4638      	mov	r0, r7
 801c320:	f7fe fff6 	bl	801b310 <_malloc_r>
 801c324:	4605      	mov	r5, r0
 801c326:	2800      	cmp	r0, #0
 801c328:	d0f2      	beq.n	801c310 <_realloc_r+0x1c>
 801c32a:	4631      	mov	r1, r6
 801c32c:	4622      	mov	r2, r4
 801c32e:	f7fe ff5f 	bl	801b1f0 <memcpy>
 801c332:	4631      	mov	r1, r6
 801c334:	4638      	mov	r0, r7
 801c336:	f7fe ff9b 	bl	801b270 <_free_r>
 801c33a:	e7e9      	b.n	801c310 <_realloc_r+0x1c>
 801c33c:	4635      	mov	r5, r6
 801c33e:	e7e7      	b.n	801c310 <_realloc_r+0x1c>

0801c340 <__ssputs_r>:
 801c340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c344:	688e      	ldr	r6, [r1, #8]
 801c346:	429e      	cmp	r6, r3
 801c348:	4682      	mov	sl, r0
 801c34a:	460c      	mov	r4, r1
 801c34c:	4690      	mov	r8, r2
 801c34e:	461f      	mov	r7, r3
 801c350:	d838      	bhi.n	801c3c4 <__ssputs_r+0x84>
 801c352:	898a      	ldrh	r2, [r1, #12]
 801c354:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c358:	d032      	beq.n	801c3c0 <__ssputs_r+0x80>
 801c35a:	6825      	ldr	r5, [r4, #0]
 801c35c:	6909      	ldr	r1, [r1, #16]
 801c35e:	eba5 0901 	sub.w	r9, r5, r1
 801c362:	6965      	ldr	r5, [r4, #20]
 801c364:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c36c:	3301      	adds	r3, #1
 801c36e:	444b      	add	r3, r9
 801c370:	106d      	asrs	r5, r5, #1
 801c372:	429d      	cmp	r5, r3
 801c374:	bf38      	it	cc
 801c376:	461d      	movcc	r5, r3
 801c378:	0553      	lsls	r3, r2, #21
 801c37a:	d531      	bpl.n	801c3e0 <__ssputs_r+0xa0>
 801c37c:	4629      	mov	r1, r5
 801c37e:	f7fe ffc7 	bl	801b310 <_malloc_r>
 801c382:	4606      	mov	r6, r0
 801c384:	b950      	cbnz	r0, 801c39c <__ssputs_r+0x5c>
 801c386:	230c      	movs	r3, #12
 801c388:	f8ca 3000 	str.w	r3, [sl]
 801c38c:	89a3      	ldrh	r3, [r4, #12]
 801c38e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c392:	81a3      	strh	r3, [r4, #12]
 801c394:	f04f 30ff 	mov.w	r0, #4294967295
 801c398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c39c:	6921      	ldr	r1, [r4, #16]
 801c39e:	464a      	mov	r2, r9
 801c3a0:	f7fe ff26 	bl	801b1f0 <memcpy>
 801c3a4:	89a3      	ldrh	r3, [r4, #12]
 801c3a6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c3aa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c3ae:	81a3      	strh	r3, [r4, #12]
 801c3b0:	6126      	str	r6, [r4, #16]
 801c3b2:	6165      	str	r5, [r4, #20]
 801c3b4:	444e      	add	r6, r9
 801c3b6:	eba5 0509 	sub.w	r5, r5, r9
 801c3ba:	6026      	str	r6, [r4, #0]
 801c3bc:	60a5      	str	r5, [r4, #8]
 801c3be:	463e      	mov	r6, r7
 801c3c0:	42be      	cmp	r6, r7
 801c3c2:	d900      	bls.n	801c3c6 <__ssputs_r+0x86>
 801c3c4:	463e      	mov	r6, r7
 801c3c6:	4632      	mov	r2, r6
 801c3c8:	6820      	ldr	r0, [r4, #0]
 801c3ca:	4641      	mov	r1, r8
 801c3cc:	f7fe ff1e 	bl	801b20c <memmove>
 801c3d0:	68a3      	ldr	r3, [r4, #8]
 801c3d2:	6822      	ldr	r2, [r4, #0]
 801c3d4:	1b9b      	subs	r3, r3, r6
 801c3d6:	4432      	add	r2, r6
 801c3d8:	60a3      	str	r3, [r4, #8]
 801c3da:	6022      	str	r2, [r4, #0]
 801c3dc:	2000      	movs	r0, #0
 801c3de:	e7db      	b.n	801c398 <__ssputs_r+0x58>
 801c3e0:	462a      	mov	r2, r5
 801c3e2:	f7ff ff87 	bl	801c2f4 <_realloc_r>
 801c3e6:	4606      	mov	r6, r0
 801c3e8:	2800      	cmp	r0, #0
 801c3ea:	d1e1      	bne.n	801c3b0 <__ssputs_r+0x70>
 801c3ec:	6921      	ldr	r1, [r4, #16]
 801c3ee:	4650      	mov	r0, sl
 801c3f0:	f7fe ff3e 	bl	801b270 <_free_r>
 801c3f4:	e7c7      	b.n	801c386 <__ssputs_r+0x46>
	...

0801c3f8 <_svfiprintf_r>:
 801c3f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3fc:	4698      	mov	r8, r3
 801c3fe:	898b      	ldrh	r3, [r1, #12]
 801c400:	061b      	lsls	r3, r3, #24
 801c402:	b09d      	sub	sp, #116	; 0x74
 801c404:	4607      	mov	r7, r0
 801c406:	460d      	mov	r5, r1
 801c408:	4614      	mov	r4, r2
 801c40a:	d50e      	bpl.n	801c42a <_svfiprintf_r+0x32>
 801c40c:	690b      	ldr	r3, [r1, #16]
 801c40e:	b963      	cbnz	r3, 801c42a <_svfiprintf_r+0x32>
 801c410:	2140      	movs	r1, #64	; 0x40
 801c412:	f7fe ff7d 	bl	801b310 <_malloc_r>
 801c416:	6028      	str	r0, [r5, #0]
 801c418:	6128      	str	r0, [r5, #16]
 801c41a:	b920      	cbnz	r0, 801c426 <_svfiprintf_r+0x2e>
 801c41c:	230c      	movs	r3, #12
 801c41e:	603b      	str	r3, [r7, #0]
 801c420:	f04f 30ff 	mov.w	r0, #4294967295
 801c424:	e0d1      	b.n	801c5ca <_svfiprintf_r+0x1d2>
 801c426:	2340      	movs	r3, #64	; 0x40
 801c428:	616b      	str	r3, [r5, #20]
 801c42a:	2300      	movs	r3, #0
 801c42c:	9309      	str	r3, [sp, #36]	; 0x24
 801c42e:	2320      	movs	r3, #32
 801c430:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c434:	f8cd 800c 	str.w	r8, [sp, #12]
 801c438:	2330      	movs	r3, #48	; 0x30
 801c43a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c5e4 <_svfiprintf_r+0x1ec>
 801c43e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c442:	f04f 0901 	mov.w	r9, #1
 801c446:	4623      	mov	r3, r4
 801c448:	469a      	mov	sl, r3
 801c44a:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c44e:	b10a      	cbz	r2, 801c454 <_svfiprintf_r+0x5c>
 801c450:	2a25      	cmp	r2, #37	; 0x25
 801c452:	d1f9      	bne.n	801c448 <_svfiprintf_r+0x50>
 801c454:	ebba 0b04 	subs.w	fp, sl, r4
 801c458:	d00b      	beq.n	801c472 <_svfiprintf_r+0x7a>
 801c45a:	465b      	mov	r3, fp
 801c45c:	4622      	mov	r2, r4
 801c45e:	4629      	mov	r1, r5
 801c460:	4638      	mov	r0, r7
 801c462:	f7ff ff6d 	bl	801c340 <__ssputs_r>
 801c466:	3001      	adds	r0, #1
 801c468:	f000 80aa 	beq.w	801c5c0 <_svfiprintf_r+0x1c8>
 801c46c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c46e:	445a      	add	r2, fp
 801c470:	9209      	str	r2, [sp, #36]	; 0x24
 801c472:	f89a 3000 	ldrb.w	r3, [sl]
 801c476:	2b00      	cmp	r3, #0
 801c478:	f000 80a2 	beq.w	801c5c0 <_svfiprintf_r+0x1c8>
 801c47c:	2300      	movs	r3, #0
 801c47e:	f04f 32ff 	mov.w	r2, #4294967295
 801c482:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c486:	f10a 0a01 	add.w	sl, sl, #1
 801c48a:	9304      	str	r3, [sp, #16]
 801c48c:	9307      	str	r3, [sp, #28]
 801c48e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c492:	931a      	str	r3, [sp, #104]	; 0x68
 801c494:	4654      	mov	r4, sl
 801c496:	2205      	movs	r2, #5
 801c498:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c49c:	4851      	ldr	r0, [pc, #324]	; (801c5e4 <_svfiprintf_r+0x1ec>)
 801c49e:	f7e3 febf 	bl	8000220 <memchr>
 801c4a2:	9a04      	ldr	r2, [sp, #16]
 801c4a4:	b9d8      	cbnz	r0, 801c4de <_svfiprintf_r+0xe6>
 801c4a6:	06d0      	lsls	r0, r2, #27
 801c4a8:	bf44      	itt	mi
 801c4aa:	2320      	movmi	r3, #32
 801c4ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c4b0:	0711      	lsls	r1, r2, #28
 801c4b2:	bf44      	itt	mi
 801c4b4:	232b      	movmi	r3, #43	; 0x2b
 801c4b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c4ba:	f89a 3000 	ldrb.w	r3, [sl]
 801c4be:	2b2a      	cmp	r3, #42	; 0x2a
 801c4c0:	d015      	beq.n	801c4ee <_svfiprintf_r+0xf6>
 801c4c2:	9a07      	ldr	r2, [sp, #28]
 801c4c4:	4654      	mov	r4, sl
 801c4c6:	2000      	movs	r0, #0
 801c4c8:	f04f 0c0a 	mov.w	ip, #10
 801c4cc:	4621      	mov	r1, r4
 801c4ce:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c4d2:	3b30      	subs	r3, #48	; 0x30
 801c4d4:	2b09      	cmp	r3, #9
 801c4d6:	d94e      	bls.n	801c576 <_svfiprintf_r+0x17e>
 801c4d8:	b1b0      	cbz	r0, 801c508 <_svfiprintf_r+0x110>
 801c4da:	9207      	str	r2, [sp, #28]
 801c4dc:	e014      	b.n	801c508 <_svfiprintf_r+0x110>
 801c4de:	eba0 0308 	sub.w	r3, r0, r8
 801c4e2:	fa09 f303 	lsl.w	r3, r9, r3
 801c4e6:	4313      	orrs	r3, r2
 801c4e8:	9304      	str	r3, [sp, #16]
 801c4ea:	46a2      	mov	sl, r4
 801c4ec:	e7d2      	b.n	801c494 <_svfiprintf_r+0x9c>
 801c4ee:	9b03      	ldr	r3, [sp, #12]
 801c4f0:	1d19      	adds	r1, r3, #4
 801c4f2:	681b      	ldr	r3, [r3, #0]
 801c4f4:	9103      	str	r1, [sp, #12]
 801c4f6:	2b00      	cmp	r3, #0
 801c4f8:	bfbb      	ittet	lt
 801c4fa:	425b      	neglt	r3, r3
 801c4fc:	f042 0202 	orrlt.w	r2, r2, #2
 801c500:	9307      	strge	r3, [sp, #28]
 801c502:	9307      	strlt	r3, [sp, #28]
 801c504:	bfb8      	it	lt
 801c506:	9204      	strlt	r2, [sp, #16]
 801c508:	7823      	ldrb	r3, [r4, #0]
 801c50a:	2b2e      	cmp	r3, #46	; 0x2e
 801c50c:	d10c      	bne.n	801c528 <_svfiprintf_r+0x130>
 801c50e:	7863      	ldrb	r3, [r4, #1]
 801c510:	2b2a      	cmp	r3, #42	; 0x2a
 801c512:	d135      	bne.n	801c580 <_svfiprintf_r+0x188>
 801c514:	9b03      	ldr	r3, [sp, #12]
 801c516:	1d1a      	adds	r2, r3, #4
 801c518:	681b      	ldr	r3, [r3, #0]
 801c51a:	9203      	str	r2, [sp, #12]
 801c51c:	2b00      	cmp	r3, #0
 801c51e:	bfb8      	it	lt
 801c520:	f04f 33ff 	movlt.w	r3, #4294967295
 801c524:	3402      	adds	r4, #2
 801c526:	9305      	str	r3, [sp, #20]
 801c528:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c5f4 <_svfiprintf_r+0x1fc>
 801c52c:	7821      	ldrb	r1, [r4, #0]
 801c52e:	2203      	movs	r2, #3
 801c530:	4650      	mov	r0, sl
 801c532:	f7e3 fe75 	bl	8000220 <memchr>
 801c536:	b140      	cbz	r0, 801c54a <_svfiprintf_r+0x152>
 801c538:	2340      	movs	r3, #64	; 0x40
 801c53a:	eba0 000a 	sub.w	r0, r0, sl
 801c53e:	fa03 f000 	lsl.w	r0, r3, r0
 801c542:	9b04      	ldr	r3, [sp, #16]
 801c544:	4303      	orrs	r3, r0
 801c546:	3401      	adds	r4, #1
 801c548:	9304      	str	r3, [sp, #16]
 801c54a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c54e:	4826      	ldr	r0, [pc, #152]	; (801c5e8 <_svfiprintf_r+0x1f0>)
 801c550:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c554:	2206      	movs	r2, #6
 801c556:	f7e3 fe63 	bl	8000220 <memchr>
 801c55a:	2800      	cmp	r0, #0
 801c55c:	d038      	beq.n	801c5d0 <_svfiprintf_r+0x1d8>
 801c55e:	4b23      	ldr	r3, [pc, #140]	; (801c5ec <_svfiprintf_r+0x1f4>)
 801c560:	bb1b      	cbnz	r3, 801c5aa <_svfiprintf_r+0x1b2>
 801c562:	9b03      	ldr	r3, [sp, #12]
 801c564:	3307      	adds	r3, #7
 801c566:	f023 0307 	bic.w	r3, r3, #7
 801c56a:	3308      	adds	r3, #8
 801c56c:	9303      	str	r3, [sp, #12]
 801c56e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c570:	4433      	add	r3, r6
 801c572:	9309      	str	r3, [sp, #36]	; 0x24
 801c574:	e767      	b.n	801c446 <_svfiprintf_r+0x4e>
 801c576:	fb0c 3202 	mla	r2, ip, r2, r3
 801c57a:	460c      	mov	r4, r1
 801c57c:	2001      	movs	r0, #1
 801c57e:	e7a5      	b.n	801c4cc <_svfiprintf_r+0xd4>
 801c580:	2300      	movs	r3, #0
 801c582:	3401      	adds	r4, #1
 801c584:	9305      	str	r3, [sp, #20]
 801c586:	4619      	mov	r1, r3
 801c588:	f04f 0c0a 	mov.w	ip, #10
 801c58c:	4620      	mov	r0, r4
 801c58e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c592:	3a30      	subs	r2, #48	; 0x30
 801c594:	2a09      	cmp	r2, #9
 801c596:	d903      	bls.n	801c5a0 <_svfiprintf_r+0x1a8>
 801c598:	2b00      	cmp	r3, #0
 801c59a:	d0c5      	beq.n	801c528 <_svfiprintf_r+0x130>
 801c59c:	9105      	str	r1, [sp, #20]
 801c59e:	e7c3      	b.n	801c528 <_svfiprintf_r+0x130>
 801c5a0:	fb0c 2101 	mla	r1, ip, r1, r2
 801c5a4:	4604      	mov	r4, r0
 801c5a6:	2301      	movs	r3, #1
 801c5a8:	e7f0      	b.n	801c58c <_svfiprintf_r+0x194>
 801c5aa:	ab03      	add	r3, sp, #12
 801c5ac:	9300      	str	r3, [sp, #0]
 801c5ae:	462a      	mov	r2, r5
 801c5b0:	4b0f      	ldr	r3, [pc, #60]	; (801c5f0 <_svfiprintf_r+0x1f8>)
 801c5b2:	a904      	add	r1, sp, #16
 801c5b4:	4638      	mov	r0, r7
 801c5b6:	f3af 8000 	nop.w
 801c5ba:	1c42      	adds	r2, r0, #1
 801c5bc:	4606      	mov	r6, r0
 801c5be:	d1d6      	bne.n	801c56e <_svfiprintf_r+0x176>
 801c5c0:	89ab      	ldrh	r3, [r5, #12]
 801c5c2:	065b      	lsls	r3, r3, #25
 801c5c4:	f53f af2c 	bmi.w	801c420 <_svfiprintf_r+0x28>
 801c5c8:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c5ca:	b01d      	add	sp, #116	; 0x74
 801c5cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5d0:	ab03      	add	r3, sp, #12
 801c5d2:	9300      	str	r3, [sp, #0]
 801c5d4:	462a      	mov	r2, r5
 801c5d6:	4b06      	ldr	r3, [pc, #24]	; (801c5f0 <_svfiprintf_r+0x1f8>)
 801c5d8:	a904      	add	r1, sp, #16
 801c5da:	4638      	mov	r0, r7
 801c5dc:	f7ff f8ba 	bl	801b754 <_printf_i>
 801c5e0:	e7eb      	b.n	801c5ba <_svfiprintf_r+0x1c2>
 801c5e2:	bf00      	nop
 801c5e4:	0803ef78 	.word	0x0803ef78
 801c5e8:	0803ef82 	.word	0x0803ef82
 801c5ec:	00000000 	.word	0x00000000
 801c5f0:	0801c341 	.word	0x0801c341
 801c5f4:	0803ef7e 	.word	0x0803ef7e

0801c5f8 <__sread>:
 801c5f8:	b510      	push	{r4, lr}
 801c5fa:	460c      	mov	r4, r1
 801c5fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c600:	f000 f89c 	bl	801c73c <_read_r>
 801c604:	2800      	cmp	r0, #0
 801c606:	bfab      	itete	ge
 801c608:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c60a:	89a3      	ldrhlt	r3, [r4, #12]
 801c60c:	181b      	addge	r3, r3, r0
 801c60e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c612:	bfac      	ite	ge
 801c614:	6563      	strge	r3, [r4, #84]	; 0x54
 801c616:	81a3      	strhlt	r3, [r4, #12]
 801c618:	bd10      	pop	{r4, pc}

0801c61a <__swrite>:
 801c61a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c61e:	461f      	mov	r7, r3
 801c620:	898b      	ldrh	r3, [r1, #12]
 801c622:	05db      	lsls	r3, r3, #23
 801c624:	4605      	mov	r5, r0
 801c626:	460c      	mov	r4, r1
 801c628:	4616      	mov	r6, r2
 801c62a:	d505      	bpl.n	801c638 <__swrite+0x1e>
 801c62c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c630:	2302      	movs	r3, #2
 801c632:	2200      	movs	r2, #0
 801c634:	f000 f868 	bl	801c708 <_lseek_r>
 801c638:	89a3      	ldrh	r3, [r4, #12]
 801c63a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c63e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c642:	81a3      	strh	r3, [r4, #12]
 801c644:	4632      	mov	r2, r6
 801c646:	463b      	mov	r3, r7
 801c648:	4628      	mov	r0, r5
 801c64a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c64e:	f000 b817 	b.w	801c680 <_write_r>

0801c652 <__sseek>:
 801c652:	b510      	push	{r4, lr}
 801c654:	460c      	mov	r4, r1
 801c656:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c65a:	f000 f855 	bl	801c708 <_lseek_r>
 801c65e:	1c43      	adds	r3, r0, #1
 801c660:	89a3      	ldrh	r3, [r4, #12]
 801c662:	bf15      	itete	ne
 801c664:	6560      	strne	r0, [r4, #84]	; 0x54
 801c666:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c66a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c66e:	81a3      	strheq	r3, [r4, #12]
 801c670:	bf18      	it	ne
 801c672:	81a3      	strhne	r3, [r4, #12]
 801c674:	bd10      	pop	{r4, pc}

0801c676 <__sclose>:
 801c676:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c67a:	f000 b813 	b.w	801c6a4 <_close_r>
	...

0801c680 <_write_r>:
 801c680:	b538      	push	{r3, r4, r5, lr}
 801c682:	4d07      	ldr	r5, [pc, #28]	; (801c6a0 <_write_r+0x20>)
 801c684:	4604      	mov	r4, r0
 801c686:	4608      	mov	r0, r1
 801c688:	4611      	mov	r1, r2
 801c68a:	2200      	movs	r2, #0
 801c68c:	602a      	str	r2, [r5, #0]
 801c68e:	461a      	mov	r2, r3
 801c690:	f7ea f933 	bl	80068fa <_write>
 801c694:	1c43      	adds	r3, r0, #1
 801c696:	d102      	bne.n	801c69e <_write_r+0x1e>
 801c698:	682b      	ldr	r3, [r5, #0]
 801c69a:	b103      	cbz	r3, 801c69e <_write_r+0x1e>
 801c69c:	6023      	str	r3, [r4, #0]
 801c69e:	bd38      	pop	{r3, r4, r5, pc}
 801c6a0:	20007acc 	.word	0x20007acc

0801c6a4 <_close_r>:
 801c6a4:	b538      	push	{r3, r4, r5, lr}
 801c6a6:	4d06      	ldr	r5, [pc, #24]	; (801c6c0 <_close_r+0x1c>)
 801c6a8:	2300      	movs	r3, #0
 801c6aa:	4604      	mov	r4, r0
 801c6ac:	4608      	mov	r0, r1
 801c6ae:	602b      	str	r3, [r5, #0]
 801c6b0:	f7ea f93f 	bl	8006932 <_close>
 801c6b4:	1c43      	adds	r3, r0, #1
 801c6b6:	d102      	bne.n	801c6be <_close_r+0x1a>
 801c6b8:	682b      	ldr	r3, [r5, #0]
 801c6ba:	b103      	cbz	r3, 801c6be <_close_r+0x1a>
 801c6bc:	6023      	str	r3, [r4, #0]
 801c6be:	bd38      	pop	{r3, r4, r5, pc}
 801c6c0:	20007acc 	.word	0x20007acc

0801c6c4 <_fstat_r>:
 801c6c4:	b538      	push	{r3, r4, r5, lr}
 801c6c6:	4d07      	ldr	r5, [pc, #28]	; (801c6e4 <_fstat_r+0x20>)
 801c6c8:	2300      	movs	r3, #0
 801c6ca:	4604      	mov	r4, r0
 801c6cc:	4608      	mov	r0, r1
 801c6ce:	4611      	mov	r1, r2
 801c6d0:	602b      	str	r3, [r5, #0]
 801c6d2:	f7ea f93a 	bl	800694a <_fstat>
 801c6d6:	1c43      	adds	r3, r0, #1
 801c6d8:	d102      	bne.n	801c6e0 <_fstat_r+0x1c>
 801c6da:	682b      	ldr	r3, [r5, #0]
 801c6dc:	b103      	cbz	r3, 801c6e0 <_fstat_r+0x1c>
 801c6de:	6023      	str	r3, [r4, #0]
 801c6e0:	bd38      	pop	{r3, r4, r5, pc}
 801c6e2:	bf00      	nop
 801c6e4:	20007acc 	.word	0x20007acc

0801c6e8 <_isatty_r>:
 801c6e8:	b538      	push	{r3, r4, r5, lr}
 801c6ea:	4d06      	ldr	r5, [pc, #24]	; (801c704 <_isatty_r+0x1c>)
 801c6ec:	2300      	movs	r3, #0
 801c6ee:	4604      	mov	r4, r0
 801c6f0:	4608      	mov	r0, r1
 801c6f2:	602b      	str	r3, [r5, #0]
 801c6f4:	f7ea f939 	bl	800696a <_isatty>
 801c6f8:	1c43      	adds	r3, r0, #1
 801c6fa:	d102      	bne.n	801c702 <_isatty_r+0x1a>
 801c6fc:	682b      	ldr	r3, [r5, #0]
 801c6fe:	b103      	cbz	r3, 801c702 <_isatty_r+0x1a>
 801c700:	6023      	str	r3, [r4, #0]
 801c702:	bd38      	pop	{r3, r4, r5, pc}
 801c704:	20007acc 	.word	0x20007acc

0801c708 <_lseek_r>:
 801c708:	b538      	push	{r3, r4, r5, lr}
 801c70a:	4d07      	ldr	r5, [pc, #28]	; (801c728 <_lseek_r+0x20>)
 801c70c:	4604      	mov	r4, r0
 801c70e:	4608      	mov	r0, r1
 801c710:	4611      	mov	r1, r2
 801c712:	2200      	movs	r2, #0
 801c714:	602a      	str	r2, [r5, #0]
 801c716:	461a      	mov	r2, r3
 801c718:	f7ea f932 	bl	8006980 <_lseek>
 801c71c:	1c43      	adds	r3, r0, #1
 801c71e:	d102      	bne.n	801c726 <_lseek_r+0x1e>
 801c720:	682b      	ldr	r3, [r5, #0]
 801c722:	b103      	cbz	r3, 801c726 <_lseek_r+0x1e>
 801c724:	6023      	str	r3, [r4, #0]
 801c726:	bd38      	pop	{r3, r4, r5, pc}
 801c728:	20007acc 	.word	0x20007acc

0801c72c <_malloc_usable_size_r>:
 801c72c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c730:	1f18      	subs	r0, r3, #4
 801c732:	2b00      	cmp	r3, #0
 801c734:	bfbc      	itt	lt
 801c736:	580b      	ldrlt	r3, [r1, r0]
 801c738:	18c0      	addlt	r0, r0, r3
 801c73a:	4770      	bx	lr

0801c73c <_read_r>:
 801c73c:	b538      	push	{r3, r4, r5, lr}
 801c73e:	4d07      	ldr	r5, [pc, #28]	; (801c75c <_read_r+0x20>)
 801c740:	4604      	mov	r4, r0
 801c742:	4608      	mov	r0, r1
 801c744:	4611      	mov	r1, r2
 801c746:	2200      	movs	r2, #0
 801c748:	602a      	str	r2, [r5, #0]
 801c74a:	461a      	mov	r2, r3
 801c74c:	f7ea f8b8 	bl	80068c0 <_read>
 801c750:	1c43      	adds	r3, r0, #1
 801c752:	d102      	bne.n	801c75a <_read_r+0x1e>
 801c754:	682b      	ldr	r3, [r5, #0]
 801c756:	b103      	cbz	r3, 801c75a <_read_r+0x1e>
 801c758:	6023      	str	r3, [r4, #0]
 801c75a:	bd38      	pop	{r3, r4, r5, pc}
 801c75c:	20007acc 	.word	0x20007acc

0801c760 <_init>:
 801c760:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c762:	bf00      	nop
 801c764:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c766:	bc08      	pop	{r3}
 801c768:	469e      	mov	lr, r3
 801c76a:	4770      	bx	lr

0801c76c <_fini>:
 801c76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c76e:	bf00      	nop
 801c770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c772:	bc08      	pop	{r3}
 801c774:	469e      	mov	lr, r3
 801c776:	4770      	bx	lr
