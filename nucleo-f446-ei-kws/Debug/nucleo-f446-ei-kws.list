
nucleo-f446-ei-kws.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001c590  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0002288c  0801c760  0801c760  0002c760  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0803efec  0803efec  00050580  2**0
                  CONTENTS
  4 .ARM          00000008  0803efec  0803efec  0004efec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0803eff4  0803eff4  00050580  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0803eff4  0803eff4  0004eff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000008  0803effc  0803effc  0004effc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000580  20000000  0803f004  00050000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00007550  20000580  0803f584  00050580  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20007ad0  0803f584  00057ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00050580  2**0
                  CONTENTS, READONLY
 12 .debug_info   000fe91b  00000000  00000000  000505b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000106dd  00000000  00000000  0014eecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004470  00000000  00000000  0015f5a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004240  00000000  00000000  00163a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0003185c  00000000  00000000  00167c58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00045901  00000000  00000000  001994b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00171bd6  00000000  00000000  001dedb5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0035098b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014c24  00000000  00000000  003509e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000580 	.word	0x20000580
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801c748 	.word	0x0801c748

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000584 	.word	0x20000584
 800020c:	0801c748 	.word	0x0801c748

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a4 	b.w	8001028 <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9d08      	ldr	r5, [sp, #32]
 8000d6a:	4604      	mov	r4, r0
 8000d6c:	468c      	mov	ip, r1
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	f040 8083 	bne.w	8000e7a <__udivmoddi4+0x116>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4617      	mov	r7, r2
 8000d78:	d947      	bls.n	8000e0a <__udivmoddi4+0xa6>
 8000d7a:	fab2 f282 	clz	r2, r2
 8000d7e:	b142      	cbz	r2, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	f1c2 0020 	rsb	r0, r2, #32
 8000d84:	fa24 f000 	lsr.w	r0, r4, r0
 8000d88:	4091      	lsls	r1, r2
 8000d8a:	4097      	lsls	r7, r2
 8000d8c:	ea40 0c01 	orr.w	ip, r0, r1
 8000d90:	4094      	lsls	r4, r2
 8000d92:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000d96:	0c23      	lsrs	r3, r4, #16
 8000d98:	fbbc f6f8 	udiv	r6, ip, r8
 8000d9c:	fa1f fe87 	uxth.w	lr, r7
 8000da0:	fb08 c116 	mls	r1, r8, r6, ip
 8000da4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000da8:	fb06 f10e 	mul.w	r1, r6, lr
 8000dac:	4299      	cmp	r1, r3
 8000dae:	d909      	bls.n	8000dc4 <__udivmoddi4+0x60>
 8000db0:	18fb      	adds	r3, r7, r3
 8000db2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000db6:	f080 8119 	bcs.w	8000fec <__udivmoddi4+0x288>
 8000dba:	4299      	cmp	r1, r3
 8000dbc:	f240 8116 	bls.w	8000fec <__udivmoddi4+0x288>
 8000dc0:	3e02      	subs	r6, #2
 8000dc2:	443b      	add	r3, r7
 8000dc4:	1a5b      	subs	r3, r3, r1
 8000dc6:	b2a4      	uxth	r4, r4
 8000dc8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000dcc:	fb08 3310 	mls	r3, r8, r0, r3
 8000dd0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000dd4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000dd8:	45a6      	cmp	lr, r4
 8000dda:	d909      	bls.n	8000df0 <__udivmoddi4+0x8c>
 8000ddc:	193c      	adds	r4, r7, r4
 8000dde:	f100 33ff 	add.w	r3, r0, #4294967295
 8000de2:	f080 8105 	bcs.w	8000ff0 <__udivmoddi4+0x28c>
 8000de6:	45a6      	cmp	lr, r4
 8000de8:	f240 8102 	bls.w	8000ff0 <__udivmoddi4+0x28c>
 8000dec:	3802      	subs	r0, #2
 8000dee:	443c      	add	r4, r7
 8000df0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000df4:	eba4 040e 	sub.w	r4, r4, lr
 8000df8:	2600      	movs	r6, #0
 8000dfa:	b11d      	cbz	r5, 8000e04 <__udivmoddi4+0xa0>
 8000dfc:	40d4      	lsrs	r4, r2
 8000dfe:	2300      	movs	r3, #0
 8000e00:	e9c5 4300 	strd	r4, r3, [r5]
 8000e04:	4631      	mov	r1, r6
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	b902      	cbnz	r2, 8000e0e <__udivmoddi4+0xaa>
 8000e0c:	deff      	udf	#255	; 0xff
 8000e0e:	fab2 f282 	clz	r2, r2
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	d150      	bne.n	8000eb8 <__udivmoddi4+0x154>
 8000e16:	1bcb      	subs	r3, r1, r7
 8000e18:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e1c:	fa1f f887 	uxth.w	r8, r7
 8000e20:	2601      	movs	r6, #1
 8000e22:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e26:	0c21      	lsrs	r1, r4, #16
 8000e28:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e2c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e30:	fb08 f30c 	mul.w	r3, r8, ip
 8000e34:	428b      	cmp	r3, r1
 8000e36:	d907      	bls.n	8000e48 <__udivmoddi4+0xe4>
 8000e38:	1879      	adds	r1, r7, r1
 8000e3a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e3e:	d202      	bcs.n	8000e46 <__udivmoddi4+0xe2>
 8000e40:	428b      	cmp	r3, r1
 8000e42:	f200 80e9 	bhi.w	8001018 <__udivmoddi4+0x2b4>
 8000e46:	4684      	mov	ip, r0
 8000e48:	1ac9      	subs	r1, r1, r3
 8000e4a:	b2a3      	uxth	r3, r4
 8000e4c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e50:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e54:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e58:	fb08 f800 	mul.w	r8, r8, r0
 8000e5c:	45a0      	cmp	r8, r4
 8000e5e:	d907      	bls.n	8000e70 <__udivmoddi4+0x10c>
 8000e60:	193c      	adds	r4, r7, r4
 8000e62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e66:	d202      	bcs.n	8000e6e <__udivmoddi4+0x10a>
 8000e68:	45a0      	cmp	r8, r4
 8000e6a:	f200 80d9 	bhi.w	8001020 <__udivmoddi4+0x2bc>
 8000e6e:	4618      	mov	r0, r3
 8000e70:	eba4 0408 	sub.w	r4, r4, r8
 8000e74:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000e78:	e7bf      	b.n	8000dfa <__udivmoddi4+0x96>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d909      	bls.n	8000e92 <__udivmoddi4+0x12e>
 8000e7e:	2d00      	cmp	r5, #0
 8000e80:	f000 80b1 	beq.w	8000fe6 <__udivmoddi4+0x282>
 8000e84:	2600      	movs	r6, #0
 8000e86:	e9c5 0100 	strd	r0, r1, [r5]
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	fab3 f683 	clz	r6, r3
 8000e96:	2e00      	cmp	r6, #0
 8000e98:	d14a      	bne.n	8000f30 <__udivmoddi4+0x1cc>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d302      	bcc.n	8000ea4 <__udivmoddi4+0x140>
 8000e9e:	4282      	cmp	r2, r0
 8000ea0:	f200 80b8 	bhi.w	8001014 <__udivmoddi4+0x2b0>
 8000ea4:	1a84      	subs	r4, r0, r2
 8000ea6:	eb61 0103 	sbc.w	r1, r1, r3
 8000eaa:	2001      	movs	r0, #1
 8000eac:	468c      	mov	ip, r1
 8000eae:	2d00      	cmp	r5, #0
 8000eb0:	d0a8      	beq.n	8000e04 <__udivmoddi4+0xa0>
 8000eb2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eb6:	e7a5      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000eb8:	f1c2 0320 	rsb	r3, r2, #32
 8000ebc:	fa20 f603 	lsr.w	r6, r0, r3
 8000ec0:	4097      	lsls	r7, r2
 8000ec2:	fa01 f002 	lsl.w	r0, r1, r2
 8000ec6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000eca:	40d9      	lsrs	r1, r3
 8000ecc:	4330      	orrs	r0, r6
 8000ece:	0c03      	lsrs	r3, r0, #16
 8000ed0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ed4:	fa1f f887 	uxth.w	r8, r7
 8000ed8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000edc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000ee0:	fb06 f108 	mul.w	r1, r6, r8
 8000ee4:	4299      	cmp	r1, r3
 8000ee6:	fa04 f402 	lsl.w	r4, r4, r2
 8000eea:	d909      	bls.n	8000f00 <__udivmoddi4+0x19c>
 8000eec:	18fb      	adds	r3, r7, r3
 8000eee:	f106 3cff 	add.w	ip, r6, #4294967295
 8000ef2:	f080 808d 	bcs.w	8001010 <__udivmoddi4+0x2ac>
 8000ef6:	4299      	cmp	r1, r3
 8000ef8:	f240 808a 	bls.w	8001010 <__udivmoddi4+0x2ac>
 8000efc:	3e02      	subs	r6, #2
 8000efe:	443b      	add	r3, r7
 8000f00:	1a5b      	subs	r3, r3, r1
 8000f02:	b281      	uxth	r1, r0
 8000f04:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f08:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f0c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f10:	fb00 f308 	mul.w	r3, r0, r8
 8000f14:	428b      	cmp	r3, r1
 8000f16:	d907      	bls.n	8000f28 <__udivmoddi4+0x1c4>
 8000f18:	1879      	adds	r1, r7, r1
 8000f1a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f1e:	d273      	bcs.n	8001008 <__udivmoddi4+0x2a4>
 8000f20:	428b      	cmp	r3, r1
 8000f22:	d971      	bls.n	8001008 <__udivmoddi4+0x2a4>
 8000f24:	3802      	subs	r0, #2
 8000f26:	4439      	add	r1, r7
 8000f28:	1acb      	subs	r3, r1, r3
 8000f2a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f2e:	e778      	b.n	8000e22 <__udivmoddi4+0xbe>
 8000f30:	f1c6 0c20 	rsb	ip, r6, #32
 8000f34:	fa03 f406 	lsl.w	r4, r3, r6
 8000f38:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f3c:	431c      	orrs	r4, r3
 8000f3e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f42:	fa01 f306 	lsl.w	r3, r1, r6
 8000f46:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f4a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f4e:	431f      	orrs	r7, r3
 8000f50:	0c3b      	lsrs	r3, r7, #16
 8000f52:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f56:	fa1f f884 	uxth.w	r8, r4
 8000f5a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f5e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f62:	fb09 fa08 	mul.w	sl, r9, r8
 8000f66:	458a      	cmp	sl, r1
 8000f68:	fa02 f206 	lsl.w	r2, r2, r6
 8000f6c:	fa00 f306 	lsl.w	r3, r0, r6
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x220>
 8000f72:	1861      	adds	r1, r4, r1
 8000f74:	f109 30ff 	add.w	r0, r9, #4294967295
 8000f78:	d248      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000f7a:	458a      	cmp	sl, r1
 8000f7c:	d946      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000f7e:	f1a9 0902 	sub.w	r9, r9, #2
 8000f82:	4421      	add	r1, r4
 8000f84:	eba1 010a 	sub.w	r1, r1, sl
 8000f88:	b2bf      	uxth	r7, r7
 8000f8a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000f8e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000f92:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000f96:	fb00 f808 	mul.w	r8, r0, r8
 8000f9a:	45b8      	cmp	r8, r7
 8000f9c:	d907      	bls.n	8000fae <__udivmoddi4+0x24a>
 8000f9e:	19e7      	adds	r7, r4, r7
 8000fa0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fa4:	d22e      	bcs.n	8001004 <__udivmoddi4+0x2a0>
 8000fa6:	45b8      	cmp	r8, r7
 8000fa8:	d92c      	bls.n	8001004 <__udivmoddi4+0x2a0>
 8000faa:	3802      	subs	r0, #2
 8000fac:	4427      	add	r7, r4
 8000fae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fb2:	eba7 0708 	sub.w	r7, r7, r8
 8000fb6:	fba0 8902 	umull	r8, r9, r0, r2
 8000fba:	454f      	cmp	r7, r9
 8000fbc:	46c6      	mov	lr, r8
 8000fbe:	4649      	mov	r1, r9
 8000fc0:	d31a      	bcc.n	8000ff8 <__udivmoddi4+0x294>
 8000fc2:	d017      	beq.n	8000ff4 <__udivmoddi4+0x290>
 8000fc4:	b15d      	cbz	r5, 8000fde <__udivmoddi4+0x27a>
 8000fc6:	ebb3 020e 	subs.w	r2, r3, lr
 8000fca:	eb67 0701 	sbc.w	r7, r7, r1
 8000fce:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000fd2:	40f2      	lsrs	r2, r6
 8000fd4:	ea4c 0202 	orr.w	r2, ip, r2
 8000fd8:	40f7      	lsrs	r7, r6
 8000fda:	e9c5 2700 	strd	r2, r7, [r5]
 8000fde:	2600      	movs	r6, #0
 8000fe0:	4631      	mov	r1, r6
 8000fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000fe6:	462e      	mov	r6, r5
 8000fe8:	4628      	mov	r0, r5
 8000fea:	e70b      	b.n	8000e04 <__udivmoddi4+0xa0>
 8000fec:	4606      	mov	r6, r0
 8000fee:	e6e9      	b.n	8000dc4 <__udivmoddi4+0x60>
 8000ff0:	4618      	mov	r0, r3
 8000ff2:	e6fd      	b.n	8000df0 <__udivmoddi4+0x8c>
 8000ff4:	4543      	cmp	r3, r8
 8000ff6:	d2e5      	bcs.n	8000fc4 <__udivmoddi4+0x260>
 8000ff8:	ebb8 0e02 	subs.w	lr, r8, r2
 8000ffc:	eb69 0104 	sbc.w	r1, r9, r4
 8001000:	3801      	subs	r0, #1
 8001002:	e7df      	b.n	8000fc4 <__udivmoddi4+0x260>
 8001004:	4608      	mov	r0, r1
 8001006:	e7d2      	b.n	8000fae <__udivmoddi4+0x24a>
 8001008:	4660      	mov	r0, ip
 800100a:	e78d      	b.n	8000f28 <__udivmoddi4+0x1c4>
 800100c:	4681      	mov	r9, r0
 800100e:	e7b9      	b.n	8000f84 <__udivmoddi4+0x220>
 8001010:	4666      	mov	r6, ip
 8001012:	e775      	b.n	8000f00 <__udivmoddi4+0x19c>
 8001014:	4630      	mov	r0, r6
 8001016:	e74a      	b.n	8000eae <__udivmoddi4+0x14a>
 8001018:	f1ac 0c02 	sub.w	ip, ip, #2
 800101c:	4439      	add	r1, r7
 800101e:	e713      	b.n	8000e48 <__udivmoddi4+0xe4>
 8001020:	3802      	subs	r0, #2
 8001022:	443c      	add	r4, r7
 8001024:	e724      	b.n	8000e70 <__udivmoddi4+0x10c>
 8001026:	bf00      	nop

08001028 <__aeabi_idiv0>:
 8001028:	4770      	bx	lr
 800102a:	bf00      	nop

0800102c <_ZnwjPv>:
#endif // __cpp_sized_deallocation
#endif // __cpp_aligned_new

// Default placement versions of operator new.
_GLIBCXX_NODISCARD inline void* operator new(std::size_t, void* __p) _GLIBCXX_USE_NOEXCEPT
{ return __p; }
 800102c:	b480      	push	{r7}
 800102e:	b083      	sub	sp, #12
 8001030:	af00      	add	r7, sp, #0
 8001032:	6078      	str	r0, [r7, #4]
 8001034:	6039      	str	r1, [r7, #0]
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	4618      	mov	r0, r3
 800103a:	370c      	adds	r7, #12
 800103c:	46bd      	mov	sp, r7
 800103e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001042:	4770      	bx	lr

08001044 <_ZSt4ceilf>:
  using ::ceil;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  ceil(float __x)
  { return __builtin_ceilf(__x); }
 8001044:	b580      	push	{r7, lr}
 8001046:	b082      	sub	sp, #8
 8001048:	af00      	add	r7, sp, #0
 800104a:	ed87 0a01 	vstr	s0, [r7, #4]
 800104e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001052:	f017 f971 	bl	8018338 <ceilf>
 8001056:	eef0 7a40 	vmov.f32	s15, s0
 800105a:	eeb0 0a67 	vmov.f32	s0, s15
 800105e:	3708      	adds	r7, #8
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}

08001064 <_ZSt3expf>:
  using ::exp;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  exp(float __x)
  { return __builtin_expf(__x); }
 8001064:	b580      	push	{r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
 800106a:	ed87 0a01 	vstr	s0, [r7, #4]
 800106e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001072:	f017 fb93 	bl	801879c <expf>
 8001076:	eef0 7a40 	vmov.f32	s15, s0
 800107a:	eeb0 0a67 	vmov.f32	s0, s15
 800107e:	3708      	adds	r7, #8
 8001080:	46bd      	mov	sp, r7
 8001082:	bd80      	pop	{r7, pc}

08001084 <_ZSt5floorf>:
  using ::floor;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  floor(float __x)
  { return __builtin_floorf(__x); }
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	ed87 0a01 	vstr	s0, [r7, #4]
 800108e:	ed97 0a01 	vldr	s0, [r7, #4]
 8001092:	f017 f9d3 	bl	801843c <floorf>
 8001096:	eef0 7a40 	vmov.f32	s15, s0
 800109a:	eeb0 0a67 	vmov.f32	s0, s15
 800109e:	3708      	adds	r7, #8
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}

080010a4 <_ZSt4sqrtf>:
  using ::sqrt;

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR float
  sqrt(float __x)
  { return __builtin_sqrtf(__x); }
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ae:	ed97 0a01 	vldr	s0, [r7, #4]
 80010b2:	f017 fbb1 	bl	8018818 <sqrtf>
 80010b6:	eef0 7a40 	vmov.f32	s15, s0
 80010ba:	eeb0 0a67 	vmov.f32	s0, s15
 80010be:	3708      	adds	r7, #8
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <_ZSt5roundf>:
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr float
  round(float __x)
  { return __builtin_roundf(__x); }
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	ed87 0a01 	vstr	s0, [r7, #4]
 80010ce:	ed97 0a01 	vldr	s0, [r7, #4]
 80010d2:	f017 fa19 	bl	8018508 <roundf>
 80010d6:	eef0 7a40 	vmov.f32	s15, s0
 80010da:	eeb0 0a67 	vmov.f32	s0, s15
 80010de:	3708      	adds	r7, #8
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}

080010e4 <_ZNSt9_Any_data9_M_accessEv>:
    void (_Undefined_class::*_M_member_pointer)();
  };

  union [[gnu::may_alias]] _Any_data
  {
    void*       _M_access()       { return &_M_pod_data[0]; }
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr

080010fa <_ZNKSt9_Any_data9_M_accessEv>:
    const void* _M_access() const { return &_M_pod_data[0]; }
 80010fa:	b480      	push	{r7}
 80010fc:	b083      	sub	sp, #12
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4618      	mov	r0, r3
 8001106:	370c      	adds	r7, #12
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <_ZNSt14_Function_baseC1Ev>:
	static void
	_M_init_functor(_Any_data& __functor, _Functor&& __f, false_type)
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }
 8001110:	b480      	push	{r7}
 8001112:	b083      	sub	sp, #12
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	609a      	str	r2, [r3, #8]
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4618      	mov	r0, r3
 8001122:	370c      	adds	r7, #12
 8001124:	46bd      	mov	sp, r7
 8001126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112a:	4770      	bx	lr

0800112c <_ZNSt14_Function_baseD1Ev>:

    ~_Function_base()
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    {
      if (_M_manager)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	689b      	ldr	r3, [r3, #8]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d005      	beq.n	8001148 <_ZNSt14_Function_baseD1Ev+0x1c>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	689b      	ldr	r3, [r3, #8]
 8001140:	6878      	ldr	r0, [r7, #4]
 8001142:	6879      	ldr	r1, [r7, #4]
 8001144:	2203      	movs	r2, #3
 8001146:	4798      	blx	r3
    }
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	3708      	adds	r7, #8
 800114e:	46bd      	mov	sp, r7
 8001150:	bd80      	pop	{r7, pc}

08001152 <_ZNKSt14_Function_base8_M_emptyEv>:

    bool _M_empty() const { return !_M_manager; }
 8001152:	b480      	push	{r7}
 8001154:	b083      	sub	sp, #12
 8001156:	af00      	add	r7, sp, #0
 8001158:	6078      	str	r0, [r7, #4]
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	2b00      	cmp	r3, #0
 8001160:	bf0c      	ite	eq
 8001162:	2301      	moveq	r3, #1
 8001164:	2300      	movne	r3, #0
 8001166:	b2db      	uxtb	r3, r3
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <_ZN2ei9ei_matrixC1EmmPf>:
     * Create a new matrix
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_buffer Buffer, if not provided we'll alloc on the heap
     */
    ei_matrix(
 8001174:	b580      	push	{r7, lr}
 8001176:	b084      	sub	sp, #16
 8001178:	af00      	add	r7, sp, #0
 800117a:	60f8      	str	r0, [r7, #12]
 800117c:	60b9      	str	r1, [r7, #8]
 800117e:	607a      	str	r2, [r7, #4]
 8001180:	603b      	str	r3, [r7, #0]
        const char *file = NULL,
        int line = 0
#endif
        )
    {
        if (a_buffer) {
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	2b00      	cmp	r3, #0
 8001186:	d006      	beq.n	8001196 <_ZN2ei9ei_matrixC1EmmPf+0x22>
            buffer = a_buffer;
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	683a      	ldr	r2, [r7, #0]
 800118c:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2200      	movs	r2, #0
 8001192:	731a      	strb	r2, [r3, #12]
 8001194:	e00f      	b.n	80011b6 <_ZN2ei9ei_matrixC1EmmPf+0x42>
        }
        else {
            buffer = (float*)calloc(n_rows * n_cols * sizeof(float), 1);
 8001196:	68bb      	ldr	r3, [r7, #8]
 8001198:	687a      	ldr	r2, [r7, #4]
 800119a:	fb02 f303 	mul.w	r3, r2, r3
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	2101      	movs	r1, #1
 80011a2:	4618      	mov	r0, r3
 80011a4:	f019 ff30 	bl	801b008 <calloc>
 80011a8:	4603      	mov	r3, r0
 80011aa:	461a      	mov	r2, r3
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	2201      	movs	r2, #1
 80011b4:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	68ba      	ldr	r2, [r7, #8]
 80011ba:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	687a      	ldr	r2, [r7, #4]
 80011c0:	609a      	str	r2, [r3, #8]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(float));
            }
#endif
        }
    }
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	4618      	mov	r0, r3
 80011c6:	3710      	adds	r7, #16
 80011c8:	46bd      	mov	sp, r7
 80011ca:	bd80      	pop	{r7, pc}

080011cc <_ZN2ei9ei_matrixD1Ev>:

    ~ei_matrix() {
 80011cc:	b580      	push	{r7, lr}
 80011ce:	b082      	sub	sp, #8
 80011d0:	af00      	add	r7, sp, #0
 80011d2:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d008      	beq.n	80011ee <_ZN2ei9ei_matrixD1Ev+0x22>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	7b1b      	ldrb	r3, [r3, #12]
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <_ZN2ei9ei_matrixD1Ev+0x22>
            free(buffer);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	4618      	mov	r0, r3
 80011ea:	f019 ffdf 	bl	801b1ac <free>
            else {
                ei_dsp_register_matrix_free(rows, cols, sizeof(float));
            }
#endif
        }
    }
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	4618      	mov	r0, r3
 80011f2:	3708      	adds	r7, #8
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>:
     * @param n_rows Number of rows
     * @param n_cols Number of columns
     * @param a_dequantization_fn How to dequantize the values in this matrix
     * @param a_buffer Optional: a buffer, if set we won't allocate memory ourselves
     */
    ei_quantized_matrix(uint32_t n_rows,
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	60f8      	str	r0, [r7, #12]
 8001200:	60b9      	str	r1, [r7, #8]
 8001202:	607a      	str	r2, [r7, #4]
 8001204:	603b      	str	r3, [r7, #0]
                        const char *file = NULL,
                        int line = 0
#endif
                        )
    {
        if (a_buffer) {
 8001206:	69bb      	ldr	r3, [r7, #24]
 8001208:	2b00      	cmp	r3, #0
 800120a:	d006      	beq.n	800121a <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x22>
            buffer = a_buffer;
 800120c:	68fb      	ldr	r3, [r7, #12]
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = false;
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	2200      	movs	r2, #0
 8001216:	731a      	strb	r2, [r3, #12]
 8001218:	e00e      	b.n	8001238 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh+0x40>
        }
        else {
            buffer = (uint8_t*)calloc(n_rows * n_cols * sizeof(uint8_t), 1);
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	687a      	ldr	r2, [r7, #4]
 800121e:	fb02 f303 	mul.w	r3, r2, r3
 8001222:	2101      	movs	r1, #1
 8001224:	4618      	mov	r0, r3
 8001226:	f019 feef 	bl	801b008 <calloc>
 800122a:	4603      	mov	r3, r0
 800122c:	461a      	mov	r2, r3
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	601a      	str	r2, [r3, #0]
            buffer_managed_by_me = true;
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	2201      	movs	r2, #1
 8001236:	731a      	strb	r2, [r3, #12]
        }
        rows = n_rows;
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	68ba      	ldr	r2, [r7, #8]
 800123c:	605a      	str	r2, [r3, #4]
        cols = n_cols;
 800123e:	68fb      	ldr	r3, [r7, #12]
 8001240:	687a      	ldr	r2, [r7, #4]
 8001242:	609a      	str	r2, [r3, #8]
        dequantization_fn = a_dequantization_fn;
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	683a      	ldr	r2, [r7, #0]
 8001248:	611a      	str	r2, [r3, #16]
            else {
                ei_dsp_register_matrix_alloc(rows, cols, sizeof(uint8_t));
            }
#endif
        }
    }
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	4618      	mov	r0, r3
 800124e:	3710      	adds	r7, #16
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}

08001254 <_ZN2ei19ei_quantized_matrixD1Ev>:

    ~ei_quantized_matrix() {
 8001254:	b580      	push	{r7, lr}
 8001256:	b082      	sub	sp, #8
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
        if (buffer && buffer_managed_by_me) {
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	7b1b      	ldrb	r3, [r3, #12]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d004      	beq.n	8001276 <_ZN2ei19ei_quantized_matrixD1Ev+0x22>
            free(buffer);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	681b      	ldr	r3, [r3, #0]
 8001270:	4618      	mov	r0, r3
 8001272:	f019 ff9b 	bl	801b1ac <free>
            else {
                ei_dsp_register_matrix_free(rows, cols, sizeof(uint8_t));
            }
#endif
        }
    }
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4618      	mov	r0, r3
 800127a:	3708      	adds	r7, #8
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}

08001280 <_ZSt25__throw_bad_function_callv>:
#endif // __cplusplus

// required on Adafruit nRF52, it seems not to matter too much on other targets...
#ifdef __cplusplus
namespace std {
    __attribute__((weak)) void __throw_bad_function_call() { while(1); };
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
 8001284:	e7fe      	b.n	8001284 <_ZSt25__throw_bad_function_callv+0x4>
	...

08001288 <_ZN2ei5numpy4rollEPfji>:
     * @param input_array
     * @param input_array_size
     * @param shift The number of places by which elements are shifted.
     * @returns EIDSP_OK if OK
     */
    static int roll(float *input_array, size_t input_array_size, int shift) {
 8001288:	b590      	push	{r4, r7, lr}
 800128a:	b089      	sub	sp, #36	; 0x24
 800128c:	af00      	add	r7, sp, #0
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	60b9      	str	r1, [r7, #8]
 8001292:	607a      	str	r2, [r7, #4]
        if (shift < 0) {
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	2b00      	cmp	r3, #0
 8001298:	da03      	bge.n	80012a2 <_ZN2ei5numpy4rollEPfji+0x1a>
            shift = input_array_size + shift;
 800129a:	687a      	ldr	r2, [r7, #4]
 800129c:	68bb      	ldr	r3, [r7, #8]
 800129e:	4413      	add	r3, r2
 80012a0:	607b      	str	r3, [r7, #4]
        }

        if (shift == 0) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d101      	bne.n	80012ac <_ZN2ei5numpy4rollEPfji+0x24>
            return EIDSP_OK;
 80012a8:	2400      	movs	r4, #0
 80012aa:	e039      	b.n	8001320 <_ZN2ei5numpy4rollEPfji+0x98>
        }

        // so we need to allocate a buffer of the size of shift...
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 80012ac:	687a      	ldr	r2, [r7, #4]
 80012ae:	f107 0010 	add.w	r0, r7, #16
 80012b2:	2300      	movs	r3, #0
 80012b4:	2101      	movs	r1, #1
 80012b6:	f7ff ff5d 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80012ba:	693b      	ldr	r3, [r7, #16]
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d10a      	bne.n	80012d6 <_ZN2ei5numpy4rollEPfji+0x4e>
 80012c0:	4a1a      	ldr	r2, [pc, #104]	; (800132c <_ZN2ei5numpy4rollEPfji+0xa4>)
 80012c2:	491b      	ldr	r1, [pc, #108]	; (8001330 <_ZN2ei5numpy4rollEPfji+0xa8>)
 80012c4:	481b      	ldr	r0, [pc, #108]	; (8001334 <_ZN2ei5numpy4rollEPfji+0xac>)
 80012c6:	f01a fb5f 	bl	801b988 <iprintf>
 80012ca:	4b1b      	ldr	r3, [pc, #108]	; (8001338 <_ZN2ei5numpy4rollEPfji+0xb0>)
 80012cc:	4a1b      	ldr	r2, [pc, #108]	; (800133c <_ZN2ei5numpy4rollEPfji+0xb4>)
 80012ce:	214a      	movs	r1, #74	; 0x4a
 80012d0:	481b      	ldr	r0, [pc, #108]	; (8001340 <_ZN2ei5numpy4rollEPfji+0xb8>)
 80012d2:	f019 fe75 	bl	801afc0 <__assert_func>

        // we copy from the end of the buffer into the shift buffer
        memcpy(shift_matrix.buffer, input_array + input_array_size - shift, shift * sizeof(float));
 80012d6:	6938      	ldr	r0, [r7, #16]
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	68ba      	ldr	r2, [r7, #8]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	009b      	lsls	r3, r3, #2
 80012e0:	68fa      	ldr	r2, [r7, #12]
 80012e2:	18d1      	adds	r1, r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	461a      	mov	r2, r3
 80012ea:	f019 ff75 	bl	801b1d8 <memcpy>

        // now we do a memmove to shift the array
        memmove(input_array + shift, input_array, (input_array_size - shift) * sizeof(float));
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	009b      	lsls	r3, r3, #2
 80012f2:	68fa      	ldr	r2, [r7, #12]
 80012f4:	18d0      	adds	r0, r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	68ba      	ldr	r2, [r7, #8]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	009b      	lsls	r3, r3, #2
 80012fe:	461a      	mov	r2, r3
 8001300:	68f9      	ldr	r1, [r7, #12]
 8001302:	f019 ff77 	bl	801b1f4 <memmove>

        // and copy the shift buffer back to the beginning of the array
        memcpy(input_array, shift_matrix.buffer, shift * sizeof(float));
 8001306:	6939      	ldr	r1, [r7, #16]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	009b      	lsls	r3, r3, #2
 800130c:	461a      	mov	r2, r3
 800130e:	68f8      	ldr	r0, [r7, #12]
 8001310:	f019 ff62 	bl	801b1d8 <memcpy>

        return EIDSP_OK;
 8001314:	2400      	movs	r4, #0
        EI_DSP_MATRIX(shift_matrix, 1, shift);
 8001316:	f107 0310 	add.w	r3, r7, #16
 800131a:	4618      	mov	r0, r3
 800131c:	f7ff ff56 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 8001320:	4623      	mov	r3, r4
    }
 8001322:	4618      	mov	r0, r3
 8001324:	3724      	adds	r7, #36	; 0x24
 8001326:	46bd      	mov	sp, r7
 8001328:	bd90      	pop	{r4, r7, pc}
 800132a:	bf00      	nop
 800132c:	0801c788 	.word	0x0801c788
 8001330:	fffffc16 	.word	0xfffffc16
 8001334:	0801c79c 	.word	0x0801c79c
 8001338:	0801c7ac 	.word	0x0801c7ac
 800133c:	0801c7b4 	.word	0x0801c7b4
 8001340:	0801c7e4 	.word	0x0801c7e4

08001344 <_ZN2ei5numpy3sumEPfj>:

    static float sum(float *input_array, size_t input_array_size) {
 8001344:	b480      	push	{r7}
 8001346:	b085      	sub	sp, #20
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
 800134c:	6039      	str	r1, [r7, #0]
        float res = 0.0f;
 800134e:	f04f 0300 	mov.w	r3, #0
 8001352:	60fb      	str	r3, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001354:	2300      	movs	r3, #0
 8001356:	60bb      	str	r3, [r7, #8]
 8001358:	68ba      	ldr	r2, [r7, #8]
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	429a      	cmp	r2, r3
 800135e:	d20f      	bcs.n	8001380 <_ZN2ei5numpy3sumEPfj+0x3c>
            res += input_array[ix];
 8001360:	68bb      	ldr	r3, [r7, #8]
 8001362:	009b      	lsls	r3, r3, #2
 8001364:	687a      	ldr	r2, [r7, #4]
 8001366:	4413      	add	r3, r2
 8001368:	edd3 7a00 	vldr	s15, [r3]
 800136c:	ed97 7a03 	vldr	s14, [r7, #12]
 8001370:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001374:	edc7 7a03 	vstr	s15, [r7, #12]
        for (size_t ix = 0; ix < input_array_size; ix++) {
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	3301      	adds	r3, #1
 800137c:	60bb      	str	r3, [r7, #8]
 800137e:	e7eb      	b.n	8001358 <_ZN2ei5numpy3sumEPfj+0x14>
        }
        return res;
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	ee07 3a90 	vmov	s15, r3
    }
 8001386:	eeb0 0a67 	vmov.f32	s0, s15
 800138a:	3714      	adds	r7, #20
 800138c:	46bd      	mov	sp, r7
 800138e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001392:	4770      	bx	lr

08001394 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>:
     * @param matrix1_cols matrix1 row size
     * @param matrix2 Pointer to matrix2 (NxK)
     * @param out_matrix Pointer to out matrix (MxK)
     * @returns EIDSP_OK if OK
     */
    static inline int dot_by_row(int i, float *row, size_t matrix1_cols,
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b08b      	sub	sp, #44	; 0x2c
 8001398:	af00      	add	r7, sp, #0
 800139a:	60f8      	str	r0, [r7, #12]
 800139c:	60b9      	str	r1, [r7, #8]
 800139e:	607a      	str	r2, [r7, #4]
 80013a0:	603b      	str	r3, [r7, #0]
        quantized_matrix_t *matrix2, matrix_t *out_matrix)
    {
        if (matrix1_cols != matrix2->rows) {
 80013a2:	683b      	ldr	r3, [r7, #0]
 80013a4:	685b      	ldr	r3, [r3, #4]
 80013a6:	687a      	ldr	r2, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d00a      	beq.n	80013c2 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80013ac:	4a3b      	ldr	r2, [pc, #236]	; (800149c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x108>)
 80013ae:	493c      	ldr	r1, [pc, #240]	; (80014a0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x10c>)
 80013b0:	483c      	ldr	r0, [pc, #240]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013b2:	f01a fae9 	bl	801b988 <iprintf>
 80013b6:	4b3c      	ldr	r3, [pc, #240]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013b8:	4a3c      	ldr	r2, [pc, #240]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 80013ba:	21e2      	movs	r1, #226	; 0xe2
 80013bc:	483c      	ldr	r0, [pc, #240]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 80013be:	f019 fdff 	bl	801afc0 <__assert_func>
        }

#if EIDSP_USE_CMSIS_DSP
        EI_DSP_MATRIX(dequantized_matrix, 1, matrix1_cols);
 80013c2:	f107 0014 	add.w	r0, r7, #20
 80013c6:	2300      	movs	r3, #0
 80013c8:	687a      	ldr	r2, [r7, #4]
 80013ca:	2101      	movs	r1, #1
 80013cc:	f7ff fed2 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80013d0:	697b      	ldr	r3, [r7, #20]
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d10a      	bne.n	80013ec <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x58>
 80013d6:	4a37      	ldr	r2, [pc, #220]	; (80014b4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x120>)
 80013d8:	4937      	ldr	r1, [pc, #220]	; (80014b8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x124>)
 80013da:	4832      	ldr	r0, [pc, #200]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013dc:	f01a fad4 	bl	801b988 <iprintf>
 80013e0:	4b31      	ldr	r3, [pc, #196]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013e2:	4a32      	ldr	r2, [pc, #200]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 80013e4:	21e6      	movs	r1, #230	; 0xe6
 80013e6:	4832      	ldr	r0, [pc, #200]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 80013e8:	f019 fdea 	bl	801afc0 <__assert_func>
        if (!dequantized_matrix.buffer) {
 80013ec:	697b      	ldr	r3, [r7, #20]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d10a      	bne.n	8001408 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x74>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80013f2:	4a30      	ldr	r2, [pc, #192]	; (80014b4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x120>)
 80013f4:	4930      	ldr	r1, [pc, #192]	; (80014b8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x124>)
 80013f6:	482b      	ldr	r0, [pc, #172]	; (80014a4 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x110>)
 80013f8:	f01a fac6 	bl	801b988 <iprintf>
 80013fc:	4b2a      	ldr	r3, [pc, #168]	; (80014a8 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x114>)
 80013fe:	4a2b      	ldr	r2, [pc, #172]	; (80014ac <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x118>)
 8001400:	21e8      	movs	r1, #232	; 0xe8
 8001402:	482b      	ldr	r0, [pc, #172]	; (80014b0 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x11c>)
 8001404:	f019 fddc 	bl	801afc0 <__assert_func>
        }
#endif

        for (uint16_t j = 0; j < matrix2->cols; j++) {
 8001408:	2300      	movs	r3, #0
 800140a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800140c:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	689b      	ldr	r3, [r3, #8]
 8001412:	429a      	cmp	r2, r3
 8001414:	d237      	bcs.n	8001486 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xf2>
#if EIDSP_USE_CMSIS_DSP
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 8001416:	2300      	movs	r3, #0
 8001418:	84bb      	strh	r3, [r7, #36]	; 0x24
 800141a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800141c:	687a      	ldr	r2, [r7, #4]
 800141e:	429a      	cmp	r2, r3
 8001420:	d919      	bls.n	8001456 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0xc2>
                dequantized_matrix.buffer[k] = matrix2->dequantization_fn(matrix2->buffer[k * matrix2->cols + j]);
 8001422:	683b      	ldr	r3, [r7, #0]
 8001424:	691b      	ldr	r3, [r3, #16]
 8001426:	683a      	ldr	r2, [r7, #0]
 8001428:	6811      	ldr	r1, [r2, #0]
 800142a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800142c:	6838      	ldr	r0, [r7, #0]
 800142e:	6880      	ldr	r0, [r0, #8]
 8001430:	fb00 f002 	mul.w	r0, r0, r2
 8001434:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001436:	4402      	add	r2, r0
 8001438:	440a      	add	r2, r1
 800143a:	7810      	ldrb	r0, [r2, #0]
 800143c:	6979      	ldr	r1, [r7, #20]
 800143e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001440:	0092      	lsls	r2, r2, #2
 8001442:	188c      	adds	r4, r1, r2
 8001444:	4798      	blx	r3
 8001446:	eef0 7a40 	vmov.f32	s15, s0
 800144a:	edc4 7a00 	vstr	s15, [r4]
            for (uint16_t k = 0; k < matrix1_cols; k++) {
 800144e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001450:	3301      	adds	r3, #1
 8001452:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001454:	e7e1      	b.n	800141a <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x86>
            }

            float result;
            arm_dot_prod_f32(row, dequantized_matrix.buffer, matrix1_cols, &result);
 8001456:	6979      	ldr	r1, [r7, #20]
 8001458:	f107 0310 	add.w	r3, r7, #16
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	68b8      	ldr	r0, [r7, #8]
 8001460:	f008 fcda 	bl	8009e18 <arm_dot_prod_f32>
            out_matrix->buffer[i * matrix2->cols + j] = result;
 8001464:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001466:	681a      	ldr	r2, [r3, #0]
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	689b      	ldr	r3, [r3, #8]
 800146c:	68f9      	ldr	r1, [r7, #12]
 800146e:	fb01 f103 	mul.w	r1, r1, r3
 8001472:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001474:	440b      	add	r3, r1
 8001476:	009b      	lsls	r3, r3, #2
 8001478:	4413      	add	r3, r2
 800147a:	693a      	ldr	r2, [r7, #16]
 800147c:	601a      	str	r2, [r3, #0]
        for (uint16_t j = 0; j < matrix2->cols; j++) {
 800147e:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001480:	3301      	adds	r3, #1
 8001482:	84fb      	strh	r3, [r7, #38]	; 0x26
 8001484:	e7c2      	b.n	800140c <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE+0x78>
                    row[k] * matrix2->dequantization_fn(matrix2->buffer[k * matrix2->cols + j]);
            }
#endif
        }

        return EIDSP_OK;
 8001486:	2400      	movs	r4, #0
        EI_DSP_MATRIX(dequantized_matrix, 1, matrix1_cols);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4618      	mov	r0, r3
 800148e:	f7ff fe9d 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 8001492:	4623      	mov	r3, r4
    }
 8001494:	4618      	mov	r0, r3
 8001496:	372c      	adds	r7, #44	; 0x2c
 8001498:	46bd      	mov	sp, r7
 800149a:	bd90      	pop	{r4, r7, pc}
 800149c:	0801c850 	.word	0x0801c850
 80014a0:	fffffc14 	.word	0xfffffc14
 80014a4:	0801c79c 	.word	0x0801c79c
 80014a8:	0801c7ac 	.word	0x0801c7ac
 80014ac:	0801c86c 	.word	0x0801c86c
 80014b0:	0801c7e4 	.word	0x0801c7e4
 80014b4:	0801c788 	.word	0x0801c788
 80014b8:	fffffc16 	.word	0xfffffc16

080014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(matrix_t *matrix) {
 80014bc:	b580      	push	{r7, lr}
 80014be:	b084      	sub	sp, #16
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	6078      	str	r0, [r7, #4]
        int r = transpose(matrix->buffer, matrix->cols, matrix->rows);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	6818      	ldr	r0, [r3, #0]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	4619      	mov	r1, r3
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	461a      	mov	r2, r3
 80014d4:	f000 f818 	bl	8001508 <_ZN2ei5numpy9transposeEPfii>
 80014d8:	60f8      	str	r0, [r7, #12]
        if (r != 0) {
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x28>
            return r;
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	e00c      	b.n	80014fe <_ZN2ei5numpy9transposeEPNS_9ei_matrixE+0x42>
        }

        uint16_t old_rows = matrix->rows;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	817b      	strh	r3, [r7, #10]
        uint16_t old_cols = matrix->cols;
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	689b      	ldr	r3, [r3, #8]
 80014ee:	813b      	strh	r3, [r7, #8]

        matrix->rows = old_cols;
 80014f0:	893a      	ldrh	r2, [r7, #8]
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	605a      	str	r2, [r3, #4]
        matrix->cols = old_rows;
 80014f6:	897a      	ldrh	r2, [r7, #10]
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 80014fc:	2300      	movs	r3, #0
    }
 80014fe:	4618      	mov	r0, r3
 8001500:	3710      	adds	r7, #16
 8001502:	46bd      	mov	sp, r7
 8001504:	bd80      	pop	{r7, pc}
	...

08001508 <_ZN2ei5numpy9transposeEPfii>:
     * @param matrix
     * @param rows
     * @param columns
     * @returns EIDSP_OK if OK
     */
    static int transpose(float *matrix, int rows, int columns) {
 8001508:	b590      	push	{r4, r7, lr}
 800150a:	b08f      	sub	sp, #60	; 0x3c
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 8001514:	68b9      	ldr	r1, [r7, #8]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800151c:	2300      	movs	r3, #0
 800151e:	f7ff fe29 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001524:	2b00      	cmp	r3, #0
 8001526:	d10b      	bne.n	8001540 <_ZN2ei5numpy9transposeEPfii+0x38>
 8001528:	4a2d      	ldr	r2, [pc, #180]	; (80015e0 <_ZN2ei5numpy9transposeEPfii+0xd8>)
 800152a:	492e      	ldr	r1, [pc, #184]	; (80015e4 <_ZN2ei5numpy9transposeEPfii+0xdc>)
 800152c:	482e      	ldr	r0, [pc, #184]	; (80015e8 <_ZN2ei5numpy9transposeEPfii+0xe0>)
 800152e:	f01a fa2b 	bl	801b988 <iprintf>
 8001532:	4b2e      	ldr	r3, [pc, #184]	; (80015ec <_ZN2ei5numpy9transposeEPfii+0xe4>)
 8001534:	4a2e      	ldr	r2, [pc, #184]	; (80015f0 <_ZN2ei5numpy9transposeEPfii+0xe8>)
 8001536:	f240 111f 	movw	r1, #287	; 0x11f
 800153a:	482e      	ldr	r0, [pc, #184]	; (80015f4 <_ZN2ei5numpy9transposeEPfii+0xec>)
 800153c:	f019 fd40 	bl	801afc0 <__assert_func>
        if (!temp_matrix.buffer) {
 8001540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001542:	2b00      	cmp	r3, #0
 8001544:	d10b      	bne.n	800155e <_ZN2ei5numpy9transposeEPfii+0x56>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001546:	4a26      	ldr	r2, [pc, #152]	; (80015e0 <_ZN2ei5numpy9transposeEPfii+0xd8>)
 8001548:	4926      	ldr	r1, [pc, #152]	; (80015e4 <_ZN2ei5numpy9transposeEPfii+0xdc>)
 800154a:	4827      	ldr	r0, [pc, #156]	; (80015e8 <_ZN2ei5numpy9transposeEPfii+0xe0>)
 800154c:	f01a fa1c 	bl	801b988 <iprintf>
 8001550:	4b26      	ldr	r3, [pc, #152]	; (80015ec <_ZN2ei5numpy9transposeEPfii+0xe4>)
 8001552:	4a27      	ldr	r2, [pc, #156]	; (80015f0 <_ZN2ei5numpy9transposeEPfii+0xe8>)
 8001554:	f240 1121 	movw	r1, #289	; 0x121
 8001558:	4826      	ldr	r0, [pc, #152]	; (80015f4 <_ZN2ei5numpy9transposeEPfii+0xec>)
 800155a:	f019 fd31 	bl	801afc0 <__assert_func>
        }

#if EIDSP_USE_CMSIS_DSP
        if (rows > EI_MAX_UINT16 || columns > EI_MAX_UINT16) {
 800155e:	68bb      	ldr	r3, [r7, #8]
 8001560:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001564:	da03      	bge.n	800156e <_ZN2ei5numpy9transposeEPfii+0x66>
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800156c:	db01      	blt.n	8001572 <_ZN2ei5numpy9transposeEPfii+0x6a>
            return EIDSP_NARROWING;
 800156e:	4c22      	ldr	r4, [pc, #136]	; (80015f8 <_ZN2ei5numpy9transposeEPfii+0xf0>)
 8001570:	e02c      	b.n	80015cc <_ZN2ei5numpy9transposeEPfii+0xc4>

        const arm_matrix_instance_f32 i_m = {
            static_cast<uint16_t>(columns),
            static_cast<uint16_t>(rows),
            matrix
        };
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	b29b      	uxth	r3, r3
 8001576:	83bb      	strh	r3, [r7, #28]
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	b29b      	uxth	r3, r3
 800157c:	83fb      	strh	r3, [r7, #30]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	623b      	str	r3, [r7, #32]
        arm_matrix_instance_f32 o_m = {
            static_cast<uint16_t>(rows),
            static_cast<uint16_t>(columns),
            temp_matrix.buffer
        };
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	b29b      	uxth	r3, r3
 8001586:	82bb      	strh	r3, [r7, #20]
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	b29b      	uxth	r3, r3
 800158c:	82fb      	strh	r3, [r7, #22]
            temp_matrix.buffer
 800158e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
        };
 8001590:	61bb      	str	r3, [r7, #24]
        arm_status status = arm_mat_trans_f32(&i_m, &o_m);
 8001592:	f107 0214 	add.w	r2, r7, #20
 8001596:	f107 031c 	add.w	r3, r7, #28
 800159a:	4611      	mov	r1, r2
 800159c:	4618      	mov	r0, r3
 800159e:	f008 fc69 	bl	8009e74 <arm_mat_trans_f32>
 80015a2:	4603      	mov	r3, r0
 80015a4:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        if (status != ARM_MATH_SUCCESS) {
 80015a8:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d002      	beq.n	80015b6 <_ZN2ei5numpy9transposeEPfii+0xae>
            return status;
 80015b0:	f997 4037 	ldrsb.w	r4, [r7, #55]	; 0x37
 80015b4:	e00a      	b.n	80015cc <_ZN2ei5numpy9transposeEPfii+0xc4>
                temp_matrix.buffer[j * columns + i] = matrix[i * rows + j];
            }
        }
#endif

        memcpy(matrix, temp_matrix.buffer, rows * columns * sizeof(float));
 80015b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80015b8:	68bb      	ldr	r3, [r7, #8]
 80015ba:	687a      	ldr	r2, [r7, #4]
 80015bc:	fb02 f303 	mul.w	r3, r2, r3
 80015c0:	009b      	lsls	r3, r3, #2
 80015c2:	461a      	mov	r2, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f019 fe07 	bl	801b1d8 <memcpy>

        return EIDSP_OK;
 80015ca:	2400      	movs	r4, #0
        EI_DSP_MATRIX(temp_matrix, rows, columns);
 80015cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7ff fdfb 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 80015d6:	4623      	mov	r3, r4
    }
 80015d8:	4618      	mov	r0, r3
 80015da:	373c      	adds	r7, #60	; 0x3c
 80015dc:	46bd      	mov	sp, r7
 80015de:	bd90      	pop	{r4, r7, pc}
 80015e0:	0801c788 	.word	0x0801c788
 80015e4:	fffffc16 	.word	0xfffffc16
 80015e8:	0801c79c 	.word	0x0801c79c
 80015ec:	0801c7ac 	.word	0x0801c7ac
 80015f0:	0801c8cc 	.word	0x0801c8cc
 80015f4:	0801c7e4 	.word	0x0801c7e4
 80015f8:	fffffc0c 	.word	0xfffffc0c

080015fc <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>:
     * Return the Discrete Cosine Transform of arbitrary type sequence 2.
     * @param input Input array (of size N)
     * @param N number of items in input and output array
     * @returns EIDSP_OK if OK
     */
    static int dct2(float *input, size_t N, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 80015fc:	b580      	push	{r7, lr}
 80015fe:	ed2d 8b02 	vpush	{d8}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	60f8      	str	r0, [r7, #12]
 8001608:	60b9      	str	r1, [r7, #8]
 800160a:	4613      	mov	r3, r2
 800160c:	71fb      	strb	r3, [r7, #7]
        if (N == 0) {
 800160e:	68bb      	ldr	r3, [r7, #8]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d101      	bne.n	8001618 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x1c>
            return EIDSP_OK;
 8001614:	2300      	movs	r3, #0
 8001616:	e06f      	b.n	80016f8 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfc>
        }

        int ret = ei::dct::transform(input, N);
 8001618:	68b9      	ldr	r1, [r7, #8]
 800161a:	68f8      	ldr	r0, [r7, #12]
 800161c:	f00b fab0 	bl	800cb80 <_ZN2ei3dct9transformEPfj>
 8001620:	6178      	str	r0, [r7, #20]
        if (ret != EIDSP_OK) {
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	2b00      	cmp	r3, #0
 8001626:	d00b      	beq.n	8001640 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x44>
            EIDSP_ERR(ret);
 8001628:	4a36      	ldr	r2, [pc, #216]	; (8001704 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x108>)
 800162a:	6979      	ldr	r1, [r7, #20]
 800162c:	4836      	ldr	r0, [pc, #216]	; (8001708 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x10c>)
 800162e:	f01a f9ab 	bl	801b988 <iprintf>
 8001632:	4b36      	ldr	r3, [pc, #216]	; (800170c <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x110>)
 8001634:	4a36      	ldr	r2, [pc, #216]	; (8001710 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x114>)
 8001636:	f240 1181 	movw	r1, #385	; 0x181
 800163a:	4836      	ldr	r0, [pc, #216]	; (8001714 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x118>)
 800163c:	f019 fcc0 	bl	801afc0 <__assert_func>
        }

        // for some reason the output is 2x too low...
        for (size_t ix = 0; ix < N; ix++) {
 8001640:	2300      	movs	r3, #0
 8001642:	61fb      	str	r3, [r7, #28]
 8001644:	69fa      	ldr	r2, [r7, #28]
 8001646:	68bb      	ldr	r3, [r7, #8]
 8001648:	429a      	cmp	r2, r3
 800164a:	d211      	bcs.n	8001670 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x74>
            input[ix] *= 2;
 800164c:	69fb      	ldr	r3, [r7, #28]
 800164e:	009b      	lsls	r3, r3, #2
 8001650:	68fa      	ldr	r2, [r7, #12]
 8001652:	4413      	add	r3, r2
 8001654:	edd3 7a00 	vldr	s15, [r3]
 8001658:	69fb      	ldr	r3, [r7, #28]
 800165a:	009b      	lsls	r3, r3, #2
 800165c:	68fa      	ldr	r2, [r7, #12]
 800165e:	4413      	add	r3, r2
 8001660:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001664:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < N; ix++) {
 8001668:	69fb      	ldr	r3, [r7, #28]
 800166a:	3301      	adds	r3, #1
 800166c:	61fb      	str	r3, [r7, #28]
 800166e:	e7e9      	b.n	8001644 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0x48>
        }

        if (normalization == DCT_NORMALIZATION_ORTHO) {
 8001670:	79fb      	ldrb	r3, [r7, #7]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d13f      	bne.n	80016f6 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfa>
            input[0] = input[0] * sqrt(1.0f / static_cast<float>(4 * N));
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	ed93 8a00 	vldr	s16, [r3]
 800167c:	68bb      	ldr	r3, [r7, #8]
 800167e:	009b      	lsls	r3, r3, #2
 8001680:	ee07 3a90 	vmov	s15, r3
 8001684:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001688:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800168c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8001690:	eeb0 0a47 	vmov.f32	s0, s14
 8001694:	f7ff fd06 	bl	80010a4 <_ZSt4sqrtf>
 8001698:	eef0 7a40 	vmov.f32	s15, s0
 800169c:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80016a6:	2301      	movs	r3, #1
 80016a8:	61bb      	str	r3, [r7, #24]
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	68bb      	ldr	r3, [r7, #8]
 80016ae:	429a      	cmp	r2, r3
 80016b0:	d221      	bcs.n	80016f6 <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xfa>
                input[ix] = input[ix] * sqrt(1.0f / static_cast<float>(2 * N));
 80016b2:	69bb      	ldr	r3, [r7, #24]
 80016b4:	009b      	lsls	r3, r3, #2
 80016b6:	68fa      	ldr	r2, [r7, #12]
 80016b8:	4413      	add	r3, r2
 80016ba:	ed93 8a00 	vldr	s16, [r3]
 80016be:	68bb      	ldr	r3, [r7, #8]
 80016c0:	005b      	lsls	r3, r3, #1
 80016c2:	ee07 3a90 	vmov	s15, r3
 80016c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016ca:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80016ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80016d2:	eeb0 0a47 	vmov.f32	s0, s14
 80016d6:	f7ff fce5 	bl	80010a4 <_ZSt4sqrtf>
 80016da:	eef0 7a40 	vmov.f32	s15, s0
 80016de:	69bb      	ldr	r3, [r7, #24]
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	68fa      	ldr	r2, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	ee68 7a27 	vmul.f32	s15, s16, s15
 80016ea:	edc3 7a00 	vstr	s15, [r3]
            for (size_t ix = 1; ix < N; ix++) {
 80016ee:	69bb      	ldr	r3, [r7, #24]
 80016f0:	3301      	adds	r3, #1
 80016f2:	61bb      	str	r3, [r7, #24]
 80016f4:	e7d9      	b.n	80016aa <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE+0xae>
            }
        }

        return EIDSP_OK;
 80016f6:	2300      	movs	r3, #0
    }
 80016f8:	4618      	mov	r0, r3
 80016fa:	3720      	adds	r7, #32
 80016fc:	46bd      	mov	sp, r7
 80016fe:	ecbd 8b02 	vpop	{d8}
 8001702:	bd80      	pop	{r7, pc}
 8001704:	0801c900 	.word	0x0801c900
 8001708:	0801c79c 	.word	0x0801c79c
 800170c:	0801c7ac 	.word	0x0801c7ac
 8001710:	0801c904 	.word	0x0801c904
 8001714:	0801c7e4 	.word	0x0801c7e4

08001718 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>:
    /**
     * Discrete Cosine Transform of arbitrary type sequence 2 on a matrix.
     * @param matrix
     * @returns EIDSP_OK if OK
     */
    static int dct2(matrix_t *matrix, DCT_NORMALIZATION_MODE normalization = DCT_NORMALIZATION_NONE) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b084      	sub	sp, #16
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
 8001720:	460b      	mov	r3, r1
 8001722:	70fb      	strb	r3, [r7, #3]
        for (size_t row = 0; row < matrix->rows; row++) {
 8001724:	2300      	movs	r3, #0
 8001726:	60fb      	str	r3, [r7, #12]
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	685b      	ldr	r3, [r3, #4]
 800172c:	68fa      	ldr	r2, [r7, #12]
 800172e:	429a      	cmp	r2, r3
 8001730:	d218      	bcs.n	8001764 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4c>
            int r = dct2(matrix->buffer + (row * matrix->cols), matrix->cols, normalization);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681a      	ldr	r2, [r3, #0]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689b      	ldr	r3, [r3, #8]
 800173a:	68f9      	ldr	r1, [r7, #12]
 800173c:	fb01 f303 	mul.w	r3, r1, r3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	18d0      	adds	r0, r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	78fa      	ldrb	r2, [r7, #3]
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff ff56 	bl	80015fc <_ZN2ei5numpy4dct2EPfjNS_22DCT_NORMALIZATION_MODEE>
 8001750:	60b8      	str	r0, [r7, #8]
            if (r != EIDSP_OK) {
 8001752:	68bb      	ldr	r3, [r7, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x44>
                return r;
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	e004      	b.n	8001766 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x4e>
        for (size_t row = 0; row < matrix->rows; row++) {
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	3301      	adds	r3, #1
 8001760:	60fb      	str	r3, [r7, #12]
 8001762:	e7e1      	b.n	8001728 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE+0x10>
            }
        }

        return EIDSP_OK;
 8001764:	2300      	movs	r3, #0
    }
 8001766:	4618      	mov	r0, r3
 8001768:	3710      	adds	r7, #16
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
	...

08001770 <_ZN2ei5numpy17quantize_zero_oneEf>:

    /**
     * Quantize a float value between zero and one
     * @param value Float value
     */
    static uint8_t quantize_zero_one(float value) {
 8001770:	b480      	push	{r7}
 8001772:	b089      	sub	sp, #36	; 0x24
 8001774:	af00      	add	r7, sp, #0
 8001776:	ed87 0a01 	vstr	s0, [r7, #4]
        const size_t length = sizeof(quantized_values_one_zero) / sizeof(float);
 800177a:	23e7      	movs	r3, #231	; 0xe7
 800177c:	613b      	str	r3, [r7, #16]

        // look in the table
        for (size_t ix = 0; ix < length; ix++) {
 800177e:	2300      	movs	r3, #0
 8001780:	61fb      	str	r3, [r7, #28]
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	2be6      	cmp	r3, #230	; 0xe6
 8001786:	d813      	bhi.n	80017b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x40>
            if (quantized_values_one_zero[ix] == value) return ix;
 8001788:	4a4c      	ldr	r2, [pc, #304]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	4413      	add	r3, r2
 8001790:	edd3 7a00 	vldr	s15, [r3]
 8001794:	ed97 7a01 	vldr	s14, [r7, #4]
 8001798:	eeb4 7a67 	vcmp.f32	s14, s15
 800179c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017a0:	d102      	bne.n	80017a8 <_ZN2ei5numpy17quantize_zero_oneEf+0x38>
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	e083      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        for (size_t ix = 0; ix < length; ix++) {
 80017a8:	69fb      	ldr	r3, [r7, #28]
 80017aa:	3301      	adds	r3, #1
 80017ac:	61fb      	str	r3, [r7, #28]
 80017ae:	e7e8      	b.n	8001782 <_ZN2ei5numpy17quantize_zero_oneEf+0x12>
        }

        // no match?

        if (value < quantized_values_one_zero[0]) {
 80017b0:	ed9f 7a43 	vldr	s14, [pc, #268]	; 80018c0 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 80017b4:	edd7 7a01 	vldr	s15, [r7, #4]
 80017b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017c0:	d508      	bpl.n	80017d4 <_ZN2ei5numpy17quantize_zero_oneEf+0x64>
            return quantized_values_one_zero[0];
 80017c2:	eddf 7a3f 	vldr	s15, [pc, #252]	; 80018c0 <_ZN2ei5numpy17quantize_zero_oneEf+0x150>
 80017c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ca:	edc7 7a00 	vstr	s15, [r7]
 80017ce:	683b      	ldr	r3, [r7, #0]
 80017d0:	b2db      	uxtb	r3, r3
 80017d2:	e06d      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }
        if (value > quantized_values_one_zero[length - 1]) {
 80017d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80017d8:	edd7 7a01 	vldr	s15, [r7, #4]
 80017dc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	dd08      	ble.n	80017f8 <_ZN2ei5numpy17quantize_zero_oneEf+0x88>
            return quantized_values_one_zero[length - 1];
 80017e6:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80017ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80017ee:	edc7 7a00 	vstr	s15, [r7]
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	e05b      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
        }

        int lo = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	61bb      	str	r3, [r7, #24]
        int hi = length - 1;
 80017fc:	23e6      	movs	r3, #230	; 0xe6
 80017fe:	617b      	str	r3, [r7, #20]

        while (lo <= hi) {
 8001800:	69ba      	ldr	r2, [r7, #24]
 8001802:	697b      	ldr	r3, [r7, #20]
 8001804:	429a      	cmp	r2, r3
 8001806:	dc35      	bgt.n	8001874 <_ZN2ei5numpy17quantize_zero_oneEf+0x104>
            int mid = (hi + lo) / 2;
 8001808:	697a      	ldr	r2, [r7, #20]
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	4413      	add	r3, r2
 800180e:	0fda      	lsrs	r2, r3, #31
 8001810:	4413      	add	r3, r2
 8001812:	105b      	asrs	r3, r3, #1
 8001814:	60fb      	str	r3, [r7, #12]

            if (value < quantized_values_one_zero[mid]) {
 8001816:	4a29      	ldr	r2, [pc, #164]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	4413      	add	r3, r2
 800181e:	edd3 7a00 	vldr	s15, [r3]
 8001822:	ed97 7a01 	vldr	s14, [r7, #4]
 8001826:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800182a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800182e:	d503      	bpl.n	8001838 <_ZN2ei5numpy17quantize_zero_oneEf+0xc8>
                hi = mid - 1;
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	3b01      	subs	r3, #1
 8001834:	617b      	str	r3, [r7, #20]
 8001836:	e7e3      	b.n	8001800 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else if (value > quantized_values_one_zero[mid]) {
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	4413      	add	r3, r2
 8001840:	edd3 7a00 	vldr	s15, [r3]
 8001844:	ed97 7a01 	vldr	s14, [r7, #4]
 8001848:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800184c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001850:	dd03      	ble.n	800185a <_ZN2ei5numpy17quantize_zero_oneEf+0xea>
                lo = mid + 1;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	3301      	adds	r3, #1
 8001856:	61bb      	str	r3, [r7, #24]
 8001858:	e7d2      	b.n	8001800 <_ZN2ei5numpy17quantize_zero_oneEf+0x90>
            } else {
                return quantized_values_one_zero[mid];
 800185a:	4a18      	ldr	r2, [pc, #96]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	009b      	lsls	r3, r3, #2
 8001860:	4413      	add	r3, r2
 8001862:	edd3 7a00 	vldr	s15, [r3]
 8001866:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800186a:	edc7 7a00 	vstr	s15, [r7]
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	b2db      	uxtb	r3, r3
 8001872:	e01d      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
            }
        }

        // lo == hi + 1
        return (quantized_values_one_zero[lo] - value) < (value - quantized_values_one_zero[hi]) ?
 8001874:	4a11      	ldr	r2, [pc, #68]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 8001876:	69bb      	ldr	r3, [r7, #24]
 8001878:	009b      	lsls	r3, r3, #2
 800187a:	4413      	add	r3, r2
 800187c:	ed93 7a00 	vldr	s14, [r3]
 8001880:	edd7 7a01 	vldr	s15, [r7, #4]
 8001884:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001888:	4a0c      	ldr	r2, [pc, #48]	; (80018bc <_ZN2ei5numpy17quantize_zero_oneEf+0x14c>)
 800188a:	697b      	ldr	r3, [r7, #20]
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	4413      	add	r3, r2
 8001890:	edd3 7a00 	vldr	s15, [r3]
 8001894:	edd7 6a01 	vldr	s13, [r7, #4]
 8001898:	ee76 7ae7 	vsub.f32	s15, s13, s15
            lo :
            hi;
 800189c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018a4:	d502      	bpl.n	80018ac <_ZN2ei5numpy17quantize_zero_oneEf+0x13c>
 80018a6:	69bb      	ldr	r3, [r7, #24]
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	e001      	b.n	80018b0 <_ZN2ei5numpy17quantize_zero_oneEf+0x140>
 80018ac:	697b      	ldr	r3, [r7, #20]
 80018ae:	b2db      	uxtb	r3, r3
    }
 80018b0:	4618      	mov	r0, r3
 80018b2:	3724      	adds	r7, #36	; 0x24
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr
 80018bc:	0801efb4 	.word	0x0801efb4
 80018c0:	00000000 	.word	0x00000000

080018c4 <_ZN2ei5numpy19dequantize_zero_oneEh>:

    /**
     * Dequantize a float value between zero and one
     * @param value
     */
    static float dequantize_zero_one(uint8_t value) {
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	4603      	mov	r3, r0
 80018cc:	71fb      	strb	r3, [r7, #7]
        if (value > 247) value = 247;
 80018ce:	79fb      	ldrb	r3, [r7, #7]
 80018d0:	2bf7      	cmp	r3, #247	; 0xf7
 80018d2:	d901      	bls.n	80018d8 <_ZN2ei5numpy19dequantize_zero_oneEh+0x14>
 80018d4:	23f7      	movs	r3, #247	; 0xf7
 80018d6:	71fb      	strb	r3, [r7, #7]
        return quantized_values_one_zero[value];
 80018d8:	79fb      	ldrb	r3, [r7, #7]
 80018da:	4a06      	ldr	r2, [pc, #24]	; (80018f4 <_ZN2ei5numpy19dequantize_zero_oneEh+0x30>)
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	ee07 3a90 	vmov	s15, r3
    }
 80018e6:	eeb0 0a67 	vmov.f32	s0, s15
 80018ea:	370c      	adds	r7, #12
 80018ec:	46bd      	mov	sp, r7
 80018ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f2:	4770      	bx	lr
 80018f4:	0801efb4 	.word	0x0801efb4

080018f8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>:
     * @param output Output matrix of size (M+pad_before+pad_after x N)
     * @param pad_before Number of items to pad before
     * @param pad_after Number of items to pad after
     * @returns 0 if OK
     */
    static int pad_1d_symmetric(matrix_t *input, matrix_t *output, uint16_t pad_before, uint16_t pad_after) {
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b08a      	sub	sp, #40	; 0x28
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	60f8      	str	r0, [r7, #12]
 8001900:	60b9      	str	r1, [r7, #8]
 8001902:	4611      	mov	r1, r2
 8001904:	461a      	mov	r2, r3
 8001906:	460b      	mov	r3, r1
 8001908:	80fb      	strh	r3, [r7, #6]
 800190a:	4613      	mov	r3, r2
 800190c:	80bb      	strh	r3, [r7, #4]
        if (output->cols != input->cols) {
 800190e:	68bb      	ldr	r3, [r7, #8]
 8001910:	689a      	ldr	r2, [r3, #8]
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	689b      	ldr	r3, [r3, #8]
 8001916:	429a      	cmp	r2, r3
 8001918:	d00b      	beq.n	8001932 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x3a>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800191a:	4a75      	ldr	r2, [pc, #468]	; (8001af0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1f8>)
 800191c:	4975      	ldr	r1, [pc, #468]	; (8001af4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1fc>)
 800191e:	4876      	ldr	r0, [pc, #472]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 8001920:	f01a f832 	bl	801b988 <iprintf>
 8001924:	4b75      	ldr	r3, [pc, #468]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001926:	4a76      	ldr	r2, [pc, #472]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001928:	f240 11e1 	movw	r1, #481	; 0x1e1
 800192c:	4875      	ldr	r0, [pc, #468]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800192e:	f019 fb47 	bl	801afc0 <__assert_func>
        }

        if (output->rows != input->rows + pad_before + pad_after) {
 8001932:	68bb      	ldr	r3, [r7, #8]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	6859      	ldr	r1, [r3, #4]
 800193a:	88fb      	ldrh	r3, [r7, #6]
 800193c:	4419      	add	r1, r3
 800193e:	88bb      	ldrh	r3, [r7, #4]
 8001940:	440b      	add	r3, r1
 8001942:	429a      	cmp	r2, r3
 8001944:	d00b      	beq.n	800195e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x66>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001946:	4a6a      	ldr	r2, [pc, #424]	; (8001af0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1f8>)
 8001948:	496a      	ldr	r1, [pc, #424]	; (8001af4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1fc>)
 800194a:	486b      	ldr	r0, [pc, #428]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 800194c:	f01a f81c 	bl	801b988 <iprintf>
 8001950:	4b6a      	ldr	r3, [pc, #424]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001952:	4a6b      	ldr	r2, [pc, #428]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001954:	f240 11e5 	movw	r1, #485	; 0x1e5
 8001958:	486a      	ldr	r0, [pc, #424]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800195a:	f019 fb31 	bl	801afc0 <__assert_func>
        }

        if (input->rows == 0) {
 800195e:	68fb      	ldr	r3, [r7, #12]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d10b      	bne.n	800197e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x86>
            EIDSP_ERR(EIDSP_INPUT_MATRIX_EMPTY);
 8001966:	4a68      	ldr	r2, [pc, #416]	; (8001b08 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x210>)
 8001968:	4968      	ldr	r1, [pc, #416]	; (8001b0c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x214>)
 800196a:	4863      	ldr	r0, [pc, #396]	; (8001af8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x200>)
 800196c:	f01a f80c 	bl	801b988 <iprintf>
 8001970:	4b62      	ldr	r3, [pc, #392]	; (8001afc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x204>)
 8001972:	4a63      	ldr	r2, [pc, #396]	; (8001b00 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x208>)
 8001974:	f240 11e9 	movw	r1, #489	; 0x1e9
 8001978:	4862      	ldr	r0, [pc, #392]	; (8001b04 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x20c>)
 800197a:	f019 fb21 	bl	801afc0 <__assert_func>
        }

        uint32_t pad_before_index = 0;
 800197e:	2300      	movs	r3, #0
 8001980:	627b      	str	r3, [r7, #36]	; 0x24
        bool pad_before_direction_up = true;
 8001982:	2301      	movs	r3, #1
 8001984:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001988:	88fb      	ldrh	r3, [r7, #6]
 800198a:	3b01      	subs	r3, #1
 800198c:	61fb      	str	r3, [r7, #28]
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	2b00      	cmp	r3, #0
 8001992:	db42      	blt.n	8001a1a <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x122>
            memcpy(output->buffer + (input->cols * ix),
 8001994:	68bb      	ldr	r3, [r7, #8]
 8001996:	681a      	ldr	r2, [r3, #0]
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	689b      	ldr	r3, [r3, #8]
 800199c:	69f9      	ldr	r1, [r7, #28]
 800199e:	fb01 f303 	mul.w	r3, r1, r3
 80019a2:	009b      	lsls	r3, r3, #2
 80019a4:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_before_index * input->cols),
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	681a      	ldr	r2, [r3, #0]
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	689b      	ldr	r3, [r3, #8]
 80019ae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80019b0:	fb01 f303 	mul.w	r3, r1, r3
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	689b      	ldr	r3, [r3, #8]
 80019bc:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * ix),
 80019be:	461a      	mov	r2, r3
 80019c0:	f019 fc0a 	bl	801b1d8 <memcpy>

            if (pad_before_index == 0 && !pad_before_direction_up) {
 80019c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d10a      	bne.n	80019e0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe8>
 80019ca:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019ce:	f083 0301 	eor.w	r3, r3, #1
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d003      	beq.n	80019e0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0xe8>
                pad_before_direction_up = true;
 80019d8:	2301      	movs	r3, #1
 80019da:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019de:	e018      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else if (pad_before_index == input->rows - 1 && pad_before_direction_up) {
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	685b      	ldr	r3, [r3, #4]
 80019e4:	3b01      	subs	r3, #1
 80019e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019e8:	429a      	cmp	r2, r3
 80019ea:	d107      	bne.n	80019fc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>
 80019ec:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d003      	beq.n	80019fc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x104>
                pad_before_direction_up = false;
 80019f4:	2300      	movs	r3, #0
 80019f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80019fa:	e00a      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else if (pad_before_direction_up) {
 80019fc:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d003      	beq.n	8001a0c <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x114>
                pad_before_index++;
 8001a04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a06:	3301      	adds	r3, #1
 8001a08:	627b      	str	r3, [r7, #36]	; 0x24
 8001a0a:	e002      	b.n	8001a12 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x11a>
            }
            else {
                pad_before_index--;
 8001a0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0e:	3b01      	subs	r3, #1
 8001a10:	627b      	str	r3, [r7, #36]	; 0x24
        for (int32_t ix = pad_before - 1; ix >= 0; ix--) {
 8001a12:	69fb      	ldr	r3, [r7, #28]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	61fb      	str	r3, [r7, #28]
 8001a18:	e7b9      	b.n	800198e <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x96>
            }
        }

        memcpy(output->buffer + (input->cols * pad_before),
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	88f9      	ldrh	r1, [r7, #6]
 8001a24:	fb01 f303 	mul.w	r3, r1, r3
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	18d0      	adds	r0, r2, r3
            input->buffer,
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6819      	ldr	r1, [r3, #0]
            input->rows * input->cols * sizeof(float));
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	68fa      	ldr	r2, [r7, #12]
 8001a36:	6892      	ldr	r2, [r2, #8]
 8001a38:	fb02 f303 	mul.w	r3, r2, r3
 8001a3c:	009b      	lsls	r3, r3, #2
        memcpy(output->buffer + (input->cols * pad_before),
 8001a3e:	461a      	mov	r2, r3
 8001a40:	f019 fbca 	bl	801b1d8 <memcpy>

        int32_t pad_after_index = input->rows - 1;
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	3b01      	subs	r3, #1
 8001a4a:	61bb      	str	r3, [r7, #24]
        bool pad_after_direction_up = false;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	75fb      	strb	r3, [r7, #23]

        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001a50:	2300      	movs	r3, #0
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	88bb      	ldrh	r3, [r7, #4]
 8001a56:	693a      	ldr	r2, [r7, #16]
 8001a58:	429a      	cmp	r2, r3
 8001a5a:	da43      	bge.n	8001ae4 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1ec>
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	681a      	ldr	r2, [r3, #0]
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	689b      	ldr	r3, [r3, #8]
 8001a64:	88f8      	ldrh	r0, [r7, #6]
 8001a66:	6939      	ldr	r1, [r7, #16]
 8001a68:	4401      	add	r1, r0
 8001a6a:	4608      	mov	r0, r1
 8001a6c:	68f9      	ldr	r1, [r7, #12]
 8001a6e:	6849      	ldr	r1, [r1, #4]
 8001a70:	4401      	add	r1, r0
 8001a72:	fb01 f303 	mul.w	r3, r1, r3
 8001a76:	009b      	lsls	r3, r3, #2
 8001a78:	18d0      	adds	r0, r2, r3
                input->buffer + (pad_after_index * input->cols),
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	69b9      	ldr	r1, [r7, #24]
 8001a84:	fb01 f303 	mul.w	r3, r1, r3
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	18d1      	adds	r1, r2, r3
                input->cols * sizeof(float));
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	009b      	lsls	r3, r3, #2
            memcpy(output->buffer + (input->cols * (ix + pad_before + input->rows)),
 8001a92:	461a      	mov	r2, r3
 8001a94:	f019 fba0 	bl	801b1d8 <memcpy>

            if (pad_after_index == 0 && !pad_after_direction_up) {
 8001a98:	69bb      	ldr	r3, [r7, #24]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d108      	bne.n	8001ab0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b8>
 8001a9e:	7dfb      	ldrb	r3, [r7, #23]
 8001aa0:	f083 0301 	eor.w	r3, r3, #1
 8001aa4:	b2db      	uxtb	r3, r3
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d002      	beq.n	8001ab0 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1b8>
                pad_after_direction_up = true;
 8001aaa:	2301      	movs	r3, #1
 8001aac:	75fb      	strb	r3, [r7, #23]
 8001aae:	e015      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else if (pad_after_index == static_cast<int32_t>(input->rows) - 1 && pad_after_direction_up) {
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	685b      	ldr	r3, [r3, #4]
 8001ab4:	3b01      	subs	r3, #1
 8001ab6:	69ba      	ldr	r2, [r7, #24]
 8001ab8:	429a      	cmp	r2, r3
 8001aba:	d105      	bne.n	8001ac8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1d0>
 8001abc:	7dfb      	ldrb	r3, [r7, #23]
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d002      	beq.n	8001ac8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1d0>
                pad_after_direction_up = false;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	75fb      	strb	r3, [r7, #23]
 8001ac6:	e009      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else if (pad_after_direction_up) {
 8001ac8:	7dfb      	ldrb	r3, [r7, #23]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d003      	beq.n	8001ad6 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1de>
                pad_after_index++;
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	61bb      	str	r3, [r7, #24]
 8001ad4:	e002      	b.n	8001adc <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x1e4>
            }
            else {
                pad_after_index--;
 8001ad6:	69bb      	ldr	r3, [r7, #24]
 8001ad8:	3b01      	subs	r3, #1
 8001ada:	61bb      	str	r3, [r7, #24]
        for (int32_t ix = 0; ix < pad_after; ix++) {
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	3301      	adds	r3, #1
 8001ae0:	613b      	str	r3, [r7, #16]
 8001ae2:	e7b7      	b.n	8001a54 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt+0x15c>
            }
        }

        return EIDSP_OK;
 8001ae4:	2300      	movs	r3, #0
    }
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3728      	adds	r7, #40	; 0x28
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	0801c850 	.word	0x0801c850
 8001af4:	fffffc14 	.word	0xfffffc14
 8001af8:	0801c79c 	.word	0x0801c79c
 8001afc:	0801c7ac 	.word	0x0801c7ac
 8001b00:	0801c94c 	.word	0x0801c94c
 8001b04:	0801c7e4 	.word	0x0801c7e4
 8001b08:	0801c9a8 	.word	0x0801c9a8
 8001b0c:	fffffc12 	.word	0xfffffc12

08001b10 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>:
     * Calculate the mean over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int mean_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b086      	sub	sp, #24
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
        if (input_matrix->cols != output_matrix->rows) {
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	689a      	ldr	r2, [r3, #8]
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d00b      	beq.n	8001b3e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b26:	4a34      	ldr	r2, [pc, #208]	; (8001bf8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xe8>)
 8001b28:	4934      	ldr	r1, [pc, #208]	; (8001bfc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xec>)
 8001b2a:	4835      	ldr	r0, [pc, #212]	; (8001c00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001b2c:	f019 ff2c 	bl	801b988 <iprintf>
 8001b30:	4b34      	ldr	r3, [pc, #208]	; (8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001b32:	4a35      	ldr	r2, [pc, #212]	; (8001c08 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001b34:	f44f 713b 	mov.w	r1, #748	; 0x2ec
 8001b38:	4834      	ldr	r0, [pc, #208]	; (8001c0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001b3a:	f019 fa41 	bl	801afc0 <__assert_func>
        }

        if (output_matrix->cols != 1) {
 8001b3e:	683b      	ldr	r3, [r7, #0]
 8001b40:	689b      	ldr	r3, [r3, #8]
 8001b42:	2b01      	cmp	r3, #1
 8001b44:	d00b      	beq.n	8001b5e <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x4e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8001b46:	4a2c      	ldr	r2, [pc, #176]	; (8001bf8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xe8>)
 8001b48:	492c      	ldr	r1, [pc, #176]	; (8001bfc <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xec>)
 8001b4a:	482d      	ldr	r0, [pc, #180]	; (8001c00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001b4c:	f019 ff1c 	bl	801b988 <iprintf>
 8001b50:	4b2c      	ldr	r3, [pc, #176]	; (8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001b52:	4a2d      	ldr	r2, [pc, #180]	; (8001c08 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001b54:	f44f 713c 	mov.w	r1, #752	; 0x2f0
 8001b58:	482c      	ldr	r0, [pc, #176]	; (8001c0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001b5a:	f019 fa31 	bl	801afc0 <__assert_func>
        }

        int ret = transpose(input_matrix);
 8001b5e:	6878      	ldr	r0, [r7, #4]
 8001b60:	f7ff fcac 	bl	80014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8001b64:	6138      	str	r0, [r7, #16]
        if (ret != EIDSP_OK) {
 8001b66:	693b      	ldr	r3, [r7, #16]
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d00b      	beq.n	8001b84 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x74>
            EIDSP_ERR(ret);
 8001b6c:	4a28      	ldr	r2, [pc, #160]	; (8001c10 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x100>)
 8001b6e:	6939      	ldr	r1, [r7, #16]
 8001b70:	4823      	ldr	r0, [pc, #140]	; (8001c00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001b72:	f019 ff09 	bl	801b988 <iprintf>
 8001b76:	4b23      	ldr	r3, [pc, #140]	; (8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001b78:	4a23      	ldr	r2, [pc, #140]	; (8001c08 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001b7a:	f240 21f5 	movw	r1, #757	; 0x2f5
 8001b7e:	4823      	ldr	r0, [pc, #140]	; (8001c0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001b80:	f019 fa1e 	bl	801afc0 <__assert_func>
        }

        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001b84:	2300      	movs	r3, #0
 8001b86:	617b      	str	r3, [r7, #20]
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	697a      	ldr	r2, [r7, #20]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d21a      	bcs.n	8001bc8 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xb8>
#if EIDSP_USE_CMSIS_DSP
            float mean;
            arm_mean_f32(input_matrix->buffer + (row * input_matrix->cols), input_matrix->cols, &mean);
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	6979      	ldr	r1, [r7, #20]
 8001b9c:	fb01 f303 	mul.w	r3, r1, r3
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	18d0      	adds	r0, r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	f107 020c 	add.w	r2, r7, #12
 8001bac:	4619      	mov	r1, r3
 8001bae:	f008 f9a2 	bl	8009ef6 <arm_mean_f32>
            output_matrix->buffer[row] = mean;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	009b      	lsls	r3, r3, #2
 8001bba:	4413      	add	r3, r2
 8001bbc:	68fa      	ldr	r2, [r7, #12]
 8001bbe:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < input_matrix->rows; row++) {
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	617b      	str	r3, [r7, #20]
 8001bc6:	e7df      	b.n	8001b88 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x78>
            output_matrix->buffer[row] = sum / input_matrix->cols;
#endif
        }

        // retranspose
        ret = transpose(input_matrix);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f7ff fc77 	bl	80014bc <_ZN2ei5numpy9transposeEPNS_9ei_matrixE>
 8001bce:	6138      	str	r0, [r7, #16]
        if (ret != EIDSP_OK) {
 8001bd0:	693b      	ldr	r3, [r7, #16]
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d00b      	beq.n	8001bee <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xde>
            EIDSP_ERR(ret);
 8001bd6:	4a0e      	ldr	r2, [pc, #56]	; (8001c10 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0x100>)
 8001bd8:	6939      	ldr	r1, [r7, #16]
 8001bda:	4809      	ldr	r0, [pc, #36]	; (8001c00 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf0>)
 8001bdc:	f019 fed4 	bl	801b988 <iprintf>
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf4>)
 8001be2:	4a09      	ldr	r2, [pc, #36]	; (8001c08 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xf8>)
 8001be4:	f44f 7143 	mov.w	r1, #780	; 0x30c
 8001be8:	4808      	ldr	r0, [pc, #32]	; (8001c0c <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_+0xfc>)
 8001bea:	f019 f9e9 	bl	801afc0 <__assert_func>
        }

        return EIDSP_OK;
 8001bee:	2300      	movs	r3, #0
    }
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	3718      	adds	r7, #24
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	bd80      	pop	{r7, pc}
 8001bf8:	0801c850 	.word	0x0801c850
 8001bfc:	fffffc14 	.word	0xfffffc14
 8001c00:	0801c79c 	.word	0x0801c79c
 8001c04:	0801c7ac 	.word	0x0801c7ac
 8001c08:	0801ca78 	.word	0x0801ca78
 8001c0c:	0801c7e4 	.word	0x0801c7e4
 8001c10:	0801c900 	.word	0x0801c900

08001c14 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>:
     * Calculate the standard deviation over a matrix on axis 0
     * @param input_matrix Input matrix (MxN)
     * @param output_matrix Output matrix (Nx1)
     * @returns 0 if OK
     */
    static int std_axis0(matrix_t *input_matrix, matrix_t *output_matrix) {
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
#if EIDSP_USE_CMSIS_DSP
        return std_axis0_CMSIS(input_matrix, output_matrix);
 8001c1e:	6839      	ldr	r1, [r7, #0]
 8001c20:	6878      	ldr	r0, [r7, #4]
 8001c22:	f000 fd4b 	bl	80026bc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>
 8001c26:	4603      	mov	r3, r0
            EIDSP_ERR(ret);
        }

        return EIDSP_OK;
#endif
    }
 8001c28:	4618      	mov	r0, r3
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <_ZN2ei5numpy4rfftEPKfjPfjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, float *output, size_t output_size, size_t n_fft) {
 8001c30:	b5b0      	push	{r4, r5, r7, lr}
 8001c32:	b098      	sub	sp, #96	; 0x60
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	60f8      	str	r0, [r7, #12]
 8001c38:	60b9      	str	r1, [r7, #8]
 8001c3a:	607a      	str	r2, [r7, #4]
 8001c3c:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001c3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c40:	085b      	lsrs	r3, r3, #1
 8001c42:	3301      	adds	r3, #1
 8001c44:	657b      	str	r3, [r7, #84]	; 0x54
        if (output_size != n_fft_out_features) {
 8001c46:	683a      	ldr	r2, [r7, #0]
 8001c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d00b      	beq.n	8001c66 <_ZN2ei5numpy4rfftEPKfjPfjj+0x36>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001c4e:	4a88      	ldr	r2, [pc, #544]	; (8001e70 <_ZN2ei5numpy4rfftEPKfjPfjj+0x240>)
 8001c50:	4988      	ldr	r1, [pc, #544]	; (8001e74 <_ZN2ei5numpy4rfftEPKfjPfjj+0x244>)
 8001c52:	4889      	ldr	r0, [pc, #548]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001c54:	f019 fe98 	bl	801b988 <iprintf>
 8001c58:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001c5a:	4a89      	ldr	r2, [pc, #548]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001c5c:	f240 4146 	movw	r1, #1094	; 0x446
 8001c60:	4888      	ldr	r0, [pc, #544]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001c62:	f019 f9ad 	bl	801afc0 <__assert_func>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001c66:	68ba      	ldr	r2, [r7, #8]
 8001c68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c6a:	429a      	cmp	r2, r3
 8001c6c:	d901      	bls.n	8001c72 <_ZN2ei5numpy4rfftEPKfjPfjj+0x42>
            src_size = n_fft;
 8001c6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001c70:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001c72:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 8001c76:	2300      	movs	r3, #0
 8001c78:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001c7a:	2101      	movs	r1, #1
 8001c7c:	f7ff fa7a 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001c80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	d10b      	bne.n	8001c9e <_ZN2ei5numpy4rfftEPKfjPfjj+0x6e>
 8001c86:	4a80      	ldr	r2, [pc, #512]	; (8001e88 <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001c88:	4980      	ldr	r1, [pc, #512]	; (8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001c8a:	487b      	ldr	r0, [pc, #492]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001c8c:	f019 fe7c 	bl	801b988 <iprintf>
 8001c90:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001c92:	4a7b      	ldr	r2, [pc, #492]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001c94:	f240 414f 	movw	r1, #1103	; 0x44f
 8001c98:	487a      	ldr	r0, [pc, #488]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001c9a:	f019 f991 	bl	801afc0 <__assert_func>
        if (!fft_input.buffer) {
 8001c9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d10b      	bne.n	8001cbc <_ZN2ei5numpy4rfftEPKfjPfjj+0x8c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001ca4:	4a78      	ldr	r2, [pc, #480]	; (8001e88 <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001ca6:	4979      	ldr	r1, [pc, #484]	; (8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001ca8:	4873      	ldr	r0, [pc, #460]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001caa:	f019 fe6d 	bl	801b988 <iprintf>
 8001cae:	4b73      	ldr	r3, [pc, #460]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001cb0:	4a73      	ldr	r2, [pc, #460]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001cb2:	f240 4151 	movw	r1, #1105	; 0x451
 8001cb6:	4873      	ldr	r0, [pc, #460]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001cb8:	f019 f982 	bl	801afc0 <__assert_func>
        }

        // copy from src to fft_input
        memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001cbc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	009b      	lsls	r3, r3, #2
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	68f9      	ldr	r1, [r7, #12]
 8001cc6:	f019 fa87 	bl	801b1d8 <memcpy>
        // pad to the rigth with zeros
        memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(kiss_fft_scalar));
 8001cca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ccc:	68bb      	ldr	r3, [r7, #8]
 8001cce:	009b      	lsls	r3, r3, #2
 8001cd0:	18d0      	adds	r0, r2, r3
 8001cd2:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	1ad3      	subs	r3, r2, r3
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	461a      	mov	r2, r3
 8001cdc:	2100      	movs	r1, #0
 8001cde:	f019 faa3 	bl	801b228 <memset>

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001ce2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ce4:	2b20      	cmp	r3, #32
 8001ce6:	d030      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001ce8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cea:	2b40      	cmp	r3, #64	; 0x40
 8001cec:	d02d      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001cee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf0:	2b80      	cmp	r3, #128	; 0x80
 8001cf2:	d02a      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001cf4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cf6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cfa:	d026      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001cfc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001cfe:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d02:	d022      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001d04:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001d0a:	d01e      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001d0c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d12:	d01a      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
 8001d14:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001d1a:	d016      	beq.n	8001d4a <_ZN2ei5numpy4rfftEPKfjPfjj+0x11a>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001d1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001d1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d22:	6879      	ldr	r1, [r7, #4]
 8001d24:	f000 fb00 	bl	8002328 <_ZN2ei5numpy13software_rfftEPfS1_jj>
 8001d28:	6538      	str	r0, [r7, #80]	; 0x50
            if (ret != EIDSP_OK) {
 8001d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	f000 8093 	beq.w	8001e58 <_ZN2ei5numpy4rfftEPKfjPfjj+0x228>
                EIDSP_ERR(ret);
 8001d32:	4a57      	ldr	r2, [pc, #348]	; (8001e90 <_ZN2ei5numpy4rfftEPKfjPfjj+0x260>)
 8001d34:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001d36:	4850      	ldr	r0, [pc, #320]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001d38:	f019 fe26 	bl	801b988 <iprintf>
 8001d3c:	4b4f      	ldr	r3, [pc, #316]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001d3e:	4a50      	ldr	r2, [pc, #320]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001d40:	f240 415e 	movw	r1, #1118	; 0x45e
 8001d44:	484f      	ldr	r0, [pc, #316]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001d46:	f019 f93b 	bl	801afc0 <__assert_func>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 8001d4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d4c:	b29a      	uxth	r2, r3
 8001d4e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001d52:	4611      	mov	r1, r2
 8001d54:	4618      	mov	r0, r3
 8001d56:	f00a fe89 	bl	800ca6c <arm_rfft_fast_init_f32>
 8001d5a:	4603      	mov	r3, r0
 8001d5c:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
            if (status != ARM_MATH_SUCCESS) {
 8001d60:	f997 304f 	ldrsb.w	r3, [r7, #79]	; 0x4f
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <_ZN2ei5numpy4rfftEPKfjPfjj+0x13e>
                return status;
 8001d68:	f997 404f 	ldrsb.w	r4, [r7, #79]	; 0x4f
 8001d6c:	e076      	b.n	8001e5c <_ZN2ei5numpy4rfftEPKfjPfjj+0x22c>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001d6e:	f107 0014 	add.w	r0, r7, #20
 8001d72:	2300      	movs	r3, #0
 8001d74:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001d76:	2101      	movs	r1, #1
 8001d78:	f7ff f9fc 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d10b      	bne.n	8001d9a <_ZN2ei5numpy4rfftEPKfjPfjj+0x16a>
 8001d82:	4a41      	ldr	r2, [pc, #260]	; (8001e88 <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001d84:	4941      	ldr	r1, [pc, #260]	; (8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001d86:	483c      	ldr	r0, [pc, #240]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001d88:	f019 fdfe 	bl	801b988 <iprintf>
 8001d8c:	4b3b      	ldr	r3, [pc, #236]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001d8e:	4a3c      	ldr	r2, [pc, #240]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001d90:	f240 4169 	movw	r1, #1129	; 0x469
 8001d94:	483b      	ldr	r0, [pc, #236]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001d96:	f019 f913 	bl	801afc0 <__assert_func>
            if (!fft_output.buffer) {
 8001d9a:	697b      	ldr	r3, [r7, #20]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d10b      	bne.n	8001db8 <_ZN2ei5numpy4rfftEPKfjPfjj+0x188>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001da0:	4a39      	ldr	r2, [pc, #228]	; (8001e88 <_ZN2ei5numpy4rfftEPKfjPfjj+0x258>)
 8001da2:	493a      	ldr	r1, [pc, #232]	; (8001e8c <_ZN2ei5numpy4rfftEPKfjPfjj+0x25c>)
 8001da4:	4834      	ldr	r0, [pc, #208]	; (8001e78 <_ZN2ei5numpy4rfftEPKfjPfjj+0x248>)
 8001da6:	f019 fdef 	bl	801b988 <iprintf>
 8001daa:	4b34      	ldr	r3, [pc, #208]	; (8001e7c <_ZN2ei5numpy4rfftEPKfjPfjj+0x24c>)
 8001dac:	4a34      	ldr	r2, [pc, #208]	; (8001e80 <_ZN2ei5numpy4rfftEPKfjPfjj+0x250>)
 8001dae:	f240 416b 	movw	r1, #1131	; 0x46b
 8001db2:	4834      	ldr	r0, [pc, #208]	; (8001e84 <_ZN2ei5numpy4rfftEPKfjPfjj+0x254>)
 8001db4:	f019 f904 	bl	801afc0 <__assert_func>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8001db8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001dba:	697a      	ldr	r2, [r7, #20]
 8001dbc:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	f00a fcf3 	bl	800c7ac <arm_rfft_fast_f32>

            output[0] = fft_output.buffer[0];
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	681a      	ldr	r2, [r3, #0]
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1] = fft_output.buffer[1];
 8001dce:	697a      	ldr	r2, [r7, #20]
 8001dd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dd2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	009b      	lsls	r3, r3, #2
 8001dda:	6879      	ldr	r1, [r7, #4]
 8001ddc:	440b      	add	r3, r1
 8001dde:	6852      	ldr	r2, [r2, #4]
 8001de0:	601a      	str	r2, [r3, #0]

            size_t fft_output_buffer_ix = 2;
 8001de2:	2302      	movs	r3, #2
 8001de4:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001de6:	2301      	movs	r3, #1
 8001de8:	65bb      	str	r3, [r7, #88]	; 0x58
 8001dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001dec:	3b01      	subs	r3, #1
 8001dee:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001df0:	429a      	cmp	r2, r3
 8001df2:	d22b      	bcs.n	8001e4c <_ZN2ei5numpy4rfftEPKfjPfjj+0x21c>
                float rms_result;
                arm_rms_f32(fft_output.buffer + fft_output_buffer_ix, 2, &rms_result);
 8001df4:	697a      	ldr	r2, [r7, #20]
 8001df6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001df8:	009b      	lsls	r3, r3, #2
 8001dfa:	4413      	add	r3, r2
 8001dfc:	f107 0210 	add.w	r2, r7, #16
 8001e00:	2102      	movs	r1, #2
 8001e02:	4618      	mov	r0, r3
 8001e04:	f008 f8a6 	bl	8009f54 <arm_rms_f32>
                output[ix] = rms_result * sqrt(2);
 8001e08:	693b      	ldr	r3, [r7, #16]
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fbbc 	bl	8000588 <__aeabi_f2d>
 8001e10:	4604      	mov	r4, r0
 8001e12:	460d      	mov	r5, r1
 8001e14:	2002      	movs	r0, #2
 8001e16:	f003 fbf6 	bl	8005606 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>
 8001e1a:	ec53 2b10 	vmov	r2, r3, d0
 8001e1e:	4620      	mov	r0, r4
 8001e20:	4629      	mov	r1, r5
 8001e22:	f7fe fc09 	bl	8000638 <__aeabi_dmul>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4610      	mov	r0, r2
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	687a      	ldr	r2, [r7, #4]
 8001e34:	18d4      	adds	r4, r2, r3
 8001e36:	f7fe fef7 	bl	8000c28 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	6023      	str	r3, [r4, #0]

                fft_output_buffer_ix += 2;
 8001e3e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001e40:	3302      	adds	r3, #2
 8001e42:	65fb      	str	r3, [r7, #92]	; 0x5c
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 8001e44:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001e46:	3301      	adds	r3, #1
 8001e48:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e4a:	e7ce      	b.n	8001dea <_ZN2ei5numpy4rfftEPKfjPfjj+0x1ba>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001e4c:	f107 0314 	add.w	r3, r7, #20
 8001e50:	4618      	mov	r0, r3
 8001e52:	f7ff f9bb 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 8001e56:	e000      	b.n	8001e5a <_ZN2ei5numpy4rfftEPKfjPfjj+0x22a>
            }
 8001e58:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 8001e5a:	2400      	movs	r4, #0
        EI_DSP_MATRIX(fft_input, 1, n_fft);
 8001e5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001e60:	4618      	mov	r0, r3
 8001e62:	f7ff f9b3 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 8001e66:	4623      	mov	r3, r4
    }
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3760      	adds	r7, #96	; 0x60
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bdb0      	pop	{r4, r5, r7, pc}
 8001e70:	0801cbe0 	.word	0x0801cbe0
 8001e74:	fffffc11 	.word	0xfffffc11
 8001e78:	0801c79c 	.word	0x0801c79c
 8001e7c:	0801c7ac 	.word	0x0801c7ac
 8001e80:	0801cbfc 	.word	0x0801cbfc
 8001e84:	0801c7e4 	.word	0x0801c7e4
 8001e88:	0801c788 	.word	0x0801c788
 8001e8c:	fffffc16 	.word	0xfffffc16
 8001e90:	0801c900 	.word	0x0801c900

08001e94 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>:
     * @param src_size Size of the source buffer
     * @param output Output buffer
     * @param output_size Size of the output buffer, should be n_fft / 2 + 1
     * @returns 0 if OK
     */
    static int rfft(const float *src, size_t src_size, fft_complex_t *output, size_t output_size, size_t n_fft) {
 8001e94:	b590      	push	{r4, r7, lr}
 8001e96:	b099      	sub	sp, #100	; 0x64
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	60f8      	str	r0, [r7, #12]
 8001e9c:	60b9      	str	r1, [r7, #8]
 8001e9e:	607a      	str	r2, [r7, #4]
 8001ea0:	603b      	str	r3, [r7, #0]
        size_t n_fft_out_features = (n_fft / 2) + 1;
 8001ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ea4:	085b      	lsrs	r3, r3, #1
 8001ea6:	3301      	adds	r3, #1
 8001ea8:	653b      	str	r3, [r7, #80]	; 0x50
        if (output_size != n_fft_out_features) {
 8001eaa:	683a      	ldr	r2, [r7, #0]
 8001eac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d00b      	beq.n	8001eca <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x36>
            EIDSP_ERR(EIDSP_BUFFER_SIZE_MISMATCH);
 8001eb2:	4a8d      	ldr	r2, [pc, #564]	; (80020e8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x254>)
 8001eb4:	498d      	ldr	r1, [pc, #564]	; (80020ec <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x258>)
 8001eb6:	488e      	ldr	r0, [pc, #568]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8001eb8:	f019 fd66 	bl	801b988 <iprintf>
 8001ebc:	4b8d      	ldr	r3, [pc, #564]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8001ebe:	4a8e      	ldr	r2, [pc, #568]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8001ec0:	f240 4193 	movw	r1, #1171	; 0x493
 8001ec4:	488d      	ldr	r0, [pc, #564]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8001ec6:	f019 f87b 	bl	801afc0 <__assert_func>
        }

        // truncate if needed
        if (src_size > n_fft) {
 8001eca:	68ba      	ldr	r2, [r7, #8]
 8001ecc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ece:	429a      	cmp	r2, r3
 8001ed0:	d901      	bls.n	8001ed6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x42>
            src_size = n_fft;
 8001ed2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ed4:	60bb      	str	r3, [r7, #8]
        }

        // declare input and output arrays
        float *fft_input_buffer = NULL;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	65fb      	str	r3, [r7, #92]	; 0x5c
        if (src_size == n_fft) {
 8001eda:	68ba      	ldr	r2, [r7, #8]
 8001edc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d101      	bne.n	8001ee6 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x52>
            fft_input_buffer = (float*)src;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	65fb      	str	r3, [r7, #92]	; 0x5c
        }

        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 8001ee6:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001eea:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001eec:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001eee:	2101      	movs	r1, #1
 8001ef0:	f7ff f940 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001ef4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d10b      	bne.n	8001f12 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x7e>
 8001efa:	4a81      	ldr	r2, [pc, #516]	; (8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8001efc:	4981      	ldr	r1, [pc, #516]	; (8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8001efe:	487c      	ldr	r0, [pc, #496]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8001f00:	f019 fd42 	bl	801b988 <iprintf>
 8001f04:	4b7b      	ldr	r3, [pc, #492]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8001f06:	4a7c      	ldr	r2, [pc, #496]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8001f08:	f240 41a1 	movw	r1, #1185	; 0x4a1
 8001f0c:	487b      	ldr	r0, [pc, #492]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8001f0e:	f019 f857 	bl	801afc0 <__assert_func>
        if (!fft_input.buffer) {
 8001f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d10b      	bne.n	8001f30 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x9c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8001f18:	4a79      	ldr	r2, [pc, #484]	; (8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8001f1a:	497a      	ldr	r1, [pc, #488]	; (8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8001f1c:	4874      	ldr	r0, [pc, #464]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8001f1e:	f019 fd33 	bl	801b988 <iprintf>
 8001f22:	4b74      	ldr	r3, [pc, #464]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8001f24:	4a74      	ldr	r2, [pc, #464]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8001f26:	f240 41a3 	movw	r1, #1187	; 0x4a3
 8001f2a:	4874      	ldr	r0, [pc, #464]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8001f2c:	f019 f848 	bl	801afc0 <__assert_func>
        }

        if (!fft_input_buffer) {
 8001f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d112      	bne.n	8001f5c <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0xc8>
            // copy from src to fft_input
            memcpy(fft_input.buffer, src, src_size * sizeof(float));
 8001f36:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f38:	68bb      	ldr	r3, [r7, #8]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	f019 f94a 	bl	801b1d8 <memcpy>
            // pad to the rigth with zeros
            memset(fft_input.buffer + src_size, 0, (n_fft - src_size) * sizeof(float));
 8001f44:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	009b      	lsls	r3, r3, #2
 8001f4a:	18d0      	adds	r0, r2, r3
 8001f4c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	461a      	mov	r2, r3
 8001f56:	2100      	movs	r1, #0
 8001f58:	f019 f966 	bl	801b228 <memset>
        }

#if EIDSP_USE_CMSIS_DSP
        if (n_fft != 32 && n_fft != 64 && n_fft != 128 && n_fft != 256 &&
 8001f5c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f5e:	2b20      	cmp	r3, #32
 8001f60:	d030      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f64:	2b40      	cmp	r3, #64	; 0x40
 8001f66:	d02d      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f68:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f6a:	2b80      	cmp	r3, #128	; 0x80
 8001f6c:	d02a      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f6e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001f74:	d026      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f76:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7c:	d022      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
            n_fft != 512 && n_fft != 1024 && n_fft != 2048 && n_fft != 4096) {
 8001f7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f84:	d01e      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f86:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f88:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f8c:	d01a      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
 8001f8e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001f90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f94:	d016      	beq.n	8001fc4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x130>
            int ret = software_rfft(fft_input.buffer, output, n_fft, n_fft_out_features);
 8001f96:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f9a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001f9c:	6879      	ldr	r1, [r7, #4]
 8001f9e:	f000 fa55 	bl	800244c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>
 8001fa2:	64f8      	str	r0, [r7, #76]	; 0x4c
            if (ret != EIDSP_OK) {
 8001fa4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f000 8091 	beq.w	80020ce <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23a>
                EIDSP_ERR(ret);
 8001fac:	4a56      	ldr	r2, [pc, #344]	; (8002108 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x274>)
 8001fae:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8001fb0:	484f      	ldr	r0, [pc, #316]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8001fb2:	f019 fce9 	bl	801b988 <iprintf>
 8001fb6:	4b4f      	ldr	r3, [pc, #316]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8001fb8:	4a4f      	ldr	r2, [pc, #316]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8001fba:	f240 41b2 	movw	r1, #1202	; 0x4b2
 8001fbe:	484f      	ldr	r0, [pc, #316]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8001fc0:	f018 fffe 	bl	801afc0 <__assert_func>
            }
        }
        else {
            // hardware acceleration only works for the powers above...
            arm_rfft_fast_instance_f32 rfft_instance;
            arm_status status = arm_rfft_fast_init_f32(&rfft_instance, n_fft);
 8001fc4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001fc6:	b29a      	uxth	r2, r3
 8001fc8:	f107 0320 	add.w	r3, r7, #32
 8001fcc:	4611      	mov	r1, r2
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f00a fd4c 	bl	800ca6c <arm_rfft_fast_init_f32>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
            if (status != ARM_MATH_SUCCESS) {
 8001fda:	f997 304b 	ldrsb.w	r3, [r7, #75]	; 0x4b
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d002      	beq.n	8001fe8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x154>
                return status;
 8001fe2:	f997 404b 	ldrsb.w	r4, [r7, #75]	; 0x4b
 8001fe6:	e074      	b.n	80020d2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23e>
            }

            EI_DSP_MATRIX(fft_output, 1, n_fft);
 8001fe8:	f107 0010 	add.w	r0, r7, #16
 8001fec:	2300      	movs	r3, #0
 8001fee:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8001ff0:	2101      	movs	r1, #1
 8001ff2:	f7ff f8bf 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8001ff6:	693b      	ldr	r3, [r7, #16]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d10b      	bne.n	8002014 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x180>
 8001ffc:	4a40      	ldr	r2, [pc, #256]	; (8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 8001ffe:	4941      	ldr	r1, [pc, #260]	; (8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 8002000:	483b      	ldr	r0, [pc, #236]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002002:	f019 fcc1 	bl	801b988 <iprintf>
 8002006:	4b3b      	ldr	r3, [pc, #236]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8002008:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 800200a:	f240 41bd 	movw	r1, #1213	; 0x4bd
 800200e:	483b      	ldr	r0, [pc, #236]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 8002010:	f018 ffd6 	bl	801afc0 <__assert_func>
            if (!fft_output.buffer) {
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	2b00      	cmp	r3, #0
 8002018:	d10b      	bne.n	8002032 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x19e>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800201a:	4a39      	ldr	r2, [pc, #228]	; (8002100 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x26c>)
 800201c:	4939      	ldr	r1, [pc, #228]	; (8002104 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x270>)
 800201e:	4834      	ldr	r0, [pc, #208]	; (80020f0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x25c>)
 8002020:	f019 fcb2 	bl	801b988 <iprintf>
 8002024:	4b33      	ldr	r3, [pc, #204]	; (80020f4 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x260>)
 8002026:	4a34      	ldr	r2, [pc, #208]	; (80020f8 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x264>)
 8002028:	f240 41bf 	movw	r1, #1215	; 0x4bf
 800202c:	4833      	ldr	r0, [pc, #204]	; (80020fc <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x268>)
 800202e:	f018 ffc7 	bl	801afc0 <__assert_func>
            }

            arm_rfft_fast_f32(&rfft_instance, fft_input.buffer, fft_output.buffer, 0);
 8002032:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8002034:	693a      	ldr	r2, [r7, #16]
 8002036:	f107 0020 	add.w	r0, r7, #32
 800203a:	2300      	movs	r3, #0
 800203c:	f00a fbb6 	bl	800c7ac <arm_rfft_fast_f32>

            output[0].r = fft_output.buffer[0];
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	681a      	ldr	r2, [r3, #0]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	601a      	str	r2, [r3, #0]
            output[0].i = 0.0f;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f04f 0200 	mov.w	r2, #0
 800204e:	605a      	str	r2, [r3, #4]
            output[n_fft_out_features - 1].r = fft_output.buffer[1];
 8002050:	693a      	ldr	r2, [r7, #16]
 8002052:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002054:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 8002058:	3b01      	subs	r3, #1
 800205a:	00db      	lsls	r3, r3, #3
 800205c:	6879      	ldr	r1, [r7, #4]
 800205e:	440b      	add	r3, r1
 8002060:	6852      	ldr	r2, [r2, #4]
 8002062:	601a      	str	r2, [r3, #0]
            output[n_fft_out_features - 1].i = 0.0f;
 8002064:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002066:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800206a:	3b01      	subs	r3, #1
 800206c:	00db      	lsls	r3, r3, #3
 800206e:	687a      	ldr	r2, [r7, #4]
 8002070:	4413      	add	r3, r2
 8002072:	f04f 0200 	mov.w	r2, #0
 8002076:	605a      	str	r2, [r3, #4]

            size_t fft_output_buffer_ix = 2;
 8002078:	2302      	movs	r3, #2
 800207a:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 800207c:	2301      	movs	r3, #1
 800207e:	657b      	str	r3, [r7, #84]	; 0x54
 8002080:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002082:	3b01      	subs	r3, #1
 8002084:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002086:	429a      	cmp	r2, r3
 8002088:	d21b      	bcs.n	80020c2 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x22e>
                output[ix].r = fft_output.buffer[fft_output_buffer_ix];
 800208a:	693a      	ldr	r2, [r7, #16]
 800208c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800208e:	009b      	lsls	r3, r3, #2
 8002090:	441a      	add	r2, r3
 8002092:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002094:	00db      	lsls	r3, r3, #3
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	440b      	add	r3, r1
 800209a:	6812      	ldr	r2, [r2, #0]
 800209c:	601a      	str	r2, [r3, #0]
                output[ix].i = fft_output.buffer[fft_output_buffer_ix + 1];
 800209e:	693a      	ldr	r2, [r7, #16]
 80020a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020a2:	3301      	adds	r3, #1
 80020a4:	009b      	lsls	r3, r3, #2
 80020a6:	441a      	add	r2, r3
 80020a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020aa:	00db      	lsls	r3, r3, #3
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	440b      	add	r3, r1
 80020b0:	6812      	ldr	r2, [r2, #0]
 80020b2:	605a      	str	r2, [r3, #4]

                fft_output_buffer_ix += 2;
 80020b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80020b6:	3302      	adds	r3, #2
 80020b8:	65bb      	str	r3, [r7, #88]	; 0x58
            for (size_t ix = 1; ix < n_fft_out_features - 1; ix += 1) {
 80020ba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80020bc:	3301      	adds	r3, #1
 80020be:	657b      	str	r3, [r7, #84]	; 0x54
 80020c0:	e7de      	b.n	8002080 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x1ec>
            EI_DSP_MATRIX(fft_output, 1, n_fft);
 80020c2:	f107 0310 	add.w	r3, r7, #16
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff f880 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 80020cc:	e000      	b.n	80020d0 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj+0x23c>
            }
 80020ce:	bf00      	nop
        if (ret != EIDSP_OK) {
            EIDSP_ERR(ret);
        }
#endif

        return EIDSP_OK;
 80020d0:	2400      	movs	r4, #0
        EI_DSP_MATRIX_B(fft_input, 1, n_fft, fft_input_buffer);
 80020d2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7ff f878 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 80020dc:	4623      	mov	r3, r4
    }
 80020de:	4618      	mov	r0, r3
 80020e0:	3764      	adds	r7, #100	; 0x64
 80020e2:	46bd      	mov	sp, r7
 80020e4:	bd90      	pop	{r4, r7, pc}
 80020e6:	bf00      	nop
 80020e8:	0801cbe0 	.word	0x0801cbe0
 80020ec:	fffffc11 	.word	0xfffffc11
 80020f0:	0801c79c 	.word	0x0801c79c
 80020f4:	0801c7ac 	.word	0x0801c7ac
 80020f8:	0801cc48 	.word	0x0801cc48
 80020fc:	0801c7e4 	.word	0x0801c7e4
 8002100:	0801c788 	.word	0x0801c788
 8002104:	fffffc16 	.word	0xfffffc16
 8002108:	0801c900 	.word	0x0801c900

0800210c <_ZN2ei5numpy8linspaceEffmPf>:
     * @param stop The end value of the sequence.
     * @param number Number of samples to generate.
     * @param out Out array, with size `number`
     * @returns 0 if OK
     */
    static int linspace(float start, float stop, uint32_t number, float *out)
 800210c:	b580      	push	{r7, lr}
 800210e:	b086      	sub	sp, #24
 8002110:	af00      	add	r7, sp, #0
 8002112:	ed87 0a03 	vstr	s0, [r7, #12]
 8002116:	edc7 0a02 	vstr	s1, [r7, #8]
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
    {
        if (number < 1 || !out) {
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	2b00      	cmp	r3, #0
 8002122:	d002      	beq.n	800212a <_ZN2ei5numpy8linspaceEffmPf+0x1e>
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d10b      	bne.n	8002142 <_ZN2ei5numpy8linspaceEffmPf+0x36>
            EIDSP_ERR(EIDSP_PARAMETER_INVALID);
 800212a:	4a28      	ldr	r2, [pc, #160]	; (80021cc <_ZN2ei5numpy8linspaceEffmPf+0xc0>)
 800212c:	4928      	ldr	r1, [pc, #160]	; (80021d0 <_ZN2ei5numpy8linspaceEffmPf+0xc4>)
 800212e:	4829      	ldr	r0, [pc, #164]	; (80021d4 <_ZN2ei5numpy8linspaceEffmPf+0xc8>)
 8002130:	f019 fc2a 	bl	801b988 <iprintf>
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <_ZN2ei5numpy8linspaceEffmPf+0xcc>)
 8002136:	4a29      	ldr	r2, [pc, #164]	; (80021dc <_ZN2ei5numpy8linspaceEffmPf+0xd0>)
 8002138:	f240 41ec 	movw	r1, #1260	; 0x4ec
 800213c:	4828      	ldr	r0, [pc, #160]	; (80021e0 <_ZN2ei5numpy8linspaceEffmPf+0xd4>)
 800213e:	f018 ff3f 	bl	801afc0 <__assert_func>
        }

        if (number == 1) {
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2b01      	cmp	r3, #1
 8002146:	d104      	bne.n	8002152 <_ZN2ei5numpy8linspaceEffmPf+0x46>
            out[0] = start;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	68fa      	ldr	r2, [r7, #12]
 800214c:	601a      	str	r2, [r3, #0]
            return EIDSP_OK;
 800214e:	2300      	movs	r3, #0
 8002150:	e037      	b.n	80021c2 <_ZN2ei5numpy8linspaceEffmPf+0xb6>
        }

        // step size
        float step = (stop - start) / (number - 1);
 8002152:	ed97 7a02 	vldr	s14, [r7, #8]
 8002156:	edd7 7a03 	vldr	s15, [r7, #12]
 800215a:	ee77 6a67 	vsub.f32	s13, s14, s15
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	3b01      	subs	r3, #1
 8002162:	ee07 3a90 	vmov	s15, r3
 8002166:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800216a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800216e:	edc7 7a04 	vstr	s15, [r7, #16]

        // do steps
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 8002172:	2300      	movs	r3, #0
 8002174:	617b      	str	r3, [r7, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	3b01      	subs	r3, #1
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	429a      	cmp	r2, r3
 800217e:	d216      	bcs.n	80021ae <_ZN2ei5numpy8linspaceEffmPf+0xa2>
            out[ix] = start + ix * step;
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	ee07 3a90 	vmov	s15, r3
 8002186:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800218a:	edd7 7a04 	vldr	s15, [r7, #16]
 800218e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002192:	697b      	ldr	r3, [r7, #20]
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	4413      	add	r3, r2
 800219a:	edd7 7a03 	vldr	s15, [r7, #12]
 800219e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021a2:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t ix = 0; ix < number - 1; ix++) {
 80021a6:	697b      	ldr	r3, [r7, #20]
 80021a8:	3301      	adds	r3, #1
 80021aa:	617b      	str	r3, [r7, #20]
 80021ac:	e7e3      	b.n	8002176 <_ZN2ei5numpy8linspaceEffmPf+0x6a>
        }

        // last entry always stop
        out[number - 1] = stop;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80021b4:	3b01      	subs	r3, #1
 80021b6:	009b      	lsls	r3, r3, #2
 80021b8:	683a      	ldr	r2, [r7, #0]
 80021ba:	4413      	add	r3, r2
 80021bc:	68ba      	ldr	r2, [r7, #8]
 80021be:	601a      	str	r2, [r3, #0]

        return EIDSP_OK;
 80021c0:	2300      	movs	r3, #0
    }
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	0801cca0 	.word	0x0801cca0
 80021d0:	fffffc10 	.word	0xfffffc10
 80021d4:	0801c79c 	.word	0x0801c79c
 80021d8:	0801c7ac 	.word	0x0801c7ac
 80021dc:	0801ccb8 	.word	0x0801ccb8
 80021e0:	0801c7e4 	.word	0x0801c7e4

080021e4 <_ZN2ei5numpy14int16_to_floatEPKsPfj>:
     * @param input
     * @param output
     * @param length
     * @returns 0 if OK
     */
    static int int16_to_float(const EIDSP_i16 *input, float *output, size_t length) {
 80021e4:	b580      	push	{r7, lr}
 80021e6:	b084      	sub	sp, #16
 80021e8:	af00      	add	r7, sp, #0
 80021ea:	60f8      	str	r0, [r7, #12]
 80021ec:	60b9      	str	r1, [r7, #8]
 80021ee:	607a      	str	r2, [r7, #4]
#if EIDSP_USE_CMSIS_DSP
        arm_q15_to_float(input, output, length);
 80021f0:	687a      	ldr	r2, [r7, #4]
 80021f2:	68b9      	ldr	r1, [r7, #8]
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f007 fef5 	bl	8009fe4 <arm_q15_to_float>
#else
        for (size_t ix = 0; ix < length; ix++) {
            output[ix] = (float)(input[ix]) / 32768;
        }
#endif
        return EIDSP_OK;
 80021fa:	2300      	movs	r3, #0
    }
 80021fc:	4618      	mov	r0, r3
 80021fe:	3710      	adds	r7, #16
 8002200:	46bd      	mov	sp, r7
 8002202:	bd80      	pop	{r7, pc}

08002204 <_ZN2ei5numpy3logEPNS_9ei_matrixE>:
    /**
     * Calculate the natural log value of a matrix. Does an in-place replacement.
     * @param matrix Matrix (MxN)
     * @returns 0 if OK
     */
    static int log(matrix_t *matrix)
 8002204:	b590      	push	{r4, r7, lr}
 8002206:	b08d      	sub	sp, #52	; 0x34
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
    {
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 800220c:	2300      	movs	r3, #0
 800220e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	687a      	ldr	r2, [r7, #4]
 8002216:	6892      	ldr	r2, [r2, #8]
 8002218:	fb02 f303 	mul.w	r3, r2, r3
 800221c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800221e:	429a      	cmp	r2, r3
 8002220:	d26e      	bcs.n	8002300 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xfc>
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	4413      	add	r3, r2
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6811      	ldr	r1, [r2, #0]
 8002232:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002234:	0092      	lsls	r2, r2, #2
 8002236:	188c      	adds	r4, r1, r2
 8002238:	60fb      	str	r3, [r7, #12]
        g = (int32_t) * ((int32_t *)&a);
 800223a:	f107 030c 	add.w	r3, r7, #12
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	60bb      	str	r3, [r7, #8]
        e = (g - 0x3f2aaaab) & 0xff800000;
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	4b31      	ldr	r3, [pc, #196]	; (800230c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x108>)
 8002246:	4413      	add	r3, r2
 8002248:	0ddb      	lsrs	r3, r3, #23
 800224a:	05db      	lsls	r3, r3, #23
 800224c:	62bb      	str	r3, [r7, #40]	; 0x28
        g = g - e;
 800224e:	68ba      	ldr	r2, [r7, #8]
 8002250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002252:	1ad3      	subs	r3, r2, r3
 8002254:	60bb      	str	r3, [r7, #8]
        m = (float) * ((float *)&g);
 8002256:	f107 0308 	add.w	r3, r7, #8
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 800225e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002260:	ee07 3a90 	vmov	s15, r3
 8002264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002268:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002310 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x10c>
 800226c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002270:	edc7 7a08 	vstr	s15, [r7, #32]
        f = m - 1.0f;
 8002274:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8002278:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800227c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002280:	edc7 7a07 	vstr	s15, [r7, #28]
        s = f * f;
 8002284:	edd7 7a07 	vldr	s15, [r7, #28]
 8002288:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800228c:	edc7 7a06 	vstr	s15, [r7, #24]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 8002290:	ed9f 1a20 	vldr	s2, [pc, #128]	; 8002314 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x110>
 8002294:	edd7 0a07 	vldr	s1, [r7, #28]
 8002298:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 8002318 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x114>
 800229c:	f016 f910 	bl	80184c0 <fmaf>
 80022a0:	ed87 0a05 	vstr	s0, [r7, #20]
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80022a4:	ed9f 1a1d 	vldr	s2, [pc, #116]	; 800231c <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x118>
 80022a8:	edd7 0a07 	vldr	s1, [r7, #28]
 80022ac:	ed9f 0a1c 	vldr	s0, [pc, #112]	; 8002320 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x11c>
 80022b0:	f016 f906 	bl	80184c0 <fmaf>
 80022b4:	ed87 0a04 	vstr	s0, [r7, #16]
        r = fmaf(r, s, t);
 80022b8:	ed97 1a04 	vldr	s2, [r7, #16]
 80022bc:	edd7 0a06 	vldr	s1, [r7, #24]
 80022c0:	ed97 0a05 	vldr	s0, [r7, #20]
 80022c4:	f016 f8fc 	bl	80184c0 <fmaf>
 80022c8:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, f);
 80022cc:	ed97 1a07 	vldr	s2, [r7, #28]
 80022d0:	edd7 0a06 	vldr	s1, [r7, #24]
 80022d4:	ed97 0a05 	vldr	s0, [r7, #20]
 80022d8:	f016 f8f2 	bl	80184c0 <fmaf>
 80022dc:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 80022e0:	ed97 1a05 	vldr	s2, [r7, #20]
 80022e4:	eddf 0a0f 	vldr	s1, [pc, #60]	; 8002324 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0x120>
 80022e8:	ed97 0a08 	vldr	s0, [r7, #32]
 80022ec:	f016 f8e8 	bl	80184c0 <fmaf>
 80022f0:	ed87 0a05 	vstr	s0, [r7, #20]
        return r;
 80022f4:	697b      	ldr	r3, [r7, #20]
            matrix->buffer[ix] = numpy::log(matrix->buffer[ix]);
 80022f6:	6023      	str	r3, [r4, #0]
        for (uint32_t ix = 0; ix < matrix->rows * matrix->cols; ix++) {
 80022f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022fa:	3301      	adds	r3, #1
 80022fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022fe:	e787      	b.n	8002210 <_ZN2ei5numpy3logEPNS_9ei_matrixE+0xc>
        }

        return EIDSP_OK;
 8002300:	2300      	movs	r3, #0
    }
 8002302:	4618      	mov	r0, r3
 8002304:	3734      	adds	r7, #52	; 0x34
 8002306:	46bd      	mov	sp, r7
 8002308:	bd90      	pop	{r4, r7, pc}
 800230a:	bf00      	nop
 800230c:	c0d55555 	.word	0xc0d55555
 8002310:	34000000 	.word	0x34000000
 8002314:	be8ef46d 	.word	0xbe8ef46d
 8002318:	3e6c6078 	.word	0x3e6c6078
 800231c:	beff712d 	.word	0xbeff712d
 8002320:	3ea9e51a 	.word	0x3ea9e51a
 8002324:	3f317218 	.word	0x3f317218

08002328 <_ZN2ei5numpy13software_rfftEPfS1_jj>:

private:
    static int software_rfft(float *fft_input, float *output, size_t n_fft, size_t n_fft_out_features) {
 8002328:	b5b0      	push	{r4, r5, r7, lr}
 800232a:	b08a      	sub	sp, #40	; 0x28
 800232c:	af02      	add	r7, sp, #8
 800232e:	60f8      	str	r0, [r7, #12]
 8002330:	60b9      	str	r1, [r7, #8]
 8002332:	607a      	str	r2, [r7, #4]
 8002334:	603b      	str	r3, [r7, #0]
        kiss_fft_cpx *fft_output = (kiss_fft_cpx*)ei_dsp_malloc(n_fft_out_features * sizeof(kiss_fft_cpx));
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	00db      	lsls	r3, r3, #3
 800233a:	4618      	mov	r0, r3
 800233c:	f018 ff2e 	bl	801b19c <malloc>
 8002340:	4603      	mov	r3, r0
 8002342:	61bb      	str	r3, [r7, #24]
        if (!fft_output) {
 8002344:	69bb      	ldr	r3, [r7, #24]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d10b      	bne.n	8002362 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x3a>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800234a:	4a3a      	ldr	r2, [pc, #232]	; (8002434 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x10c>)
 800234c:	493a      	ldr	r1, [pc, #232]	; (8002438 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x110>)
 800234e:	483b      	ldr	r0, [pc, #236]	; (800243c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x114>)
 8002350:	f019 fb1a 	bl	801b988 <iprintf>
 8002354:	4b3a      	ldr	r3, [pc, #232]	; (8002440 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x118>)
 8002356:	4a3b      	ldr	r2, [pc, #236]	; (8002444 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x11c>)
 8002358:	f240 516f 	movw	r1, #1391	; 0x56f
 800235c:	483a      	ldr	r0, [pc, #232]	; (8002448 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x120>)
 800235e:	f018 fe2f 	bl	801afc0 <__assert_func>
        }

        size_t kiss_fftr_mem_length;

        // create fftr context
        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 8002362:	6878      	ldr	r0, [r7, #4]
 8002364:	f107 0310 	add.w	r3, r7, #16
 8002368:	9300      	str	r3, [sp, #0]
 800236a:	2300      	movs	r3, #0
 800236c:	2200      	movs	r2, #0
 800236e:	2100      	movs	r1, #0
 8002370:	f00b fe3e 	bl	800dff0 <kiss_fftr_alloc>
 8002374:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10e      	bne.n	800239a <_ZN2ei5numpy13software_rfftEPfS1_jj+0x72>
            ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 800237c:	69b8      	ldr	r0, [r7, #24]
 800237e:	f018 ff15 	bl	801b1ac <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002382:	4a2c      	ldr	r2, [pc, #176]	; (8002434 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x10c>)
 8002384:	492c      	ldr	r1, [pc, #176]	; (8002438 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x110>)
 8002386:	482d      	ldr	r0, [pc, #180]	; (800243c <_ZN2ei5numpy13software_rfftEPfS1_jj+0x114>)
 8002388:	f019 fafe 	bl	801b988 <iprintf>
 800238c:	4b2c      	ldr	r3, [pc, #176]	; (8002440 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x118>)
 800238e:	4a2d      	ldr	r2, [pc, #180]	; (8002444 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x11c>)
 8002390:	f44f 61af 	mov.w	r1, #1400	; 0x578
 8002394:	482c      	ldr	r0, [pc, #176]	; (8002448 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x120>)
 8002396:	f018 fe13 	bl	801afc0 <__assert_func>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, fft_output);
 800239a:	69ba      	ldr	r2, [r7, #24]
 800239c:	68f9      	ldr	r1, [r7, #12]
 800239e:	6978      	ldr	r0, [r7, #20]
 80023a0:	f00b fefc 	bl	800e19c <kiss_fftr>

        // and write back to the output
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 80023a4:	2300      	movs	r3, #0
 80023a6:	61fb      	str	r3, [r7, #28]
 80023a8:	69fa      	ldr	r2, [r7, #28]
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d235      	bcs.n	800241c <_ZN2ei5numpy13software_rfftEPfS1_jj+0xf4>
            output[ix] = sqrt(pow(fft_output[ix].r, 2) + pow(fft_output[ix].i, 2));
 80023b0:	69fb      	ldr	r3, [r7, #28]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	69ba      	ldr	r2, [r7, #24]
 80023b6:	4413      	add	r3, r2
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	2002      	movs	r0, #2
 80023be:	eeb0 0a67 	vmov.f32	s0, s15
 80023c2:	f003 f938 	bl	8005636 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023c6:	ec55 4b10 	vmov	r4, r5, d0
 80023ca:	69fb      	ldr	r3, [r7, #28]
 80023cc:	00db      	lsls	r3, r3, #3
 80023ce:	69ba      	ldr	r2, [r7, #24]
 80023d0:	4413      	add	r3, r2
 80023d2:	edd3 7a01 	vldr	s15, [r3, #4]
 80023d6:	2002      	movs	r0, #2
 80023d8:	eeb0 0a67 	vmov.f32	s0, s15
 80023dc:	f003 f92b 	bl	8005636 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>
 80023e0:	ec53 2b10 	vmov	r2, r3, d0
 80023e4:	4620      	mov	r0, r4
 80023e6:	4629      	mov	r1, r5
 80023e8:	f7fd ff70 	bl	80002cc <__adddf3>
 80023ec:	4602      	mov	r2, r0
 80023ee:	460b      	mov	r3, r1
 80023f0:	ec43 2b17 	vmov	d7, r2, r3
 80023f4:	eeb0 0a47 	vmov.f32	s0, s14
 80023f8:	eef0 0a67 	vmov.f32	s1, s15
 80023fc:	f016 f99a 	bl	8018734 <sqrt>
 8002400:	ec51 0b10 	vmov	r0, r1, d0
 8002404:	69fb      	ldr	r3, [r7, #28]
 8002406:	009b      	lsls	r3, r3, #2
 8002408:	68ba      	ldr	r2, [r7, #8]
 800240a:	18d4      	adds	r4, r2, r3
 800240c:	f7fe fc0c 	bl	8000c28 <__aeabi_d2f>
 8002410:	4603      	mov	r3, r0
 8002412:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < n_fft_out_features; ix++) {
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	3301      	adds	r3, #1
 8002418:	61fb      	str	r3, [r7, #28]
 800241a:	e7c5      	b.n	80023a8 <_ZN2ei5numpy13software_rfftEPfS1_jj+0x80>
        }

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 800241c:	6978      	ldr	r0, [r7, #20]
 800241e:	f018 fec5 	bl	801b1ac <free>
        ei_dsp_free(fft_output, n_fft_out_features * sizeof(kiss_fft_cpx));
 8002422:	69b8      	ldr	r0, [r7, #24]
 8002424:	f018 fec2 	bl	801b1ac <free>

        return EIDSP_OK;
 8002428:	2300      	movs	r3, #0
    }
 800242a:	4618      	mov	r0, r3
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bdb0      	pop	{r4, r5, r7, pc}
 8002432:	bf00      	nop
 8002434:	0801c788 	.word	0x0801c788
 8002438:	fffffc16 	.word	0xfffffc16
 800243c:	0801c79c 	.word	0x0801c79c
 8002440:	0801c7ac 	.word	0x0801c7ac
 8002444:	0801ccf8 	.word	0x0801ccf8
 8002448:	0801c7e4 	.word	0x0801c7e4

0800244c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj>:

    static int software_rfft(float *fft_input, fft_complex_t *output, size_t n_fft, size_t n_fft_out_features)
 800244c:	b580      	push	{r7, lr}
 800244e:	b088      	sub	sp, #32
 8002450:	af02      	add	r7, sp, #8
 8002452:	60f8      	str	r0, [r7, #12]
 8002454:	60b9      	str	r1, [r7, #8]
 8002456:	607a      	str	r2, [r7, #4]
 8002458:	603b      	str	r3, [r7, #0]
    {
        // create fftr context
        size_t kiss_fftr_mem_length;

        kiss_fftr_cfg cfg = kiss_fftr_alloc(n_fft, 0, NULL, NULL, &kiss_fftr_mem_length);
 800245a:	6878      	ldr	r0, [r7, #4]
 800245c:	f107 0310 	add.w	r3, r7, #16
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	2300      	movs	r3, #0
 8002464:	2200      	movs	r2, #0
 8002466:	2100      	movs	r1, #0
 8002468:	f00b fdc2 	bl	800dff0 <kiss_fftr_alloc>
 800246c:	6178      	str	r0, [r7, #20]
        if (!cfg) {
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d10b      	bne.n	800248c <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x40>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002474:	4a0c      	ldr	r2, [pc, #48]	; (80024a8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x5c>)
 8002476:	490d      	ldr	r1, [pc, #52]	; (80024ac <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x60>)
 8002478:	480d      	ldr	r0, [pc, #52]	; (80024b0 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x64>)
 800247a:	f019 fa85 	bl	801b988 <iprintf>
 800247e:	4b0d      	ldr	r3, [pc, #52]	; (80024b4 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x68>)
 8002480:	4a0d      	ldr	r2, [pc, #52]	; (80024b8 <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x6c>)
 8002482:	f240 5192 	movw	r1, #1426	; 0x592
 8002486:	480d      	ldr	r0, [pc, #52]	; (80024bc <_ZN2ei5numpy13software_rfftEPfPNS_13fft_complex_tEjj+0x70>)
 8002488:	f018 fd9a 	bl	801afc0 <__assert_func>
        }

        ei_dsp_register_alloc(kiss_fftr_mem_length);

        // execute the rfft operation
        kiss_fftr(cfg, fft_input, (kiss_fft_cpx*)output);
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	68f9      	ldr	r1, [r7, #12]
 8002490:	6978      	ldr	r0, [r7, #20]
 8002492:	f00b fe83 	bl	800e19c <kiss_fftr>

        ei_dsp_free(cfg, kiss_fftr_mem_length);
 8002496:	6978      	ldr	r0, [r7, #20]
 8002498:	f018 fe88 	bl	801b1ac <free>

        return EIDSP_OK;
 800249c:	2300      	movs	r3, #0
    }
 800249e:	4618      	mov	r0, r3
 80024a0:	3718      	adds	r7, #24
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	0801c788 	.word	0x0801c788
 80024ac:	fffffc16 	.word	0xfffffc16
 80024b0:	0801c79c 	.word	0x0801c79c
 80024b4:	0801c7ac 	.word	0x0801c7ac
 80024b8:	0801cd3c 	.word	0x0801cd3c
 80024bc:	0801c7e4 	.word	0x0801c7e4

080024c0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>:
     * @details    Variance in CMSIS version is calculated using fSum / (float32_t)(blockSize - 1)
     * @param[in]  pSrc       Pointer to float block
     * @param[in]  blockSize  Number of floats in block
     * @param      pResult    The variance
     */
    static void cmsis_arm_variance(const float32_t *pSrc, uint32_t blockSize, float32_t *pResult)
 80024c0:	b480      	push	{r7}
 80024c2:	b08b      	sub	sp, #44	; 0x2c
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	60f8      	str	r0, [r7, #12]
 80024c8:	60b9      	str	r1, [r7, #8]
 80024ca:	607a      	str	r2, [r7, #4]
    {
        uint32_t blkCnt;
        float32_t sum = 0.0f;
 80024cc:	f04f 0300 	mov.w	r3, #0
 80024d0:	623b      	str	r3, [r7, #32]
        float32_t fSum = 0.0f;
 80024d2:	f04f 0300 	mov.w	r3, #0
 80024d6:	61fb      	str	r3, [r7, #28]
        float32_t fMean, fValue;
        const float32_t *pInput = pSrc;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	61bb      	str	r3, [r7, #24]

        if (blockSize <= 1U) {
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d804      	bhi.n	80024ec <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x2c>
            *pResult = 0;
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	f04f 0200 	mov.w	r2, #0
 80024e8:	601a      	str	r2, [r3, #0]
            return;
 80024ea:	e0e2      	b.n	80026b2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1f2>
        }
        blkCnt = blockSize >> 2U;
 80024ec:	68bb      	ldr	r3, [r7, #8]
 80024ee:	089b      	lsrs	r3, r3, #2
 80024f0:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80024f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d02f      	beq.n	8002558 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x98>
            sum += *pInput++;
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	1d1a      	adds	r2, r3, #4
 80024fc:	61ba      	str	r2, [r7, #24]
 80024fe:	edd3 7a00 	vldr	s15, [r3]
 8002502:	ed97 7a08 	vldr	s14, [r7, #32]
 8002506:	ee77 7a27 	vadd.f32	s15, s14, s15
 800250a:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800250e:	69bb      	ldr	r3, [r7, #24]
 8002510:	1d1a      	adds	r2, r3, #4
 8002512:	61ba      	str	r2, [r7, #24]
 8002514:	edd3 7a00 	vldr	s15, [r3]
 8002518:	ed97 7a08 	vldr	s14, [r7, #32]
 800251c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002520:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 8002524:	69bb      	ldr	r3, [r7, #24]
 8002526:	1d1a      	adds	r2, r3, #4
 8002528:	61ba      	str	r2, [r7, #24]
 800252a:	edd3 7a00 	vldr	s15, [r3]
 800252e:	ed97 7a08 	vldr	s14, [r7, #32]
 8002532:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002536:	edc7 7a08 	vstr	s15, [r7, #32]
            sum += *pInput++;
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	1d1a      	adds	r2, r3, #4
 800253e:	61ba      	str	r2, [r7, #24]
 8002540:	edd3 7a00 	vldr	s15, [r3]
 8002544:	ed97 7a08 	vldr	s14, [r7, #32]
 8002548:	ee77 7a27 	vadd.f32	s15, s14, s15
 800254c:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 8002550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002552:	3b01      	subs	r3, #1
 8002554:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002556:	e7cc      	b.n	80024f2 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x32>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 8002558:	68bb      	ldr	r3, [r7, #8]
 800255a:	f003 0303 	and.w	r3, r3, #3
 800255e:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002562:	2b00      	cmp	r3, #0
 8002564:	d00e      	beq.n	8002584 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xc4>
            sum += *pInput++;
 8002566:	69bb      	ldr	r3, [r7, #24]
 8002568:	1d1a      	adds	r2, r3, #4
 800256a:	61ba      	str	r2, [r7, #24]
 800256c:	edd3 7a00 	vldr	s15, [r3]
 8002570:	ed97 7a08 	vldr	s14, [r7, #32]
 8002574:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002578:	edc7 7a08 	vstr	s15, [r7, #32]
            blkCnt--;
 800257c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800257e:	3b01      	subs	r3, #1
 8002580:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002582:	e7ed      	b.n	8002560 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xa0>
        }

        fMean = sum / (float32_t)blockSize;
 8002584:	68bb      	ldr	r3, [r7, #8]
 8002586:	ee07 3a90 	vmov	s15, r3
 800258a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800258e:	edd7 6a08 	vldr	s13, [r7, #32]
 8002592:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002596:	edc7 7a05 	vstr	s15, [r7, #20]

        pInput = pSrc;
 800259a:	68fb      	ldr	r3, [r7, #12]
 800259c:	61bb      	str	r3, [r7, #24]

        /* Loop unrolling: Compute 4 outputs at a time */
        blkCnt = blockSize >> 2U;
 800259e:	68bb      	ldr	r3, [r7, #8]
 80025a0:	089b      	lsrs	r3, r3, #2
 80025a2:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 80025a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d057      	beq.n	800265a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x19a>
            fValue = *pInput++ - fMean;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	1d1a      	adds	r2, r3, #4
 80025ae:	61ba      	str	r2, [r7, #24]
 80025b0:	ed93 7a00 	vldr	s14, [r3]
 80025b4:	edd7 7a05 	vldr	s15, [r7, #20]
 80025b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025bc:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025c0:	edd7 7a04 	vldr	s15, [r7, #16]
 80025c4:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025c8:	ed97 7a07 	vldr	s14, [r7, #28]
 80025cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025d0:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80025d4:	69bb      	ldr	r3, [r7, #24]
 80025d6:	1d1a      	adds	r2, r3, #4
 80025d8:	61ba      	str	r2, [r7, #24]
 80025da:	ed93 7a00 	vldr	s14, [r3]
 80025de:	edd7 7a05 	vldr	s15, [r7, #20]
 80025e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80025e6:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 80025ea:	edd7 7a04 	vldr	s15, [r7, #16]
 80025ee:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80025f2:	ed97 7a07 	vldr	s14, [r7, #28]
 80025f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025fa:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	1d1a      	adds	r2, r3, #4
 8002602:	61ba      	str	r2, [r7, #24]
 8002604:	ed93 7a00 	vldr	s14, [r3]
 8002608:	edd7 7a05 	vldr	s15, [r7, #20]
 800260c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002610:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 8002614:	edd7 7a04 	vldr	s15, [r7, #16]
 8002618:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800261c:	ed97 7a07 	vldr	s14, [r7, #28]
 8002620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002624:	edc7 7a07 	vstr	s15, [r7, #28]
            fValue = *pInput++ - fMean;
 8002628:	69bb      	ldr	r3, [r7, #24]
 800262a:	1d1a      	adds	r2, r3, #4
 800262c:	61ba      	str	r2, [r7, #24]
 800262e:	ed93 7a00 	vldr	s14, [r3]
 8002632:	edd7 7a05 	vldr	s15, [r7, #20]
 8002636:	ee77 7a67 	vsub.f32	s15, s14, s15
 800263a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800263e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002642:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002646:	ed97 7a07 	vldr	s14, [r7, #28]
 800264a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800264e:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002654:	3b01      	subs	r3, #1
 8002656:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002658:	e7a4      	b.n	80025a4 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0xe4>
        }

        /* Loop unrolling: Compute remaining outputs */
        blkCnt = blockSize % 0x4U;
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	f003 0303 	and.w	r3, r3, #3
 8002660:	627b      	str	r3, [r7, #36]	; 0x24

        while (blkCnt > 0U) {
 8002662:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002664:	2b00      	cmp	r3, #0
 8002666:	d018      	beq.n	800269a <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1da>
            fValue = *pInput++ - fMean;
 8002668:	69bb      	ldr	r3, [r7, #24]
 800266a:	1d1a      	adds	r2, r3, #4
 800266c:	61ba      	str	r2, [r7, #24]
 800266e:	ed93 7a00 	vldr	s14, [r3]
 8002672:	edd7 7a05 	vldr	s15, [r7, #20]
 8002676:	ee77 7a67 	vsub.f32	s15, s14, s15
 800267a:	edc7 7a04 	vstr	s15, [r7, #16]
            fSum += fValue * fValue;
 800267e:	edd7 7a04 	vldr	s15, [r7, #16]
 8002682:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8002686:	ed97 7a07 	vldr	s14, [r7, #28]
 800268a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800268e:	edc7 7a07 	vstr	s15, [r7, #28]
            blkCnt--;
 8002692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002694:	3b01      	subs	r3, #1
 8002696:	627b      	str	r3, [r7, #36]	; 0x24
        while (blkCnt > 0U) {
 8002698:	e7e3      	b.n	8002662 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf+0x1a2>
        }

        /* Variance */
        *pResult = fSum / (float32_t)(blockSize);
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	ee07 3a90 	vmov	s15, r3
 80026a0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80026a4:	edd7 6a07 	vldr	s13, [r7, #28]
 80026a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	edc3 7a00 	vstr	s15, [r3]
    }
 80026b2:	372c      	adds	r7, #44	; 0x2c
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_>:
     * @param      input_matrix   The input matrix
     * @param      output_matrix  The output matrix
     *
     * @return     EIDSP error
     */
    static int std_axis0_CMSIS(matrix_t *input_matrix, matrix_t *output_matrix)
 80026bc:	b580      	push	{r7, lr}
 80026be:	b08c      	sub	sp, #48	; 0x30
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
    {
        arm_matrix_instance_f32 arm_in_matrix, arm_transposed_matrix;

        if (input_matrix->cols != output_matrix->rows) {
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689a      	ldr	r2, [r3, #8]
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	685b      	ldr	r3, [r3, #4]
 80026ce:	429a      	cmp	r2, r3
 80026d0:	d00b      	beq.n	80026ea <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x2e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80026d2:	4a54      	ldr	r2, [pc, #336]	; (8002824 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x168>)
 80026d4:	4954      	ldr	r1, [pc, #336]	; (8002828 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x16c>)
 80026d6:	4855      	ldr	r0, [pc, #340]	; (800282c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 80026d8:	f019 f956 	bl	801b988 <iprintf>
 80026dc:	4b54      	ldr	r3, [pc, #336]	; (8002830 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 80026de:	4a55      	ldr	r2, [pc, #340]	; (8002834 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 80026e0:	f240 51f9 	movw	r1, #1529	; 0x5f9
 80026e4:	4854      	ldr	r0, [pc, #336]	; (8002838 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 80026e6:	f018 fc6b 	bl	801afc0 <__assert_func>
        }

        if (output_matrix->cols != 1) {
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	689b      	ldr	r3, [r3, #8]
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d00b      	beq.n	800270a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x4e>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80026f2:	4a4c      	ldr	r2, [pc, #304]	; (8002824 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x168>)
 80026f4:	494c      	ldr	r1, [pc, #304]	; (8002828 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x16c>)
 80026f6:	484d      	ldr	r0, [pc, #308]	; (800282c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 80026f8:	f019 f946 	bl	801b988 <iprintf>
 80026fc:	4b4c      	ldr	r3, [pc, #304]	; (8002830 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 80026fe:	4a4d      	ldr	r2, [pc, #308]	; (8002834 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 8002700:	f240 51fd 	movw	r1, #1533	; 0x5fd
 8002704:	484c      	ldr	r0, [pc, #304]	; (8002838 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002706:	f018 fc5b 	bl	801afc0 <__assert_func>
        }

        /* Copy input matrix to arm matrix */
        arm_in_matrix.numRows = input_matrix->rows;
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	b29b      	uxth	r3, r3
 8002710:	833b      	strh	r3, [r7, #24]
        arm_in_matrix.numCols = input_matrix->cols;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	b29b      	uxth	r3, r3
 8002718:	837b      	strh	r3, [r7, #26]
        arm_in_matrix.pData = &input_matrix->buffer[0];
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	61fb      	str	r3, [r7, #28]
        /* Create transposed matrix */
        arm_transposed_matrix.numRows = input_matrix->cols;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	b29b      	uxth	r3, r3
 8002726:	823b      	strh	r3, [r7, #16]
        arm_transposed_matrix.numCols = input_matrix->rows;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	685b      	ldr	r3, [r3, #4]
 800272c:	b29b      	uxth	r3, r3
 800272e:	827b      	strh	r3, [r7, #18]
        arm_transposed_matrix.pData = (float *)calloc(input_matrix->cols * input_matrix->rows * sizeof(float), 1);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	687a      	ldr	r2, [r7, #4]
 8002736:	6852      	ldr	r2, [r2, #4]
 8002738:	fb02 f303 	mul.w	r3, r2, r3
 800273c:	009b      	lsls	r3, r3, #2
 800273e:	2101      	movs	r1, #1
 8002740:	4618      	mov	r0, r3
 8002742:	f018 fc61 	bl	801b008 <calloc>
 8002746:	4603      	mov	r3, r0
 8002748:	617b      	str	r3, [r7, #20]

        if (arm_transposed_matrix.pData == NULL) {
 800274a:	697b      	ldr	r3, [r7, #20]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d10b      	bne.n	8002768 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xac>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002750:	4a3a      	ldr	r2, [pc, #232]	; (800283c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x180>)
 8002752:	493b      	ldr	r1, [pc, #236]	; (8002840 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x184>)
 8002754:	4835      	ldr	r0, [pc, #212]	; (800282c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 8002756:	f019 f917 	bl	801b988 <iprintf>
 800275a:	4b35      	ldr	r3, [pc, #212]	; (8002830 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 800275c:	4a35      	ldr	r2, [pc, #212]	; (8002834 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 800275e:	f240 610a 	movw	r1, #1546	; 0x60a
 8002762:	4835      	ldr	r0, [pc, #212]	; (8002838 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002764:	f018 fc2c 	bl	801afc0 <__assert_func>
        }

        int ret = arm_mat_trans_f32(&arm_in_matrix, &arm_transposed_matrix);
 8002768:	f107 0210 	add.w	r2, r7, #16
 800276c:	f107 0318 	add.w	r3, r7, #24
 8002770:	4611      	mov	r1, r2
 8002772:	4618      	mov	r0, r3
 8002774:	f007 fb7e 	bl	8009e74 <arm_mat_trans_f32>
 8002778:	4603      	mov	r3, r0
 800277a:	62bb      	str	r3, [r7, #40]	; 0x28
        if (ret != EIDSP_OK) {
 800277c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xde>
            EIDSP_ERR(ret);
 8002782:	4a30      	ldr	r2, [pc, #192]	; (8002844 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x188>)
 8002784:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002786:	4829      	ldr	r0, [pc, #164]	; (800282c <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x170>)
 8002788:	f019 f8fe 	bl	801b988 <iprintf>
 800278c:	4b28      	ldr	r3, [pc, #160]	; (8002830 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x174>)
 800278e:	4a29      	ldr	r2, [pc, #164]	; (8002834 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x178>)
 8002790:	f240 610f 	movw	r1, #1551	; 0x60f
 8002794:	4828      	ldr	r0, [pc, #160]	; (8002838 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x17c>)
 8002796:	f018 fc13 	bl	801afc0 <__assert_func>
        }

        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 800279a:	2300      	movs	r3, #0
 800279c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800279e:	8a3b      	ldrh	r3, [r7, #16]
 80027a0:	461a      	mov	r2, r3
 80027a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d234      	bcs.n	8002812 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x156>
            float std;
            float var;

            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 80027a8:	697a      	ldr	r2, [r7, #20]
 80027aa:	8a7b      	ldrh	r3, [r7, #18]
 80027ac:	4619      	mov	r1, r3
 80027ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027b0:	fb03 f301 	mul.w	r3, r3, r1
 80027b4:	009b      	lsls	r3, r3, #2
 80027b6:	4413      	add	r3, r2
                               arm_transposed_matrix.numCols, &var);
 80027b8:	8a7a      	ldrh	r2, [r7, #18]
            cmsis_arm_variance(arm_transposed_matrix.pData + (row * arm_transposed_matrix.numCols),
 80027ba:	4611      	mov	r1, r2
 80027bc:	f107 0208 	add.w	r2, r7, #8
 80027c0:	4618      	mov	r0, r3
 80027c2:	f7ff fe7d 	bl	80024c0 <_ZN2ei5numpy18cmsis_arm_varianceEPKfmPf>
            arm_sqrt_f32(var, &std);
 80027c6:	68bb      	ldr	r3, [r7, #8]
 80027c8:	627b      	str	r3, [r7, #36]	; 0x24
 80027ca:	f107 030c 	add.w	r3, r7, #12
 80027ce:	623b      	str	r3, [r7, #32]
 */
__STATIC_FORCEINLINE arm_status arm_sqrt_f32(
  float32_t in,
  float32_t * pOut)
  {
    if (in >= 0.0f)
 80027d0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80027d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80027d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027dc:	db09      	blt.n	80027f2 <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x136>
  #else
      *pOut = sqrtf(in);
  #endif

#else
      *pOut = sqrtf(in);
 80027de:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 80027e2:	f016 f819 	bl	8018818 <sqrtf>
 80027e6:	eef0 7a40 	vmov.f32	s15, s0
 80027ea:	6a3b      	ldr	r3, [r7, #32]
 80027ec:	edc3 7a00 	vstr	s15, [r3]
#endif

      return (ARM_MATH_SUCCESS);
 80027f0:	e004      	b.n	80027fc <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0x140>
    }
    else
    {
      *pOut = 0.0f;
 80027f2:	6a3b      	ldr	r3, [r7, #32]
 80027f4:	f04f 0200 	mov.w	r2, #0
 80027f8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 80027fa:	bf00      	nop

            output_matrix->buffer[row] = std;
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	4413      	add	r3, r2
 8002806:	68fa      	ldr	r2, [r7, #12]
 8002808:	601a      	str	r2, [r3, #0]
        for (size_t row = 0; row < arm_transposed_matrix.numRows; row++) {
 800280a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800280c:	3301      	adds	r3, #1
 800280e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002810:	e7c5      	b.n	800279e <_ZN2ei5numpy15std_axis0_CMSISEPNS_9ei_matrixES2_+0xe2>
        }

        free(arm_transposed_matrix.pData);
 8002812:	697b      	ldr	r3, [r7, #20]
 8002814:	4618      	mov	r0, r3
 8002816:	f018 fcc9 	bl	801b1ac <free>

        return EIDSP_OK;
 800281a:	2300      	movs	r3, #0
    }
 800281c:	4618      	mov	r0, r3
 800281e:	3730      	adds	r7, #48	; 0x30
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}
 8002824:	0801c850 	.word	0x0801c850
 8002828:	fffffc14 	.word	0xfffffc14
 800282c:	0801c79c 	.word	0x0801c79c
 8002830:	0801c7ac 	.word	0x0801c7ac
 8002834:	0801cd8c 	.word	0x0801cd8c
 8002838:	0801c7e4 	.word	0x0801c7e4
 800283c:	0801c788 	.word	0x0801c788
 8002840:	fffffc16 	.word	0xfffffc16
 8002844:	0801c900 	.word	0x0801c900

08002848 <_ZN2ei8speechpy9functions16frequency_to_melEf>:
     * Converting from frequency to Mel scale
     *
     * @param f The frequency values(or a single frequency) in Hz.
     * @returns The mel scale values(or a single mel).
     */
    static float frequency_to_mel(float f) {
 8002848:	b580      	push	{r7, lr}
 800284a:	b08c      	sub	sp, #48	; 0x30
 800284c:	af00      	add	r7, sp, #0
 800284e:	ed87 0a01 	vstr	s0, [r7, #4]
        return 1127.0 * numpy::log(1 + f / 700.0f);
 8002852:	ed97 7a01 	vldr	s14, [r7, #4]
 8002856:	eddf 6a39 	vldr	s13, [pc, #228]	; 800293c <_ZN2ei8speechpy9functions16frequency_to_melEf+0xf4>
 800285a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800285e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002862:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002866:	edc7 7a04 	vstr	s15, [r7, #16]
        g = (int32_t) * ((int32_t *)&a);
 800286a:	f107 0310 	add.w	r3, r7, #16
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	60fb      	str	r3, [r7, #12]
        e = (g - 0x3f2aaaab) & 0xff800000;
 8002872:	68fa      	ldr	r2, [r7, #12]
 8002874:	4b32      	ldr	r3, [pc, #200]	; (8002940 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xf8>)
 8002876:	4413      	add	r3, r2
 8002878:	0ddb      	lsrs	r3, r3, #23
 800287a:	05db      	lsls	r3, r3, #23
 800287c:	62fb      	str	r3, [r7, #44]	; 0x2c
        g = g - e;
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	60fb      	str	r3, [r7, #12]
        m = (float) * ((float *)&g);
 8002886:	f107 030c 	add.w	r3, r7, #12
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	62bb      	str	r3, [r7, #40]	; 0x28
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 800288e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002890:	ee07 3a90 	vmov	s15, r3
 8002894:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002898:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 8002944 <_ZN2ei8speechpy9functions16frequency_to_melEf+0xfc>
 800289c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028a0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        f = m - 1.0f;
 80028a4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80028a8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80028ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028b0:	edc7 7a08 	vstr	s15, [r7, #32]
        s = f * f;
 80028b4:	edd7 7a08 	vldr	s15, [r7, #32]
 80028b8:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80028bc:	edc7 7a07 	vstr	s15, [r7, #28]
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 80028c0:	ed9f 1a21 	vldr	s2, [pc, #132]	; 8002948 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x100>
 80028c4:	edd7 0a08 	vldr	s1, [r7, #32]
 80028c8:	ed9f 0a20 	vldr	s0, [pc, #128]	; 800294c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x104>
 80028cc:	f015 fdf8 	bl	80184c0 <fmaf>
 80028d0:	ed87 0a06 	vstr	s0, [r7, #24]
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 80028d4:	ed9f 1a1e 	vldr	s2, [pc, #120]	; 8002950 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x108>
 80028d8:	edd7 0a08 	vldr	s1, [r7, #32]
 80028dc:	ed9f 0a1d 	vldr	s0, [pc, #116]	; 8002954 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x10c>
 80028e0:	f015 fdee 	bl	80184c0 <fmaf>
 80028e4:	ed87 0a05 	vstr	s0, [r7, #20]
        r = fmaf(r, s, t);
 80028e8:	ed97 1a05 	vldr	s2, [r7, #20]
 80028ec:	edd7 0a07 	vldr	s1, [r7, #28]
 80028f0:	ed97 0a06 	vldr	s0, [r7, #24]
 80028f4:	f015 fde4 	bl	80184c0 <fmaf>
 80028f8:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(r, s, f);
 80028fc:	ed97 1a08 	vldr	s2, [r7, #32]
 8002900:	edd7 0a07 	vldr	s1, [r7, #28]
 8002904:	ed97 0a06 	vldr	s0, [r7, #24]
 8002908:	f015 fdda 	bl	80184c0 <fmaf>
 800290c:	ed87 0a06 	vstr	s0, [r7, #24]
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 8002910:	ed97 1a06 	vldr	s2, [r7, #24]
 8002914:	eddf 0a10 	vldr	s1, [pc, #64]	; 8002958 <_ZN2ei8speechpy9functions16frequency_to_melEf+0x110>
 8002918:	ed97 0a09 	vldr	s0, [r7, #36]	; 0x24
 800291c:	f015 fdd0 	bl	80184c0 <fmaf>
 8002920:	ed87 0a06 	vstr	s0, [r7, #24]
        return r;
 8002924:	edd7 7a06 	vldr	s15, [r7, #24]
 8002928:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 800295c <_ZN2ei8speechpy9functions16frequency_to_melEf+0x114>
 800292c:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002930:	eeb0 0a67 	vmov.f32	s0, s15
 8002934:	3730      	adds	r7, #48	; 0x30
 8002936:	46bd      	mov	sp, r7
 8002938:	bd80      	pop	{r7, pc}
 800293a:	bf00      	nop
 800293c:	442f0000 	.word	0x442f0000
 8002940:	c0d55555 	.word	0xc0d55555
 8002944:	34000000 	.word	0x34000000
 8002948:	be8ef46d 	.word	0xbe8ef46d
 800294c:	3e6c6078 	.word	0x3e6c6078
 8002950:	beff712d 	.word	0xbeff712d
 8002954:	3ea9e51a 	.word	0x3ea9e51a
 8002958:	3f317218 	.word	0x3f317218
 800295c:	448ce000 	.word	0x448ce000

08002960 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>:
     * Converting from Mel scale to frequency.
     *
     * @param mel The mel scale values(or a single mel).
     * @returns The frequency values(or a single frequency) in Hz.
     */
    static float mel_to_frequency(float mel) {
 8002960:	b580      	push	{r7, lr}
 8002962:	b082      	sub	sp, #8
 8002964:	af00      	add	r7, sp, #0
 8002966:	ed87 0a01 	vstr	s0, [r7, #4]
        return 700.0f * (exp(mel / 1127.0f) - 1.0f);
 800296a:	edd7 7a01 	vldr	s15, [r7, #4]
 800296e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800299c <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x3c>
 8002972:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002976:	eeb0 0a47 	vmov.f32	s0, s14
 800297a:	f7fe fb73 	bl	8001064 <_ZSt3expf>
 800297e:	eef0 7a40 	vmov.f32	s15, s0
 8002982:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002986:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800298a:	ed9f 7a05 	vldr	s14, [pc, #20]	; 80029a0 <_ZN2ei8speechpy9functions16mel_to_frequencyEf+0x40>
 800298e:	ee67 7a87 	vmul.f32	s15, s15, s14
    }
 8002992:	eeb0 0a67 	vmov.f32	s0, s15
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	448ce000 	.word	0x448ce000
 80029a0:	442f0000 	.word	0x442f0000

080029a4 <_ZN2ei8speechpy9functions13zero_handlingEPfj>:
     * to become an argument for any log function.
     * @param input Array
     * @param input_size Size of array
     * @returns void
     */
    static void zero_handling(float *input, size_t input_size) {
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
 80029ac:	6039      	str	r1, [r7, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d215      	bcs.n	80029e6 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x42>
            if (input[ix] == 0) {
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	687a      	ldr	r2, [r7, #4]
 80029c0:	4413      	add	r3, r2
 80029c2:	edd3 7a00 	vldr	s15, [r3]
 80029c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80029ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029ce:	d106      	bne.n	80029de <_ZN2ei8speechpy9functions13zero_handlingEPfj+0x3a>
                input[ix] = FLT_EPSILON;
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	009b      	lsls	r3, r3, #2
 80029d4:	687a      	ldr	r2, [r7, #4]
 80029d6:	4413      	add	r3, r2
 80029d8:	f04f 5250 	mov.w	r2, #872415232	; 0x34000000
 80029dc:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < input_size; ix++) {
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	3301      	adds	r3, #1
 80029e2:	60fb      	str	r3, [r7, #12]
 80029e4:	e7e5      	b.n	80029b2 <_ZN2ei8speechpy9functions13zero_handlingEPfj+0xe>
            }
        }
    }
 80029e6:	bf00      	nop
 80029e8:	3714      	adds	r7, #20
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>:
     * This function handle the issue with zero values if the are exposed
     * to become an argument for any log function.
     * @param input Matrix
     * @returns void
     */
    static void zero_handling(matrix_t *input) {
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b082      	sub	sp, #8
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
        zero_handling(input->buffer, input->rows * input->cols);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6818      	ldr	r0, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	6892      	ldr	r2, [r2, #8]
 8002a06:	fb02 f303 	mul.w	r3, r2, r3
 8002a0a:	4619      	mov	r1, r3
 8002a0c:	f7ff ffca 	bl	80029a4 <_ZN2ei8speechpy9functions13zero_handlingEPfj>
    }
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <_ZN2ei8speechpy9functions8triangleEPfjiii>:
     * @param x_size Size of the linspace output
     * @param left
     * @param middle
     * @param right
     */
    static void triangle(float *x, size_t x_size, int left, int middle, int right) {
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b08a      	sub	sp, #40	; 0x28
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	60f8      	str	r0, [r7, #12]
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	603b      	str	r3, [r7, #0]
        EI_DSP_MATRIX(out, 1, x_size);
 8002a26:	f107 0014 	add.w	r0, r7, #20
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	68ba      	ldr	r2, [r7, #8]
 8002a2e:	2101      	movs	r1, #1
 8002a30:	f7fe fba0 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d10a      	bne.n	8002a50 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x38>
 8002a3a:	4a4e      	ldr	r2, [pc, #312]	; (8002b74 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x15c>)
 8002a3c:	494e      	ldr	r1, [pc, #312]	; (8002b78 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x160>)
 8002a3e:	484f      	ldr	r0, [pc, #316]	; (8002b7c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x164>)
 8002a40:	f018 ffa2 	bl	801b988 <iprintf>
 8002a44:	4b4e      	ldr	r3, [pc, #312]	; (8002b80 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x168>)
 8002a46:	4a4f      	ldr	r2, [pc, #316]	; (8002b84 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x16c>)
 8002a48:	215b      	movs	r1, #91	; 0x5b
 8002a4a:	484f      	ldr	r0, [pc, #316]	; (8002b88 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x170>)
 8002a4c:	f018 fab8 	bl	801afc0 <__assert_func>

        for (size_t ix = 0; ix < x_size; ix++) {
 8002a50:	2300      	movs	r3, #0
 8002a52:	627b      	str	r3, [r7, #36]	; 0x24
 8002a54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	429a      	cmp	r2, r3
 8002a5a:	d27b      	bcs.n	8002b54 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x13c>
            if (x[ix] > left && x[ix] <= middle) {
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	68fa      	ldr	r2, [r7, #12]
 8002a62:	4413      	add	r3, r2
 8002a64:	ed93 7a00 	vldr	s14, [r3]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	ee07 3a90 	vmov	s15, r3
 8002a6e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a72:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a7a:	dd2b      	ble.n	8002ad4 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xbc>
 8002a7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4413      	add	r3, r2
 8002a84:	ed93 7a00 	vldr	s14, [r3]
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	ee07 3a90 	vmov	s15, r3
 8002a8e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a92:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002a96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002a9a:	d81b      	bhi.n	8002ad4 <_ZN2ei8speechpy9functions8triangleEPfjiii+0xbc>
                out.buffer[ix] = (x[ix] - left) / (middle - left);
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	68fa      	ldr	r2, [r7, #12]
 8002aa2:	4413      	add	r3, r2
 8002aa4:	ed93 7a00 	vldr	s14, [r3]
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	ee07 3a90 	vmov	s15, r3
 8002aae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002ab2:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002ab6:	683a      	ldr	r2, [r7, #0]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	1ad3      	subs	r3, r2, r3
 8002abc:	ee07 3a90 	vmov	s15, r3
 8002ac0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ac4:	697a      	ldr	r2, [r7, #20]
 8002ac6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	4413      	add	r3, r2
 8002acc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ad0:	edc3 7a00 	vstr	s15, [r3]
            }

            if (x[ix] < right && middle <= x[ix]) {
 8002ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	4413      	add	r3, r2
 8002adc:	ed93 7a00 	vldr	s14, [r3]
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	ee07 3a90 	vmov	s15, r3
 8002ae6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af2:	d52b      	bpl.n	8002b4c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x134>
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	ee07 3a90 	vmov	s15, r3
 8002afa:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	68fa      	ldr	r2, [r7, #12]
 8002b04:	4413      	add	r3, r2
 8002b06:	edd3 7a00 	vldr	s15, [r3]
 8002b0a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b12:	d81b      	bhi.n	8002b4c <_ZN2ei8speechpy9functions8triangleEPfjiii+0x134>
                out.buffer[ix] = (right - x[ix]) / (right - middle);
 8002b14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b16:	ee07 3a90 	vmov	s15, r3
 8002b1a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	4413      	add	r3, r2
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002b2e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	ee07 3a90 	vmov	s15, r3
 8002b38:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002b3c:	697a      	ldr	r2, [r7, #20]
 8002b3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	4413      	add	r3, r2
 8002b44:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002b48:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < x_size; ix++) {
 8002b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4e:	3301      	adds	r3, #1
 8002b50:	627b      	str	r3, [r7, #36]	; 0x24
 8002b52:	e77f      	b.n	8002a54 <_ZN2ei8speechpy9functions8triangleEPfjiii+0x3c>
            }
        }

        memcpy(x, out.buffer, x_size * sizeof(float));
 8002b54:	6979      	ldr	r1, [r7, #20]
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	009b      	lsls	r3, r3, #2
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	68f8      	ldr	r0, [r7, #12]
 8002b5e:	f018 fb3b 	bl	801b1d8 <memcpy>
        EI_DSP_MATRIX(out, 1, x_size);
 8002b62:	f107 0314 	add.w	r3, r7, #20
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fe fb30 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
    }
 8002b6c:	bf00      	nop
 8002b6e:	3728      	adds	r7, #40	; 0x28
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd80      	pop	{r7, pc}
 8002b74:	0801c788 	.word	0x0801c788
 8002b78:	fffffc16 	.word	0xfffffc16
 8002b7c:	0801c79c 	.word	0x0801c79c
 8002b80:	0801c7ac 	.word	0x0801c7ac
 8002b84:	0801d150 	.word	0x0801d150
 8002b88:	0801d1a0 	.word	0x0801d1a0

08002b8c <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>:
    signal_t *signal;
    std::vector<uint32_t> *frame_ixs;
    int frame_length;

    // start_ixs is owned by us
    ~ei_stack_frames_info() {
 8002b8c:	b590      	push	{r4, r7, lr}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
        if (frame_ixs) {
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d00a      	beq.n	8002bb2 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x26>
            delete frame_ixs;
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	685c      	ldr	r4, [r3, #4]
 8002ba0:	2c00      	cmp	r4, #0
 8002ba2:	d006      	beq.n	8002bb2 <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev+0x26>
 8002ba4:	4620      	mov	r0, r4
 8002ba6:	f002 fd95 	bl	80056d4 <_ZNSt6vectorImSaImEED1Ev>
 8002baa:	210c      	movs	r1, #12
 8002bac:	4620      	mov	r0, r4
 8002bae:	f015 f935 	bl	8017e1c <_ZdlPvj>
        }
    }
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>:
     * @param shift (int): The shift step.
     * @param cof (float): The preemphasising coefficient. 0 equals to no filtering.
     */
    class preemphasis {
public:
        preemphasis(ei_signal_t *signal, int shift = 1, float cof = 0.98f)
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	60b9      	str	r1, [r7, #8]
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	ed87 0a00 	vstr	s0, [r7]
            : _signal(signal), _shift(shift), _cof(cof)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	68ba      	ldr	r2, [r7, #8]
 8002bd0:	601a      	str	r2, [r3, #0]
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	605a      	str	r2, [r3, #4]
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	683a      	ldr	r2, [r7, #0]
 8002bdc:	609a      	str	r2, [r3, #8]
        {
            _prev_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	009b      	lsls	r3, r3, #2
 8002be2:	2101      	movs	r1, #1
 8002be4:	4618      	mov	r0, r3
 8002be6:	f018 fa0f 	bl	801b008 <calloc>
 8002bea:	4603      	mov	r3, r0
 8002bec:	461a      	mov	r2, r3
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	60da      	str	r2, [r3, #12]
            _end_of_signal_buffer = (float*)ei_dsp_calloc(shift * sizeof(float), 1);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	009b      	lsls	r3, r3, #2
 8002bf6:	2101      	movs	r1, #1
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f018 fa05 	bl	801b008 <calloc>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	461a      	mov	r2, r3
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	611a      	str	r2, [r3, #16]
            _next_offset_should_be = 0;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	615a      	str	r2, [r3, #20]

            if (shift < 0) {
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	da06      	bge.n	8002c20 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x64>
                _shift = signal->total_length + shift;
 8002c12:	68bb      	ldr	r3, [r7, #8]
 8002c14:	691a      	ldr	r2, [r3, #16]
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	4413      	add	r3, r2
 8002c1a:	461a      	mov	r2, r3
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	605a      	str	r2, [r3, #4]
            }

            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d00e      	beq.n	8002c46 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8a>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	691b      	ldr	r3, [r3, #16]
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00a      	beq.n	8002c46 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8a>

            // we need to get the shift bytes from the end of the buffer...
            signal->get_data(signal->total_length - shift, shift, _end_of_signal_buffer);
 8002c30:	68b8      	ldr	r0, [r7, #8]
 8002c32:	68bb      	ldr	r3, [r7, #8]
 8002c34:	691a      	ldr	r2, [r3, #16]
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	1ad1      	subs	r1, r2, r3
 8002c3a:	687a      	ldr	r2, [r7, #4]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	691b      	ldr	r3, [r3, #16]
 8002c40:	f002 fd1a 	bl	8005678 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002c44:	e000      	b.n	8002c48 <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif+0x8c>
            if (!_prev_buffer || !_end_of_signal_buffer) return;
 8002c46:	bf00      	nop
        }
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>:
         * Get preemphasized data from the underlying audio buffer...
         * This retrieves data from the signal then preemphasizes it.
         * @param offset Offset in the audio signal
         * @param length Length of the audio signal
         */
        int get_data(size_t offset, size_t length, float *out_buffer) {
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b088      	sub	sp, #32
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	60f8      	str	r0, [r7, #12]
 8002c5c:	60b9      	str	r1, [r7, #8]
 8002c5e:	607a      	str	r2, [r7, #4]
 8002c60:	603b      	str	r3, [r7, #0]
            if (!_prev_buffer || !_end_of_signal_buffer) {
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	68db      	ldr	r3, [r3, #12]
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d003      	beq.n	8002c72 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1e>
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	691b      	ldr	r3, [r3, #16]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d10a      	bne.n	8002c88 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x34>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8002c72:	4a5d      	ldr	r2, [pc, #372]	; (8002de8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x194>)
 8002c74:	495d      	ldr	r1, [pc, #372]	; (8002dec <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x198>)
 8002c76:	485e      	ldr	r0, [pc, #376]	; (8002df0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002c78:	f018 fe86 	bl	801b988 <iprintf>
 8002c7c:	4b5d      	ldr	r3, [pc, #372]	; (8002df4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8002c7e:	4a5e      	ldr	r2, [pc, #376]	; (8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8002c80:	214f      	movs	r1, #79	; 0x4f
 8002c82:	485e      	ldr	r0, [pc, #376]	; (8002dfc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8002c84:	f018 f99c 	bl	801afc0 <__assert_func>
            }
            if (offset + length > _signal->total_length) {
 8002c88:	68ba      	ldr	r2, [r7, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	441a      	add	r2, r3
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	429a      	cmp	r2, r3
 8002c96:	d90a      	bls.n	8002cae <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x5a>
                EIDSP_ERR(EIDSP_OUT_OF_BOUNDS);
 8002c98:	4a59      	ldr	r2, [pc, #356]	; (8002e00 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1ac>)
 8002c9a:	495a      	ldr	r1, [pc, #360]	; (8002e04 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b0>)
 8002c9c:	4854      	ldr	r0, [pc, #336]	; (8002df0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002c9e:	f018 fe73 	bl	801b988 <iprintf>
 8002ca2:	4b54      	ldr	r3, [pc, #336]	; (8002df4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8002ca4:	4a54      	ldr	r2, [pc, #336]	; (8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8002ca6:	2152      	movs	r1, #82	; 0x52
 8002ca8:	4854      	ldr	r0, [pc, #336]	; (8002dfc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8002caa:	f018 f989 	bl	801afc0 <__assert_func>
            }

            int ret;
            if (static_cast<int32_t>(offset) - _shift >= 0) {
 8002cae:	68ba      	ldr	r2, [r7, #8]
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	1ad3      	subs	r3, r2, r3
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	db1d      	blt.n	8002cf6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa2>
                ret = _signal->get_data(offset - _shift, _shift, _prev_buffer);
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	685b      	ldr	r3, [r3, #4]
 8002cc4:	461a      	mov	r2, r3
 8002cc6:	68bb      	ldr	r3, [r7, #8]
 8002cc8:	1a99      	subs	r1, r3, r2
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	68db      	ldr	r3, [r3, #12]
 8002cd4:	f002 fcd0 	bl	8005678 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002cd8:	61b8      	str	r0, [r7, #24]
                if (ret != 0) {
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d00a      	beq.n	8002cf6 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xa2>
                    EIDSP_ERR(ret);
 8002ce0:	4a49      	ldr	r2, [pc, #292]	; (8002e08 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b4>)
 8002ce2:	69b9      	ldr	r1, [r7, #24]
 8002ce4:	4842      	ldr	r0, [pc, #264]	; (8002df0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002ce6:	f018 fe4f 	bl	801b988 <iprintf>
 8002cea:	4b42      	ldr	r3, [pc, #264]	; (8002df4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8002cec:	4a42      	ldr	r2, [pc, #264]	; (8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8002cee:	2159      	movs	r1, #89	; 0x59
 8002cf0:	4842      	ldr	r0, [pc, #264]	; (8002dfc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8002cf2:	f018 f965 	bl	801afc0 <__assert_func>
                }
            }
            // else we'll use the end_of_signal_buffer; so no need to check

            ret = _signal->get_data(offset, length, out_buffer);
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	683b      	ldr	r3, [r7, #0]
 8002cfe:	687a      	ldr	r2, [r7, #4]
 8002d00:	68b9      	ldr	r1, [r7, #8]
 8002d02:	f002 fcb9 	bl	8005678 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8002d06:	61b8      	str	r0, [r7, #24]
            if (ret != 0) {
 8002d08:	69bb      	ldr	r3, [r7, #24]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00a      	beq.n	8002d24 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd0>
                EIDSP_ERR(ret);
 8002d0e:	4a3e      	ldr	r2, [pc, #248]	; (8002e08 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1b4>)
 8002d10:	69b9      	ldr	r1, [r7, #24]
 8002d12:	4837      	ldr	r0, [pc, #220]	; (8002df0 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x19c>)
 8002d14:	f018 fe38 	bl	801b988 <iprintf>
 8002d18:	4b36      	ldr	r3, [pc, #216]	; (8002df4 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a0>)
 8002d1a:	4a37      	ldr	r2, [pc, #220]	; (8002df8 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a4>)
 8002d1c:	2160      	movs	r1, #96	; 0x60
 8002d1e:	4837      	ldr	r0, [pc, #220]	; (8002dfc <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x1a8>)
 8002d20:	f018 f94e 	bl	801afc0 <__assert_func>
            }

            // now we have the signal and we can preemphasize
            for (size_t ix = 0; ix < length; ix++) {
 8002d24:	2300      	movs	r3, #0
 8002d26:	61fb      	str	r3, [r7, #28]
 8002d28:	69fa      	ldr	r2, [r7, #28]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	429a      	cmp	r2, r3
 8002d2e:	d250      	bcs.n	8002dd2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x17e>
                float now = out_buffer[ix];
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	009b      	lsls	r3, r3, #2
 8002d34:	683a      	ldr	r2, [r7, #0]
 8002d36:	4413      	add	r3, r2
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	617b      	str	r3, [r7, #20]

                // under shift? read from end
                if (offset + ix < static_cast<uint32_t>(_shift)) {
 8002d3c:	68ba      	ldr	r2, [r7, #8]
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	4413      	add	r3, r2
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	6852      	ldr	r2, [r2, #4]
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d218      	bcs.n	8002d7c <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x128>
                    out_buffer[ix] = now - (_cof * _end_of_signal_buffer[offset + ix]);
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	691a      	ldr	r2, [r3, #16]
 8002d54:	68b9      	ldr	r1, [r7, #8]
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	440b      	add	r3, r1
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	009b      	lsls	r3, r3, #2
 8002d6a:	683a      	ldr	r2, [r7, #0]
 8002d6c:	4413      	add	r3, r2
 8002d6e:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d76:	edc3 7a00 	vstr	s15, [r3]
 8002d7a:	e012      	b.n	8002da2 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0x14e>
                }
                // otherwise read from history buffer
                else {
                    out_buffer[ix] = now - (_cof * _prev_buffer[0]);
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	ed93 7a02 	vldr	s14, [r3, #8]
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	68db      	ldr	r3, [r3, #12]
 8002d86:	edd3 7a00 	vldr	s15, [r3]
 8002d8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	683a      	ldr	r2, [r7, #0]
 8002d94:	4413      	add	r3, r2
 8002d96:	ed97 7a05 	vldr	s14, [r7, #20]
 8002d9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d9e:	edc3 7a00 	vstr	s15, [r3]
                }

                // roll through and overwrite last element
                numpy::roll(_prev_buffer, _shift, -1);
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	68d8      	ldr	r0, [r3, #12]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	f04f 32ff 	mov.w	r2, #4294967295
 8002dae:	4619      	mov	r1, r3
 8002db0:	f7fe fa6a 	bl	8001288 <_ZN2ei5numpy4rollEPfji>
                _prev_buffer[_shift - 1] = now;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68da      	ldr	r2, [r3, #12]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	009b      	lsls	r3, r3, #2
 8002dc4:	4413      	add	r3, r2
 8002dc6:	697a      	ldr	r2, [r7, #20]
 8002dc8:	601a      	str	r2, [r3, #0]
            for (size_t ix = 0; ix < length; ix++) {
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	61fb      	str	r3, [r7, #28]
 8002dd0:	e7aa      	b.n	8002d28 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf+0xd4>
            }

            _next_offset_should_be += length;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	695a      	ldr	r2, [r3, #20]
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	441a      	add	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	615a      	str	r2, [r3, #20]

            return EIDSP_OK;
 8002dde:	2300      	movs	r3, #0
        }
 8002de0:	4618      	mov	r0, r3
 8002de2:	3720      	adds	r7, #32
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}
 8002de8:	0801c788 	.word	0x0801c788
 8002dec:	fffffc16 	.word	0xfffffc16
 8002df0:	0801c79c 	.word	0x0801c79c
 8002df4:	0801c7ac 	.word	0x0801c7ac
 8002df8:	0801d21c 	.word	0x0801d21c
 8002dfc:	0801d268 	.word	0x0801d268
 8002e00:	0801d2e4 	.word	0x0801d2e4
 8002e04:	fffffc0e 	.word	0xfffffc0e
 8002e08:	0801c900 	.word	0x0801c900

08002e0c <_ZN2ei8speechpy10processing11preemphasisD1Ev>:

        ~preemphasis() {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
            if (_prev_buffer) {
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d004      	beq.n	8002e26 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x1a>
                ei_dsp_free(_prev_buffer, _shift * sizeof(float));
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	4618      	mov	r0, r3
 8002e22:	f018 f9c3 	bl	801b1ac <free>
            }
            if (_end_of_signal_buffer) {
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	691b      	ldr	r3, [r3, #16]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d004      	beq.n	8002e38 <_ZN2ei8speechpy10processing11preemphasisD1Ev+0x2c>
                ei_dsp_free(_end_of_signal_buffer, _shift * sizeof(float));
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f018 f9ba 	bl	801b1ac <free>
            }
        }
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>:
	  _M_copy_data(__x);
	  __x._M_copy_data(__tmp);
	}
      };

      struct _Vector_impl
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f002 fc7d 	bl	800574a <_ZNSaImED1Ev>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <_ZNSt12_Vector_baseImSaImEEC1Ev>:
      allocator_type
      get_allocator() const _GLIBCXX_NOEXCEPT
      { return allocator_type(_M_get_Tp_allocator()); }

#if __cplusplus >= 201103L
      _Vector_base() = default;
 8002e5a:	b580      	push	{r7, lr}
 8002e5c:	b082      	sub	sp, #8
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f002 fc60 	bl	800572a <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	3708      	adds	r7, #8
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <_ZNSt6vectorImSaImEEC1Ev>:

      /**
       *  @brief  Creates a %vector with no elements.
       */
#if __cplusplus >= 201103L
      vector() = default;
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f7ff ffeb 	bl	8002e5a <_ZNSt12_Vector_baseImSaImEEC1Ev>
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	4618      	mov	r0, r3
 8002e88:	3708      	adds	r7, #8
 8002e8a:	46bd      	mov	sp, r7
 8002e8c:	bd80      	pop	{r7, pc}
	...

08002e90 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb>:
    static int stack_frames(stack_frames_info_t *info,
                            uint32_t sampling_frequency,
                            float frame_length,
                            float frame_stride,
                            bool zero_padding)
    {
 8002e90:	b590      	push	{r4, r7, lr}
 8002e92:	b08f      	sub	sp, #60	; 0x3c
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	6178      	str	r0, [r7, #20]
 8002e98:	6139      	str	r1, [r7, #16]
 8002e9a:	ed87 0a03 	vstr	s0, [r7, #12]
 8002e9e:	edc7 0a02 	vstr	s1, [r7, #8]
 8002ea2:	4613      	mov	r3, r2
 8002ea4:	71fb      	strb	r3, [r7, #7]
        if (!info->signal || !info->signal->get_data || info->signal->total_length == 0) {
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d00f      	beq.n	8002ece <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x3e>
 8002eae:	697b      	ldr	r3, [r7, #20]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f002 fc29 	bl	800570a <_ZNKSt8functionIFijjPfEEcvbEv>
 8002eb8:	4603      	mov	r3, r0
 8002eba:	f083 0301 	eor.w	r3, r3, #1
 8002ebe:	b2db      	uxtb	r3, r3
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x3e>
 8002ec4:	697b      	ldr	r3, [r7, #20]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	691b      	ldr	r3, [r3, #16]
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d101      	bne.n	8002ed2 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x42>
 8002ece:	2301      	movs	r3, #1
 8002ed0:	e000      	b.n	8002ed4 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x44>
 8002ed2:	2300      	movs	r3, #0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d00a      	beq.n	8002eee <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x5e>
            EIDSP_ERR(EIDSP_SIGNAL_SIZE_MISMATCH);
 8002ed8:	4a6b      	ldr	r2, [pc, #428]	; (8003088 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1f8>)
 8002eda:	496c      	ldr	r1, [pc, #432]	; (800308c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1fc>)
 8002edc:	486c      	ldr	r0, [pc, #432]	; (8003090 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x200>)
 8002ede:	f018 fd53 	bl	801b988 <iprintf>
 8002ee2:	4b6c      	ldr	r3, [pc, #432]	; (8003094 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x204>)
 8002ee4:	4a6c      	ldr	r2, [pc, #432]	; (8003098 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x208>)
 8002ee6:	21c9      	movs	r1, #201	; 0xc9
 8002ee8:	486c      	ldr	r0, [pc, #432]	; (800309c <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x20c>)
 8002eea:	f018 f869 	bl	801afc0 <__assert_func>
        }

        size_t length_signal = info->signal->total_length;
 8002eee:	697b      	ldr	r3, [r7, #20]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	691b      	ldr	r3, [r3, #16]
 8002ef4:	62fb      	str	r3, [r7, #44]	; 0x2c
        int frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	ee07 3a90 	vmov	s15, r3
 8002efc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f00:	edd7 7a03 	vldr	s15, [r7, #12]
 8002f04:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f08:	eeb0 0a67 	vmov.f32	s0, s15
 8002f0c:	f7fe f8da 	bl	80010c4 <_ZSt5roundf>
 8002f10:	eef0 7a40 	vmov.f32	s15, s0
 8002f14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f18:	ee17 3a90 	vmov	r3, s15
 8002f1c:	62bb      	str	r3, [r7, #40]	; 0x28
        frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	ee07 3a90 	vmov	s15, r3
 8002f24:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f28:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f30:	eeb0 0a67 	vmov.f32	s0, s15
 8002f34:	f7fe f8c6 	bl	80010c4 <_ZSt5roundf>
 8002f38:	ed87 0a02 	vstr	s0, [r7, #8]

        volatile int numframes;
        volatile int len_sig;

        if (zero_padding) {
 8002f3c:	79fb      	ldrb	r3, [r7, #7]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d02a      	beq.n	8002f98 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x108>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8002f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	ee07 3a90 	vmov	s15, r3
 8002f4c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002f50:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f54:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002f58:	eeb0 0a66 	vmov.f32	s0, s13
 8002f5c:	f7fe f872 	bl	8001044 <_ZSt4ceilf>
 8002f60:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8002f64:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f68:	ee17 3a90 	vmov	r3, s15
 8002f6c:	61fb      	str	r3, [r7, #28]

            // Zero padding
            len_sig = static_cast<int>(static_cast<float>(numframes) * frame_stride) + frame_sample_length;
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	ee07 3a90 	vmov	s15, r3
 8002f74:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f78:	edd7 7a02 	vldr	s15, [r7, #8]
 8002f7c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f80:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002f84:	ee17 2a90 	vmov	r2, s15
 8002f88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8a:	4413      	add	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]

            info->signal->total_length = static_cast<size_t>(len_sig);
 8002f8e:	69ba      	ldr	r2, [r7, #24]
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	611a      	str	r2, [r3, #16]
 8002f96:	e02f      	b.n	8002ff8 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x168>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8002f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9c:	1ad3      	subs	r3, r2, r3
 8002f9e:	ee07 3a90 	vmov	s15, r3
 8002fa2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002fa6:	edd7 7a02 	vldr	s15, [r7, #8]
 8002faa:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002fae:	eeb0 0a66 	vmov.f32	s0, s13
 8002fb2:	f7fe f867 	bl	8001084 <_ZSt5floorf>
 8002fb6:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8002fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fbe:	ee17 3a90 	vmov	r3, s15
 8002fc2:	61fb      	str	r3, [r7, #28]
            len_sig = static_cast<int>(
                (static_cast<float>(numframes - 1) * frame_stride + frame_sample_length));
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	ee07 3a90 	vmov	s15, r3
 8002fcc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002fd0:	edd7 7a02 	vldr	s15, [r7, #8]
 8002fd4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002fd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fda:	ee07 3a90 	vmov	s15, r3
 8002fde:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002fe2:	ee77 7a27 	vadd.f32	s15, s14, s15
            len_sig = static_cast<int>(
 8002fe6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002fea:	ee17 3a90 	vmov	r3, s15
 8002fee:	61bb      	str	r3, [r7, #24]

            info->signal->total_length = static_cast<size_t>(len_sig);
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	611a      	str	r2, [r3, #16]
        }

        // alloc the vector on the heap, will be owned by the info struct
        std::vector<uint32_t> *frame_indices = new std::vector<uint32_t>();
 8002ff8:	200c      	movs	r0, #12
 8002ffa:	f014 ff22 	bl	8017e42 <_Znwj>
 8002ffe:	4603      	mov	r3, r0
 8003000:	461c      	mov	r4, r3
 8003002:	2300      	movs	r3, #0
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	2300      	movs	r3, #0
 8003008:	6063      	str	r3, [r4, #4]
 800300a:	2300      	movs	r3, #0
 800300c:	60a3      	str	r3, [r4, #8]
 800300e:	4620      	mov	r0, r4
 8003010:	f7ff ff30 	bl	8002e74 <_ZNSt6vectorImSaImEEC1Ev>
 8003014:	627c      	str	r4, [r7, #36]	; 0x24

        int frame_count = 0;
 8003016:	2300      	movs	r3, #0
 8003018:	637b      	str	r3, [r7, #52]	; 0x34

        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 800301a:	2300      	movs	r3, #0
 800301c:	633b      	str	r3, [r7, #48]	; 0x30
 800301e:	69bb      	ldr	r3, [r7, #24]
 8003020:	461a      	mov	r2, r3
 8003022:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003024:	4293      	cmp	r3, r2
 8003026:	bf34      	ite	cc
 8003028:	2301      	movcc	r3, #1
 800302a:	2300      	movcs	r3, #0
 800302c:	b2db      	uxtb	r3, r3
 800302e:	2b00      	cmp	r3, #0
 8003030:	d01e      	beq.n	8003070 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1e0>
            if (++frame_count > numframes) break;
 8003032:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003034:	3301      	adds	r3, #1
 8003036:	637b      	str	r3, [r7, #52]	; 0x34
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800303c:	429a      	cmp	r2, r3
 800303e:	bfcc      	ite	gt
 8003040:	2301      	movgt	r3, #1
 8003042:	2300      	movle	r3, #0
 8003044:	b2db      	uxtb	r3, r3
 8003046:	2b00      	cmp	r3, #0
 8003048:	d111      	bne.n	800306e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x1de>

            frame_indices->push_back(ix);
 800304a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304c:	623b      	str	r3, [r7, #32]
 800304e:	f107 0320 	add.w	r3, r7, #32
 8003052:	4619      	mov	r1, r3
 8003054:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003056:	f002 fb9d 	bl	8005794 <_ZNSt6vectorImSaImEE9push_backEOm>
        for (size_t ix = 0; ix < static_cast<uint32_t>(len_sig); ix += static_cast<size_t>(frame_stride)) {
 800305a:	edd7 7a02 	vldr	s15, [r7, #8]
 800305e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003062:	ee17 2a90 	vmov	r2, s15
 8003066:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003068:	4413      	add	r3, r2
 800306a:	633b      	str	r3, [r7, #48]	; 0x30
 800306c:	e7d7      	b.n	800301e <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb+0x18e>
            if (++frame_count > numframes) break;
 800306e:	bf00      	nop
        }

        info->frame_ixs = frame_indices;
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003074:	605a      	str	r2, [r3, #4]
        info->frame_length = frame_sample_length;
 8003076:	697b      	ldr	r3, [r7, #20]
 8003078:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800307a:	609a      	str	r2, [r3, #8]

        return EIDSP_OK;
 800307c:	2300      	movs	r3, #0
    }
 800307e:	4618      	mov	r0, r3
 8003080:	373c      	adds	r7, #60	; 0x3c
 8003082:	46bd      	mov	sp, r7
 8003084:	bd90      	pop	{r4, r7, pc}
 8003086:	bf00      	nop
 8003088:	0801d2f8 	.word	0x0801d2f8
 800308c:	fffffc15 	.word	0xfffffc15
 8003090:	0801c79c 	.word	0x0801c79c
 8003094:	0801c7ac 	.word	0x0801c7ac
 8003098:	0801d314 	.word	0x0801d314
 800309c:	0801d268 	.word	0x0801d268

080030a0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>:
        size_t signal_size,
        uint32_t sampling_frequency,
        float frame_length,
        float frame_stride,
        bool zero_padding)
    {
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b08a      	sub	sp, #40	; 0x28
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6178      	str	r0, [r7, #20]
 80030a8:	6139      	str	r1, [r7, #16]
 80030aa:	ed87 0a03 	vstr	s0, [r7, #12]
 80030ae:	edc7 0a02 	vstr	s1, [r7, #8]
 80030b2:	4613      	mov	r3, r2
 80030b4:	71fb      	strb	r3, [r7, #7]
        size_t length_signal = signal_size;
 80030b6:	697b      	ldr	r3, [r7, #20]
 80030b8:	623b      	str	r3, [r7, #32]
        int frame_sample_length = static_cast<int>(round(static_cast<float>(sampling_frequency) * frame_length));
 80030ba:	693b      	ldr	r3, [r7, #16]
 80030bc:	ee07 3a90 	vmov	s15, r3
 80030c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80030c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030cc:	eeb0 0a67 	vmov.f32	s0, s15
 80030d0:	f7fd fff8 	bl	80010c4 <_ZSt5roundf>
 80030d4:	eef0 7a40 	vmov.f32	s15, s0
 80030d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80030dc:	ee17 3a90 	vmov	r3, s15
 80030e0:	61fb      	str	r3, [r7, #28]
        frame_stride = round(static_cast<float>(sampling_frequency) * frame_stride);
 80030e2:	693b      	ldr	r3, [r7, #16]
 80030e4:	ee07 3a90 	vmov	s15, r3
 80030e8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80030ec:	edd7 7a02 	vldr	s15, [r7, #8]
 80030f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030f4:	eeb0 0a67 	vmov.f32	s0, s15
 80030f8:	f7fd ffe4 	bl	80010c4 <_ZSt5roundf>
 80030fc:	ed87 0a02 	vstr	s0, [r7, #8]

        int numframes;

        if (zero_padding) {
 8003100:	79fb      	ldrb	r3, [r7, #7]
 8003102:	2b00      	cmp	r3, #0
 8003104:	d016      	beq.n	8003134 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb+0x94>
            // Calculation of number of frames
            numframes = static_cast<int>(
                ceil(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8003106:	69fb      	ldr	r3, [r7, #28]
 8003108:	6a3a      	ldr	r2, [r7, #32]
 800310a:	1ad3      	subs	r3, r2, r3
 800310c:	ee07 3a90 	vmov	s15, r3
 8003110:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003114:	edd7 7a02 	vldr	s15, [r7, #8]
 8003118:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800311c:	eeb0 0a66 	vmov.f32	s0, s13
 8003120:	f7fd ff90 	bl	8001044 <_ZSt4ceilf>
 8003124:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003128:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800312c:	ee17 3a90 	vmov	r3, s15
 8003130:	627b      	str	r3, [r7, #36]	; 0x24
 8003132:	e015      	b.n	8003160 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb+0xc0>
        }
        else {
            numframes = static_cast<int>(
                floor(static_cast<float>(length_signal - frame_sample_length) / frame_stride));
 8003134:	69fb      	ldr	r3, [r7, #28]
 8003136:	6a3a      	ldr	r2, [r7, #32]
 8003138:	1ad3      	subs	r3, r2, r3
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003142:	edd7 7a02 	vldr	s15, [r7, #8]
 8003146:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800314a:	eeb0 0a66 	vmov.f32	s0, s13
 800314e:	f7fd ff99 	bl	8001084 <_ZSt5floorf>
 8003152:	eef0 7a40 	vmov.f32	s15, s0
            numframes = static_cast<int>(
 8003156:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800315a:	ee17 3a90 	vmov	r3, s15
 800315e:	627b      	str	r3, [r7, #36]	; 0x24
        }

        return numframes;
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 8003162:	4618      	mov	r0, r3
 8003164:	3728      	adds	r7, #40	; 0x28
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>:
     * @param out_buffer_size Buffer size
     * @param fft_points (int): The length of FFT. If fft_length is greater than frame_len, the frames will be zero-padded.
     * @returns EIDSP_OK if OK
     */
    static int power_spectrum(float *frame, size_t frame_size, float *out_buffer, size_t out_buffer_size, uint16_t fft_points)
    {
 800316c:	b5b0      	push	{r4, r5, r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
        if (out_buffer_size != static_cast<size_t>(fft_points / 2 + 1)) {
 800317a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800317c:	085b      	lsrs	r3, r3, #1
 800317e:	b29b      	uxth	r3, r3
 8003180:	3301      	adds	r3, #1
 8003182:	461a      	mov	r2, r3
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	4293      	cmp	r3, r2
 8003188:	d00b      	beq.n	80031a2 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x36>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800318a:	4a30      	ldr	r2, [pc, #192]	; (800324c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe0>)
 800318c:	4930      	ldr	r1, [pc, #192]	; (8003250 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe4>)
 800318e:	4831      	ldr	r0, [pc, #196]	; (8003254 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xe8>)
 8003190:	f018 fbfa 	bl	801b988 <iprintf>
 8003194:	4b30      	ldr	r3, [pc, #192]	; (8003258 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xec>)
 8003196:	4a31      	ldr	r2, [pc, #196]	; (800325c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf0>)
 8003198:	f44f 7195 	mov.w	r1, #298	; 0x12a
 800319c:	4830      	ldr	r0, [pc, #192]	; (8003260 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf4>)
 800319e:	f017 ff0f 	bl	801afc0 <__assert_func>
        }

        int r = numpy::rfft(frame, frame_size, out_buffer, out_buffer_size, fft_points);
 80031a2:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031a4:	9300      	str	r3, [sp, #0]
 80031a6:	683b      	ldr	r3, [r7, #0]
 80031a8:	687a      	ldr	r2, [r7, #4]
 80031aa:	68b9      	ldr	r1, [r7, #8]
 80031ac:	68f8      	ldr	r0, [r7, #12]
 80031ae:	f7fe fd3f 	bl	8001c30 <_ZN2ei5numpy4rfftEPKfjPfjj>
 80031b2:	6138      	str	r0, [r7, #16]
        if (r != EIDSP_OK) {
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d001      	beq.n	80031be <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x52>
            return r;
 80031ba:	693b      	ldr	r3, [r7, #16]
 80031bc:	e042      	b.n	8003244 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xd8>
        }

        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
 80031c2:	697a      	ldr	r2, [r7, #20]
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	429a      	cmp	r2, r3
 80031c8:	d23b      	bcs.n	8003242 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xd6>
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 80031ca:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031cc:	ee07 3a90 	vmov	s15, r3
 80031d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031d4:	ee17 0a90 	vmov	r0, s15
 80031d8:	f7fd f9d6 	bl	8000588 <__aeabi_f2d>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	f04f 0000 	mov.w	r0, #0
 80031e4:	491f      	ldr	r1, [pc, #124]	; (8003264 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0xf8>)
 80031e6:	f7fd fb51 	bl	800088c <__aeabi_ddiv>
 80031ea:	4602      	mov	r2, r0
 80031ec:	460b      	mov	r3, r1
 80031ee:	4614      	mov	r4, r2
 80031f0:	461d      	mov	r5, r3
                (out_buffer[ix] * out_buffer[ix]);
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	009b      	lsls	r3, r3, #2
 80031f6:	687a      	ldr	r2, [r7, #4]
 80031f8:	4413      	add	r3, r2
 80031fa:	ed93 7a00 	vldr	s14, [r3]
 80031fe:	697b      	ldr	r3, [r7, #20]
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	4413      	add	r3, r2
 8003206:	edd3 7a00 	vldr	s15, [r3]
 800320a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800320e:	ee17 0a90 	vmov	r0, s15
 8003212:	f7fd f9b9 	bl	8000588 <__aeabi_f2d>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
            out_buffer[ix] = (1.0 / static_cast<float>(fft_points)) *
 800321a:	4620      	mov	r0, r4
 800321c:	4629      	mov	r1, r5
 800321e:	f7fd fa0b 	bl	8000638 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4610      	mov	r0, r2
 8003228:	4619      	mov	r1, r3
 800322a:	697b      	ldr	r3, [r7, #20]
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	687a      	ldr	r2, [r7, #4]
 8003230:	18d4      	adds	r4, r2, r3
 8003232:	f7fd fcf9 	bl	8000c28 <__aeabi_d2f>
 8003236:	4603      	mov	r3, r0
 8003238:	6023      	str	r3, [r4, #0]
        for (size_t ix = 0; ix < out_buffer_size; ix++) {
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	3301      	adds	r3, #1
 800323e:	617b      	str	r3, [r7, #20]
 8003240:	e7bf      	b.n	80031c2 <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt+0x56>
        }

        return EIDSP_OK;
 8003242:	2300      	movs	r3, #0
    }
 8003244:	4618      	mov	r0, r3
 8003246:	3718      	adds	r7, #24
 8003248:	46bd      	mov	sp, r7
 800324a:	bdb0      	pop	{r4, r5, r7, pc}
 800324c:	0801c850 	.word	0x0801c850
 8003250:	fffffc14 	.word	0xfffffc14
 8003254:	0801c79c 	.word	0x0801c79c
 8003258:	0801c7ac 	.word	0x0801c7ac
 800325c:	0801d384 	.word	0x0801d384
 8003260:	0801d268 	.word	0x0801d268
 8003264:	3ff00000 	.word	0x3ff00000

08003268 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb>:
     * @param variance_normalization If the variance normilization should
     *   be performed or not.
     * @returns 0 if OK
     */
    static int cmvnw(matrix_t *features_matrix, uint16_t win_size = 301, bool variance_normalization = false)
    {
 8003268:	b5b0      	push	{r4, r5, r7, lr}
 800326a:	b098      	sub	sp, #96	; 0x60
 800326c:	af00      	add	r7, sp, #0
 800326e:	6078      	str	r0, [r7, #4]
 8003270:	460b      	mov	r3, r1
 8003272:	807b      	strh	r3, [r7, #2]
 8003274:	4613      	mov	r3, r2
 8003276:	707b      	strb	r3, [r7, #1]
        uint16_t pad_size = (win_size - 1) / 2;
 8003278:	887b      	ldrh	r3, [r7, #2]
 800327a:	3b01      	subs	r3, #1
 800327c:	0fda      	lsrs	r2, r3, #31
 800327e:	4413      	add	r3, r2
 8003280:	105b      	asrs	r3, r3, #1
 8003282:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

        int ret;
        float *features_buffer_ptr;

        // mean & variance normalization
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 800328e:	0052      	lsls	r2, r2, #1
 8003290:	1899      	adds	r1, r3, r2
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	689a      	ldr	r2, [r3, #8]
 8003296:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800329a:	2300      	movs	r3, #0
 800329c:	f7fd ff6a 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80032a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d10b      	bne.n	80032be <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x56>
 80032a6:	4aa7      	ldr	r2, [pc, #668]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 80032a8:	49a7      	ldr	r1, [pc, #668]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 80032aa:	48a8      	ldr	r0, [pc, #672]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80032ac:	f018 fb6c 	bl	801b988 <iprintf>
 80032b0:	4ba7      	ldr	r3, [pc, #668]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 80032b2:	4aa8      	ldr	r2, [pc, #672]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 80032b4:	f44f 71a7 	mov.w	r1, #334	; 0x14e
 80032b8:	48a7      	ldr	r0, [pc, #668]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 80032ba:	f017 fe81 	bl	801afc0 <__assert_func>
        if (!vec_pad.buffer) {
 80032be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d10b      	bne.n	80032dc <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x74>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80032c4:	4a9f      	ldr	r2, [pc, #636]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 80032c6:	49a0      	ldr	r1, [pc, #640]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 80032c8:	48a0      	ldr	r0, [pc, #640]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80032ca:	f018 fb5d 	bl	801b988 <iprintf>
 80032ce:	4ba0      	ldr	r3, [pc, #640]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 80032d0:	4aa0      	ldr	r2, [pc, #640]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 80032d2:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80032d6:	48a0      	ldr	r0, [pc, #640]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 80032d8:	f017 fe72 	bl	801afc0 <__assert_func>
        }

        ret = numpy::pad_1d_symmetric(features_matrix, &vec_pad, pad_size, pad_size);
 80032dc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80032e0:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 80032e4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80032e8:	6878      	ldr	r0, [r7, #4]
 80032ea:	f7fe fb05 	bl	80018f8 <_ZN2ei5numpy16pad_1d_symmetricEPNS_9ei_matrixES2_tt>
 80032ee:	64b8      	str	r0, [r7, #72]	; 0x48
        if (ret != EIDSP_OK) {
 80032f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00b      	beq.n	800330e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0xa6>
            EIDSP_ERR(ret);
 80032f6:	4a99      	ldr	r2, [pc, #612]	; (800355c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f4>)
 80032f8:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80032fa:	4894      	ldr	r0, [pc, #592]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80032fc:	f018 fb44 	bl	801b988 <iprintf>
 8003300:	4b93      	ldr	r3, [pc, #588]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 8003302:	4a94      	ldr	r2, [pc, #592]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 8003304:	f240 1155 	movw	r1, #341	; 0x155
 8003308:	4893      	ldr	r0, [pc, #588]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 800330a:	f017 fe59 	bl	801afc0 <__assert_func>
        }

        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 800330e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003310:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003314:	2300      	movs	r3, #0
 8003316:	2201      	movs	r2, #1
 8003318:	f7fd ff2c 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 800331c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800331e:	2b00      	cmp	r3, #0
 8003320:	d10b      	bne.n	800333a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0xd2>
 8003322:	4a88      	ldr	r2, [pc, #544]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 8003324:	4988      	ldr	r1, [pc, #544]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 8003326:	4889      	ldr	r0, [pc, #548]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 8003328:	f018 fb2e 	bl	801b988 <iprintf>
 800332c:	4b88      	ldr	r3, [pc, #544]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 800332e:	4a89      	ldr	r2, [pc, #548]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 8003330:	f44f 71ac 	mov.w	r1, #344	; 0x158
 8003334:	4888      	ldr	r0, [pc, #544]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 8003336:	f017 fe43 	bl	801afc0 <__assert_func>
        if (!mean_matrix.buffer) {
 800333a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800333c:	2b00      	cmp	r3, #0
 800333e:	d10b      	bne.n	8003358 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0xf0>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003340:	4a80      	ldr	r2, [pc, #512]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 8003342:	4981      	ldr	r1, [pc, #516]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 8003344:	4881      	ldr	r0, [pc, #516]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 8003346:	f018 fb1f 	bl	801b988 <iprintf>
 800334a:	4b81      	ldr	r3, [pc, #516]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 800334c:	4a81      	ldr	r2, [pc, #516]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 800334e:	f44f 71ad 	mov.w	r1, #346	; 0x15a
 8003352:	4881      	ldr	r0, [pc, #516]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 8003354:	f017 fe34 	bl	801afc0 <__assert_func>
        }

        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 8003358:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800335a:	f107 0018 	add.w	r0, r7, #24
 800335e:	2300      	movs	r3, #0
 8003360:	2201      	movs	r2, #1
 8003362:	f7fd ff07 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003366:	69bb      	ldr	r3, [r7, #24]
 8003368:	2b00      	cmp	r3, #0
 800336a:	d10b      	bne.n	8003384 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x11c>
 800336c:	4a75      	ldr	r2, [pc, #468]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 800336e:	4976      	ldr	r1, [pc, #472]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 8003370:	4876      	ldr	r0, [pc, #472]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 8003372:	f018 fb09 	bl	801b988 <iprintf>
 8003376:	4b76      	ldr	r3, [pc, #472]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 8003378:	4a76      	ldr	r2, [pc, #472]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 800337a:	f240 115d 	movw	r1, #349	; 0x15d
 800337e:	4876      	ldr	r0, [pc, #472]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 8003380:	f017 fe1e 	bl	801afc0 <__assert_func>
        if (!window_variance.buffer) {
 8003384:	69bb      	ldr	r3, [r7, #24]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d101      	bne.n	800338e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x126>
            return EIDSP_OUT_OF_MEM;
 800338a:	4c6f      	ldr	r4, [pc, #444]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 800338c:	e0c5      	b.n	800351a <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2b2>
        }

        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 800338e:	2300      	movs	r3, #0
 8003390:	65bb      	str	r3, [r7, #88]	; 0x58
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003398:	429a      	cmp	r2, r3
 800339a:	f080 80bd 	bcs.w	8003518 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2b0>
            // create a slice on the vec_pad
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 800339e:	887c      	ldrh	r4, [r7, #2]
 80033a0:	6c3d      	ldr	r5, [r7, #64]	; 0x40
 80033a2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80033a4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80033a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033a8:	fb01 f303 	mul.w	r3, r1, r3
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	f107 0008 	add.w	r0, r7, #8
 80033b4:	462a      	mov	r2, r5
 80033b6:	4621      	mov	r1, r4
 80033b8:	f7fd fedc 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80033bc:	68bb      	ldr	r3, [r7, #8]
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10b      	bne.n	80033da <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x172>
 80033c2:	4a60      	ldr	r2, [pc, #384]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 80033c4:	4960      	ldr	r1, [pc, #384]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 80033c6:	4861      	ldr	r0, [pc, #388]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80033c8:	f018 fade 	bl	801b988 <iprintf>
 80033cc:	4b60      	ldr	r3, [pc, #384]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 80033ce:	4a61      	ldr	r2, [pc, #388]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 80033d0:	f44f 71b2 	mov.w	r1, #356	; 0x164
 80033d4:	4860      	ldr	r0, [pc, #384]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 80033d6:	f017 fdf3 	bl	801afc0 <__assert_func>
            if (!window.buffer) {
 80033da:	68bb      	ldr	r3, [r7, #8]
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d10b      	bne.n	80033f8 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x190>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80033e0:	4a58      	ldr	r2, [pc, #352]	; (8003544 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2dc>)
 80033e2:	4959      	ldr	r1, [pc, #356]	; (8003548 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e0>)
 80033e4:	4859      	ldr	r0, [pc, #356]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 80033e6:	f018 facf 	bl	801b988 <iprintf>
 80033ea:	4b59      	ldr	r3, [pc, #356]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 80033ec:	4a59      	ldr	r2, [pc, #356]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 80033ee:	f44f 71b3 	mov.w	r1, #358	; 0x166
 80033f2:	4859      	ldr	r0, [pc, #356]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 80033f4:	f017 fde4 	bl	801afc0 <__assert_func>
            }

            ret = numpy::mean_axis0(&window, &mean_matrix);
 80033f8:	f107 0228 	add.w	r2, r7, #40	; 0x28
 80033fc:	f107 0308 	add.w	r3, r7, #8
 8003400:	4611      	mov	r1, r2
 8003402:	4618      	mov	r0, r3
 8003404:	f7fe fb84 	bl	8001b10 <_ZN2ei5numpy10mean_axis0EPNS_9ei_matrixES2_>
 8003408:	64b8      	str	r0, [r7, #72]	; 0x48
            if (ret != EIDSP_OK) {
 800340a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800340c:	2b00      	cmp	r3, #0
 800340e:	d00b      	beq.n	8003428 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x1c0>
                EIDSP_ERR(ret);
 8003410:	4a52      	ldr	r2, [pc, #328]	; (800355c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f4>)
 8003412:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003414:	484d      	ldr	r0, [pc, #308]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 8003416:	f018 fab7 	bl	801b988 <iprintf>
 800341a:	4b4d      	ldr	r3, [pc, #308]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 800341c:	4a4d      	ldr	r2, [pc, #308]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 800341e:	f240 116b 	movw	r1, #363	; 0x16b
 8003422:	484d      	ldr	r0, [pc, #308]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 8003424:	f017 fdcc 	bl	801afc0 <__assert_func>
            }

            if (variance_normalization == true) {
 8003428:	787b      	ldrb	r3, [r7, #1]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d147      	bne.n	80034be <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x256>
                ret = numpy::std_axis0(&window, &window_variance);
 800342e:	f107 0218 	add.w	r2, r7, #24
 8003432:	f107 0308 	add.w	r3, r7, #8
 8003436:	4611      	mov	r1, r2
 8003438:	4618      	mov	r0, r3
 800343a:	f7fe fbeb 	bl	8001c14 <_ZN2ei5numpy9std_axis0EPNS_9ei_matrixES2_>
 800343e:	64b8      	str	r0, [r7, #72]	; 0x48
                if (ret != EIDSP_OK) {
 8003440:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00b      	beq.n	800345e <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x1f6>
                    EIDSP_ERR(ret);
 8003446:	4a45      	ldr	r2, [pc, #276]	; (800355c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f4>)
 8003448:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 800344a:	4840      	ldr	r0, [pc, #256]	; (800354c <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e4>)
 800344c:	f018 fa9c 	bl	801b988 <iprintf>
 8003450:	4b3f      	ldr	r3, [pc, #252]	; (8003550 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2e8>)
 8003452:	4a40      	ldr	r2, [pc, #256]	; (8003554 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2ec>)
 8003454:	f240 1171 	movw	r1, #369	; 0x171
 8003458:	483f      	ldr	r0, [pc, #252]	; (8003558 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f0>)
 800345a:	f017 fdb1 	bl	801afc0 <__assert_func>
                }

                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681a      	ldr	r2, [r3, #0]
 8003462:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003464:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003466:	fb01 f303 	mul.w	r3, r1, r3
 800346a:	009b      	lsls	r3, r3, #2
 800346c:	4413      	add	r3, r2
 800346e:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 8003470:	2300      	movs	r3, #0
 8003472:	657b      	str	r3, [r7, #84]	; 0x54
 8003474:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003476:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8003478:	429a      	cmp	r2, r3
 800347a:	d244      	bcs.n	8003506 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x29e>
                    *(features_buffer_ptr) = (*(features_buffer_ptr)-mean_matrix.buffer[col]) /
 800347c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800347e:	ed93 7a00 	vldr	s14, [r3]
 8003482:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003484:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003486:	009b      	lsls	r3, r3, #2
 8003488:	4413      	add	r3, r2
 800348a:	edd3 7a00 	vldr	s15, [r3]
 800348e:	ee77 6a67 	vsub.f32	s13, s14, s15
                                             (window_variance.buffer[col] + FLT_EPSILON);
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003496:	009b      	lsls	r3, r3, #2
 8003498:	4413      	add	r3, r2
 800349a:	edd3 7a00 	vldr	s15, [r3]
 800349e:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003560 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x2f8>
 80034a2:	ee37 7a87 	vadd.f32	s14, s15, s14
                    *(features_buffer_ptr) = (*(features_buffer_ptr)-mean_matrix.buffer[col]) /
 80034a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80034aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034ac:	edc3 7a00 	vstr	s15, [r3]
                    features_buffer_ptr++;
 80034b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034b2:	3304      	adds	r3, #4
 80034b4:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80034b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80034b8:	3301      	adds	r3, #1
 80034ba:	657b      	str	r3, [r7, #84]	; 0x54
 80034bc:	e7da      	b.n	8003474 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x20c>
                }
            }

            else {
                features_buffer_ptr = &features_matrix->buffer[ix * vec_pad.cols];
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034c4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034c6:	fb01 f303 	mul.w	r3, r1, r3
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	4413      	add	r3, r2
 80034ce:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80034d0:	2300      	movs	r3, #0
 80034d2:	653b      	str	r3, [r7, #80]	; 0x50
 80034d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80034d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034d8:	429a      	cmp	r2, r3
 80034da:	d214      	bcs.n	8003506 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x29e>
                    *(features_buffer_ptr) = *(features_buffer_ptr)-mean_matrix.buffer[col];
 80034dc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034de:	ed93 7a00 	vldr	s14, [r3]
 80034e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034e6:	009b      	lsls	r3, r3, #2
 80034e8:	4413      	add	r3, r2
 80034ea:	edd3 7a00 	vldr	s15, [r3]
 80034ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80034f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034f4:	edc3 7a00 	vstr	s15, [r3]
                    features_buffer_ptr++;
 80034f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80034fa:	3304      	adds	r3, #4
 80034fc:	65fb      	str	r3, [r7, #92]	; 0x5c
                for (size_t col = 0; col < vec_pad.cols; col++) {
 80034fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003500:	3301      	adds	r3, #1
 8003502:	653b      	str	r3, [r7, #80]	; 0x50
 8003504:	e7e6      	b.n	80034d4 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x26c>
            EI_DSP_MATRIX_B(window, win_size, vec_pad.cols, vec_pad.buffer + (ix * vec_pad.cols));
 8003506:	f107 0308 	add.w	r3, r7, #8
 800350a:	4618      	mov	r0, r3
 800350c:	f7fd fe5e 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < features_matrix->rows; ix++) {
 8003510:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003512:	3301      	adds	r3, #1
 8003514:	65bb      	str	r3, [r7, #88]	; 0x58
 8003516:	e73c      	b.n	8003392 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb+0x12a>
                }
            }
        }
        return EIDSP_OK;
 8003518:	2400      	movs	r4, #0
        EI_DSP_MATRIX(window_variance, vec_pad.cols, 1);
 800351a:	f107 0318 	add.w	r3, r7, #24
 800351e:	4618      	mov	r0, r3
 8003520:	f7fd fe54 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(mean_matrix, vec_pad.cols, 1);
 8003524:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003528:	4618      	mov	r0, r3
 800352a:	f7fd fe4f 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(vec_pad, features_matrix->rows + (pad_size * 2), features_matrix->cols);
 800352e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fe4a 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 8003538:	4623      	mov	r3, r4
    }
 800353a:	4618      	mov	r0, r3
 800353c:	3760      	adds	r7, #96	; 0x60
 800353e:	46bd      	mov	sp, r7
 8003540:	bdb0      	pop	{r4, r5, r7, pc}
 8003542:	bf00      	nop
 8003544:	0801c788 	.word	0x0801c788
 8003548:	fffffc16 	.word	0xfffffc16
 800354c:	0801c79c 	.word	0x0801c79c
 8003550:	0801c7ac 	.word	0x0801c7ac
 8003554:	0801d3dc 	.word	0x0801d3dc
 8003558:	0801d268 	.word	0x0801d268
 800355c:	0801c900 	.word	0x0801c900
 8003560:	34000000 	.word	0x34000000
 8003564:	00000000 	.word	0x00000000

08003568 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>:
     * @param output_transposed If set to true this will transpose the matrix (memory efficient).
     *                          This is more efficient than calling this function and then transposing
     *                          as the latter requires the filterbank to be allocated twice (for a short while).
     * @returns EIDSP_OK if OK
     */
    static int filterbanks(
 8003568:	b590      	push	{r4, r7, lr}
 800356a:	ed2d 8b02 	vpush	{d8}
 800356e:	b099      	sub	sp, #100	; 0x64
 8003570:	af02      	add	r7, sp, #8
 8003572:	60f8      	str	r0, [r7, #12]
 8003574:	607a      	str	r2, [r7, #4]
 8003576:	603b      	str	r3, [r7, #0]
 8003578:	460b      	mov	r3, r1
 800357a:	817b      	strh	r3, [r7, #10]
        uint16_t num_filter, int coefficients, uint32_t sampling_freq,
        uint32_t low_freq, uint32_t high_freq,
        bool output_transposed = false
        )
    {
        const size_t mels_mem_size = (num_filter + 2) * sizeof(float);
 800357c:	897b      	ldrh	r3, [r7, #10]
 800357e:	3302      	adds	r3, #2
 8003580:	009b      	lsls	r3, r3, #2
 8003582:	647b      	str	r3, [r7, #68]	; 0x44
        const size_t hertz_mem_size = (num_filter + 2) * sizeof(float);
 8003584:	897b      	ldrh	r3, [r7, #10]
 8003586:	3302      	adds	r3, #2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	643b      	str	r3, [r7, #64]	; 0x40
        const size_t freq_index_mem_size = (num_filter + 2) * sizeof(int);
 800358c:	897b      	ldrh	r3, [r7, #10]
 800358e:	3302      	adds	r3, #2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	63fb      	str	r3, [r7, #60]	; 0x3c

        float *mels = (float*)ei_dsp_malloc(mels_mem_size);
 8003594:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8003596:	f017 fe01 	bl	801b19c <malloc>
 800359a:	4603      	mov	r3, r0
 800359c:	63bb      	str	r3, [r7, #56]	; 0x38
        if (!mels) {
 800359e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d10a      	bne.n	80035ba <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x52>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 80035a4:	4abc      	ldr	r2, [pc, #752]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 80035a6:	49bd      	ldr	r1, [pc, #756]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 80035a8:	48bd      	ldr	r0, [pc, #756]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 80035aa:	f018 f9ed 	bl	801b988 <iprintf>
 80035ae:	4bbd      	ldr	r3, [pc, #756]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 80035b0:	4abd      	ldr	r2, [pc, #756]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 80035b2:	2147      	movs	r1, #71	; 0x47
 80035b4:	48bd      	ldr	r0, [pc, #756]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 80035b6:	f017 fd03 	bl	801afc0 <__assert_func>
        }

        if (filterbanks->rows != num_filter || filterbanks->cols != static_cast<uint32_t>(coefficients)) {
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d104      	bne.n	80035ce <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x66>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	689a      	ldr	r2, [r3, #8]
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d00a      	beq.n	80035e4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x7c>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80035ce:	4ab8      	ldr	r2, [pc, #736]	; (80038b0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x348>)
 80035d0:	49b8      	ldr	r1, [pc, #736]	; (80038b4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x34c>)
 80035d2:	48b3      	ldr	r0, [pc, #716]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 80035d4:	f018 f9d8 	bl	801b988 <iprintf>
 80035d8:	4bb2      	ldr	r3, [pc, #712]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 80035da:	4ab3      	ldr	r2, [pc, #716]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 80035dc:	214b      	movs	r1, #75	; 0x4b
 80035de:	48b3      	ldr	r0, [pc, #716]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 80035e0:	f017 fcee 	bl	801afc0 <__assert_func>
        }

#if EIDSP_QUANTIZE_FILTERBANK
        memset(filterbanks->buffer, 0, filterbanks->rows * filterbanks->cols * sizeof(uint8_t));
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	6818      	ldr	r0, [r3, #0]
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	68fa      	ldr	r2, [r7, #12]
 80035ee:	6892      	ldr	r2, [r2, #8]
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	2100      	movs	r1, #0
 80035f8:	f017 fe16 	bl	801b228 <memset>

        // Computing the Mel filterbank
        // converting the upper and lower frequencies to Mels.
        // num_filter + 2 is because for num_filter filterbanks we need
        // num_filter+2 point.
        numpy::linspace(
 80035fc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035fe:	ee07 3a90 	vmov	s15, r3
 8003602:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003606:	eeb0 0a67 	vmov.f32	s0, s15
 800360a:	f7ff f91d 	bl	8002848 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 800360e:	eeb0 8a40 	vmov.f32	s16, s0
 8003612:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003614:	ee07 3a90 	vmov	s15, r3
 8003618:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800361c:	eeb0 0a67 	vmov.f32	s0, s15
 8003620:	f7ff f912 	bl	8002848 <_ZN2ei8speechpy9functions16frequency_to_melEf>
 8003624:	eef0 7a40 	vmov.f32	s15, s0
            functions::frequency_to_mel(static_cast<float>(low_freq)),
            functions::frequency_to_mel(static_cast<float>(high_freq)),
            num_filter + 2,
 8003628:	897b      	ldrh	r3, [r7, #10]
 800362a:	3302      	adds	r3, #2
        numpy::linspace(
 800362c:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800362e:	4618      	mov	r0, r3
 8003630:	eef0 0a67 	vmov.f32	s1, s15
 8003634:	eeb0 0a48 	vmov.f32	s0, s16
 8003638:	f7fe fd68 	bl	800210c <_ZN2ei5numpy8linspaceEffmPf>
            mels);

        // we should convert Mels back to Hertz because the start and end-points
        // should be at the desired frequencies.
        float *hertz = (float*)ei_dsp_malloc(hertz_mem_size);
 800363c:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800363e:	f017 fdad 	bl	801b19c <malloc>
 8003642:	4603      	mov	r3, r0
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
        if (!hertz) {
 8003646:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10d      	bne.n	8003668 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x100>
            ei_dsp_free(mels, mels_mem_size);
 800364c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800364e:	f017 fdad 	bl	801b1ac <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003652:	4a91      	ldr	r2, [pc, #580]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 8003654:	4991      	ldr	r1, [pc, #580]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 8003656:	4892      	ldr	r0, [pc, #584]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003658:	f018 f996 	bl	801b988 <iprintf>
 800365c:	4b91      	ldr	r3, [pc, #580]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 800365e:	4a92      	ldr	r2, [pc, #584]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003660:	2163      	movs	r1, #99	; 0x63
 8003662:	4892      	ldr	r0, [pc, #584]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003664:	f017 fcac 	bl	801afc0 <__assert_func>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003668:	2300      	movs	r3, #0
 800366a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 800366e:	897b      	ldrh	r3, [r7, #10]
 8003670:	1c5a      	adds	r2, r3, #1
 8003672:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003676:	429a      	cmp	r2, r3
 8003678:	db74      	blt.n	8003764 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1fc>
            hertz[ix] = functions::mel_to_frequency(mels[ix]);
 800367a:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800367e:	009b      	lsls	r3, r3, #2
 8003680:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003682:	4413      	add	r3, r2
 8003684:	edd3 7a00 	vldr	s15, [r3]
 8003688:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800368c:	009b      	lsls	r3, r3, #2
 800368e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003690:	18d4      	adds	r4, r2, r3
 8003692:	eeb0 0a67 	vmov.f32	s0, s15
 8003696:	f7ff f963 	bl	8002960 <_ZN2ei8speechpy9functions16mel_to_frequencyEf>
 800369a:	eef0 7a40 	vmov.f32	s15, s0
 800369e:	edc4 7a00 	vstr	s15, [r4]
            if (hertz[ix] < low_freq) {
 80036a2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036aa:	4413      	add	r3, r2
 80036ac:	ed93 7a00 	vldr	s14, [r3]
 80036b0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036b2:	ee07 3a90 	vmov	s15, r3
 80036b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036c2:	d50b      	bpl.n	80036dc <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x174>
                hertz[ix] = low_freq;
 80036c4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036cc:	4413      	add	r3, r2
 80036ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80036d0:	ee07 2a90 	vmov	s15, r2
 80036d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036d8:	edc3 7a00 	vstr	s15, [r3]
            }
            if (hertz[ix] > high_freq) {
 80036dc:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036e4:	4413      	add	r3, r2
 80036e6:	ed93 7a00 	vldr	s14, [r3]
 80036ea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036ec:	ee07 3a90 	vmov	s15, r3
 80036f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80036f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80036f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036fc:	dd0b      	ble.n	8003716 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1ae>
                hertz[ix] = high_freq;
 80036fe:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003702:	009b      	lsls	r3, r3, #2
 8003704:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003706:	4413      	add	r3, r2
 8003708:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800370a:	ee07 2a90 	vmov	s15, r2
 800370e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003712:	edc3 7a00 	vstr	s15, [r3]

            // here is a really annoying bug in Speechpy which calculates the frequency index wrong for the last bucket
            // the last 'hertz' value is not 8,000 (with sampling rate 16,000) but 7,999.999999
            // thus calculating the bucket to 64, not 65.
            // we're adjusting this here a tiny bit to ensure we have the same result
            if (ix == num_filter + 2 - 1) {
 8003716:	f8b7 2056 	ldrh.w	r2, [r7, #86]	; 0x56
 800371a:	897b      	ldrh	r3, [r7, #10]
 800371c:	3301      	adds	r3, #1
 800371e:	429a      	cmp	r2, r3
 8003720:	d11a      	bne.n	8003758 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x1f0>
                hertz[ix] -= 0.001;
 8003722:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8003726:	009b      	lsls	r3, r3, #2
 8003728:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800372a:	4413      	add	r3, r2
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc ff2a 	bl	8000588 <__aeabi_f2d>
 8003734:	a356      	add	r3, pc, #344	; (adr r3, 8003890 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x328>)
 8003736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800373a:	f7fc fdc5 	bl	80002c8 <__aeabi_dsub>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800374e:	18d4      	adds	r4, r2, r3
 8003750:	f7fd fa6a 	bl	8000c28 <__aeabi_d2f>
 8003754:	4603      	mov	r3, r0
 8003756:	6023      	str	r3, [r4, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003758:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800375c:	3301      	adds	r3, #1
 800375e:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
 8003762:	e784      	b.n	800366e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x106>
            }
        }
        ei_dsp_free(mels, mels_mem_size);
 8003764:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003766:	f017 fd21 	bl	801b1ac <free>

        // The frequency resolution required to put filters at the
        // exact points calculated above should be extracted.
        //  So we should round those frequencies to the closest FFT bin.
        int *freq_index = (int*)ei_dsp_malloc(freq_index_mem_size);
 800376a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800376c:	f017 fd16 	bl	801b19c <malloc>
 8003770:	4603      	mov	r3, r0
 8003772:	633b      	str	r3, [r7, #48]	; 0x30
        if (!freq_index) {
 8003774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10d      	bne.n	8003796 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x22e>
            ei_dsp_free(hertz, hertz_mem_size);
 800377a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800377c:	f017 fd16 	bl	801b1ac <free>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003780:	4a45      	ldr	r2, [pc, #276]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 8003782:	4946      	ldr	r1, [pc, #280]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 8003784:	4846      	ldr	r0, [pc, #280]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003786:	f018 f8ff 	bl	801b988 <iprintf>
 800378a:	4b46      	ldr	r3, [pc, #280]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 800378c:	4a46      	ldr	r2, [pc, #280]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 800378e:	217e      	movs	r1, #126	; 0x7e
 8003790:	4846      	ldr	r0, [pc, #280]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 8003792:	f017 fc15 	bl	801afc0 <__assert_func>
        }
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 8003796:	2300      	movs	r3, #0
 8003798:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 800379c:	897b      	ldrh	r3, [r7, #10]
 800379e:	1c5a      	adds	r2, r3, #1
 80037a0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037a4:	429a      	cmp	r2, r3
 80037a6:	db2b      	blt.n	8003800 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x298>
            freq_index[ix] = static_cast<int>(floor((coefficients + 1) * hertz[ix] / sampling_freq));
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	3301      	adds	r3, #1
 80037ac:	ee07 3a90 	vmov	s15, r3
 80037b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037b4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80037bc:	4413      	add	r3, r2
 80037be:	edd3 7a00 	vldr	s15, [r3]
 80037c2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	ee07 3a90 	vmov	s15, r3
 80037cc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80037d0:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80037d4:	eeb0 0a66 	vmov.f32	s0, s13
 80037d8:	f7fd fc54 	bl	8001084 <_ZSt5floorf>
 80037dc:	eef0 7a40 	vmov.f32	s15, s0
 80037e0:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037e4:	009b      	lsls	r3, r3, #2
 80037e6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80037e8:	4413      	add	r3, r2
 80037ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80037ee:	ee17 2a90 	vmov	r2, s15
 80037f2:	601a      	str	r2, [r3, #0]
        for (uint16_t ix = 0; ix < num_filter + 2; ix++) {
 80037f4:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80037f8:	3301      	adds	r3, #1
 80037fa:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
 80037fe:	e7cd      	b.n	800379c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x234>
        }
        ei_dsp_free(hertz, hertz_mem_size);
 8003800:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003802:	f017 fcd3 	bl	801b1ac <free>

        for (size_t i = 0; i < num_filter; i++) {
 8003806:	2300      	movs	r3, #0
 8003808:	653b      	str	r3, [r7, #80]	; 0x50
 800380a:	897b      	ldrh	r3, [r7, #10]
 800380c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800380e:	429a      	cmp	r2, r3
 8003810:	f080 80b4 	bcs.w	800397c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x414>
            int left = freq_index[i];
 8003814:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003816:	009b      	lsls	r3, r3, #2
 8003818:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800381a:	4413      	add	r3, r2
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	62fb      	str	r3, [r7, #44]	; 0x2c
            int middle = freq_index[i + 1];
 8003820:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003822:	3301      	adds	r3, #1
 8003824:	009b      	lsls	r3, r3, #2
 8003826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003828:	4413      	add	r3, r2
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	62bb      	str	r3, [r7, #40]	; 0x28
            int right = freq_index[i + 2];
 800382e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003830:	3302      	adds	r3, #2
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003836:	4413      	add	r3, r2
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	627b      	str	r3, [r7, #36]	; 0x24

            EI_DSP_MATRIX(z, 1, (right - left + 1));
 800383c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800383e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003840:	1ad3      	subs	r3, r2, r3
 8003842:	3301      	adds	r3, #1
 8003844:	461a      	mov	r2, r3
 8003846:	f107 0010 	add.w	r0, r7, #16
 800384a:	2300      	movs	r3, #0
 800384c:	2101      	movs	r1, #1
 800384e:	f7fd fc91 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003852:	693b      	ldr	r3, [r7, #16]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x306>
 8003858:	4a0f      	ldr	r2, [pc, #60]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 800385a:	4910      	ldr	r1, [pc, #64]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 800385c:	4810      	ldr	r0, [pc, #64]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 800385e:	f018 f893 	bl	801b988 <iprintf>
 8003862:	4b10      	ldr	r3, [pc, #64]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003864:	4a10      	ldr	r2, [pc, #64]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003866:	218a      	movs	r1, #138	; 0x8a
 8003868:	4810      	ldr	r0, [pc, #64]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 800386a:	f017 fba9 	bl	801afc0 <__assert_func>
            if (!z.buffer) {
 800386e:	693b      	ldr	r3, [r7, #16]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d121      	bne.n	80038b8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x350>
                ei_dsp_free(freq_index, freq_index_mem_size);
 8003874:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003876:	f017 fc99 	bl	801b1ac <free>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 800387a:	4a07      	ldr	r2, [pc, #28]	; (8003898 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x330>)
 800387c:	4907      	ldr	r1, [pc, #28]	; (800389c <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x334>)
 800387e:	4808      	ldr	r0, [pc, #32]	; (80038a0 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x338>)
 8003880:	f018 f882 	bl	801b988 <iprintf>
 8003884:	4b07      	ldr	r3, [pc, #28]	; (80038a4 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x33c>)
 8003886:	4a08      	ldr	r2, [pc, #32]	; (80038a8 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x340>)
 8003888:	218d      	movs	r1, #141	; 0x8d
 800388a:	4808      	ldr	r0, [pc, #32]	; (80038ac <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x344>)
 800388c:	f017 fb98 	bl	801afc0 <__assert_func>
 8003890:	d2f1a9fc 	.word	0xd2f1a9fc
 8003894:	3f50624d 	.word	0x3f50624d
 8003898:	0801c788 	.word	0x0801c788
 800389c:	fffffc16 	.word	0xfffffc16
 80038a0:	0801c79c 	.word	0x0801c79c
 80038a4:	0801c7ac 	.word	0x0801c7ac
 80038a8:	0801d420 	.word	0x0801d420
 80038ac:	0801d49c 	.word	0x0801d49c
 80038b0:	0801c850 	.word	0x0801c850
 80038b4:	fffffc14 	.word	0xfffffc14
            }
            numpy::linspace(left, right, (right - left + 1), z.buffer);
 80038b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ba:	ee07 3a90 	vmov	s15, r3
 80038be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80038c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038c4:	ee07 3a10 	vmov	s14, r3
 80038c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80038cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038d0:	1ad3      	subs	r3, r2, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	461a      	mov	r2, r3
 80038d6:	693b      	ldr	r3, [r7, #16]
 80038d8:	4619      	mov	r1, r3
 80038da:	4610      	mov	r0, r2
 80038dc:	eef0 0a47 	vmov.f32	s1, s14
 80038e0:	eeb0 0a67 	vmov.f32	s0, s15
 80038e4:	f7fe fc12 	bl	800210c <_ZN2ei5numpy8linspaceEffmPf>
            functions::triangle(z.buffer, (right - left + 1), left, middle, right);
 80038e8:	6938      	ldr	r0, [r7, #16]
 80038ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	3301      	adds	r3, #1
 80038f2:	4619      	mov	r1, r3
 80038f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038f6:	9300      	str	r3, [sp, #0]
 80038f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fc:	f7ff f88c 	bl	8002a18 <_ZN2ei8speechpy9functions8triangleEPfjiii>

            // so... z now contains some values that we need to overwrite in the filterbank
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003900:	2300      	movs	r3, #0
 8003902:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003904:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800390c:	429a      	cmp	r2, r3
 800390e:	dc2c      	bgt.n	800396a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x402>
                size_t index = (i * filterbanks->cols) + (left + zx);
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003916:	fb02 f303 	mul.w	r3, r2, r3
 800391a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800391c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800391e:	440a      	add	r2, r1
 8003920:	4413      	add	r3, r2
 8003922:	64bb      	str	r3, [r7, #72]	; 0x48

                if (output_transposed) {
 8003924:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003928:	2b00      	cmp	r3, #0
 800392a:	d00a      	beq.n	8003942 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x3da>
                    index = ((left + zx) * filterbanks->rows) + i;
 800392c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800392e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003930:	4413      	add	r3, r2
 8003932:	461a      	mov	r2, r3
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	685b      	ldr	r3, [r3, #4]
 8003938:	fb03 f302 	mul.w	r3, r3, r2
 800393c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800393e:	4413      	add	r3, r2
 8003940:	64bb      	str	r3, [r7, #72]	; 0x48
                }

#if EIDSP_QUANTIZE_FILTERBANK
                filterbanks->buffer[index] = numpy::quantize_zero_one(z.buffer[zx]);
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003946:	009b      	lsls	r3, r3, #2
 8003948:	4413      	add	r3, r2
 800394a:	edd3 7a00 	vldr	s15, [r3]
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003954:	18d4      	adds	r4, r2, r3
 8003956:	eeb0 0a67 	vmov.f32	s0, s15
 800395a:	f7fd ff09 	bl	8001770 <_ZN2ei5numpy17quantize_zero_oneEf>
 800395e:	4603      	mov	r3, r0
 8003960:	7023      	strb	r3, [r4, #0]
            for (int zx = 0; zx < (right - left + 1); zx++) {
 8003962:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003964:	3301      	adds	r3, #1
 8003966:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003968:	e7cc      	b.n	8003904 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x39c>
            EI_DSP_MATRIX(z, 1, (right - left + 1));
 800396a:	f107 0310 	add.w	r3, r7, #16
 800396e:	4618      	mov	r0, r3
 8003970:	f7fd fc2c 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        for (size_t i = 0; i < num_filter; i++) {
 8003974:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003976:	3301      	adds	r3, #1
 8003978:	653b      	str	r3, [r7, #80]	; 0x50
 800397a:	e746      	b.n	800380a <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x2a2>
                filterbanks->buffer[index] = z.buffer[zx];
#endif
            }
        }

        if (output_transposed) {
 800397c:	f897 3078 	ldrb.w	r3, [r7, #120]	; 0x78
 8003980:	2b00      	cmp	r3, #0
 8003982:	d009      	beq.n	8003998 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb+0x430>
            uint16_t r = filterbanks->rows;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	685b      	ldr	r3, [r3, #4]
 8003988:	847b      	strh	r3, [r7, #34]	; 0x22
            filterbanks->rows = filterbanks->cols;
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	689a      	ldr	r2, [r3, #8]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	605a      	str	r2, [r3, #4]
            filterbanks->cols = r;
 8003992:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	609a      	str	r2, [r3, #8]
        }

        ei_dsp_free(freq_index, freq_index_mem_size);
 8003998:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800399a:	f017 fc07 	bl	801b1ac <free>

        return EIDSP_OK;
 800399e:	2300      	movs	r3, #0
    }
 80039a0:	4618      	mov	r0, r3
 80039a2:	375c      	adds	r7, #92	; 0x5c
 80039a4:	46bd      	mov	sp, r7
 80039a6:	ecbd 8b02 	vpop	{d8}
 80039aa:	bd90      	pop	{r4, r7, pc}

080039ac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm>:
     *     In Hz, default is 0.
     * @param high_frequency (int): highest band edge of mel filters.
     *     In Hz, default is samplerate/2
     * @EIDSP_OK if OK
     */
    static int mfe(matrix_t *out_features, matrix_t *out_energies,
 80039ac:	b590      	push	{r4, r7, lr}
 80039ae:	b0a3      	sub	sp, #140	; 0x8c
 80039b0:	af04      	add	r7, sp, #16
 80039b2:	6178      	str	r0, [r7, #20]
 80039b4:	6139      	str	r1, [r7, #16]
 80039b6:	60fa      	str	r2, [r7, #12]
 80039b8:	60bb      	str	r3, [r7, #8]
 80039ba:	ed87 0a01 	vstr	s0, [r7, #4]
 80039be:	edc7 0a00 	vstr	s1, [r7]
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_filters = 40,
        uint16_t fft_length = 512, uint32_t low_frequency = 300, uint32_t high_frequency = 0
        )
    {
        int ret = 0;
 80039c2:	2300      	movs	r3, #0
 80039c4:	667b      	str	r3, [r7, #100]	; 0x64

        if (high_frequency == 0) {
 80039c6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d103      	bne.n	80039d6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2a>
            high_frequency = sampling_frequency / 2;
 80039ce:	68bb      	ldr	r3, [r7, #8]
 80039d0:	085b      	lsrs	r3, r3, #1
 80039d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
        }

        stack_frames_info_t stack_frame_info = { 0 };
 80039d6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039da:	2200      	movs	r2, #0
 80039dc:	601a      	str	r2, [r3, #0]
 80039de:	605a      	str	r2, [r3, #4]
 80039e0:	609a      	str	r2, [r3, #8]
        stack_frame_info.signal = signal;
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	64fb      	str	r3, [r7, #76]	; 0x4c

        ret = processing::stack_frames(
 80039e6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80039ea:	2200      	movs	r2, #0
 80039ec:	edd7 0a00 	vldr	s1, [r7]
 80039f0:	ed97 0a01 	vldr	s0, [r7, #4]
 80039f4:	68b9      	ldr	r1, [r7, #8]
 80039f6:	4618      	mov	r0, r3
 80039f8:	f7ff fa4a 	bl	8002e90 <_ZN2ei8speechpy10processingL12stack_framesEPNS0_20ei_stack_frames_infoEmffb>
 80039fc:	6678      	str	r0, [r7, #100]	; 0x64
            sampling_frequency,
            frame_length,
            frame_stride,
            false
        );
        if (ret != 0) {
 80039fe:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d00a      	beq.n	8003a1a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x6e>
            EIDSP_ERR(ret);
 8003a04:	4a9c      	ldr	r2, [pc, #624]	; (8003c78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2cc>)
 8003a06:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003a08:	489c      	ldr	r0, [pc, #624]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003a0a:	f017 ffbd 	bl	801b988 <iprintf>
 8003a0e:	4b9c      	ldr	r3, [pc, #624]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003a10:	4a9c      	ldr	r2, [pc, #624]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003a12:	21d9      	movs	r1, #217	; 0xd9
 8003a14:	489c      	ldr	r0, [pc, #624]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003a16:	f017 fad3 	bl	801afc0 <__assert_func>
        }

        if (stack_frame_info.frame_ixs->size() != out_features->rows) {
 8003a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a1c:	4618      	mov	r0, r3
 8003a1e:	f001 feca 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003a22:	4602      	mov	r2, r0
 8003a24:	697b      	ldr	r3, [r7, #20]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	bf14      	ite	ne
 8003a2c:	2301      	movne	r3, #1
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00a      	beq.n	8003a4c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xa0>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a36:	4a95      	ldr	r2, [pc, #596]	; (8003c8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e0>)
 8003a38:	4995      	ldr	r1, [pc, #596]	; (8003c90 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e4>)
 8003a3a:	4890      	ldr	r0, [pc, #576]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003a3c:	f017 ffa4 	bl	801b988 <iprintf>
 8003a40:	4b8f      	ldr	r3, [pc, #572]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003a42:	4a90      	ldr	r2, [pc, #576]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003a44:	21dd      	movs	r1, #221	; 0xdd
 8003a46:	4890      	ldr	r0, [pc, #576]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003a48:	f017 faba 	bl	801afc0 <__assert_func>
        }

        if (num_filters != out_features->cols) {
 8003a4c:	f8b7 2088 	ldrh.w	r2, [r7, #136]	; 0x88
 8003a50:	697b      	ldr	r3, [r7, #20]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d00a      	beq.n	8003a6e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xc2>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a58:	4a8c      	ldr	r2, [pc, #560]	; (8003c8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e0>)
 8003a5a:	498d      	ldr	r1, [pc, #564]	; (8003c90 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e4>)
 8003a5c:	4887      	ldr	r0, [pc, #540]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003a5e:	f017 ff93 	bl	801b988 <iprintf>
 8003a62:	4b87      	ldr	r3, [pc, #540]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003a64:	4a87      	ldr	r2, [pc, #540]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003a66:	21e1      	movs	r1, #225	; 0xe1
 8003a68:	4887      	ldr	r0, [pc, #540]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003a6a:	f017 faa9 	bl	801afc0 <__assert_func>
        }

        if (stack_frame_info.frame_ixs->size() != out_energies->rows || out_energies->cols != 1) {
 8003a6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a70:	4618      	mov	r0, r3
 8003a72:	f001 fea0 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003a76:	4602      	mov	r2, r0
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	429a      	cmp	r2, r3
 8003a7e:	d103      	bne.n	8003a88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xdc>
 8003a80:	693b      	ldr	r3, [r7, #16]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	2b01      	cmp	r3, #1
 8003a86:	d001      	beq.n	8003a8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xe0>
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e000      	b.n	8003a8e <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xe2>
 8003a8c:	2300      	movs	r3, #0
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00a      	beq.n	8003aa8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0xfc>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003a92:	4a7e      	ldr	r2, [pc, #504]	; (8003c8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e0>)
 8003a94:	497e      	ldr	r1, [pc, #504]	; (8003c90 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e4>)
 8003a96:	4879      	ldr	r0, [pc, #484]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003a98:	f017 ff76 	bl	801b988 <iprintf>
 8003a9c:	4b78      	ldr	r3, [pc, #480]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003a9e:	4a79      	ldr	r2, [pc, #484]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003aa0:	21e5      	movs	r1, #229	; 0xe5
 8003aa2:	4879      	ldr	r0, [pc, #484]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003aa4:	f017 fa8c 	bl	801afc0 <__assert_func>
        }

        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	677b      	str	r3, [r7, #116]	; 0x74
 8003aac:	697b      	ldr	r3, [r7, #20]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	697a      	ldr	r2, [r7, #20]
 8003ab2:	6892      	ldr	r2, [r2, #8]
 8003ab4:	fb02 f303 	mul.w	r3, r2, r3
 8003ab8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003aba:	429a      	cmp	r2, r3
 8003abc:	d20b      	bcs.n	8003ad6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x12a>
            *(out_features->buffer + i) = 0;
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	681a      	ldr	r2, [r3, #0]
 8003ac2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ac4:	009b      	lsls	r3, r3, #2
 8003ac6:	4413      	add	r3, r2
 8003ac8:	f04f 0200 	mov.w	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
        for (uint32_t i = 0; i < out_features->rows * out_features->cols; i++) {
 8003ace:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ad0:	3301      	adds	r3, #1
 8003ad2:	677b      	str	r3, [r7, #116]	; 0x74
 8003ad4:	e7ea      	b.n	8003aac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x100>
        }

        uint16_t coefficients = fft_length / 2 + 1;
 8003ad6:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003ada:	085b      	lsrs	r3, r3, #1
 8003adc:	b29b      	uxth	r3, r3
 8003ade:	3301      	adds	r3, #1
 8003ae0:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

        // calculate the filterbanks first... preferably I would want to do the matrix multiplications
        // whenever they happen, but OK...
#if EIDSP_QUANTIZE_FILTERBANK
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003ae4:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003ae8:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003aec:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003af0:	2300      	movs	r3, #0
 8003af2:	9300      	str	r3, [sp, #0]
 8003af4:	4b67      	ldr	r3, [pc, #412]	; (8003c94 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2e8>)
 8003af6:	f7fd fb7f 	bl	80011f8 <_ZN2ei19ei_quantized_matrixC1EmmPFfhEPh>
 8003afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d10a      	bne.n	8003b16 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x16a>
 8003b00:	4a65      	ldr	r2, [pc, #404]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003b02:	4966      	ldr	r1, [pc, #408]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003b04:	485d      	ldr	r0, [pc, #372]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003b06:	f017 ff3f 	bl	801b988 <iprintf>
 8003b0a:	4b5d      	ldr	r3, [pc, #372]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003b0c:	4a5d      	ldr	r2, [pc, #372]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003b0e:	21f1      	movs	r1, #241	; 0xf1
 8003b10:	485d      	ldr	r0, [pc, #372]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003b12:	f017 fa55 	bl	801afc0 <__assert_func>
#else
        EI_DSP_MATRIX(filterbanks, num_filters, coefficients);
#endif
        if (!filterbanks.buffer) {
 8003b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d10a      	bne.n	8003b32 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x186>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003b1c:	4a5e      	ldr	r2, [pc, #376]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003b1e:	495f      	ldr	r1, [pc, #380]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003b20:	4856      	ldr	r0, [pc, #344]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003b22:	f017 ff31 	bl	801b988 <iprintf>
 8003b26:	4b56      	ldr	r3, [pc, #344]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003b28:	4a56      	ldr	r2, [pc, #344]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003b2a:	21f6      	movs	r1, #246	; 0xf6
 8003b2c:	4856      	ldr	r0, [pc, #344]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003b2e:	f017 fa47 	bl	801afc0 <__assert_func>
        }

        ret = feature::filterbanks(
 8003b32:	f8b7 2062 	ldrh.w	r2, [r7, #98]	; 0x62
 8003b36:	f8b7 1088 	ldrh.w	r1, [r7, #136]	; 0x88
 8003b3a:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003b3e:	2301      	movs	r3, #1
 8003b40:	9302      	str	r3, [sp, #8]
 8003b42:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003b46:	9301      	str	r3, [sp, #4]
 8003b48:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003b4c:	9300      	str	r3, [sp, #0]
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	f7ff fd0a 	bl	8003568 <_ZN2ei8speechpy7feature11filterbanksEPNS_19ei_quantized_matrixEtimmmb>
 8003b54:	6678      	str	r0, [r7, #100]	; 0x64
            &filterbanks, num_filters, coefficients, sampling_frequency, low_frequency, high_frequency, true);
        if (ret != 0) {
 8003b56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d00a      	beq.n	8003b72 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x1c6>
            EIDSP_ERR(ret);
 8003b5c:	4a46      	ldr	r2, [pc, #280]	; (8003c78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2cc>)
 8003b5e:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003b60:	4846      	ldr	r0, [pc, #280]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003b62:	f017 ff11 	bl	801b988 <iprintf>
 8003b66:	4b46      	ldr	r3, [pc, #280]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003b68:	4a46      	ldr	r2, [pc, #280]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003b6a:	21fc      	movs	r1, #252	; 0xfc
 8003b6c:	4846      	ldr	r0, [pc, #280]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003b6e:	f017 fa27 	bl	801afc0 <__assert_func>
        }
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
 8003b72:	2300      	movs	r3, #0
 8003b74:	673b      	str	r3, [r7, #112]	; 0x70
 8003b76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b78:	4618      	mov	r0, r3
 8003b7a:	f001 fe1c 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 8003b7e:	4602      	mov	r2, r0
 8003b80:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003b82:	4293      	cmp	r3, r2
 8003b84:	bf34      	ite	cc
 8003b86:	2301      	movcc	r3, #1
 8003b88:	2300      	movcs	r3, #0
 8003b8a:	b2db      	uxtb	r3, r3
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	f000 80e1 	beq.w	8003d54 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3a8>
            size_t power_spectrum_frame_size = (fft_length / 2 + 1);
 8003b92:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003b96:	085b      	lsrs	r3, r3, #1
 8003b98:	b29b      	uxth	r3, r3
 8003b9a:	3301      	adds	r3, #1
 8003b9c:	65fb      	str	r3, [r7, #92]	; 0x5c

            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8003b9e:	f107 0028 	add.w	r0, r7, #40	; 0x28
 8003ba2:	2300      	movs	r3, #0
 8003ba4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ba6:	2101      	movs	r1, #1
 8003ba8:	f7fd fae4 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003bac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d10b      	bne.n	8003bca <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x21e>
 8003bb2:	4a39      	ldr	r2, [pc, #228]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003bb4:	4939      	ldr	r1, [pc, #228]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003bb6:	4831      	ldr	r0, [pc, #196]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003bb8:	f017 fee6 	bl	801b988 <iprintf>
 8003bbc:	4b30      	ldr	r3, [pc, #192]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003bbe:	4a31      	ldr	r2, [pc, #196]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003bc0:	f240 1101 	movw	r1, #257	; 0x101
 8003bc4:	4830      	ldr	r0, [pc, #192]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003bc6:	f017 f9fb 	bl	801afc0 <__assert_func>
            if (!power_spectrum_frame.buffer) {
 8003bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10b      	bne.n	8003be8 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x23c>
                EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003bd0:	4a31      	ldr	r2, [pc, #196]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003bd2:	4932      	ldr	r1, [pc, #200]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003bd4:	4829      	ldr	r0, [pc, #164]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003bd6:	f017 fed7 	bl	801b988 <iprintf>
 8003bda:	4b29      	ldr	r3, [pc, #164]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003bdc:	4a29      	ldr	r2, [pc, #164]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003bde:	f240 1103 	movw	r1, #259	; 0x103
 8003be2:	4829      	ldr	r0, [pc, #164]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003be4:	f017 f9ec 	bl	801afc0 <__assert_func>
            }

            // get signal data from the audio file
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 8003be8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bea:	461a      	mov	r2, r3
 8003bec:	f107 0018 	add.w	r0, r7, #24
 8003bf0:	2300      	movs	r3, #0
 8003bf2:	2101      	movs	r1, #1
 8003bf4:	f7fd fabe 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003bf8:	69bb      	ldr	r3, [r7, #24]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d10b      	bne.n	8003c16 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x26a>
 8003bfe:	4a26      	ldr	r2, [pc, #152]	; (8003c98 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2ec>)
 8003c00:	4926      	ldr	r1, [pc, #152]	; (8003c9c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f0>)
 8003c02:	481e      	ldr	r0, [pc, #120]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003c04:	f017 fec0 	bl	801b988 <iprintf>
 8003c08:	4b1d      	ldr	r3, [pc, #116]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003c0a:	4a1e      	ldr	r2, [pc, #120]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003c0c:	f240 1107 	movw	r1, #263	; 0x107
 8003c10:	481d      	ldr	r0, [pc, #116]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003c12:	f017 f9d5 	bl	801afc0 <__assert_func>

            // don't read outside of the audio buffer... we'll automatically zero pad then
            size_t signal_offset = stack_frame_info.frame_ixs->at(ix);
 8003c16:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003c18:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f001 fddb 	bl	80057d6 <_ZNSt6vectorImSaImEE2atEj>
 8003c20:	4603      	mov	r3, r0
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	65bb      	str	r3, [r7, #88]	; 0x58
            size_t signal_length = stack_frame_info.frame_length;
 8003c26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003c28:	66fb      	str	r3, [r7, #108]	; 0x6c
            if (signal_offset + signal_length > stack_frame_info.signal->total_length) {
 8003c2a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c2e:	441a      	add	r2, r3
 8003c30:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d908      	bls.n	8003c4a <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x29e>
                signal_length = signal_length -
                    (stack_frame_info.signal->total_length - (signal_offset + signal_length));
 8003c38:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003c3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c3c:	441a      	add	r2, r3
 8003c3e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c40:	691b      	ldr	r3, [r3, #16]
                signal_length = signal_length -
 8003c42:	1ad3      	subs	r3, r2, r3
 8003c44:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c46:	4413      	add	r3, r2
 8003c48:	66fb      	str	r3, [r7, #108]	; 0x6c
            }

            ret = stack_frame_info.signal->get_data(
 8003c4a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003c4c:	4618      	mov	r0, r3
 8003c4e:	69bb      	ldr	r3, [r7, #24]
 8003c50:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8003c52:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003c54:	f001 fd10 	bl	8005678 <_ZNKSt8functionIFijjPfEEclEjjS0_>
 8003c58:	6678      	str	r0, [r7, #100]	; 0x64
                signal_offset,
                signal_length,
                signal_frame.buffer
            );
            if (ret != 0) {
 8003c5a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d01f      	beq.n	8003ca0 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2f4>
                EIDSP_ERR(ret);
 8003c60:	4a05      	ldr	r2, [pc, #20]	; (8003c78 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2cc>)
 8003c62:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003c64:	4805      	ldr	r0, [pc, #20]	; (8003c7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d0>)
 8003c66:	f017 fe8f 	bl	801b988 <iprintf>
 8003c6a:	4b05      	ldr	r3, [pc, #20]	; (8003c80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d4>)
 8003c6c:	4a05      	ldr	r2, [pc, #20]	; (8003c84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2d8>)
 8003c6e:	f240 1117 	movw	r1, #279	; 0x117
 8003c72:	4805      	ldr	r0, [pc, #20]	; (8003c88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x2dc>)
 8003c74:	f017 f9a4 	bl	801afc0 <__assert_func>
 8003c78:	0801c900 	.word	0x0801c900
 8003c7c:	0801c79c 	.word	0x0801c79c
 8003c80:	0801c7ac 	.word	0x0801c7ac
 8003c84:	0801d514 	.word	0x0801d514
 8003c88:	0801d49c 	.word	0x0801d49c
 8003c8c:	0801c850 	.word	0x0801c850
 8003c90:	fffffc14 	.word	0xfffffc14
 8003c94:	080018c5 	.word	0x080018c5
 8003c98:	0801c788 	.word	0x0801c788
 8003c9c:	fffffc16 	.word	0xfffffc16
            }

            ret = processing::power_spectrum(
 8003ca0:	69b8      	ldr	r0, [r7, #24]
                signal_frame.buffer,
                stack_frame_info.frame_length,
 8003ca2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
            ret = processing::power_spectrum(
 8003ca4:	4619      	mov	r1, r3
 8003ca6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003ca8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003cb0:	f7ff fa5c 	bl	800316c <_ZN2ei8speechpy10processingL14power_spectrumEPfjS2_jt>
 8003cb4:	6678      	str	r0, [r7, #100]	; 0x64
                power_spectrum_frame.buffer,
                power_spectrum_frame_size,
                fft_length
            );

            if (ret != 0) {
 8003cb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d00b      	beq.n	8003cd4 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x328>
                EIDSP_ERR(ret);
 8003cbc:	4a2f      	ldr	r2, [pc, #188]	; (8003d7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d0>)
 8003cbe:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003cc0:	482f      	ldr	r0, [pc, #188]	; (8003d80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d4>)
 8003cc2:	f017 fe61 	bl	801b988 <iprintf>
 8003cc6:	4b2f      	ldr	r3, [pc, #188]	; (8003d84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d8>)
 8003cc8:	4a2f      	ldr	r2, [pc, #188]	; (8003d88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3dc>)
 8003cca:	f240 1123 	movw	r1, #291	; 0x123
 8003cce:	482f      	ldr	r0, [pc, #188]	; (8003d8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3e0>)
 8003cd0:	f017 f976 	bl	801afc0 <__assert_func>
            }

            float energy = numpy::sum(power_spectrum_frame.buffer, power_spectrum_frame_size);
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8003cd8:	4618      	mov	r0, r3
 8003cda:	f7fd fb33 	bl	8001344 <_ZN2ei5numpy3sumEPfj>
 8003cde:	ed87 0a1a 	vstr	s0, [r7, #104]	; 0x68
            if (energy == 0) {
 8003ce2:	edd7 7a1a 	vldr	s15, [r7, #104]	; 0x68
 8003ce6:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003cea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003cee:	d102      	bne.n	8003cf6 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x34a>
                energy = FLT_EPSILON;
 8003cf0:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8003cf4:	66bb      	str	r3, [r7, #104]	; 0x68
            }

            out_energies->buffer[ix] = energy;
 8003cf6:	693b      	ldr	r3, [r7, #16]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003cfc:	009b      	lsls	r3, r3, #2
 8003cfe:	4413      	add	r3, r2
 8003d00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003d02:	601a      	str	r2, [r3, #0]

            // calculate the out_features directly here
            ret = numpy::dot_by_row(
 8003d04:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8003d06:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d08:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d14:	f7fd fb3e 	bl	8001394 <_ZN2ei5numpy10dot_by_rowEiPfjPNS_19ei_quantized_matrixEPNS_9ei_matrixE>
 8003d18:	6678      	str	r0, [r7, #100]	; 0x64
                power_spectrum_frame_size,
                &filterbanks,
                out_features
            );

            if (ret != 0) {
 8003d1a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00b      	beq.n	8003d38 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x38c>
                EIDSP_ERR(ret);
 8003d20:	4a16      	ldr	r2, [pc, #88]	; (8003d7c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d0>)
 8003d22:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8003d24:	4816      	ldr	r0, [pc, #88]	; (8003d80 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d4>)
 8003d26:	f017 fe2f 	bl	801b988 <iprintf>
 8003d2a:	4b16      	ldr	r3, [pc, #88]	; (8003d84 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3d8>)
 8003d2c:	4a16      	ldr	r2, [pc, #88]	; (8003d88 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3dc>)
 8003d2e:	f240 1137 	movw	r1, #311	; 0x137
 8003d32:	4816      	ldr	r0, [pc, #88]	; (8003d8c <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x3e0>)
 8003d34:	f017 f944 	bl	801afc0 <__assert_func>
            EI_DSP_MATRIX(signal_frame, 1, stack_frame_info.frame_length);
 8003d38:	f107 0318 	add.w	r3, r7, #24
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7fd fa45 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
            EI_DSP_MATRIX(power_spectrum_frame, 1, power_spectrum_frame_size);
 8003d42:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd fa40 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        for (size_t ix = 0; ix < stack_frame_info.frame_ixs->size(); ix++) {
 8003d4c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003d4e:	3301      	adds	r3, #1
 8003d50:	673b      	str	r3, [r7, #112]	; 0x70
 8003d52:	e710      	b.n	8003b76 <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm+0x1ca>
            }
        }

        functions::zero_handling(out_features);
 8003d54:	6978      	ldr	r0, [r7, #20]
 8003d56:	f7fe fe4c 	bl	80029f2 <_ZN2ei8speechpy9functions13zero_handlingEPNS_9ei_matrixE>

        return EIDSP_OK;
 8003d5a:	2400      	movs	r4, #0
        EI_DSP_QUANTIZED_MATRIX(filterbanks, num_filters, coefficients, &numpy::dequantize_zero_one);
 8003d5c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8003d60:	4618      	mov	r0, r3
 8003d62:	f7fd fa77 	bl	8001254 <_ZN2ei19ei_quantized_matrixD1Ev>
        stack_frames_info_t stack_frame_info = { 0 };
 8003d66:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f7fe ff0e 	bl	8002b8c <_ZN2ei8speechpy20ei_stack_frames_infoD1Ev>
        return EIDSP_OK;
 8003d70:	4623      	mov	r3, r4
    }
 8003d72:	4618      	mov	r0, r3
 8003d74:	377c      	adds	r7, #124	; 0x7c
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bd90      	pop	{r4, r7, pc}
 8003d7a:	bf00      	nop
 8003d7c:	0801c900 	.word	0x0801c900
 8003d80:	0801c79c 	.word	0x0801c79c
 8003d84:	0801c7ac 	.word	0x0801c7ac
 8003d88:	0801d514 	.word	0x0801d514
 8003d8c:	0801d49c 	.word	0x0801d49c

08003d90 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfft>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_filters
     */
    static matrix_size_t calculate_mfe_buffer_size(
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b088      	sub	sp, #32
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6178      	str	r0, [r7, #20]
 8003d98:	6139      	str	r1, [r7, #16]
 8003d9a:	60fa      	str	r2, [r7, #12]
 8003d9c:	ed87 0a02 	vstr	s0, [r7, #8]
 8003da0:	edc7 0a01 	vstr	s1, [r7, #4]
 8003da4:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_filters = 40)
    {
        uint16_t rows = processing::calculate_no_of_stack_frames(
 8003da6:	2200      	movs	r2, #0
 8003da8:	edd7 0a01 	vldr	s1, [r7, #4]
 8003dac:	ed97 0a02 	vldr	s0, [r7, #8]
 8003db0:	68f9      	ldr	r1, [r7, #12]
 8003db2:	6938      	ldr	r0, [r7, #16]
 8003db4:	f7ff f974 	bl	80030a0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>
 8003db8:	4603      	mov	r3, r0
            signal_length,
            sampling_frequency,
            frame_length,
            frame_stride,
            false);
 8003dba:	83fb      	strh	r3, [r7, #30]
        uint16_t cols = num_filters;
 8003dbc:	887b      	ldrh	r3, [r7, #2]
 8003dbe:	83bb      	strh	r3, [r7, #28]

        matrix_size_t size_matrix;
        size_matrix.rows = rows;
 8003dc0:	8bfa      	ldrh	r2, [r7, #30]
 8003dc2:	697b      	ldr	r3, [r7, #20]
 8003dc4:	601a      	str	r2, [r3, #0]
        size_matrix.cols = cols;
 8003dc6:	8bba      	ldrh	r2, [r7, #28]
 8003dc8:	697b      	ldr	r3, [r7, #20]
 8003dca:	605a      	str	r2, [r3, #4]
        return size_matrix;
 8003dcc:	bf00      	nop
    }
 8003dce:	6978      	ldr	r0, [r7, #20]
 8003dd0:	3720      	adds	r7, #32
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}
	...

08003dd8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>:
     *     In Hz, default is samplerate/2
     * @param dc_elimination Whether the first dc component should
     *     be eliminated or not.
     * @returns 0 if OK
     */
    static int mfcc(matrix_t *out_features, signal_t *signal,
 8003dd8:	b590      	push	{r4, r7, lr}
 8003dda:	b0a3      	sub	sp, #140	; 0x8c
 8003ddc:	af04      	add	r7, sp, #16
 8003dde:	6178      	str	r0, [r7, #20]
 8003de0:	6139      	str	r1, [r7, #16]
 8003de2:	60fa      	str	r2, [r7, #12]
 8003de4:	ed87 0a02 	vstr	s0, [r7, #8]
 8003de8:	edc7 0a01 	vstr	s1, [r7, #4]
 8003dec:	70fb      	strb	r3, [r7, #3]
        uint32_t sampling_frequency, float frame_length = 0.02f, float frame_stride = 0.01f,
        uint8_t num_cepstral = 13, uint16_t num_filters = 40, uint16_t fft_length = 512,
        uint32_t low_frequency = 0, uint32_t high_frequency = 0, bool dc_elimination = true)
    {
        if (out_features->cols != num_cepstral) {
 8003dee:	697b      	ldr	r3, [r7, #20]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	78fb      	ldrb	r3, [r7, #3]
 8003df4:	429a      	cmp	r2, r3
 8003df6:	d00b      	beq.n	8003e10 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x38>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003df8:	4ab5      	ldr	r2, [pc, #724]	; (80040d0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f8>)
 8003dfa:	49b6      	ldr	r1, [pc, #728]	; (80040d4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2fc>)
 8003dfc:	48b6      	ldr	r0, [pc, #728]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003dfe:	f017 fdc3 	bl	801b988 <iprintf>
 8003e02:	4bb6      	ldr	r3, [pc, #728]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003e04:	4ab6      	ldr	r2, [pc, #728]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003e06:	f44f 71bc 	mov.w	r1, #376	; 0x178
 8003e0a:	48b6      	ldr	r0, [pc, #728]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003e0c:	f017 f8d8 	bl	801afc0 <__assert_func>
            calculate_mfe_buffer_size(
                signal->total_length,
                sampling_frequency,
                frame_length,
                frame_stride,
                num_filters);
 8003e10:	693b      	ldr	r3, [r7, #16]
 8003e12:	6919      	ldr	r1, [r3, #16]
 8003e14:	f107 0044 	add.w	r0, r7, #68	; 0x44
 8003e18:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003e1c:	edd7 0a01 	vldr	s1, [r7, #4]
 8003e20:	ed97 0a02 	vldr	s0, [r7, #8]
 8003e24:	68fa      	ldr	r2, [r7, #12]
 8003e26:	f7ff ffb3 	bl	8003d90 <_ZN2ei8speechpy7feature25calculate_mfe_buffer_sizeEjmfft>

        if (out_features->rows != mfe_matrix_size.rows) {
 8003e2a:	697b      	ldr	r3, [r7, #20]
 8003e2c:	685a      	ldr	r2, [r3, #4]
 8003e2e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d00b      	beq.n	8003e4c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x74>
            EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8003e34:	4aa6      	ldr	r2, [pc, #664]	; (80040d0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f8>)
 8003e36:	49a7      	ldr	r1, [pc, #668]	; (80040d4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2fc>)
 8003e38:	48a7      	ldr	r0, [pc, #668]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003e3a:	f017 fda5 	bl	801b988 <iprintf>
 8003e3e:	4ba7      	ldr	r3, [pc, #668]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003e40:	4aa7      	ldr	r2, [pc, #668]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003e42:	f44f 71c2 	mov.w	r1, #388	; 0x184
 8003e46:	48a7      	ldr	r0, [pc, #668]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003e48:	f017 f8ba 	bl	801afc0 <__assert_func>
        }

        int ret = EIDSP_OK;
 8003e4c:	2300      	movs	r3, #0
 8003e4e:	66bb      	str	r3, [r7, #104]	; 0x68

        // allocate some memory for the MFE result
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 8003e50:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e52:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e54:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003e58:	2300      	movs	r3, #0
 8003e5a:	f7fd f98b 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10b      	bne.n	8003e7c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xa4>
 8003e64:	4aa0      	ldr	r2, [pc, #640]	; (80040e8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8003e66:	49a1      	ldr	r1, [pc, #644]	; (80040ec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8003e68:	489b      	ldr	r0, [pc, #620]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003e6a:	f017 fd8d 	bl	801b988 <iprintf>
 8003e6e:	4b9b      	ldr	r3, [pc, #620]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003e70:	4a9b      	ldr	r2, [pc, #620]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003e72:	f44f 71c5 	mov.w	r1, #394	; 0x18a
 8003e76:	489b      	ldr	r0, [pc, #620]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003e78:	f017 f8a2 	bl	801afc0 <__assert_func>
        if (!features_matrix.buffer) {
 8003e7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d10b      	bne.n	8003e9a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xc2>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003e82:	4a99      	ldr	r2, [pc, #612]	; (80040e8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8003e84:	4999      	ldr	r1, [pc, #612]	; (80040ec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8003e86:	4894      	ldr	r0, [pc, #592]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003e88:	f017 fd7e 	bl	801b988 <iprintf>
 8003e8c:	4b93      	ldr	r3, [pc, #588]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003e8e:	4a94      	ldr	r2, [pc, #592]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003e90:	f44f 71c6 	mov.w	r1, #396	; 0x18c
 8003e94:	4893      	ldr	r0, [pc, #588]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003e96:	f017 f893 	bl	801afc0 <__assert_func>
        }

        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 8003e9a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003e9c:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	2201      	movs	r2, #1
 8003ea4:	f7fd f966 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d10b      	bne.n	8003ec6 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0xee>
 8003eae:	4a8e      	ldr	r2, [pc, #568]	; (80040e8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8003eb0:	498e      	ldr	r1, [pc, #568]	; (80040ec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8003eb2:	4889      	ldr	r0, [pc, #548]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003eb4:	f017 fd68 	bl	801b988 <iprintf>
 8003eb8:	4b88      	ldr	r3, [pc, #544]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003eba:	4a89      	ldr	r2, [pc, #548]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003ebc:	f240 118f 	movw	r1, #399	; 0x18f
 8003ec0:	4888      	ldr	r0, [pc, #544]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003ec2:	f017 f87d 	bl	801afc0 <__assert_func>
        if (!energy_matrix.buffer) {
 8003ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10b      	bne.n	8003ee4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x10c>
            EIDSP_ERR(EIDSP_OUT_OF_MEM);
 8003ecc:	4a86      	ldr	r2, [pc, #536]	; (80040e8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x310>)
 8003ece:	4987      	ldr	r1, [pc, #540]	; (80040ec <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x314>)
 8003ed0:	4881      	ldr	r0, [pc, #516]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003ed2:	f017 fd59 	bl	801b988 <iprintf>
 8003ed6:	4b81      	ldr	r3, [pc, #516]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003ed8:	4a81      	ldr	r2, [pc, #516]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003eda:	f240 1191 	movw	r1, #401	; 0x191
 8003ede:	4881      	ldr	r0, [pc, #516]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003ee0:	f017 f86e 	bl	801afc0 <__assert_func>
        }

        ret = mfe(&features_matrix, &energy_matrix, signal,
 8003ee4:	f107 0124 	add.w	r1, r7, #36	; 0x24
 8003ee8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 8003eec:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003ef0:	9303      	str	r3, [sp, #12]
 8003ef2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003ef6:	9302      	str	r3, [sp, #8]
 8003ef8:	f8b7 308c 	ldrh.w	r3, [r7, #140]	; 0x8c
 8003efc:	9301      	str	r3, [sp, #4]
 8003efe:	f8b7 3088 	ldrh.w	r3, [r7, #136]	; 0x88
 8003f02:	9300      	str	r3, [sp, #0]
 8003f04:	edd7 0a01 	vldr	s1, [r7, #4]
 8003f08:	ed97 0a02 	vldr	s0, [r7, #8]
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	693a      	ldr	r2, [r7, #16]
 8003f10:	f7ff fd4c 	bl	80039ac <_ZN2ei8speechpy7feature3mfeEPNS_9ei_matrixES3_PNS_11ei_signal_tEmffttmm>
 8003f14:	66b8      	str	r0, [r7, #104]	; 0x68
            sampling_frequency, frame_length, frame_stride, num_filters, fft_length,
            low_frequency, high_frequency);
        if (ret != EIDSP_OK) {
 8003f16:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00b      	beq.n	8003f34 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x15c>
            EIDSP_ERR(ret);
 8003f1c:	4a74      	ldr	r2, [pc, #464]	; (80040f0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 8003f1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f20:	486d      	ldr	r0, [pc, #436]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003f22:	f017 fd31 	bl	801b988 <iprintf>
 8003f26:	4b6d      	ldr	r3, [pc, #436]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003f28:	4a6d      	ldr	r2, [pc, #436]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003f2a:	f44f 71cc 	mov.w	r1, #408	; 0x198
 8003f2e:	486d      	ldr	r0, [pc, #436]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003f30:	f017 f846 	bl	801afc0 <__assert_func>
        }

        // ok... now we need to calculate the MFCC from this...
        // first do log() over all features...
        ret = numpy::log(&features_matrix);
 8003f34:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7fe f963 	bl	8002204 <_ZN2ei5numpy3logEPNS_9ei_matrixE>
 8003f3e:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8003f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00b      	beq.n	8003f5e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x186>
            EIDSP_ERR(ret);
 8003f46:	4a6a      	ldr	r2, [pc, #424]	; (80040f0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 8003f48:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f4a:	4863      	ldr	r0, [pc, #396]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003f4c:	f017 fd1c 	bl	801b988 <iprintf>
 8003f50:	4b62      	ldr	r3, [pc, #392]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003f52:	4a63      	ldr	r2, [pc, #396]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003f54:	f240 119f 	movw	r1, #415	; 0x19f
 8003f58:	4862      	ldr	r0, [pc, #392]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003f5a:	f017 f831 	bl	801afc0 <__assert_func>
        }

        // now do DST type 2
        ret = numpy::dct2(&features_matrix, DCT_NORMALIZATION_ORTHO);
 8003f5e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003f62:	2101      	movs	r1, #1
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fd fbd7 	bl	8001718 <_ZN2ei5numpy4dct2EPNS_9ei_matrixENS_22DCT_NORMALIZATION_MODEE>
 8003f6a:	66b8      	str	r0, [r7, #104]	; 0x68
        if (ret != EIDSP_OK) {
 8003f6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d00b      	beq.n	8003f8a <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x1b2>
            EIDSP_ERR(ret);
 8003f72:	4a5f      	ldr	r2, [pc, #380]	; (80040f0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x318>)
 8003f74:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003f76:	4858      	ldr	r0, [pc, #352]	; (80040d8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x300>)
 8003f78:	f017 fd06 	bl	801b988 <iprintf>
 8003f7c:	4b57      	ldr	r3, [pc, #348]	; (80040dc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x304>)
 8003f7e:	4a58      	ldr	r2, [pc, #352]	; (80040e0 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x308>)
 8003f80:	f240 11a5 	movw	r1, #421	; 0x1a5
 8003f84:	4857      	ldr	r0, [pc, #348]	; (80040e4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x30c>)
 8003f86:	f017 f81b 	bl	801afc0 <__assert_func>
        }

        // replace first cepstral coefficient with log of frame energy for DC elimination
        if (dc_elimination) {
 8003f8a:	f897 3098 	ldrb.w	r3, [r7, #152]	; 0x98
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d075      	beq.n	800407e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2a6>
            for (size_t row = 0; row < features_matrix.rows; row++) {
 8003f92:	2300      	movs	r3, #0
 8003f94:	677b      	str	r3, [r7, #116]	; 0x74
 8003f96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f98:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f9a:	429a      	cmp	r2, r3
 8003f9c:	d26f      	bcs.n	800407e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2a6>
                features_matrix.buffer[row * features_matrix.cols] = numpy::log(energy_matrix.buffer[row]);
 8003f9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003fa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003fa2:	009b      	lsls	r3, r3, #2
 8003fa4:	4413      	add	r3, r2
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8003faa:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003fac:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8003fae:	fb00 f202 	mul.w	r2, r0, r2
 8003fb2:	0092      	lsls	r2, r2, #2
 8003fb4:	188c      	adds	r4, r1, r2
 8003fb6:	623b      	str	r3, [r7, #32]
        g = (int32_t) * ((int32_t *)&a);
 8003fb8:	f107 0320 	add.w	r3, r7, #32
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	61fb      	str	r3, [r7, #28]
        e = (g - 0x3f2aaaab) & 0xff800000;
 8003fc0:	69fa      	ldr	r2, [r7, #28]
 8003fc2:	4b4c      	ldr	r3, [pc, #304]	; (80040f4 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x31c>)
 8003fc4:	4413      	add	r3, r2
 8003fc6:	0ddb      	lsrs	r3, r3, #23
 8003fc8:	05db      	lsls	r3, r3, #23
 8003fca:	667b      	str	r3, [r7, #100]	; 0x64
        g = g - e;
 8003fcc:	69fa      	ldr	r2, [r7, #28]
 8003fce:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	61fb      	str	r3, [r7, #28]
        m = (float) * ((float *)&g);
 8003fd4:	f107 031c 	add.w	r3, r7, #28
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	663b      	str	r3, [r7, #96]	; 0x60
        i = (float)e * 1.19209290e-7f; // 0x1.0p-23
 8003fdc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003fde:	ee07 3a90 	vmov	s15, r3
 8003fe2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003fe6:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80040f8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x320>
 8003fea:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003fee:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        f = m - 1.0f;
 8003ff2:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8003ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003ffa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ffe:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
        s = f * f;
 8004002:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 8004006:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800400a:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
        r = fmaf(0.230836749f, f, -0.279208571f); // 0x1.d8c0f0p-3, -0x1.1de8dap-2
 800400e:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 80040fc <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x324>
 8004012:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 8004016:	ed9f 0a3a 	vldr	s0, [pc, #232]	; 8004100 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x328>
 800401a:	f014 fa51 	bl	80184c0 <fmaf>
 800401e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        t = fmaf(0.331826031f, f, -0.498910338f); // 0x1.53ca34p-2, -0x1.fee25ap-2
 8004022:	ed9f 1a38 	vldr	s2, [pc, #224]	; 8004104 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x32c>
 8004026:	edd7 0a16 	vldr	s1, [r7, #88]	; 0x58
 800402a:	ed9f 0a37 	vldr	s0, [pc, #220]	; 8004108 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x330>
 800402e:	f014 fa47 	bl	80184c0 <fmaf>
 8004032:	ed87 0a13 	vstr	s0, [r7, #76]	; 0x4c
        r = fmaf(r, s, t);
 8004036:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 800403a:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 800403e:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004042:	f014 fa3d 	bl	80184c0 <fmaf>
 8004046:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(r, s, f);
 800404a:	ed97 1a16 	vldr	s2, [r7, #88]	; 0x58
 800404e:	edd7 0a15 	vldr	s1, [r7, #84]	; 0x54
 8004052:	ed97 0a14 	vldr	s0, [r7, #80]	; 0x50
 8004056:	f014 fa33 	bl	80184c0 <fmaf>
 800405a:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        r = fmaf(i, 0.693147182f, r); // 0x1.62e430p-1 // log(2)
 800405e:	ed97 1a14 	vldr	s2, [r7, #80]	; 0x50
 8004062:	eddf 0a2a 	vldr	s1, [pc, #168]	; 800410c <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x334>
 8004066:	ed97 0a17 	vldr	s0, [r7, #92]	; 0x5c
 800406a:	f014 fa29 	bl	80184c0 <fmaf>
 800406e:	ed87 0a14 	vstr	s0, [r7, #80]	; 0x50
        return r;
 8004072:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004074:	6023      	str	r3, [r4, #0]
            for (size_t row = 0; row < features_matrix.rows; row++) {
 8004076:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004078:	3301      	adds	r3, #1
 800407a:	677b      	str	r3, [r7, #116]	; 0x74
 800407c:	e78b      	b.n	8003f96 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x1be>
            }
        }

        // copy to the output...
        for (size_t row = 0; row < features_matrix.rows; row++) {
 800407e:	2300      	movs	r3, #0
 8004080:	673b      	str	r3, [r7, #112]	; 0x70
 8004082:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004084:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004086:	429a      	cmp	r2, r3
 8004088:	d242      	bcs.n	8004110 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x338>
            for(int i = 0; i < num_cepstral; i++) {
 800408a:	2300      	movs	r3, #0
 800408c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800408e:	78fb      	ldrb	r3, [r7, #3]
 8004090:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004092:	429a      	cmp	r2, r3
 8004094:	da18      	bge.n	80040c8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2f0>
                *(out_features->buffer + (num_cepstral * row) + i) = *(features_matrix.buffer + (features_matrix.cols * row) + i);
 8004096:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004098:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800409a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 800409c:	fb01 f103 	mul.w	r1, r1, r3
 80040a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040a2:	440b      	add	r3, r1
 80040a4:	009b      	lsls	r3, r3, #2
 80040a6:	441a      	add	r2, r3
 80040a8:	697b      	ldr	r3, [r7, #20]
 80040aa:	6819      	ldr	r1, [r3, #0]
 80040ac:	78fb      	ldrb	r3, [r7, #3]
 80040ae:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80040b0:	fb00 f003 	mul.w	r0, r0, r3
 80040b4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040b6:	4403      	add	r3, r0
 80040b8:	009b      	lsls	r3, r3, #2
 80040ba:	440b      	add	r3, r1
 80040bc:	6812      	ldr	r2, [r2, #0]
 80040be:	601a      	str	r2, [r3, #0]
            for(int i = 0; i < num_cepstral; i++) {
 80040c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c2:	3301      	adds	r3, #1
 80040c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c6:	e7e2      	b.n	800408e <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2b6>
        for (size_t row = 0; row < features_matrix.rows; row++) {
 80040c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80040ca:	3301      	adds	r3, #1
 80040cc:	673b      	str	r3, [r7, #112]	; 0x70
 80040ce:	e7d8      	b.n	8004082 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb+0x2aa>
 80040d0:	0801c850 	.word	0x0801c850
 80040d4:	fffffc14 	.word	0xfffffc14
 80040d8:	0801c79c 	.word	0x0801c79c
 80040dc:	0801c7ac 	.word	0x0801c7ac
 80040e0:	0801d5a8 	.word	0x0801d5a8
 80040e4:	0801d49c 	.word	0x0801d49c
 80040e8:	0801c788 	.word	0x0801c788
 80040ec:	fffffc16 	.word	0xfffffc16
 80040f0:	0801c900 	.word	0x0801c900
 80040f4:	c0d55555 	.word	0xc0d55555
 80040f8:	34000000 	.word	0x34000000
 80040fc:	be8ef46d 	.word	0xbe8ef46d
 8004100:	3e6c6078 	.word	0x3e6c6078
 8004104:	beff712d 	.word	0xbeff712d
 8004108:	3ea9e51a 	.word	0x3ea9e51a
 800410c:	3f317218 	.word	0x3f317218
            }
        }

        return EIDSP_OK;
 8004110:	2400      	movs	r4, #0
        EI_DSP_MATRIX(energy_matrix, mfe_matrix_size.rows, 1);
 8004112:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8004116:	4618      	mov	r0, r3
 8004118:	f7fd f858 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        EI_DSP_MATRIX(features_matrix, mfe_matrix_size.rows, mfe_matrix_size.cols);
 800411c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8004120:	4618      	mov	r0, r3
 8004122:	f7fd f853 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        return EIDSP_OK;
 8004126:	4623      	mov	r3, r4
    }
 8004128:	4618      	mov	r0, r3
 800412a:	377c      	adds	r7, #124	; 0x7c
 800412c:	46bd      	mov	sp, r7
 800412e:	bd90      	pop	{r4, r7, pc}

08004130 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>:
     * @param sampling_frequency (int): The sampling frequency of the signal.
     * @param frame_length (float): The length of the frame in second.
     * @param frame_stride (float): The stride between frames.
     * @param num_cepstral
     */
    static matrix_size_t calculate_mfcc_buffer_size(
 8004130:	b580      	push	{r7, lr}
 8004132:	b088      	sub	sp, #32
 8004134:	af00      	add	r7, sp, #0
 8004136:	6178      	str	r0, [r7, #20]
 8004138:	6139      	str	r1, [r7, #16]
 800413a:	60fa      	str	r2, [r7, #12]
 800413c:	ed87 0a02 	vstr	s0, [r7, #8]
 8004140:	edc7 0a01 	vstr	s1, [r7, #4]
 8004144:	807b      	strh	r3, [r7, #2]
        size_t signal_length,
        uint32_t sampling_frequency,
        float frame_length = 0.02f, float frame_stride = 0.02f, uint16_t num_cepstral = 13)
    {
        uint16_t rows = processing::calculate_no_of_stack_frames(
 8004146:	2200      	movs	r2, #0
 8004148:	edd7 0a01 	vldr	s1, [r7, #4]
 800414c:	ed97 0a02 	vldr	s0, [r7, #8]
 8004150:	68f9      	ldr	r1, [r7, #12]
 8004152:	6938      	ldr	r0, [r7, #16]
 8004154:	f7fe ffa4 	bl	80030a0 <_ZN2ei8speechpy10processingL28calculate_no_of_stack_framesEjmffb>
 8004158:	4603      	mov	r3, r0
            signal_length,
            sampling_frequency,
            frame_length,
            frame_stride,
            false);
 800415a:	83fb      	strh	r3, [r7, #30]
        uint16_t cols = num_cepstral;
 800415c:	887b      	ldrh	r3, [r7, #2]
 800415e:	83bb      	strh	r3, [r7, #28]

        matrix_size_t size_matrix;
        size_matrix.rows = rows;
 8004160:	8bfa      	ldrh	r2, [r7, #30]
 8004162:	697b      	ldr	r3, [r7, #20]
 8004164:	601a      	str	r2, [r3, #0]
        size_matrix.cols = cols;
 8004166:	8bba      	ldrh	r2, [r7, #28]
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	605a      	str	r2, [r3, #4]
        return size_matrix;
 800416c:	bf00      	nop
    }
 800416e:	6978      	ldr	r0, [r7, #20]
 8004170:	3720      	adds	r7, #32
 8004172:	46bd      	mov	sp, r7
 8004174:	bd80      	pop	{r7, pc}
	...

08004178 <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf>:

    return EIDSP_OK;
}

static class speechpy::processing::preemphasis *preemphasis;
static int preemphasized_audio_signal_get_data(size_t offset, size_t length, float *out_ptr) {
 8004178:	b580      	push	{r7, lr}
 800417a:	b084      	sub	sp, #16
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
    return preemphasis->get_data(offset, length, out_ptr);
 8004184:	4b05      	ldr	r3, [pc, #20]	; (800419c <_ZN12_GLOBAL__N_1L35preemphasized_audio_signal_get_dataEjjPf+0x24>)
 8004186:	6818      	ldr	r0, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68ba      	ldr	r2, [r7, #8]
 800418c:	68f9      	ldr	r1, [r7, #12]
 800418e:	f7fe fd61 	bl	8002c54 <_ZN2ei8speechpy10processing11preemphasis8get_dataEjjPf>
 8004192:	4603      	mov	r3, r0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	2000059c 	.word	0x2000059c

080041a0 <_ZNSt8functionIFijjPfEED1Ev>:
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b082      	sub	sp, #8
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f7fc ffbe 	bl	800112c <_ZNSt14_Function_baseD1Ev>
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	4618      	mov	r0, r3
 80041b4:	3708      	adds	r7, #8
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <_ZN2ei11ei_signal_tC1Ev>:
typedef struct ei_signal_t {
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b082      	sub	sp, #8
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	4618      	mov	r0, r3
 80041c6:	f001 fb18 	bl	80057fa <_ZNSt8functionIFijjPfEEC1Ev>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <_ZN2ei11ei_signal_tD1Ev>:
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b082      	sub	sp, #8
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4618      	mov	r0, r3
 80041e0:	f7ff ffde 	bl	80041a0 <_ZNSt8functionIFijjPfEED1Ev>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4618      	mov	r0, r3
 80041e8:	3708      	adds	r7, #8
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
	...

080041f0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv>:

__attribute__((unused)) int extract_mfcc_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr) {
 80041f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041f2:	b0a7      	sub	sp, #156	; 0x9c
 80041f4:	af06      	add	r7, sp, #24
 80041f6:	60f8      	str	r0, [r7, #12]
 80041f8:	60b9      	str	r1, [r7, #8]
 80041fa:	607a      	str	r2, [r7, #4]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f107 0444 	add.w	r4, r7, #68	; 0x44
 8004202:	461d      	mov	r5, r3
 8004204:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004206:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004208:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800420a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800420c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8004210:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    if (config.axes != 1) {
 8004214:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004216:	2b01      	cmp	r3, #1
 8004218:	d00b      	beq.n	8004232 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x42>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800421a:	4a6b      	ldr	r2, [pc, #428]	; (80043c8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 800421c:	496b      	ldr	r1, [pc, #428]	; (80043cc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 800421e:	486c      	ldr	r0, [pc, #432]	; (80043d0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004220:	f017 fbb2 	bl	801b988 <iprintf>
 8004224:	4b6b      	ldr	r3, [pc, #428]	; (80043d4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004226:	4a6c      	ldr	r2, [pc, #432]	; (80043d8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004228:	f44f 7182 	mov.w	r1, #260	; 0x104
 800422c:	486b      	ldr	r0, [pc, #428]	; (80043dc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 800422e:	f016 fec7 	bl	801afc0 <__assert_func>
    }

    // @todo: move this to config
    const uint32_t frequency = static_cast<uint32_t>(EI_CLASSIFIER_FREQUENCY);
 8004232:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 8004236:	67fb      	str	r3, [r7, #124]	; 0x7c

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 8004238:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800423a:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 800423e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004242:	eeb0 0a67 	vmov.f32	s0, s15
 8004246:	68f9      	ldr	r1, [r7, #12]
 8004248:	4618      	mov	r0, r3
 800424a:	f7fe fcb7 	bl	8002bbc <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>
    preemphasis = &pre;
 800424e:	4a64      	ldr	r2, [pc, #400]	; (80043e0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 8004250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004254:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 8004256:	f107 0318 	add.w	r3, r7, #24
 800425a:	4618      	mov	r0, r3
 800425c:	f7ff ffad 	bl	80041ba <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	691b      	ldr	r3, [r3, #16]
 8004264:	62bb      	str	r3, [r7, #40]	; 0x28
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 8004266:	4b5f      	ldr	r3, [pc, #380]	; (80043e4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f4>)
 8004268:	677b      	str	r3, [r7, #116]	; 0x74
 800426a:	f107 0274 	add.w	r2, r7, #116	; 0x74
 800426e:	f107 0318 	add.w	r3, r7, #24
 8004272:	4611      	mov	r1, r2
 8004274:	4618      	mov	r0, r3
 8004276:	f001 facd 	bl	8005814 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFCC matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_cepstral);
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6919      	ldr	r1, [r3, #16]
 800427e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004282:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8004286:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004288:	b29b      	uxth	r3, r3
 800428a:	f107 0010 	add.w	r0, r7, #16
 800428e:	eef0 0a47 	vmov.f32	s1, s14
 8004292:	eeb0 0a67 	vmov.f32	s0, s15
 8004296:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800429a:	f7ff ff49 	bl	8004130 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 800429e:	693b      	ldr	r3, [r7, #16]
 80042a0:	697a      	ldr	r2, [r7, #20]
 80042a2:	fb02 f203 	mul.w	r2, r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	68b9      	ldr	r1, [r7, #8]
 80042ac:	6889      	ldr	r1, [r1, #8]
 80042ae:	fb01 f303 	mul.w	r3, r1, r3
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d919      	bls.n	80042ea <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0xfa>
        ei_printf("out_matrix = %hux%hu\n", output_matrix->rows, output_matrix->cols);
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	6859      	ldr	r1, [r3, #4]
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	461a      	mov	r2, r3
 80042c0:	4849      	ldr	r0, [pc, #292]	; (80043e8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f8>)
 80042c2:	f001 f961 	bl	8005588 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hux%hu\n", out_matrix_size.rows, out_matrix_size.cols);
 80042c6:	693b      	ldr	r3, [r7, #16]
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4619      	mov	r1, r3
 80042cc:	4847      	ldr	r0, [pc, #284]	; (80043ec <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1fc>)
 80042ce:	f001 f95b 	bl	8005588 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 80042d2:	4a3d      	ldr	r2, [pc, #244]	; (80043c8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 80042d4:	493d      	ldr	r1, [pc, #244]	; (80043cc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 80042d6:	483e      	ldr	r0, [pc, #248]	; (80043d0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 80042d8:	f017 fb56 	bl	801b988 <iprintf>
 80042dc:	4b3d      	ldr	r3, [pc, #244]	; (80043d4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 80042de:	4a3e      	ldr	r2, [pc, #248]	; (80043d8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 80042e0:	f44f 718d 	mov.w	r1, #282	; 0x11a
 80042e4:	483d      	ldr	r0, [pc, #244]	; (80043dc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 80042e6:	f016 fe6b 	bl	801afc0 <__assert_func>
    }

    output_matrix->rows = out_matrix_size.rows;
 80042ea:	693a      	ldr	r2, [r7, #16]
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 80042f0:	697a      	ldr	r2, [r7, #20]
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	609a      	str	r2, [r3, #8]

    // and run the MFCC extraction (using 32 rather than 40 filters here to optimize speed on embedded)
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 80042f6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80042fa:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 80042fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004300:	b2d8      	uxtb	r0, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004302:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004304:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004306:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004308:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency);
 800430a:	6e79      	ldr	r1, [r7, #100]	; 0x64
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800430c:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency);
 800430e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004310:	460e      	mov	r6, r1
 8004312:	f107 0118 	add.w	r1, r7, #24
 8004316:	2401      	movs	r4, #1
 8004318:	9404      	str	r4, [sp, #16]
 800431a:	9603      	str	r6, [sp, #12]
 800431c:	9502      	str	r5, [sp, #8]
 800431e:	9201      	str	r2, [sp, #4]
 8004320:	9300      	str	r3, [sp, #0]
 8004322:	4603      	mov	r3, r0
 8004324:	eef0 0a47 	vmov.f32	s1, s14
 8004328:	eeb0 0a67 	vmov.f32	s0, s15
 800432c:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004330:	68b8      	ldr	r0, [r7, #8]
 8004332:	f7ff fd51 	bl	8003dd8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>
 8004336:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 8004338:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00f      	beq.n	800435e <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x16e>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 800433e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004340:	482b      	ldr	r0, [pc, #172]	; (80043f0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x200>)
 8004342:	f001 f921 	bl	8005588 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8004346:	4a2b      	ldr	r2, [pc, #172]	; (80043f4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x204>)
 8004348:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800434a:	4821      	ldr	r0, [pc, #132]	; (80043d0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 800434c:	f017 fb1c 	bl	801b988 <iprintf>
 8004350:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004352:	4a21      	ldr	r2, [pc, #132]	; (80043d8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 8004354:	f44f 7193 	mov.w	r1, #294	; 0x126
 8004358:	4820      	ldr	r0, [pc, #128]	; (80043dc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 800435a:	f016 fe31 	bl	801afc0 <__assert_func>
    }

    // cepstral mean and variance normalization
    ret = speechpy::processing::cmvnw(output_matrix, config.win_size, true);
 800435e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004360:	b29b      	uxth	r3, r3
 8004362:	2201      	movs	r2, #1
 8004364:	4619      	mov	r1, r3
 8004366:	68b8      	ldr	r0, [r7, #8]
 8004368:	f7fe ff7e 	bl	8003268 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb>
 800436c:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 800436e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004370:	2b00      	cmp	r3, #0
 8004372:	d00f      	beq.n	8004394 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1a4>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8004374:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004376:	4820      	ldr	r0, [pc, #128]	; (80043f8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x208>)
 8004378:	f001 f906 	bl	8005588 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800437c:	4a1d      	ldr	r2, [pc, #116]	; (80043f4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x204>)
 800437e:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004380:	4813      	ldr	r0, [pc, #76]	; (80043d0 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004382:	f017 fb01 	bl	801b988 <iprintf>
 8004386:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004388:	4a13      	ldr	r2, [pc, #76]	; (80043d8 <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>)
 800438a:	f240 112d 	movw	r1, #301	; 0x12d
 800438e:	4813      	ldr	r0, [pc, #76]	; (80043dc <_ZN12_GLOBAL__N_121extract_mfcc_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004390:	f016 fe16 	bl	801afc0 <__assert_func>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	697a      	ldr	r2, [r7, #20]
 8004398:	fb02 f203 	mul.w	r2, r2, r3
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2201      	movs	r2, #1
 80043a4:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80043a6:	2400      	movs	r4, #0
    signal_t preemphasized_audio_signal;
 80043a8:	f107 0318 	add.w	r3, r7, #24
 80043ac:	4618      	mov	r0, r3
 80043ae:	f7ff ff11 	bl	80041d4 <_ZN2ei11ei_signal_tD1Ev>
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 80043b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80043b6:	4618      	mov	r0, r3
 80043b8:	f7fe fd28 	bl	8002e0c <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    return EIDSP_OK;
 80043bc:	4623      	mov	r3, r4
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3784      	adds	r7, #132	; 0x84
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80043c6:	bf00      	nop
 80043c8:	0801c850 	.word	0x0801c850
 80043cc:	fffffc14 	.word	0xfffffc14
 80043d0:	0801c79c 	.word	0x0801c79c
 80043d4:	0801c7ac 	.word	0x0801c7ac
 80043d8:	0801d838 	.word	0x0801d838
 80043dc:	0801d698 	.word	0x0801d698
 80043e0:	2000059c 	.word	0x2000059c
 80043e4:	08004179 	.word	0x08004179
 80043e8:	0801d884 	.word	0x0801d884
 80043ec:	0801d89c 	.word	0x0801d89c
 80043f0:	0801d8b8 	.word	0x0801d8b8
 80043f4:	0801c900 	.word	0x0801c900
 80043f8:	0801d8d0 	.word	0x0801d8d0

080043fc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv>:

__attribute__((unused)) int extract_mfcc_per_slice_features(signal_t *signal, matrix_t *output_matrix, void *config_ptr) {
 80043fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043fe:	b0a7      	sub	sp, #156	; 0x9c
 8004400:	af06      	add	r7, sp, #24
 8004402:	60f8      	str	r0, [r7, #12]
 8004404:	60b9      	str	r1, [r7, #8]
 8004406:	607a      	str	r2, [r7, #4]
    ei_dsp_config_mfcc_t config = *((ei_dsp_config_mfcc_t*)config_ptr);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f107 0444 	add.w	r4, r7, #68	; 0x44
 800440e:	461d      	mov	r5, r3
 8004410:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004412:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004414:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8004416:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8004418:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800441c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

    static bool first_run = false;

    if (config.axes != 1) {
 8004420:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004422:	2b01      	cmp	r3, #1
 8004424:	d00b      	beq.n	800443e <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x42>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 8004426:	4a68      	ldr	r2, [pc, #416]	; (80045c8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 8004428:	4968      	ldr	r1, [pc, #416]	; (80045cc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 800442a:	4869      	ldr	r0, [pc, #420]	; (80045d0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 800442c:	f017 faac 	bl	801b988 <iprintf>
 8004430:	4b68      	ldr	r3, [pc, #416]	; (80045d4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004432:	4a69      	ldr	r2, [pc, #420]	; (80045d8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004434:	f44f 719e 	mov.w	r1, #316	; 0x13c
 8004438:	4868      	ldr	r0, [pc, #416]	; (80045dc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 800443a:	f016 fdc1 	bl	801afc0 <__assert_func>
    }

    /* Fake an extra frame_length for stack frames calculations. There, 1 frame_length is always
    subtracted and there for never used. But skip the first slice to fit the feature_matrix
    buffer */
    if (first_run == true) {
 800443e:	4b68      	ldr	r3, [pc, #416]	; (80045e0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	2b01      	cmp	r3, #1
 8004444:	d10e      	bne.n	8004464 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x68>
        signal->total_length += (size_t)(config.frame_length * (float)EI_CLASSIFIER_FREQUENCY);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	691b      	ldr	r3, [r3, #16]
 800444a:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800444e:	ed9f 7a65 	vldr	s14, [pc, #404]	; 80045e4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e8>
 8004452:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004456:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800445a:	ee17 2a90 	vmov	r2, s15
 800445e:	441a      	add	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	611a      	str	r2, [r3, #16]
    }

    first_run = true;
 8004464:	4b5e      	ldr	r3, [pc, #376]	; (80045e0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e4>)
 8004466:	2201      	movs	r2, #1
 8004468:	701a      	strb	r2, [r3, #0]

    // @todo: move this to config
    const uint32_t frequency = static_cast<uint32_t>(EI_CLASSIFIER_FREQUENCY);
 800446a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800446e:	67fb      	str	r3, [r7, #124]	; 0x7c

    // preemphasis class to preprocess the audio...
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 8004470:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8004472:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8004476:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800447a:	eeb0 0a67 	vmov.f32	s0, s15
 800447e:	68f9      	ldr	r1, [r7, #12]
 8004480:	4618      	mov	r0, r3
 8004482:	f7fe fb9b 	bl	8002bbc <_ZN2ei8speechpy10processing11preemphasisC1EPNS_11ei_signal_tEif>
    preemphasis = &pre;
 8004486:	4a58      	ldr	r2, [pc, #352]	; (80045e8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1ec>)
 8004488:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800448c:	6013      	str	r3, [r2, #0]

    signal_t preemphasized_audio_signal;
 800448e:	f107 0318 	add.w	r3, r7, #24
 8004492:	4618      	mov	r0, r3
 8004494:	f7ff fe91 	bl	80041ba <_ZN2ei11ei_signal_tC1Ev>
    preemphasized_audio_signal.total_length = signal->total_length;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	691b      	ldr	r3, [r3, #16]
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
    preemphasized_audio_signal.get_data = &preemphasized_audio_signal_get_data;
 800449e:	4b53      	ldr	r3, [pc, #332]	; (80045ec <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f0>)
 80044a0:	677b      	str	r3, [r7, #116]	; 0x74
 80044a2:	f107 0274 	add.w	r2, r7, #116	; 0x74
 80044a6:	f107 0318 	add.w	r3, r7, #24
 80044aa:	4611      	mov	r1, r2
 80044ac:	4618      	mov	r0, r3
 80044ae:	f001 f9b1 	bl	8005814 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>

    // calculate the size of the MFCC matrix
    matrix_size_t out_matrix_size =
        speechpy::feature::calculate_mfcc_buffer_size(
            signal->total_length, frequency, config.frame_length, config.frame_stride, config.num_cepstral);
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6919      	ldr	r1, [r3, #16]
 80044b6:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80044ba:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 80044be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	f107 0010 	add.w	r0, r7, #16
 80044c6:	eef0 0a47 	vmov.f32	s1, s14
 80044ca:	eeb0 0a67 	vmov.f32	s0, s15
 80044ce:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 80044d2:	f7ff fe2d 	bl	8004130 <_ZN2ei8speechpy7feature26calculate_mfcc_buffer_sizeEjmfft>
    /* Only throw size mismatch error calculated buffer doesn't fit for continuous inferencing */
    if (out_matrix_size.rows * out_matrix_size.cols > output_matrix->rows * output_matrix->cols) {
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	fb02 f203 	mul.w	r2, r2, r3
 80044de:	68bb      	ldr	r3, [r7, #8]
 80044e0:	685b      	ldr	r3, [r3, #4]
 80044e2:	68b9      	ldr	r1, [r7, #8]
 80044e4:	6889      	ldr	r1, [r1, #8]
 80044e6:	fb01 f303 	mul.w	r3, r1, r3
 80044ea:	429a      	cmp	r2, r3
 80044ec:	d919      	bls.n	8004522 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x126>
        ei_printf("out_matrix = %hux%hu\n", output_matrix->rows, output_matrix->cols);
 80044ee:	68bb      	ldr	r3, [r7, #8]
 80044f0:	6859      	ldr	r1, [r3, #4]
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	689b      	ldr	r3, [r3, #8]
 80044f6:	461a      	mov	r2, r3
 80044f8:	483d      	ldr	r0, [pc, #244]	; (80045f0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f4>)
 80044fa:	f001 f845 	bl	8005588 <_Z9ei_printfPKcz>
        ei_printf("calculated size = %hux%hu\n", out_matrix_size.rows, out_matrix_size.cols);
 80044fe:	693b      	ldr	r3, [r7, #16]
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	4619      	mov	r1, r3
 8004504:	483b      	ldr	r0, [pc, #236]	; (80045f4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1f8>)
 8004506:	f001 f83f 	bl	8005588 <_Z9ei_printfPKcz>
        EIDSP_ERR(EIDSP_MATRIX_SIZE_MISMATCH);
 800450a:	4a2f      	ldr	r2, [pc, #188]	; (80045c8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1cc>)
 800450c:	492f      	ldr	r1, [pc, #188]	; (80045cc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d0>)
 800450e:	4830      	ldr	r0, [pc, #192]	; (80045d0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004510:	f017 fa3a 	bl	801b988 <iprintf>
 8004514:	4b2f      	ldr	r3, [pc, #188]	; (80045d4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 8004516:	4a30      	ldr	r2, [pc, #192]	; (80045d8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 8004518:	f240 115b 	movw	r1, #347	; 0x15b
 800451c:	482f      	ldr	r0, [pc, #188]	; (80045dc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 800451e:	f016 fd4f 	bl	801afc0 <__assert_func>
    }

    output_matrix->rows = out_matrix_size.rows;
 8004522:	693a      	ldr	r2, [r7, #16]
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	605a      	str	r2, [r3, #4]
    output_matrix->cols = out_matrix_size.cols;
 8004528:	697a      	ldr	r2, [r7, #20]
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	609a      	str	r2, [r3, #8]

    // and run the MFCC extraction (using 32 rather than 40 filters here to optimize speed on embedded)
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800452e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 8004532:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 8004536:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004538:	b2d8      	uxtb	r0, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800453a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 800453c:	b29b      	uxth	r3, r3
        frequency, config.frame_length, config.frame_stride, config.num_cepstral, config.num_filters, config.fft_length,
 800453e:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004540:	b292      	uxth	r2, r2
        config.low_frequency, config.high_frequency);
 8004542:	6e79      	ldr	r1, [r7, #100]	; 0x64
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004544:	460d      	mov	r5, r1
        config.low_frequency, config.high_frequency);
 8004546:	6eb9      	ldr	r1, [r7, #104]	; 0x68
    int ret = speechpy::feature::mfcc(output_matrix, &preemphasized_audio_signal,
 8004548:	460e      	mov	r6, r1
 800454a:	f107 0118 	add.w	r1, r7, #24
 800454e:	2401      	movs	r4, #1
 8004550:	9404      	str	r4, [sp, #16]
 8004552:	9603      	str	r6, [sp, #12]
 8004554:	9502      	str	r5, [sp, #8]
 8004556:	9201      	str	r2, [sp, #4]
 8004558:	9300      	str	r3, [sp, #0]
 800455a:	4603      	mov	r3, r0
 800455c:	eef0 0a47 	vmov.f32	s1, s14
 8004560:	eeb0 0a67 	vmov.f32	s0, s15
 8004564:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 8004568:	68b8      	ldr	r0, [r7, #8]
 800456a:	f7ff fc35 	bl	8003dd8 <_ZN2ei8speechpy7feature4mfccEPNS_9ei_matrixEPNS_11ei_signal_tEmffhttmmb>
 800456e:	67b8      	str	r0, [r7, #120]	; 0x78
    if (ret != EIDSP_OK) {
 8004570:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00f      	beq.n	8004596 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x19a>
        ei_printf("ERR: MFCC failed (%d)\n", ret);
 8004576:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004578:	481f      	ldr	r0, [pc, #124]	; (80045f8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1fc>)
 800457a:	f001 f805 	bl	8005588 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 800457e:	4a1f      	ldr	r2, [pc, #124]	; (80045fc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x200>)
 8004580:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004582:	4813      	ldr	r0, [pc, #76]	; (80045d0 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d4>)
 8004584:	f017 fa00 	bl	801b988 <iprintf>
 8004588:	4b12      	ldr	r3, [pc, #72]	; (80045d4 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1d8>)
 800458a:	4a13      	ldr	r2, [pc, #76]	; (80045d8 <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1dc>)
 800458c:	f240 1167 	movw	r1, #359	; 0x167
 8004590:	4812      	ldr	r0, [pc, #72]	; (80045dc <_ZN12_GLOBAL__N_131extract_mfcc_per_slice_featuresEPN2ei11ei_signal_tEPNS0_9ei_matrixEPv+0x1e0>)
 8004592:	f016 fd15 	bl	801afc0 <__assert_func>
    }

    output_matrix->cols = out_matrix_size.rows * out_matrix_size.cols;
 8004596:	693b      	ldr	r3, [r7, #16]
 8004598:	697a      	ldr	r2, [r7, #20]
 800459a:	fb02 f203 	mul.w	r2, r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	609a      	str	r2, [r3, #8]
    output_matrix->rows = 1;
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	2201      	movs	r2, #1
 80045a6:	605a      	str	r2, [r3, #4]

    return EIDSP_OK;
 80045a8:	2400      	movs	r4, #0
    signal_t preemphasized_audio_signal;
 80045aa:	f107 0318 	add.w	r3, r7, #24
 80045ae:	4618      	mov	r0, r3
 80045b0:	f7ff fe10 	bl	80041d4 <_ZN2ei11ei_signal_tD1Ev>
    class speechpy::processing::preemphasis pre(signal, config.pre_shift, config.pre_cof);
 80045b4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80045b8:	4618      	mov	r0, r3
 80045ba:	f7fe fc27 	bl	8002e0c <_ZN2ei8speechpy10processing11preemphasisD1Ev>
    return EIDSP_OK;
 80045be:	4623      	mov	r3, r4
}
 80045c0:	4618      	mov	r0, r3
 80045c2:	3784      	adds	r7, #132	; 0x84
 80045c4:	46bd      	mov	sp, r7
 80045c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80045c8:	0801c850 	.word	0x0801c850
 80045cc:	fffffc14 	.word	0xfffffc14
 80045d0:	0801c79c 	.word	0x0801c79c
 80045d4:	0801c7ac 	.word	0x0801c7ac
 80045d8:	0801d8e8 	.word	0x0801d8e8
 80045dc:	0801d698 	.word	0x0801d698
 80045e0:	200005a0 	.word	0x200005a0
 80045e4:	467a0000 	.word	0x467a0000
 80045e8:	2000059c 	.word	0x2000059c
 80045ec:	08004179 	.word	0x08004179
 80045f0:	0801d884 	.word	0x0801d884
 80045f4:	0801d89c 	.word	0x0801d89c
 80045f8:	0801d8b8 	.word	0x0801d8b8
 80045fc:	0801c900 	.word	0x0801c900

08004600 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj>:
* aligned_malloc takes in the requested alignment and size
*	We will call malloc with extra bytes for our header and the offset
*	required to guarantee the desired alignment.
*/
void * ei_aligned_malloc(size_t align, size_t size)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
	void * ptr = NULL;
 800460a:	2300      	movs	r3, #0
 800460c:	617b      	str	r3, [r7, #20]

	//We want it to be a power of two since align_up operates on powers of two
	assert((align & (align - 1)) == 0);
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	1e5a      	subs	r2, r3, #1
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	4013      	ands	r3, r2
 8004616:	2b00      	cmp	r3, #0
 8004618:	d005      	beq.n	8004626 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x26>
 800461a:	4b17      	ldr	r3, [pc, #92]	; (8004678 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x78>)
 800461c:	4a17      	ldr	r2, [pc, #92]	; (800467c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x7c>)
 800461e:	2139      	movs	r1, #57	; 0x39
 8004620:	4817      	ldr	r0, [pc, #92]	; (8004680 <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x80>)
 8004622:	f016 fccd 	bl	801afc0 <__assert_func>

	if(align && size)
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	2b00      	cmp	r3, #0
 800462a:	d01f      	beq.n	800466c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
 800462c:	683b      	ldr	r3, [r7, #0]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d01c      	beq.n	800466c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
	{
		/*
		 * We know we have to fit an offset value
		 * We also allocate extra bytes to ensure we can meet the alignment
		 */
		uint32_t hdr_size = PTR_OFFSET_SZ + (align - 1);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	3301      	adds	r3, #1
 8004636:	613b      	str	r3, [r7, #16]
		void * p = malloc(size + hdr_size);
 8004638:	683a      	ldr	r2, [r7, #0]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	4413      	add	r3, r2
 800463e:	4618      	mov	r0, r3
 8004640:	f016 fdac 	bl	801b19c <malloc>
 8004644:	4603      	mov	r3, r0
 8004646:	60fb      	str	r3, [r7, #12]

		if(p)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <_ZN12_GLOBAL__N_117ei_aligned_mallocEjj+0x6c>
		{
			/*
			 * Add the offset size to malloc's pointer (we will always store that)
			 * Then align the resulting value to the arget alignment
			 */
			ptr = (void *) align_up(((uintptr_t)p + PTR_OFFSET_SZ), align);
 800464e:	68fa      	ldr	r2, [r7, #12]
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4413      	add	r3, r2
 8004654:	1c5a      	adds	r2, r3, #1
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	425b      	negs	r3, r3
 800465a:	4013      	ands	r3, r2
 800465c:	617b      	str	r3, [r7, #20]

			//Calculate the offset and store it behind our aligned pointer
			*((offset_t *)ptr - 1) = (offset_t)((uintptr_t)ptr - (uintptr_t)p);
 800465e:	697a      	ldr	r2, [r7, #20]
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	1ad2      	subs	r2, r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	3b02      	subs	r3, #2
 8004668:	b292      	uxth	r2, r2
 800466a:	801a      	strh	r2, [r3, #0]

		} // else NULL, could not malloc
	} //else NULL, invalid arguments

	return ptr;
 800466c:	697b      	ldr	r3, [r7, #20]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}
 8004676:	bf00      	nop
 8004678:	0801d9d4 	.word	0x0801d9d4
 800467c:	0801d9f0 	.word	0x0801d9f0
 8004680:	0801da28 	.word	0x0801da28

08004684 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv>:
* aligned_free works like free(), but we work backwards from the returned
* pointer to find the correct offset and pointer location to return to free()
* Note that it is VERY BAD to call free() on an aligned_malloc() pointer.
*/
void ei_aligned_free(void * ptr)
{
 8004684:	b580      	push	{r7, lr}
 8004686:	b084      	sub	sp, #16
 8004688:	af00      	add	r7, sp, #0
 800468a:	6078      	str	r0, [r7, #4]
	assert(ptr);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d105      	bne.n	800469e <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x1a>
 8004692:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x3c>)
 8004694:	4a0b      	ldr	r2, [pc, #44]	; (80046c4 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x40>)
 8004696:	215c      	movs	r1, #92	; 0x5c
 8004698:	480b      	ldr	r0, [pc, #44]	; (80046c8 <_ZN12_GLOBAL__N_115ei_aligned_freeEPv+0x44>)
 800469a:	f016 fc91 	bl	801afc0 <__assert_func>

	/*
	* Walk backwards from the passed-in pointer to get the pointer offset
	* We convert to an offset_t pointer and rely on pointer math to get the data
	*/
	offset_t offset = *((offset_t *)ptr - 1);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f833 3c02 	ldrh.w	r3, [r3, #-2]
 80046a4:	81fb      	strh	r3, [r7, #14]

	/*
	* Once we have the offset, we can get our original pointer and call free
	*/
	void * p = (void *)((uint8_t *)ptr - offset);
 80046a6:	89fb      	ldrh	r3, [r7, #14]
 80046a8:	425b      	negs	r3, r3
 80046aa:	687a      	ldr	r2, [r7, #4]
 80046ac:	4413      	add	r3, r2
 80046ae:	60bb      	str	r3, [r7, #8]
	free(p);
 80046b0:	68b8      	ldr	r0, [r7, #8]
 80046b2:	f016 fd7b 	bl	801b1ac <free>
}
 80046b6:	bf00      	nop
 80046b8:	3710      	adds	r7, #16
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd80      	pop	{r7, pc}
 80046be:	bf00      	nop
 80046c0:	0801daa8 	.word	0x0801daa8
 80046c4:	0801daac 	.word	0x0801daac
 80046c8:	0801da28 	.word	0x0801da28

080046cc <run_moving_average_filter>:
 * @param[in]  classification  Classification output on current slice
 *
 * @return     Averaged classification value
 */
extern "C" float run_moving_average_filter(ei_impulse_maf *maf, float classification)
{
 80046cc:	b480      	push	{r7}
 80046ce:	b083      	sub	sp, #12
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
 80046d4:	ed87 0a00 	vstr	s0, [r7]
    maf->running_sum -= maf->maf_buffer[maf->buf_idx];
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	ed93 7a01 	vldr	s14, [r3, #4]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	687a      	ldr	r2, [r7, #4]
 80046e4:	3302      	adds	r3, #2
 80046e6:	009b      	lsls	r3, r3, #2
 80046e8:	4413      	add	r3, r2
 80046ea:	edd3 7a00 	vldr	s15, [r3]
 80046ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	edc3 7a01 	vstr	s15, [r3, #4]
    maf->running_sum += classification;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	ed93 7a01 	vldr	s14, [r3, #4]
 80046fe:	edd7 7a00 	vldr	s15, [r7]
 8004702:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	edc3 7a01 	vstr	s15, [r3, #4]
    maf->maf_buffer[maf->buf_idx] = classification;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	3302      	adds	r3, #2
 8004714:	009b      	lsls	r3, r3, #2
 8004716:	4413      	add	r3, r2
 8004718:	683a      	ldr	r2, [r7, #0]
 800471a:	601a      	str	r2, [r3, #0]

    if (++maf->buf_idx >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1)) {
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	1c5a      	adds	r2, r3, #1
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	601a      	str	r2, [r3, #0]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	2b01      	cmp	r3, #1
 800472c:	bf8c      	ite	hi
 800472e:	2301      	movhi	r3, #1
 8004730:	2300      	movls	r3, #0
 8004732:	b2db      	uxtb	r3, r3
 8004734:	2b00      	cmp	r3, #0
 8004736:	d002      	beq.n	800473e <run_moving_average_filter+0x72>
        maf->buf_idx = 0;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	2200      	movs	r2, #0
 800473c:	601a      	str	r2, [r3, #0]
    }

    return maf->running_sum / (float)(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1);
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	edd3 7a01 	vldr	s15, [r3, #4]
 8004744:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 8004748:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800474c:	eef0 7a66 	vmov.f32	s15, s13
}
 8004750:	eeb0 0a67 	vmov.f32	s0, s15
 8004754:	370c      	adds	r7, #12
 8004756:	46bd      	mov	sp, r7
 8004758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475c:	4770      	bx	lr
	...

08004760 <__tcf_0>:
 * @return     The ei impulse error.
 */
extern "C" EI_IMPULSE_ERROR run_classifier_continuous(signal_t *signal, ei_impulse_result_t *result,
                                                      bool debug = false)
{
    static ei::matrix_t static_features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004760:	b580      	push	{r7, lr}
 8004762:	af00      	add	r7, sp, #0
 8004764:	4801      	ldr	r0, [pc, #4]	; (800476c <__tcf_0+0xc>)
 8004766:	f7fc fd31 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 800476a:	bd80      	pop	{r7, pc}
 800476c:	2000060c 	.word	0x2000060c

08004770 <run_classifier_continuous>:
{
 8004770:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8004774:	b09a      	sub	sp, #104	; 0x68
 8004776:	af00      	add	r7, sp, #0
 8004778:	60f8      	str	r0, [r7, #12]
 800477a:	60b9      	str	r1, [r7, #8]
 800477c:	4613      	mov	r3, r2
 800477e:	71fb      	strb	r3, [r7, #7]
 8004780:	2400      	movs	r4, #0
    static ei::matrix_t static_features_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004782:	4bad      	ldr	r3, [pc, #692]	; (8004a38 <run_classifier_continuous+0x2c8>)
 8004784:	781b      	ldrb	r3, [r3, #0]
 8004786:	f3bf 8f5b 	dmb	ish
 800478a:	b2db      	uxtb	r3, r3
 800478c:	f003 0301 	and.w	r3, r3, #1
 8004790:	2b00      	cmp	r3, #0
 8004792:	bf0c      	ite	eq
 8004794:	2301      	moveq	r3, #1
 8004796:	2300      	movne	r3, #0
 8004798:	b2db      	uxtb	r3, r3
 800479a:	2b00      	cmp	r3, #0
 800479c:	d017      	beq.n	80047ce <run_classifier_continuous+0x5e>
 800479e:	48a6      	ldr	r0, [pc, #664]	; (8004a38 <run_classifier_continuous+0x2c8>)
 80047a0:	f013 fb40 	bl	8017e24 <__cxa_guard_acquire>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	bf14      	ite	ne
 80047aa:	2301      	movne	r3, #1
 80047ac:	2300      	moveq	r3, #0
 80047ae:	b2db      	uxtb	r3, r3
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d00c      	beq.n	80047ce <run_classifier_continuous+0x5e>
 80047b4:	2300      	movs	r3, #0
 80047b6:	f240 228a 	movw	r2, #650	; 0x28a
 80047ba:	2101      	movs	r1, #1
 80047bc:	489f      	ldr	r0, [pc, #636]	; (8004a3c <run_classifier_continuous+0x2cc>)
 80047be:	f7fc fcd9 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>
 80047c2:	489d      	ldr	r0, [pc, #628]	; (8004a38 <run_classifier_continuous+0x2c8>)
 80047c4:	f013 fb3a 	bl	8017e3c <__cxa_guard_release>
 80047c8:	489d      	ldr	r0, [pc, #628]	; (8004a40 <run_classifier_continuous+0x2d0>)
 80047ca:	f016 fc17 	bl	801affc <atexit>
    if (!static_features_matrix.buffer) {
 80047ce:	4b9b      	ldr	r3, [pc, #620]	; (8004a3c <run_classifier_continuous+0x2cc>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d102      	bne.n	80047dc <run_classifier_continuous+0x6c>
        return EI_IMPULSE_ALLOC_FAILED;
 80047d6:	f06f 0407 	mvn.w	r4, #7
 80047da:	e16f      	b.n	8004abc <run_classifier_continuous+0x34c>
    }

    EI_IMPULSE_ERROR ei_impulse_error = EI_IMPULSE_OK;
 80047dc:	2300      	movs	r3, #0
 80047de:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

    uint64_t dsp_start_ms = ei_read_timer_ms();
 80047e2:	f009 fe09 	bl	800e3f8 <_Z16ei_read_timer_msv>
 80047e6:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40

    size_t out_features_index = 0;
 80047ea:	2300      	movs	r3, #0
 80047ec:	663b      	str	r3, [r7, #96]	; 0x60
    size_t feature_size;

    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80047ee:	2300      	movs	r3, #0
 80047f0:	65bb      	str	r3, [r7, #88]	; 0x58
 80047f2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d164      	bne.n	80048c2 <run_classifier_continuous+0x152>
        ei_model_dsp_t block = ei_dsp_blocks[ix];
 80047f8:	4992      	ldr	r1, [pc, #584]	; (8004a44 <run_classifier_continuous+0x2d4>)
 80047fa:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80047fc:	4613      	mov	r3, r2
 80047fe:	005b      	lsls	r3, r3, #1
 8004800:	4413      	add	r3, r2
 8004802:	009b      	lsls	r3, r3, #2
 8004804:	18ca      	adds	r2, r1, r3
 8004806:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800480a:	ca07      	ldmia	r2, {r0, r1, r2}
 800480c:	e883 0007 	stmia.w	r3, {r0, r1, r2}

        if (out_features_index + block.n_output_features > EI_CLASSIFIER_NN_INPUT_FRAME_SIZE) {
 8004810:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004812:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004814:	4413      	add	r3, r2
 8004816:	f240 228a 	movw	r2, #650	; 0x28a
 800481a:	4293      	cmp	r3, r2
 800481c:	d905      	bls.n	800482a <run_classifier_continuous+0xba>
            ei_printf("ERR: Would write outside feature buffer\n");
 800481e:	488a      	ldr	r0, [pc, #552]	; (8004a48 <run_classifier_continuous+0x2d8>)
 8004820:	f000 feb2 	bl	8005588 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8004824:	f06f 0404 	mvn.w	r4, #4
 8004828:	e147      	b.n	8004aba <run_classifier_continuous+0x34a>
        }

        ei::matrix_t fm(1, block.n_output_features,
 800482a:	6b3d      	ldr	r5, [r7, #48]	; 0x30
                        static_features_matrix.buffer + out_features_index + slice_offset);
 800482c:	4b83      	ldr	r3, [pc, #524]	; (8004a3c <run_classifier_continuous+0x2cc>)
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	4b86      	ldr	r3, [pc, #536]	; (8004a4c <run_classifier_continuous+0x2dc>)
 8004832:	6819      	ldr	r1, [r3, #0]
 8004834:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004836:	440b      	add	r3, r1
 8004838:	009b      	lsls	r3, r3, #2
 800483a:	4413      	add	r3, r2
 800483c:	f107 0020 	add.w	r0, r7, #32
 8004840:	462a      	mov	r2, r5
 8004842:	2101      	movs	r1, #1
 8004844:	f7fc fc96 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>

        /* Switch to the slice version of the mfcc feature extract function */
        if (block.extract_fn == extract_mfcc_features) {
 8004848:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800484a:	4a81      	ldr	r2, [pc, #516]	; (8004a50 <run_classifier_continuous+0x2e0>)
 800484c:	4293      	cmp	r3, r2
 800484e:	d101      	bne.n	8004854 <run_classifier_continuous+0xe4>
            block.extract_fn = &extract_mfcc_per_slice_features;
 8004850:	4b80      	ldr	r3, [pc, #512]	; (8004a54 <run_classifier_continuous+0x2e4>)
 8004852:	637b      	str	r3, [r7, #52]	; 0x34
        }

        int ret = block.extract_fn(signal, &fm, block.config);
 8004854:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004856:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004858:	f107 0120 	add.w	r1, r7, #32
 800485c:	68f8      	ldr	r0, [r7, #12]
 800485e:	4798      	blx	r3
 8004860:	63f8      	str	r0, [r7, #60]	; 0x3c
        if (ret != EIDSP_OK) {
 8004862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004864:	2b00      	cmp	r3, #0
 8004866:	d007      	beq.n	8004878 <run_classifier_continuous+0x108>
            ei_printf("ERR: Failed to run DSP process (%d)\n", ret);
 8004868:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800486a:	487b      	ldr	r0, [pc, #492]	; (8004a58 <run_classifier_continuous+0x2e8>)
 800486c:	f000 fe8c 	bl	8005588 <_Z9ei_printfPKcz>
            return EI_IMPULSE_DSP_ERROR;
 8004870:	f06f 0404 	mvn.w	r4, #4
 8004874:	2500      	movs	r5, #0
 8004876:	e018      	b.n	80048aa <run_classifier_continuous+0x13a>
        }

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004878:	f009 fdb6 	bl	800e3e8 <_Z29ei_run_impulse_check_canceledv>
 800487c:	4603      	mov	r3, r0
 800487e:	f113 0f02 	cmn.w	r3, #2
 8004882:	bf0c      	ite	eq
 8004884:	2301      	moveq	r3, #1
 8004886:	2300      	movne	r3, #0
 8004888:	b2db      	uxtb	r3, r3
 800488a:	2b00      	cmp	r3, #0
 800488c:	d003      	beq.n	8004896 <run_classifier_continuous+0x126>
            return EI_IMPULSE_CANCELED;
 800488e:	f06f 0401 	mvn.w	r4, #1
 8004892:	2500      	movs	r5, #0
 8004894:	e009      	b.n	80048aa <run_classifier_continuous+0x13a>
        }

        out_features_index += block.n_output_features;
 8004896:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004898:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800489a:	4413      	add	r3, r2
 800489c:	663b      	str	r3, [r7, #96]	; 0x60

        feature_size = (fm.rows * fm.cols);
 800489e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048a0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048a2:	fb02 f303 	mul.w	r3, r2, r3
 80048a6:	65fb      	str	r3, [r7, #92]	; 0x5c
                        static_features_matrix.buffer + out_features_index + slice_offset);
 80048a8:	2501      	movs	r5, #1
 80048aa:	f107 0320 	add.w	r3, r7, #32
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7fc fc8c 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
 80048b4:	2d01      	cmp	r5, #1
 80048b6:	f040 8100 	bne.w	8004aba <run_classifier_continuous+0x34a>
    for (size_t ix = 0; ix < ei_dsp_blocks_size; ix++) {
 80048ba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80048bc:	3301      	adds	r3, #1
 80048be:	65bb      	str	r3, [r7, #88]	; 0x58
 80048c0:	e797      	b.n	80047f2 <run_classifier_continuous+0x82>
    }

    /* For as long as the feature buffer isn't completely full, keep moving the slice offset */
    if (feature_buffer_full == false) {
 80048c2:	4b66      	ldr	r3, [pc, #408]	; (8004a5c <run_classifier_continuous+0x2ec>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d116      	bne.n	80048f8 <run_classifier_continuous+0x188>
        slice_offset += feature_size;
 80048ca:	4b60      	ldr	r3, [pc, #384]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048cc:	681a      	ldr	r2, [r3, #0]
 80048ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d0:	4413      	add	r3, r2
 80048d2:	4a5e      	ldr	r2, [pc, #376]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048d4:	6013      	str	r3, [r2, #0]

        if (slice_offset > (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size)) {
 80048d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048d8:	f5c3 7322 	rsb	r3, r3, #648	; 0x288
 80048dc:	3302      	adds	r3, #2
 80048de:	4a5b      	ldr	r2, [pc, #364]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048e0:	6812      	ldr	r2, [r2, #0]
 80048e2:	4293      	cmp	r3, r2
 80048e4:	d208      	bcs.n	80048f8 <run_classifier_continuous+0x188>
            feature_buffer_full = true;
 80048e6:	4b5d      	ldr	r3, [pc, #372]	; (8004a5c <run_classifier_continuous+0x2ec>)
 80048e8:	2201      	movs	r2, #1
 80048ea:	701a      	strb	r2, [r3, #0]
            slice_offset -= feature_size;
 80048ec:	4b57      	ldr	r3, [pc, #348]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	4a55      	ldr	r2, [pc, #340]	; (8004a4c <run_classifier_continuous+0x2dc>)
 80048f6:	6013      	str	r3, [r2, #0]
        }
    }

    result->timing.dsp = ei_read_timer_ms() - dsp_start_ms;
 80048f8:	f009 fd7e 	bl	800e3f8 <_Z16ei_read_timer_msv>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004902:	1ad3      	subs	r3, r2, r3
 8004904:	461a      	mov	r2, r3
 8004906:	68bb      	ldr	r3, [r7, #8]
 8004908:	639a      	str	r2, [r3, #56]	; 0x38

    if (debug) {
 800490a:	79fb      	ldrb	r3, [r7, #7]
 800490c:	2b00      	cmp	r3, #0
 800490e:	d021      	beq.n	8004954 <run_classifier_continuous+0x1e4>
        ei_printf("\r\nFeatures (%d ms.): ", result->timing.dsp);
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004914:	4619      	mov	r1, r3
 8004916:	4852      	ldr	r0, [pc, #328]	; (8004a60 <run_classifier_continuous+0x2f0>)
 8004918:	f000 fe36 	bl	8005588 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
 800491c:	2300      	movs	r3, #0
 800491e:	657b      	str	r3, [r7, #84]	; 0x54
 8004920:	4b46      	ldr	r3, [pc, #280]	; (8004a3c <run_classifier_continuous+0x2cc>)
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8004926:	429a      	cmp	r2, r3
 8004928:	d211      	bcs.n	800494e <run_classifier_continuous+0x1de>
            ei_printf_float(static_features_matrix.buffer[ix]);
 800492a:	4b44      	ldr	r3, [pc, #272]	; (8004a3c <run_classifier_continuous+0x2cc>)
 800492c:	681a      	ldr	r2, [r3, #0]
 800492e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004930:	009b      	lsls	r3, r3, #2
 8004932:	4413      	add	r3, r2
 8004934:	edd3 7a00 	vldr	s15, [r3]
 8004938:	eeb0 0a67 	vmov.f32	s0, s15
 800493c:	f009 fd68 	bl	800e410 <_Z15ei_printf_floatf>
            ei_printf(" ");
 8004940:	4848      	ldr	r0, [pc, #288]	; (8004a64 <run_classifier_continuous+0x2f4>)
 8004942:	f000 fe21 	bl	8005588 <_Z9ei_printfPKcz>
        for (size_t ix = 0; ix < static_features_matrix.cols; ix++) {
 8004946:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004948:	3301      	adds	r3, #1
 800494a:	657b      	str	r3, [r7, #84]	; 0x54
 800494c:	e7e8      	b.n	8004920 <run_classifier_continuous+0x1b0>
        }
        ei_printf("\n");
 800494e:	4846      	ldr	r0, [pc, #280]	; (8004a68 <run_classifier_continuous+0x2f8>)
 8004950:	f000 fe1a 	bl	8005588 <_Z9ei_printfPKcz>
    }

#if EI_CLASSIFIER_INFERENCING_ENGINE != EI_CLASSIFIER_NONE
    if (debug) {
 8004954:	79fb      	ldrb	r3, [r7, #7]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <run_classifier_continuous+0x1f0>
        ei_printf("Running neural network...\n");
 800495a:	4844      	ldr	r0, [pc, #272]	; (8004a6c <run_classifier_continuous+0x2fc>)
 800495c:	f000 fe14 	bl	8005588 <_Z9ei_printfPKcz>
    }
#endif

    if (feature_buffer_full == true) {
 8004960:	4b3e      	ldr	r3, [pc, #248]	; (8004a5c <run_classifier_continuous+0x2ec>)
 8004962:	781b      	ldrb	r3, [r3, #0]
 8004964:	2b01      	cmp	r3, #1
 8004966:	f040 80a5 	bne.w	8004ab4 <run_classifier_continuous+0x344>
        dsp_start_ms = ei_read_timer_ms();
 800496a:	f009 fd45 	bl	800e3f8 <_Z16ei_read_timer_msv>
 800496e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
        ei::matrix_t classify_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004972:	f107 0010 	add.w	r0, r7, #16
 8004976:	2300      	movs	r3, #0
 8004978:	f240 228a 	movw	r2, #650	; 0x28a
 800497c:	2101      	movs	r1, #1
 800497e:	f7fc fbf9 	bl	8001174 <_ZN2ei9ei_matrixC1EmmPf>

        /* Create a copy of the matrix for normalization */
        for (size_t m_ix = 0; m_ix < EI_CLASSIFIER_NN_INPUT_FRAME_SIZE; m_ix++) {
 8004982:	2300      	movs	r3, #0
 8004984:	653b      	str	r3, [r7, #80]	; 0x50
 8004986:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004988:	f240 2289 	movw	r2, #649	; 0x289
 800498c:	4293      	cmp	r3, r2
 800498e:	d80e      	bhi.n	80049ae <run_classifier_continuous+0x23e>
            classify_matrix.buffer[m_ix] = static_features_matrix.buffer[m_ix];
 8004990:	4b2a      	ldr	r3, [pc, #168]	; (8004a3c <run_classifier_continuous+0x2cc>)
 8004992:	681a      	ldr	r2, [r3, #0]
 8004994:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004996:	009b      	lsls	r3, r3, #2
 8004998:	441a      	add	r2, r3
 800499a:	6939      	ldr	r1, [r7, #16]
 800499c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800499e:	009b      	lsls	r3, r3, #2
 80049a0:	440b      	add	r3, r1
 80049a2:	6812      	ldr	r2, [r2, #0]
 80049a4:	601a      	str	r2, [r3, #0]
        for (size_t m_ix = 0; m_ix < EI_CLASSIFIER_NN_INPUT_FRAME_SIZE; m_ix++) {
 80049a6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80049a8:	3301      	adds	r3, #1
 80049aa:	653b      	str	r3, [r7, #80]	; 0x50
 80049ac:	e7eb      	b.n	8004986 <run_classifier_continuous+0x216>
        }

        calc_cepstral_mean_and_var_normalization(&classify_matrix, ei_dsp_blocks[0].config);
 80049ae:	4b25      	ldr	r3, [pc, #148]	; (8004a44 <run_classifier_continuous+0x2d4>)
 80049b0:	689a      	ldr	r2, [r3, #8]
 80049b2:	f107 0310 	add.w	r3, r7, #16
 80049b6:	4611      	mov	r1, r2
 80049b8:	4618      	mov	r0, r3
 80049ba:	f000 f9ff 	bl	8004dbc <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv>
        result->timing.dsp += ei_read_timer_ms() - dsp_start_ms;
 80049be:	f009 fd1b 	bl	800e3f8 <_Z16ei_read_timer_msv>
 80049c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80049c6:	ebb0 0802 	subs.w	r8, r0, r2
 80049ca:	eb61 0903 	sbc.w	r9, r1, r3
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049d2:	461a      	mov	r2, r3
 80049d4:	4643      	mov	r3, r8
 80049d6:	4413      	add	r3, r2
 80049d8:	461a      	mov	r2, r3
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	639a      	str	r2, [r3, #56]	; 0x38

        ei_impulse_error = run_inference(&classify_matrix, result, debug);
 80049de:	79fa      	ldrb	r2, [r7, #7]
 80049e0:	f107 0310 	add.w	r3, r7, #16
 80049e4:	68b9      	ldr	r1, [r7, #8]
 80049e6:	4618      	mov	r0, r3
 80049e8:	f000 f870 	bl	8004acc <run_inference>
 80049ec:	4603      	mov	r3, r0
 80049ee:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 80049f2:	2300      	movs	r3, #0
 80049f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80049f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049f8:	2b05      	cmp	r3, #5
 80049fa:	d83b      	bhi.n	8004a74 <run_classifier_continuous+0x304>
            result->classification[ix].value =
                run_moving_average_filter(&classifier_maf[ix], result->classification[ix].value);
 80049fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049fe:	011b      	lsls	r3, r3, #4
 8004a00:	4a1b      	ldr	r2, [pc, #108]	; (8004a70 <run_classifier_continuous+0x300>)
 8004a02:	1899      	adds	r1, r3, r2
 8004a04:	68ba      	ldr	r2, [r7, #8]
 8004a06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a08:	00db      	lsls	r3, r3, #3
 8004a0a:	4413      	add	r3, r2
 8004a0c:	3304      	adds	r3, #4
 8004a0e:	edd3 7a00 	vldr	s15, [r3]
 8004a12:	eeb0 0a67 	vmov.f32	s0, s15
 8004a16:	4608      	mov	r0, r1
 8004a18:	f7ff fe58 	bl	80046cc <run_moving_average_filter>
 8004a1c:	eef0 7a40 	vmov.f32	s15, s0
            result->classification[ix].value =
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4413      	add	r3, r2
 8004a28:	3304      	adds	r3, #4
 8004a2a:	edc3 7a00 	vstr	s15, [r3]
        for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a30:	3301      	adds	r3, #1
 8004a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a34:	e7df      	b.n	80049f6 <run_classifier_continuous+0x286>
 8004a36:	bf00      	nop
 8004a38:	2000061c 	.word	0x2000061c
 8004a3c:	2000060c 	.word	0x2000060c
 8004a40:	08004761 	.word	0x08004761
 8004a44:	20000048 	.word	0x20000048
 8004a48:	0801dad8 	.word	0x0801dad8
 8004a4c:	20000604 	.word	0x20000604
 8004a50:	080041f1 	.word	0x080041f1
 8004a54:	080043fd 	.word	0x080043fd
 8004a58:	0801db04 	.word	0x0801db04
 8004a5c:	20000608 	.word	0x20000608
 8004a60:	0801db2c 	.word	0x0801db2c
 8004a64:	0801db44 	.word	0x0801db44
 8004a68:	0801db48 	.word	0x0801db48
 8004a6c:	0801db4c 	.word	0x0801db4c
 8004a70:	200005a4 	.word	0x200005a4
        }

        /* Shift the feature buffer for new data */
        for (size_t i = 0; i < (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size); i++) {
 8004a74:	2300      	movs	r3, #0
 8004a76:	64bb      	str	r3, [r7, #72]	; 0x48
 8004a78:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a7a:	f5c3 7322 	rsb	r3, r3, #648	; 0x288
 8004a7e:	3302      	adds	r3, #2
 8004a80:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004a82:	429a      	cmp	r2, r3
 8004a84:	d211      	bcs.n	8004aaa <run_classifier_continuous+0x33a>
            static_features_matrix.buffer[i] = static_features_matrix.buffer[i + feature_size];
 8004a86:	4b10      	ldr	r3, [pc, #64]	; (8004ac8 <run_classifier_continuous+0x358>)
 8004a88:	681a      	ldr	r2, [r3, #0]
 8004a8a:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004a8c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a8e:	440b      	add	r3, r1
 8004a90:	009b      	lsls	r3, r3, #2
 8004a92:	441a      	add	r2, r3
 8004a94:	4b0c      	ldr	r3, [pc, #48]	; (8004ac8 <run_classifier_continuous+0x358>)
 8004a96:	6819      	ldr	r1, [r3, #0]
 8004a98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a9a:	009b      	lsls	r3, r3, #2
 8004a9c:	440b      	add	r3, r1
 8004a9e:	6812      	ldr	r2, [r2, #0]
 8004aa0:	601a      	str	r2, [r3, #0]
        for (size_t i = 0; i < (EI_CLASSIFIER_NN_INPUT_FRAME_SIZE - feature_size); i++) {
 8004aa2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	64bb      	str	r3, [r7, #72]	; 0x48
 8004aa8:	e7e6      	b.n	8004a78 <run_classifier_continuous+0x308>
        ei::matrix_t classify_matrix(1, EI_CLASSIFIER_NN_INPUT_FRAME_SIZE);
 8004aaa:	f107 0310 	add.w	r3, r7, #16
 8004aae:	4618      	mov	r0, r3
 8004ab0:	f7fc fb8c 	bl	80011cc <_ZN2ei9ei_matrixD1Ev>
        }
    }
    return ei_impulse_error;
 8004ab4:	f997 4067 	ldrsb.w	r4, [r7, #103]	; 0x67
 8004ab8:	e000      	b.n	8004abc <run_classifier_continuous+0x34c>
            return EI_IMPULSE_DSP_ERROR;
 8004aba:	bf00      	nop
 8004abc:	4623      	mov	r3, r4
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3768      	adds	r7, #104	; 0x68
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004ac8:	2000060c 	.word	0x2000060c

08004acc <run_inference>:
 */
extern "C" EI_IMPULSE_ERROR run_inference(
    ei::matrix_t *fmatrix,
    ei_impulse_result_t *result,
    bool debug = false)
{
 8004acc:	b580      	push	{r7, lr}
 8004ace:	b092      	sub	sp, #72	; 0x48
 8004ad0:	af00      	add	r7, sp, #0
 8004ad2:	60f8      	str	r0, [r7, #12]
 8004ad4:	60b9      	str	r1, [r7, #8]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	71fb      	strb	r3, [r7, #7]
        if (tensor_arena == NULL) {
            ei_printf("Failed to allocate TFLite arena (%d bytes)\n", EI_CLASSIFIER_TFLITE_ARENA_SIZE);
            return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
        }
#else
        TfLiteStatus init_status = trained_model_init(ei_aligned_malloc);
 8004ada:	48a6      	ldr	r0, [pc, #664]	; (8004d74 <run_inference+0x2a8>)
 8004adc:	f011 fc2a 	bl	8016334 <_Z18trained_model_initPFPvjjE>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
        if (init_status != kTfLiteOk) {
 8004ae6:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d008      	beq.n	8004b00 <run_inference+0x34>
            ei_printf("Failed to allocate TFLite arena (error code %d)\n", init_status);
 8004aee:	f897 303b 	ldrb.w	r3, [r7, #59]	; 0x3b
 8004af2:	4619      	mov	r1, r3
 8004af4:	48a0      	ldr	r0, [pc, #640]	; (8004d78 <run_inference+0x2ac>)
 8004af6:	f000 fd47 	bl	8005588 <_Z9ei_printfPKcz>
            return EI_IMPULSE_TFLITE_ARENA_ALLOC_FAILED;
 8004afa:	f06f 0305 	mvn.w	r3, #5
 8004afe:	e135      	b.n	8004d6c <run_inference+0x2a0>
        }
#endif
        uint64_t ctx_start_ms = ei_read_timer_ms();
 8004b00:	f009 fc7a 	bl	800e3f8 <_Z16ei_read_timer_msv>
 8004b04:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
        // Obtain pointers to the model's input and output tensors.
        TfLiteTensor* input = interpreter.input(0);
        TfLiteTensor* output = interpreter.output(0);

#else
        TfLiteTensor* input = trained_model_input(0);
 8004b08:	2000      	movs	r0, #0
 8004b0a:	f011 fe37 	bl	801677c <_Z19trained_model_inputi>
 8004b0e:	62f8      	str	r0, [r7, #44]	; 0x2c
        TfLiteTensor* output = trained_model_output(0);
 8004b10:	2000      	movs	r0, #0
 8004b12:	f011 fe45 	bl	80167a0 <_Z20trained_model_outputi>
 8004b16:	62b8      	str	r0, [r7, #40]	; 0x28
#endif
        // Assert that our quantization parameters match the model
        if (tflite_first_run) {
 8004b18:	4b98      	ldr	r3, [pc, #608]	; (8004d7c <run_inference+0x2b0>)
 8004b1a:	781b      	ldrb	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d052      	beq.n	8004bc6 <run_inference+0xfa>
            assert(input->type == EI_CLASSIFIER_TFLITE_INPUT_DATATYPE);
 8004b20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b09      	cmp	r3, #9
 8004b26:	d006      	beq.n	8004b36 <run_inference+0x6a>
 8004b28:	4b95      	ldr	r3, [pc, #596]	; (8004d80 <run_inference+0x2b4>)
 8004b2a:	4a96      	ldr	r2, [pc, #600]	; (8004d84 <run_inference+0x2b8>)
 8004b2c:	f44f 71d1 	mov.w	r1, #418	; 0x1a2
 8004b30:	4895      	ldr	r0, [pc, #596]	; (8004d88 <run_inference+0x2bc>)
 8004b32:	f016 fa45 	bl	801afc0 <__assert_func>
            if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
                assert(input->params.scale == EI_CLASSIFIER_TFLITE_INPUT_SCALE);
 8004b36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b38:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b3c:	ed9f 7a93 	vldr	s14, [pc, #588]	; 8004d8c <run_inference+0x2c0>
 8004b40:	eef4 7a47 	vcmp.f32	s15, s14
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	d006      	beq.n	8004b58 <run_inference+0x8c>
 8004b4a:	4b91      	ldr	r3, [pc, #580]	; (8004d90 <run_inference+0x2c4>)
 8004b4c:	4a8d      	ldr	r2, [pc, #564]	; (8004d84 <run_inference+0x2b8>)
 8004b4e:	f44f 71d2 	mov.w	r1, #420	; 0x1a4
 8004b52:	488d      	ldr	r0, [pc, #564]	; (8004d88 <run_inference+0x2bc>)
 8004b54:	f016 fa34 	bl	801afc0 <__assert_func>
                assert(input->params.zero_point == EI_CLASSIFIER_TFLITE_INPUT_ZEROPOINT);
 8004b58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b5a:	691b      	ldr	r3, [r3, #16]
 8004b5c:	f113 0f13 	cmn.w	r3, #19
 8004b60:	d006      	beq.n	8004b70 <run_inference+0xa4>
 8004b62:	4b8c      	ldr	r3, [pc, #560]	; (8004d94 <run_inference+0x2c8>)
 8004b64:	4a87      	ldr	r2, [pc, #540]	; (8004d84 <run_inference+0x2b8>)
 8004b66:	f240 11a5 	movw	r1, #421	; 0x1a5
 8004b6a:	4887      	ldr	r0, [pc, #540]	; (8004d88 <run_inference+0x2bc>)
 8004b6c:	f016 fa28 	bl	801afc0 <__assert_func>
            }
            assert(output->type == EI_CLASSIFIER_TFLITE_OUTPUT_DATATYPE);
 8004b70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b72:	781b      	ldrb	r3, [r3, #0]
 8004b74:	2b09      	cmp	r3, #9
 8004b76:	d006      	beq.n	8004b86 <run_inference+0xba>
 8004b78:	4b87      	ldr	r3, [pc, #540]	; (8004d98 <run_inference+0x2cc>)
 8004b7a:	4a82      	ldr	r2, [pc, #520]	; (8004d84 <run_inference+0x2b8>)
 8004b7c:	f240 11a7 	movw	r1, #423	; 0x1a7
 8004b80:	4881      	ldr	r0, [pc, #516]	; (8004d88 <run_inference+0x2bc>)
 8004b82:	f016 fa1d 	bl	801afc0 <__assert_func>
            if (EI_CLASSIFIER_TFLITE_INPUT_QUANTIZED) {
                assert(output->params.scale == EI_CLASSIFIER_TFLITE_OUTPUT_SCALE);
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	edd3 7a03 	vldr	s15, [r3, #12]
 8004b8c:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8004d9c <run_inference+0x2d0>
 8004b90:	eef4 7a47 	vcmp.f32	s15, s14
 8004b94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b98:	d006      	beq.n	8004ba8 <run_inference+0xdc>
 8004b9a:	4b81      	ldr	r3, [pc, #516]	; (8004da0 <run_inference+0x2d4>)
 8004b9c:	4a79      	ldr	r2, [pc, #484]	; (8004d84 <run_inference+0x2b8>)
 8004b9e:	f240 11a9 	movw	r1, #425	; 0x1a9
 8004ba2:	4879      	ldr	r0, [pc, #484]	; (8004d88 <run_inference+0x2bc>)
 8004ba4:	f016 fa0c 	bl	801afc0 <__assert_func>
                assert(output->params.zero_point == EI_CLASSIFIER_TFLITE_OUTPUT_ZEROPOINT);
 8004ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004baa:	691b      	ldr	r3, [r3, #16]
 8004bac:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8004bb0:	d006      	beq.n	8004bc0 <run_inference+0xf4>
 8004bb2:	4b7c      	ldr	r3, [pc, #496]	; (8004da4 <run_inference+0x2d8>)
 8004bb4:	4a73      	ldr	r2, [pc, #460]	; (8004d84 <run_inference+0x2b8>)
 8004bb6:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8004bba:	4873      	ldr	r0, [pc, #460]	; (8004d88 <run_inference+0x2bc>)
 8004bbc:	f016 fa00 	bl	801afc0 <__assert_func>
            }
            tflite_first_run = false;
 8004bc0:	4b6e      	ldr	r3, [pc, #440]	; (8004d7c <run_inference+0x2b0>)
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	701a      	strb	r2, [r3, #0]
        // =====
        // Initialization code done
        // =====

        // Place our calculated x value in the model's input tensor
        bool int8_input = input->type == TfLiteType::kTfLiteInt8;
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	781b      	ldrb	r3, [r3, #0]
 8004bca:	2b09      	cmp	r3, #9
 8004bcc:	bf0c      	ite	eq
 8004bce:	2301      	moveq	r3, #1
 8004bd0:	2300      	movne	r3, #0
 8004bd2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8004bd6:	2300      	movs	r3, #0
 8004bd8:	647b      	str	r3, [r7, #68]	; 0x44
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	68fa      	ldr	r2, [r7, #12]
 8004be0:	6892      	ldr	r2, [r2, #8]
 8004be2:	fb02 f303 	mul.w	r3, r2, r3
 8004be6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004be8:	429a      	cmp	r2, r3
 8004bea:	d239      	bcs.n	8004c60 <run_inference+0x194>
            // Quantize the input if it is int8
            if (int8_input) {
 8004bec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d025      	beq.n	8004c40 <run_inference+0x174>
                input->data.int8[ix] = static_cast<int8_t>(round(fmatrix->buffer[ix] / input->params.scale) + input->params.zero_point);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	4413      	add	r3, r2
 8004bfe:	ed93 7a00 	vldr	s14, [r3]
 8004c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c04:	edd3 7a03 	vldr	s15, [r3, #12]
 8004c08:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8004c0c:	eeb0 0a66 	vmov.f32	s0, s13
 8004c10:	f7fc fa58 	bl	80010c4 <_ZSt5roundf>
 8004c14:	eeb0 7a40 	vmov.f32	s14, s0
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	691b      	ldr	r3, [r3, #16]
 8004c1c:	ee07 3a90 	vmov	s15, r3
 8004c20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004c24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8004c28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2a:	685a      	ldr	r2, [r3, #4]
 8004c2c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c2e:	4413      	add	r3, r2
 8004c30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004c34:	edc7 7a00 	vstr	s15, [r7]
 8004c38:	683a      	ldr	r2, [r7, #0]
 8004c3a:	b252      	sxtb	r2, r2
 8004c3c:	701a      	strb	r2, [r3, #0]
 8004c3e:	e00b      	b.n	8004c58 <run_inference+0x18c>
            } else {
                input->data.f[ix] = fmatrix->buffer[ix];
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681a      	ldr	r2, [r3, #0]
 8004c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	441a      	add	r2, r3
 8004c4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c4c:	6859      	ldr	r1, [r3, #4]
 8004c4e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c50:	009b      	lsls	r3, r3, #2
 8004c52:	440b      	add	r3, r1
 8004c54:	6812      	ldr	r2, [r2, #0]
 8004c56:	601a      	str	r2, [r3, #0]
        for (size_t ix = 0; ix < fmatrix->rows * fmatrix->cols; ix++) {
 8004c58:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004c5a:	3301      	adds	r3, #1
 8004c5c:	647b      	str	r3, [r7, #68]	; 0x44
 8004c5e:	e7bc      	b.n	8004bda <run_inference+0x10e>
            error_reporter->Report("Invoke failed (%d)\n", invoke_status);
            ei_aligned_free(tensor_arena);
            return EI_IMPULSE_TFLITE_ERROR;
        }
#else
        trained_model_invoke();
 8004c60:	f011 fdb0 	bl	80167c4 <_Z20trained_model_invokev>
#endif

        uint64_t ctx_end_ms = ei_read_timer_ms();
 8004c64:	f009 fbc8 	bl	800e3f8 <_Z16ei_read_timer_msv>
 8004c68:	e9c7 0106 	strd	r0, r1, [r7, #24]

        result->timing.classification = ctx_end_ms - ctx_start_ms;
 8004c6c:	69ba      	ldr	r2, [r7, #24]
 8004c6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c70:	1ad3      	subs	r3, r2, r3
 8004c72:	461a      	mov	r2, r3
 8004c74:	68bb      	ldr	r3, [r7, #8]
 8004c76:	63da      	str	r2, [r3, #60]	; 0x3c

        // Read the predicted y value from the model's output tensor
        if (debug) {
 8004c78:	79fb      	ldrb	r3, [r7, #7]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <run_inference+0x1be>
            ei_printf("Predictions (time: %d ms.):\n", result->timing.classification);
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c82:	4619      	mov	r1, r3
 8004c84:	4848      	ldr	r0, [pc, #288]	; (8004da8 <run_inference+0x2dc>)
 8004c86:	f000 fc7f 	bl	8005588 <_Z9ei_printfPKcz>
        }
        bool int8_output = output->type == TfLiteType::kTfLiteInt8;
 8004c8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c8c:	781b      	ldrb	r3, [r3, #0]
 8004c8e:	2b09      	cmp	r3, #9
 8004c90:	bf0c      	ite	eq
 8004c92:	2301      	moveq	r3, #1
 8004c94:	2300      	movne	r3, #0
 8004c96:	75fb      	strb	r3, [r7, #23]
        for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004c98:	2300      	movs	r3, #0
 8004c9a:	643b      	str	r3, [r7, #64]	; 0x40
 8004c9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c9e:	2b05      	cmp	r3, #5
 8004ca0:	d844      	bhi.n	8004d2c <run_inference+0x260>
            float value;
            // Dequantize the output if it is int8
            if (int8_output) {
 8004ca2:	7dfb      	ldrb	r3, [r7, #23]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d015      	beq.n	8004cd4 <run_inference+0x208>
                value = static_cast<float>(output->data.int8[ix] - output->params.zero_point) * output->params.scale;
 8004ca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004caa:	685a      	ldr	r2, [r3, #4]
 8004cac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cae:	4413      	add	r3, r2
 8004cb0:	f993 3000 	ldrsb.w	r3, [r3]
 8004cb4:	461a      	mov	r2, r3
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	691b      	ldr	r3, [r3, #16]
 8004cba:	1ad3      	subs	r3, r2, r3
 8004cbc:	ee07 3a90 	vmov	s15, r3
 8004cc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004cc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cc6:	edd3 7a03 	vldr	s15, [r3, #12]
 8004cca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004cce:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
 8004cd2:	e006      	b.n	8004ce2 <run_inference+0x216>
            } else {
                value = output->data.f[ix];
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	685a      	ldr	r2, [r3, #4]
 8004cd8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	4413      	add	r3, r2
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
            }
            if (debug) {
 8004ce2:	79fb      	ldrb	r3, [r7, #7]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d00e      	beq.n	8004d06 <run_inference+0x23a>
                ei_printf("%s:\t", ei_classifier_inferencing_categories[ix]);
 8004ce8:	4a30      	ldr	r2, [pc, #192]	; (8004dac <run_inference+0x2e0>)
 8004cea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004cec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cf0:	4619      	mov	r1, r3
 8004cf2:	482f      	ldr	r0, [pc, #188]	; (8004db0 <run_inference+0x2e4>)
 8004cf4:	f000 fc48 	bl	8005588 <_Z9ei_printfPKcz>
                ei_printf_float(value);
 8004cf8:	ed97 0a0f 	vldr	s0, [r7, #60]	; 0x3c
 8004cfc:	f009 fb88 	bl	800e410 <_Z15ei_printf_floatf>
                ei_printf("\n");
 8004d00:	482c      	ldr	r0, [pc, #176]	; (8004db4 <run_inference+0x2e8>)
 8004d02:	f000 fc41 	bl	8005588 <_Z9ei_printfPKcz>
            }
            result->classification[ix].label = ei_classifier_inferencing_categories[ix];
 8004d06:	4a29      	ldr	r2, [pc, #164]	; (8004dac <run_inference+0x2e0>)
 8004d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d0a:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004d12:	f843 1032 	str.w	r1, [r3, r2, lsl #3]
            result->classification[ix].value = value;
 8004d16:	68ba      	ldr	r2, [r7, #8]
 8004d18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	3304      	adds	r3, #4
 8004d20:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004d22:	601a      	str	r2, [r3, #0]
        for (uint32_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++) {
 8004d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004d26:	3301      	adds	r3, #1
 8004d28:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2a:	e7b7      	b.n	8004c9c <run_inference+0x1d0>
        }

#if (EI_CLASSIFIER_COMPILED != 1)
        ei_aligned_free(tensor_arena);
#else
        trained_model_reset(ei_aligned_free);
 8004d2c:	4822      	ldr	r0, [pc, #136]	; (8004db8 <run_inference+0x2ec>)
 8004d2e:	f011 fd7f 	bl	8016830 <_Z19trained_model_resetPFvPvE>
#endif

        if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004d32:	f009 fb59 	bl	800e3e8 <_Z29ei_run_impulse_check_canceledv>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f113 0f02 	cmn.w	r3, #2
 8004d3c:	bf0c      	ite	eq
 8004d3e:	2301      	moveq	r3, #1
 8004d40:	2300      	movne	r3, #0
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d002      	beq.n	8004d4e <run_inference+0x282>
            return EI_IMPULSE_CANCELED;
 8004d48:	f06f 0301 	mvn.w	r3, #1
 8004d4c:	e00e      	b.n	8004d6c <run_inference+0x2a0>
        result->anomaly = anomaly;
    }

#endif

    if (ei_run_impulse_check_canceled() == EI_IMPULSE_CANCELED) {
 8004d4e:	f009 fb4b 	bl	800e3e8 <_Z29ei_run_impulse_check_canceledv>
 8004d52:	4603      	mov	r3, r0
 8004d54:	f113 0f02 	cmn.w	r3, #2
 8004d58:	bf0c      	ite	eq
 8004d5a:	2301      	moveq	r3, #1
 8004d5c:	2300      	movne	r3, #0
 8004d5e:	b2db      	uxtb	r3, r3
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <run_inference+0x29e>
        return EI_IMPULSE_CANCELED;
 8004d64:	f06f 0301 	mvn.w	r3, #1
 8004d68:	e000      	b.n	8004d6c <run_inference+0x2a0>
    }

    return EI_IMPULSE_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3748      	adds	r7, #72	; 0x48
 8004d70:	46bd      	mov	sp, r7
 8004d72:	bd80      	pop	{r7, pc}
 8004d74:	08004601 	.word	0x08004601
 8004d78:	0801db68 	.word	0x0801db68
 8004d7c:	20000054 	.word	0x20000054
 8004d80:	0801db9c 	.word	0x0801db9c
 8004d84:	0801dbd0 	.word	0x0801dbd0
 8004d88:	0801dc28 	.word	0x0801dc28
 8004d8c:	3d2f191c 	.word	0x3d2f191c
 8004d90:	0801dc80 	.word	0x0801dc80
 8004d94:	0801dcb8 	.word	0x0801dcb8
 8004d98:	0801dcfc 	.word	0x0801dcfc
 8004d9c:	3b800000 	.word	0x3b800000
 8004da0:	0801dd34 	.word	0x0801dd34
 8004da4:	0801dd70 	.word	0x0801dd70
 8004da8:	0801ddb4 	.word	0x0801ddb4
 8004dac:	20000000 	.word	0x20000000
 8004db0:	0801ddd4 	.word	0x0801ddd4
 8004db4:	0801db48 	.word	0x0801db48
 8004db8:	08004685 	.word	0x08004685

08004dbc <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv>:
 *
 * @param      matrix      Source and destination matrix
 * @param      config_ptr  ei_dsp_config_mfcc_t struct pointer
 */
static void calc_cepstral_mean_and_var_normalization(ei_matrix *matrix, void *config_ptr)
{
 8004dbc:	b580      	push	{r7, lr}
 8004dbe:	b084      	sub	sp, #16
 8004dc0:	af00      	add	r7, sp, #0
 8004dc2:	6078      	str	r0, [r7, #4]
 8004dc4:	6039      	str	r1, [r7, #0]
    ei_dsp_config_mfcc_t *config = (ei_dsp_config_mfcc_t *)config_ptr;
 8004dc6:	683b      	ldr	r3, [r7, #0]
 8004dc8:	60fb      	str	r3, [r7, #12]

    /* Modify rows and colums ration for matrix normalization */
    matrix->rows = EI_CLASSIFIER_NN_INPUT_FRAME_SIZE / config->num_cepstral;
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	689b      	ldr	r3, [r3, #8]
 8004dce:	f240 228a 	movw	r2, #650	; 0x28a
 8004dd2:	fb92 f3f3 	sdiv	r3, r2, r3
 8004dd6:	461a      	mov	r2, r3
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	605a      	str	r2, [r3, #4]
    matrix->cols = config->num_cepstral;
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	461a      	mov	r2, r3
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	609a      	str	r2, [r3, #8]

    // cepstral mean and variance normalization
    int ret = speechpy::processing::cmvnw(matrix, config->win_size, true);
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	69db      	ldr	r3, [r3, #28]
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	2201      	movs	r2, #1
 8004dee:	4619      	mov	r1, r3
 8004df0:	6878      	ldr	r0, [r7, #4]
 8004df2:	f7fe fa39 	bl	8003268 <_ZN2ei8speechpy10processingL5cmvnwEPNS_9ei_matrixEtb>
 8004df6:	60b8      	str	r0, [r7, #8]
    if (ret != EIDSP_OK) {
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d00f      	beq.n	8004e1e <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x62>
        ei_printf("ERR: cmvnw failed (%d)\n", ret);
 8004dfe:	68b9      	ldr	r1, [r7, #8]
 8004e00:	480c      	ldr	r0, [pc, #48]	; (8004e34 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x78>)
 8004e02:	f000 fbc1 	bl	8005588 <_Z9ei_printfPKcz>
        EIDSP_ERR(ret);
 8004e06:	4a0c      	ldr	r2, [pc, #48]	; (8004e38 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x7c>)
 8004e08:	68b9      	ldr	r1, [r7, #8]
 8004e0a:	480c      	ldr	r0, [pc, #48]	; (8004e3c <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x80>)
 8004e0c:	f016 fdbc 	bl	801b988 <iprintf>
 8004e10:	4b0b      	ldr	r3, [pc, #44]	; (8004e40 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x84>)
 8004e12:	4a0c      	ldr	r2, [pc, #48]	; (8004e44 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x88>)
 8004e14:	f240 21de 	movw	r1, #734	; 0x2de
 8004e18:	480b      	ldr	r0, [pc, #44]	; (8004e48 <_ZN12_GLOBAL__N_1L40calc_cepstral_mean_and_var_normalizationEPN2ei9ei_matrixEPv+0x8c>)
 8004e1a:	f016 f8d1 	bl	801afc0 <__assert_func>
    }

    /* Reset rows and columns ratio */
    matrix->rows = 1;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2201      	movs	r2, #1
 8004e22:	605a      	str	r2, [r3, #4]
    matrix->cols = EI_CLASSIFIER_NN_INPUT_FRAME_SIZE;
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	f240 228a 	movw	r2, #650	; 0x28a
 8004e2a:	609a      	str	r2, [r3, #8]
}
 8004e2c:	bf00      	nop
 8004e2e:	3710      	adds	r7, #16
 8004e30:	46bd      	mov	sp, r7
 8004e32:	bd80      	pop	{r7, pc}
 8004e34:	0801d8d0 	.word	0x0801d8d0
 8004e38:	0801c900 	.word	0x0801c900
 8004e3c:	0801c79c 	.word	0x0801c79c
 8004e40:	0801c7ac 	.word	0x0801c7ac
 8004e44:	0801ddf0 	.word	0x0801ddf0
 8004e48:	0801dc28 	.word	0x0801dc28

08004e4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004e4c:	b590      	push	{r4, r7, lr}
 8004e4e:	b09d      	sub	sp, #116	; 0x74
 8004e50:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
	HAL_StatusTypeDef hal_res;
	int print_results = -(EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW);
 8004e52:	f06f 0303 	mvn.w	r3, #3
 8004e56:	66fb      	str	r3, [r7, #108]	; 0x6c
	uint32_t timestamp = 0;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	667b      	str	r3, [r7, #100]	; 0x64
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004e5c:	f001 fe04 	bl	8006a68 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004e60:	f000 f908 	bl	8005074 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004e64:	f000 fa50 	bl	8005308 <_ZL12MX_GPIO_Initv>
  MX_DMA_Init();
 8004e68:	f000 fa2e 	bl	80052c8 <_ZL11MX_DMA_Initv>
  MX_USART2_UART_Init();
 8004e6c:	f000 f9fe 	bl	800526c <_ZL19MX_USART2_UART_Initv>
  MX_CRC_Init();
 8004e70:	f000 f9a4 	bl	80051bc <_ZL11MX_CRC_Initv>
  MX_SAI1_Init();
 8004e74:	f000 f9ba 	bl	80051ec <_ZL12MX_SAI1_Initv>
  /* USER CODE BEGIN 2 */

  // Say some stuff
  ei_printf("Inferencing settings:\r\n");
 8004e78:	486b      	ldr	r0, [pc, #428]	; (8005028 <main+0x1dc>)
 8004e7a:	f000 fb85 	bl	8005588 <_Z9ei_printfPKcz>
  ei_printf("\tInterval: %.2f ms.\r\n", (float)EI_CLASSIFIER_INTERVAL_MS);
 8004e7e:	f04f 0200 	mov.w	r2, #0
 8004e82:	4b6a      	ldr	r3, [pc, #424]	; (800502c <main+0x1e0>)
 8004e84:	486a      	ldr	r0, [pc, #424]	; (8005030 <main+0x1e4>)
 8004e86:	f000 fb7f 	bl	8005588 <_Z9ei_printfPKcz>
  ei_printf("\tFrame size: %d\r\n", EI_CLASSIFIER_DSP_INPUT_FRAME_SIZE);
 8004e8a:	f44f 517a 	mov.w	r1, #16000	; 0x3e80
 8004e8e:	4869      	ldr	r0, [pc, #420]	; (8005034 <main+0x1e8>)
 8004e90:	f000 fb7a 	bl	8005588 <_Z9ei_printfPKcz>
  ei_printf("\tSample length: %d ms.\r\n", EI_CLASSIFIER_RAW_SAMPLE_COUNT / 16);
 8004e94:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004e98:	4867      	ldr	r0, [pc, #412]	; (8005038 <main+0x1ec>)
 8004e9a:	f000 fb75 	bl	8005588 <_Z9ei_printfPKcz>
  ei_printf("\tNo. of classes: %d\r\n", sizeof(ei_classifier_inferencing_categories) / sizeof(ei_classifier_inferencing_categories[0]));
 8004e9e:	2106      	movs	r1, #6
 8004ea0:	4866      	ldr	r0, [pc, #408]	; (800503c <main+0x1f0>)
 8004ea2:	f000 fb71 	bl	8005588 <_Z9ei_printfPKcz>

  // Create double buffer
  inference.buffers[0] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 8004ea6:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004eaa:	f016 f977 	bl	801b19c <malloc>
 8004eae:	4603      	mov	r3, r0
 8004eb0:	461a      	mov	r2, r3
 8004eb2:	4b63      	ldr	r3, [pc, #396]	; (8005040 <main+0x1f4>)
 8004eb4:	601a      	str	r2, [r3, #0]
  if(inference.buffers[0] == NULL)
 8004eb6:	4b62      	ldr	r3, [pc, #392]	; (8005040 <main+0x1f4>)
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d102      	bne.n	8004ec4 <main+0x78>
  {
    ei_printf("ERROR: Could not create buffer 1. Likely ran out of heap memory.\r\n");
 8004ebe:	4861      	ldr	r0, [pc, #388]	; (8005044 <main+0x1f8>)
 8004ec0:	f000 fb62 	bl	8005588 <_Z9ei_printfPKcz>
  }
  inference.buffers[1] = (int16_t *)malloc(EI_CLASSIFIER_SLICE_SIZE * sizeof(int16_t));
 8004ec4:	f44f 50fa 	mov.w	r0, #8000	; 0x1f40
 8004ec8:	f016 f968 	bl	801b19c <malloc>
 8004ecc:	4603      	mov	r3, r0
 8004ece:	461a      	mov	r2, r3
 8004ed0:	4b5b      	ldr	r3, [pc, #364]	; (8005040 <main+0x1f4>)
 8004ed2:	605a      	str	r2, [r3, #4]
  if(inference.buffers[1] == NULL)
 8004ed4:	4b5a      	ldr	r3, [pc, #360]	; (8005040 <main+0x1f4>)
 8004ed6:	685b      	ldr	r3, [r3, #4]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d102      	bne.n	8004ee2 <main+0x96>
  {
    ei_printf("ERROR: Could not create buffer 2. Likely ran out of heap memory.\r\n");
 8004edc:	485a      	ldr	r0, [pc, #360]	; (8005048 <main+0x1fc>)
 8004ede:	f000 fb53 	bl	8005588 <_Z9ei_printfPKcz>
  }

  // Set inference parameters
  inference.buf_select = 0;
 8004ee2:	4b57      	ldr	r3, [pc, #348]	; (8005040 <main+0x1f4>)
 8004ee4:	2200      	movs	r2, #0
 8004ee6:	721a      	strb	r2, [r3, #8]
  inference.buf_count  = 0;
 8004ee8:	4b55      	ldr	r3, [pc, #340]	; (8005040 <main+0x1f4>)
 8004eea:	2200      	movs	r2, #0
 8004eec:	60da      	str	r2, [r3, #12]
  inference.n_samples  = EI_CLASSIFIER_SLICE_SIZE;
 8004eee:	4b54      	ldr	r3, [pc, #336]	; (8005040 <main+0x1f4>)
 8004ef0:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8004ef4:	611a      	str	r2, [r3, #16]
  inference.buf_ready  = 0;
 8004ef6:	4b52      	ldr	r3, [pc, #328]	; (8005040 <main+0x1f4>)
 8004ef8:	2200      	movs	r2, #0
 8004efa:	725a      	strb	r2, [r3, #9]

  // Start receiving I2S audio data
  hal_res =  HAL_SAI_Receive_DMA(&hsai_BlockB1, (uint8_t *)i2s_buf, I2S_BUF_LEN);
 8004efc:	f44f 52c8 	mov.w	r2, #6400	; 0x1900
 8004f00:	4952      	ldr	r1, [pc, #328]	; (800504c <main+0x200>)
 8004f02:	4853      	ldr	r0, [pc, #332]	; (8005050 <main+0x204>)
 8004f04:	f004 f98a 	bl	800921c <HAL_SAI_Receive_DMA>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
  if (hal_res != HAL_OK)
 8004f0e:	f897 3063 	ldrb.w	r3, [r7, #99]	; 0x63
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <main+0xd0>
  {
    ei_printf("ERROR: Could not initialize I2S microphone.\r\n");
 8004f16:	484f      	ldr	r0, [pc, #316]	; (8005054 <main+0x208>)
 8004f18:	f000 fb36 	bl	8005588 <_Z9ei_printfPKcz>
  }

  // Start doing inference
  record_ready = true;
 8004f1c:	4b4e      	ldr	r3, [pc, #312]	; (8005058 <main+0x20c>)
 8004f1e:	2201      	movs	r2, #1
 8004f20:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  // Wait until buffer is full
	  bool m = ei_microphone_inference_record();
 8004f22:	f000 fa61 	bl	80053e8 <_Z30ei_microphone_inference_recordv>
 8004f26:	4603      	mov	r3, r0
 8004f28:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
	  if (!m)
 8004f2c:	f897 3062 	ldrb.w	r3, [r7, #98]	; 0x62
 8004f30:	f083 0301 	eor.w	r3, r3, #1
 8004f34:	b2db      	uxtb	r3, r3
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <main+0xf6>
	  {
		ei_printf("ERROR: Audio buffer overrun\r\n");
 8004f3a:	4848      	ldr	r0, [pc, #288]	; (800505c <main+0x210>)
 8004f3c:	f000 fb24 	bl	8005588 <_Z9ei_printfPKcz>
		break;
 8004f40:	e06a      	b.n	8005018 <main+0x1cc>
	  }

	  // Do classification (i.e. the inference part)
	  signal_t signal;
 8004f42:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f46:	4618      	mov	r0, r3
 8004f48:	f7ff f937 	bl	80041ba <_ZN2ei11ei_signal_tC1Ev>
	  signal.total_length = EI_CLASSIFIER_SLICE_SIZE;
 8004f4c:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004f50:	65bb      	str	r3, [r7, #88]	; 0x58
	  signal.get_data = &get_audio_signal_data;
 8004f52:	4b43      	ldr	r3, [pc, #268]	; (8005060 <main+0x214>)
 8004f54:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004f56:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 8004f5a:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f5e:	4611      	mov	r1, r2
 8004f60:	4618      	mov	r0, r3
 8004f62:	f000 fc57 	bl	8005814 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>
	  ei_impulse_result_t result = { 0 };
 8004f66:	1d3b      	adds	r3, r7, #4
 8004f68:	2244      	movs	r2, #68	; 0x44
 8004f6a:	2100      	movs	r1, #0
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f016 f95b 	bl	801b228 <memset>
	  EI_IMPULSE_ERROR r = run_classifier_continuous(&signal, &result, debug_nn);
 8004f72:	4b3c      	ldr	r3, [pc, #240]	; (8005064 <main+0x218>)
 8004f74:	781a      	ldrb	r2, [r3, #0]
 8004f76:	1d39      	adds	r1, r7, #4
 8004f78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	f7ff fbf7 	bl	8004770 <run_classifier_continuous>
 8004f82:	4603      	mov	r3, r0
 8004f84:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
	  if (r != EI_IMPULSE_OK)
 8004f88:	f997 3061 	ldrsb.w	r3, [r7, #97]	; 0x61
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <main+0x154>
	  {
		  ei_printf("ERROR: Failed to run classifier (%d)\r\n", r);
 8004f90:	f997 3061 	ldrsb.w	r3, [r7, #97]	; 0x61
 8004f94:	4619      	mov	r1, r3
 8004f96:	4834      	ldr	r0, [pc, #208]	; (8005068 <main+0x21c>)
 8004f98:	f000 faf6 	bl	8005588 <_Z9ei_printfPKcz>
 8004f9c:	2400      	movs	r4, #0
		  break;
 8004f9e:	e033      	b.n	8005008 <main+0x1bc>
	  }

	  // Print output predictions (once every 4 predictions)
	  if(++print_results >= (EI_CLASSIFIER_SLICES_PER_MODEL_WINDOW >> 1))
 8004fa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fa6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004fa8:	2b01      	cmp	r3, #1
 8004faa:	bfcc      	ite	gt
 8004fac:	2301      	movgt	r3, #1
 8004fae:	2300      	movle	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d027      	beq.n	8005006 <main+0x1ba>
	  {
		// Comment this section out if you don't want to see the raw scores
		ei_printf("Predictions (DSP: %d ms, NN: %d ms)\r\n", result.timing.dsp, result.timing.classification);
 8004fb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004fb8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004fba:	4619      	mov	r1, r3
 8004fbc:	482b      	ldr	r0, [pc, #172]	; (800506c <main+0x220>)
 8004fbe:	f000 fae3 	bl	8005588 <_Z9ei_printfPKcz>
		for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fc8:	2b05      	cmp	r3, #5
 8004fca:	d81a      	bhi.n	8005002 <main+0x1b6>
		{
			ei_printf("    %s: %.5f\r\n", result.classification[ix].label, result.classification[ix].value);
 8004fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fce:	00db      	lsls	r3, r3, #3
 8004fd0:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004fd4:	4413      	add	r3, r2
 8004fd6:	f853 4c6c 	ldr.w	r4, [r3, #-108]
 8004fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004fdc:	00db      	lsls	r3, r3, #3
 8004fde:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8004fe2:	4413      	add	r3, r2
 8004fe4:	3b68      	subs	r3, #104	; 0x68
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fb facd 	bl	8000588 <__aeabi_f2d>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	460b      	mov	r3, r1
 8004ff2:	4621      	mov	r1, r4
 8004ff4:	481e      	ldr	r0, [pc, #120]	; (8005070 <main+0x224>)
 8004ff6:	f000 fac7 	bl	8005588 <_Z9ei_printfPKcz>
		for (size_t ix = 0; ix < EI_CLASSIFIER_LABEL_COUNT; ix++)
 8004ffa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ffc:	3301      	adds	r3, #1
 8004ffe:	66bb      	str	r3, [r7, #104]	; 0x68
 8005000:	e7e1      	b.n	8004fc6 <main+0x17a>
		}
		print_results = 0;
 8005002:	2300      	movs	r3, #0
 8005004:	66fb      	str	r3, [r7, #108]	; 0x6c
	  signal_t signal;
 8005006:	2401      	movs	r4, #1
 8005008:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800500c:	4618      	mov	r0, r3
 800500e:	f7ff f8e1 	bl	80041d4 <_ZN2ei11ei_signal_tD1Ev>
 8005012:	2c01      	cmp	r4, #1
 8005014:	d100      	bne.n	8005018 <main+0x1cc>
	  }

    /* USER CODE BEGIN 3 */
  }
 8005016:	e784      	b.n	8004f22 <main+0xd6>

  ei_microphone_inference_end();
 8005018:	f000 fa10 	bl	800543c <_Z27ei_microphone_inference_endv>
  /* USER CODE END 3 */
}
 800501c:	2300      	movs	r3, #0
 800501e:	4618      	mov	r0, r3
 8005020:	3774      	adds	r7, #116	; 0x74
 8005022:	46bd      	mov	sp, r7
 8005024:	bd90      	pop	{r4, r7, pc}
 8005026:	bf00      	nop
 8005028:	0801de6c 	.word	0x0801de6c
 800502c:	3fb00000 	.word	0x3fb00000
 8005030:	0801de84 	.word	0x0801de84
 8005034:	0801de9c 	.word	0x0801de9c
 8005038:	0801deb0 	.word	0x0801deb0
 800503c:	0801decc 	.word	0x0801decc
 8005040:	20006b58 	.word	0x20006b58
 8005044:	0801dee4 	.word	0x0801dee4
 8005048:	0801df28 	.word	0x0801df28
 800504c:	20000758 	.word	0x20000758
 8005050:	20000628 	.word	0x20000628
 8005054:	0801df6c 	.word	0x0801df6c
 8005058:	20006b6c 	.word	0x20006b6c
 800505c:	0801df9c 	.word	0x0801df9c
 8005060:	080054fd 	.word	0x080054fd
 8005064:	20000754 	.word	0x20000754
 8005068:	0801dfbc 	.word	0x0801dfbc
 800506c:	0801dfe4 	.word	0x0801dfe4
 8005070:	0801e00c 	.word	0x0801e00c

08005074 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b0ac      	sub	sp, #176	; 0xb0
 8005078:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800507a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800507e:	2234      	movs	r2, #52	; 0x34
 8005080:	2100      	movs	r1, #0
 8005082:	4618      	mov	r0, r3
 8005084:	f016 f8d0 	bl	801b228 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005088:	f107 0368 	add.w	r3, r7, #104	; 0x68
 800508c:	2200      	movs	r2, #0
 800508e:	601a      	str	r2, [r3, #0]
 8005090:	605a      	str	r2, [r3, #4]
 8005092:	609a      	str	r2, [r3, #8]
 8005094:	60da      	str	r2, [r3, #12]
 8005096:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005098:	f107 030c 	add.w	r3, r7, #12
 800509c:	225c      	movs	r2, #92	; 0x5c
 800509e:	2100      	movs	r1, #0
 80050a0:	4618      	mov	r0, r3
 80050a2:	f016 f8c1 	bl	801b228 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80050a6:	2300      	movs	r3, #0
 80050a8:	60bb      	str	r3, [r7, #8]
 80050aa:	4b42      	ldr	r3, [pc, #264]	; (80051b4 <_Z18SystemClock_Configv+0x140>)
 80050ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ae:	4a41      	ldr	r2, [pc, #260]	; (80051b4 <_Z18SystemClock_Configv+0x140>)
 80050b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050b4:	6413      	str	r3, [r2, #64]	; 0x40
 80050b6:	4b3f      	ldr	r3, [pc, #252]	; (80051b4 <_Z18SystemClock_Configv+0x140>)
 80050b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80050c2:	2300      	movs	r3, #0
 80050c4:	607b      	str	r3, [r7, #4]
 80050c6:	4b3c      	ldr	r3, [pc, #240]	; (80051b8 <_Z18SystemClock_Configv+0x144>)
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80050ce:	4a3a      	ldr	r2, [pc, #232]	; (80051b8 <_Z18SystemClock_Configv+0x144>)
 80050d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050d4:	6013      	str	r3, [r2, #0]
 80050d6:	4b38      	ldr	r3, [pc, #224]	; (80051b8 <_Z18SystemClock_Configv+0x144>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80050de:	607b      	str	r3, [r7, #4]
 80050e0:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80050e2:	2302      	movs	r3, #2
 80050e4:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80050e6:	2301      	movs	r3, #1
 80050e8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80050ec:	2310      	movs	r3, #16
 80050ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80050f2:	2302      	movs	r3, #2
 80050f4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80050f8:	2300      	movs	r3, #0
 80050fa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_OscInitStruct.PLL.PLLM = 8;
 80050fe:	2308      	movs	r3, #8
 8005100:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.PLL.PLLN = 80;
 8005104:	2350      	movs	r3, #80	; 0x50
 8005106:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800510a:	2302      	movs	r3, #2
 800510c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8005110:	2302      	movs	r3, #2
 8005112:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.PLL.PLLR = 2;
 8005116:	2302      	movs	r3, #2
 8005118:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800511c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8005120:	4618      	mov	r0, r3
 8005122:	f003 fc0d 	bl	8008940 <HAL_RCC_OscConfig>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	bf14      	ite	ne
 800512c:	2301      	movne	r3, #1
 800512e:	2300      	moveq	r3, #0
 8005130:	b2db      	uxtb	r3, r3
 8005132:	2b00      	cmp	r3, #0
 8005134:	d001      	beq.n	800513a <_Z18SystemClock_Configv+0xc6>
  {
    Error_Handler();
 8005136:	f000 fa61 	bl	80055fc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800513a:	230f      	movs	r3, #15
 800513c:	66bb      	str	r3, [r7, #104]	; 0x68
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800513e:	2302      	movs	r3, #2
 8005140:	66fb      	str	r3, [r7, #108]	; 0x6c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005142:	2300      	movs	r3, #0
 8005144:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8005146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800514a:	677b      	str	r3, [r7, #116]	; 0x74
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800514c:	2300      	movs	r3, #0
 800514e:	67bb      	str	r3, [r7, #120]	; 0x78

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8005150:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8005154:	2102      	movs	r1, #2
 8005156:	4618      	mov	r0, r3
 8005158:	f002 fbb4 	bl	80078c4 <HAL_RCC_ClockConfig>
 800515c:	4603      	mov	r3, r0
 800515e:	2b00      	cmp	r3, #0
 8005160:	bf14      	ite	ne
 8005162:	2301      	movne	r3, #1
 8005164:	2300      	moveq	r3, #0
 8005166:	b2db      	uxtb	r3, r3
 8005168:	2b00      	cmp	r3, #0
 800516a:	d001      	beq.n	8005170 <_Z18SystemClock_Configv+0xfc>
  {
    Error_Handler();
 800516c:	f000 fa46 	bl	80055fc <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8005170:	2304      	movs	r3, #4
 8005172:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLSAI.PLLSAIM = 8;
 8005174:	2308      	movs	r3, #8
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8005178:	2332      	movs	r3, #50	; 0x32
 800517a:	62bb      	str	r3, [r7, #40]	; 0x28
  PeriphClkInitStruct.PLLSAI.PLLSAIQ = 2;
 800517c:	2302      	movs	r3, #2
 800517e:	633b      	str	r3, [r7, #48]	; 0x30
  PeriphClkInitStruct.PLLSAI.PLLSAIP = RCC_PLLSAIP_DIV2;
 8005180:	2302      	movs	r3, #2
 8005182:	62fb      	str	r3, [r7, #44]	; 0x2c
  PeriphClkInitStruct.PLLSAIDivQ = 1;
 8005184:	2301      	movs	r3, #1
 8005186:	63bb      	str	r3, [r7, #56]	; 0x38
  PeriphClkInitStruct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI;
 8005188:	2300      	movs	r3, #0
 800518a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800518c:	f107 030c 	add.w	r3, r7, #12
 8005190:	4618      	mov	r0, r3
 8005192:	f002 fcb1 	bl	8007af8 <HAL_RCCEx_PeriphCLKConfig>
 8005196:	4603      	mov	r3, r0
 8005198:	2b00      	cmp	r3, #0
 800519a:	bf14      	ite	ne
 800519c:	2301      	movne	r3, #1
 800519e:	2300      	moveq	r3, #0
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d001      	beq.n	80051aa <_Z18SystemClock_Configv+0x136>
  {
    Error_Handler();
 80051a6:	f000 fa29 	bl	80055fc <Error_Handler>
  }
}
 80051aa:	bf00      	nop
 80051ac:	37b0      	adds	r7, #176	; 0xb0
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	40023800 	.word	0x40023800
 80051b8:	40007000 	.word	0x40007000

080051bc <_ZL11MX_CRC_Initv>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80051bc:	b580      	push	{r7, lr}
 80051be:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <_ZL11MX_CRC_Initv+0x28>)
 80051c2:	4a09      	ldr	r2, [pc, #36]	; (80051e8 <_ZL11MX_CRC_Initv+0x2c>)
 80051c4:	601a      	str	r2, [r3, #0]
//  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
//  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
//  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
//  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
//  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80051c6:	4807      	ldr	r0, [pc, #28]	; (80051e4 <_ZL11MX_CRC_Initv+0x28>)
 80051c8:	f001 fdd1 	bl	8006d6e <HAL_CRC_Init>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	bf14      	ite	ne
 80051d2:	2301      	movne	r3, #1
 80051d4:	2300      	moveq	r3, #0
 80051d6:	b2db      	uxtb	r3, r3
 80051d8:	2b00      	cmp	r3, #0
 80051da:	d001      	beq.n	80051e0 <_ZL11MX_CRC_Initv+0x24>
  {
    Error_Handler();
 80051dc:	f000 fa0e 	bl	80055fc <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80051e0:	bf00      	nop
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20000620 	.word	0x20000620
 80051e8:	40023000 	.word	0x40023000

080051ec <_ZL12MX_SAI1_Initv>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 80051ec:	b580      	push	{r7, lr}
 80051ee:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockB1.Instance = SAI1_Block_B;
 80051f0:	4b1b      	ldr	r3, [pc, #108]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 80051f2:	4a1c      	ldr	r2, [pc, #112]	; (8005264 <_ZL12MX_SAI1_Initv+0x78>)
 80051f4:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.AudioMode = SAI_MODEMASTER_TX;
 80051f6:	4b1a      	ldr	r3, [pc, #104]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 80051f8:	2200      	movs	r2, #0
 80051fa:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.Synchro = SAI_ASYNCHRONOUS;
 80051fc:	4b18      	ldr	r3, [pc, #96]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 80051fe:	2200      	movs	r2, #0
 8005200:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8005202:	4b17      	ldr	r3, [pc, #92]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 8005204:	2200      	movs	r2, #0
 8005206:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8005208:	4b15      	ldr	r3, [pc, #84]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 800520a:	2200      	movs	r2, #0
 800520c:	615a      	str	r2, [r3, #20]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800520e:	4b14      	ldr	r3, [pc, #80]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 8005210:	2200      	movs	r2, #0
 8005212:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.ClockSource = SAI_CLKSOURCE_NA;
 8005214:	4b12      	ldr	r3, [pc, #72]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 8005216:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800521a:	61da      	str	r2, [r3, #28]
  hsai_BlockB1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 800521c:	4b10      	ldr	r3, [pc, #64]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 800521e:	4a12      	ldr	r2, [pc, #72]	; (8005268 <_ZL12MX_SAI1_Initv+0x7c>)
 8005220:	621a      	str	r2, [r3, #32]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 8005222:	4b0f      	ldr	r3, [pc, #60]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 8005224:	2200      	movs	r2, #0
 8005226:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 8005228:	4b0d      	ldr	r3, [pc, #52]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 800522e:	4b0c      	ldr	r3, [pc, #48]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 8005230:	2200      	movs	r2, #0
 8005232:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8005234:	4b0a      	ldr	r3, [pc, #40]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 8005236:	2200      	movs	r2, #0
 8005238:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_SAI_InitProtocol(&hsai_BlockB1, SAI_I2S_STANDARD, SAI_PROTOCOL_DATASIZE_16BIT, 2) != HAL_OK)
 800523a:	2302      	movs	r3, #2
 800523c:	2200      	movs	r2, #0
 800523e:	2100      	movs	r1, #0
 8005240:	4807      	ldr	r0, [pc, #28]	; (8005260 <_ZL12MX_SAI1_Initv+0x74>)
 8005242:	f003 fe1b 	bl	8008e7c <HAL_SAI_InitProtocol>
 8005246:	4603      	mov	r3, r0
 8005248:	2b00      	cmp	r3, #0
 800524a:	bf14      	ite	ne
 800524c:	2301      	movne	r3, #1
 800524e:	2300      	moveq	r3, #0
 8005250:	b2db      	uxtb	r3, r3
 8005252:	2b00      	cmp	r3, #0
 8005254:	d001      	beq.n	800525a <_ZL12MX_SAI1_Initv+0x6e>
  {
    Error_Handler();
 8005256:	f000 f9d1 	bl	80055fc <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800525a:	bf00      	nop
 800525c:	bd80      	pop	{r7, pc}
 800525e:	bf00      	nop
 8005260:	20000628 	.word	0x20000628
 8005264:	40015824 	.word	0x40015824
 8005268:	0002ee00 	.word	0x0002ee00

0800526c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005270:	4b13      	ldr	r3, [pc, #76]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005272:	4a14      	ldr	r2, [pc, #80]	; (80052c4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8005274:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8005276:	4b12      	ldr	r3, [pc, #72]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005278:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800527c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800527e:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005280:	2200      	movs	r2, #0
 8005282:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005284:	4b0e      	ldr	r3, [pc, #56]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005286:	2200      	movs	r2, #0
 8005288:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800528a:	4b0d      	ldr	r3, [pc, #52]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800528c:	2200      	movs	r2, #0
 800528e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005292:	220c      	movs	r2, #12
 8005294:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005296:	4b0a      	ldr	r3, [pc, #40]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8005298:	2200      	movs	r2, #0
 800529a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800529c:	4b08      	ldr	r3, [pc, #32]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 800529e:	2200      	movs	r2, #0
 80052a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80052a2:	4807      	ldr	r0, [pc, #28]	; (80052c0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80052a4:	f004 fac6 	bl	8009834 <HAL_UART_Init>
 80052a8:	4603      	mov	r3, r0
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	bf14      	ite	ne
 80052ae:	2301      	movne	r3, #1
 80052b0:	2300      	moveq	r3, #0
 80052b2:	b2db      	uxtb	r3, r3
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80052b8:	f000 f9a0 	bl	80055fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80052bc:	bf00      	nop
 80052be:	bd80      	pop	{r7, pc}
 80052c0:	20000710 	.word	0x20000710
 80052c4:	40004400 	.word	0x40004400

080052c8 <_ZL11MX_DMA_Initv>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b082      	sub	sp, #8
 80052cc:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80052ce:	2300      	movs	r3, #0
 80052d0:	607b      	str	r3, [r7, #4]
 80052d2:	4b0c      	ldr	r3, [pc, #48]	; (8005304 <_ZL11MX_DMA_Initv+0x3c>)
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	4a0b      	ldr	r2, [pc, #44]	; (8005304 <_ZL11MX_DMA_Initv+0x3c>)
 80052d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80052dc:	6313      	str	r3, [r2, #48]	; 0x30
 80052de:	4b09      	ldr	r3, [pc, #36]	; (8005304 <_ZL11MX_DMA_Initv+0x3c>)
 80052e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80052e6:	607b      	str	r3, [r7, #4]
 80052e8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 0, 0);
 80052ea:	2200      	movs	r2, #0
 80052ec:	2100      	movs	r1, #0
 80052ee:	203c      	movs	r0, #60	; 0x3c
 80052f0:	f001 fd07 	bl	8006d02 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 80052f4:	203c      	movs	r0, #60	; 0x3c
 80052f6:	f001 fd20 	bl	8006d3a <HAL_NVIC_EnableIRQ>

}
 80052fa:	bf00      	nop
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}
 8005302:	bf00      	nop
 8005304:	40023800 	.word	0x40023800

08005308 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b08a      	sub	sp, #40	; 0x28
 800530c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800530e:	f107 0314 	add.w	r3, r7, #20
 8005312:	2200      	movs	r2, #0
 8005314:	601a      	str	r2, [r3, #0]
 8005316:	605a      	str	r2, [r3, #4]
 8005318:	609a      	str	r2, [r3, #8]
 800531a:	60da      	str	r2, [r3, #12]
 800531c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800531e:	2300      	movs	r3, #0
 8005320:	613b      	str	r3, [r7, #16]
 8005322:	4b2d      	ldr	r3, [pc, #180]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005326:	4a2c      	ldr	r2, [pc, #176]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005328:	f043 0304 	orr.w	r3, r3, #4
 800532c:	6313      	str	r3, [r2, #48]	; 0x30
 800532e:	4b2a      	ldr	r3, [pc, #168]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005332:	f003 0304 	and.w	r3, r3, #4
 8005336:	613b      	str	r3, [r7, #16]
 8005338:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800533a:	2300      	movs	r3, #0
 800533c:	60fb      	str	r3, [r7, #12]
 800533e:	4b26      	ldr	r3, [pc, #152]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005342:	4a25      	ldr	r2, [pc, #148]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005344:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005348:	6313      	str	r3, [r2, #48]	; 0x30
 800534a:	4b23      	ldr	r3, [pc, #140]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 800534c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800534e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005352:	60fb      	str	r3, [r7, #12]
 8005354:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005356:	2300      	movs	r3, #0
 8005358:	60bb      	str	r3, [r7, #8]
 800535a:	4b1f      	ldr	r3, [pc, #124]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 800535c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800535e:	4a1e      	ldr	r2, [pc, #120]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005360:	f043 0301 	orr.w	r3, r3, #1
 8005364:	6313      	str	r3, [r2, #48]	; 0x30
 8005366:	4b1c      	ldr	r3, [pc, #112]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800536a:	f003 0301 	and.w	r3, r3, #1
 800536e:	60bb      	str	r3, [r7, #8]
 8005370:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005372:	2300      	movs	r3, #0
 8005374:	607b      	str	r3, [r7, #4]
 8005376:	4b18      	ldr	r3, [pc, #96]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537a:	4a17      	ldr	r2, [pc, #92]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 800537c:	f043 0302 	orr.w	r3, r3, #2
 8005380:	6313      	str	r3, [r2, #48]	; 0x30
 8005382:	4b15      	ldr	r3, [pc, #84]	; (80053d8 <_ZL12MX_GPIO_Initv+0xd0>)
 8005384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005386:	f003 0302 	and.w	r3, r3, #2
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800538e:	2200      	movs	r2, #0
 8005390:	2120      	movs	r1, #32
 8005392:	4812      	ldr	r0, [pc, #72]	; (80053dc <_ZL12MX_GPIO_Initv+0xd4>)
 8005394:	f002 fa7c 	bl	8007890 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8005398:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800539c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800539e:	4b10      	ldr	r3, [pc, #64]	; (80053e0 <_ZL12MX_GPIO_Initv+0xd8>)
 80053a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053a2:	2300      	movs	r3, #0
 80053a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80053a6:	f107 0314 	add.w	r3, r7, #20
 80053aa:	4619      	mov	r1, r3
 80053ac:	480d      	ldr	r0, [pc, #52]	; (80053e4 <_ZL12MX_GPIO_Initv+0xdc>)
 80053ae:	f002 f8db 	bl	8007568 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80053b2:	2320      	movs	r3, #32
 80053b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053b6:	2301      	movs	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80053ba:	2300      	movs	r3, #0
 80053bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80053be:	2300      	movs	r3, #0
 80053c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80053c2:	f107 0314 	add.w	r3, r7, #20
 80053c6:	4619      	mov	r1, r3
 80053c8:	4804      	ldr	r0, [pc, #16]	; (80053dc <_ZL12MX_GPIO_Initv+0xd4>)
 80053ca:	f002 f8cd 	bl	8007568 <HAL_GPIO_Init>

}
 80053ce:	bf00      	nop
 80053d0:	3728      	adds	r7, #40	; 0x28
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd80      	pop	{r7, pc}
 80053d6:	bf00      	nop
 80053d8:	40023800 	.word	0x40023800
 80053dc:	40020000 	.word	0x40020000
 80053e0:	10210000 	.word	0x10210000
 80053e4:	40020800 	.word	0x40020800

080053e8 <_Z30ei_microphone_inference_recordv>:
 * @brief      Wait for a full buffer
 *
 * @return     In case of an buffer overrun return false
 */
bool ei_microphone_inference_record(void)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
  bool ret = true;
 80053ee:	2301      	movs	r3, #1
 80053f0:	71fb      	strb	r3, [r7, #7]

  // Check to see if the buffer has overrun
  if (inference.buf_ready == 1) {
 80053f2:	4b11      	ldr	r3, [pc, #68]	; (8005438 <_Z30ei_microphone_inference_recordv+0x50>)
 80053f4:	7a5b      	ldrb	r3, [r3, #9]
 80053f6:	b2db      	uxtb	r3, r3
 80053f8:	2b01      	cmp	r3, #1
 80053fa:	bf0c      	ite	eq
 80053fc:	2301      	moveq	r3, #1
 80053fe:	2300      	movne	r3, #0
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	d001      	beq.n	800540a <_Z30ei_microphone_inference_recordv+0x22>
      ret = false;
 8005406:	2300      	movs	r3, #0
 8005408:	71fb      	strb	r3, [r7, #7]
  }

  // %%%TODO: make this non-blocking
  while (inference.buf_ready == 0)
 800540a:	4b0b      	ldr	r3, [pc, #44]	; (8005438 <_Z30ei_microphone_inference_recordv+0x50>)
 800540c:	7a5b      	ldrb	r3, [r3, #9]
 800540e:	b2db      	uxtb	r3, r3
 8005410:	2b00      	cmp	r3, #0
 8005412:	bf0c      	ite	eq
 8005414:	2301      	moveq	r3, #1
 8005416:	2300      	movne	r3, #0
 8005418:	b2db      	uxtb	r3, r3
 800541a:	2b00      	cmp	r3, #0
 800541c:	d001      	beq.n	8005422 <_Z30ei_microphone_inference_recordv+0x3a>
  {
    continue;
 800541e:	bf00      	nop
  while (inference.buf_ready == 0)
 8005420:	e7f3      	b.n	800540a <_Z30ei_microphone_inference_recordv+0x22>
  }

  inference.buf_ready = 0;
 8005422:	4b05      	ldr	r3, [pc, #20]	; (8005438 <_Z30ei_microphone_inference_recordv+0x50>)
 8005424:	2200      	movs	r2, #0
 8005426:	725a      	strb	r2, [r3, #9]

  return ret;
 8005428:	79fb      	ldrb	r3, [r7, #7]
}
 800542a:	4618      	mov	r0, r3
 800542c:	370c      	adds	r7, #12
 800542e:	46bd      	mov	sp, r7
 8005430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005434:	4770      	bx	lr
 8005436:	bf00      	nop
 8005438:	20006b58 	.word	0x20006b58

0800543c <_Z27ei_microphone_inference_endv>:
 * @brief      Stop audio sampling, release sampling buffers
 *
 * @return     false on error
 */
bool ei_microphone_inference_end(void)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	af00      	add	r7, sp, #0
  // Stop I2S
  HAL_SAI_DMAStop(&hsai_BlockB1);
 8005440:	4809      	ldr	r0, [pc, #36]	; (8005468 <_Z27ei_microphone_inference_endv+0x2c>)
 8005442:	f003 fe77 	bl	8009134 <HAL_SAI_DMAStop>

  // Free up double buffer
  record_ready = false;
 8005446:	4b09      	ldr	r3, [pc, #36]	; (800546c <_Z27ei_microphone_inference_endv+0x30>)
 8005448:	2200      	movs	r2, #0
 800544a:	701a      	strb	r2, [r3, #0]
  free(inference.buffers[0]);
 800544c:	4b08      	ldr	r3, [pc, #32]	; (8005470 <_Z27ei_microphone_inference_endv+0x34>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f015 feab 	bl	801b1ac <free>
  free(inference.buffers[1]);
 8005456:	4b06      	ldr	r3, [pc, #24]	; (8005470 <_Z27ei_microphone_inference_endv+0x34>)
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	4618      	mov	r0, r3
 800545c:	f015 fea6 	bl	801b1ac <free>

  return true;
 8005460:	2301      	movs	r3, #1
}
 8005462:	4618      	mov	r0, r3
 8005464:	bd80      	pop	{r7, pc}
 8005466:	bf00      	nop
 8005468:	20000628 	.word	0x20000628
 800546c:	20006b6c 	.word	0x20006b6c
 8005470:	20006b58 	.word	0x20006b58

08005474 <_ZL31audio_buffer_inference_callbackmm>:
 *
 * @param[in]  n_bytes  Number of bytes to copy
 * @param[in]  offset   offset in sampleBuffer
 */
static void audio_buffer_inference_callback(uint32_t n_bytes, uint32_t offset)
{
 8005474:	b490      	push	{r4, r7}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
 800547c:	6039      	str	r1, [r7, #0]
  // Copy samples from I2S buffer to inference buffer. Convert 24-bit, 32kHz
  // samples to 16-bit, 16kHz
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 800547e:	2300      	movs	r3, #0
 8005480:	60fb      	str	r3, [r7, #12]
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	085b      	lsrs	r3, r3, #1
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d22d      	bcs.n	80054e8 <_ZL31audio_buffer_inference_callbackmm+0x74>
    inference.buffers[inference.buf_select][inference.buf_count++] =
        (int16_t)(i2s_buf[offset + (I2S_BUF_SKIP * i)] >> 8);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	009a      	lsls	r2, r3, #2
 8005490:	683b      	ldr	r3, [r7, #0]
 8005492:	4413      	add	r3, r2
 8005494:	4a17      	ldr	r2, [pc, #92]	; (80054f4 <_ZL31audio_buffer_inference_callbackmm+0x80>)
 8005496:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800549a:	0a1c      	lsrs	r4, r3, #8
    inference.buffers[inference.buf_select][inference.buf_count++] =
 800549c:	4b16      	ldr	r3, [pc, #88]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 800549e:	7a1b      	ldrb	r3, [r3, #8]
 80054a0:	461a      	mov	r2, r3
 80054a2:	4b15      	ldr	r3, [pc, #84]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054a4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80054a8:	4b13      	ldr	r3, [pc, #76]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054aa:	68db      	ldr	r3, [r3, #12]
 80054ac:	1c59      	adds	r1, r3, #1
 80054ae:	4812      	ldr	r0, [pc, #72]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054b0:	60c1      	str	r1, [r0, #12]
 80054b2:	005b      	lsls	r3, r3, #1
 80054b4:	4413      	add	r3, r2
 80054b6:	b222      	sxth	r2, r4
 80054b8:	801a      	strh	r2, [r3, #0]

    if (inference.buf_count >= inference.n_samples) {
 80054ba:	4b0f      	ldr	r3, [pc, #60]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054bc:	68da      	ldr	r2, [r3, #12]
 80054be:	4b0e      	ldr	r3, [pc, #56]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054c0:	691b      	ldr	r3, [r3, #16]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d30c      	bcc.n	80054e0 <_ZL31audio_buffer_inference_callbackmm+0x6c>
      inference.buf_select ^= 1;
 80054c6:	4b0c      	ldr	r3, [pc, #48]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054c8:	7a1b      	ldrb	r3, [r3, #8]
 80054ca:	f083 0301 	eor.w	r3, r3, #1
 80054ce:	b2da      	uxtb	r2, r3
 80054d0:	4b09      	ldr	r3, [pc, #36]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054d2:	721a      	strb	r2, [r3, #8]
      inference.buf_count = 0;
 80054d4:	4b08      	ldr	r3, [pc, #32]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054d6:	2200      	movs	r2, #0
 80054d8:	60da      	str	r2, [r3, #12]
      inference.buf_ready = 1;
 80054da:	4b07      	ldr	r3, [pc, #28]	; (80054f8 <_ZL31audio_buffer_inference_callbackmm+0x84>)
 80054dc:	2201      	movs	r2, #1
 80054de:	725a      	strb	r2, [r3, #9]
  for (uint32_t i = 0; i < (n_bytes >> 1); i++) {
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	3301      	adds	r3, #1
 80054e4:	60fb      	str	r3, [r7, #12]
 80054e6:	e7cc      	b.n	8005482 <_ZL31audio_buffer_inference_callbackmm+0xe>
    }
  }
}
 80054e8:	bf00      	nop
 80054ea:	3710      	adds	r7, #16
 80054ec:	46bd      	mov	sp, r7
 80054ee:	bc90      	pop	{r4, r7}
 80054f0:	4770      	bx	lr
 80054f2:	bf00      	nop
 80054f4:	20000758 	.word	0x20000758
 80054f8:	20006b58 	.word	0x20006b58

080054fc <_ZL21get_audio_signal_datajjPf>:

/**
 * Get raw audio signal data
 */
static int get_audio_signal_data(size_t offset, size_t length, float *out_ptr)
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b084      	sub	sp, #16
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
  numpy::int16_to_float(&inference.buffers[inference.buf_select ^ 1][offset], out_ptr, length);
 8005508:	4b0a      	ldr	r3, [pc, #40]	; (8005534 <_ZL21get_audio_signal_datajjPf+0x38>)
 800550a:	7a1b      	ldrb	r3, [r3, #8]
 800550c:	f083 0301 	eor.w	r3, r3, #1
 8005510:	b2db      	uxtb	r3, r3
 8005512:	461a      	mov	r2, r3
 8005514:	4b07      	ldr	r3, [pc, #28]	; (8005534 <_ZL21get_audio_signal_datajjPf+0x38>)
 8005516:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	005b      	lsls	r3, r3, #1
 800551e:	4413      	add	r3, r2
 8005520:	68ba      	ldr	r2, [r7, #8]
 8005522:	6879      	ldr	r1, [r7, #4]
 8005524:	4618      	mov	r0, r3
 8005526:	f7fc fe5d 	bl	80021e4 <_ZN2ei5numpy14int16_to_floatEPKsPfj>

  return 0;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3710      	adds	r7, #16
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20006b58 	.word	0x20006b58

08005538 <_Z6vprintPKcSt9__va_list>:

/**
 * Low-level print function that uses UART to print status messages.
 */
void vprint(const char *fmt, va_list argp)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b0b4      	sub	sp, #208	; 0xd0
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  char string[200];
  if(0 < vsprintf(string, fmt, argp)) // build string
 8005542:	f107 0308 	add.w	r3, r7, #8
 8005546:	683a      	ldr	r2, [r7, #0]
 8005548:	6879      	ldr	r1, [r7, #4]
 800554a:	4618      	mov	r0, r3
 800554c:	f016 fb14 	bl	801bb78 <vsiprintf>
 8005550:	4603      	mov	r3, r0
 8005552:	2b00      	cmp	r3, #0
 8005554:	bfcc      	ite	gt
 8005556:	2301      	movgt	r3, #1
 8005558:	2300      	movle	r3, #0
 800555a:	b2db      	uxtb	r3, r3
 800555c:	2b00      	cmp	r3, #0
 800555e:	d00d      	beq.n	800557c <_Z6vprintPKcSt9__va_list+0x44>
  {
      HAL_UART_Transmit(&huart2, (uint8_t*)string, strlen(string), 0xffffff);
 8005560:	f107 0308 	add.w	r3, r7, #8
 8005564:	4618      	mov	r0, r3
 8005566:	f7fa fe53 	bl	8000210 <strlen>
 800556a:	4603      	mov	r3, r0
 800556c:	b29a      	uxth	r2, r3
 800556e:	f107 0108 	add.w	r1, r7, #8
 8005572:	f06f 437f 	mvn.w	r3, #4278190080	; 0xff000000
 8005576:	4803      	ldr	r0, [pc, #12]	; (8005584 <_Z6vprintPKcSt9__va_list+0x4c>)
 8005578:	f004 f9a9 	bl	80098ce <HAL_UART_Transmit>
  }
}
 800557c:	bf00      	nop
 800557e:	37d0      	adds	r7, #208	; 0xd0
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}
 8005584:	20000710 	.word	0x20000710

08005588 <_Z9ei_printfPKcz>:

/**
 * Wrapper for vprint. Use this like you would printf to print messages to the serial console.
 */
void ei_printf(const char *format, ...)
{
 8005588:	b40f      	push	{r0, r1, r2, r3}
 800558a:	b580      	push	{r7, lr}
 800558c:	b082      	sub	sp, #8
 800558e:	af00      	add	r7, sp, #0
  va_list myargs;
  va_start(myargs, format);
 8005590:	f107 0314 	add.w	r3, r7, #20
 8005594:	607b      	str	r3, [r7, #4]
  vprint(format, myargs);
 8005596:	6879      	ldr	r1, [r7, #4]
 8005598:	6938      	ldr	r0, [r7, #16]
 800559a:	f7ff ffcd 	bl	8005538 <_Z6vprintPKcSt9__va_list>
  va_end(myargs);
}
 800559e:	bf00      	nop
 80055a0:	3708      	adds	r7, #8
 80055a2:	46bd      	mov	sp, r7
 80055a4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80055a8:	b004      	add	sp, #16
 80055aa:	4770      	bx	lr

080055ac <HAL_SAI_RxHalfCpltCallback>:

/**
 * Called when the first half of the receive buffer is full
 */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80055ac:	b580      	push	{r7, lr}
 80055ae:	b082      	sub	sp, #8
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
  if (record_ready == true)
 80055b4:	4b06      	ldr	r3, [pc, #24]	; (80055d0 <HAL_SAI_RxHalfCpltCallback+0x24>)
 80055b6:	781b      	ldrb	r3, [r3, #0]
 80055b8:	2b01      	cmp	r3, #1
 80055ba:	d104      	bne.n	80055c6 <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, 0);
 80055bc:	2100      	movs	r1, #0
 80055be:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80055c2:	f7ff ff57 	bl	8005474 <_ZL31audio_buffer_inference_callbackmm>
  }
}
 80055c6:	bf00      	nop
 80055c8:	3708      	adds	r7, #8
 80055ca:	46bd      	mov	sp, r7
 80055cc:	bd80      	pop	{r7, pc}
 80055ce:	bf00      	nop
 80055d0:	20006b6c 	.word	0x20006b6c

080055d4 <HAL_SAI_RxCpltCallback>:

/**
 * Called when the second half of the receive buffer is full
 */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
 80055da:	6078      	str	r0, [r7, #4]
  if (record_ready == true)
 80055dc:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <HAL_SAI_RxCpltCallback+0x24>)
 80055de:	781b      	ldrb	r3, [r3, #0]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d105      	bne.n	80055f0 <HAL_SAI_RxCpltCallback+0x1c>
  {
    audio_buffer_inference_callback(I2S_BUF_LEN / I2S_BUF_SKIP, I2S_BUF_LEN >> 1);
 80055e4:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 80055e8:	f44f 60c8 	mov.w	r0, #1600	; 0x640
 80055ec:	f7ff ff42 	bl	8005474 <_ZL31audio_buffer_inference_callbackmm>
  }
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	20006b6c 	.word	0x20006b6c

080055fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80055fc:	b480      	push	{r7}
 80055fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8005600:	b672      	cpsid	i
}
 8005602:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8005604:	e7fe      	b.n	8005604 <Error_Handler+0x8>

08005606 <_ZSt4sqrtIiEN9__gnu_cxx11__enable_ifIXsrSt12__is_integerIT_E7__valueEdE6__typeES3_>:
    sqrt(_Tp __x)
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
    { return __builtin_sqrt(__x); }
 800560e:	6878      	ldr	r0, [r7, #4]
 8005610:	f7fa ffa8 	bl	8000564 <__aeabi_i2d>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	ec43 2b10 	vmov	d0, r2, r3
 800561c:	f013 f88a 	bl	8018734 <sqrt>
 8005620:	eeb0 7a40 	vmov.f32	s14, s0
 8005624:	eef0 7a60 	vmov.f32	s15, s1
 8005628:	eeb0 0a47 	vmov.f32	s0, s14
 800562c:	eef0 0a67 	vmov.f32	s1, s15
 8005630:	3708      	adds	r7, #8
 8005632:	46bd      	mov	sp, r7
 8005634:	bd80      	pop	{r7, pc}

08005636 <_ZSt3powIfiEN9__gnu_cxx11__promote_2IT_T0_NS0_9__promoteIS2_XsrSt12__is_integerIS2_E7__valueEE6__typeENS4_IS3_XsrS5_IS3_E7__valueEE6__typeEE6__typeES2_S3_>:
    pow(_Tp __x, _Up __y)
 8005636:	b5b0      	push	{r4, r5, r7, lr}
 8005638:	b082      	sub	sp, #8
 800563a:	af00      	add	r7, sp, #0
 800563c:	ed87 0a01 	vstr	s0, [r7, #4]
 8005640:	6038      	str	r0, [r7, #0]
      return pow(__type(__x), __type(__y));
 8005642:	6878      	ldr	r0, [r7, #4]
 8005644:	f7fa ffa0 	bl	8000588 <__aeabi_f2d>
 8005648:	4604      	mov	r4, r0
 800564a:	460d      	mov	r5, r1
 800564c:	6838      	ldr	r0, [r7, #0]
 800564e:	f7fa ff89 	bl	8000564 <__aeabi_i2d>
 8005652:	4602      	mov	r2, r0
 8005654:	460b      	mov	r3, r1
 8005656:	ec43 2b11 	vmov	d1, r2, r3
 800565a:	ec45 4b10 	vmov	d0, r4, r5
 800565e:	f012 ffbb 	bl	80185d8 <pow>
 8005662:	eeb0 7a40 	vmov.f32	s14, s0
 8005666:	eef0 7a60 	vmov.f32	s15, s1
    }
 800566a:	eeb0 0a47 	vmov.f32	s0, s14
 800566e:	eef0 0a67 	vmov.f32	s1, s15
 8005672:	3708      	adds	r7, #8
 8005674:	46bd      	mov	sp, r7
 8005676:	bdb0      	pop	{r4, r5, r7, pc}

08005678 <_ZNKSt8functionIFijjPfEEclEjjS0_>:
	  }
      }

  template<typename _Res, typename... _ArgTypes>
    _Res
    function<_Res(_ArgTypes...)>::
 8005678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800567c:	b084      	sub	sp, #16
 800567e:	af00      	add	r7, sp, #0
 8005680:	60f8      	str	r0, [r7, #12]
 8005682:	60b9      	str	r1, [r7, #8]
 8005684:	607a      	str	r2, [r7, #4]
 8005686:	603b      	str	r3, [r7, #0]
    operator()(_ArgTypes... __args) const
    {
      if (_M_empty())
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	4618      	mov	r0, r3
 800568c:	f7fb fd61 	bl	8001152 <_ZNKSt14_Function_base8_M_emptyEv>
 8005690:	4603      	mov	r3, r0
 8005692:	2b00      	cmp	r3, #0
 8005694:	d001      	beq.n	800569a <_ZNKSt8functionIFijjPfEEclEjjS0_+0x22>
	__throw_bad_function_call();
 8005696:	f7fb fdf3 	bl	8001280 <_ZSt25__throw_bad_function_callv>
      return _M_invoker(_M_functor, std::forward<_ArgTypes>(__args)...);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	68dc      	ldr	r4, [r3, #12]
 800569e:	68fd      	ldr	r5, [r7, #12]
 80056a0:	f107 0308 	add.w	r3, r7, #8
 80056a4:	4618      	mov	r0, r3
 80056a6:	f000 f8f6 	bl	8005896 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80056aa:	4606      	mov	r6, r0
 80056ac:	1d3b      	adds	r3, r7, #4
 80056ae:	4618      	mov	r0, r3
 80056b0:	f000 f8f1 	bl	8005896 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 80056b4:	4680      	mov	r8, r0
 80056b6:	463b      	mov	r3, r7
 80056b8:	4618      	mov	r0, r3
 80056ba:	f000 f8f7 	bl	80058ac <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 80056be:	4603      	mov	r3, r0
 80056c0:	4642      	mov	r2, r8
 80056c2:	4631      	mov	r1, r6
 80056c4:	4628      	mov	r0, r5
 80056c6:	47a0      	blx	r4
 80056c8:	4603      	mov	r3, r0
    }
 80056ca:	4618      	mov	r0, r3
 80056cc:	3710      	adds	r7, #16
 80056ce:	46bd      	mov	sp, r7
 80056d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080056d4 <_ZNSt6vectorImSaImEED1Ev>:
       *  The dtor only erases the elements, and note that if the
       *  elements themselves are pointers, the pointed-to memory is
       *  not touched in any way.  Managing the pointer is the user's
       *  responsibility.
       */
      ~vector() _GLIBCXX_NOEXCEPT
 80056d4:	b5b0      	push	{r4, r5, r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
      {
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681c      	ldr	r4, [r3, #0]
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f000 f8eb 	bl	80058c2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80056ec:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 80056ee:	461a      	mov	r2, r3
 80056f0:	4629      	mov	r1, r5
 80056f2:	4620      	mov	r0, r4
 80056f4:	f000 f8f0 	bl	80058d8 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
	_GLIBCXX_ASAN_ANNOTATE_BEFORE_DEALLOC;
      }
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	4618      	mov	r0, r3
 80056fc:	f000 f831 	bl	8005762 <_ZNSt12_Vector_baseImSaImEED1Ev>
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	4618      	mov	r0, r3
 8005704:	3708      	adds	r7, #8
 8005706:	46bd      	mov	sp, r7
 8005708:	bdb0      	pop	{r4, r5, r7, pc}

0800570a <_ZNKSt8functionIFijjPfEEcvbEv>:
      explicit operator bool() const noexcept
 800570a:	b580      	push	{r7, lr}
 800570c:	b082      	sub	sp, #8
 800570e:	af00      	add	r7, sp, #0
 8005710:	6078      	str	r0, [r7, #4]
      { return !_M_empty(); }
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	4618      	mov	r0, r3
 8005716:	f7fb fd1c 	bl	8001152 <_ZNKSt14_Function_base8_M_emptyEv>
 800571a:	4603      	mov	r3, r0
 800571c:	f083 0301 	eor.w	r3, r3, #1
 8005720:	b2db      	uxtb	r3, r3
 8005722:	4618      	mov	r0, r3
 8005724:	3708      	adds	r7, #8
 8005726:	46bd      	mov	sp, r7
 8005728:	bd80      	pop	{r7, pc}

0800572a <_ZNSt12_Vector_baseImSaImEE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 800572a:	b580      	push	{r7, lr}
 800572c:	b082      	sub	sp, #8
 800572e:	af00      	add	r7, sp, #0
 8005730:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 f8de 	bl	80058f4 <_ZNSaImEC1Ev>
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	4618      	mov	r0, r3
 800573c:	f000 f8e6 	bl	800590c <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>
	{ }
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4618      	mov	r0, r3
 8005744:	3708      	adds	r7, #8
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}

0800574a <_ZNSaImED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	allocator(const allocator<_Tp1>&) _GLIBCXX_NOTHROW { }

      ~allocator() _GLIBCXX_NOTHROW { }
 800574a:	b580      	push	{r7, lr}
 800574c:	b082      	sub	sp, #8
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
 8005752:	6878      	ldr	r0, [r7, #4]
 8005754:	f000 f8ee 	bl	8005934 <_ZN9__gnu_cxx13new_allocatorImED1Ev>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	4618      	mov	r0, r3
 800575c:	3708      	adds	r7, #8
 800575e:	46bd      	mov	sp, r7
 8005760:	bd80      	pop	{r7, pc}

08005762 <_ZNSt12_Vector_baseImSaImEED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8005762:	b580      	push	{r7, lr}
 8005764:	b082      	sub	sp, #8
 8005766:	af00      	add	r7, sp, #0
 8005768:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	689a      	ldr	r2, [r3, #8]
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	1ad3      	subs	r3, r2, r3
 8005778:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 800577a:	461a      	mov	r2, r3
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f8e4 	bl	800594a <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      }
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	4618      	mov	r0, r3
 8005786:	f7fd fb5c 	bl	8002e42 <_ZNSt12_Vector_baseImSaImEE12_Vector_implD1Ev>
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	4618      	mov	r0, r3
 800578e:	3708      	adds	r7, #8
 8005790:	46bd      	mov	sp, r7
 8005792:	bd80      	pop	{r7, pc}

08005794 <_ZNSt6vectorImSaImEE9push_backEOm>:
	  _M_realloc_insert(end(), __x);
      }

#if __cplusplus >= 201103L
      void
      push_back(value_type&& __x)
 8005794:	b580      	push	{r7, lr}
 8005796:	b082      	sub	sp, #8
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
 800579c:	6039      	str	r1, [r7, #0]
      { emplace_back(std::move(__x)); }
 800579e:	6838      	ldr	r0, [r7, #0]
 80057a0:	f000 f8e6 	bl	8005970 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>
 80057a4:	4603      	mov	r3, r0
 80057a6:	4619      	mov	r1, r3
 80057a8:	6878      	ldr	r0, [r7, #4]
 80057aa:	f000 f8ec 	bl	8005986 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>
 80057ae:	bf00      	nop
 80057b0:	3708      	adds	r7, #8
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <_ZNKSt6vectorImSaImEE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	685a      	ldr	r2, [r3, #4]
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	1ad3      	subs	r3, r2, r3
 80057c8:	109b      	asrs	r3, r3, #2
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <_ZNSt6vectorImSaImEE2atEj>:
      at(size_type __n)
 80057d6:	b580      	push	{r7, lr}
 80057d8:	b082      	sub	sp, #8
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
 80057de:	6039      	str	r1, [r7, #0]
	_M_range_check(__n);
 80057e0:	6839      	ldr	r1, [r7, #0]
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f8fe 	bl	80059e4 <_ZNKSt6vectorImSaImEE14_M_range_checkEj>
	return (*this)[__n];
 80057e8:	6839      	ldr	r1, [r7, #0]
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 f91a 	bl	8005a24 <_ZNSt6vectorImSaImEEixEj>
 80057f0:	4603      	mov	r3, r0
      }
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}

080057fa <_ZNSt8functionIFijjPfEEC1Ev>:
      function() noexcept
 80057fa:	b580      	push	{r7, lr}
 80057fc:	b082      	sub	sp, #8
 80057fe:	af00      	add	r7, sp, #0
 8005800:	6078      	str	r0, [r7, #4]
      : _Function_base() { }
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4618      	mov	r0, r3
 8005806:	f7fb fc83 	bl	8001110 <_ZNSt14_Function_baseC1Ev>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4618      	mov	r0, r3
 800580e:	3708      	adds	r7, #8
 8005810:	46bd      	mov	sp, r7
 8005812:	bd80      	pop	{r7, pc}

08005814 <_ZNSt8functionIFijjPfEEaSIPS1_EENSt9enable_ifIXsrNS2_9_CallableINSt5decayIT_E4typeESt15__invoke_resultIRSA_JjjS0_EEEE5valueERS2_E4typeEOS8_>:
	operator=(_Functor&& __f)
 8005814:	b580      	push	{r7, lr}
 8005816:	b086      	sub	sp, #24
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
	  function(std::forward<_Functor>(__f)).swap(*this);
 800581e:	6838      	ldr	r0, [r7, #0]
 8005820:	f000 f910 	bl	8005a44 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>
 8005824:	4603      	mov	r3, r0
 8005826:	681a      	ldr	r2, [r3, #0]
 8005828:	f107 0308 	add.w	r3, r7, #8
 800582c:	4611      	mov	r1, r2
 800582e:	4618      	mov	r0, r3
 8005830:	f000 f914 	bl	8005a5c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>
 8005834:	f107 0308 	add.w	r3, r7, #8
 8005838:	6879      	ldr	r1, [r7, #4]
 800583a:	4618      	mov	r0, r3
 800583c:	f000 f80a 	bl	8005854 <_ZNSt8functionIFijjPfEE4swapERS2_>
 8005840:	f107 0308 	add.w	r3, r7, #8
 8005844:	4618      	mov	r0, r3
 8005846:	f7fe fcab 	bl	80041a0 <_ZNSt8functionIFijjPfEED1Ev>
	  return *this;
 800584a:	687b      	ldr	r3, [r7, #4]
	}
 800584c:	4618      	mov	r0, r3
 800584e:	3718      	adds	r7, #24
 8005850:	46bd      	mov	sp, r7
 8005852:	bd80      	pop	{r7, pc}

08005854 <_ZNSt8functionIFijjPfEE4swapERS2_>:
      void swap(function& __x) noexcept
 8005854:	b580      	push	{r7, lr}
 8005856:	b082      	sub	sp, #8
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
	std::swap(_M_functor, __x._M_functor);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	683a      	ldr	r2, [r7, #0]
 8005862:	4611      	mov	r1, r2
 8005864:	4618      	mov	r0, r3
 8005866:	f000 f92e 	bl	8005ac6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>
	std::swap(_M_manager, __x._M_manager);
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	f103 0208 	add.w	r2, r3, #8
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	3308      	adds	r3, #8
 8005874:	4619      	mov	r1, r3
 8005876:	4610      	mov	r0, r2
 8005878:	f000 f957 	bl	8005b2a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>
	std::swap(_M_invoker, __x._M_invoker);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	f103 020c 	add.w	r2, r3, #12
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	330c      	adds	r3, #12
 8005886:	4619      	mov	r1, r3
 8005888:	4610      	mov	r0, r2
 800588a:	f000 f978 	bl	8005b7e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>
      }
 800588e:	bf00      	nop
 8005890:	3708      	adds	r7, #8
 8005892:	46bd      	mov	sp, r7
 8005894:	bd80      	pop	{r7, pc}

08005896 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>:
   *
   *  This function is used to implement "perfect forwarding".
   */
  template<typename _Tp>
    constexpr _Tp&&
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005896:	b480      	push	{r7}
 8005898:	b083      	sub	sp, #12
 800589a:	af00      	add	r7, sp, #0
 800589c:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	4618      	mov	r0, r3
 80058a2:	370c      	adds	r7, #12
 80058a4:	46bd      	mov	sp, r7
 80058a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058aa:	4770      	bx	lr

080058ac <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 80058ac:	b480      	push	{r7}
 80058ae:	b083      	sub	sp, #12
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4618      	mov	r0, r3
 80058b8:	370c      	adds	r7, #12
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr

080058c2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80058c2:	b480      	push	{r7}
 80058c4:	b083      	sub	sp, #12
 80058c6:	af00      	add	r7, sp, #0
 80058c8:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	4618      	mov	r0, r3
 80058ce:	370c      	adds	r7, #12
 80058d0:	46bd      	mov	sp, r7
 80058d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d6:	4770      	bx	lr

080058d8 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>:
	__traits::destroy(__alloc, std::__addressof(*__first));
    }

  template<typename _ForwardIterator, typename _Tp>
    inline void
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 80058d8:	b580      	push	{r7, lr}
 80058da:	b084      	sub	sp, #16
 80058dc:	af00      	add	r7, sp, #0
 80058de:	60f8      	str	r0, [r7, #12]
 80058e0:	60b9      	str	r1, [r7, #8]
 80058e2:	607a      	str	r2, [r7, #4]
	     allocator<_Tp>&)
    {
      _Destroy(__first, __last);
 80058e4:	68b9      	ldr	r1, [r7, #8]
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 f968 	bl	8005bbc <_ZSt8_DestroyIPmEvT_S1_>
    }
 80058ec:	bf00      	nop
 80058ee:	3710      	adds	r7, #16
 80058f0:	46bd      	mov	sp, r7
 80058f2:	bd80      	pop	{r7, pc}

080058f4 <_ZNSaImEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 80058f4:	b580      	push	{r7, lr}
 80058f6:	b082      	sub	sp, #8
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6878      	ldr	r0, [r7, #4]
 80058fe:	f000 f96a 	bl	8005bd6 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	4618      	mov	r0, r3
 8005906:	3708      	adds	r7, #8
 8005908:	46bd      	mov	sp, r7
 800590a:	bd80      	pop	{r7, pc}

0800590c <_ZNSt12_Vector_baseImSaImEE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	2200      	movs	r2, #0
 8005918:	601a      	str	r2, [r3, #0]
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	605a      	str	r2, [r3, #4]
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2200      	movs	r2, #0
 8005924:	609a      	str	r2, [r3, #8]
	{ }
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	4618      	mov	r0, r3
 800592a:	370c      	adds	r7, #12
 800592c:	46bd      	mov	sp, r7
 800592e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005932:	4770      	bx	lr

08005934 <_ZN9__gnu_cxx13new_allocatorImED1Ev>:

      template<typename _Tp1>
	_GLIBCXX20_CONSTEXPR
	new_allocator(const new_allocator<_Tp1>&) _GLIBCXX_USE_NOEXCEPT { }

      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005934:	b480      	push	{r7}
 8005936:	b083      	sub	sp, #12
 8005938:	af00      	add	r7, sp, #0
 800593a:	6078      	str	r0, [r7, #4]
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4618      	mov	r0, r3
 8005940:	370c      	adds	r7, #12
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>:
      _M_deallocate(pointer __p, size_t __n)
 800594a:	b580      	push	{r7, lr}
 800594c:	b084      	sub	sp, #16
 800594e:	af00      	add	r7, sp, #0
 8005950:	60f8      	str	r0, [r7, #12]
 8005952:	60b9      	str	r1, [r7, #8]
 8005954:	607a      	str	r2, [r7, #4]
	if (__p)
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d005      	beq.n	8005968 <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	687a      	ldr	r2, [r7, #4]
 8005960:	68b9      	ldr	r1, [r7, #8]
 8005962:	4618      	mov	r0, r3
 8005964:	f000 f942 	bl	8005bec <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>
      }
 8005968:	bf00      	nop
 800596a:	3710      	adds	r7, #16
 800596c:	46bd      	mov	sp, r7
 800596e:	bd80      	pop	{r7, pc}

08005970 <_ZSt4moveIRmEONSt16remove_referenceIT_E4typeEOS2_>:
   *  @param  __t  A thing of arbitrary type.
   *  @return The parameter cast to an rvalue-reference to allow moving it.
  */
  template<typename _Tp>
    constexpr typename std::remove_reference<_Tp>::type&&
    move(_Tp&& __t) noexcept
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	4618      	mov	r0, r3
 800597c:	370c      	adds	r7, #12
 800597e:	46bd      	mov	sp, r7
 8005980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005984:	4770      	bx	lr

08005986 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_>:
#if __cplusplus > 201402L
      typename vector<_Tp, _Alloc>::reference
#else
      void
#endif
      vector<_Tp, _Alloc>::
 8005986:	b5b0      	push	{r4, r5, r7, lr}
 8005988:	b082      	sub	sp, #8
 800598a:	af00      	add	r7, sp, #0
 800598c:	6078      	str	r0, [r7, #4]
 800598e:	6039      	str	r1, [r7, #0]
      emplace_back(_Args&&... __args)
      {
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	685a      	ldr	r2, [r3, #4]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	429a      	cmp	r2, r3
 800599a:	d011      	beq.n	80059c0 <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x3a>
	  {
	    _GLIBCXX_ASAN_ANNOTATE_GROW(1);
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 800599c:	687c      	ldr	r4, [r7, #4]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	685d      	ldr	r5, [r3, #4]
 80059a2:	6838      	ldr	r0, [r7, #0]
 80059a4:	f000 f931 	bl	8005c0a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	4629      	mov	r1, r5
 80059ae:	4620      	mov	r0, r4
 80059b0:	f000 f936 	bl	8005c20 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
				     std::forward<_Args>(__args)...);
	    ++this->_M_impl._M_finish;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	1d1a      	adds	r2, r3, #4
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	605a      	str	r2, [r3, #4]
	else
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
#if __cplusplus > 201402L
	return back();
#endif
      }
 80059be:	e00c      	b.n	80059da <_ZNSt6vectorImSaImEE12emplace_backIJmEEEvDpOT_+0x54>
	  _M_realloc_insert(end(), std::forward<_Args>(__args)...);
 80059c0:	6878      	ldr	r0, [r7, #4]
 80059c2:	f000 f940 	bl	8005c46 <_ZNSt6vectorImSaImEE3endEv>
 80059c6:	4604      	mov	r4, r0
 80059c8:	6838      	ldr	r0, [r7, #0]
 80059ca:	f000 f91e 	bl	8005c0a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 80059ce:	4603      	mov	r3, r0
 80059d0:	461a      	mov	r2, r3
 80059d2:	4621      	mov	r1, r4
 80059d4:	6878      	ldr	r0, [r7, #4]
 80059d6:	f000 f95d 	bl	8005c94 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>
      }
 80059da:	bf00      	nop
 80059dc:	3708      	adds	r7, #8
 80059de:	46bd      	mov	sp, r7
 80059e0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080059e4 <_ZNKSt6vectorImSaImEE14_M_range_checkEj>:
      _M_range_check(size_type __n) const
 80059e4:	b580      	push	{r7, lr}
 80059e6:	b082      	sub	sp, #8
 80059e8:	af00      	add	r7, sp, #0
 80059ea:	6078      	str	r0, [r7, #4]
 80059ec:	6039      	str	r1, [r7, #0]
	if (__n >= this->size())
 80059ee:	6878      	ldr	r0, [r7, #4]
 80059f0:	f7ff fee1 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 80059f4:	4602      	mov	r2, r0
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	4293      	cmp	r3, r2
 80059fa:	bf2c      	ite	cs
 80059fc:	2301      	movcs	r3, #1
 80059fe:	2300      	movcc	r3, #0
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d008      	beq.n	8005a18 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x34>
	  __throw_out_of_range_fmt(__N("vector::_M_range_check: __n "
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7ff fed5 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 8005a0c:	4603      	mov	r3, r0
 8005a0e:	461a      	mov	r2, r3
 8005a10:	6839      	ldr	r1, [r7, #0]
 8005a12:	4803      	ldr	r0, [pc, #12]	; (8005a20 <_ZNKSt6vectorImSaImEE14_M_range_checkEj+0x3c>)
 8005a14:	f012 fa31 	bl	8017e7a <_ZSt24__throw_out_of_range_fmtPKcz>
      }
 8005a18:	bf00      	nop
 8005a1a:	3708      	adds	r7, #8
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}
 8005a20:	0801e038 	.word	0x0801e038

08005a24 <_ZNSt6vectorImSaImEEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8005a24:	b480      	push	{r7}
 8005a26:	b083      	sub	sp, #12
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	6078      	str	r0, [r7, #4]
 8005a2c:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681a      	ldr	r2, [r3, #0]
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	009b      	lsls	r3, r3, #2
 8005a36:	4413      	add	r3, r2
      }
 8005a38:	4618      	mov	r0, r3
 8005a3a:	370c      	adds	r7, #12
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <_ZSt7forwardIPFijjPfEEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005a44:	b480      	push	{r7}
 8005a46:	b083      	sub	sp, #12
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	4618      	mov	r0, r3
 8005a50:	370c      	adds	r7, #12
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
	...

08005a5c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_>:
      function<_Res(_ArgTypes...)>::
 8005a5c:	b590      	push	{r4, r7, lr}
 8005a5e:	b083      	sub	sp, #12
 8005a60:	af00      	add	r7, sp, #0
 8005a62:	6078      	str	r0, [r7, #4]
 8005a64:	6039      	str	r1, [r7, #0]
      : _Function_base()
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	4618      	mov	r0, r3
 8005a6a:	f7fb fb51 	bl	8001110 <_ZNSt14_Function_baseC1Ev>
	if (_My_handler::_M_not_empty_function(__f))
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	4618      	mov	r0, r3
 8005a72:	f000 f9cb 	bl	8005e0c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>
 8005a76:	4603      	mov	r3, r0
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d00f      	beq.n	8005a9c <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x40>
	    _My_handler::_M_init_functor(_M_functor, std::move(__f));
 8005a7c:	687c      	ldr	r4, [r7, #4]
 8005a7e:	463b      	mov	r3, r7
 8005a80:	4618      	mov	r0, r3
 8005a82:	f000 f9d3 	bl	8005e2c <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005a86:	4603      	mov	r3, r0
 8005a88:	4619      	mov	r1, r3
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f000 f9d9 	bl	8005e42 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>
	    _M_invoker = &_My_handler::_M_invoke;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	4a05      	ldr	r2, [pc, #20]	; (8005aa8 <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x4c>)
 8005a94:	60da      	str	r2, [r3, #12]
	    _M_manager = &_My_handler::_M_manager;
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	4a04      	ldr	r2, [pc, #16]	; (8005aac <_ZNSt8functionIFijjPfEEC1IPS1_vvEET_+0x50>)
 8005a9a:	609a      	str	r2, [r3, #8]
      }
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	370c      	adds	r7, #12
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd90      	pop	{r4, r7, pc}
 8005aa6:	bf00      	nop
 8005aa8:	08005e67 	.word	0x08005e67
 8005aac:	08005eaf 	.word	0x08005eaf

08005ab0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>:
    move(_Tp&& __t) noexcept
 8005ab0:	b480      	push	{r7}
 8005ab2:	b083      	sub	sp, #12
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4618      	mov	r0, r3
 8005abc:	370c      	adds	r7, #12
 8005abe:	46bd      	mov	sp, r7
 8005ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac4:	4770      	bx	lr

08005ac6 <_ZSt4swapISt9_Any_dataENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleIS5_ESt18is_move_assignableIS5_EEE5valueEvE4typeERS5_SF_>:
    inline
#if __cplusplus >= 201103L
    typename enable_if<__and_<__not_<__is_tuple_like<_Tp>>,
			      is_move_constructible<_Tp>,
			      is_move_assignable<_Tp>>::value>::type
    swap(_Tp& __a, _Tp& __b)
 8005ac6:	b580      	push	{r7, lr}
 8005ac8:	b084      	sub	sp, #16
 8005aca:	af00      	add	r7, sp, #0
 8005acc:	6078      	str	r0, [r7, #4]
 8005ace:	6039      	str	r1, [r7, #0]
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005ad0:	6878      	ldr	r0, [r7, #4]
 8005ad2:	f7ff ffed 	bl	8005ab0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005ad6:	4602      	mov	r2, r0
 8005ad8:	f107 0308 	add.w	r3, r7, #8
 8005adc:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005ae0:	e883 0003 	stmia.w	r3, {r0, r1}
      __a = _GLIBCXX_MOVE(__b);
 8005ae4:	6838      	ldr	r0, [r7, #0]
 8005ae6:	f7ff ffe3 	bl	8005ab0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005aea:	4602      	mov	r2, r0
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005af2:	e883 0003 	stmia.w	r3, {r0, r1}
      __b = _GLIBCXX_MOVE(__tmp);
 8005af6:	f107 0308 	add.w	r3, r7, #8
 8005afa:	4618      	mov	r0, r3
 8005afc:	f7ff ffd8 	bl	8005ab0 <_ZSt4moveIRSt9_Any_dataEONSt16remove_referenceIT_E4typeEOS3_>
 8005b00:	4602      	mov	r2, r0
 8005b02:	683b      	ldr	r3, [r7, #0]
 8005b04:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005b08:	e883 0003 	stmia.w	r3, {r0, r1}
    }
 8005b0c:	bf00      	nop
 8005b0e:	3710      	adds	r7, #16
 8005b10:	46bd      	mov	sp, r7
 8005b12:	bd80      	pop	{r7, pc}

08005b14 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>:
    move(_Tp&& __t) noexcept
 8005b14:	b480      	push	{r7}
 8005b16:	b083      	sub	sp, #12
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	4618      	mov	r0, r3
 8005b20:	370c      	adds	r7, #12
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <_ZSt4swapIPFbRSt9_Any_dataRKS0_St18_Manager_operationEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISB_ESt18is_move_assignableISB_EEE5valueEvE4typeERSB_SL_>:
    swap(_Tp& __a, _Tp& __b)
 8005b2a:	b580      	push	{r7, lr}
 8005b2c:	b084      	sub	sp, #16
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
 8005b32:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f7ff ffed 	bl	8005b14 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005b3a:	4603      	mov	r3, r0
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005b40:	6838      	ldr	r0, [r7, #0]
 8005b42:	f7ff ffe7 	bl	8005b14 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005b46:	4603      	mov	r3, r0
 8005b48:	681a      	ldr	r2, [r3, #0]
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005b4e:	f107 030c 	add.w	r3, r7, #12
 8005b52:	4618      	mov	r0, r3
 8005b54:	f7ff ffde 	bl	8005b14 <_ZSt4moveIRPFbRSt9_Any_dataRKS0_St18_Manager_operationEEONSt16remove_referenceIT_E4typeEOS9_>
 8005b58:	4603      	mov	r3, r0
 8005b5a:	681a      	ldr	r2, [r3, #0]
 8005b5c:	683b      	ldr	r3, [r7, #0]
 8005b5e:	601a      	str	r2, [r3, #0]
    }
 8005b60:	bf00      	nop
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	bd80      	pop	{r7, pc}

08005b68 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>:
    move(_Tp&& __t) noexcept
 8005b68:	b480      	push	{r7}
 8005b6a:	b083      	sub	sp, #12
 8005b6c:	af00      	add	r7, sp, #0
 8005b6e:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	4618      	mov	r0, r3
 8005b74:	370c      	adds	r7, #12
 8005b76:	46bd      	mov	sp, r7
 8005b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7c:	4770      	bx	lr

08005b7e <_ZSt4swapIPFiRKSt9_Any_dataOjS3_OPfEENSt9enable_ifIXsrSt6__and_IJSt6__not_ISt15__is_tuple_likeIT_EESt21is_move_constructibleISC_ESt18is_move_assignableISC_EEE5valueEvE4typeERSC_SM_>:
    swap(_Tp& __a, _Tp& __b)
 8005b7e:	b580      	push	{r7, lr}
 8005b80:	b084      	sub	sp, #16
 8005b82:	af00      	add	r7, sp, #0
 8005b84:	6078      	str	r0, [r7, #4]
 8005b86:	6039      	str	r1, [r7, #0]
      _Tp __tmp = _GLIBCXX_MOVE(__a);
 8005b88:	6878      	ldr	r0, [r7, #4]
 8005b8a:	f7ff ffed 	bl	8005b68 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005b8e:	4603      	mov	r3, r0
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	60fb      	str	r3, [r7, #12]
      __a = _GLIBCXX_MOVE(__b);
 8005b94:	6838      	ldr	r0, [r7, #0]
 8005b96:	f7ff ffe7 	bl	8005b68 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	681a      	ldr	r2, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	601a      	str	r2, [r3, #0]
      __b = _GLIBCXX_MOVE(__tmp);
 8005ba2:	f107 030c 	add.w	r3, r7, #12
 8005ba6:	4618      	mov	r0, r3
 8005ba8:	f7ff ffde 	bl	8005b68 <_ZSt4moveIRPFiRKSt9_Any_dataOjS3_OPfEEONSt16remove_referenceIT_E4typeEOSA_>
 8005bac:	4603      	mov	r3, r0
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	683b      	ldr	r3, [r7, #0]
 8005bb2:	601a      	str	r2, [r3, #0]
    }
 8005bb4:	bf00      	nop
 8005bb6:	3710      	adds	r7, #16
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}

08005bbc <_ZSt8_DestroyIPmEvT_S1_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b082      	sub	sp, #8
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8005bc6:	6839      	ldr	r1, [r7, #0]
 8005bc8:	6878      	ldr	r0, [r7, #4]
 8005bca:	f000 f9af 	bl	8005f2c <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>
    }
 8005bce:	bf00      	nop
 8005bd0:	3708      	adds	r7, #8
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <_ZN9__gnu_cxx13new_allocatorImEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8005bd6:	b480      	push	{r7}
 8005bd8:	b083      	sub	sp, #12
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4618      	mov	r0, r3
 8005be2:	370c      	adds	r7, #12
 8005be4:	46bd      	mov	sp, r7
 8005be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bea:	4770      	bx	lr

08005bec <_ZNSt16allocator_traitsISaImEE10deallocateERS0_Pmj>:
       *  @param  __n  The number of objects space was allocated for.
       *
       *  Calls <tt> a.deallocate(p, n) </tt>
      */
      static void
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8005bec:	b580      	push	{r7, lr}
 8005bee:	b084      	sub	sp, #16
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	60f8      	str	r0, [r7, #12]
 8005bf4:	60b9      	str	r1, [r7, #8]
 8005bf6:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8005bf8:	687a      	ldr	r2, [r7, #4]
 8005bfa:	68b9      	ldr	r1, [r7, #8]
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f000 f9a0 	bl	8005f42 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>
 8005c02:	bf00      	nop
 8005c04:	3710      	adds	r7, #16
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}

08005c0a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8005c0a:	b480      	push	{r7}
 8005c0c:	b083      	sub	sp, #12
 8005c0e:	af00      	add	r7, sp, #0
 8005c10:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	4618      	mov	r0, r3
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>:
       *
       *  Calls <tt> __a.construct(__p, std::forward<Args>(__args)...) </tt>
      */
      template<typename _Up, typename... _Args>
	static void
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8005c20:	b580      	push	{r7, lr}
 8005c22:	b084      	sub	sp, #16
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	60f8      	str	r0, [r7, #12]
 8005c28:	60b9      	str	r1, [r7, #8]
 8005c2a:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(__a.construct(__p, std::forward<_Args>(__args)...)))
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8005c2c:	6878      	ldr	r0, [r7, #4]
 8005c2e:	f7ff ffec 	bl	8005c0a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8005c32:	4603      	mov	r3, r0
 8005c34:	461a      	mov	r2, r3
 8005c36:	68b9      	ldr	r1, [r7, #8]
 8005c38:	68f8      	ldr	r0, [r7, #12]
 8005c3a:	f000 f98f 	bl	8005f5c <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>
 8005c3e:	bf00      	nop
 8005c40:	3710      	adds	r7, #16
 8005c42:	46bd      	mov	sp, r7
 8005c44:	bd80      	pop	{r7, pc}

08005c46 <_ZNSt6vectorImSaImEE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8005c46:	b580      	push	{r7, lr}
 8005c48:	b084      	sub	sp, #16
 8005c4a:	af00      	add	r7, sp, #0
 8005c4c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	1d1a      	adds	r2, r3, #4
 8005c52:	f107 030c 	add.w	r3, r7, #12
 8005c56:	4611      	mov	r1, r2
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f000 f995 	bl	8005f88 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	4618      	mov	r0, r3
 8005c62:	3710      	adds	r7, #16
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}

08005c68 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>:
      _S_use_relocate()
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b082      	sub	sp, #8
 8005c6c:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8005c6e:	4618      	mov	r0, r3
 8005c70:	f000 f805 	bl	8005c7e <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8005c74:	4603      	mov	r3, r0
      }
 8005c76:	4618      	mov	r0, r3
 8005c78:	3708      	adds	r7, #8
 8005c7a:	46bd      	mov	sp, r7
 8005c7c:	bd80      	pop	{r7, pc}

08005c7e <_ZNSt6vectorImSaImEE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8005c7e:	b480      	push	{r7}
 8005c80:	b083      	sub	sp, #12
 8005c82:	af00      	add	r7, sp, #0
 8005c84:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8005c86:	2301      	movs	r3, #1
      }
 8005c88:	4618      	mov	r0, r3
 8005c8a:	370c      	adds	r7, #12
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c92:	4770      	bx	lr

08005c94 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_>:

#if __cplusplus >= 201103L
  template<typename _Tp, typename _Alloc>
    template<typename... _Args>
      void
      vector<_Tp, _Alloc>::
 8005c94:	b5b0      	push	{r4, r5, r7, lr}
 8005c96:	b08c      	sub	sp, #48	; 0x30
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	60f8      	str	r0, [r7, #12]
 8005c9c:	60b9      	str	r1, [r7, #8]
 8005c9e:	607a      	str	r2, [r7, #4]
    void
    vector<_Tp, _Alloc>::
    _M_realloc_insert(iterator __position, const _Tp& __x)
#endif
    {
      const size_type __len =
 8005ca0:	4a59      	ldr	r2, [pc, #356]	; (8005e08 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x174>)
 8005ca2:	2101      	movs	r1, #1
 8005ca4:	68f8      	ldr	r0, [r7, #12]
 8005ca6:	f000 f97f 	bl	8005fa8 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>
 8005caa:	62b8      	str	r0, [r7, #40]	; 0x28
	_M_check_len(size_type(1), "vector::_M_realloc_insert");
      pointer __old_start = this->_M_impl._M_start;
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	685b      	ldr	r3, [r3, #4]
 8005cb6:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8005cb8:	68f8      	ldr	r0, [r7, #12]
 8005cba:	f000 f9bc 	bl	8006036 <_ZNSt6vectorImSaImEE5beginEv>
 8005cbe:	4603      	mov	r3, r0
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	f107 0214 	add.w	r2, r7, #20
 8005cc6:	f107 0308 	add.w	r3, r7, #8
 8005cca:	4611      	mov	r1, r2
 8005ccc:	4618      	mov	r0, r3
 8005cce:	f000 f9c2 	bl	8006056 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cda:	4618      	mov	r0, r3
 8005cdc:	f000 f9d0 	bl	8006080 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>
 8005ce0:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8005ce2:	69bb      	ldr	r3, [r7, #24]
 8005ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
	  // The order of the three operations is dictated by the C++11
	  // case, where the moves could alter a new element belonging
	  // to the existing vector.  This is an issue only for callers
	  // taking the element by lvalue ref (see last bullet of C++11
	  // [res.on.arguments]).
	  _Alloc_traits::construct(this->_M_impl,
 8005ce6:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8005ce8:	69fb      	ldr	r3, [r7, #28]
 8005cea:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8005cec:	69ba      	ldr	r2, [r7, #24]
 8005cee:	18d5      	adds	r5, r2, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f7ff ff8a 	bl	8005c0a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8005cf6:	4603      	mov	r3, r0
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	4629      	mov	r1, r5
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f7ff ff8f 	bl	8005c20 <_ZNSt16allocator_traitsISaImEE9constructImJmEEEvRS0_PT_DpOT0_>
#if __cplusplus >= 201103L
				   std::forward<_Args>(__args)...);
#else
				   __x);
#endif
	  __new_finish = pointer();
 8005d02:	2300      	movs	r3, #0
 8005d04:	62fb      	str	r3, [r7, #44]	; 0x2c

#if __cplusplus >= 201103L
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8005d06:	f7ff ffaf 	bl	8005c68 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d027      	beq.n	8005d60 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0xcc>
	    {
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005d10:	f107 0308 	add.w	r3, r7, #8
 8005d14:	4618      	mov	r0, r3
 8005d16:	f000 f9db 	bl	80060d0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	4618      	mov	r0, r3
 8005d22:	f7ff fdce 	bl	80058c2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005d26:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8005d28:	69ba      	ldr	r2, [r7, #24]
 8005d2a:	4621      	mov	r1, r4
 8005d2c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d2e:	f000 f9bb 	bl	80060a8 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8005d32:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8005d34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d36:	3304      	adds	r3, #4
 8005d38:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005d3a:	f107 0308 	add.w	r3, r7, #8
 8005d3e:	4618      	mov	r0, r3
 8005d40:	f000 f9c6 	bl	80060d0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8005d44:	4603      	mov	r3, r0
 8005d46:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	4618      	mov	r0, r3
 8005d4c:	f7ff fdb9 	bl	80058c2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005d50:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8005d52:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005d54:	6a39      	ldr	r1, [r7, #32]
 8005d56:	4620      	mov	r0, r4
 8005d58:	f000 f9a6 	bl	80060a8 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>
 8005d5c:	62f8      	str	r0, [r7, #44]	; 0x2c
 8005d5e:	e026      	b.n	8005dae <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x11a>
	  else
#endif
	    {
	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__old_start, __position.base(),
 8005d60:	f107 0308 	add.w	r3, r7, #8
 8005d64:	4618      	mov	r0, r3
 8005d66:	f000 f9b3 	bl	80060d0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8005d6e:	68fb      	ldr	r3, [r7, #12]
 8005d70:	4618      	mov	r0, r3
 8005d72:	f7ff fda6 	bl	80058c2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005d76:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8005d78:	69ba      	ldr	r2, [r7, #24]
 8005d7a:	4621      	mov	r1, r4
 8005d7c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005d7e:	f000 f9b2 	bl	80060e6 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8005d82:	62f8      	str	r0, [r7, #44]	; 0x2c

	      ++__new_finish;
 8005d84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d86:	3304      	adds	r3, #4
 8005d88:	62fb      	str	r3, [r7, #44]	; 0x2c

	      __new_finish
		= std::__uninitialized_move_if_noexcept_a
		(__position.base(), __old_finish,
 8005d8a:	f107 0308 	add.w	r3, r7, #8
 8005d8e:	4618      	mov	r0, r3
 8005d90:	f000 f99e 	bl	80060d0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8005d94:	4603      	mov	r3, r0
 8005d96:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	f7ff fd91 	bl	80058c2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005da0:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8005da2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005da4:	6a39      	ldr	r1, [r7, #32]
 8005da6:	4620      	mov	r0, r4
 8005da8:	f000 f99d 	bl	80060e6 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8005dac:	62f8      	str	r0, [r7, #44]	; 0x2c
	    std::_Destroy(__new_start, __new_finish, _M_get_Tp_allocator());
	  _M_deallocate(__new_start, __len);
	  __throw_exception_again;
	}
#if __cplusplus >= 201103L
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8005dae:	f7ff ff5b 	bl	8005c68 <_ZNSt6vectorImSaImEE15_S_use_relocateEv>
 8005db2:	4603      	mov	r3, r0
 8005db4:	f083 0301 	eor.w	r3, r3, #1
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d009      	beq.n	8005dd2 <_ZNSt6vectorImSaImEE17_M_realloc_insertIJmEEEvN9__gnu_cxx17__normal_iteratorIPmS1_EEDpOT_+0x13e>
#endif
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	f7ff fd7e 	bl	80058c2 <_ZNSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 8005dc6:	4603      	mov	r3, r0
 8005dc8:	461a      	mov	r2, r3
 8005dca:	6a39      	ldr	r1, [r7, #32]
 8005dcc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005dce:	f7ff fd83 	bl	80058d8 <_ZSt8_DestroyIPmmEvT_S1_RSaIT0_E>
      _GLIBCXX_ASAN_ANNOTATE_REINIT;
      _M_deallocate(__old_start,
 8005dd2:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	689a      	ldr	r2, [r3, #8]
 8005dd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dda:	1ad3      	subs	r3, r2, r3
 8005ddc:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8005dde:	461a      	mov	r2, r3
 8005de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005de2:	f7ff fdb2 	bl	800594a <_ZNSt12_Vector_baseImSaImEE13_M_deallocateEPmj>
      this->_M_impl._M_start = __new_start;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	69ba      	ldr	r2, [r7, #24]
 8005dea:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005df0:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	009b      	lsls	r3, r3, #2
 8005df6:	69ba      	ldr	r2, [r7, #24]
 8005df8:	441a      	add	r2, r3
 8005dfa:	68fb      	ldr	r3, [r7, #12]
 8005dfc:	609a      	str	r2, [r3, #8]
    }
 8005dfe:	bf00      	nop
 8005e00:	3730      	adds	r7, #48	; 0x30
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bdb0      	pop	{r4, r5, r7, pc}
 8005e06:	bf00      	nop
 8005e08:	0801e01c 	.word	0x0801e01c

08005e0c <_ZNSt14_Function_base13_Base_managerIPFijjPfEE21_M_not_empty_functionIS2_EEbPT_>:
	  _M_not_empty_function(_Tp* __fp)
 8005e0c:	b480      	push	{r7}
 8005e0e:	b083      	sub	sp, #12
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
	  { return __fp != nullptr; }
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bf14      	ite	ne
 8005e1a:	2301      	movne	r3, #1
 8005e1c:	2300      	moveq	r3, #0
 8005e1e:	b2db      	uxtb	r3, r3
 8005e20:	4618      	mov	r0, r3
 8005e22:	370c      	adds	r7, #12
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>:
    move(_Tp&& __t) noexcept
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
    { return static_cast<typename std::remove_reference<_Tp>::type&&>(__t); }
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	4618      	mov	r0, r3
 8005e38:	370c      	adds	r7, #12
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr

08005e42 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f)
 8005e42:	b590      	push	{r4, r7, lr}
 8005e44:	b085      	sub	sp, #20
 8005e46:	af00      	add	r7, sp, #0
 8005e48:	6078      	str	r0, [r7, #4]
 8005e4a:	6039      	str	r1, [r7, #0]
	{ _M_init_functor(__functor, std::move(__f), _Local_storage()); }
 8005e4c:	6838      	ldr	r0, [r7, #0]
 8005e4e:	f7ff ffed 	bl	8005e2c <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 8005e52:	4603      	mov	r3, r0
 8005e54:	4622      	mov	r2, r4
 8005e56:	4619      	mov	r1, r3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f000 f95d 	bl	8006118 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>
 8005e5e:	bf00      	nop
 8005e60:	3714      	adds	r7, #20
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd90      	pop	{r4, r7, pc}

08005e66 <_ZNSt17_Function_handlerIFijjPfEPS1_E9_M_invokeERKSt9_Any_dataOjS7_OS0_>:
      _M_invoke(const _Any_data& __functor, _ArgTypes&&... __args)
 8005e66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	60f8      	str	r0, [r7, #12]
 8005e6e:	60b9      	str	r1, [r7, #8]
 8005e70:	607a      	str	r2, [r7, #4]
 8005e72:	603b      	str	r3, [r7, #0]
	return (*_Base::_M_get_pointer(__functor))(
 8005e74:	68f8      	ldr	r0, [r7, #12]
 8005e76:	f000 f968 	bl	800614a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	681c      	ldr	r4, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005e7e:	68b8      	ldr	r0, [r7, #8]
 8005e80:	f7ff fd09 	bl	8005896 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005e84:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005e86:	681d      	ldr	r5, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005e88:	6878      	ldr	r0, [r7, #4]
 8005e8a:	f7ff fd04 	bl	8005896 <_ZSt7forwardIjEOT_RNSt16remove_referenceIS0_E4typeE>
 8005e8e:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005e90:	681e      	ldr	r6, [r3, #0]
	    std::forward<_ArgTypes>(__args)...);
 8005e92:	6838      	ldr	r0, [r7, #0]
 8005e94:	f7ff fd0a 	bl	80058ac <_ZSt7forwardIPfEOT_RNSt16remove_referenceIS1_E4typeE>
 8005e98:	4603      	mov	r3, r0
	return (*_Base::_M_get_pointer(__functor))(
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	461a      	mov	r2, r3
 8005e9e:	4631      	mov	r1, r6
 8005ea0:	4628      	mov	r0, r5
 8005ea2:	47a0      	blx	r4
 8005ea4:	4603      	mov	r3, r0
      }
 8005ea6:	4618      	mov	r0, r3
 8005ea8:	3714      	adds	r7, #20
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005eae <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation>:
	_M_manager(_Any_data& __dest, const _Any_data& __source,
 8005eae:	b5b0      	push	{r4, r5, r7, lr}
 8005eb0:	b086      	sub	sp, #24
 8005eb2:	af00      	add	r7, sp, #0
 8005eb4:	60f8      	str	r0, [r7, #12]
 8005eb6:	60b9      	str	r1, [r7, #8]
 8005eb8:	4613      	mov	r3, r2
 8005eba:	71fb      	strb	r3, [r7, #7]
	  switch (__op)
 8005ebc:	79fb      	ldrb	r3, [r7, #7]
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d016      	beq.n	8005ef0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x42>
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	dc19      	bgt.n	8005efa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d002      	beq.n	8005ed0 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x22>
 8005eca:	2b02      	cmp	r3, #2
 8005ecc:	d00a      	beq.n	8005ee4 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x36>
 8005ece:	e014      	b.n	8005efa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      __dest._M_access<_Functor*>() = _M_get_pointer(__source);
 8005ed0:	68f8      	ldr	r0, [r7, #12]
 8005ed2:	f000 f94b 	bl	800616c <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>
 8005ed6:	4604      	mov	r4, r0
 8005ed8:	68b8      	ldr	r0, [r7, #8]
 8005eda:	f000 f936 	bl	800614a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>
 8005ede:	4603      	mov	r3, r0
 8005ee0:	6023      	str	r3, [r4, #0]
	      break;
 8005ee2:	e00a      	b.n	8005efa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_clone(__dest, __source, _Local_storage());
 8005ee4:	462a      	mov	r2, r5
 8005ee6:	68b9      	ldr	r1, [r7, #8]
 8005ee8:	68f8      	ldr	r0, [r7, #12]
 8005eea:	f000 f94b 	bl	8006184 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>
	      break;
 8005eee:	e004      	b.n	8005efa <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_managerERSt9_Any_dataRKS5_St18_Manager_operation+0x4c>
	      _M_destroy(__dest, _Local_storage());
 8005ef0:	4621      	mov	r1, r4
 8005ef2:	68f8      	ldr	r0, [r7, #12]
 8005ef4:	f000 f95f 	bl	80061b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>
	      break;
 8005ef8:	bf00      	nop
	  return false;
 8005efa:	2300      	movs	r3, #0
	}
 8005efc:	4618      	mov	r0, r3
 8005efe:	3718      	adds	r7, #24
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bdb0      	pop	{r4, r5, r7, pc}

08005f04 <_ZSt3maxIjERKT_S2_S2_>:
   *  preprocessor macro.
  */
  template<typename _Tp>
    _GLIBCXX14_CONSTEXPR
    inline const _Tp&
    max(const _Tp& __a, const _Tp& __b)
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
 8005f0c:	6039      	str	r1, [r7, #0]
    {
      // concept requirements
      __glibcxx_function_requires(_LessThanComparableConcept<_Tp>)
      //return  __a < __b ? __b : __a;
      if (__a < __b)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	429a      	cmp	r2, r3
 8005f18:	d201      	bcs.n	8005f1e <_ZSt3maxIjERKT_S2_S2_+0x1a>
	return __b;
 8005f1a:	683b      	ldr	r3, [r7, #0]
 8005f1c:	e000      	b.n	8005f20 <_ZSt3maxIjERKT_S2_S2_+0x1c>
      return __a;
 8005f1e:	687b      	ldr	r3, [r7, #4]
    }
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr

08005f2c <_ZNSt12_Destroy_auxILb1EE9__destroyIPmEEvT_S3_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 8005f2c:	b480      	push	{r7}
 8005f2e:	b083      	sub	sp, #12
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
 8005f36:	bf00      	nop
 8005f38:	370c      	adds	r7, #12
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f40:	4770      	bx	lr

08005f42 <_ZN9__gnu_cxx13new_allocatorImE10deallocateEPmj>:
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
      }

      // __p is not permitted to be a null pointer.
      void
      deallocate(pointer __p, size_type)
 8005f42:	b580      	push	{r7, lr}
 8005f44:	b084      	sub	sp, #16
 8005f46:	af00      	add	r7, sp, #0
 8005f48:	60f8      	str	r0, [r7, #12]
 8005f4a:	60b9      	str	r1, [r7, #8]
 8005f4c:	607a      	str	r2, [r7, #4]
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
 8005f4e:	68b8      	ldr	r0, [r7, #8]
 8005f50:	f011 ff62 	bl	8017e18 <_ZdlPv>
      }
 8005f54:	bf00      	nop
 8005f56:	3710      	adds	r7, #16
 8005f58:	46bd      	mov	sp, r7
 8005f5a:	bd80      	pop	{r7, pc}

08005f5c <_ZN9__gnu_cxx13new_allocatorImE9constructImJmEEEvPT_DpOT0_>:
      }

#if __cplusplus >= 201103L
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
 8005f5c:	b590      	push	{r4, r7, lr}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	60f8      	str	r0, [r7, #12]
 8005f64:	60b9      	str	r1, [r7, #8]
 8005f66:	607a      	str	r2, [r7, #4]
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f7ff fe4e 	bl	8005c0a <_ZSt7forwardImEOT_RNSt16remove_referenceIS0_E4typeE>
 8005f6e:	4603      	mov	r3, r0
 8005f70:	681c      	ldr	r4, [r3, #0]
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	4619      	mov	r1, r3
 8005f76:	2004      	movs	r0, #4
 8005f78:	f7fb f858 	bl	800102c <_ZnwjPv>
 8005f7c:	4603      	mov	r3, r0
 8005f7e:	601c      	str	r4, [r3, #0]
 8005f80:	bf00      	nop
 8005f82:	3714      	adds	r7, #20
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd90      	pop	{r4, r7, pc}

08005f88 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>:

      _GLIBCXX_CONSTEXPR __normal_iterator() _GLIBCXX_NOEXCEPT
      : _M_current(_Iterator()) { }

      explicit
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 8005f88:	b480      	push	{r7}
 8005f8a:	b083      	sub	sp, #12
 8005f8c:	af00      	add	r7, sp, #0
 8005f8e:	6078      	str	r0, [r7, #4]
 8005f90:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	681a      	ldr	r2, [r3, #0]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	601a      	str	r2, [r3, #0]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	370c      	adds	r7, #12
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fa6:	4770      	bx	lr

08005fa8 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc>:
      { return _M_insert_rval(__position, std::move(__v)); }
#endif

      // Called by _M_fill_insert, _M_insert_aux etc.
      size_type
      _M_check_len(size_type __n, const char* __s) const
 8005fa8:	b590      	push	{r4, r7, lr}
 8005faa:	b087      	sub	sp, #28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
      {
	if (max_size() - size() < __n)
 8005fb4:	68f8      	ldr	r0, [r7, #12]
 8005fb6:	f000 f90a 	bl	80061ce <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8005fba:	4604      	mov	r4, r0
 8005fbc:	68f8      	ldr	r0, [r7, #12]
 8005fbe:	f7ff fbfa 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	1ae2      	subs	r2, r4, r3
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	429a      	cmp	r2, r3
 8005fca:	bf34      	ite	cc
 8005fcc:	2301      	movcc	r3, #1
 8005fce:	2300      	movcs	r3, #0
 8005fd0:	b2db      	uxtb	r3, r3
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d002      	beq.n	8005fdc <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f011 ff4c 	bl	8017e74 <_ZSt20__throw_length_errorPKc>

	const size_type __len = size() + (std::max)(size(), __n);
 8005fdc:	68f8      	ldr	r0, [r7, #12]
 8005fde:	f7ff fbea 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 8005fe2:	4604      	mov	r4, r0
 8005fe4:	68f8      	ldr	r0, [r7, #12]
 8005fe6:	f7ff fbe6 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 8005fea:	4603      	mov	r3, r0
 8005fec:	613b      	str	r3, [r7, #16]
 8005fee:	f107 0208 	add.w	r2, r7, #8
 8005ff2:	f107 0310 	add.w	r3, r7, #16
 8005ff6:	4611      	mov	r1, r2
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7ff ff83 	bl	8005f04 <_ZSt3maxIjERKT_S2_S2_>
 8005ffe:	4603      	mov	r3, r0
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	4423      	add	r3, r4
 8006004:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8006006:	68f8      	ldr	r0, [r7, #12]
 8006008:	f7ff fbd5 	bl	80057b6 <_ZNKSt6vectorImSaImEE4sizeEv>
 800600c:	4602      	mov	r2, r0
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	4293      	cmp	r3, r2
 8006012:	d306      	bcc.n	8006022 <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x7a>
 8006014:	68f8      	ldr	r0, [r7, #12]
 8006016:	f000 f8da 	bl	80061ce <_ZNKSt6vectorImSaImEE8max_sizeEv>
 800601a:	4602      	mov	r2, r0
 800601c:	697b      	ldr	r3, [r7, #20]
 800601e:	4293      	cmp	r3, r2
 8006020:	d904      	bls.n	800602c <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x84>
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f000 f8d3 	bl	80061ce <_ZNKSt6vectorImSaImEE8max_sizeEv>
 8006028:	4603      	mov	r3, r0
 800602a:	e000      	b.n	800602e <_ZNKSt6vectorImSaImEE12_M_check_lenEjPKc+0x86>
 800602c:	697b      	ldr	r3, [r7, #20]
      }
 800602e:	4618      	mov	r0, r3
 8006030:	371c      	adds	r7, #28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd90      	pop	{r4, r7, pc}

08006036 <_ZNSt6vectorImSaImEE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8006036:	b580      	push	{r7, lr}
 8006038:	b084      	sub	sp, #16
 800603a:	af00      	add	r7, sp, #0
 800603c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 800603e:	687a      	ldr	r2, [r7, #4]
 8006040:	f107 030c 	add.w	r3, r7, #12
 8006044:	4611      	mov	r1, r2
 8006046:	4618      	mov	r0, r3
 8006048:	f7ff ff9e 	bl	8005f88 <_ZN9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEEC1ERKS1_>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <_ZN9__gnu_cxxmiIPmSt6vectorImSaImEEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS8_SB_>:
#endif
    { return __lhs.base() - __rhs.base(); }

  template<typename _Iterator, typename _Container>
    inline typename __normal_iterator<_Iterator, _Container>::difference_type
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8006056:	b590      	push	{r4, r7, lr}
 8006058:	b083      	sub	sp, #12
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	6039      	str	r1, [r7, #0]
	      const __normal_iterator<_Iterator, _Container>& __rhs)
    _GLIBCXX_NOEXCEPT
    { return __lhs.base() - __rhs.base(); }
 8006060:	6878      	ldr	r0, [r7, #4]
 8006062:	f000 f835 	bl	80060d0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006066:	4603      	mov	r3, r0
 8006068:	681c      	ldr	r4, [r3, #0]
 800606a:	6838      	ldr	r0, [r7, #0]
 800606c:	f000 f830 	bl	80060d0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>
 8006070:	4603      	mov	r3, r0
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	1ae3      	subs	r3, r4, r3
 8006076:	109b      	asrs	r3, r3, #2
 8006078:	4618      	mov	r0, r3
 800607a:	370c      	adds	r7, #12
 800607c:	46bd      	mov	sp, r7
 800607e:	bd90      	pop	{r4, r7, pc}

08006080 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8006080:	b580      	push	{r7, lr}
 8006082:	b082      	sub	sp, #8
 8006084:	af00      	add	r7, sp, #0
 8006086:	6078      	str	r0, [r7, #4]
 8006088:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	2b00      	cmp	r3, #0
 800608e:	d006      	beq.n	800609e <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x1e>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	6839      	ldr	r1, [r7, #0]
 8006094:	4618      	mov	r0, r3
 8006096:	f000 f8ab 	bl	80061f0 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>
 800609a:	4603      	mov	r3, r0
 800609c:	e000      	b.n	80060a0 <_ZNSt12_Vector_baseImSaImEE11_M_allocateEj+0x20>
 800609e:	2300      	movs	r3, #0
      }
 80060a0:	4618      	mov	r0, r3
 80060a2:	3708      	adds	r7, #8
 80060a4:	46bd      	mov	sp, r7
 80060a6:	bd80      	pop	{r7, pc}

080060a8 <_ZNSt6vectorImSaImEE11_S_relocateEPmS2_S2_RS0_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80060a8:	b590      	push	{r4, r7, lr}
 80060aa:	b089      	sub	sp, #36	; 0x24
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
 80060b4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80060b6:	f88d 4000 	strb.w	r4, [sp]
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	687a      	ldr	r2, [r7, #4]
 80060be:	68b9      	ldr	r1, [r7, #8]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f8a4 	bl	800620e <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>
 80060c6:	4603      	mov	r3, r0
      }
 80060c8:	4618      	mov	r0, r3
 80060ca:	371c      	adds	r7, #28
 80060cc:	46bd      	mov	sp, r7
 80060ce:	bd90      	pop	{r4, r7, pc}

080060d0 <_ZNK9__gnu_cxx17__normal_iteratorIPmSt6vectorImSaImEEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80060d0:	b480      	push	{r7}
 80060d2:	b083      	sub	sp, #12
 80060d4:	af00      	add	r7, sp, #0
 80060d6:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	4618      	mov	r0, r3
 80060dc:	370c      	adds	r7, #12
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr

080060e6 <_ZSt34__uninitialized_move_if_noexcept_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template<typename _InputIterator, typename _ForwardIterator,
	   typename _Allocator>
    inline _ForwardIterator
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80060e6:	b590      	push	{r4, r7, lr}
 80060e8:	b085      	sub	sp, #20
 80060ea:	af00      	add	r7, sp, #0
 80060ec:	60f8      	str	r0, [r7, #12]
 80060ee:	60b9      	str	r1, [r7, #8]
 80060f0:	607a      	str	r2, [r7, #4]
 80060f2:	603b      	str	r3, [r7, #0]
				       _InputIterator __last,
				       _ForwardIterator __result,
				       _Allocator& __alloc)
    {
      return std::__uninitialized_copy_a
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f89c 	bl	8006232 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 80060fa:	4604      	mov	r4, r0
 80060fc:	68b8      	ldr	r0, [r7, #8]
 80060fe:	f000 f898 	bl	8006232 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>
 8006102:	4601      	mov	r1, r0
 8006104:	683b      	ldr	r3, [r7, #0]
 8006106:	687a      	ldr	r2, [r7, #4]
 8006108:	4620      	mov	r0, r4
 800610a:	f000 f8a1 	bl	8006250 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>
 800610e:	4603      	mov	r3, r0
	 _GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__last), __result, __alloc);
    }
 8006110:	4618      	mov	r0, r3
 8006112:	3714      	adds	r7, #20
 8006114:	46bd      	mov	sp, r7
 8006116:	bd90      	pop	{r4, r7, pc}

08006118 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE15_M_init_functorERSt9_Any_dataOS3_St17integral_constantIbLb1EE>:
	_M_init_functor(_Any_data& __functor, _Functor&& __f, true_type)
 8006118:	b590      	push	{r4, r7, lr}
 800611a:	b085      	sub	sp, #20
 800611c:	af00      	add	r7, sp, #0
 800611e:	60f8      	str	r0, [r7, #12]
 8006120:	60b9      	str	r1, [r7, #8]
 8006122:	713a      	strb	r2, [r7, #4]
	{ ::new (__functor._M_access()) _Functor(std::move(__f)); }
 8006124:	68b8      	ldr	r0, [r7, #8]
 8006126:	f7ff fe81 	bl	8005e2c <_ZSt4moveIRPFijjPfEEONSt16remove_referenceIT_E4typeEOS5_>
 800612a:	4603      	mov	r3, r0
 800612c:	681c      	ldr	r4, [r3, #0]
 800612e:	68f8      	ldr	r0, [r7, #12]
 8006130:	f7fa ffd8 	bl	80010e4 <_ZNSt9_Any_data9_M_accessEv>
 8006134:	4603      	mov	r3, r0
 8006136:	4619      	mov	r1, r3
 8006138:	2004      	movs	r0, #4
 800613a:	f7fa ff77 	bl	800102c <_ZnwjPv>
 800613e:	4603      	mov	r3, r0
 8006140:	601c      	str	r4, [r3, #0]
 8006142:	bf00      	nop
 8006144:	3714      	adds	r7, #20
 8006146:	46bd      	mov	sp, r7
 8006148:	bd90      	pop	{r4, r7, pc}

0800614a <_ZNSt14_Function_base13_Base_managerIPFijjPfEE14_M_get_pointerERKSt9_Any_data>:
	_M_get_pointer(const _Any_data& __source)
 800614a:	b580      	push	{r7, lr}
 800614c:	b084      	sub	sp, #16
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
	      const _Functor& __f = __source._M_access<_Functor>();
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f000 f88d 	bl	8006272 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006158:	60f8      	str	r0, [r7, #12]
	      return const_cast<_Functor*>(std::__addressof(__f));
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 f895 	bl	800628a <_ZSt11__addressofIKPFijjPfEEPT_RS4_>
 8006160:	4603      	mov	r3, r0
 8006162:	bf00      	nop
	}
 8006164:	4618      	mov	r0, r3
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}

0800616c <_ZNSt9_Any_data9_M_accessIPPFijjPfEEERT_v>:
      _M_access()
 800616c:	b580      	push	{r7, lr}
 800616e:	b082      	sub	sp, #8
 8006170:	af00      	add	r7, sp, #0
 8006172:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f7fa ffb5 	bl	80010e4 <_ZNSt9_Any_data9_M_accessEv>
 800617a:	4603      	mov	r3, r0
 800617c:	4618      	mov	r0, r3
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE8_M_cloneERSt9_Any_dataRKS5_St17integral_constantIbLb1EE>:
	_M_clone(_Any_data& __dest, const _Any_data& __source, true_type)
 8006184:	b590      	push	{r4, r7, lr}
 8006186:	b085      	sub	sp, #20
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	713a      	strb	r2, [r7, #4]
	  ::new (__dest._M_access()) _Functor(__source._M_access<_Functor>());
 8006190:	68b8      	ldr	r0, [r7, #8]
 8006192:	f000 f86e 	bl	8006272 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>
 8006196:	4603      	mov	r3, r0
 8006198:	681c      	ldr	r4, [r3, #0]
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f7fa ffa2 	bl	80010e4 <_ZNSt9_Any_data9_M_accessEv>
 80061a0:	4603      	mov	r3, r0
 80061a2:	4619      	mov	r1, r3
 80061a4:	2004      	movs	r0, #4
 80061a6:	f7fa ff41 	bl	800102c <_ZnwjPv>
 80061aa:	4603      	mov	r3, r0
 80061ac:	601c      	str	r4, [r3, #0]
	}
 80061ae:	bf00      	nop
 80061b0:	3714      	adds	r7, #20
 80061b2:	46bd      	mov	sp, r7
 80061b4:	bd90      	pop	{r4, r7, pc}

080061b6 <_ZNSt14_Function_base13_Base_managerIPFijjPfEE10_M_destroyERSt9_Any_dataSt17integral_constantIbLb1EE>:
	_M_destroy(_Any_data& __victim, true_type)
 80061b6:	b580      	push	{r7, lr}
 80061b8:	b082      	sub	sp, #8
 80061ba:	af00      	add	r7, sp, #0
 80061bc:	6078      	str	r0, [r7, #4]
 80061be:	7039      	strb	r1, [r7, #0]
	  __victim._M_access<_Functor>().~_Functor();
 80061c0:	6878      	ldr	r0, [r7, #4]
 80061c2:	f000 f86d 	bl	80062a0 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>
	}
 80061c6:	bf00      	nop
 80061c8:	3708      	adds	r7, #8
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}

080061ce <_ZNKSt6vectorImSaImEE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80061ce:	b580      	push	{r7, lr}
 80061d0:	b082      	sub	sp, #8
 80061d2:	af00      	add	r7, sp, #0
 80061d4:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4618      	mov	r0, r3
 80061da:	f000 f89b 	bl	8006314 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>
 80061de:	4603      	mov	r3, r0
 80061e0:	4618      	mov	r0, r3
 80061e2:	f000 f87d 	bl	80062e0 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>
 80061e6:	4603      	mov	r3, r0
 80061e8:	4618      	mov	r0, r3
 80061ea:	3708      	adds	r7, #8
 80061ec:	46bd      	mov	sp, r7
 80061ee:	bd80      	pop	{r7, pc}

080061f0 <_ZNSt16allocator_traitsISaImEE8allocateERS0_j>:
      allocate(allocator_type& __a, size_type __n)
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
 80061f8:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80061fa:	2200      	movs	r2, #0
 80061fc:	6839      	ldr	r1, [r7, #0]
 80061fe:	6878      	ldr	r0, [r7, #4]
 8006200:	f000 f893 	bl	800632a <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>
 8006204:	4603      	mov	r3, r0
 8006206:	4618      	mov	r0, r3
 8006208:	3708      	adds	r7, #8
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}

0800620e <_ZNSt6vectorImSaImEE14_S_do_relocateEPmS2_S2_RS0_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 800620e:	b580      	push	{r7, lr}
 8006210:	b084      	sub	sp, #16
 8006212:	af00      	add	r7, sp, #0
 8006214:	60f8      	str	r0, [r7, #12]
 8006216:	60b9      	str	r1, [r7, #8]
 8006218:	607a      	str	r2, [r7, #4]
 800621a:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 800621c:	683b      	ldr	r3, [r7, #0]
 800621e:	687a      	ldr	r2, [r7, #4]
 8006220:	68b9      	ldr	r1, [r7, #8]
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f000 f89f 	bl	8006366 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>
 8006228:	4603      	mov	r3, r0
      }
 800622a:	4618      	mov	r0, r3
 800622c:	3710      	adds	r7, #16
 800622e:	46bd      	mov	sp, r7
 8006230:	bd80      	pop	{r7, pc}

08006232 <_ZSt32__make_move_if_noexcept_iteratorImSt13move_iteratorIPmEET0_PT_>:
  // returning a constant iterator when we don't want to move.
  template<typename _Tp, typename _ReturnType
    = typename conditional<__move_if_noexcept_cond<_Tp>::value,
			   const _Tp*, move_iterator<_Tp*>>::type>
    inline _GLIBCXX17_CONSTEXPR _ReturnType
    __make_move_if_noexcept_iterator(_Tp* __i)
 8006232:	b580      	push	{r7, lr}
 8006234:	b084      	sub	sp, #16
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 800623a:	f107 030c 	add.w	r3, r7, #12
 800623e:	6879      	ldr	r1, [r7, #4]
 8006240:	4618      	mov	r0, r3
 8006242:	f000 f8ad 	bl	80063a0 <_ZNSt13move_iteratorIPmEC1ES0_>
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	4618      	mov	r0, r3
 800624a:	3710      	adds	r7, #16
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPmES1_mET0_T_S4_S3_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	60f8      	str	r0, [r7, #12]
 8006258:	60b9      	str	r1, [r7, #8]
 800625a:	607a      	str	r2, [r7, #4]
 800625c:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 800625e:	687a      	ldr	r2, [r7, #4]
 8006260:	68b9      	ldr	r1, [r7, #8]
 8006262:	68f8      	ldr	r0, [r7, #12]
 8006264:	f000 f8ab 	bl	80063be <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 8006268:	4603      	mov	r3, r0
 800626a:	4618      	mov	r0, r3
 800626c:	3710      	adds	r7, #16
 800626e:	46bd      	mov	sp, r7
 8006270:	bd80      	pop	{r7, pc}

08006272 <_ZNKSt9_Any_data9_M_accessIPFijjPfEEERKT_v>:
      _M_access() const
 8006272:	b580      	push	{r7, lr}
 8006274:	b082      	sub	sp, #8
 8006276:	af00      	add	r7, sp, #0
 8006278:	6078      	str	r0, [r7, #4]
      { return *static_cast<const _Tp*>(_M_access()); }
 800627a:	6878      	ldr	r0, [r7, #4]
 800627c:	f7fa ff3d 	bl	80010fa <_ZNKSt9_Any_data9_M_accessEv>
 8006280:	4603      	mov	r3, r0
 8006282:	4618      	mov	r0, r3
 8006284:	3708      	adds	r7, #8
 8006286:	46bd      	mov	sp, r7
 8006288:	bd80      	pop	{r7, pc}

0800628a <_ZSt11__addressofIKPFijjPfEEPT_RS4_>:
    __addressof(_Tp& __r) _GLIBCXX_NOEXCEPT
 800628a:	b480      	push	{r7}
 800628c:	b083      	sub	sp, #12
 800628e:	af00      	add	r7, sp, #0
 8006290:	6078      	str	r0, [r7, #4]
    { return __builtin_addressof(__r); }
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	4618      	mov	r0, r3
 8006296:	370c      	adds	r7, #12
 8006298:	46bd      	mov	sp, r7
 800629a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629e:	4770      	bx	lr

080062a0 <_ZNSt9_Any_data9_M_accessIPFijjPfEEERT_v>:
      _M_access()
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b082      	sub	sp, #8
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	6078      	str	r0, [r7, #4]
      { return *static_cast<_Tp*>(_M_access()); }
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7fa ff1b 	bl	80010e4 <_ZNSt9_Any_data9_M_accessEv>
 80062ae:	4603      	mov	r3, r0
 80062b0:	4618      	mov	r0, r3
 80062b2:	3708      	adds	r7, #8
 80062b4:	46bd      	mov	sp, r7
 80062b6:	bd80      	pop	{r7, pc}

080062b8 <_ZSt3minIjERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80062b8:	b480      	push	{r7}
 80062ba:	b083      	sub	sp, #12
 80062bc:	af00      	add	r7, sp, #0
 80062be:	6078      	str	r0, [r7, #4]
 80062c0:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	681a      	ldr	r2, [r3, #0]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	681b      	ldr	r3, [r3, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d201      	bcs.n	80062d2 <_ZSt3minIjERKT_S2_S2_+0x1a>
	return __b;
 80062ce:	683b      	ldr	r3, [r7, #0]
 80062d0:	e000      	b.n	80062d4 <_ZSt3minIjERKT_S2_S2_+0x1c>
      return __a;
 80062d2:	687b      	ldr	r3, [r7, #4]
    }
 80062d4:	4618      	mov	r0, r3
 80062d6:	370c      	adds	r7, #12
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <_ZNSt6vectorImSaImEE11_S_max_sizeERKS0_>:
	      __N("cannot create std::vector larger than max_size()"));
	return __n;
      }

      static size_type
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b084      	sub	sp, #16
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
      {
	// std::distance(begin(), end()) cannot be greater than PTRDIFF_MAX,
	// and realistically we can't store more than PTRDIFF_MAX/sizeof(T)
	// (even if std::allocator_traits::max_size says we can).
	const size_t __diffmax
 80062e8:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 80062ec:	60fb      	str	r3, [r7, #12]
	  = __gnu_cxx::__numeric_traits<ptrdiff_t>::__max / sizeof(_Tp);
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 f877 	bl	80063e2 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>
 80062f4:	4603      	mov	r3, r0
 80062f6:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 80062f8:	f107 0208 	add.w	r2, r7, #8
 80062fc:	f107 030c 	add.w	r3, r7, #12
 8006300:	4611      	mov	r1, r2
 8006302:	4618      	mov	r0, r3
 8006304:	f7ff ffd8 	bl	80062b8 <_ZSt3minIjERKT_S2_S2_>
 8006308:	4603      	mov	r3, r0
 800630a:	681b      	ldr	r3, [r3, #0]
      }
 800630c:	4618      	mov	r0, r3
 800630e:	3710      	adds	r7, #16
 8006310:	46bd      	mov	sp, r7
 8006312:	bd80      	pop	{r7, pc}

08006314 <_ZNKSt12_Vector_baseImSaImEE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8006314:	b480      	push	{r7}
 8006316:	b083      	sub	sp, #12
 8006318:	af00      	add	r7, sp, #0
 800631a:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	4618      	mov	r0, r3
 8006320:	370c      	adds	r7, #12
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr

0800632a <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 800632a:	b580      	push	{r7, lr}
 800632c:	b084      	sub	sp, #16
 800632e:	af00      	add	r7, sp, #0
 8006330:	60f8      	str	r0, [r7, #12]
 8006332:	60b9      	str	r1, [r7, #8]
 8006334:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8006336:	68f8      	ldr	r0, [r7, #12]
 8006338:	f000 f85f 	bl	80063fa <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 800633c:	4602      	mov	r2, r0
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	4293      	cmp	r3, r2
 8006342:	bf8c      	ite	hi
 8006344:	2301      	movhi	r3, #1
 8006346:	2300      	movls	r3, #0
 8006348:	b2db      	uxtb	r3, r3
 800634a:	2b00      	cmp	r3, #0
 800634c:	d001      	beq.n	8006352 <_ZN9__gnu_cxx13new_allocatorImE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 800634e:	f011 fd8b 	bl	8017e68 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	009b      	lsls	r3, r3, #2
 8006356:	4618      	mov	r0, r3
 8006358:	f011 fd73 	bl	8017e42 <_Znwj>
 800635c:	4603      	mov	r3, r0
      }
 800635e:	4618      	mov	r0, r3
 8006360:	3710      	adds	r7, #16
 8006362:	46bd      	mov	sp, r7
 8006364:	bd80      	pop	{r7, pc}

08006366 <_ZSt12__relocate_aIPmS0_SaImEET0_T_S3_S2_RT1_>:
    }

  template <typename _InputIterator, typename _ForwardIterator,
	    typename _Allocator>
    inline _ForwardIterator
    __relocate_a(_InputIterator __first, _InputIterator __last,
 8006366:	b5b0      	push	{r4, r5, r7, lr}
 8006368:	b084      	sub	sp, #16
 800636a:	af00      	add	r7, sp, #0
 800636c:	60f8      	str	r0, [r7, #12]
 800636e:	60b9      	str	r1, [r7, #8]
 8006370:	607a      	str	r2, [r7, #4]
 8006372:	603b      	str	r3, [r7, #0]
		 _ForwardIterator __result, _Allocator& __alloc)
    noexcept(noexcept(__relocate_a_1(std::__niter_base(__first),
				     std::__niter_base(__last),
				     std::__niter_base(__result), __alloc)))
    {
      return __relocate_a_1(std::__niter_base(__first),
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f000 f84c 	bl	8006412 <_ZSt12__niter_baseIPmET_S1_>
 800637a:	4604      	mov	r4, r0
 800637c:	68b8      	ldr	r0, [r7, #8]
 800637e:	f000 f848 	bl	8006412 <_ZSt12__niter_baseIPmET_S1_>
 8006382:	4605      	mov	r5, r0
 8006384:	6878      	ldr	r0, [r7, #4]
 8006386:	f000 f844 	bl	8006412 <_ZSt12__niter_baseIPmET_S1_>
 800638a:	4602      	mov	r2, r0
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	4629      	mov	r1, r5
 8006390:	4620      	mov	r0, r4
 8006392:	f000 f849 	bl	8006428 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>
 8006396:	4603      	mov	r3, r0
			    std::__niter_base(__last),
			    std::__niter_base(__result), __alloc);
    }
 8006398:	4618      	mov	r0, r3
 800639a:	3710      	adds	r7, #16
 800639c:	46bd      	mov	sp, r7
 800639e:	bdb0      	pop	{r4, r5, r7, pc}

080063a0 <_ZNSt13move_iteratorIPmEC1ES0_>:
      move_iterator(iterator_type __i)
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	683a      	ldr	r2, [r7, #0]
 80063ae:	601a      	str	r2, [r3, #0]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	4618      	mov	r0, r3
 80063b4:	370c      	adds	r7, #12
 80063b6:	46bd      	mov	sp, r7
 80063b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063bc:	4770      	bx	lr

080063be <_ZSt18uninitialized_copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 80063be:	b580      	push	{r7, lr}
 80063c0:	b086      	sub	sp, #24
 80063c2:	af00      	add	r7, sp, #0
 80063c4:	60f8      	str	r0, [r7, #12]
 80063c6:	60b9      	str	r1, [r7, #8]
 80063c8:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 80063ca:	2301      	movs	r3, #1
 80063cc:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 80063ce:	687a      	ldr	r2, [r7, #4]
 80063d0:	68b9      	ldr	r1, [r7, #8]
 80063d2:	68f8      	ldr	r0, [r7, #12]
 80063d4:	f000 f846 	bl	8006464 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>
 80063d8:	4603      	mov	r3, r0
    }
 80063da:	4618      	mov	r0, r3
 80063dc:	3718      	adds	r7, #24
 80063de:	46bd      	mov	sp, r7
 80063e0:	bd80      	pop	{r7, pc}

080063e2 <_ZNSt16allocator_traitsISaImEE8max_sizeERKS0_>:
       *  @brief  The maximum supported allocation size
       *  @param  __a  An allocator.
       *  @return @c __a.max_size()
      */
      static size_type
      max_size(const allocator_type& __a) noexcept
 80063e2:	b580      	push	{r7, lr}
 80063e4:	b082      	sub	sp, #8
 80063e6:	af00      	add	r7, sp, #0
 80063e8:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 80063ea:	6878      	ldr	r0, [r7, #4]
 80063ec:	f000 f805 	bl	80063fa <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>
 80063f0:	4603      	mov	r3, r0
 80063f2:	4618      	mov	r0, r3
 80063f4:	3708      	adds	r7, #8
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <_ZNK9__gnu_cxx13new_allocatorImE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 80063fa:	b480      	push	{r7}
 80063fc:	b083      	sub	sp, #12
 80063fe:	af00      	add	r7, sp, #0
 8006400:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 8006402:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 8006406:	4618      	mov	r0, r3
 8006408:	370c      	adds	r7, #12
 800640a:	46bd      	mov	sp, r7
 800640c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006410:	4770      	bx	lr

08006412 <_ZSt12__niter_baseIPmET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the __normal_iterator wrapper. See copy, fill, ...
  template<typename _Iterator>
    inline _Iterator
    __niter_base(_Iterator __it)
 8006412:	b480      	push	{r7}
 8006414:	b083      	sub	sp, #12
 8006416:	af00      	add	r7, sp, #0
 8006418:	6078      	str	r0, [r7, #4]
    _GLIBCXX_NOEXCEPT_IF(std::is_nothrow_copy_constructible<_Iterator>::value)
    { return __it; }
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	4618      	mov	r0, r3
 800641e:	370c      	adds	r7, #12
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8006428:	b580      	push	{r7, lr}
 800642a:	b086      	sub	sp, #24
 800642c:	af00      	add	r7, sp, #0
 800642e:	60f8      	str	r0, [r7, #12]
 8006430:	60b9      	str	r1, [r7, #8]
 8006432:	607a      	str	r2, [r7, #4]
 8006434:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	1ad3      	subs	r3, r2, r3
 800643c:	109b      	asrs	r3, r3, #2
 800643e:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2b00      	cmp	r3, #0
 8006444:	dd06      	ble.n	8006454 <_ZSt14__relocate_a_1ImmENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS2_E4typeES4_S4_S4_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8006446:	697b      	ldr	r3, [r7, #20]
 8006448:	009b      	lsls	r3, r3, #2
 800644a:	461a      	mov	r2, r3
 800644c:	68f9      	ldr	r1, [r7, #12]
 800644e:	6878      	ldr	r0, [r7, #4]
 8006450:	f014 fed0 	bl	801b1f4 <memmove>
      return __result + __count;
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	009b      	lsls	r3, r3, #2
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	4413      	add	r3, r2
    }
 800645c:	4618      	mov	r0, r3
 800645e:	3718      	adds	r7, #24
 8006460:	46bd      	mov	sp, r7
 8006462:	bd80      	pop	{r7, pc}

08006464 <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPmES3_EET0_T_S6_S5_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 8006464:	b580      	push	{r7, lr}
 8006466:	b084      	sub	sp, #16
 8006468:	af00      	add	r7, sp, #0
 800646a:	60f8      	str	r0, [r7, #12]
 800646c:	60b9      	str	r1, [r7, #8]
 800646e:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 8006470:	687a      	ldr	r2, [r7, #4]
 8006472:	68b9      	ldr	r1, [r7, #8]
 8006474:	68f8      	ldr	r0, [r7, #12]
 8006476:	f000 f805 	bl	8006484 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>
 800647a:	4603      	mov	r3, r0
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <_ZSt4copyISt13move_iteratorIPmES1_ET0_T_S4_S3_>:
   *  Note that the end of the output range is permitted to be contained
   *  within [first,last).
  */
  template<typename _II, typename _OI>
    inline _OI
    copy(_II __first, _II __last, _OI __result)
 8006484:	b590      	push	{r4, r7, lr}
 8006486:	b085      	sub	sp, #20
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
      __glibcxx_function_requires(_OutputIteratorConcept<_OI,
	    typename iterator_traits<_II>::value_type>)
      __glibcxx_requires_can_increment_range(__first, __last, __result);

      return std::__copy_move_a2<__is_move_iterator<_II>::__value>
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 8006490:	68f8      	ldr	r0, [r7, #12]
 8006492:	f000 f80f 	bl	80064b4 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 8006496:	4604      	mov	r4, r0
 8006498:	68b8      	ldr	r0, [r7, #8]
 800649a:	f000 f80b 	bl	80064b4 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 800649e:	4603      	mov	r3, r0
 80064a0:	687a      	ldr	r2, [r7, #4]
 80064a2:	4619      	mov	r1, r3
 80064a4:	4620      	mov	r0, r4
 80064a6:	f000 f816 	bl	80064d6 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>
 80064aa:	4603      	mov	r3, r0
    }
 80064ac:	4618      	mov	r0, r3
 80064ae:	3714      	adds	r7, #20
 80064b0:	46bd      	mov	sp, r7
 80064b2:	bd90      	pop	{r4, r7, pc}

080064b4 <_ZSt12__miter_baseIPmEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
      typedef __true_type __type;
    };

  template<typename _Iterator>
    auto
    __miter_base(move_iterator<_Iterator> __it)
 80064b4:	b580      	push	{r7, lr}
 80064b6:	b082      	sub	sp, #8
 80064b8:	af00      	add	r7, sp, #0
 80064ba:	6078      	str	r0, [r7, #4]
    -> decltype(__miter_base(__it.base()))
    { return __miter_base(__it.base()); }
 80064bc:	1d3b      	adds	r3, r7, #4
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 f82c 	bl	800651c <_ZNKSt13move_iteratorIPmE4baseEv>
 80064c4:	4603      	mov	r3, r0
 80064c6:	4618      	mov	r0, r3
 80064c8:	f000 f834 	bl	8006534 <_ZSt12__miter_baseIPmET_S1_>
 80064cc:	4603      	mov	r3, r0
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <_ZSt14__copy_move_a2ILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 80064d6:	b5b0      	push	{r4, r5, r7, lr}
 80064d8:	b084      	sub	sp, #16
 80064da:	af00      	add	r7, sp, #0
 80064dc:	60f8      	str	r0, [r7, #12]
 80064de:	60b9      	str	r1, [r7, #8]
 80064e0:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f7ff ff95 	bl	8006412 <_ZSt12__niter_baseIPmET_S1_>
 80064e8:	4604      	mov	r4, r0
 80064ea:	68b8      	ldr	r0, [r7, #8]
 80064ec:	f7ff ff91 	bl	8006412 <_ZSt12__niter_baseIPmET_S1_>
 80064f0:	4605      	mov	r5, r0
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	4618      	mov	r0, r3
 80064f6:	f7ff ff8c 	bl	8006412 <_ZSt12__niter_baseIPmET_S1_>
 80064fa:	4603      	mov	r3, r0
 80064fc:	461a      	mov	r2, r3
 80064fe:	4629      	mov	r1, r5
 8006500:	4620      	mov	r0, r4
 8006502:	f000 f822 	bl	800654a <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>
 8006506:	4602      	mov	r2, r0
 8006508:	1d3b      	adds	r3, r7, #4
 800650a:	4611      	mov	r1, r2
 800650c:	4618      	mov	r0, r3
 800650e:	f000 f82e 	bl	800656e <_ZSt12__niter_wrapIPmET_RKS1_S1_>
 8006512:	4603      	mov	r3, r0
    }
 8006514:	4618      	mov	r0, r3
 8006516:	3710      	adds	r7, #16
 8006518:	46bd      	mov	sp, r7
 800651a:	bdb0      	pop	{r4, r5, r7, pc}

0800651c <_ZNKSt13move_iteratorIPmE4baseEv>:
      base() const
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4618      	mov	r0, r3
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <_ZSt12__miter_baseIPmET_S1_>:

  // Fallback implementation of the function in bits/stl_iterator.h used to
  // remove the move_iterator wrapper.
  template<typename _Iterator>
    inline _Iterator
    __miter_base(_Iterator __it)
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
    { return __it; }
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	4618      	mov	r0, r3
 8006540:	370c      	adds	r7, #12
 8006542:	46bd      	mov	sp, r7
 8006544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006548:	4770      	bx	lr

0800654a <_ZSt13__copy_move_aILb1EPmS0_ET1_T0_S2_S1_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 800654a:	b580      	push	{r7, lr}
 800654c:	b086      	sub	sp, #24
 800654e:	af00      	add	r7, sp, #0
 8006550:	60f8      	str	r0, [r7, #12]
 8006552:	60b9      	str	r1, [r7, #8]
 8006554:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8006556:	2301      	movs	r3, #1
 8006558:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 800655a:	687a      	ldr	r2, [r7, #4]
 800655c:	68b9      	ldr	r1, [r7, #8]
 800655e:	68f8      	ldr	r0, [r7, #12]
 8006560:	f000 f811 	bl	8006586 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>
 8006564:	4603      	mov	r3, r0
    }
 8006566:	4618      	mov	r0, r3
 8006568:	3718      	adds	r7, #24
 800656a:	46bd      	mov	sp, r7
 800656c:	bd80      	pop	{r7, pc}

0800656e <_ZSt12__niter_wrapIPmET_RKS1_S1_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 800656e:	b480      	push	{r7}
 8006570:	b083      	sub	sp, #12
 8006572:	af00      	add	r7, sp, #0
 8006574:	6078      	str	r0, [r7, #4]
 8006576:	6039      	str	r1, [r7, #0]
    { return __res; }
 8006578:	683b      	ldr	r3, [r7, #0]
 800657a:	4618      	mov	r0, r3
 800657c:	370c      	adds	r7, #12
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr

08006586 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8006586:	b580      	push	{r7, lr}
 8006588:	b086      	sub	sp, #24
 800658a:	af00      	add	r7, sp, #0
 800658c:	60f8      	str	r0, [r7, #12]
 800658e:	60b9      	str	r1, [r7, #8]
 8006590:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8006592:	68ba      	ldr	r2, [r7, #8]
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	1ad3      	subs	r3, r2, r3
 8006598:	109b      	asrs	r3, r3, #2
 800659a:	617b      	str	r3, [r7, #20]
	  if (_Num)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	2b00      	cmp	r3, #0
 80065a0:	d006      	beq.n	80065b0 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mImEEPT_PKS3_S6_S4_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 80065a2:	697b      	ldr	r3, [r7, #20]
 80065a4:	009b      	lsls	r3, r3, #2
 80065a6:	461a      	mov	r2, r3
 80065a8:	68f9      	ldr	r1, [r7, #12]
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f014 fe22 	bl	801b1f4 <memmove>
	  return __result + _Num;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	009b      	lsls	r3, r3, #2
 80065b4:	687a      	ldr	r2, [r7, #4]
 80065b6:	4413      	add	r3, r2
	}
 80065b8:	4618      	mov	r0, r3
 80065ba:	3718      	adds	r7, #24
 80065bc:	46bd      	mov	sp, r7
 80065be:	bd80      	pop	{r7, pc}

080065c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b082      	sub	sp, #8
 80065c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80065c6:	2300      	movs	r3, #0
 80065c8:	607b      	str	r3, [r7, #4]
 80065ca:	4b10      	ldr	r3, [pc, #64]	; (800660c <HAL_MspInit+0x4c>)
 80065cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065ce:	4a0f      	ldr	r2, [pc, #60]	; (800660c <HAL_MspInit+0x4c>)
 80065d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80065d4:	6453      	str	r3, [r2, #68]	; 0x44
 80065d6:	4b0d      	ldr	r3, [pc, #52]	; (800660c <HAL_MspInit+0x4c>)
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80065e2:	2300      	movs	r3, #0
 80065e4:	603b      	str	r3, [r7, #0]
 80065e6:	4b09      	ldr	r3, [pc, #36]	; (800660c <HAL_MspInit+0x4c>)
 80065e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065ea:	4a08      	ldr	r2, [pc, #32]	; (800660c <HAL_MspInit+0x4c>)
 80065ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065f0:	6413      	str	r3, [r2, #64]	; 0x40
 80065f2:	4b06      	ldr	r3, [pc, #24]	; (800660c <HAL_MspInit+0x4c>)
 80065f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065fa:	603b      	str	r3, [r7, #0]
 80065fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80065fe:	2007      	movs	r0, #7
 8006600:	f000 fb74 	bl	8006cec <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8006604:	bf00      	nop
 8006606:	3708      	adds	r7, #8
 8006608:	46bd      	mov	sp, r7
 800660a:	bd80      	pop	{r7, pc}
 800660c:	40023800 	.word	0x40023800

08006610 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8006610:	b480      	push	{r7}
 8006612:	b085      	sub	sp, #20
 8006614:	af00      	add	r7, sp, #0
 8006616:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	4a0b      	ldr	r2, [pc, #44]	; (800664c <HAL_CRC_MspInit+0x3c>)
 800661e:	4293      	cmp	r3, r2
 8006620:	d10d      	bne.n	800663e <HAL_CRC_MspInit+0x2e>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8006622:	2300      	movs	r3, #0
 8006624:	60fb      	str	r3, [r7, #12]
 8006626:	4b0a      	ldr	r3, [pc, #40]	; (8006650 <HAL_CRC_MspInit+0x40>)
 8006628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800662a:	4a09      	ldr	r2, [pc, #36]	; (8006650 <HAL_CRC_MspInit+0x40>)
 800662c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006630:	6313      	str	r3, [r2, #48]	; 0x30
 8006632:	4b07      	ldr	r3, [pc, #28]	; (8006650 <HAL_CRC_MspInit+0x40>)
 8006634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006636:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800663a:	60fb      	str	r3, [r7, #12]
 800663c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800663e:	bf00      	nop
 8006640:	3714      	adds	r7, #20
 8006642:	46bd      	mov	sp, r7
 8006644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006648:	4770      	bx	lr
 800664a:	bf00      	nop
 800664c:	40023000 	.word	0x40023000
 8006650:	40023800 	.word	0x40023800

08006654 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006654:	b580      	push	{r7, lr}
 8006656:	b08a      	sub	sp, #40	; 0x28
 8006658:	af00      	add	r7, sp, #0
 800665a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800665c:	f107 0314 	add.w	r3, r7, #20
 8006660:	2200      	movs	r2, #0
 8006662:	601a      	str	r2, [r3, #0]
 8006664:	605a      	str	r2, [r3, #4]
 8006666:	609a      	str	r2, [r3, #8]
 8006668:	60da      	str	r2, [r3, #12]
 800666a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a19      	ldr	r2, [pc, #100]	; (80066d8 <HAL_UART_MspInit+0x84>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d12b      	bne.n	80066ce <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	613b      	str	r3, [r7, #16]
 800667a:	4b18      	ldr	r3, [pc, #96]	; (80066dc <HAL_UART_MspInit+0x88>)
 800667c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800667e:	4a17      	ldr	r2, [pc, #92]	; (80066dc <HAL_UART_MspInit+0x88>)
 8006680:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006684:	6413      	str	r3, [r2, #64]	; 0x40
 8006686:	4b15      	ldr	r3, [pc, #84]	; (80066dc <HAL_UART_MspInit+0x88>)
 8006688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800668a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800668e:	613b      	str	r3, [r7, #16]
 8006690:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006692:	2300      	movs	r3, #0
 8006694:	60fb      	str	r3, [r7, #12]
 8006696:	4b11      	ldr	r3, [pc, #68]	; (80066dc <HAL_UART_MspInit+0x88>)
 8006698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800669a:	4a10      	ldr	r2, [pc, #64]	; (80066dc <HAL_UART_MspInit+0x88>)
 800669c:	f043 0301 	orr.w	r3, r3, #1
 80066a0:	6313      	str	r3, [r2, #48]	; 0x30
 80066a2:	4b0e      	ldr	r3, [pc, #56]	; (80066dc <HAL_UART_MspInit+0x88>)
 80066a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80066a6:	f003 0301 	and.w	r3, r3, #1
 80066aa:	60fb      	str	r3, [r7, #12]
 80066ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80066ae:	230c      	movs	r3, #12
 80066b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80066b2:	2302      	movs	r3, #2
 80066b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80066b6:	2300      	movs	r3, #0
 80066b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80066ba:	2303      	movs	r3, #3
 80066bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80066be:	2307      	movs	r3, #7
 80066c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80066c2:	f107 0314 	add.w	r3, r7, #20
 80066c6:	4619      	mov	r1, r3
 80066c8:	4805      	ldr	r0, [pc, #20]	; (80066e0 <HAL_UART_MspInit+0x8c>)
 80066ca:	f000 ff4d 	bl	8007568 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80066ce:	bf00      	nop
 80066d0:	3728      	adds	r7, #40	; 0x28
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	40004400 	.word	0x40004400
 80066dc:	40023800 	.word	0x40023800
 80066e0:	40020000 	.word	0x40020000

080066e4 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai1_b;

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b088      	sub	sp, #32
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_B)
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	4a3b      	ldr	r2, [pc, #236]	; (80067e0 <HAL_SAI_MspInit+0xfc>)
 80066f2:	4293      	cmp	r3, r2
 80066f4:	d16f      	bne.n	80067d6 <HAL_SAI_MspInit+0xf2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 80066f6:	4b3b      	ldr	r3, [pc, #236]	; (80067e4 <HAL_SAI_MspInit+0x100>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d10d      	bne.n	800671a <HAL_SAI_MspInit+0x36>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 80066fe:	2300      	movs	r3, #0
 8006700:	60bb      	str	r3, [r7, #8]
 8006702:	4b39      	ldr	r3, [pc, #228]	; (80067e8 <HAL_SAI_MspInit+0x104>)
 8006704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006706:	4a38      	ldr	r2, [pc, #224]	; (80067e8 <HAL_SAI_MspInit+0x104>)
 8006708:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800670c:	6453      	str	r3, [r2, #68]	; 0x44
 800670e:	4b36      	ldr	r3, [pc, #216]	; (80067e8 <HAL_SAI_MspInit+0x104>)
 8006710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006712:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006716:	60bb      	str	r3, [r7, #8]
 8006718:	68bb      	ldr	r3, [r7, #8]
      }
    SAI1_client ++;
 800671a:	4b32      	ldr	r3, [pc, #200]	; (80067e4 <HAL_SAI_MspInit+0x100>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	3301      	adds	r3, #1
 8006720:	4a30      	ldr	r2, [pc, #192]	; (80067e4 <HAL_SAI_MspInit+0x100>)
 8006722:	6013      	str	r3, [r2, #0]
    /**SAI1_B_Block_B GPIO Configuration
    PB12     ------> SAI1_SCK_B
    PA9     ------> SAI1_SD_B
    PB9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_9;
 8006724:	f44f 5390 	mov.w	r3, #4608	; 0x1200
 8006728:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800672a:	2302      	movs	r3, #2
 800672c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800672e:	2300      	movs	r3, #0
 8006730:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006732:	2300      	movs	r3, #0
 8006734:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006736:	2306      	movs	r3, #6
 8006738:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800673a:	f107 030c 	add.w	r3, r7, #12
 800673e:	4619      	mov	r1, r3
 8006740:	482a      	ldr	r0, [pc, #168]	; (80067ec <HAL_SAI_MspInit+0x108>)
 8006742:	f000 ff11 	bl	8007568 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8006746:	f44f 7300 	mov.w	r3, #512	; 0x200
 800674a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800674c:	2302      	movs	r3, #2
 800674e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006750:	2300      	movs	r3, #0
 8006752:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006754:	2300      	movs	r3, #0
 8006756:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF6_SAI1;
 8006758:	2306      	movs	r3, #6
 800675a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800675c:	f107 030c 	add.w	r3, r7, #12
 8006760:	4619      	mov	r1, r3
 8006762:	4823      	ldr	r0, [pc, #140]	; (80067f0 <HAL_SAI_MspInit+0x10c>)
 8006764:	f000 ff00 	bl	8007568 <HAL_GPIO_Init>

    /* Peripheral DMA init*/

    hdma_sai1_b.Instance = DMA2_Stream4;
 8006768:	4b22      	ldr	r3, [pc, #136]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 800676a:	4a23      	ldr	r2, [pc, #140]	; (80067f8 <HAL_SAI_MspInit+0x114>)
 800676c:	601a      	str	r2, [r3, #0]
    hdma_sai1_b.Init.Channel = DMA_CHANNEL_1;
 800676e:	4b21      	ldr	r3, [pc, #132]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 8006770:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8006774:	605a      	str	r2, [r3, #4]
    hdma_sai1_b.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006776:	4b1f      	ldr	r3, [pc, #124]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 8006778:	2240      	movs	r2, #64	; 0x40
 800677a:	609a      	str	r2, [r3, #8]
    hdma_sai1_b.Init.PeriphInc = DMA_PINC_DISABLE;
 800677c:	4b1d      	ldr	r3, [pc, #116]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 800677e:	2200      	movs	r2, #0
 8006780:	60da      	str	r2, [r3, #12]
    hdma_sai1_b.Init.MemInc = DMA_MINC_ENABLE;
 8006782:	4b1c      	ldr	r3, [pc, #112]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 8006784:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006788:	611a      	str	r2, [r3, #16]
    hdma_sai1_b.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800678a:	4b1a      	ldr	r3, [pc, #104]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 800678c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006790:	615a      	str	r2, [r3, #20]
    hdma_sai1_b.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8006792:	4b18      	ldr	r3, [pc, #96]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 8006794:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006798:	619a      	str	r2, [r3, #24]
    hdma_sai1_b.Init.Mode = DMA_CIRCULAR;
 800679a:	4b16      	ldr	r3, [pc, #88]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 800679c:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067a0:	61da      	str	r2, [r3, #28]
    hdma_sai1_b.Init.Priority = DMA_PRIORITY_LOW;
 80067a2:	4b14      	ldr	r3, [pc, #80]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	621a      	str	r2, [r3, #32]
    hdma_sai1_b.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80067a8:	4b12      	ldr	r3, [pc, #72]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_sai1_b) != HAL_OK)
 80067ae:	4811      	ldr	r0, [pc, #68]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 80067b0:	f000 fafa 	bl	8006da8 <HAL_DMA_Init>
 80067b4:	4603      	mov	r3, r0
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d001      	beq.n	80067be <HAL_SAI_MspInit+0xda>
    {
      Error_Handler();
 80067ba:	f7fe ff1f 	bl	80055fc <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one stream to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai1_b);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	4a0c      	ldr	r2, [pc, #48]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 80067c2:	675a      	str	r2, [r3, #116]	; 0x74
 80067c4:	4a0b      	ldr	r2, [pc, #44]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6393      	str	r3, [r2, #56]	; 0x38
    __HAL_LINKDMA(hsai,hdmatx,hdma_sai1_b);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 80067ce:	671a      	str	r2, [r3, #112]	; 0x70
 80067d0:	4a08      	ldr	r2, [pc, #32]	; (80067f4 <HAL_SAI_MspInit+0x110>)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6393      	str	r3, [r2, #56]	; 0x38
    }
}
 80067d6:	bf00      	nop
 80067d8:	3720      	adds	r7, #32
 80067da:	46bd      	mov	sp, r7
 80067dc:	bd80      	pop	{r7, pc}
 80067de:	bf00      	nop
 80067e0:	40015824 	.word	0x40015824
 80067e4:	20006b70 	.word	0x20006b70
 80067e8:	40023800 	.word	0x40023800
 80067ec:	40020400 	.word	0x40020400
 80067f0:	40020000 	.word	0x40020000
 80067f4:	200006b0 	.word	0x200006b0
 80067f8:	40026470 	.word	0x40026470

080067fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006800:	e7fe      	b.n	8006800 <NMI_Handler+0x4>

08006802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006802:	b480      	push	{r7}
 8006804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006806:	e7fe      	b.n	8006806 <HardFault_Handler+0x4>

08006808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006808:	b480      	push	{r7}
 800680a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800680c:	e7fe      	b.n	800680c <MemManage_Handler+0x4>

0800680e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800680e:	b480      	push	{r7}
 8006810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006812:	e7fe      	b.n	8006812 <BusFault_Handler+0x4>

08006814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006814:	b480      	push	{r7}
 8006816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006818:	e7fe      	b.n	8006818 <UsageFault_Handler+0x4>

0800681a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800681a:	b480      	push	{r7}
 800681c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800681e:	bf00      	nop
 8006820:	46bd      	mov	sp, r7
 8006822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006826:	4770      	bx	lr

08006828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006828:	b480      	push	{r7}
 800682a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800682c:	bf00      	nop
 800682e:	46bd      	mov	sp, r7
 8006830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006834:	4770      	bx	lr

08006836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006836:	b480      	push	{r7}
 8006838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800683a:	bf00      	nop
 800683c:	46bd      	mov	sp, r7
 800683e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006842:	4770      	bx	lr

08006844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006844:	b580      	push	{r7, lr}
 8006846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006848:	f000 f960 	bl	8006b0c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800684c:	bf00      	nop
 800684e:	bd80      	pop	{r7, pc}

08006850 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_sai1_b);
 8006854:	4802      	ldr	r0, [pc, #8]	; (8006860 <DMA2_Stream4_IRQHandler+0x10>)
 8006856:	f000 fc1d 	bl	8007094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800685a:	bf00      	nop
 800685c:	bd80      	pop	{r7, pc}
 800685e:	bf00      	nop
 8006860:	200006b0 	.word	0x200006b0

08006864 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006864:	b480      	push	{r7}
 8006866:	af00      	add	r7, sp, #0
	return 1;
 8006868:	2301      	movs	r3, #1
}
 800686a:	4618      	mov	r0, r3
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr

08006874 <_kill>:

int _kill(int pid, int sig)
{
 8006874:	b580      	push	{r7, lr}
 8006876:	b082      	sub	sp, #8
 8006878:	af00      	add	r7, sp, #0
 800687a:	6078      	str	r0, [r7, #4]
 800687c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800687e:	f014 fbcb 	bl	801b018 <__errno>
 8006882:	4603      	mov	r3, r0
 8006884:	2216      	movs	r2, #22
 8006886:	601a      	str	r2, [r3, #0]
	return -1;
 8006888:	f04f 33ff 	mov.w	r3, #4294967295
}
 800688c:	4618      	mov	r0, r3
 800688e:	3708      	adds	r7, #8
 8006890:	46bd      	mov	sp, r7
 8006892:	bd80      	pop	{r7, pc}

08006894 <_exit>:

void _exit (int status)
{
 8006894:	b580      	push	{r7, lr}
 8006896:	b082      	sub	sp, #8
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800689c:	f04f 31ff 	mov.w	r1, #4294967295
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	f7ff ffe7 	bl	8006874 <_kill>
	while (1) {}		/* Make sure we hang here */
 80068a6:	e7fe      	b.n	80068a6 <_exit+0x12>

080068a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80068a8:	b580      	push	{r7, lr}
 80068aa:	b086      	sub	sp, #24
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	60f8      	str	r0, [r7, #12]
 80068b0:	60b9      	str	r1, [r7, #8]
 80068b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068b4:	2300      	movs	r3, #0
 80068b6:	617b      	str	r3, [r7, #20]
 80068b8:	e00a      	b.n	80068d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80068ba:	f3af 8000 	nop.w
 80068be:	4601      	mov	r1, r0
 80068c0:	68bb      	ldr	r3, [r7, #8]
 80068c2:	1c5a      	adds	r2, r3, #1
 80068c4:	60ba      	str	r2, [r7, #8]
 80068c6:	b2ca      	uxtb	r2, r1
 80068c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ca:	697b      	ldr	r3, [r7, #20]
 80068cc:	3301      	adds	r3, #1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	697a      	ldr	r2, [r7, #20]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	429a      	cmp	r2, r3
 80068d6:	dbf0      	blt.n	80068ba <_read+0x12>
	}

return len;
 80068d8:	687b      	ldr	r3, [r7, #4]
}
 80068da:	4618      	mov	r0, r3
 80068dc:	3718      	adds	r7, #24
 80068de:	46bd      	mov	sp, r7
 80068e0:	bd80      	pop	{r7, pc}

080068e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80068e2:	b580      	push	{r7, lr}
 80068e4:	b086      	sub	sp, #24
 80068e6:	af00      	add	r7, sp, #0
 80068e8:	60f8      	str	r0, [r7, #12]
 80068ea:	60b9      	str	r1, [r7, #8]
 80068ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80068ee:	2300      	movs	r3, #0
 80068f0:	617b      	str	r3, [r7, #20]
 80068f2:	e009      	b.n	8006908 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	1c5a      	adds	r2, r3, #1
 80068f8:	60ba      	str	r2, [r7, #8]
 80068fa:	781b      	ldrb	r3, [r3, #0]
 80068fc:	4618      	mov	r0, r3
 80068fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006902:	697b      	ldr	r3, [r7, #20]
 8006904:	3301      	adds	r3, #1
 8006906:	617b      	str	r3, [r7, #20]
 8006908:	697a      	ldr	r2, [r7, #20]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	429a      	cmp	r2, r3
 800690e:	dbf1      	blt.n	80068f4 <_write+0x12>
	}
	return len;
 8006910:	687b      	ldr	r3, [r7, #4]
}
 8006912:	4618      	mov	r0, r3
 8006914:	3718      	adds	r7, #24
 8006916:	46bd      	mov	sp, r7
 8006918:	bd80      	pop	{r7, pc}

0800691a <_close>:

int _close(int file)
{
 800691a:	b480      	push	{r7}
 800691c:	b083      	sub	sp, #12
 800691e:	af00      	add	r7, sp, #0
 8006920:	6078      	str	r0, [r7, #4]
	return -1;
 8006922:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006926:	4618      	mov	r0, r3
 8006928:	370c      	adds	r7, #12
 800692a:	46bd      	mov	sp, r7
 800692c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006930:	4770      	bx	lr

08006932 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006932:	b480      	push	{r7}
 8006934:	b083      	sub	sp, #12
 8006936:	af00      	add	r7, sp, #0
 8006938:	6078      	str	r0, [r7, #4]
 800693a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800693c:	683b      	ldr	r3, [r7, #0]
 800693e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006942:	605a      	str	r2, [r3, #4]
	return 0;
 8006944:	2300      	movs	r3, #0
}
 8006946:	4618      	mov	r0, r3
 8006948:	370c      	adds	r7, #12
 800694a:	46bd      	mov	sp, r7
 800694c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006950:	4770      	bx	lr

08006952 <_isatty>:

int _isatty(int file)
{
 8006952:	b480      	push	{r7}
 8006954:	b083      	sub	sp, #12
 8006956:	af00      	add	r7, sp, #0
 8006958:	6078      	str	r0, [r7, #4]
	return 1;
 800695a:	2301      	movs	r3, #1
}
 800695c:	4618      	mov	r0, r3
 800695e:	370c      	adds	r7, #12
 8006960:	46bd      	mov	sp, r7
 8006962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006966:	4770      	bx	lr

08006968 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006968:	b480      	push	{r7}
 800696a:	b085      	sub	sp, #20
 800696c:	af00      	add	r7, sp, #0
 800696e:	60f8      	str	r0, [r7, #12]
 8006970:	60b9      	str	r1, [r7, #8]
 8006972:	607a      	str	r2, [r7, #4]
	return 0;
 8006974:	2300      	movs	r3, #0
}
 8006976:	4618      	mov	r0, r3
 8006978:	3714      	adds	r7, #20
 800697a:	46bd      	mov	sp, r7
 800697c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006980:	4770      	bx	lr
	...

08006984 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006984:	b580      	push	{r7, lr}
 8006986:	b086      	sub	sp, #24
 8006988:	af00      	add	r7, sp, #0
 800698a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800698c:	4a14      	ldr	r2, [pc, #80]	; (80069e0 <_sbrk+0x5c>)
 800698e:	4b15      	ldr	r3, [pc, #84]	; (80069e4 <_sbrk+0x60>)
 8006990:	1ad3      	subs	r3, r2, r3
 8006992:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006994:	697b      	ldr	r3, [r7, #20]
 8006996:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006998:	4b13      	ldr	r3, [pc, #76]	; (80069e8 <_sbrk+0x64>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d102      	bne.n	80069a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80069a0:	4b11      	ldr	r3, [pc, #68]	; (80069e8 <_sbrk+0x64>)
 80069a2:	4a12      	ldr	r2, [pc, #72]	; (80069ec <_sbrk+0x68>)
 80069a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80069a6:	4b10      	ldr	r3, [pc, #64]	; (80069e8 <_sbrk+0x64>)
 80069a8:	681a      	ldr	r2, [r3, #0]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	4413      	add	r3, r2
 80069ae:	693a      	ldr	r2, [r7, #16]
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d207      	bcs.n	80069c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80069b4:	f014 fb30 	bl	801b018 <__errno>
 80069b8:	4603      	mov	r3, r0
 80069ba:	220c      	movs	r2, #12
 80069bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80069be:	f04f 33ff 	mov.w	r3, #4294967295
 80069c2:	e009      	b.n	80069d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80069c4:	4b08      	ldr	r3, [pc, #32]	; (80069e8 <_sbrk+0x64>)
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80069ca:	4b07      	ldr	r3, [pc, #28]	; (80069e8 <_sbrk+0x64>)
 80069cc:	681a      	ldr	r2, [r3, #0]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	4413      	add	r3, r2
 80069d2:	4a05      	ldr	r2, [pc, #20]	; (80069e8 <_sbrk+0x64>)
 80069d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80069d6:	68fb      	ldr	r3, [r7, #12]
}
 80069d8:	4618      	mov	r0, r3
 80069da:	3718      	adds	r7, #24
 80069dc:	46bd      	mov	sp, r7
 80069de:	bd80      	pop	{r7, pc}
 80069e0:	20020000 	.word	0x20020000
 80069e4:	00000400 	.word	0x00000400
 80069e8:	20006b74 	.word	0x20006b74
 80069ec:	20007ad0 	.word	0x20007ad0

080069f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80069f0:	b480      	push	{r7}
 80069f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80069f4:	4b06      	ldr	r3, [pc, #24]	; (8006a10 <SystemInit+0x20>)
 80069f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80069fa:	4a05      	ldr	r2, [pc, #20]	; (8006a10 <SystemInit+0x20>)
 80069fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006a00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006a04:	bf00      	nop
 8006a06:	46bd      	mov	sp, r7
 8006a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a0c:	4770      	bx	lr
 8006a0e:	bf00      	nop
 8006a10:	e000ed00 	.word	0xe000ed00

08006a14 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8006a14:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006a4c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006a18:	480d      	ldr	r0, [pc, #52]	; (8006a50 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006a1a:	490e      	ldr	r1, [pc, #56]	; (8006a54 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006a1c:	4a0e      	ldr	r2, [pc, #56]	; (8006a58 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006a1e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006a20:	e002      	b.n	8006a28 <LoopCopyDataInit>

08006a22 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006a22:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006a24:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006a26:	3304      	adds	r3, #4

08006a28 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006a28:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006a2a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006a2c:	d3f9      	bcc.n	8006a22 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006a2e:	4a0b      	ldr	r2, [pc, #44]	; (8006a5c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006a30:	4c0b      	ldr	r4, [pc, #44]	; (8006a60 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006a32:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006a34:	e001      	b.n	8006a3a <LoopFillZerobss>

08006a36 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006a36:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006a38:	3204      	adds	r2, #4

08006a3a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006a3a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006a3c:	d3fb      	bcc.n	8006a36 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006a3e:	f7ff ffd7 	bl	80069f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006a42:	f014 fb83 	bl	801b14c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006a46:	f7fe fa01 	bl	8004e4c <main>
  bx  lr    
 8006a4a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8006a4c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006a50:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006a54:	20000580 	.word	0x20000580
  ldr r2, =_sidata
 8006a58:	0803f004 	.word	0x0803f004
  ldr r2, =_sbss
 8006a5c:	20000580 	.word	0x20000580
  ldr r4, =_ebss
 8006a60:	20007ad0 	.word	0x20007ad0

08006a64 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006a64:	e7fe      	b.n	8006a64 <ADC_IRQHandler>
	...

08006a68 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006a68:	b580      	push	{r7, lr}
 8006a6a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006a6c:	4b0e      	ldr	r3, [pc, #56]	; (8006aa8 <HAL_Init+0x40>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	4a0d      	ldr	r2, [pc, #52]	; (8006aa8 <HAL_Init+0x40>)
 8006a72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006a76:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006a78:	4b0b      	ldr	r3, [pc, #44]	; (8006aa8 <HAL_Init+0x40>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	4a0a      	ldr	r2, [pc, #40]	; (8006aa8 <HAL_Init+0x40>)
 8006a7e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006a82:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006a84:	4b08      	ldr	r3, [pc, #32]	; (8006aa8 <HAL_Init+0x40>)
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	4a07      	ldr	r2, [pc, #28]	; (8006aa8 <HAL_Init+0x40>)
 8006a8a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a8e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006a90:	2003      	movs	r0, #3
 8006a92:	f000 f92b 	bl	8006cec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006a96:	2000      	movs	r0, #0
 8006a98:	f000 f808 	bl	8006aac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8006a9c:	f7ff fd90 	bl	80065c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006aa0:	2300      	movs	r3, #0
}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	bd80      	pop	{r7, pc}
 8006aa6:	bf00      	nop
 8006aa8:	40023c00 	.word	0x40023c00

08006aac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8006aac:	b580      	push	{r7, lr}
 8006aae:	b082      	sub	sp, #8
 8006ab0:	af00      	add	r7, sp, #0
 8006ab2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006ab4:	4b12      	ldr	r3, [pc, #72]	; (8006b00 <HAL_InitTick+0x54>)
 8006ab6:	681a      	ldr	r2, [r3, #0]
 8006ab8:	4b12      	ldr	r3, [pc, #72]	; (8006b04 <HAL_InitTick+0x58>)
 8006aba:	781b      	ldrb	r3, [r3, #0]
 8006abc:	4619      	mov	r1, r3
 8006abe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006ac2:	fbb3 f3f1 	udiv	r3, r3, r1
 8006ac6:	fbb2 f3f3 	udiv	r3, r2, r3
 8006aca:	4618      	mov	r0, r3
 8006acc:	f000 f943 	bl	8006d56 <HAL_SYSTICK_Config>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d001      	beq.n	8006ada <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006ad6:	2301      	movs	r3, #1
 8006ad8:	e00e      	b.n	8006af8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	2b0f      	cmp	r3, #15
 8006ade:	d80a      	bhi.n	8006af6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	6879      	ldr	r1, [r7, #4]
 8006ae4:	f04f 30ff 	mov.w	r0, #4294967295
 8006ae8:	f000 f90b 	bl	8006d02 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006aec:	4a06      	ldr	r2, [pc, #24]	; (8006b08 <HAL_InitTick+0x5c>)
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006af2:	2300      	movs	r3, #0
 8006af4:	e000      	b.n	8006af8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006af6:	2301      	movs	r3, #1
}
 8006af8:	4618      	mov	r0, r3
 8006afa:	3708      	adds	r7, #8
 8006afc:	46bd      	mov	sp, r7
 8006afe:	bd80      	pop	{r7, pc}
 8006b00:	20000058 	.word	0x20000058
 8006b04:	20000060 	.word	0x20000060
 8006b08:	2000005c 	.word	0x2000005c

08006b0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006b10:	4b06      	ldr	r3, [pc, #24]	; (8006b2c <HAL_IncTick+0x20>)
 8006b12:	781b      	ldrb	r3, [r3, #0]
 8006b14:	461a      	mov	r2, r3
 8006b16:	4b06      	ldr	r3, [pc, #24]	; (8006b30 <HAL_IncTick+0x24>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	4a04      	ldr	r2, [pc, #16]	; (8006b30 <HAL_IncTick+0x24>)
 8006b1e:	6013      	str	r3, [r2, #0]
}
 8006b20:	bf00      	nop
 8006b22:	46bd      	mov	sp, r7
 8006b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b28:	4770      	bx	lr
 8006b2a:	bf00      	nop
 8006b2c:	20000060 	.word	0x20000060
 8006b30:	20007abc 	.word	0x20007abc

08006b34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006b34:	b480      	push	{r7}
 8006b36:	af00      	add	r7, sp, #0
  return uwTick;
 8006b38:	4b03      	ldr	r3, [pc, #12]	; (8006b48 <HAL_GetTick+0x14>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	46bd      	mov	sp, r7
 8006b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b44:	4770      	bx	lr
 8006b46:	bf00      	nop
 8006b48:	20007abc 	.word	0x20007abc

08006b4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006b4c:	b480      	push	{r7}
 8006b4e:	b085      	sub	sp, #20
 8006b50:	af00      	add	r7, sp, #0
 8006b52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	f003 0307 	and.w	r3, r3, #7
 8006b5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006b5c:	4b0c      	ldr	r3, [pc, #48]	; (8006b90 <__NVIC_SetPriorityGrouping+0x44>)
 8006b5e:	68db      	ldr	r3, [r3, #12]
 8006b60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006b68:	4013      	ands	r3, r2
 8006b6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006b74:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006b78:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006b7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006b7e:	4a04      	ldr	r2, [pc, #16]	; (8006b90 <__NVIC_SetPriorityGrouping+0x44>)
 8006b80:	68bb      	ldr	r3, [r7, #8]
 8006b82:	60d3      	str	r3, [r2, #12]
}
 8006b84:	bf00      	nop
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr
 8006b90:	e000ed00 	.word	0xe000ed00

08006b94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b94:	b480      	push	{r7}
 8006b96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b98:	4b04      	ldr	r3, [pc, #16]	; (8006bac <__NVIC_GetPriorityGrouping+0x18>)
 8006b9a:	68db      	ldr	r3, [r3, #12]
 8006b9c:	0a1b      	lsrs	r3, r3, #8
 8006b9e:	f003 0307 	and.w	r3, r3, #7
}
 8006ba2:	4618      	mov	r0, r3
 8006ba4:	46bd      	mov	sp, r7
 8006ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006baa:	4770      	bx	lr
 8006bac:	e000ed00 	.word	0xe000ed00

08006bb0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b083      	sub	sp, #12
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	4603      	mov	r3, r0
 8006bb8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	db0b      	blt.n	8006bda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006bc2:	79fb      	ldrb	r3, [r7, #7]
 8006bc4:	f003 021f 	and.w	r2, r3, #31
 8006bc8:	4907      	ldr	r1, [pc, #28]	; (8006be8 <__NVIC_EnableIRQ+0x38>)
 8006bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bce:	095b      	lsrs	r3, r3, #5
 8006bd0:	2001      	movs	r0, #1
 8006bd2:	fa00 f202 	lsl.w	r2, r0, r2
 8006bd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006bda:	bf00      	nop
 8006bdc:	370c      	adds	r7, #12
 8006bde:	46bd      	mov	sp, r7
 8006be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006be4:	4770      	bx	lr
 8006be6:	bf00      	nop
 8006be8:	e000e100 	.word	0xe000e100

08006bec <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006bec:	b480      	push	{r7}
 8006bee:	b083      	sub	sp, #12
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	4603      	mov	r3, r0
 8006bf4:	6039      	str	r1, [r7, #0]
 8006bf6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	db0a      	blt.n	8006c16 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c00:	683b      	ldr	r3, [r7, #0]
 8006c02:	b2da      	uxtb	r2, r3
 8006c04:	490c      	ldr	r1, [pc, #48]	; (8006c38 <__NVIC_SetPriority+0x4c>)
 8006c06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c0a:	0112      	lsls	r2, r2, #4
 8006c0c:	b2d2      	uxtb	r2, r2
 8006c0e:	440b      	add	r3, r1
 8006c10:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006c14:	e00a      	b.n	8006c2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	b2da      	uxtb	r2, r3
 8006c1a:	4908      	ldr	r1, [pc, #32]	; (8006c3c <__NVIC_SetPriority+0x50>)
 8006c1c:	79fb      	ldrb	r3, [r7, #7]
 8006c1e:	f003 030f 	and.w	r3, r3, #15
 8006c22:	3b04      	subs	r3, #4
 8006c24:	0112      	lsls	r2, r2, #4
 8006c26:	b2d2      	uxtb	r2, r2
 8006c28:	440b      	add	r3, r1
 8006c2a:	761a      	strb	r2, [r3, #24]
}
 8006c2c:	bf00      	nop
 8006c2e:	370c      	adds	r7, #12
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	e000e100 	.word	0xe000e100
 8006c3c:	e000ed00 	.word	0xe000ed00

08006c40 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006c40:	b480      	push	{r7}
 8006c42:	b089      	sub	sp, #36	; 0x24
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	60f8      	str	r0, [r7, #12]
 8006c48:	60b9      	str	r1, [r7, #8]
 8006c4a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	f003 0307 	and.w	r3, r3, #7
 8006c52:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006c54:	69fb      	ldr	r3, [r7, #28]
 8006c56:	f1c3 0307 	rsb	r3, r3, #7
 8006c5a:	2b04      	cmp	r3, #4
 8006c5c:	bf28      	it	cs
 8006c5e:	2304      	movcs	r3, #4
 8006c60:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006c62:	69fb      	ldr	r3, [r7, #28]
 8006c64:	3304      	adds	r3, #4
 8006c66:	2b06      	cmp	r3, #6
 8006c68:	d902      	bls.n	8006c70 <NVIC_EncodePriority+0x30>
 8006c6a:	69fb      	ldr	r3, [r7, #28]
 8006c6c:	3b03      	subs	r3, #3
 8006c6e:	e000      	b.n	8006c72 <NVIC_EncodePriority+0x32>
 8006c70:	2300      	movs	r3, #0
 8006c72:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c74:	f04f 32ff 	mov.w	r2, #4294967295
 8006c78:	69bb      	ldr	r3, [r7, #24]
 8006c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7e:	43da      	mvns	r2, r3
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	401a      	ands	r2, r3
 8006c84:	697b      	ldr	r3, [r7, #20]
 8006c86:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006c88:	f04f 31ff 	mov.w	r1, #4294967295
 8006c8c:	697b      	ldr	r3, [r7, #20]
 8006c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8006c92:	43d9      	mvns	r1, r3
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c98:	4313      	orrs	r3, r2
         );
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3724      	adds	r7, #36	; 0x24
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca4:	4770      	bx	lr
	...

08006ca8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b082      	sub	sp, #8
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	3b01      	subs	r3, #1
 8006cb4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006cb8:	d301      	bcc.n	8006cbe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006cba:	2301      	movs	r3, #1
 8006cbc:	e00f      	b.n	8006cde <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006cbe:	4a0a      	ldr	r2, [pc, #40]	; (8006ce8 <SysTick_Config+0x40>)
 8006cc0:	687b      	ldr	r3, [r7, #4]
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006cc6:	210f      	movs	r1, #15
 8006cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ccc:	f7ff ff8e 	bl	8006bec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006cd0:	4b05      	ldr	r3, [pc, #20]	; (8006ce8 <SysTick_Config+0x40>)
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006cd6:	4b04      	ldr	r3, [pc, #16]	; (8006ce8 <SysTick_Config+0x40>)
 8006cd8:	2207      	movs	r2, #7
 8006cda:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006cdc:	2300      	movs	r3, #0
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3708      	adds	r7, #8
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}
 8006ce6:	bf00      	nop
 8006ce8:	e000e010 	.word	0xe000e010

08006cec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006cec:	b580      	push	{r7, lr}
 8006cee:	b082      	sub	sp, #8
 8006cf0:	af00      	add	r7, sp, #0
 8006cf2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7ff ff29 	bl	8006b4c <__NVIC_SetPriorityGrouping>
}
 8006cfa:	bf00      	nop
 8006cfc:	3708      	adds	r7, #8
 8006cfe:	46bd      	mov	sp, r7
 8006d00:	bd80      	pop	{r7, pc}

08006d02 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006d02:	b580      	push	{r7, lr}
 8006d04:	b086      	sub	sp, #24
 8006d06:	af00      	add	r7, sp, #0
 8006d08:	4603      	mov	r3, r0
 8006d0a:	60b9      	str	r1, [r7, #8]
 8006d0c:	607a      	str	r2, [r7, #4]
 8006d0e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006d10:	2300      	movs	r3, #0
 8006d12:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006d14:	f7ff ff3e 	bl	8006b94 <__NVIC_GetPriorityGrouping>
 8006d18:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	68b9      	ldr	r1, [r7, #8]
 8006d1e:	6978      	ldr	r0, [r7, #20]
 8006d20:	f7ff ff8e 	bl	8006c40 <NVIC_EncodePriority>
 8006d24:	4602      	mov	r2, r0
 8006d26:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006d2a:	4611      	mov	r1, r2
 8006d2c:	4618      	mov	r0, r3
 8006d2e:	f7ff ff5d 	bl	8006bec <__NVIC_SetPriority>
}
 8006d32:	bf00      	nop
 8006d34:	3718      	adds	r7, #24
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bd80      	pop	{r7, pc}

08006d3a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006d3a:	b580      	push	{r7, lr}
 8006d3c:	b082      	sub	sp, #8
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	4603      	mov	r3, r0
 8006d42:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006d44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006d48:	4618      	mov	r0, r3
 8006d4a:	f7ff ff31 	bl	8006bb0 <__NVIC_EnableIRQ>
}
 8006d4e:	bf00      	nop
 8006d50:	3708      	adds	r7, #8
 8006d52:	46bd      	mov	sp, r7
 8006d54:	bd80      	pop	{r7, pc}

08006d56 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006d56:	b580      	push	{r7, lr}
 8006d58:	b082      	sub	sp, #8
 8006d5a:	af00      	add	r7, sp, #0
 8006d5c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d5e:	6878      	ldr	r0, [r7, #4]
 8006d60:	f7ff ffa2 	bl	8006ca8 <SysTick_Config>
 8006d64:	4603      	mov	r3, r0
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3708      	adds	r7, #8
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}

08006d6e <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006d6e:	b580      	push	{r7, lr}
 8006d70:	b082      	sub	sp, #8
 8006d72:	af00      	add	r7, sp, #0
 8006d74:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d101      	bne.n	8006d80 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8006d7c:	2301      	movs	r3, #1
 8006d7e:	e00e      	b.n	8006d9e <HAL_CRC_Init+0x30>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	795b      	ldrb	r3, [r3, #5]
 8006d84:	b2db      	uxtb	r3, r3
 8006d86:	2b00      	cmp	r3, #0
 8006d88:	d105      	bne.n	8006d96 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	2200      	movs	r2, #0
 8006d8e:	711a      	strb	r2, [r3, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8006d90:	6878      	ldr	r0, [r7, #4]
 8006d92:	f7ff fc3d 	bl	8006610 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2201      	movs	r2, #1
 8006d9a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8006d9c:	2300      	movs	r3, #0
}
 8006d9e:	4618      	mov	r0, r3
 8006da0:	3708      	adds	r7, #8
 8006da2:	46bd      	mov	sp, r7
 8006da4:	bd80      	pop	{r7, pc}
	...

08006da8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b086      	sub	sp, #24
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8006db0:	2300      	movs	r3, #0
 8006db2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8006db4:	f7ff febe 	bl	8006b34 <HAL_GetTick>
 8006db8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e099      	b.n	8006ef8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2200      	movs	r2, #0
 8006dc8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2202      	movs	r2, #2
 8006dd0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f022 0201 	bic.w	r2, r2, #1
 8006de2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006de4:	e00f      	b.n	8006e06 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006de6:	f7ff fea5 	bl	8006b34 <HAL_GetTick>
 8006dea:	4602      	mov	r2, r0
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	1ad3      	subs	r3, r2, r3
 8006df0:	2b05      	cmp	r3, #5
 8006df2:	d908      	bls.n	8006e06 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2203      	movs	r2, #3
 8006dfe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8006e02:	2303      	movs	r3, #3
 8006e04:	e078      	b.n	8006ef8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f003 0301 	and.w	r3, r3, #1
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d1e8      	bne.n	8006de6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8006e14:	687b      	ldr	r3, [r7, #4]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8006e1c:	697a      	ldr	r2, [r7, #20]
 8006e1e:	4b38      	ldr	r3, [pc, #224]	; (8006f00 <HAL_DMA_Init+0x158>)
 8006e20:	4013      	ands	r3, r2
 8006e22:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	685a      	ldr	r2, [r3, #4]
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e32:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	691b      	ldr	r3, [r3, #16]
 8006e38:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8006e3e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	699b      	ldr	r3, [r3, #24]
 8006e44:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8006e4a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a1b      	ldr	r3, [r3, #32]
 8006e50:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8006e52:	697a      	ldr	r2, [r7, #20]
 8006e54:	4313      	orrs	r3, r2
 8006e56:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e5c:	2b04      	cmp	r3, #4
 8006e5e:	d107      	bne.n	8006e70 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	697a      	ldr	r2, [r7, #20]
 8006e6c:	4313      	orrs	r3, r2
 8006e6e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	697a      	ldr	r2, [r7, #20]
 8006e76:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	695b      	ldr	r3, [r3, #20]
 8006e7e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8006e80:	697b      	ldr	r3, [r7, #20]
 8006e82:	f023 0307 	bic.w	r3, r3, #7
 8006e86:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e8c:	697a      	ldr	r2, [r7, #20]
 8006e8e:	4313      	orrs	r3, r2
 8006e90:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e96:	2b04      	cmp	r3, #4
 8006e98:	d117      	bne.n	8006eca <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e9e:	697a      	ldr	r2, [r7, #20]
 8006ea0:	4313      	orrs	r3, r2
 8006ea2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d00e      	beq.n	8006eca <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 fadf 	bl	8007470 <DMA_CheckFifoParam>
 8006eb2:	4603      	mov	r3, r0
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d008      	beq.n	8006eca <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2240      	movs	r2, #64	; 0x40
 8006ebc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	2201      	movs	r2, #1
 8006ec2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	e016      	b.n	8006ef8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8006ed2:	6878      	ldr	r0, [r7, #4]
 8006ed4:	f000 fa96 	bl	8007404 <DMA_CalcBaseAndBitshift>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006ee0:	223f      	movs	r2, #63	; 0x3f
 8006ee2:	409a      	lsls	r2, r3
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	2200      	movs	r2, #0
 8006eec:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2201      	movs	r2, #1
 8006ef2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8006ef6:	2300      	movs	r3, #0
}
 8006ef8:	4618      	mov	r0, r3
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	f010803f 	.word	0xf010803f

08006f04 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f12:	2300      	movs	r3, #0
 8006f14:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f1a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006f22:	2b01      	cmp	r3, #1
 8006f24:	d101      	bne.n	8006f2a <HAL_DMA_Start_IT+0x26>
 8006f26:	2302      	movs	r3, #2
 8006f28:	e040      	b.n	8006fac <HAL_DMA_Start_IT+0xa8>
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	2201      	movs	r2, #1
 8006f2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006f38:	b2db      	uxtb	r3, r3
 8006f3a:	2b01      	cmp	r3, #1
 8006f3c:	d12f      	bne.n	8006f9e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	2200      	movs	r2, #0
 8006f4a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8006f4c:	683b      	ldr	r3, [r7, #0]
 8006f4e:	687a      	ldr	r2, [r7, #4]
 8006f50:	68b9      	ldr	r1, [r7, #8]
 8006f52:	68f8      	ldr	r0, [r7, #12]
 8006f54:	f000 fa28 	bl	80073a8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006f5c:	223f      	movs	r2, #63	; 0x3f
 8006f5e:	409a      	lsls	r2, r3
 8006f60:	693b      	ldr	r3, [r7, #16]
 8006f62:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8006f64:	68fb      	ldr	r3, [r7, #12]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	681b      	ldr	r3, [r3, #0]
 8006f6e:	f042 0216 	orr.w	r2, r2, #22
 8006f72:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d007      	beq.n	8006f8c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8006f7c:	68fb      	ldr	r3, [r7, #12]
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	681a      	ldr	r2, [r3, #0]
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f042 0208 	orr.w	r2, r2, #8
 8006f8a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	681a      	ldr	r2, [r3, #0]
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f042 0201 	orr.w	r2, r2, #1
 8006f9a:	601a      	str	r2, [r3, #0]
 8006f9c:	e005      	b.n	8006faa <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8006faa:	7dfb      	ldrb	r3, [r7, #23]
}
 8006fac:	4618      	mov	r0, r3
 8006fae:	3718      	adds	r7, #24
 8006fb0:	46bd      	mov	sp, r7
 8006fb2:	bd80      	pop	{r7, pc}

08006fb4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006fb4:	b580      	push	{r7, lr}
 8006fb6:	b084      	sub	sp, #16
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006fc0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006fc2:	f7ff fdb7 	bl	8006b34 <HAL_GetTick>
 8006fc6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006fce:	b2db      	uxtb	r3, r3
 8006fd0:	2b02      	cmp	r3, #2
 8006fd2:	d008      	beq.n	8006fe6 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2280      	movs	r2, #128	; 0x80
 8006fd8:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006fe2:	2301      	movs	r3, #1
 8006fe4:	e052      	b.n	800708c <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	681b      	ldr	r3, [r3, #0]
 8006fea:	681a      	ldr	r2, [r3, #0]
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f022 0216 	bic.w	r2, r2, #22
 8006ff4:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	695a      	ldr	r2, [r3, #20]
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007004:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700a:	2b00      	cmp	r3, #0
 800700c:	d103      	bne.n	8007016 <HAL_DMA_Abort+0x62>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007012:	2b00      	cmp	r3, #0
 8007014:	d007      	beq.n	8007026 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	681b      	ldr	r3, [r3, #0]
 800701a:	681a      	ldr	r2, [r3, #0]
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	f022 0208 	bic.w	r2, r2, #8
 8007024:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	681a      	ldr	r2, [r3, #0]
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f022 0201 	bic.w	r2, r2, #1
 8007034:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007036:	e013      	b.n	8007060 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007038:	f7ff fd7c 	bl	8006b34 <HAL_GetTick>
 800703c:	4602      	mov	r2, r0
 800703e:	68bb      	ldr	r3, [r7, #8]
 8007040:	1ad3      	subs	r3, r2, r3
 8007042:	2b05      	cmp	r3, #5
 8007044:	d90c      	bls.n	8007060 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2220      	movs	r2, #32
 800704a:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	2203      	movs	r2, #3
 8007058:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e015      	b.n	800708c <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f003 0301 	and.w	r3, r3, #1
 800706a:	2b00      	cmp	r3, #0
 800706c:	d1e4      	bne.n	8007038 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007072:	223f      	movs	r2, #63	; 0x3f
 8007074:	409a      	lsls	r2, r3
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	2201      	movs	r2, #1
 8007086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800708a:	2300      	movs	r3, #0
}
 800708c:	4618      	mov	r0, r3
 800708e:	3710      	adds	r7, #16
 8007090:	46bd      	mov	sp, r7
 8007092:	bd80      	pop	{r7, pc}

08007094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007094:	b580      	push	{r7, lr}
 8007096:	b086      	sub	sp, #24
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800709c:	2300      	movs	r3, #0
 800709e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80070a0:	4b92      	ldr	r3, [pc, #584]	; (80072ec <HAL_DMA_IRQHandler+0x258>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a92      	ldr	r2, [pc, #584]	; (80072f0 <HAL_DMA_IRQHandler+0x25c>)
 80070a6:	fba2 2303 	umull	r2, r3, r2, r3
 80070aa:	0a9b      	lsrs	r3, r3, #10
 80070ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070be:	2208      	movs	r2, #8
 80070c0:	409a      	lsls	r2, r3
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	4013      	ands	r3, r2
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d01a      	beq.n	8007100 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f003 0304 	and.w	r3, r3, #4
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d013      	beq.n	8007100 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	687b      	ldr	r3, [r7, #4]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f022 0204 	bic.w	r2, r2, #4
 80070e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80070ec:	2208      	movs	r2, #8
 80070ee:	409a      	lsls	r2, r3
 80070f0:	693b      	ldr	r3, [r7, #16]
 80070f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80070f8:	f043 0201 	orr.w	r2, r3, #1
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007104:	2201      	movs	r2, #1
 8007106:	409a      	lsls	r2, r3
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4013      	ands	r3, r2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d012      	beq.n	8007136 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	681b      	ldr	r3, [r3, #0]
 8007114:	695b      	ldr	r3, [r3, #20]
 8007116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007122:	2201      	movs	r2, #1
 8007124:	409a      	lsls	r2, r3
 8007126:	693b      	ldr	r3, [r7, #16]
 8007128:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800712e:	f043 0202 	orr.w	r2, r3, #2
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800713a:	2204      	movs	r2, #4
 800713c:	409a      	lsls	r2, r3
 800713e:	68fb      	ldr	r3, [r7, #12]
 8007140:	4013      	ands	r3, r2
 8007142:	2b00      	cmp	r3, #0
 8007144:	d012      	beq.n	800716c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	f003 0302 	and.w	r3, r3, #2
 8007150:	2b00      	cmp	r3, #0
 8007152:	d00b      	beq.n	800716c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007158:	2204      	movs	r2, #4
 800715a:	409a      	lsls	r2, r3
 800715c:	693b      	ldr	r3, [r7, #16]
 800715e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007164:	f043 0204 	orr.w	r2, r3, #4
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007170:	2210      	movs	r2, #16
 8007172:	409a      	lsls	r2, r3
 8007174:	68fb      	ldr	r3, [r7, #12]
 8007176:	4013      	ands	r3, r2
 8007178:	2b00      	cmp	r3, #0
 800717a:	d043      	beq.n	8007204 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f003 0308 	and.w	r3, r3, #8
 8007186:	2b00      	cmp	r3, #0
 8007188:	d03c      	beq.n	8007204 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800718e:	2210      	movs	r2, #16
 8007190:	409a      	lsls	r2, r3
 8007192:	693b      	ldr	r3, [r7, #16]
 8007194:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d018      	beq.n	80071d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	681b      	ldr	r3, [r3, #0]
 80071aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d108      	bne.n	80071c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d024      	beq.n	8007204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071be:	6878      	ldr	r0, [r7, #4]
 80071c0:	4798      	blx	r3
 80071c2:	e01f      	b.n	8007204 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d01b      	beq.n	8007204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80071d0:	6878      	ldr	r0, [r7, #4]
 80071d2:	4798      	blx	r3
 80071d4:	e016      	b.n	8007204 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d107      	bne.n	80071f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	681a      	ldr	r2, [r3, #0]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	f022 0208 	bic.w	r2, r2, #8
 80071f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d003      	beq.n	8007204 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007200:	6878      	ldr	r0, [r7, #4]
 8007202:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007208:	2220      	movs	r2, #32
 800720a:	409a      	lsls	r2, r3
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	4013      	ands	r3, r2
 8007210:	2b00      	cmp	r3, #0
 8007212:	f000 808e 	beq.w	8007332 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f003 0310 	and.w	r3, r3, #16
 8007220:	2b00      	cmp	r3, #0
 8007222:	f000 8086 	beq.w	8007332 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800722a:	2220      	movs	r2, #32
 800722c:	409a      	lsls	r2, r3
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007238:	b2db      	uxtb	r3, r3
 800723a:	2b05      	cmp	r3, #5
 800723c:	d136      	bne.n	80072ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f022 0216 	bic.w	r2, r2, #22
 800724c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	695a      	ldr	r2, [r3, #20]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800725c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007262:	2b00      	cmp	r3, #0
 8007264:	d103      	bne.n	800726e <HAL_DMA_IRQHandler+0x1da>
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800726a:	2b00      	cmp	r3, #0
 800726c:	d007      	beq.n	800727e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	f022 0208 	bic.w	r2, r2, #8
 800727c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007282:	223f      	movs	r2, #63	; 0x3f
 8007284:	409a      	lsls	r2, r3
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	2200      	movs	r2, #0
 800728e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	2201      	movs	r2, #1
 8007296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d07d      	beq.n	800739e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80072a6:	6878      	ldr	r0, [r7, #4]
 80072a8:	4798      	blx	r3
        }
        return;
 80072aa:	e078      	b.n	800739e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d01c      	beq.n	80072f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d108      	bne.n	80072da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d030      	beq.n	8007332 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072d4:	6878      	ldr	r0, [r7, #4]
 80072d6:	4798      	blx	r3
 80072d8:	e02b      	b.n	8007332 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d027      	beq.n	8007332 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80072e6:	6878      	ldr	r0, [r7, #4]
 80072e8:	4798      	blx	r3
 80072ea:	e022      	b.n	8007332 <HAL_DMA_IRQHandler+0x29e>
 80072ec:	20000058 	.word	0x20000058
 80072f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d10f      	bne.n	8007322 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	681a      	ldr	r2, [r3, #0]
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	f022 0210 	bic.w	r2, r2, #16
 8007310:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2200      	movs	r2, #0
 8007316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	2201      	movs	r2, #1
 800731e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007326:	2b00      	cmp	r3, #0
 8007328:	d003      	beq.n	8007332 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007336:	2b00      	cmp	r3, #0
 8007338:	d032      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800733e:	f003 0301 	and.w	r3, r3, #1
 8007342:	2b00      	cmp	r3, #0
 8007344:	d022      	beq.n	800738c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	2205      	movs	r2, #5
 800734a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	681a      	ldr	r2, [r3, #0]
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	f022 0201 	bic.w	r2, r2, #1
 800735c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800735e:	68bb      	ldr	r3, [r7, #8]
 8007360:	3301      	adds	r3, #1
 8007362:	60bb      	str	r3, [r7, #8]
 8007364:	697a      	ldr	r2, [r7, #20]
 8007366:	429a      	cmp	r2, r3
 8007368:	d307      	bcc.n	800737a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	f003 0301 	and.w	r3, r3, #1
 8007374:	2b00      	cmp	r3, #0
 8007376:	d1f2      	bne.n	800735e <HAL_DMA_IRQHandler+0x2ca>
 8007378:	e000      	b.n	800737c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800737a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	2201      	movs	r2, #1
 8007388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007390:	2b00      	cmp	r3, #0
 8007392:	d005      	beq.n	80073a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007398:	6878      	ldr	r0, [r7, #4]
 800739a:	4798      	blx	r3
 800739c:	e000      	b.n	80073a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800739e:	bf00      	nop
    }
  }
}
 80073a0:	3718      	adds	r7, #24
 80073a2:	46bd      	mov	sp, r7
 80073a4:	bd80      	pop	{r7, pc}
 80073a6:	bf00      	nop

080073a8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80073a8:	b480      	push	{r7}
 80073aa:	b085      	sub	sp, #20
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	60f8      	str	r0, [r7, #12]
 80073b0:	60b9      	str	r1, [r7, #8]
 80073b2:	607a      	str	r2, [r7, #4]
 80073b4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80073c4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	683a      	ldr	r2, [r7, #0]
 80073cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80073ce:	68fb      	ldr	r3, [r7, #12]
 80073d0:	689b      	ldr	r3, [r3, #8]
 80073d2:	2b40      	cmp	r3, #64	; 0x40
 80073d4:	d108      	bne.n	80073e8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	687a      	ldr	r2, [r7, #4]
 80073dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80073de:	68fb      	ldr	r3, [r7, #12]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	68ba      	ldr	r2, [r7, #8]
 80073e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80073e6:	e007      	b.n	80073f8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	68ba      	ldr	r2, [r7, #8]
 80073ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80073f0:	68fb      	ldr	r3, [r7, #12]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	60da      	str	r2, [r3, #12]
}
 80073f8:	bf00      	nop
 80073fa:	3714      	adds	r7, #20
 80073fc:	46bd      	mov	sp, r7
 80073fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007402:	4770      	bx	lr

08007404 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8007404:	b480      	push	{r7}
 8007406:	b085      	sub	sp, #20
 8007408:	af00      	add	r7, sp, #0
 800740a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	b2db      	uxtb	r3, r3
 8007412:	3b10      	subs	r3, #16
 8007414:	4a14      	ldr	r2, [pc, #80]	; (8007468 <DMA_CalcBaseAndBitshift+0x64>)
 8007416:	fba2 2303 	umull	r2, r3, r2, r3
 800741a:	091b      	lsrs	r3, r3, #4
 800741c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800741e:	4a13      	ldr	r2, [pc, #76]	; (800746c <DMA_CalcBaseAndBitshift+0x68>)
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	4413      	add	r3, r2
 8007424:	781b      	ldrb	r3, [r3, #0]
 8007426:	461a      	mov	r2, r3
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b03      	cmp	r3, #3
 8007430:	d909      	bls.n	8007446 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800743a:	f023 0303 	bic.w	r3, r3, #3
 800743e:	1d1a      	adds	r2, r3, #4
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	659a      	str	r2, [r3, #88]	; 0x58
 8007444:	e007      	b.n	8007456 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800744e:	f023 0303 	bic.w	r3, r3, #3
 8007452:	687a      	ldr	r2, [r7, #4]
 8007454:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800745a:	4618      	mov	r0, r3
 800745c:	3714      	adds	r7, #20
 800745e:	46bd      	mov	sp, r7
 8007460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007464:	4770      	bx	lr
 8007466:	bf00      	nop
 8007468:	aaaaaaab 	.word	0xaaaaaaab
 800746c:	0801f368 	.word	0x0801f368

08007470 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8007470:	b480      	push	{r7}
 8007472:	b085      	sub	sp, #20
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007480:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	699b      	ldr	r3, [r3, #24]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d11f      	bne.n	80074ca <DMA_CheckFifoParam+0x5a>
 800748a:	68bb      	ldr	r3, [r7, #8]
 800748c:	2b03      	cmp	r3, #3
 800748e:	d856      	bhi.n	800753e <DMA_CheckFifoParam+0xce>
 8007490:	a201      	add	r2, pc, #4	; (adr r2, 8007498 <DMA_CheckFifoParam+0x28>)
 8007492:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007496:	bf00      	nop
 8007498:	080074a9 	.word	0x080074a9
 800749c:	080074bb 	.word	0x080074bb
 80074a0:	080074a9 	.word	0x080074a9
 80074a4:	0800753f 	.word	0x0800753f
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d046      	beq.n	8007542 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80074b4:	2301      	movs	r3, #1
 80074b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074b8:	e043      	b.n	8007542 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80074c2:	d140      	bne.n	8007546 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80074c8:	e03d      	b.n	8007546 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	699b      	ldr	r3, [r3, #24]
 80074ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074d2:	d121      	bne.n	8007518 <DMA_CheckFifoParam+0xa8>
 80074d4:	68bb      	ldr	r3, [r7, #8]
 80074d6:	2b03      	cmp	r3, #3
 80074d8:	d837      	bhi.n	800754a <DMA_CheckFifoParam+0xda>
 80074da:	a201      	add	r2, pc, #4	; (adr r2, 80074e0 <DMA_CheckFifoParam+0x70>)
 80074dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074e0:	080074f1 	.word	0x080074f1
 80074e4:	080074f7 	.word	0x080074f7
 80074e8:	080074f1 	.word	0x080074f1
 80074ec:	08007509 	.word	0x08007509
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80074f0:	2301      	movs	r3, #1
 80074f2:	73fb      	strb	r3, [r7, #15]
      break;
 80074f4:	e030      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d025      	beq.n	800754e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8007502:	2301      	movs	r3, #1
 8007504:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007506:	e022      	b.n	800754e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800750c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8007510:	d11f      	bne.n	8007552 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8007512:	2301      	movs	r3, #1
 8007514:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8007516:	e01c      	b.n	8007552 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8007518:	68bb      	ldr	r3, [r7, #8]
 800751a:	2b02      	cmp	r3, #2
 800751c:	d903      	bls.n	8007526 <DMA_CheckFifoParam+0xb6>
 800751e:	68bb      	ldr	r3, [r7, #8]
 8007520:	2b03      	cmp	r3, #3
 8007522:	d003      	beq.n	800752c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8007524:	e018      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8007526:	2301      	movs	r3, #1
 8007528:	73fb      	strb	r3, [r7, #15]
      break;
 800752a:	e015      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007530:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007534:	2b00      	cmp	r3, #0
 8007536:	d00e      	beq.n	8007556 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8007538:	2301      	movs	r3, #1
 800753a:	73fb      	strb	r3, [r7, #15]
      break;
 800753c:	e00b      	b.n	8007556 <DMA_CheckFifoParam+0xe6>
      break;
 800753e:	bf00      	nop
 8007540:	e00a      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
      break;
 8007542:	bf00      	nop
 8007544:	e008      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
      break;
 8007546:	bf00      	nop
 8007548:	e006      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
      break;
 800754a:	bf00      	nop
 800754c:	e004      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
      break;
 800754e:	bf00      	nop
 8007550:	e002      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
      break;   
 8007552:	bf00      	nop
 8007554:	e000      	b.n	8007558 <DMA_CheckFifoParam+0xe8>
      break;
 8007556:	bf00      	nop
    }
  } 
  
  return status; 
 8007558:	7bfb      	ldrb	r3, [r7, #15]
}
 800755a:	4618      	mov	r0, r3
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop

08007568 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007568:	b480      	push	{r7}
 800756a:	b089      	sub	sp, #36	; 0x24
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
 8007570:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007572:	2300      	movs	r3, #0
 8007574:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007576:	2300      	movs	r3, #0
 8007578:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800757a:	2300      	movs	r3, #0
 800757c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800757e:	2300      	movs	r3, #0
 8007580:	61fb      	str	r3, [r7, #28]
 8007582:	e165      	b.n	8007850 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007584:	2201      	movs	r2, #1
 8007586:	69fb      	ldr	r3, [r7, #28]
 8007588:	fa02 f303 	lsl.w	r3, r2, r3
 800758c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	697a      	ldr	r2, [r7, #20]
 8007594:	4013      	ands	r3, r2
 8007596:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	429a      	cmp	r2, r3
 800759e:	f040 8154 	bne.w	800784a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075a2:	683b      	ldr	r3, [r7, #0]
 80075a4:	685b      	ldr	r3, [r3, #4]
 80075a6:	f003 0303 	and.w	r3, r3, #3
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d005      	beq.n	80075ba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80075ae:	683b      	ldr	r3, [r7, #0]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80075b6:	2b02      	cmp	r3, #2
 80075b8:	d130      	bne.n	800761c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	689b      	ldr	r3, [r3, #8]
 80075be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80075c0:	69fb      	ldr	r3, [r7, #28]
 80075c2:	005b      	lsls	r3, r3, #1
 80075c4:	2203      	movs	r2, #3
 80075c6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ca:	43db      	mvns	r3, r3
 80075cc:	69ba      	ldr	r2, [r7, #24]
 80075ce:	4013      	ands	r3, r2
 80075d0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	68da      	ldr	r2, [r3, #12]
 80075d6:	69fb      	ldr	r3, [r7, #28]
 80075d8:	005b      	lsls	r3, r3, #1
 80075da:	fa02 f303 	lsl.w	r3, r2, r3
 80075de:	69ba      	ldr	r2, [r7, #24]
 80075e0:	4313      	orrs	r3, r2
 80075e2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	69ba      	ldr	r2, [r7, #24]
 80075e8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80075f0:	2201      	movs	r2, #1
 80075f2:	69fb      	ldr	r3, [r7, #28]
 80075f4:	fa02 f303 	lsl.w	r3, r2, r3
 80075f8:	43db      	mvns	r3, r3
 80075fa:	69ba      	ldr	r2, [r7, #24]
 80075fc:	4013      	ands	r3, r2
 80075fe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8007600:	683b      	ldr	r3, [r7, #0]
 8007602:	685b      	ldr	r3, [r3, #4]
 8007604:	091b      	lsrs	r3, r3, #4
 8007606:	f003 0201 	and.w	r2, r3, #1
 800760a:	69fb      	ldr	r3, [r7, #28]
 800760c:	fa02 f303 	lsl.w	r3, r2, r3
 8007610:	69ba      	ldr	r2, [r7, #24]
 8007612:	4313      	orrs	r3, r2
 8007614:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	69ba      	ldr	r2, [r7, #24]
 800761a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800761c:	683b      	ldr	r3, [r7, #0]
 800761e:	685b      	ldr	r3, [r3, #4]
 8007620:	f003 0303 	and.w	r3, r3, #3
 8007624:	2b03      	cmp	r3, #3
 8007626:	d017      	beq.n	8007658 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68db      	ldr	r3, [r3, #12]
 800762c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800762e:	69fb      	ldr	r3, [r7, #28]
 8007630:	005b      	lsls	r3, r3, #1
 8007632:	2203      	movs	r2, #3
 8007634:	fa02 f303 	lsl.w	r3, r2, r3
 8007638:	43db      	mvns	r3, r3
 800763a:	69ba      	ldr	r2, [r7, #24]
 800763c:	4013      	ands	r3, r2
 800763e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	689a      	ldr	r2, [r3, #8]
 8007644:	69fb      	ldr	r3, [r7, #28]
 8007646:	005b      	lsls	r3, r3, #1
 8007648:	fa02 f303 	lsl.w	r3, r2, r3
 800764c:	69ba      	ldr	r2, [r7, #24]
 800764e:	4313      	orrs	r3, r2
 8007650:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	69ba      	ldr	r2, [r7, #24]
 8007656:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007658:	683b      	ldr	r3, [r7, #0]
 800765a:	685b      	ldr	r3, [r3, #4]
 800765c:	f003 0303 	and.w	r3, r3, #3
 8007660:	2b02      	cmp	r3, #2
 8007662:	d123      	bne.n	80076ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007664:	69fb      	ldr	r3, [r7, #28]
 8007666:	08da      	lsrs	r2, r3, #3
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	3208      	adds	r2, #8
 800766c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007670:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007672:	69fb      	ldr	r3, [r7, #28]
 8007674:	f003 0307 	and.w	r3, r3, #7
 8007678:	009b      	lsls	r3, r3, #2
 800767a:	220f      	movs	r2, #15
 800767c:	fa02 f303 	lsl.w	r3, r2, r3
 8007680:	43db      	mvns	r3, r3
 8007682:	69ba      	ldr	r2, [r7, #24]
 8007684:	4013      	ands	r3, r2
 8007686:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007688:	683b      	ldr	r3, [r7, #0]
 800768a:	691a      	ldr	r2, [r3, #16]
 800768c:	69fb      	ldr	r3, [r7, #28]
 800768e:	f003 0307 	and.w	r3, r3, #7
 8007692:	009b      	lsls	r3, r3, #2
 8007694:	fa02 f303 	lsl.w	r3, r2, r3
 8007698:	69ba      	ldr	r2, [r7, #24]
 800769a:	4313      	orrs	r3, r2
 800769c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800769e:	69fb      	ldr	r3, [r7, #28]
 80076a0:	08da      	lsrs	r2, r3, #3
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	3208      	adds	r2, #8
 80076a6:	69b9      	ldr	r1, [r7, #24]
 80076a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80076b2:	69fb      	ldr	r3, [r7, #28]
 80076b4:	005b      	lsls	r3, r3, #1
 80076b6:	2203      	movs	r2, #3
 80076b8:	fa02 f303 	lsl.w	r3, r2, r3
 80076bc:	43db      	mvns	r3, r3
 80076be:	69ba      	ldr	r2, [r7, #24]
 80076c0:	4013      	ands	r3, r2
 80076c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	685b      	ldr	r3, [r3, #4]
 80076c8:	f003 0203 	and.w	r2, r3, #3
 80076cc:	69fb      	ldr	r3, [r7, #28]
 80076ce:	005b      	lsls	r3, r3, #1
 80076d0:	fa02 f303 	lsl.w	r3, r2, r3
 80076d4:	69ba      	ldr	r2, [r7, #24]
 80076d6:	4313      	orrs	r3, r2
 80076d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	69ba      	ldr	r2, [r7, #24]
 80076de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80076e0:	683b      	ldr	r3, [r7, #0]
 80076e2:	685b      	ldr	r3, [r3, #4]
 80076e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	f000 80ae 	beq.w	800784a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80076ee:	2300      	movs	r3, #0
 80076f0:	60fb      	str	r3, [r7, #12]
 80076f2:	4b5d      	ldr	r3, [pc, #372]	; (8007868 <HAL_GPIO_Init+0x300>)
 80076f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076f6:	4a5c      	ldr	r2, [pc, #368]	; (8007868 <HAL_GPIO_Init+0x300>)
 80076f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80076fc:	6453      	str	r3, [r2, #68]	; 0x44
 80076fe:	4b5a      	ldr	r3, [pc, #360]	; (8007868 <HAL_GPIO_Init+0x300>)
 8007700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007706:	60fb      	str	r3, [r7, #12]
 8007708:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800770a:	4a58      	ldr	r2, [pc, #352]	; (800786c <HAL_GPIO_Init+0x304>)
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	089b      	lsrs	r3, r3, #2
 8007710:	3302      	adds	r3, #2
 8007712:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007716:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007718:	69fb      	ldr	r3, [r7, #28]
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	009b      	lsls	r3, r3, #2
 8007720:	220f      	movs	r2, #15
 8007722:	fa02 f303 	lsl.w	r3, r2, r3
 8007726:	43db      	mvns	r3, r3
 8007728:	69ba      	ldr	r2, [r7, #24]
 800772a:	4013      	ands	r3, r2
 800772c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	4a4f      	ldr	r2, [pc, #316]	; (8007870 <HAL_GPIO_Init+0x308>)
 8007732:	4293      	cmp	r3, r2
 8007734:	d025      	beq.n	8007782 <HAL_GPIO_Init+0x21a>
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	4a4e      	ldr	r2, [pc, #312]	; (8007874 <HAL_GPIO_Init+0x30c>)
 800773a:	4293      	cmp	r3, r2
 800773c:	d01f      	beq.n	800777e <HAL_GPIO_Init+0x216>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	4a4d      	ldr	r2, [pc, #308]	; (8007878 <HAL_GPIO_Init+0x310>)
 8007742:	4293      	cmp	r3, r2
 8007744:	d019      	beq.n	800777a <HAL_GPIO_Init+0x212>
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	4a4c      	ldr	r2, [pc, #304]	; (800787c <HAL_GPIO_Init+0x314>)
 800774a:	4293      	cmp	r3, r2
 800774c:	d013      	beq.n	8007776 <HAL_GPIO_Init+0x20e>
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	4a4b      	ldr	r2, [pc, #300]	; (8007880 <HAL_GPIO_Init+0x318>)
 8007752:	4293      	cmp	r3, r2
 8007754:	d00d      	beq.n	8007772 <HAL_GPIO_Init+0x20a>
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	4a4a      	ldr	r2, [pc, #296]	; (8007884 <HAL_GPIO_Init+0x31c>)
 800775a:	4293      	cmp	r3, r2
 800775c:	d007      	beq.n	800776e <HAL_GPIO_Init+0x206>
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	4a49      	ldr	r2, [pc, #292]	; (8007888 <HAL_GPIO_Init+0x320>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d101      	bne.n	800776a <HAL_GPIO_Init+0x202>
 8007766:	2306      	movs	r3, #6
 8007768:	e00c      	b.n	8007784 <HAL_GPIO_Init+0x21c>
 800776a:	2307      	movs	r3, #7
 800776c:	e00a      	b.n	8007784 <HAL_GPIO_Init+0x21c>
 800776e:	2305      	movs	r3, #5
 8007770:	e008      	b.n	8007784 <HAL_GPIO_Init+0x21c>
 8007772:	2304      	movs	r3, #4
 8007774:	e006      	b.n	8007784 <HAL_GPIO_Init+0x21c>
 8007776:	2303      	movs	r3, #3
 8007778:	e004      	b.n	8007784 <HAL_GPIO_Init+0x21c>
 800777a:	2302      	movs	r3, #2
 800777c:	e002      	b.n	8007784 <HAL_GPIO_Init+0x21c>
 800777e:	2301      	movs	r3, #1
 8007780:	e000      	b.n	8007784 <HAL_GPIO_Init+0x21c>
 8007782:	2300      	movs	r3, #0
 8007784:	69fa      	ldr	r2, [r7, #28]
 8007786:	f002 0203 	and.w	r2, r2, #3
 800778a:	0092      	lsls	r2, r2, #2
 800778c:	4093      	lsls	r3, r2
 800778e:	69ba      	ldr	r2, [r7, #24]
 8007790:	4313      	orrs	r3, r2
 8007792:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007794:	4935      	ldr	r1, [pc, #212]	; (800786c <HAL_GPIO_Init+0x304>)
 8007796:	69fb      	ldr	r3, [r7, #28]
 8007798:	089b      	lsrs	r3, r3, #2
 800779a:	3302      	adds	r3, #2
 800779c:	69ba      	ldr	r2, [r7, #24]
 800779e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80077a2:	4b3a      	ldr	r3, [pc, #232]	; (800788c <HAL_GPIO_Init+0x324>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	43db      	mvns	r3, r3
 80077ac:	69ba      	ldr	r2, [r7, #24]
 80077ae:	4013      	ands	r3, r2
 80077b0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80077b2:	683b      	ldr	r3, [r7, #0]
 80077b4:	685b      	ldr	r3, [r3, #4]
 80077b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d003      	beq.n	80077c6 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80077be:	69ba      	ldr	r2, [r7, #24]
 80077c0:	693b      	ldr	r3, [r7, #16]
 80077c2:	4313      	orrs	r3, r2
 80077c4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80077c6:	4a31      	ldr	r2, [pc, #196]	; (800788c <HAL_GPIO_Init+0x324>)
 80077c8:	69bb      	ldr	r3, [r7, #24]
 80077ca:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80077cc:	4b2f      	ldr	r3, [pc, #188]	; (800788c <HAL_GPIO_Init+0x324>)
 80077ce:	685b      	ldr	r3, [r3, #4]
 80077d0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	43db      	mvns	r3, r3
 80077d6:	69ba      	ldr	r2, [r7, #24]
 80077d8:	4013      	ands	r3, r2
 80077da:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	685b      	ldr	r3, [r3, #4]
 80077e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d003      	beq.n	80077f0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 80077e8:	69ba      	ldr	r2, [r7, #24]
 80077ea:	693b      	ldr	r3, [r7, #16]
 80077ec:	4313      	orrs	r3, r2
 80077ee:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80077f0:	4a26      	ldr	r2, [pc, #152]	; (800788c <HAL_GPIO_Init+0x324>)
 80077f2:	69bb      	ldr	r3, [r7, #24]
 80077f4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80077f6:	4b25      	ldr	r3, [pc, #148]	; (800788c <HAL_GPIO_Init+0x324>)
 80077f8:	689b      	ldr	r3, [r3, #8]
 80077fa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80077fc:	693b      	ldr	r3, [r7, #16]
 80077fe:	43db      	mvns	r3, r3
 8007800:	69ba      	ldr	r2, [r7, #24]
 8007802:	4013      	ands	r3, r2
 8007804:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800780e:	2b00      	cmp	r3, #0
 8007810:	d003      	beq.n	800781a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8007812:	69ba      	ldr	r2, [r7, #24]
 8007814:	693b      	ldr	r3, [r7, #16]
 8007816:	4313      	orrs	r3, r2
 8007818:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800781a:	4a1c      	ldr	r2, [pc, #112]	; (800788c <HAL_GPIO_Init+0x324>)
 800781c:	69bb      	ldr	r3, [r7, #24]
 800781e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8007820:	4b1a      	ldr	r3, [pc, #104]	; (800788c <HAL_GPIO_Init+0x324>)
 8007822:	68db      	ldr	r3, [r3, #12]
 8007824:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007826:	693b      	ldr	r3, [r7, #16]
 8007828:	43db      	mvns	r3, r3
 800782a:	69ba      	ldr	r2, [r7, #24]
 800782c:	4013      	ands	r3, r2
 800782e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8007830:	683b      	ldr	r3, [r7, #0]
 8007832:	685b      	ldr	r3, [r3, #4]
 8007834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007838:	2b00      	cmp	r3, #0
 800783a:	d003      	beq.n	8007844 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800783c:	69ba      	ldr	r2, [r7, #24]
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	4313      	orrs	r3, r2
 8007842:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007844:	4a11      	ldr	r2, [pc, #68]	; (800788c <HAL_GPIO_Init+0x324>)
 8007846:	69bb      	ldr	r3, [r7, #24]
 8007848:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800784a:	69fb      	ldr	r3, [r7, #28]
 800784c:	3301      	adds	r3, #1
 800784e:	61fb      	str	r3, [r7, #28]
 8007850:	69fb      	ldr	r3, [r7, #28]
 8007852:	2b0f      	cmp	r3, #15
 8007854:	f67f ae96 	bls.w	8007584 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	3724      	adds	r7, #36	; 0x24
 800785e:	46bd      	mov	sp, r7
 8007860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	40023800 	.word	0x40023800
 800786c:	40013800 	.word	0x40013800
 8007870:	40020000 	.word	0x40020000
 8007874:	40020400 	.word	0x40020400
 8007878:	40020800 	.word	0x40020800
 800787c:	40020c00 	.word	0x40020c00
 8007880:	40021000 	.word	0x40021000
 8007884:	40021400 	.word	0x40021400
 8007888:	40021800 	.word	0x40021800
 800788c:	40013c00 	.word	0x40013c00

08007890 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
 8007898:	460b      	mov	r3, r1
 800789a:	807b      	strh	r3, [r7, #2]
 800789c:	4613      	mov	r3, r2
 800789e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80078a0:	787b      	ldrb	r3, [r7, #1]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d003      	beq.n	80078ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80078a6:	887a      	ldrh	r2, [r7, #2]
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80078ac:	e003      	b.n	80078b6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80078ae:	887b      	ldrh	r3, [r7, #2]
 80078b0:	041a      	lsls	r2, r3, #16
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	619a      	str	r2, [r3, #24]
}
 80078b6:	bf00      	nop
 80078b8:	370c      	adds	r7, #12
 80078ba:	46bd      	mov	sp, r7
 80078bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c0:	4770      	bx	lr
	...

080078c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b084      	sub	sp, #16
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
 80078cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d101      	bne.n	80078d8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078d4:	2301      	movs	r3, #1
 80078d6:	e0cc      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078d8:	4b68      	ldr	r3, [pc, #416]	; (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 030f 	and.w	r3, r3, #15
 80078e0:	683a      	ldr	r2, [r7, #0]
 80078e2:	429a      	cmp	r2, r3
 80078e4:	d90c      	bls.n	8007900 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078e6:	4b65      	ldr	r3, [pc, #404]	; (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80078e8:	683a      	ldr	r2, [r7, #0]
 80078ea:	b2d2      	uxtb	r2, r2
 80078ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078ee:	4b63      	ldr	r3, [pc, #396]	; (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	f003 030f 	and.w	r3, r3, #15
 80078f6:	683a      	ldr	r2, [r7, #0]
 80078f8:	429a      	cmp	r2, r3
 80078fa:	d001      	beq.n	8007900 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80078fc:	2301      	movs	r3, #1
 80078fe:	e0b8      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f003 0302 	and.w	r3, r3, #2
 8007908:	2b00      	cmp	r3, #0
 800790a:	d020      	beq.n	800794e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0304 	and.w	r3, r3, #4
 8007914:	2b00      	cmp	r3, #0
 8007916:	d005      	beq.n	8007924 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007918:	4b59      	ldr	r3, [pc, #356]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 800791a:	689b      	ldr	r3, [r3, #8]
 800791c:	4a58      	ldr	r2, [pc, #352]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 800791e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007922:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	f003 0308 	and.w	r3, r3, #8
 800792c:	2b00      	cmp	r3, #0
 800792e:	d005      	beq.n	800793c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007930:	4b53      	ldr	r3, [pc, #332]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	4a52      	ldr	r2, [pc, #328]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007936:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800793a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800793c:	4b50      	ldr	r3, [pc, #320]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	689b      	ldr	r3, [r3, #8]
 8007948:	494d      	ldr	r1, [pc, #308]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 800794a:	4313      	orrs	r3, r2
 800794c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	f003 0301 	and.w	r3, r3, #1
 8007956:	2b00      	cmp	r3, #0
 8007958:	d044      	beq.n	80079e4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	2b01      	cmp	r3, #1
 8007960:	d107      	bne.n	8007972 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007962:	4b47      	ldr	r3, [pc, #284]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800796a:	2b00      	cmp	r3, #0
 800796c:	d119      	bne.n	80079a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800796e:	2301      	movs	r3, #1
 8007970:	e07f      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	685b      	ldr	r3, [r3, #4]
 8007976:	2b02      	cmp	r3, #2
 8007978:	d003      	beq.n	8007982 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800797e:	2b03      	cmp	r3, #3
 8007980:	d107      	bne.n	8007992 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007982:	4b3f      	ldr	r3, [pc, #252]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800798a:	2b00      	cmp	r3, #0
 800798c:	d109      	bne.n	80079a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800798e:	2301      	movs	r3, #1
 8007990:	e06f      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007992:	4b3b      	ldr	r3, [pc, #236]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f003 0302 	and.w	r3, r3, #2
 800799a:	2b00      	cmp	r3, #0
 800799c:	d101      	bne.n	80079a2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800799e:	2301      	movs	r3, #1
 80079a0:	e067      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079a2:	4b37      	ldr	r3, [pc, #220]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 80079a4:	689b      	ldr	r3, [r3, #8]
 80079a6:	f023 0203 	bic.w	r2, r3, #3
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	685b      	ldr	r3, [r3, #4]
 80079ae:	4934      	ldr	r1, [pc, #208]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079b4:	f7ff f8be 	bl	8006b34 <HAL_GetTick>
 80079b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079ba:	e00a      	b.n	80079d2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079bc:	f7ff f8ba 	bl	8006b34 <HAL_GetTick>
 80079c0:	4602      	mov	r2, r0
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	1ad3      	subs	r3, r2, r3
 80079c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80079ca:	4293      	cmp	r3, r2
 80079cc:	d901      	bls.n	80079d2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079ce:	2303      	movs	r3, #3
 80079d0:	e04f      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079d2:	4b2b      	ldr	r3, [pc, #172]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 80079d4:	689b      	ldr	r3, [r3, #8]
 80079d6:	f003 020c 	and.w	r2, r3, #12
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685b      	ldr	r3, [r3, #4]
 80079de:	009b      	lsls	r3, r3, #2
 80079e0:	429a      	cmp	r2, r3
 80079e2:	d1eb      	bne.n	80079bc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079e4:	4b25      	ldr	r3, [pc, #148]	; (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	f003 030f 	and.w	r3, r3, #15
 80079ec:	683a      	ldr	r2, [r7, #0]
 80079ee:	429a      	cmp	r2, r3
 80079f0:	d20c      	bcs.n	8007a0c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079f2:	4b22      	ldr	r3, [pc, #136]	; (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80079f4:	683a      	ldr	r2, [r7, #0]
 80079f6:	b2d2      	uxtb	r2, r2
 80079f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80079fa:	4b20      	ldr	r3, [pc, #128]	; (8007a7c <HAL_RCC_ClockConfig+0x1b8>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	f003 030f 	and.w	r3, r3, #15
 8007a02:	683a      	ldr	r2, [r7, #0]
 8007a04:	429a      	cmp	r2, r3
 8007a06:	d001      	beq.n	8007a0c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a08:	2301      	movs	r3, #1
 8007a0a:	e032      	b.n	8007a72 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d008      	beq.n	8007a2a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a18:	4b19      	ldr	r3, [pc, #100]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a1a:	689b      	ldr	r3, [r3, #8]
 8007a1c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	68db      	ldr	r3, [r3, #12]
 8007a24:	4916      	ldr	r1, [pc, #88]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	f003 0308 	and.w	r3, r3, #8
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d009      	beq.n	8007a4a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a36:	4b12      	ldr	r3, [pc, #72]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a38:	689b      	ldr	r3, [r3, #8]
 8007a3a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	691b      	ldr	r3, [r3, #16]
 8007a42:	00db      	lsls	r3, r3, #3
 8007a44:	490e      	ldr	r1, [pc, #56]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a46:	4313      	orrs	r3, r2
 8007a48:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a4a:	f000 fdc7 	bl	80085dc <HAL_RCC_GetSysClockFreq>
 8007a4e:	4602      	mov	r2, r0
 8007a50:	4b0b      	ldr	r3, [pc, #44]	; (8007a80 <HAL_RCC_ClockConfig+0x1bc>)
 8007a52:	689b      	ldr	r3, [r3, #8]
 8007a54:	091b      	lsrs	r3, r3, #4
 8007a56:	f003 030f 	and.w	r3, r3, #15
 8007a5a:	490a      	ldr	r1, [pc, #40]	; (8007a84 <HAL_RCC_ClockConfig+0x1c0>)
 8007a5c:	5ccb      	ldrb	r3, [r1, r3]
 8007a5e:	fa22 f303 	lsr.w	r3, r2, r3
 8007a62:	4a09      	ldr	r2, [pc, #36]	; (8007a88 <HAL_RCC_ClockConfig+0x1c4>)
 8007a64:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a66:	4b09      	ldr	r3, [pc, #36]	; (8007a8c <HAL_RCC_ClockConfig+0x1c8>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	f7ff f81e 	bl	8006aac <HAL_InitTick>

  return HAL_OK;
 8007a70:	2300      	movs	r3, #0
}
 8007a72:	4618      	mov	r0, r3
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	40023c00 	.word	0x40023c00
 8007a80:	40023800 	.word	0x40023800
 8007a84:	0801f350 	.word	0x0801f350
 8007a88:	20000058 	.word	0x20000058
 8007a8c:	2000005c 	.word	0x2000005c

08007a90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007a90:	b480      	push	{r7}
 8007a92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007a94:	4b03      	ldr	r3, [pc, #12]	; (8007aa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007a96:	681b      	ldr	r3, [r3, #0]
}
 8007a98:	4618      	mov	r0, r3
 8007a9a:	46bd      	mov	sp, r7
 8007a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aa0:	4770      	bx	lr
 8007aa2:	bf00      	nop
 8007aa4:	20000058 	.word	0x20000058

08007aa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007aac:	f7ff fff0 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007ab0:	4602      	mov	r2, r0
 8007ab2:	4b05      	ldr	r3, [pc, #20]	; (8007ac8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007ab4:	689b      	ldr	r3, [r3, #8]
 8007ab6:	0a9b      	lsrs	r3, r3, #10
 8007ab8:	f003 0307 	and.w	r3, r3, #7
 8007abc:	4903      	ldr	r1, [pc, #12]	; (8007acc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007abe:	5ccb      	ldrb	r3, [r1, r3]
 8007ac0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	40023800 	.word	0x40023800
 8007acc:	0801f360 	.word	0x0801f360

08007ad0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ad4:	f7ff ffdc 	bl	8007a90 <HAL_RCC_GetHCLKFreq>
 8007ad8:	4602      	mov	r2, r0
 8007ada:	4b05      	ldr	r3, [pc, #20]	; (8007af0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007adc:	689b      	ldr	r3, [r3, #8]
 8007ade:	0b5b      	lsrs	r3, r3, #13
 8007ae0:	f003 0307 	and.w	r3, r3, #7
 8007ae4:	4903      	ldr	r1, [pc, #12]	; (8007af4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007ae6:	5ccb      	ldrb	r3, [r1, r3]
 8007ae8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007aec:	4618      	mov	r0, r3
 8007aee:	bd80      	pop	{r7, pc}
 8007af0:	40023800 	.word	0x40023800
 8007af4:	0801f360 	.word	0x0801f360

08007af8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007af8:	b580      	push	{r7, lr}
 8007afa:	b08c      	sub	sp, #48	; 0x30
 8007afc:	af00      	add	r7, sp, #0
 8007afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007b00:	2300      	movs	r3, #0
 8007b02:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmpreg1 = 0U;
 8007b04:	2300      	movs	r3, #0
 8007b06:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8007b0c:	2300      	movs	r3, #0
 8007b0e:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8007b10:	2300      	movs	r3, #0
 8007b12:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8007b14:	2300      	movs	r3, #0
 8007b16:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t pllsaiused = 0U;
 8007b20:	2300      	movs	r3, #0
 8007b22:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	f003 0301 	and.w	r3, r3, #1
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d010      	beq.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8007b30:	4b6f      	ldr	r3, [pc, #444]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b32:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b36:	f023 62c0 	bic.w	r2, r3, #100663296	; 0x6000000
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b3e:	496c      	ldr	r1, [pc, #432]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b40:	4313      	orrs	r3, r2
 8007b42:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d101      	bne.n	8007b52 <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8007b4e:	2301      	movs	r3, #1
 8007b50:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	f003 0302 	and.w	r3, r3, #2
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d010      	beq.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8007b5e:	4b64      	ldr	r3, [pc, #400]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b64:	f023 52c0 	bic.w	r2, r3, #402653184	; 0x18000000
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b6c:	4960      	ldr	r1, [pc, #384]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b6e:	4313      	orrs	r3, r2
 8007b70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d101      	bne.n	8007b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	f003 0304 	and.w	r3, r3, #4
 8007b88:	2b00      	cmp	r3, #0
 8007b8a:	d017      	beq.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007b8c:	4b58      	ldr	r3, [pc, #352]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b92:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b9a:	4955      	ldr	r1, [pc, #340]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007b9c:	4313      	orrs	r3, r2
 8007b9e:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ba6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007baa:	d101      	bne.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 8007bac:	2301      	movs	r3, #1
 8007bae:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bb4:	2b00      	cmp	r3, #0
 8007bb6:	d101      	bne.n	8007bbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8007bb8:	2301      	movs	r3, #1
 8007bba:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f003 0308 	and.w	r3, r3, #8
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d017      	beq.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8007bc8:	4b49      	ldr	r3, [pc, #292]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007bce:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bd6:	4946      	ldr	r1, [pc, #280]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007bd8:	4313      	orrs	r3, r2
 8007bda:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007be2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007be6:	d101      	bne.n	8007bec <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8007be8:	2301      	movs	r3, #1
 8007bea:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d101      	bne.n	8007bf8 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8007bf4:	2301      	movs	r3, #1
 8007bf6:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	f000 808a 	beq.w	8007d1a <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8007c06:	2300      	movs	r3, #0
 8007c08:	60bb      	str	r3, [r7, #8]
 8007c0a:	4b39      	ldr	r3, [pc, #228]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c0e:	4a38      	ldr	r2, [pc, #224]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007c14:	6413      	str	r3, [r2, #64]	; 0x40
 8007c16:	4b36      	ldr	r3, [pc, #216]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007c1e:	60bb      	str	r3, [r7, #8]
 8007c20:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8007c22:	4b34      	ldr	r3, [pc, #208]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	4a33      	ldr	r2, [pc, #204]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007c28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007c2c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8007c2e:	f7fe ff81 	bl	8006b34 <HAL_GetTick>
 8007c32:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c34:	e008      	b.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8007c36:	f7fe ff7d 	bl	8006b34 <HAL_GetTick>
 8007c3a:	4602      	mov	r2, r0
 8007c3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3e:	1ad3      	subs	r3, r2, r3
 8007c40:	2b02      	cmp	r3, #2
 8007c42:	d901      	bls.n	8007c48 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8007c44:	2303      	movs	r3, #3
 8007c46:	e278      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8007c48:	4b2a      	ldr	r3, [pc, #168]	; (8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d0f0      	beq.n	8007c36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007c54:	4b26      	ldr	r3, [pc, #152]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c58:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c5c:	623b      	str	r3, [r7, #32]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007c5e:	6a3b      	ldr	r3, [r7, #32]
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d02f      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c6c:	6a3a      	ldr	r2, [r7, #32]
 8007c6e:	429a      	cmp	r2, r3
 8007c70:	d028      	beq.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007c72:	4b1f      	ldr	r3, [pc, #124]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c7a:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007c7c:	4b1e      	ldr	r3, [pc, #120]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007c7e:	2201      	movs	r2, #1
 8007c80:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007c82:	4b1d      	ldr	r3, [pc, #116]	; (8007cf8 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 8007c84:	2200      	movs	r2, #0
 8007c86:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007c88:	4a19      	ldr	r2, [pc, #100]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c8a:	6a3b      	ldr	r3, [r7, #32]
 8007c8c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007c8e:	4b18      	ldr	r3, [pc, #96]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007c92:	f003 0301 	and.w	r3, r3, #1
 8007c96:	2b01      	cmp	r3, #1
 8007c98:	d114      	bne.n	8007cc4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007c9a:	f7fe ff4b 	bl	8006b34 <HAL_GetTick>
 8007c9e:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007ca0:	e00a      	b.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007ca2:	f7fe ff47 	bl	8006b34 <HAL_GetTick>
 8007ca6:	4602      	mov	r2, r0
 8007ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007caa:	1ad3      	subs	r3, r2, r3
 8007cac:	f241 3288 	movw	r2, #5000	; 0x1388
 8007cb0:	4293      	cmp	r3, r2
 8007cb2:	d901      	bls.n	8007cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8007cb4:	2303      	movs	r3, #3
 8007cb6:	e240      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x642>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007cb8:	4b0d      	ldr	r3, [pc, #52]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007cba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007cbc:	f003 0302 	and.w	r3, r3, #2
 8007cc0:	2b00      	cmp	r3, #0
 8007cc2:	d0ee      	beq.n	8007ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cc8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007ccc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007cd0:	d114      	bne.n	8007cfc <HAL_RCCEx_PeriphCLKConfig+0x204>
 8007cd2:	4b07      	ldr	r3, [pc, #28]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007cd4:	689b      	ldr	r3, [r3, #8]
 8007cd6:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cde:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8007ce2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ce6:	4902      	ldr	r1, [pc, #8]	; (8007cf0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	608b      	str	r3, [r1, #8]
 8007cec:	e00c      	b.n	8007d08 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8007cee:	bf00      	nop
 8007cf0:	40023800 	.word	0x40023800
 8007cf4:	40007000 	.word	0x40007000
 8007cf8:	42470e40 	.word	0x42470e40
 8007cfc:	4b4a      	ldr	r3, [pc, #296]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007cfe:	689b      	ldr	r3, [r3, #8]
 8007d00:	4a49      	ldr	r2, [pc, #292]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d02:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8007d06:	6093      	str	r3, [r2, #8]
 8007d08:	4b47      	ldr	r3, [pc, #284]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d0a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8007d14:	4944      	ldr	r1, [pc, #272]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d16:	4313      	orrs	r3, r2
 8007d18:	670b      	str	r3, [r1, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	f003 0310 	and.w	r3, r3, #16
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d004      	beq.n	8007d30 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 2058 	ldrb.w	r2, [r3, #88]	; 0x58
 8007d2c:	4b3f      	ldr	r3, [pc, #252]	; (8007e2c <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8007d2e:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d38:	2b00      	cmp	r3, #0
 8007d3a:	d00a      	beq.n	8007d52 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8007d3c:	4b3a      	ldr	r3, [pc, #232]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d3e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d42:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d4a:	4937      	ldr	r1, [pc, #220]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d4c:	4313      	orrs	r3, r2
 8007d4e:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d00a      	beq.n	8007d74 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007d5e:	4b32      	ldr	r3, [pc, #200]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d64:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d6c:	492e      	ldr	r1, [pc, #184]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d6e:	4313      	orrs	r3, r2
 8007d70:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d7c:	2b00      	cmp	r3, #0
 8007d7e:	d011      	beq.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8007d80:	4b29      	ldr	r3, [pc, #164]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007d86:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d8e:	4926      	ldr	r1, [pc, #152]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007d90:	4313      	orrs	r3, r2
 8007d92:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007d9e:	d101      	bne.n	8007da4 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 8007da0:	2301      	movs	r3, #1
 8007da2:	62bb      	str	r3, [r7, #40]	; 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	d00a      	beq.n	8007dc6 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 8007db0:	4b1d      	ldr	r3, [pc, #116]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007db6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dbe:	491a      	ldr	r1, [pc, #104]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007dc0:	4313      	orrs	r3, r2
 8007dc2:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007dce:	2b00      	cmp	r3, #0
 8007dd0:	d011      	beq.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 8007dd2:	4b15      	ldr	r3, [pc, #84]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007dd4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007dd8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de0:	4911      	ldr	r1, [pc, #68]	; (8007e28 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8007de2:	4313      	orrs	r3, r2
 8007de4:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if(PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007dec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007df0:	d101      	bne.n	8007df6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 8007df2:	2301      	movs	r3, #1
 8007df4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8007df6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d005      	beq.n	8007e08 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007e04:	f040 80ff 	bne.w	8008006 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007e08:	4b09      	ldr	r3, [pc, #36]	; (8007e30 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8007e0a:	2200      	movs	r2, #0
 8007e0c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007e0e:	f7fe fe91 	bl	8006b34 <HAL_GetTick>
 8007e12:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e14:	e00e      	b.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007e16:	f7fe fe8d 	bl	8006b34 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	2b02      	cmp	r3, #2
 8007e22:	d907      	bls.n	8007e34 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007e24:	2303      	movs	r3, #3
 8007e26:	e188      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x642>
 8007e28:	40023800 	.word	0x40023800
 8007e2c:	424711e0 	.word	0x424711e0
 8007e30:	42470068 	.word	0x42470068
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007e34:	4b7e      	ldr	r3, [pc, #504]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	d1ea      	bne.n	8007e16 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	f003 0301 	and.w	r3, r3, #1
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d003      	beq.n	8007e54 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d009      	beq.n	8007e68 <HAL_RCCEx_PeriphCLKConfig+0x370>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f003 0302 	and.w	r3, r3, #2
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1) && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d028      	beq.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d124      	bne.n	8007eb2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007e68:	4b71      	ldr	r3, [pc, #452]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e6e:	0c1b      	lsrs	r3, r3, #16
 8007e70:	f003 0303 	and.w	r3, r3, #3
 8007e74:	3301      	adds	r3, #1
 8007e76:	005b      	lsls	r3, r3, #1
 8007e78:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8007e7a:	4b6d      	ldr	r3, [pc, #436]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007e7c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007e80:	0e1b      	lsrs	r3, r3, #24
 8007e82:	f003 030f 	and.w	r3, r3, #15
 8007e86:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, plli2sq, PeriphClkInit->PLLI2S.PLLI2SR);
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	685a      	ldr	r2, [r3, #4]
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	019b      	lsls	r3, r3, #6
 8007e92:	431a      	orrs	r2, r3
 8007e94:	69fb      	ldr	r3, [r7, #28]
 8007e96:	085b      	lsrs	r3, r3, #1
 8007e98:	3b01      	subs	r3, #1
 8007e9a:	041b      	lsls	r3, r3, #16
 8007e9c:	431a      	orrs	r2, r3
 8007e9e:	69bb      	ldr	r3, [r7, #24]
 8007ea0:	061b      	lsls	r3, r3, #24
 8007ea2:	431a      	orrs	r2, r3
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	695b      	ldr	r3, [r3, #20]
 8007ea8:	071b      	lsls	r3, r3, #28
 8007eaa:	4961      	ldr	r1, [pc, #388]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007eac:	4313      	orrs	r3, r2
 8007eae:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	681b      	ldr	r3, [r3, #0]
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d004      	beq.n	8007ec8 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ec2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007ec6:	d00a      	beq.n	8007ede <HAL_RCCEx_PeriphCLKConfig+0x3e6>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	681b      	ldr	r3, [r3, #0]
 8007ecc:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8007ed0:	2b00      	cmp	r3, #0
 8007ed2:	d035      	beq.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x448>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007ed8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007edc:	d130      	bne.n	8007f40 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007ede:	4b54      	ldr	r3, [pc, #336]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ee0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ee4:	0c1b      	lsrs	r3, r3, #16
 8007ee6:	f003 0303 	and.w	r3, r3, #3
 8007eea:	3301      	adds	r3, #1
 8007eec:	005b      	lsls	r3, r3, #1
 8007eee:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007ef0:	4b4f      	ldr	r3, [pc, #316]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ef2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007ef6:	0f1b      	lsrs	r3, r3, #28
 8007ef8:	f003 0307 	and.w	r3, r3, #7
 8007efc:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , plli2sp, PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	685a      	ldr	r2, [r3, #4]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	689b      	ldr	r3, [r3, #8]
 8007f06:	019b      	lsls	r3, r3, #6
 8007f08:	431a      	orrs	r2, r3
 8007f0a:	69fb      	ldr	r3, [r7, #28]
 8007f0c:	085b      	lsrs	r3, r3, #1
 8007f0e:	3b01      	subs	r3, #1
 8007f10:	041b      	lsls	r3, r3, #16
 8007f12:	431a      	orrs	r2, r3
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	691b      	ldr	r3, [r3, #16]
 8007f18:	061b      	lsls	r3, r3, #24
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	071b      	lsls	r3, r3, #28
 8007f20:	4943      	ldr	r1, [pc, #268]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f22:	4313      	orrs	r3, r2
 8007f24:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8007f28:	4b41      	ldr	r3, [pc, #260]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f2a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007f2e:	f023 021f 	bic.w	r2, r3, #31
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007f36:	3b01      	subs	r3, #1
 8007f38:	493d      	ldr	r1, [pc, #244]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f3a:	4313      	orrs	r3, r2
 8007f3c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX) && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d029      	beq.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007f50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8007f54:	d124      	bne.n	8007fa0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8007f56:	4b36      	ldr	r3, [pc, #216]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f5c:	0c1b      	lsrs	r3, r3, #16
 8007f5e:	f003 0303 	and.w	r3, r3, #3
 8007f62:	3301      	adds	r3, #1
 8007f64:	005b      	lsls	r3, r3, #1
 8007f66:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8007f68:	4b31      	ldr	r3, [pc, #196]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f6a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007f6e:	0f1b      	lsrs	r3, r3, #28
 8007f70:	f003 0307 	and.w	r3, r3, #7
 8007f74:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, plli2sq, plli2sr);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	685a      	ldr	r2, [r3, #4]
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	689b      	ldr	r3, [r3, #8]
 8007f7e:	019b      	lsls	r3, r3, #6
 8007f80:	431a      	orrs	r2, r3
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	68db      	ldr	r3, [r3, #12]
 8007f86:	085b      	lsrs	r3, r3, #1
 8007f88:	3b01      	subs	r3, #1
 8007f8a:	041b      	lsls	r3, r3, #16
 8007f8c:	431a      	orrs	r2, r3
 8007f8e:	69bb      	ldr	r3, [r7, #24]
 8007f90:	061b      	lsls	r3, r3, #24
 8007f92:	431a      	orrs	r2, r3
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	071b      	lsls	r3, r3, #28
 8007f98:	4925      	ldr	r1, [pc, #148]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

     /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fa8:	2b00      	cmp	r3, #0
 8007faa:	d016      	beq.n	8007fda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	685a      	ldr	r2, [r3, #4]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	689b      	ldr	r3, [r3, #8]
 8007fb4:	019b      	lsls	r3, r3, #6
 8007fb6:	431a      	orrs	r2, r3
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68db      	ldr	r3, [r3, #12]
 8007fbc:	085b      	lsrs	r3, r3, #1
 8007fbe:	3b01      	subs	r3, #1
 8007fc0:	041b      	lsls	r3, r3, #16
 8007fc2:	431a      	orrs	r2, r3
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	691b      	ldr	r3, [r3, #16]
 8007fc8:	061b      	lsls	r3, r3, #24
 8007fca:	431a      	orrs	r2, r3
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	695b      	ldr	r3, [r3, #20]
 8007fd0:	071b      	lsls	r3, r3, #28
 8007fd2:	4917      	ldr	r1, [pc, #92]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007fd4:	4313      	orrs	r3, r2
 8007fd6:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007fda:	4b16      	ldr	r3, [pc, #88]	; (8008034 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8007fdc:	2201      	movs	r2, #1
 8007fde:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007fe0:	f7fe fda8 	bl	8006b34 <HAL_GetTick>
 8007fe4:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007fe6:	e008      	b.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8007fe8:	f7fe fda4 	bl	8006b34 <HAL_GetTick>
 8007fec:	4602      	mov	r2, r0
 8007fee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff0:	1ad3      	subs	r3, r2, r3
 8007ff2:	2b02      	cmp	r3, #2
 8007ff4:	d901      	bls.n	8007ffa <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007ff6:	2303      	movs	r3, #3
 8007ff8:	e09f      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007ffa:	4b0d      	ldr	r3, [pc, #52]	; (8008030 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008002:	2b00      	cmp	r3, #0
 8008004:	d0f0      	beq.n	8007fe8 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if(pllsaiused == 1U)
 8008006:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008008:	2b01      	cmp	r3, #1
 800800a:	f040 8095 	bne.w	8008138 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800800e:	4b0a      	ldr	r3, [pc, #40]	; (8008038 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8008010:	2200      	movs	r2, #0
 8008012:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008014:	f7fe fd8e 	bl	8006b34 <HAL_GetTick>
 8008018:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800801a:	e00f      	b.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 800801c:	f7fe fd8a 	bl	8006b34 <HAL_GetTick>
 8008020:	4602      	mov	r2, r0
 8008022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008024:	1ad3      	subs	r3, r2, r3
 8008026:	2b02      	cmp	r3, #2
 8008028:	d908      	bls.n	800803c <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800802a:	2303      	movs	r3, #3
 800802c:	e085      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x642>
 800802e:	bf00      	nop
 8008030:	40023800 	.word	0x40023800
 8008034:	42470068 	.word	0x42470068
 8008038:	42470070 	.word	0x42470070
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800803c:	4b41      	ldr	r3, [pc, #260]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008044:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008048:	d0e8      	beq.n	800801c <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f003 0304 	and.w	r3, r3, #4
 8008052:	2b00      	cmp	r3, #0
 8008054:	d003      	beq.n	800805e <HAL_RCCEx_PeriphCLKConfig+0x566>
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805a:	2b00      	cmp	r3, #0
 800805c:	d009      	beq.n	8008072 <HAL_RCCEx_PeriphCLKConfig+0x57a>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	f003 0308 	and.w	r3, r3, #8
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8008066:	2b00      	cmp	r3, #0
 8008068:	d02b      	beq.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800806e:	2b00      	cmp	r3, #0
 8008070:	d127      	bne.n	80080c2 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 8008072:	4b34      	ldr	r3, [pc, #208]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008078:	0c1b      	lsrs	r3, r3, #16
 800807a:	f003 0303 	and.w	r3, r3, #3
 800807e:	3301      	adds	r3, #1
 8008080:	005b      	lsls	r3, r3, #1
 8008082:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , pllsaip, PeriphClkInit->PLLSAI.PLLSAIQ, 0U);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	699a      	ldr	r2, [r3, #24]
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	69db      	ldr	r3, [r3, #28]
 800808c:	019b      	lsls	r3, r3, #6
 800808e:	431a      	orrs	r2, r3
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	085b      	lsrs	r3, r3, #1
 8008094:	3b01      	subs	r3, #1
 8008096:	041b      	lsls	r3, r3, #16
 8008098:	431a      	orrs	r2, r3
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800809e:	061b      	lsls	r3, r3, #24
 80080a0:	4928      	ldr	r1, [pc, #160]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080a2:	4313      	orrs	r3, r2
 80080a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80080a8:	4b26      	ldr	r3, [pc, #152]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080ae:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	3b01      	subs	r3, #1
 80080b8:	021b      	lsls	r3, r3, #8
 80080ba:	4922      	ldr	r1, [pc, #136]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080bc:	4313      	orrs	r3, r2
 80080be:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d01d      	beq.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x612>
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80080d2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80080d6:	d118      	bne.n	800810a <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80080d8:	4b1a      	ldr	r3, [pc, #104]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80080da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080de:	0e1b      	lsrs	r3, r3, #24
 80080e0:	f003 030f 	and.w	r3, r3, #15
 80080e4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, pllsaiq, 0U);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	699a      	ldr	r2, [r3, #24]
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	69db      	ldr	r3, [r3, #28]
 80080ee:	019b      	lsls	r3, r3, #6
 80080f0:	431a      	orrs	r2, r3
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	6a1b      	ldr	r3, [r3, #32]
 80080f6:	085b      	lsrs	r3, r3, #1
 80080f8:	3b01      	subs	r3, #1
 80080fa:	041b      	lsls	r3, r3, #16
 80080fc:	431a      	orrs	r2, r3
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	061b      	lsls	r3, r3, #24
 8008102:	4910      	ldr	r1, [pc, #64]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8008104:	4313      	orrs	r3, r2
 8008106:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 800810a:	4b0f      	ldr	r3, [pc, #60]	; (8008148 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 800810c:	2201      	movs	r2, #1
 800810e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008110:	f7fe fd10 	bl	8006b34 <HAL_GetTick>
 8008114:	6278      	str	r0, [r7, #36]	; 0x24
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8008116:	e008      	b.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 8008118:	f7fe fd0c 	bl	8006b34 <HAL_GetTick>
 800811c:	4602      	mov	r2, r0
 800811e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008120:	1ad3      	subs	r3, r2, r3
 8008122:	2b02      	cmp	r3, #2
 8008124:	d901      	bls.n	800812a <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008126:	2303      	movs	r3, #3
 8008128:	e007      	b.n	800813a <HAL_RCCEx_PeriphCLKConfig+0x642>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800812a:	4b06      	ldr	r3, [pc, #24]	; (8008144 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8008132:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008136:	d1ef      	bne.n	8008118 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8008138:	2300      	movs	r3, #0
}
 800813a:	4618      	mov	r0, r3
 800813c:	3730      	adds	r7, #48	; 0x30
 800813e:	46bd      	mov	sp, r7
 8008140:	bd80      	pop	{r7, pc}
 8008142:	bf00      	nop
 8008144:	40023800 	.word	0x40023800
 8008148:	42470070 	.word	0x42470070

0800814c <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg RCC_PERIPHCLK_I2S_APB1: I2S APB1 peripheral clock
  *            @arg RCC_PERIPHCLK_I2S_APB2: I2S APB2 peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 800814c:	b480      	push	{r7}
 800814e:	b089      	sub	sp, #36	; 0x24
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1 = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	617b      	str	r3, [r7, #20]
  /* This variable used to store the SAI clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8008158:	2300      	movs	r3, #0
 800815a:	61fb      	str	r3, [r7, #28]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 800815c:	2300      	movs	r3, #0
 800815e:	61bb      	str	r3, [r7, #24]
  /* This variable used to store the SAI clock source */
  uint32_t saiclocksource = 0U;
 8008160:	2300      	movs	r3, #0
 8008162:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8008168:	2300      	movs	r3, #0
 800816a:	60bb      	str	r3, [r7, #8]
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	3b01      	subs	r3, #1
 8008170:	2b07      	cmp	r3, #7
 8008172:	f200 8224 	bhi.w	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8008176:	a201      	add	r2, pc, #4	; (adr r2, 800817c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8008178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800817c:	0800837f 	.word	0x0800837f
 8008180:	080084a9 	.word	0x080084a9
 8008184:	080085bf 	.word	0x080085bf
 8008188:	0800819d 	.word	0x0800819d
 800818c:	080085bf 	.word	0x080085bf
 8008190:	080085bf 	.word	0x080085bf
 8008194:	080085bf 	.word	0x080085bf
 8008198:	0800819d 	.word	0x0800819d
  switch (PeriphClk)
  {
  case RCC_PERIPHCLK_SAI1:
  case RCC_PERIPHCLK_SAI2:
    {
      saiclocksource = RCC->DCKCFGR;
 800819c:	4ba8      	ldr	r3, [pc, #672]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800819e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80081a2:	613b      	str	r3, [r7, #16]
      saiclocksource &= (RCC_DCKCFGR_SAI1SRC | RCC_DCKCFGR_SAI2SRC);
 80081a4:	693b      	ldr	r3, [r7, #16]
 80081a6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
 80081aa:	613b      	str	r3, [r7, #16]
 80081ac:	693b      	ldr	r3, [r7, #16]
 80081ae:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081b2:	f000 80d6 	beq.w	8008362 <HAL_RCCEx_GetPeriphCLKFreq+0x216>
 80081b6:	693b      	ldr	r3, [r7, #16]
 80081b8:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80081bc:	f200 80dd 	bhi.w	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80081c0:	693b      	ldr	r3, [r7, #16]
 80081c2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081c6:	f000 809f 	beq.w	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80081d0:	f200 80d3 	bhi.w	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80081d4:	693b      	ldr	r3, [r7, #16]
 80081d6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081da:	d05b      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80081e2:	f200 80ca 	bhi.w	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081ec:	f000 80b6 	beq.w	800835c <HAL_RCCEx_GetPeriphCLKFreq+0x210>
 80081f0:	693b      	ldr	r3, [r7, #16]
 80081f2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80081f6:	f200 80c0 	bhi.w	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 80081fa:	693b      	ldr	r3, [r7, #16]
 80081fc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8008200:	f000 8082 	beq.w	8008308 <HAL_RCCEx_GetPeriphCLKFreq+0x1bc>
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800820a:	f200 80b6 	bhi.w	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	2b00      	cmp	r3, #0
 8008212:	d004      	beq.n	800821e <HAL_RCCEx_GetPeriphCLKFreq+0xd2>
 8008214:	693b      	ldr	r3, [r7, #16]
 8008216:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800821a:	d03b      	beq.n	8008294 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
          }
          break;
        }
      default :
        {
          break;
 800821c:	e0ad      	b.n	800837a <HAL_RCCEx_GetPeriphCLKFreq+0x22e>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 800821e:	4b88      	ldr	r3, [pc, #544]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008226:	2b00      	cmp	r3, #0
 8008228:	d109      	bne.n	800823e <HAL_RCCEx_GetPeriphCLKFreq+0xf2>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM));
 800822a:	4b85      	ldr	r3, [pc, #532]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800822c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008230:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008234:	4a83      	ldr	r2, [pc, #524]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008236:	fbb2 f3f3 	udiv	r3, r2, r3
 800823a:	61bb      	str	r3, [r7, #24]
 800823c:	e008      	b.n	8008250 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIM)));
 800823e:	4b80      	ldr	r3, [pc, #512]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008240:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008244:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008248:	4a7f      	ldr	r2, [pc, #508]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 800824a:	fbb2 f3f3 	udiv	r3, r2, r3
 800824e:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> 24U;
 8008250:	4b7b      	ldr	r3, [pc, #492]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008252:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008256:	0e1b      	lsrs	r3, r3, #24
 8008258:	f003 030f 	and.w	r3, r3, #15
 800825c:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIN) >> 6U))/(tmpreg1);
 800825e:	4b78      	ldr	r3, [pc, #480]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008260:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008264:	099b      	lsrs	r3, r3, #6
 8008266:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800826a:	69ba      	ldr	r2, [r7, #24]
 800826c:	fb02 f203 	mul.w	r2, r2, r3
 8008270:	697b      	ldr	r3, [r7, #20]
 8008272:	fbb2 f3f3 	udiv	r3, r2, r3
 8008276:	61fb      	str	r3, [r7, #28]
          tmpreg1 = (((RCC->DCKCFGR & RCC_DCKCFGR_PLLSAIDIVQ) >> 8U) + 1U);
 8008278:	4b71      	ldr	r3, [pc, #452]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800827a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800827e:	0a1b      	lsrs	r3, r3, #8
 8008280:	f003 031f 	and.w	r3, r3, #31
 8008284:	3301      	adds	r3, #1
 8008286:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 8008288:	69fa      	ldr	r2, [r7, #28]
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008290:	61fb      	str	r3, [r7, #28]
          break;
 8008292:	e073      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008294:	4b6a      	ldr	r3, [pc, #424]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800829c:	2b00      	cmp	r3, #0
 800829e:	d109      	bne.n	80082b4 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80082a0:	4b67      	ldr	r3, [pc, #412]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082a6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082aa:	4a66      	ldr	r2, [pc, #408]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80082ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80082b0:	61bb      	str	r3, [r7, #24]
 80082b2:	e008      	b.n	80082c6 <HAL_RCCEx_GetPeriphCLKFreq+0x17a>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM)));
 80082b4:	4b62      	ldr	r3, [pc, #392]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082ba:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80082be:	4a62      	ldr	r2, [pc, #392]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80082c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80082c4:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> 24U;
 80082c6:	4b5e      	ldr	r3, [pc, #376]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082cc:	0e1b      	lsrs	r3, r3, #24
 80082ce:	f003 030f 	and.w	r3, r3, #15
 80082d2:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U))/(tmpreg1);
 80082d4:	4b5a      	ldr	r3, [pc, #360]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80082da:	099b      	lsrs	r3, r3, #6
 80082dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80082e0:	69ba      	ldr	r2, [r7, #24]
 80082e2:	fb02 f203 	mul.w	r2, r2, r3
 80082e6:	697b      	ldr	r3, [r7, #20]
 80082e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80082ec:	61fb      	str	r3, [r7, #28]
          tmpreg1 = ((RCC->DCKCFGR & RCC_DCKCFGR_PLLI2SDIVQ) + 1U);
 80082ee:	4b54      	ldr	r3, [pc, #336]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80082f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80082f4:	f003 031f 	and.w	r3, r3, #31
 80082f8:	3301      	adds	r3, #1
 80082fa:	617b      	str	r3, [r7, #20]
          frequency = frequency/(tmpreg1);
 80082fc:	69fa      	ldr	r2, [r7, #28]
 80082fe:	697b      	ldr	r3, [r7, #20]
 8008300:	fbb2 f3f3 	udiv	r3, r2, r3
 8008304:	61fb      	str	r3, [r7, #28]
          break;
 8008306:	e039      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008308:	4b4d      	ldr	r3, [pc, #308]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800830a:	685b      	ldr	r3, [r3, #4]
 800830c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008310:	2b00      	cmp	r3, #0
 8008312:	d108      	bne.n	8008326 <HAL_RCCEx_GetPeriphCLKFreq+0x1da>
            vcoinput = (HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008314:	4b4a      	ldr	r3, [pc, #296]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008316:	685b      	ldr	r3, [r3, #4]
 8008318:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800831c:	4a49      	ldr	r2, [pc, #292]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 800831e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008322:	61bb      	str	r3, [r7, #24]
 8008324:	e007      	b.n	8008336 <HAL_RCCEx_GetPeriphCLKFreq+0x1ea>
            vcoinput = ((HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM)));
 8008326:	4b46      	ldr	r3, [pc, #280]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800832e:	4a46      	ldr	r2, [pc, #280]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008330:	fbb2 f3f3 	udiv	r3, r2, r3
 8008334:	61bb      	str	r3, [r7, #24]
          tmpreg1 = (RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U;
 8008336:	4b42      	ldr	r3, [pc, #264]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	0f1b      	lsrs	r3, r3, #28
 800833c:	f003 0307 	and.w	r3, r3, #7
 8008340:	617b      	str	r3, [r7, #20]
          frequency = (vcoinput * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U))/(tmpreg1);
 8008342:	4b3f      	ldr	r3, [pc, #252]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	099b      	lsrs	r3, r3, #6
 8008348:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800834c:	69ba      	ldr	r2, [r7, #24]
 800834e:	fb02 f203 	mul.w	r2, r2, r3
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	fbb2 f3f3 	udiv	r3, r2, r3
 8008358:	61fb      	str	r3, [r7, #28]
          break;
 800835a:	e00f      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          frequency = EXTERNAL_CLOCK_VALUE;
 800835c:	4b3b      	ldr	r3, [pc, #236]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 800835e:	61fb      	str	r3, [r7, #28]
          break;
 8008360:	e00c      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSI)
 8008362:	4b37      	ldr	r3, [pc, #220]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800836a:	2b00      	cmp	r3, #0
 800836c:	d102      	bne.n	8008374 <HAL_RCCEx_GetPeriphCLKFreq+0x228>
            frequency = (uint32_t)(HSI_VALUE);
 800836e:	4b35      	ldr	r3, [pc, #212]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 8008370:	61fb      	str	r3, [r7, #28]
          break;
 8008372:	e003      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
            frequency = (uint32_t)(HSE_VALUE);
 8008374:	4b34      	ldr	r3, [pc, #208]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008376:	61fb      	str	r3, [r7, #28]
          break;
 8008378:	e000      	b.n	800837c <HAL_RCCEx_GetPeriphCLKFreq+0x230>
          break;
 800837a:	bf00      	nop
        }
      }
      break;
 800837c:	e11f      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB1:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB1_SOURCE();
 800837e:	4b30      	ldr	r3, [pc, #192]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008380:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008384:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 8008388:	60fb      	str	r3, [r7, #12]
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008390:	d079      	beq.n	8008486 <HAL_RCCEx_GetPeriphCLKFreq+0x33a>
 8008392:	68fb      	ldr	r3, [r7, #12]
 8008394:	f1b3 6fc0 	cmp.w	r3, #100663296	; 0x6000000
 8008398:	f200 8082 	bhi.w	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083a2:	d03c      	beq.n	800841e <HAL_RCCEx_GetPeriphCLKFreq+0x2d2>
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80083aa:	d879      	bhi.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	2b00      	cmp	r3, #0
 80083b0:	d006      	beq.n	80083c0 <HAL_RCCEx_GetPeriphCLKFreq+0x274>
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80083b8:	d172      	bne.n	80084a0 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80083ba:	4b24      	ldr	r3, [pc, #144]	; (800844c <HAL_RCCEx_GetPeriphCLKFreq+0x300>)
 80083bc:	61fb      	str	r3, [r7, #28]
          break;
 80083be:	e072      	b.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80083c0:	4b1f      	ldr	r3, [pc, #124]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80083c8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80083cc:	d109      	bne.n	80083e2 <HAL_RCCEx_GetPeriphCLKFreq+0x296>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80083ce:	4b1c      	ldr	r3, [pc, #112]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80083d0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083d8:	4a1b      	ldr	r2, [pc, #108]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 80083da:	fbb2 f3f3 	udiv	r3, r2, r3
 80083de:	61bb      	str	r3, [r7, #24]
 80083e0:	e008      	b.n	80083f4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80083e2:	4b17      	ldr	r3, [pc, #92]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80083e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80083ec:	4a15      	ldr	r2, [pc, #84]	; (8008444 <HAL_RCCEx_GetPeriphCLKFreq+0x2f8>)
 80083ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80083f2:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80083f4:	4b12      	ldr	r3, [pc, #72]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 80083f6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80083fa:	099b      	lsrs	r3, r3, #6
 80083fc:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008400:	69bb      	ldr	r3, [r7, #24]
 8008402:	fb02 f303 	mul.w	r3, r2, r3
 8008406:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008408:	4b0d      	ldr	r3, [pc, #52]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800840a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800840e:	0f1b      	lsrs	r3, r3, #28
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	68ba      	ldr	r2, [r7, #8]
 8008416:	fbb2 f3f3 	udiv	r3, r2, r3
 800841a:	61fb      	str	r3, [r7, #28]
          break;
 800841c:	e043      	b.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
      /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB1CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800841e:	4b08      	ldr	r3, [pc, #32]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 8008420:	685b      	ldr	r3, [r3, #4]
 8008422:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008426:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800842a:	d111      	bne.n	8008450 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 800842c:	4b04      	ldr	r3, [pc, #16]	; (8008440 <HAL_RCCEx_GetPeriphCLKFreq+0x2f4>)
 800842e:	685b      	ldr	r3, [r3, #4]
 8008430:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008434:	4a04      	ldr	r2, [pc, #16]	; (8008448 <HAL_RCCEx_GetPeriphCLKFreq+0x2fc>)
 8008436:	fbb2 f3f3 	udiv	r3, r2, r3
 800843a:	61bb      	str	r3, [r7, #24]
 800843c:	e010      	b.n	8008460 <HAL_RCCEx_GetPeriphCLKFreq+0x314>
 800843e:	bf00      	nop
 8008440:	40023800 	.word	0x40023800
 8008444:	00f42400 	.word	0x00f42400
 8008448:	007a1200 	.word	0x007a1200
 800844c:	00bb8000 	.word	0x00bb8000
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008450:	4b5e      	ldr	r3, [pc, #376]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008458:	4a5d      	ldr	r2, [pc, #372]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800845a:	fbb2 f3f3 	udiv	r3, r2, r3
 800845e:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008460:	4b5a      	ldr	r3, [pc, #360]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	099b      	lsrs	r3, r3, #6
 8008466:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800846a:	69bb      	ldr	r3, [r7, #24]
 800846c:	fb02 f303 	mul.w	r3, r2, r3
 8008470:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008472:	4b56      	ldr	r3, [pc, #344]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008474:	685b      	ldr	r3, [r3, #4]
 8008476:	0f1b      	lsrs	r3, r3, #28
 8008478:	f003 0307 	and.w	r3, r3, #7
 800847c:	68ba      	ldr	r2, [r7, #8]
 800847e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008482:	61fb      	str	r3, [r7, #28]
          break;
 8008484:	e00f      	b.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
      /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB1CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008486:	4b51      	ldr	r3, [pc, #324]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008488:	685b      	ldr	r3, [r3, #4]
 800848a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800848e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008492:	d102      	bne.n	800849a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
          {
            frequency = HSE_VALUE;
 8008494:	4b4f      	ldr	r3, [pc, #316]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8008496:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 8008498:	e005      	b.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
            frequency = HSI_VALUE;
 800849a:	4b4d      	ldr	r3, [pc, #308]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 800849c:	61fb      	str	r3, [r7, #28]
          break;
 800849e:	e002      	b.n	80084a6 <HAL_RCCEx_GetPeriphCLKFreq+0x35a>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80084a0:	2300      	movs	r3, #0
 80084a2:	61fb      	str	r3, [r7, #28]
          break;
 80084a4:	bf00      	nop
        }
      }
      break;
 80084a6:	e08a      	b.n	80085be <HAL_RCCEx_GetPeriphCLKFreq+0x472>
    }
  case RCC_PERIPHCLK_I2S_APB2:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_APB2_SOURCE();
 80084a8:	4b48      	ldr	r3, [pc, #288]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80084aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80084ae:	f003 53c0 	and.w	r3, r3, #402653184	; 0x18000000
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80084ba:	d06f      	beq.n	800859c <HAL_RCCEx_GetPeriphCLKFreq+0x450>
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	f1b3 5fc0 	cmp.w	r3, #402653184	; 0x18000000
 80084c2:	d878      	bhi.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084ca:	d03c      	beq.n	8008546 <HAL_RCCEx_GetPeriphCLKFreq+0x3fa>
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80084d2:	d870      	bhi.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	2b00      	cmp	r3, #0
 80084d8:	d006      	beq.n	80084e8 <HAL_RCCEx_GetPeriphCLKFreq+0x39c>
 80084da:	68fb      	ldr	r3, [r7, #12]
 80084dc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80084e0:	d169      	bne.n	80085b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
      {
        /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80084e2:	4b3d      	ldr	r3, [pc, #244]	; (80085d8 <HAL_RCCEx_GetPeriphCLKFreq+0x48c>)
 80084e4:	61fb      	str	r3, [r7, #28]
          break;
 80084e6:	e069      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLLI2S VCO output clock divided by PLLI2SR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLI2S:
        {
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80084e8:	4b38      	ldr	r3, [pc, #224]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80084ea:	685b      	ldr	r3, [r3, #4]
 80084ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80084f0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80084f4:	d109      	bne.n	800850a <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 80084f6:	4b35      	ldr	r3, [pc, #212]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 80084f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80084fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008500:	4a34      	ldr	r2, [pc, #208]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 8008502:	fbb2 f3f3 	udiv	r3, r2, r3
 8008506:	61bb      	str	r3, [r7, #24]
 8008508:	e008      	b.n	800851c <HAL_RCCEx_GetPeriphCLKFreq+0x3d0>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
 800850a:	4b30      	ldr	r3, [pc, #192]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800850c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008510:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008514:	4a2e      	ldr	r2, [pc, #184]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008516:	fbb2 f3f3 	udiv	r3, r2, r3
 800851a:	61bb      	str	r3, [r7, #24]
          }

          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 800851c:	4b2b      	ldr	r3, [pc, #172]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800851e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008522:	099b      	lsrs	r3, r3, #6
 8008524:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008528:	69bb      	ldr	r3, [r7, #24]
 800852a:	fb02 f303 	mul.w	r3, r2, r3
 800852e:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8008530:	4b26      	ldr	r3, [pc, #152]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008532:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8008536:	0f1b      	lsrs	r3, r3, #28
 8008538:	f003 0307 	and.w	r3, r3, #7
 800853c:	68ba      	ldr	r2, [r7, #8]
 800853e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008542:	61fb      	str	r3, [r7, #28]
          break;
 8008544:	e03a      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        /* Check if I2S clock selection is PLL VCO Output divided by PLLR used as I2S clock */
      case RCC_I2SAPB2CLKSOURCE_PLLR:
        {
          /* Configure the PLL division factor R */
          /* PLL_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8008546:	4b21      	ldr	r3, [pc, #132]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008548:	685b      	ldr	r3, [r3, #4]
 800854a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800854e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008552:	d108      	bne.n	8008566 <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008554:	4b1d      	ldr	r3, [pc, #116]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008556:	685b      	ldr	r3, [r3, #4]
 8008558:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800855c:	4a1d      	ldr	r2, [pc, #116]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 800855e:	fbb2 f3f3 	udiv	r3, r2, r3
 8008562:	61bb      	str	r3, [r7, #24]
 8008564:	e007      	b.n	8008576 <HAL_RCCEx_GetPeriphCLKFreq+0x42a>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8008566:	4b19      	ldr	r3, [pc, #100]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800856e:	4a18      	ldr	r2, [pc, #96]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 8008570:	fbb2 f3f3 	udiv	r3, r2, r3
 8008574:	61bb      	str	r3, [r7, #24]
          }

          /* PLL_VCO Output = PLL_VCO Input * PLLN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6U) & (RCC_PLLCFGR_PLLN >> 6U)));
 8008576:	4b15      	ldr	r3, [pc, #84]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	099b      	lsrs	r3, r3, #6
 800857c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8008580:	69bb      	ldr	r3, [r7, #24]
 8008582:	fb02 f303 	mul.w	r3, r2, r3
 8008586:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLL_VCO Output/PLLR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> 28U) & (RCC_PLLCFGR_PLLR >> 28U)));
 8008588:	4b10      	ldr	r3, [pc, #64]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800858a:	685b      	ldr	r3, [r3, #4]
 800858c:	0f1b      	lsrs	r3, r3, #28
 800858e:	f003 0307 	and.w	r3, r3, #7
 8008592:	68ba      	ldr	r2, [r7, #8]
 8008594:	fbb2 f3f3 	udiv	r3, r2, r3
 8008598:	61fb      	str	r3, [r7, #28]
          break;
 800859a:	e00f      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Check if I2S clock selection is HSI or HSE depending from PLL source Clock */
      case RCC_I2SAPB2CLKSOURCE_PLLSRC:
        {
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 800859c:	4b0b      	ldr	r3, [pc, #44]	; (80085cc <HAL_RCCEx_GetPeriphCLKFreq+0x480>)
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80085a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80085a8:	d102      	bne.n	80085b0 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
          {
            frequency = HSE_VALUE;
 80085aa:	4b0a      	ldr	r3, [pc, #40]	; (80085d4 <HAL_RCCEx_GetPeriphCLKFreq+0x488>)
 80085ac:	61fb      	str	r3, [r7, #28]
          }
          else
          {
            frequency = HSI_VALUE;
          }
          break;
 80085ae:	e005      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
            frequency = HSI_VALUE;
 80085b0:	4b07      	ldr	r3, [pc, #28]	; (80085d0 <HAL_RCCEx_GetPeriphCLKFreq+0x484>)
 80085b2:	61fb      	str	r3, [r7, #28]
          break;
 80085b4:	e002      	b.n	80085bc <HAL_RCCEx_GetPeriphCLKFreq+0x470>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 80085b6:	2300      	movs	r3, #0
 80085b8:	61fb      	str	r3, [r7, #28]
          break;
 80085ba:	bf00      	nop
        }
      }
      break;
 80085bc:	bf00      	nop
    }
  }
  return frequency;
 80085be:	69fb      	ldr	r3, [r7, #28]
}
 80085c0:	4618      	mov	r0, r3
 80085c2:	3724      	adds	r7, #36	; 0x24
 80085c4:	46bd      	mov	sp, r7
 80085c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ca:	4770      	bx	lr
 80085cc:	40023800 	.word	0x40023800
 80085d0:	00f42400 	.word	0x00f42400
 80085d4:	007a1200 	.word	0x007a1200
 80085d8:	00bb8000 	.word	0x00bb8000

080085dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80085dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085e0:	b088      	sub	sp, #32
 80085e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80085e4:	2300      	movs	r3, #0
 80085e6:	617b      	str	r3, [r7, #20]
  uint32_t pllvco = 0U;
 80085e8:	2300      	movs	r3, #0
 80085ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllp = 0U;
 80085ec:	2300      	movs	r3, #0
 80085ee:	613b      	str	r3, [r7, #16]
  uint32_t pllr = 0U;
 80085f0:	2300      	movs	r3, #0
 80085f2:	60fb      	str	r3, [r7, #12]
  uint32_t sysclockfreq = 0U;
 80085f4:	2300      	movs	r3, #0
 80085f6:	61bb      	str	r3, [r7, #24]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80085f8:	4bce      	ldr	r3, [pc, #824]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 80085fa:	689b      	ldr	r3, [r3, #8]
 80085fc:	f003 030c 	and.w	r3, r3, #12
 8008600:	2b0c      	cmp	r3, #12
 8008602:	f200 818d 	bhi.w	8008920 <HAL_RCC_GetSysClockFreq+0x344>
 8008606:	a201      	add	r2, pc, #4	; (adr r2, 800860c <HAL_RCC_GetSysClockFreq+0x30>)
 8008608:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860c:	08008641 	.word	0x08008641
 8008610:	08008921 	.word	0x08008921
 8008614:	08008921 	.word	0x08008921
 8008618:	08008921 	.word	0x08008921
 800861c:	08008647 	.word	0x08008647
 8008620:	08008921 	.word	0x08008921
 8008624:	08008921 	.word	0x08008921
 8008628:	08008921 	.word	0x08008921
 800862c:	0800864d 	.word	0x0800864d
 8008630:	08008921 	.word	0x08008921
 8008634:	08008921 	.word	0x08008921
 8008638:	08008921 	.word	0x08008921
 800863c:	080087c1 	.word	0x080087c1
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008640:	4bbd      	ldr	r3, [pc, #756]	; (8008938 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008642:	61bb      	str	r3, [r7, #24]
       break;
 8008644:	e16f      	b.n	8008926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008646:	4bbd      	ldr	r3, [pc, #756]	; (800893c <HAL_RCC_GetSysClockFreq+0x360>)
 8008648:	61bb      	str	r3, [r7, #24]
      break;
 800864a:	e16c      	b.n	8008926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800864c:	4bb9      	ldr	r3, [pc, #740]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 800864e:	685b      	ldr	r3, [r3, #4]
 8008650:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008654:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008656:	4bb7      	ldr	r3, [pc, #732]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800865e:	2b00      	cmp	r3, #0
 8008660:	d053      	beq.n	800870a <HAL_RCC_GetSysClockFreq+0x12e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008662:	4bb4      	ldr	r3, [pc, #720]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	099b      	lsrs	r3, r3, #6
 8008668:	461a      	mov	r2, r3
 800866a:	f04f 0300 	mov.w	r3, #0
 800866e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008672:	f04f 0100 	mov.w	r1, #0
 8008676:	ea02 0400 	and.w	r4, r2, r0
 800867a:	603c      	str	r4, [r7, #0]
 800867c:	400b      	ands	r3, r1
 800867e:	607b      	str	r3, [r7, #4]
 8008680:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008684:	4620      	mov	r0, r4
 8008686:	4629      	mov	r1, r5
 8008688:	f04f 0200 	mov.w	r2, #0
 800868c:	f04f 0300 	mov.w	r3, #0
 8008690:	014b      	lsls	r3, r1, #5
 8008692:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008696:	0142      	lsls	r2, r0, #5
 8008698:	4610      	mov	r0, r2
 800869a:	4619      	mov	r1, r3
 800869c:	4623      	mov	r3, r4
 800869e:	1ac0      	subs	r0, r0, r3
 80086a0:	462b      	mov	r3, r5
 80086a2:	eb61 0103 	sbc.w	r1, r1, r3
 80086a6:	f04f 0200 	mov.w	r2, #0
 80086aa:	f04f 0300 	mov.w	r3, #0
 80086ae:	018b      	lsls	r3, r1, #6
 80086b0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80086b4:	0182      	lsls	r2, r0, #6
 80086b6:	1a12      	subs	r2, r2, r0
 80086b8:	eb63 0301 	sbc.w	r3, r3, r1
 80086bc:	f04f 0000 	mov.w	r0, #0
 80086c0:	f04f 0100 	mov.w	r1, #0
 80086c4:	00d9      	lsls	r1, r3, #3
 80086c6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80086ca:	00d0      	lsls	r0, r2, #3
 80086cc:	4602      	mov	r2, r0
 80086ce:	460b      	mov	r3, r1
 80086d0:	4621      	mov	r1, r4
 80086d2:	1852      	adds	r2, r2, r1
 80086d4:	4629      	mov	r1, r5
 80086d6:	eb43 0101 	adc.w	r1, r3, r1
 80086da:	460b      	mov	r3, r1
 80086dc:	f04f 0000 	mov.w	r0, #0
 80086e0:	f04f 0100 	mov.w	r1, #0
 80086e4:	0259      	lsls	r1, r3, #9
 80086e6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80086ea:	0250      	lsls	r0, r2, #9
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4610      	mov	r0, r2
 80086f2:	4619      	mov	r1, r3
 80086f4:	697b      	ldr	r3, [r7, #20]
 80086f6:	461a      	mov	r2, r3
 80086f8:	f04f 0300 	mov.w	r3, #0
 80086fc:	f7f8 fae4 	bl	8000cc8 <__aeabi_uldivmod>
 8008700:	4602      	mov	r2, r0
 8008702:	460b      	mov	r3, r1
 8008704:	4613      	mov	r3, r2
 8008706:	61fb      	str	r3, [r7, #28]
 8008708:	e04c      	b.n	80087a4 <HAL_RCC_GetSysClockFreq+0x1c8>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800870a:	4b8a      	ldr	r3, [pc, #552]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 800870c:	685b      	ldr	r3, [r3, #4]
 800870e:	099b      	lsrs	r3, r3, #6
 8008710:	461a      	mov	r2, r3
 8008712:	f04f 0300 	mov.w	r3, #0
 8008716:	f240 10ff 	movw	r0, #511	; 0x1ff
 800871a:	f04f 0100 	mov.w	r1, #0
 800871e:	ea02 0a00 	and.w	sl, r2, r0
 8008722:	ea03 0b01 	and.w	fp, r3, r1
 8008726:	4650      	mov	r0, sl
 8008728:	4659      	mov	r1, fp
 800872a:	f04f 0200 	mov.w	r2, #0
 800872e:	f04f 0300 	mov.w	r3, #0
 8008732:	014b      	lsls	r3, r1, #5
 8008734:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008738:	0142      	lsls	r2, r0, #5
 800873a:	4610      	mov	r0, r2
 800873c:	4619      	mov	r1, r3
 800873e:	ebb0 000a 	subs.w	r0, r0, sl
 8008742:	eb61 010b 	sbc.w	r1, r1, fp
 8008746:	f04f 0200 	mov.w	r2, #0
 800874a:	f04f 0300 	mov.w	r3, #0
 800874e:	018b      	lsls	r3, r1, #6
 8008750:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008754:	0182      	lsls	r2, r0, #6
 8008756:	1a12      	subs	r2, r2, r0
 8008758:	eb63 0301 	sbc.w	r3, r3, r1
 800875c:	f04f 0000 	mov.w	r0, #0
 8008760:	f04f 0100 	mov.w	r1, #0
 8008764:	00d9      	lsls	r1, r3, #3
 8008766:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800876a:	00d0      	lsls	r0, r2, #3
 800876c:	4602      	mov	r2, r0
 800876e:	460b      	mov	r3, r1
 8008770:	eb12 020a 	adds.w	r2, r2, sl
 8008774:	eb43 030b 	adc.w	r3, r3, fp
 8008778:	f04f 0000 	mov.w	r0, #0
 800877c:	f04f 0100 	mov.w	r1, #0
 8008780:	0299      	lsls	r1, r3, #10
 8008782:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8008786:	0290      	lsls	r0, r2, #10
 8008788:	4602      	mov	r2, r0
 800878a:	460b      	mov	r3, r1
 800878c:	4610      	mov	r0, r2
 800878e:	4619      	mov	r1, r3
 8008790:	697b      	ldr	r3, [r7, #20]
 8008792:	461a      	mov	r2, r3
 8008794:	f04f 0300 	mov.w	r3, #0
 8008798:	f7f8 fa96 	bl	8000cc8 <__aeabi_uldivmod>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4613      	mov	r3, r2
 80087a2:	61fb      	str	r3, [r7, #28]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80087a4:	4b63      	ldr	r3, [pc, #396]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 80087a6:	685b      	ldr	r3, [r3, #4]
 80087a8:	0c1b      	lsrs	r3, r3, #16
 80087aa:	f003 0303 	and.w	r3, r3, #3
 80087ae:	3301      	adds	r3, #1
 80087b0:	005b      	lsls	r3, r3, #1
 80087b2:	613b      	str	r3, [r7, #16]

      sysclockfreq = pllvco/pllp;
 80087b4:	69fa      	ldr	r2, [r7, #28]
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80087bc:	61bb      	str	r3, [r7, #24]
      break;
 80087be:	e0b2      	b.n	8008926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80087c0:	4b5c      	ldr	r3, [pc, #368]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 80087c2:	685b      	ldr	r3, [r3, #4]
 80087c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80087c8:	617b      	str	r3, [r7, #20]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80087ca:	4b5a      	ldr	r3, [pc, #360]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 80087cc:	685b      	ldr	r3, [r3, #4]
 80087ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d04d      	beq.n	8008872 <HAL_RCC_GetSysClockFreq+0x296>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80087d6:	4b57      	ldr	r3, [pc, #348]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	099b      	lsrs	r3, r3, #6
 80087dc:	461a      	mov	r2, r3
 80087de:	f04f 0300 	mov.w	r3, #0
 80087e2:	f240 10ff 	movw	r0, #511	; 0x1ff
 80087e6:	f04f 0100 	mov.w	r1, #0
 80087ea:	ea02 0800 	and.w	r8, r2, r0
 80087ee:	ea03 0901 	and.w	r9, r3, r1
 80087f2:	4640      	mov	r0, r8
 80087f4:	4649      	mov	r1, r9
 80087f6:	f04f 0200 	mov.w	r2, #0
 80087fa:	f04f 0300 	mov.w	r3, #0
 80087fe:	014b      	lsls	r3, r1, #5
 8008800:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8008804:	0142      	lsls	r2, r0, #5
 8008806:	4610      	mov	r0, r2
 8008808:	4619      	mov	r1, r3
 800880a:	ebb0 0008 	subs.w	r0, r0, r8
 800880e:	eb61 0109 	sbc.w	r1, r1, r9
 8008812:	f04f 0200 	mov.w	r2, #0
 8008816:	f04f 0300 	mov.w	r3, #0
 800881a:	018b      	lsls	r3, r1, #6
 800881c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8008820:	0182      	lsls	r2, r0, #6
 8008822:	1a12      	subs	r2, r2, r0
 8008824:	eb63 0301 	sbc.w	r3, r3, r1
 8008828:	f04f 0000 	mov.w	r0, #0
 800882c:	f04f 0100 	mov.w	r1, #0
 8008830:	00d9      	lsls	r1, r3, #3
 8008832:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008836:	00d0      	lsls	r0, r2, #3
 8008838:	4602      	mov	r2, r0
 800883a:	460b      	mov	r3, r1
 800883c:	eb12 0208 	adds.w	r2, r2, r8
 8008840:	eb43 0309 	adc.w	r3, r3, r9
 8008844:	f04f 0000 	mov.w	r0, #0
 8008848:	f04f 0100 	mov.w	r1, #0
 800884c:	0259      	lsls	r1, r3, #9
 800884e:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8008852:	0250      	lsls	r0, r2, #9
 8008854:	4602      	mov	r2, r0
 8008856:	460b      	mov	r3, r1
 8008858:	4610      	mov	r0, r2
 800885a:	4619      	mov	r1, r3
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	461a      	mov	r2, r3
 8008860:	f04f 0300 	mov.w	r3, #0
 8008864:	f7f8 fa30 	bl	8000cc8 <__aeabi_uldivmod>
 8008868:	4602      	mov	r2, r0
 800886a:	460b      	mov	r3, r1
 800886c:	4613      	mov	r3, r2
 800886e:	61fb      	str	r3, [r7, #28]
 8008870:	e04a      	b.n	8008908 <HAL_RCC_GetSysClockFreq+0x32c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008872:	4b30      	ldr	r3, [pc, #192]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	099b      	lsrs	r3, r3, #6
 8008878:	461a      	mov	r2, r3
 800887a:	f04f 0300 	mov.w	r3, #0
 800887e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8008882:	f04f 0100 	mov.w	r1, #0
 8008886:	ea02 0400 	and.w	r4, r2, r0
 800888a:	ea03 0501 	and.w	r5, r3, r1
 800888e:	4620      	mov	r0, r4
 8008890:	4629      	mov	r1, r5
 8008892:	f04f 0200 	mov.w	r2, #0
 8008896:	f04f 0300 	mov.w	r3, #0
 800889a:	014b      	lsls	r3, r1, #5
 800889c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80088a0:	0142      	lsls	r2, r0, #5
 80088a2:	4610      	mov	r0, r2
 80088a4:	4619      	mov	r1, r3
 80088a6:	1b00      	subs	r0, r0, r4
 80088a8:	eb61 0105 	sbc.w	r1, r1, r5
 80088ac:	f04f 0200 	mov.w	r2, #0
 80088b0:	f04f 0300 	mov.w	r3, #0
 80088b4:	018b      	lsls	r3, r1, #6
 80088b6:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80088ba:	0182      	lsls	r2, r0, #6
 80088bc:	1a12      	subs	r2, r2, r0
 80088be:	eb63 0301 	sbc.w	r3, r3, r1
 80088c2:	f04f 0000 	mov.w	r0, #0
 80088c6:	f04f 0100 	mov.w	r1, #0
 80088ca:	00d9      	lsls	r1, r3, #3
 80088cc:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088d0:	00d0      	lsls	r0, r2, #3
 80088d2:	4602      	mov	r2, r0
 80088d4:	460b      	mov	r3, r1
 80088d6:	1912      	adds	r2, r2, r4
 80088d8:	eb45 0303 	adc.w	r3, r5, r3
 80088dc:	f04f 0000 	mov.w	r0, #0
 80088e0:	f04f 0100 	mov.w	r1, #0
 80088e4:	0299      	lsls	r1, r3, #10
 80088e6:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80088ea:	0290      	lsls	r0, r2, #10
 80088ec:	4602      	mov	r2, r0
 80088ee:	460b      	mov	r3, r1
 80088f0:	4610      	mov	r0, r2
 80088f2:	4619      	mov	r1, r3
 80088f4:	697b      	ldr	r3, [r7, #20]
 80088f6:	461a      	mov	r2, r3
 80088f8:	f04f 0300 	mov.w	r3, #0
 80088fc:	f7f8 f9e4 	bl	8000cc8 <__aeabi_uldivmod>
 8008900:	4602      	mov	r2, r0
 8008902:	460b      	mov	r3, r1
 8008904:	4613      	mov	r3, r2
 8008906:	61fb      	str	r3, [r7, #28]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008908:	4b0a      	ldr	r3, [pc, #40]	; (8008934 <HAL_RCC_GetSysClockFreq+0x358>)
 800890a:	685b      	ldr	r3, [r3, #4]
 800890c:	0f1b      	lsrs	r3, r3, #28
 800890e:	f003 0307 	and.w	r3, r3, #7
 8008912:	60fb      	str	r3, [r7, #12]

      sysclockfreq = pllvco/pllr;
 8008914:	69fa      	ldr	r2, [r7, #28]
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	fbb2 f3f3 	udiv	r3, r2, r3
 800891c:	61bb      	str	r3, [r7, #24]
      break;
 800891e:	e002      	b.n	8008926 <HAL_RCC_GetSysClockFreq+0x34a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008920:	4b05      	ldr	r3, [pc, #20]	; (8008938 <HAL_RCC_GetSysClockFreq+0x35c>)
 8008922:	61bb      	str	r3, [r7, #24]
      break;
 8008924:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008926:	69bb      	ldr	r3, [r7, #24]
}
 8008928:	4618      	mov	r0, r3
 800892a:	3720      	adds	r7, #32
 800892c:	46bd      	mov	sp, r7
 800892e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008932:	bf00      	nop
 8008934:	40023800 	.word	0x40023800
 8008938:	00f42400 	.word	0x00f42400
 800893c:	007a1200 	.word	0x007a1200

08008940 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008940:	b580      	push	{r7, lr}
 8008942:	b086      	sub	sp, #24
 8008944:	af00      	add	r7, sp, #0
 8008946:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008948:	687b      	ldr	r3, [r7, #4]
 800894a:	2b00      	cmp	r3, #0
 800894c:	d101      	bne.n	8008952 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800894e:	2301      	movs	r3, #1
 8008950:	e28d      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	f003 0301 	and.w	r3, r3, #1
 800895a:	2b00      	cmp	r3, #0
 800895c:	f000 8083 	beq.w	8008a66 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008960:	4b94      	ldr	r3, [pc, #592]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008962:	689b      	ldr	r3, [r3, #8]
 8008964:	f003 030c 	and.w	r3, r3, #12
 8008968:	2b04      	cmp	r3, #4
 800896a:	d019      	beq.n	80089a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800896c:	4b91      	ldr	r3, [pc, #580]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 800896e:	689b      	ldr	r3, [r3, #8]
 8008970:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008974:	2b08      	cmp	r3, #8
 8008976:	d106      	bne.n	8008986 <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008978:	4b8e      	ldr	r3, [pc, #568]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 800897a:	685b      	ldr	r3, [r3, #4]
 800897c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008980:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008984:	d00c      	beq.n	80089a0 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008986:	4b8b      	ldr	r3, [pc, #556]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008988:	689b      	ldr	r3, [r3, #8]
 800898a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 800898e:	2b0c      	cmp	r3, #12
 8008990:	d112      	bne.n	80089b8 <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008992:	4b88      	ldr	r3, [pc, #544]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008994:	685b      	ldr	r3, [r3, #4]
 8008996:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800899a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800899e:	d10b      	bne.n	80089b8 <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80089a0:	4b84      	ldr	r3, [pc, #528]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d05b      	beq.n	8008a64 <HAL_RCC_OscConfig+0x124>
 80089ac:	687b      	ldr	r3, [r7, #4]
 80089ae:	685b      	ldr	r3, [r3, #4]
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	d157      	bne.n	8008a64 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80089b4:	2301      	movs	r3, #1
 80089b6:	e25a      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80089b8:	687b      	ldr	r3, [r7, #4]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80089c0:	d106      	bne.n	80089d0 <HAL_RCC_OscConfig+0x90>
 80089c2:	4b7c      	ldr	r3, [pc, #496]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	4a7b      	ldr	r2, [pc, #492]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089cc:	6013      	str	r3, [r2, #0]
 80089ce:	e01d      	b.n	8008a0c <HAL_RCC_OscConfig+0xcc>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	685b      	ldr	r3, [r3, #4]
 80089d4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80089d8:	d10c      	bne.n	80089f4 <HAL_RCC_OscConfig+0xb4>
 80089da:	4b76      	ldr	r3, [pc, #472]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a75      	ldr	r2, [pc, #468]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089e0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80089e4:	6013      	str	r3, [r2, #0]
 80089e6:	4b73      	ldr	r3, [pc, #460]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	4a72      	ldr	r2, [pc, #456]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	e00b      	b.n	8008a0c <HAL_RCC_OscConfig+0xcc>
 80089f4:	4b6f      	ldr	r3, [pc, #444]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	4a6e      	ldr	r2, [pc, #440]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 80089fa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80089fe:	6013      	str	r3, [r2, #0]
 8008a00:	4b6c      	ldr	r3, [pc, #432]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	4a6b      	ldr	r2, [pc, #428]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008a06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	685b      	ldr	r3, [r3, #4]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d013      	beq.n	8008a3c <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a14:	f7fe f88e 	bl	8006b34 <HAL_GetTick>
 8008a18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a1a:	e008      	b.n	8008a2e <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a1c:	f7fe f88a 	bl	8006b34 <HAL_GetTick>
 8008a20:	4602      	mov	r2, r0
 8008a22:	693b      	ldr	r3, [r7, #16]
 8008a24:	1ad3      	subs	r3, r2, r3
 8008a26:	2b64      	cmp	r3, #100	; 0x64
 8008a28:	d901      	bls.n	8008a2e <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8008a2a:	2303      	movs	r3, #3
 8008a2c:	e21f      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008a2e:	4b61      	ldr	r3, [pc, #388]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d0f0      	beq.n	8008a1c <HAL_RCC_OscConfig+0xdc>
 8008a3a:	e014      	b.n	8008a66 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008a3c:	f7fe f87a 	bl	8006b34 <HAL_GetTick>
 8008a40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a42:	e008      	b.n	8008a56 <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008a44:	f7fe f876 	bl	8006b34 <HAL_GetTick>
 8008a48:	4602      	mov	r2, r0
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	1ad3      	subs	r3, r2, r3
 8008a4e:	2b64      	cmp	r3, #100	; 0x64
 8008a50:	d901      	bls.n	8008a56 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8008a52:	2303      	movs	r3, #3
 8008a54:	e20b      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008a56:	4b57      	ldr	r3, [pc, #348]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d1f0      	bne.n	8008a44 <HAL_RCC_OscConfig+0x104>
 8008a62:	e000      	b.n	8008a66 <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	f003 0302 	and.w	r3, r3, #2
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d06f      	beq.n	8008b52 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a72:	4b50      	ldr	r3, [pc, #320]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008a74:	689b      	ldr	r3, [r3, #8]
 8008a76:	f003 030c 	and.w	r3, r3, #12
 8008a7a:	2b00      	cmp	r3, #0
 8008a7c:	d017      	beq.n	8008aae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008a7e:	4b4d      	ldr	r3, [pc, #308]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008a80:	689b      	ldr	r3, [r3, #8]
 8008a82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8008a86:	2b08      	cmp	r3, #8
 8008a88:	d105      	bne.n	8008a96 <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008a8a:	4b4a      	ldr	r3, [pc, #296]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008a8c:	685b      	ldr	r3, [r3, #4]
 8008a8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00b      	beq.n	8008aae <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008a96:	4b47      	ldr	r3, [pc, #284]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8008a9e:	2b0c      	cmp	r3, #12
 8008aa0:	d11c      	bne.n	8008adc <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008aa2:	4b44      	ldr	r3, [pc, #272]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008aa4:	685b      	ldr	r3, [r3, #4]
 8008aa6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d116      	bne.n	8008adc <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008aae:	4b41      	ldr	r3, [pc, #260]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	f003 0302 	and.w	r3, r3, #2
 8008ab6:	2b00      	cmp	r3, #0
 8008ab8:	d005      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x186>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	68db      	ldr	r3, [r3, #12]
 8008abe:	2b01      	cmp	r3, #1
 8008ac0:	d001      	beq.n	8008ac6 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8008ac2:	2301      	movs	r3, #1
 8008ac4:	e1d3      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ac6:	4b3b      	ldr	r3, [pc, #236]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	691b      	ldr	r3, [r3, #16]
 8008ad2:	00db      	lsls	r3, r3, #3
 8008ad4:	4937      	ldr	r1, [pc, #220]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008ad6:	4313      	orrs	r3, r2
 8008ad8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008ada:	e03a      	b.n	8008b52 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	68db      	ldr	r3, [r3, #12]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d020      	beq.n	8008b26 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ae4:	4b34      	ldr	r3, [pc, #208]	; (8008bb8 <HAL_RCC_OscConfig+0x278>)
 8008ae6:	2201      	movs	r2, #1
 8008ae8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aea:	f7fe f823 	bl	8006b34 <HAL_GetTick>
 8008aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008af0:	e008      	b.n	8008b04 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008af2:	f7fe f81f 	bl	8006b34 <HAL_GetTick>
 8008af6:	4602      	mov	r2, r0
 8008af8:	693b      	ldr	r3, [r7, #16]
 8008afa:	1ad3      	subs	r3, r2, r3
 8008afc:	2b02      	cmp	r3, #2
 8008afe:	d901      	bls.n	8008b04 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8008b00:	2303      	movs	r3, #3
 8008b02:	e1b4      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b04:	4b2b      	ldr	r3, [pc, #172]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008b06:	681b      	ldr	r3, [r3, #0]
 8008b08:	f003 0302 	and.w	r3, r3, #2
 8008b0c:	2b00      	cmp	r3, #0
 8008b0e:	d0f0      	beq.n	8008af2 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b10:	4b28      	ldr	r3, [pc, #160]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	691b      	ldr	r3, [r3, #16]
 8008b1c:	00db      	lsls	r3, r3, #3
 8008b1e:	4925      	ldr	r1, [pc, #148]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008b20:	4313      	orrs	r3, r2
 8008b22:	600b      	str	r3, [r1, #0]
 8008b24:	e015      	b.n	8008b52 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b26:	4b24      	ldr	r3, [pc, #144]	; (8008bb8 <HAL_RCC_OscConfig+0x278>)
 8008b28:	2200      	movs	r2, #0
 8008b2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b2c:	f7fe f802 	bl	8006b34 <HAL_GetTick>
 8008b30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b32:	e008      	b.n	8008b46 <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008b34:	f7fd fffe 	bl	8006b34 <HAL_GetTick>
 8008b38:	4602      	mov	r2, r0
 8008b3a:	693b      	ldr	r3, [r7, #16]
 8008b3c:	1ad3      	subs	r3, r2, r3
 8008b3e:	2b02      	cmp	r3, #2
 8008b40:	d901      	bls.n	8008b46 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008b42:	2303      	movs	r3, #3
 8008b44:	e193      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008b46:	4b1b      	ldr	r3, [pc, #108]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	f003 0302 	and.w	r3, r3, #2
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d1f0      	bne.n	8008b34 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	f003 0308 	and.w	r3, r3, #8
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d036      	beq.n	8008bcc <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	695b      	ldr	r3, [r3, #20]
 8008b62:	2b00      	cmp	r3, #0
 8008b64:	d016      	beq.n	8008b94 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008b66:	4b15      	ldr	r3, [pc, #84]	; (8008bbc <HAL_RCC_OscConfig+0x27c>)
 8008b68:	2201      	movs	r2, #1
 8008b6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b6c:	f7fd ffe2 	bl	8006b34 <HAL_GetTick>
 8008b70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008b74:	f7fd ffde 	bl	8006b34 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e173      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008b86:	4b0b      	ldr	r3, [pc, #44]	; (8008bb4 <HAL_RCC_OscConfig+0x274>)
 8008b88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008b8a:	f003 0302 	and.w	r3, r3, #2
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d0f0      	beq.n	8008b74 <HAL_RCC_OscConfig+0x234>
 8008b92:	e01b      	b.n	8008bcc <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008b94:	4b09      	ldr	r3, [pc, #36]	; (8008bbc <HAL_RCC_OscConfig+0x27c>)
 8008b96:	2200      	movs	r2, #0
 8008b98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b9a:	f7fd ffcb 	bl	8006b34 <HAL_GetTick>
 8008b9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008ba0:	e00e      	b.n	8008bc0 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008ba2:	f7fd ffc7 	bl	8006b34 <HAL_GetTick>
 8008ba6:	4602      	mov	r2, r0
 8008ba8:	693b      	ldr	r3, [r7, #16]
 8008baa:	1ad3      	subs	r3, r2, r3
 8008bac:	2b02      	cmp	r3, #2
 8008bae:	d907      	bls.n	8008bc0 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8008bb0:	2303      	movs	r3, #3
 8008bb2:	e15c      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
 8008bb4:	40023800 	.word	0x40023800
 8008bb8:	42470000 	.word	0x42470000
 8008bbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008bc0:	4b8a      	ldr	r3, [pc, #552]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008bc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008bc4:	f003 0302 	and.w	r3, r3, #2
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1ea      	bne.n	8008ba2 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0304 	and.w	r3, r3, #4
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	f000 8097 	beq.w	8008d08 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008bde:	4b83      	ldr	r3, [pc, #524]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008be6:	2b00      	cmp	r3, #0
 8008be8:	d10f      	bne.n	8008c0a <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008bea:	2300      	movs	r3, #0
 8008bec:	60bb      	str	r3, [r7, #8]
 8008bee:	4b7f      	ldr	r3, [pc, #508]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008bf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bf2:	4a7e      	ldr	r2, [pc, #504]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008bf4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008bf8:	6413      	str	r3, [r2, #64]	; 0x40
 8008bfa:	4b7c      	ldr	r3, [pc, #496]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008bfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008bfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c02:	60bb      	str	r3, [r7, #8]
 8008c04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c06:	2301      	movs	r3, #1
 8008c08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c0a:	4b79      	ldr	r3, [pc, #484]	; (8008df0 <HAL_RCC_OscConfig+0x4b0>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d118      	bne.n	8008c48 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8008c16:	4b76      	ldr	r3, [pc, #472]	; (8008df0 <HAL_RCC_OscConfig+0x4b0>)
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	4a75      	ldr	r2, [pc, #468]	; (8008df0 <HAL_RCC_OscConfig+0x4b0>)
 8008c1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008c22:	f7fd ff87 	bl	8006b34 <HAL_GetTick>
 8008c26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c28:	e008      	b.n	8008c3c <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008c2a:	f7fd ff83 	bl	8006b34 <HAL_GetTick>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	693b      	ldr	r3, [r7, #16]
 8008c32:	1ad3      	subs	r3, r2, r3
 8008c34:	2b02      	cmp	r3, #2
 8008c36:	d901      	bls.n	8008c3c <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8008c38:	2303      	movs	r3, #3
 8008c3a:	e118      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008c3c:	4b6c      	ldr	r3, [pc, #432]	; (8008df0 <HAL_RCC_OscConfig+0x4b0>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d0f0      	beq.n	8008c2a <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	689b      	ldr	r3, [r3, #8]
 8008c4c:	2b01      	cmp	r3, #1
 8008c4e:	d106      	bne.n	8008c5e <HAL_RCC_OscConfig+0x31e>
 8008c50:	4b66      	ldr	r3, [pc, #408]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c54:	4a65      	ldr	r2, [pc, #404]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c56:	f043 0301 	orr.w	r3, r3, #1
 8008c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c5c:	e01c      	b.n	8008c98 <HAL_RCC_OscConfig+0x358>
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	689b      	ldr	r3, [r3, #8]
 8008c62:	2b05      	cmp	r3, #5
 8008c64:	d10c      	bne.n	8008c80 <HAL_RCC_OscConfig+0x340>
 8008c66:	4b61      	ldr	r3, [pc, #388]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c6a:	4a60      	ldr	r2, [pc, #384]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c6c:	f043 0304 	orr.w	r3, r3, #4
 8008c70:	6713      	str	r3, [r2, #112]	; 0x70
 8008c72:	4b5e      	ldr	r3, [pc, #376]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c76:	4a5d      	ldr	r2, [pc, #372]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c78:	f043 0301 	orr.w	r3, r3, #1
 8008c7c:	6713      	str	r3, [r2, #112]	; 0x70
 8008c7e:	e00b      	b.n	8008c98 <HAL_RCC_OscConfig+0x358>
 8008c80:	4b5a      	ldr	r3, [pc, #360]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c84:	4a59      	ldr	r2, [pc, #356]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c86:	f023 0301 	bic.w	r3, r3, #1
 8008c8a:	6713      	str	r3, [r2, #112]	; 0x70
 8008c8c:	4b57      	ldr	r3, [pc, #348]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008c90:	4a56      	ldr	r2, [pc, #344]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008c92:	f023 0304 	bic.w	r3, r3, #4
 8008c96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	689b      	ldr	r3, [r3, #8]
 8008c9c:	2b00      	cmp	r3, #0
 8008c9e:	d015      	beq.n	8008ccc <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ca0:	f7fd ff48 	bl	8006b34 <HAL_GetTick>
 8008ca4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008ca6:	e00a      	b.n	8008cbe <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008ca8:	f7fd ff44 	bl	8006b34 <HAL_GetTick>
 8008cac:	4602      	mov	r2, r0
 8008cae:	693b      	ldr	r3, [r7, #16]
 8008cb0:	1ad3      	subs	r3, r2, r3
 8008cb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8008cb6:	4293      	cmp	r3, r2
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e0d7      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008cbe:	4b4b      	ldr	r3, [pc, #300]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cc2:	f003 0302 	and.w	r3, r3, #2
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0ee      	beq.n	8008ca8 <HAL_RCC_OscConfig+0x368>
 8008cca:	e014      	b.n	8008cf6 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008ccc:	f7fd ff32 	bl	8006b34 <HAL_GetTick>
 8008cd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cd2:	e00a      	b.n	8008cea <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008cd4:	f7fd ff2e 	bl	8006b34 <HAL_GetTick>
 8008cd8:	4602      	mov	r2, r0
 8008cda:	693b      	ldr	r3, [r7, #16]
 8008cdc:	1ad3      	subs	r3, r2, r3
 8008cde:	f241 3288 	movw	r2, #5000	; 0x1388
 8008ce2:	4293      	cmp	r3, r2
 8008ce4:	d901      	bls.n	8008cea <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8008ce6:	2303      	movs	r3, #3
 8008ce8:	e0c1      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008cea:	4b40      	ldr	r3, [pc, #256]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008cec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008cee:	f003 0302 	and.w	r3, r3, #2
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d1ee      	bne.n	8008cd4 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008cf6:	7dfb      	ldrb	r3, [r7, #23]
 8008cf8:	2b01      	cmp	r3, #1
 8008cfa:	d105      	bne.n	8008d08 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008cfc:	4b3b      	ldr	r3, [pc, #236]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d00:	4a3a      	ldr	r2, [pc, #232]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008d02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008d06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	699b      	ldr	r3, [r3, #24]
 8008d0c:	2b00      	cmp	r3, #0
 8008d0e:	f000 80ad 	beq.w	8008e6c <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8008d12:	4b36      	ldr	r3, [pc, #216]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008d14:	689b      	ldr	r3, [r3, #8]
 8008d16:	f003 030c 	and.w	r3, r3, #12
 8008d1a:	2b08      	cmp	r3, #8
 8008d1c:	d060      	beq.n	8008de0 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	2b02      	cmp	r3, #2
 8008d24:	d145      	bne.n	8008db2 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008d26:	4b33      	ldr	r3, [pc, #204]	; (8008df4 <HAL_RCC_OscConfig+0x4b4>)
 8008d28:	2200      	movs	r2, #0
 8008d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d2c:	f7fd ff02 	bl	8006b34 <HAL_GetTick>
 8008d30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d32:	e008      	b.n	8008d46 <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d34:	f7fd fefe 	bl	8006b34 <HAL_GetTick>
 8008d38:	4602      	mov	r2, r0
 8008d3a:	693b      	ldr	r3, [r7, #16]
 8008d3c:	1ad3      	subs	r3, r2, r3
 8008d3e:	2b02      	cmp	r3, #2
 8008d40:	d901      	bls.n	8008d46 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8008d42:	2303      	movs	r3, #3
 8008d44:	e093      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008d46:	4b29      	ldr	r3, [pc, #164]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d4e:	2b00      	cmp	r3, #0
 8008d50:	d1f0      	bne.n	8008d34 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	69da      	ldr	r2, [r3, #28]
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	6a1b      	ldr	r3, [r3, #32]
 8008d5a:	431a      	orrs	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d60:	019b      	lsls	r3, r3, #6
 8008d62:	431a      	orrs	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d68:	085b      	lsrs	r3, r3, #1
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	041b      	lsls	r3, r3, #16
 8008d6e:	431a      	orrs	r2, r3
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008d74:	061b      	lsls	r3, r3, #24
 8008d76:	431a      	orrs	r2, r3
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008d7c:	071b      	lsls	r3, r3, #28
 8008d7e:	491b      	ldr	r1, [pc, #108]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008d80:	4313      	orrs	r3, r2
 8008d82:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008d84:	4b1b      	ldr	r3, [pc, #108]	; (8008df4 <HAL_RCC_OscConfig+0x4b4>)
 8008d86:	2201      	movs	r2, #1
 8008d88:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008d8a:	f7fd fed3 	bl	8006b34 <HAL_GetTick>
 8008d8e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008d90:	e008      	b.n	8008da4 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008d92:	f7fd fecf 	bl	8006b34 <HAL_GetTick>
 8008d96:	4602      	mov	r2, r0
 8008d98:	693b      	ldr	r3, [r7, #16]
 8008d9a:	1ad3      	subs	r3, r2, r3
 8008d9c:	2b02      	cmp	r3, #2
 8008d9e:	d901      	bls.n	8008da4 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8008da0:	2303      	movs	r3, #3
 8008da2:	e064      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008da4:	4b11      	ldr	r3, [pc, #68]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dac:	2b00      	cmp	r3, #0
 8008dae:	d0f0      	beq.n	8008d92 <HAL_RCC_OscConfig+0x452>
 8008db0:	e05c      	b.n	8008e6c <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008db2:	4b10      	ldr	r3, [pc, #64]	; (8008df4 <HAL_RCC_OscConfig+0x4b4>)
 8008db4:	2200      	movs	r2, #0
 8008db6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008db8:	f7fd febc 	bl	8006b34 <HAL_GetTick>
 8008dbc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dbe:	e008      	b.n	8008dd2 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008dc0:	f7fd feb8 	bl	8006b34 <HAL_GetTick>
 8008dc4:	4602      	mov	r2, r0
 8008dc6:	693b      	ldr	r3, [r7, #16]
 8008dc8:	1ad3      	subs	r3, r2, r3
 8008dca:	2b02      	cmp	r3, #2
 8008dcc:	d901      	bls.n	8008dd2 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8008dce:	2303      	movs	r3, #3
 8008dd0:	e04d      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008dd2:	4b06      	ldr	r3, [pc, #24]	; (8008dec <HAL_RCC_OscConfig+0x4ac>)
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008dda:	2b00      	cmp	r3, #0
 8008ddc:	d1f0      	bne.n	8008dc0 <HAL_RCC_OscConfig+0x480>
 8008dde:	e045      	b.n	8008e6c <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	699b      	ldr	r3, [r3, #24]
 8008de4:	2b01      	cmp	r3, #1
 8008de6:	d107      	bne.n	8008df8 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8008de8:	2301      	movs	r3, #1
 8008dea:	e040      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
 8008dec:	40023800 	.word	0x40023800
 8008df0:	40007000 	.word	0x40007000
 8008df4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008df8:	4b1f      	ldr	r3, [pc, #124]	; (8008e78 <HAL_RCC_OscConfig+0x538>)
 8008dfa:	685b      	ldr	r3, [r3, #4]
 8008dfc:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	699b      	ldr	r3, [r3, #24]
 8008e02:	2b01      	cmp	r3, #1
 8008e04:	d030      	beq.n	8008e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d129      	bne.n	8008e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e1e:	429a      	cmp	r2, r3
 8008e20:	d122      	bne.n	8008e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e22:	68fa      	ldr	r2, [r7, #12]
 8008e24:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008e28:	4013      	ands	r3, r2
 8008e2a:	687a      	ldr	r2, [r7, #4]
 8008e2c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008e2e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8008e30:	4293      	cmp	r3, r2
 8008e32:	d119      	bne.n	8008e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008e3a:	687b      	ldr	r3, [r7, #4]
 8008e3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e3e:	085b      	lsrs	r3, r3, #1
 8008e40:	3b01      	subs	r3, #1
 8008e42:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008e44:	429a      	cmp	r2, r3
 8008e46:	d10f      	bne.n	8008e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008e4e:	687b      	ldr	r3, [r7, #4]
 8008e50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e52:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008e54:	429a      	cmp	r2, r3
 8008e56:	d107      	bne.n	8008e68 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8008e58:	68fb      	ldr	r3, [r7, #12]
 8008e5a:	f003 42e0 	and.w	r2, r3, #1879048192	; 0x70000000
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e62:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d001      	beq.n	8008e6c <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 8008e68:	2301      	movs	r3, #1
 8008e6a:	e000      	b.n	8008e6e <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8008e6c:	2300      	movs	r3, #0
}
 8008e6e:	4618      	mov	r0, r3
 8008e70:	3718      	adds	r7, #24
 8008e72:	46bd      	mov	sp, r7
 8008e74:	bd80      	pop	{r7, pc}
 8008e76:	bf00      	nop
 8008e78:	40023800 	.word	0x40023800

08008e7c <HAL_SAI_InitProtocol>:
  *                   the configuration information for SAI module.
  * @param  nbslot Number of slot.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_InitProtocol(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 8008e7c:	b580      	push	{r7, lr}
 8008e7e:	b086      	sub	sp, #24
 8008e80:	af00      	add	r7, sp, #0
 8008e82:	60f8      	str	r0, [r7, #12]
 8008e84:	60b9      	str	r1, [r7, #8]
 8008e86:	607a      	str	r2, [r7, #4]
 8008e88:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008e8a:	2300      	movs	r3, #0
 8008e8c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SAI_SUPPORTED_PROTOCOL(protocol));
  assert_param(IS_SAI_PROTOCOL_DATASIZE(datasize));

  switch (protocol)
 8008e8e:	68bb      	ldr	r3, [r7, #8]
 8008e90:	2b02      	cmp	r3, #2
 8008e92:	d904      	bls.n	8008e9e <HAL_SAI_InitProtocol+0x22>
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	3b03      	subs	r3, #3
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d812      	bhi.n	8008ec2 <HAL_SAI_InitProtocol+0x46>
 8008e9c:	e008      	b.n	8008eb0 <HAL_SAI_InitProtocol+0x34>
  {
    case SAI_I2S_STANDARD :
    case SAI_I2S_MSBJUSTIFIED :
    case SAI_I2S_LSBJUSTIFIED :
      status = SAI_InitI2S(hsai, protocol, datasize, nbslot);
 8008e9e:	683b      	ldr	r3, [r7, #0]
 8008ea0:	687a      	ldr	r2, [r7, #4]
 8008ea2:	68b9      	ldr	r1, [r7, #8]
 8008ea4:	68f8      	ldr	r0, [r7, #12]
 8008ea6:	f000 fa51 	bl	800934c <SAI_InitI2S>
 8008eaa:	4603      	mov	r3, r0
 8008eac:	75fb      	strb	r3, [r7, #23]
      break;
 8008eae:	e00b      	b.n	8008ec8 <HAL_SAI_InitProtocol+0x4c>
    case SAI_PCM_LONG :
    case SAI_PCM_SHORT :
      status = SAI_InitPCM(hsai, protocol, datasize, nbslot);
 8008eb0:	683b      	ldr	r3, [r7, #0]
 8008eb2:	687a      	ldr	r2, [r7, #4]
 8008eb4:	68b9      	ldr	r1, [r7, #8]
 8008eb6:	68f8      	ldr	r0, [r7, #12]
 8008eb8:	f000 faf6 	bl	80094a8 <SAI_InitPCM>
 8008ebc:	4603      	mov	r3, r0
 8008ebe:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec0:	e002      	b.n	8008ec8 <HAL_SAI_InitProtocol+0x4c>
    default :
      status = HAL_ERROR;
 8008ec2:	2301      	movs	r3, #1
 8008ec4:	75fb      	strb	r3, [r7, #23]
      break;
 8008ec6:	bf00      	nop
  }

  if (status == HAL_OK)
 8008ec8:	7dfb      	ldrb	r3, [r7, #23]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d104      	bne.n	8008ed8 <HAL_SAI_InitProtocol+0x5c>
  {
    status = HAL_SAI_Init(hsai);
 8008ece:	68f8      	ldr	r0, [r7, #12]
 8008ed0:	f000 f808 	bl	8008ee4 <HAL_SAI_Init>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8008ed8:	7dfb      	ldrb	r3, [r7, #23]
}
 8008eda:	4618      	mov	r0, r3
 8008edc:	3718      	adds	r7, #24
 8008ede:	46bd      	mov	sp, r7
 8008ee0:	bd80      	pop	{r7, pc}
	...

08008ee4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 8008ee4:	b580      	push	{r7, lr}
 8008ee6:	b086      	sub	sp, #24
 8008ee8:	af00      	add	r7, sp, #0
 8008eea:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR = 0U;
 8008eec:	2300      	movs	r3, #0
 8008eee:	60fb      	str	r3, [r7, #12]

  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t freq = 0U;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	60bb      	str	r3, [r7, #8]

  /* This variable is used to compute CKSTR bits of SAI CR1 according to
     ClockStrobing and AudioMode fields */
  uint32_t ckstr_bits = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	617b      	str	r3, [r7, #20]
  uint32_t syncen_bits = 0U;
 8008ef8:	2300      	movs	r3, #0
 8008efa:	613b      	str	r3, [r7, #16]

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	d101      	bne.n	8008f06 <HAL_SAI_Init+0x22>
  {
    return HAL_ERROR;
 8008f02:	2301      	movs	r3, #1
 8008f04:	e10c      	b.n	8009120 <HAL_SAI_Init+0x23c>
  assert_param(IS_SAI_BLOCK_FIRSTBIT_OFFSET(hsai->SlotInit.FirstBitOffset));
  assert_param(IS_SAI_BLOCK_SLOT_SIZE(hsai->SlotInit.SlotSize));
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  if (hsai->State == HAL_SAI_STATE_RESET)
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d106      	bne.n	8008f20 <HAL_SAI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	2200      	movs	r2, #0
 8008f16:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8008f1a:	6878      	ldr	r0, [r7, #4]
 8008f1c:	f7fd fbe2 	bl	80066e4 <HAL_SAI_MspInit>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	2202      	movs	r2, #2
 8008f24:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Disable the selected SAI peripheral */
  SAI_Disable(hsai);
 8008f28:	6878      	ldr	r0, [r7, #4]
 8008f2a:	f000 fb73 	bl	8009614 <SAI_Disable>

  /* SAI Block Synchro Configuration -----------------------------------------*/
  SAI_BlockSynchroConfig(hsai);
 8008f2e:	6878      	ldr	r0, [r7, #4]
 8008f30:	f000 fc1a 	bl	8009768 <SAI_BlockSynchroConfig>

  /* Configure Master Clock using the following formula :
     MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
     FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
     MCKDIV[3:0] = SAI_CK_x / FS * 512 */
  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	6a1b      	ldr	r3, [r3, #32]
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d030      	beq.n	8008f9e <HAL_SAI_Init+0xba>
  {
    /* Get SAI clock source based on Source clock selection from RCC */
    freq = SAI_GetInputClock(hsai);
 8008f3c:	6878      	ldr	r0, [r7, #4]
 8008f3e:	f000 fc57 	bl	80097f0 <SAI_GetInputClock>
 8008f42:	60b8      	str	r0, [r7, #8]

    /* (saiclocksource x 10) to keep Significant digits */
    tmpregisterGCR = (((freq * 10U) / ((hsai->Init.AudioFrequency) * 512U)));
 8008f44:	68ba      	ldr	r2, [r7, #8]
 8008f46:	4613      	mov	r3, r2
 8008f48:	009b      	lsls	r3, r3, #2
 8008f4a:	4413      	add	r3, r2
 8008f4c:	005b      	lsls	r3, r3, #1
 8008f4e:	461a      	mov	r2, r3
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	6a1b      	ldr	r3, [r3, #32]
 8008f54:	025b      	lsls	r3, r3, #9
 8008f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f5a:	60fb      	str	r3, [r7, #12]

    hsai->Init.Mckdiv = tmpregisterGCR / 10U;
 8008f5c:	68fb      	ldr	r3, [r7, #12]
 8008f5e:	4a72      	ldr	r2, [pc, #456]	; (8009128 <HAL_SAI_Init+0x244>)
 8008f60:	fba2 2303 	umull	r2, r3, r2, r3
 8008f64:	08da      	lsrs	r2, r3, #3
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	625a      	str	r2, [r3, #36]	; 0x24

    /* Round result to the nearest integer */
    if ((tmpregisterGCR % 10U) > 8U)
 8008f6a:	68f9      	ldr	r1, [r7, #12]
 8008f6c:	4b6e      	ldr	r3, [pc, #440]	; (8009128 <HAL_SAI_Init+0x244>)
 8008f6e:	fba3 2301 	umull	r2, r3, r3, r1
 8008f72:	08da      	lsrs	r2, r3, #3
 8008f74:	4613      	mov	r3, r2
 8008f76:	009b      	lsls	r3, r3, #2
 8008f78:	4413      	add	r3, r2
 8008f7a:	005b      	lsls	r3, r3, #1
 8008f7c:	1aca      	subs	r2, r1, r3
 8008f7e:	2a08      	cmp	r2, #8
 8008f80:	d904      	bls.n	8008f8c <HAL_SAI_Init+0xa8>
    {
      hsai->Init.Mckdiv += 1U;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f86:	1c5a      	adds	r2, r3, #1
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f90:	2b04      	cmp	r3, #4
 8008f92:	d104      	bne.n	8008f9e <HAL_SAI_Init+0xba>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f98:	085a      	lsrs	r2, r3, #1
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	625a      	str	r2, [r3, #36]	; 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according to ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8008f9e:	687b      	ldr	r3, [r7, #4]
 8008fa0:	685b      	ldr	r3, [r3, #4]
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d003      	beq.n	8008fae <HAL_SAI_Init+0xca>
 8008fa6:	687b      	ldr	r3, [r7, #4]
 8008fa8:	685b      	ldr	r3, [r3, #4]
 8008faa:	2b02      	cmp	r3, #2
 8008fac:	d109      	bne.n	8008fc2 <HAL_SAI_Init+0xde>
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d101      	bne.n	8008fba <HAL_SAI_Init+0xd6>
 8008fb6:	2300      	movs	r3, #0
 8008fb8:	e001      	b.n	8008fbe <HAL_SAI_Init+0xda>
 8008fba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fbe:	617b      	str	r3, [r7, #20]
 8008fc0:	e008      	b.n	8008fd4 <HAL_SAI_Init+0xf0>
  }
  else
  {
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc6:	2b01      	cmp	r3, #1
 8008fc8:	d102      	bne.n	8008fd0 <HAL_SAI_Init+0xec>
 8008fca:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008fce:	e000      	b.n	8008fd2 <HAL_SAI_Init+0xee>
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	617b      	str	r3, [r7, #20]
  }

  /* SAI Block Configuration -------------------------------------------------*/
  switch (hsai->Init.Synchro)
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	689b      	ldr	r3, [r3, #8]
 8008fd8:	2b03      	cmp	r3, #3
 8008fda:	d811      	bhi.n	8009000 <HAL_SAI_Init+0x11c>
 8008fdc:	2b02      	cmp	r3, #2
 8008fde:	d20b      	bcs.n	8008ff8 <HAL_SAI_Init+0x114>
 8008fe0:	2b00      	cmp	r3, #0
 8008fe2:	d002      	beq.n	8008fea <HAL_SAI_Init+0x106>
 8008fe4:	2b01      	cmp	r3, #1
 8008fe6:	d003      	beq.n	8008ff0 <HAL_SAI_Init+0x10c>
    {
      syncen_bits = SAI_xCR1_SYNCEN_1;
    }
    break;
    default:
      break;
 8008fe8:	e00a      	b.n	8009000 <HAL_SAI_Init+0x11c>
      syncen_bits = 0U;
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
    break;
 8008fee:	e008      	b.n	8009002 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8008ff0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008ff4:	613b      	str	r3, [r7, #16]
    break;
 8008ff6:	e004      	b.n	8009002 <HAL_SAI_Init+0x11e>
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8008ff8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8008ffc:	613b      	str	r3, [r7, #16]
    break;
 8008ffe:	e000      	b.n	8009002 <HAL_SAI_Init+0x11e>
      break;
 8009000:	bf00      	nop
  }

  /* SAI CR1 Configuration */
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	6819      	ldr	r1, [r3, #0]
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681a      	ldr	r2, [r3, #0]
 800900c:	4b47      	ldr	r3, [pc, #284]	; (800912c <HAL_SAI_Init+0x248>)
 800900e:	400b      	ands	r3, r1
 8009010:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	6819      	ldr	r1, [r3, #0]
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	685a      	ldr	r2, [r3, #4]
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009020:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	6b9b      	ldr	r3, [r3, #56]	; 0x38
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009026:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800902c:	431a      	orrs	r2, r3
 800902e:	697b      	ldr	r3, [r7, #20]
 8009030:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8009032:	693b      	ldr	r3, [r7, #16]
 8009034:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009036:	687b      	ldr	r3, [r7, #4]
 8009038:	6a9b      	ldr	r3, [r3, #40]	; 0x28
                          ckstr_bits | syncen_bits |                             \
 800903a:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	691b      	ldr	r3, [r3, #16]
 8009040:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8009046:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20U));
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800904c:	051b      	lsls	r3, r3, #20
 800904e:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	681b      	ldr	r3, [r3, #0]
 8009054:	430a      	orrs	r2, r1
 8009056:	601a      	str	r2, [r3, #0]

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	685b      	ldr	r3, [r3, #4]
 800905e:	687a      	ldr	r2, [r7, #4]
 8009060:	6812      	ldr	r2, [r2, #0]
 8009062:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8009066:	f023 030f 	bic.w	r3, r3, #15
 800906a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	6859      	ldr	r1, [r3, #4]
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	699a      	ldr	r2, [r3, #24]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800907a:	431a      	orrs	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009080:	431a      	orrs	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	430a      	orrs	r2, r1
 8009088:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	6899      	ldr	r1, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681a      	ldr	r2, [r3, #0]
 8009094:	4b26      	ldr	r3, [pc, #152]	; (8009130 <HAL_SAI_Init+0x24c>)
 8009096:	400b      	ands	r3, r1
 8009098:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	6899      	ldr	r1, [r3, #8]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80090a4:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset     |
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80090aa:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSOffset     |
 80090b0:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                           hsai->FrameInit.FSDefinition |
 80090b6:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8U));
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80090bc:	3b01      	subs	r3, #1
 80090be:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 80090c0:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	430a      	orrs	r2, r1
 80090c8:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= ~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ | \
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	68d9      	ldr	r1, [r3, #12]
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681a      	ldr	r2, [r3, #0]
 80090d4:	f24f 0320 	movw	r3, #61472	; 0xf020
 80090d8:	400b      	ands	r3, r1
 80090da:	60d3      	str	r3, [r2, #12]
                             SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN);

  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	68d9      	ldr	r1, [r3, #12]
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80090ea:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80090f0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80090f2:	431a      	orrs	r2, r3
                            (hsai->SlotInit.SlotActive << 16U) | ((hsai->SlotInit.SlotNumber - 1U) <<  8U);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80090f8:	3b01      	subs	r3, #1
 80090fa:	021b      	lsls	r3, r3, #8
 80090fc:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |=  hsai->SlotInit.FirstBitOffset |  hsai->SlotInit.SlotSize  | \
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	430a      	orrs	r2, r1
 8009104:	60da      	str	r2, [r3, #12]

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	2200      	movs	r2, #0
 800910a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	2201      	movs	r2, #1
 8009112:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2200      	movs	r2, #0
 800911a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800911e:	2300      	movs	r3, #0
}
 8009120:	4618      	mov	r0, r3
 8009122:	3718      	adds	r7, #24
 8009124:	46bd      	mov	sp, r7
 8009126:	bd80      	pop	{r7, pc}
 8009128:	cccccccd 	.word	0xcccccccd
 800912c:	ff05c010 	.word	0xff05c010
 8009130:	fff88000 	.word	0xfff88000

08009134 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8009134:	b580      	push	{r7, lr}
 8009136:	b084      	sub	sp, #16
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800913c:	2300      	movs	r3, #0
 800913e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009146:	2b01      	cmp	r3, #1
 8009148:	d101      	bne.n	800914e <HAL_SAI_DMAStop+0x1a>
 800914a:	2302      	movs	r3, #2
 800914c:	e061      	b.n	8009212 <HAL_SAI_DMAStop+0xde>
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	2201      	movs	r2, #1
 8009152:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	681b      	ldr	r3, [r3, #0]
 800915a:	681a      	ldr	r2, [r3, #0]
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009164:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->hdmatx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_TX))
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800916a:	2b00      	cmp	r3, #0
 800916c:	d01c      	beq.n	80091a8 <HAL_SAI_DMAStop+0x74>
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009174:	b2db      	uxtb	r3, r3
 8009176:	2b12      	cmp	r3, #18
 8009178:	d116      	bne.n	80091a8 <HAL_SAI_DMAStop+0x74>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800917e:	4618      	mov	r0, r3
 8009180:	f7fd ff18 	bl	8006fb4 <HAL_DMA_Abort>
 8009184:	4603      	mov	r3, r0
 8009186:	2b00      	cmp	r3, #0
 8009188:	d00e      	beq.n	80091a8 <HAL_SAI_DMAStop+0x74>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800918e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009190:	2b80      	cmp	r3, #128	; 0x80
 8009192:	d009      	beq.n	80091a8 <HAL_SAI_DMAStop+0x74>
      {
        status = HAL_ERROR;
 8009194:	2301      	movs	r3, #1
 8009196:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800919e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->hdmarx != NULL) && (hsai->State == HAL_SAI_STATE_BUSY_RX))
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d01c      	beq.n	80091ea <HAL_SAI_DMAStop+0xb6>
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 80091b6:	b2db      	uxtb	r3, r3
 80091b8:	2b22      	cmp	r3, #34	; 0x22
 80091ba:	d116      	bne.n	80091ea <HAL_SAI_DMAStop+0xb6>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 80091bc:	687b      	ldr	r3, [r7, #4]
 80091be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091c0:	4618      	mov	r0, r3
 80091c2:	f7fd fef7 	bl	8006fb4 <HAL_DMA_Abort>
 80091c6:	4603      	mov	r3, r0
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d00e      	beq.n	80091ea <HAL_SAI_DMAStop+0xb6>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80091d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80091d2:	2b80      	cmp	r3, #128	; 0x80
 80091d4:	d009      	beq.n	80091ea <HAL_SAI_DMAStop+0xb6>
      {
        status = HAL_ERROR;
 80091d6:	2301      	movs	r3, #1
 80091d8:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80091e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
  }

  /* Disable SAI peripheral */
  SAI_Disable(hsai);
 80091ea:	6878      	ldr	r0, [r7, #4]
 80091ec:	f000 fa12 	bl	8009614 <SAI_Disable>

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	685a      	ldr	r2, [r3, #4]
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	f042 0208 	orr.w	r2, r2, #8
 80091fe:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2201      	movs	r2, #1
 8009204:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	2200      	movs	r2, #0
 800920c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return status;
 8009210:	7bfb      	ldrb	r3, [r7, #15]
}
 8009212:	4618      	mov	r0, r3
 8009214:	3710      	adds	r7, #16
 8009216:	46bd      	mov	sp, r7
 8009218:	bd80      	pop	{r7, pc}
	...

0800921c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800921c:	b580      	push	{r7, lr}
 800921e:	b084      	sub	sp, #16
 8009220:	af00      	add	r7, sp, #0
 8009222:	60f8      	str	r0, [r7, #12]
 8009224:	60b9      	str	r1, [r7, #8]
 8009226:	4613      	mov	r3, r2
 8009228:	80fb      	strh	r3, [r7, #6]
  if ((pData == NULL) || (Size == 0))
 800922a:	68bb      	ldr	r3, [r7, #8]
 800922c:	2b00      	cmp	r3, #0
 800922e:	d002      	beq.n	8009236 <HAL_SAI_Receive_DMA+0x1a>
 8009230:	88fb      	ldrh	r3, [r7, #6]
 8009232:	2b00      	cmp	r3, #0
 8009234:	d101      	bne.n	800923a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8009236:	2301      	movs	r3, #1
 8009238:	e074      	b.n	8009324 <HAL_SAI_Receive_DMA+0x108>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	f893 3081 	ldrb.w	r3, [r3, #129]	; 0x81
 8009240:	b2db      	uxtb	r3, r3
 8009242:	2b01      	cmp	r3, #1
 8009244:	d16d      	bne.n	8009322 <HAL_SAI_Receive_DMA+0x106>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800924c:	2b01      	cmp	r3, #1
 800924e:	d101      	bne.n	8009254 <HAL_SAI_Receive_DMA+0x38>
 8009250:	2302      	movs	r3, #2
 8009252:	e067      	b.n	8009324 <HAL_SAI_Receive_DMA+0x108>
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	2201      	movs	r2, #1
 8009258:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    hsai->pBuffPtr = pData;
 800925c:	68fb      	ldr	r3, [r7, #12]
 800925e:	68ba      	ldr	r2, [r7, #8]
 8009260:	669a      	str	r2, [r3, #104]	; 0x68
    hsai->XferSize = Size;
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	88fa      	ldrh	r2, [r7, #6]
 8009266:	f8a3 206c 	strh.w	r2, [r3, #108]	; 0x6c
    hsai->XferCount = Size;
 800926a:	68fb      	ldr	r3, [r7, #12]
 800926c:	88fa      	ldrh	r2, [r7, #6]
 800926e:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8009272:	68fb      	ldr	r3, [r7, #12]
 8009274:	2200      	movs	r2, #0
 8009276:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	2222      	movs	r2, #34	; 0x22
 800927e:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8009282:	68fb      	ldr	r3, [r7, #12]
 8009284:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009286:	4a29      	ldr	r2, [pc, #164]	; (800932c <HAL_SAI_Receive_DMA+0x110>)
 8009288:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 800928a:	68fb      	ldr	r3, [r7, #12]
 800928c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800928e:	4a28      	ldr	r2, [pc, #160]	; (8009330 <HAL_SAI_Receive_DMA+0x114>)
 8009290:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8009292:	68fb      	ldr	r3, [r7, #12]
 8009294:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009296:	4a27      	ldr	r2, [pc, #156]	; (8009334 <HAL_SAI_Receive_DMA+0x118>)
 8009298:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 800929a:	68fb      	ldr	r3, [r7, #12]
 800929c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800929e:	2200      	movs	r2, #0
 80092a0:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 80092a2:	68fb      	ldr	r3, [r7, #12]
 80092a4:	6f58      	ldr	r0, [r3, #116]	; 0x74
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	331c      	adds	r3, #28
 80092ac:	4619      	mov	r1, r3
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80092b2:	461a      	mov	r2, r3
 80092b4:	68fb      	ldr	r3, [r7, #12]
 80092b6:	f8b3 306c 	ldrh.w	r3, [r3, #108]	; 0x6c
 80092ba:	f7fd fe23 	bl	8006f04 <HAL_DMA_Start_IT>
 80092be:	4603      	mov	r3, r0
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d005      	beq.n	80092d0 <HAL_SAI_Receive_DMA+0xb4>
    {
      __HAL_UNLOCK(hsai);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
      return  HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e029      	b.n	8009324 <HAL_SAI_Receive_DMA+0x108>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80092d0:	2100      	movs	r1, #0
 80092d2:	68f8      	ldr	r0, [r7, #12]
 80092d4:	f000 f968 	bl	80095a8 <SAI_InterruptFlag>
 80092d8:	4601      	mov	r1, r0
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	691a      	ldr	r2, [r3, #16]
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	430a      	orrs	r2, r1
 80092e6:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 80092e8:	68fb      	ldr	r3, [r7, #12]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	681a      	ldr	r2, [r3, #0]
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80092f6:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == RESET)
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	681b      	ldr	r3, [r3, #0]
 80092fc:	681b      	ldr	r3, [r3, #0]
 80092fe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009302:	2b00      	cmp	r3, #0
 8009304:	d107      	bne.n	8009316 <HAL_SAI_Receive_DMA+0xfa>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8009306:	68fb      	ldr	r3, [r7, #12]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	681a      	ldr	r2, [r3, #0]
 800930c:	68fb      	ldr	r3, [r7, #12]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8009314:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	2200      	movs	r2, #0
 800931a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 800931e:	2300      	movs	r3, #0
 8009320:	e000      	b.n	8009324 <HAL_SAI_Receive_DMA+0x108>
  }
  else
  {
    return HAL_BUSY;
 8009322:	2302      	movs	r3, #2
  }
}
 8009324:	4618      	mov	r0, r3
 8009326:	3710      	adds	r7, #16
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}
 800932c:	080096e5 	.word	0x080096e5
 8009330:	08009685 	.word	0x08009685
 8009334:	08009701 	.word	0x08009701

08009338 <HAL_SAI_ErrorCallback>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8009338:	b480      	push	{r7}
 800933a:	b083      	sub	sp, #12
 800933c:	af00      	add	r7, sp, #0
 800933e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_ErrorCallback could be implemented in the user file
   */
}
 8009340:	bf00      	nop
 8009342:	370c      	adds	r7, #12
 8009344:	46bd      	mov	sp, r7
 8009346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800934a:	4770      	bx	lr

0800934c <SAI_InitI2S>:
  * @param  nbslot number of slot minimum value is 2 and max is 16.
  *                    the value must be a multiple of 2.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitI2S(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 800934c:	b480      	push	{r7}
 800934e:	b085      	sub	sp, #20
 8009350:	af00      	add	r7, sp, #0
 8009352:	60f8      	str	r0, [r7, #12]
 8009354:	60b9      	str	r1, [r7, #8]
 8009356:	607a      	str	r2, [r7, #4]
 8009358:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	2200      	movs	r2, #0
 800935e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 8009360:	68fb      	ldr	r3, [r7, #12]
 8009362:	2200      	movs	r2, #0
 8009364:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8009366:	68fb      	ldr	r3, [r7, #12]
 8009368:	685b      	ldr	r3, [r3, #4]
 800936a:	2b00      	cmp	r3, #0
 800936c:	d003      	beq.n	8009376 <SAI_InitI2S+0x2a>
 800936e:	68fb      	ldr	r3, [r7, #12]
 8009370:	685b      	ldr	r3, [r3, #4]
 8009372:	2b02      	cmp	r3, #2
 8009374:	d103      	bne.n	800937e <SAI_InitI2S+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8009376:	68fb      	ldr	r3, [r7, #12]
 8009378:	2200      	movs	r2, #0
 800937a:	641a      	str	r2, [r3, #64]	; 0x40
 800937c:	e002      	b.n	8009384 <SAI_InitI2S+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	2201      	movs	r2, #1
 8009382:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_CHANNEL_IDENTIFICATION;
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800938a:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009392:	665a      	str	r2, [r3, #100]	; 0x64
  hsai->SlotInit.FirstBitOffset  = 0U;
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	2200      	movs	r2, #0
 8009398:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	661a      	str	r2, [r3, #96]	; 0x60

  /* in IS2 the number of slot must be even */
  if ((nbslot & 0x1U) != 0U)
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	f003 0301 	and.w	r3, r3, #1
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d001      	beq.n	80093ae <SAI_InitI2S+0x62>
  {
    return HAL_ERROR;
 80093aa:	2301      	movs	r3, #1
 80093ac:	e076      	b.n	800949c <SAI_InitI2S+0x150>
  }

  if (protocol == SAI_I2S_STANDARD)
 80093ae:	68bb      	ldr	r3, [r7, #8]
 80093b0:	2b00      	cmp	r3, #0
 80093b2:	d107      	bne.n	80093c4 <SAI_InitI2S+0x78>
  {
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 80093b4:	68fb      	ldr	r3, [r7, #12]
 80093b6:	2200      	movs	r2, #0
 80093b8:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_BEFOREFIRSTBIT;
 80093ba:	68fb      	ldr	r3, [r7, #12]
 80093bc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80093c0:	655a      	str	r2, [r3, #84]	; 0x54
 80093c2:	e006      	b.n	80093d2 <SAI_InitI2S+0x86>
  }
  else
  {
    /* SAI_I2S_MSBJUSTIFIED or SAI_I2S_LSBJUSTIFIED */
    hsai->FrameInit.FSPolarity = SAI_FS_ACTIVE_HIGH;
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80093ca:	651a      	str	r2, [r3, #80]	; 0x50
    hsai->FrameInit.FSOffset   = SAI_FS_FIRSTBIT;
 80093cc:	68fb      	ldr	r3, [r7, #12]
 80093ce:	2200      	movs	r2, #0
 80093d0:	655a      	str	r2, [r3, #84]	; 0x54
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2b03      	cmp	r3, #3
 80093d6:	d84f      	bhi.n	8009478 <SAI_InitI2S+0x12c>
 80093d8:	a201      	add	r2, pc, #4	; (adr r2, 80093e0 <SAI_InitI2S+0x94>)
 80093da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80093de:	bf00      	nop
 80093e0:	080093f1 	.word	0x080093f1
 80093e4:	08009413 	.word	0x08009413
 80093e8:	08009435 	.word	0x08009435
 80093ec:	08009457 	.word	0x08009457

  /* Frame definition */
  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 80093f0:	68fb      	ldr	r3, [r7, #12]
 80093f2:	2280      	movs	r2, #128	; 0x80
 80093f4:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * (nbslot / 2U);
 80093f6:	683b      	ldr	r3, [r7, #0]
 80093f8:	085b      	lsrs	r3, r3, #1
 80093fa:	015a      	lsls	r2, r3, #5
 80093fc:	68fb      	ldr	r3, [r7, #12]
 80093fe:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 16U * (nbslot / 2U);
 8009400:	683b      	ldr	r3, [r7, #0]
 8009402:	085b      	lsrs	r3, r3, #1
 8009404:	011a      	lsls	r2, r3, #4
 8009406:	68fb      	ldr	r3, [r7, #12]
 8009408:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800940a:	68fb      	ldr	r3, [r7, #12]
 800940c:	2240      	movs	r2, #64	; 0x40
 800940e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009410:	e034      	b.n	800947c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009412:	68fb      	ldr	r3, [r7, #12]
 8009414:	2280      	movs	r2, #128	; 0x80
 8009416:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 8009418:	683b      	ldr	r3, [r7, #0]
 800941a:	085b      	lsrs	r3, r3, #1
 800941c:	019a      	lsls	r2, r3, #6
 800941e:	68fb      	ldr	r3, [r7, #12]
 8009420:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009422:	683b      	ldr	r3, [r7, #0]
 8009424:	085b      	lsrs	r3, r3, #1
 8009426:	015a      	lsls	r2, r3, #5
 8009428:	68fb      	ldr	r3, [r7, #12]
 800942a:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800942c:	68fb      	ldr	r3, [r7, #12]
 800942e:	2280      	movs	r2, #128	; 0x80
 8009430:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009432:	e023      	b.n	800947c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_24BIT:
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009434:	68fb      	ldr	r3, [r7, #12]
 8009436:	22c0      	movs	r2, #192	; 0xc0
 8009438:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800943a:	683b      	ldr	r3, [r7, #0]
 800943c:	085b      	lsrs	r3, r3, #1
 800943e:	019a      	lsls	r2, r3, #6
 8009440:	68fb      	ldr	r3, [r7, #12]
 8009442:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009444:	683b      	ldr	r3, [r7, #0]
 8009446:	085b      	lsrs	r3, r3, #1
 8009448:	015a      	lsls	r2, r3, #5
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	2280      	movs	r2, #128	; 0x80
 8009452:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009454:	e012      	b.n	800947c <SAI_InitI2S+0x130>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 8009456:	68fb      	ldr	r3, [r7, #12]
 8009458:	22e0      	movs	r2, #224	; 0xe0
 800945a:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 64U * (nbslot / 2U);
 800945c:	683b      	ldr	r3, [r7, #0]
 800945e:	085b      	lsrs	r3, r3, #1
 8009460:	019a      	lsls	r2, r3, #6
 8009462:	68fb      	ldr	r3, [r7, #12]
 8009464:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->FrameInit.ActiveFrameLength = 32U * (nbslot / 2U);
 8009466:	683b      	ldr	r3, [r7, #0]
 8009468:	085b      	lsrs	r3, r3, #1
 800946a:	015a      	lsls	r2, r3, #5
 800946c:	68fb      	ldr	r3, [r7, #12]
 800946e:	649a      	str	r2, [r3, #72]	; 0x48
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009470:	68fb      	ldr	r3, [r7, #12]
 8009472:	2280      	movs	r2, #128	; 0x80
 8009474:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009476:	e001      	b.n	800947c <SAI_InitI2S+0x130>
    default :
      return HAL_ERROR;
 8009478:	2301      	movs	r3, #1
 800947a:	e00f      	b.n	800949c <SAI_InitI2S+0x150>
  }
  if (protocol == SAI_I2S_LSBJUSTIFIED)
 800947c:	68bb      	ldr	r3, [r7, #8]
 800947e:	2b02      	cmp	r3, #2
 8009480:	d10b      	bne.n	800949a <SAI_InitI2S+0x14e>
  {
    if (datasize == SAI_PROTOCOL_DATASIZE_16BITEXTENDED)
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	2b01      	cmp	r3, #1
 8009486:	d102      	bne.n	800948e <SAI_InitI2S+0x142>
    {
      hsai->SlotInit.FirstBitOffset = 16U;
 8009488:	68fb      	ldr	r3, [r7, #12]
 800948a:	2210      	movs	r2, #16
 800948c:	659a      	str	r2, [r3, #88]	; 0x58
    }
    if (datasize == SAI_PROTOCOL_DATASIZE_24BIT)
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	2b02      	cmp	r3, #2
 8009492:	d102      	bne.n	800949a <SAI_InitI2S+0x14e>
    {
      hsai->SlotInit.FirstBitOffset = 8U;
 8009494:	68fb      	ldr	r3, [r7, #12]
 8009496:	2208      	movs	r2, #8
 8009498:	659a      	str	r2, [r3, #88]	; 0x58
    }
  }
  return HAL_OK;
 800949a:	2300      	movs	r3, #0
}
 800949c:	4618      	mov	r0, r3
 800949e:	3714      	adds	r7, #20
 80094a0:	46bd      	mov	sp, r7
 80094a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094a6:	4770      	bx	lr

080094a8 <SAI_InitPCM>:
  * @param  datasize one of the supported datasize @ref SAI_Protocol_DataSize
  * @param  nbslot number of slot minimum value is 1 and the max is 16.
  * @retval HAL status
  */
static HAL_StatusTypeDef SAI_InitPCM(SAI_HandleTypeDef *hsai, uint32_t protocol, uint32_t datasize, uint32_t nbslot)
{
 80094a8:	b480      	push	{r7}
 80094aa:	b085      	sub	sp, #20
 80094ac:	af00      	add	r7, sp, #0
 80094ae:	60f8      	str	r0, [r7, #12]
 80094b0:	60b9      	str	r1, [r7, #8]
 80094b2:	607a      	str	r2, [r7, #4]
 80094b4:	603b      	str	r3, [r7, #0]
  hsai->Init.Protocol            = SAI_FREE_PROTOCOL;
 80094b6:	68fb      	ldr	r3, [r7, #12]
 80094b8:	2200      	movs	r2, #0
 80094ba:	635a      	str	r2, [r3, #52]	; 0x34
  hsai->Init.FirstBit            = SAI_FIRSTBIT_MSB;
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	2200      	movs	r2, #0
 80094c0:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Compute ClockStrobing according AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80094c2:	68fb      	ldr	r3, [r7, #12]
 80094c4:	685b      	ldr	r3, [r3, #4]
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d003      	beq.n	80094d2 <SAI_InitPCM+0x2a>
 80094ca:	68fb      	ldr	r3, [r7, #12]
 80094cc:	685b      	ldr	r3, [r3, #4]
 80094ce:	2b02      	cmp	r3, #2
 80094d0:	d103      	bne.n	80094da <SAI_InitPCM+0x32>
  {
    /* Transmit */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80094d2:	68fb      	ldr	r3, [r7, #12]
 80094d4:	2201      	movs	r2, #1
 80094d6:	641a      	str	r2, [r3, #64]	; 0x40
 80094d8:	e002      	b.n	80094e0 <SAI_InitPCM+0x38>
  }
  else
  {
    /* Receive */
    hsai->Init.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2200      	movs	r2, #0
 80094de:	641a      	str	r2, [r3, #64]	; 0x40
  }
  hsai->FrameInit.FSDefinition   = SAI_FS_STARTFRAME;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai->FrameInit.FSPolarity     = SAI_FS_ACTIVE_HIGH;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80094ec:	651a      	str	r2, [r3, #80]	; 0x50
  hsai->FrameInit.FSOffset       = SAI_FS_BEFOREFIRSTBIT;
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80094f4:	655a      	str	r2, [r3, #84]	; 0x54
  hsai->SlotInit.FirstBitOffset  = 0U;
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	2200      	movs	r2, #0
 80094fa:	659a      	str	r2, [r3, #88]	; 0x58
  hsai->SlotInit.SlotNumber      = nbslot;
 80094fc:	68fb      	ldr	r3, [r7, #12]
 80094fe:	683a      	ldr	r2, [r7, #0]
 8009500:	661a      	str	r2, [r3, #96]	; 0x60
  hsai->SlotInit.SlotActive      = SAI_SLOTACTIVE_ALL;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8009508:	665a      	str	r2, [r3, #100]	; 0x64

  if (protocol == SAI_PCM_SHORT)
 800950a:	68bb      	ldr	r3, [r7, #8]
 800950c:	2b04      	cmp	r3, #4
 800950e:	d103      	bne.n	8009518 <SAI_InitPCM+0x70>
  {
    hsai->FrameInit.ActiveFrameLength = 1;
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	2201      	movs	r2, #1
 8009514:	649a      	str	r2, [r3, #72]	; 0x48
 8009516:	e002      	b.n	800951e <SAI_InitPCM+0x76>
  }
  else
  {
    /* SAI_PCM_LONG */
    hsai->FrameInit.ActiveFrameLength = 13;
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	220d      	movs	r2, #13
 800951c:	649a      	str	r2, [r3, #72]	; 0x48
 800951e:	687b      	ldr	r3, [r7, #4]
 8009520:	2b03      	cmp	r3, #3
 8009522:	d837      	bhi.n	8009594 <SAI_InitPCM+0xec>
 8009524:	a201      	add	r2, pc, #4	; (adr r2, 800952c <SAI_InitPCM+0x84>)
 8009526:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800952a:	bf00      	nop
 800952c:	0800953d 	.word	0x0800953d
 8009530:	08009553 	.word	0x08009553
 8009534:	08009569 	.word	0x08009569
 8009538:	0800957f 	.word	0x0800957f
  }

  switch (datasize)
  {
    case SAI_PROTOCOL_DATASIZE_16BIT:
      hsai->Init.DataSize = SAI_DATASIZE_16;
 800953c:	68fb      	ldr	r3, [r7, #12]
 800953e:	2280      	movs	r2, #128	; 0x80
 8009540:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 16U * nbslot;
 8009542:	683b      	ldr	r3, [r7, #0]
 8009544:	011a      	lsls	r2, r3, #4
 8009546:	68fb      	ldr	r3, [r7, #12]
 8009548:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_16B;
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	2240      	movs	r2, #64	; 0x40
 800954e:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009550:	e022      	b.n	8009598 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_16BITEXTENDED :
      hsai->Init.DataSize = SAI_DATASIZE_16;
 8009552:	68fb      	ldr	r3, [r7, #12]
 8009554:	2280      	movs	r2, #128	; 0x80
 8009556:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009558:	683b      	ldr	r3, [r7, #0]
 800955a:	015a      	lsls	r2, r3, #5
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2280      	movs	r2, #128	; 0x80
 8009564:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009566:	e017      	b.n	8009598 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_24BIT :
      hsai->Init.DataSize = SAI_DATASIZE_24;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	22c0      	movs	r2, #192	; 0xc0
 800956c:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 800956e:	683b      	ldr	r3, [r7, #0]
 8009570:	015a      	lsls	r2, r3, #5
 8009572:	68fb      	ldr	r3, [r7, #12]
 8009574:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	2280      	movs	r2, #128	; 0x80
 800957a:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 800957c:	e00c      	b.n	8009598 <SAI_InitPCM+0xf0>
    case SAI_PROTOCOL_DATASIZE_32BIT:
      hsai->Init.DataSize = SAI_DATASIZE_32;
 800957e:	68fb      	ldr	r3, [r7, #12]
 8009580:	22e0      	movs	r2, #224	; 0xe0
 8009582:	639a      	str	r2, [r3, #56]	; 0x38
      hsai->FrameInit.FrameLength = 32U * nbslot;
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	015a      	lsls	r2, r3, #5
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	645a      	str	r2, [r3, #68]	; 0x44
      hsai->SlotInit.SlotSize = SAI_SLOTSIZE_32B;
 800958c:	68fb      	ldr	r3, [r7, #12]
 800958e:	2280      	movs	r2, #128	; 0x80
 8009590:	65da      	str	r2, [r3, #92]	; 0x5c
      break;
 8009592:	e001      	b.n	8009598 <SAI_InitPCM+0xf0>
    default :
      return HAL_ERROR;
 8009594:	2301      	movs	r3, #1
 8009596:	e000      	b.n	800959a <SAI_InitPCM+0xf2>
  }

  return HAL_OK;
 8009598:	2300      	movs	r3, #0
}
 800959a:	4618      	mov	r0, r3
 800959c:	3714      	adds	r7, #20
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
 80095a6:	bf00      	nop

080095a8 <SAI_InterruptFlag>:
  *               the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
 */
static uint32_t SAI_InterruptFlag(SAI_HandleTypeDef *hsai, uint32_t mode)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80095b2:	2301      	movs	r3, #1
 80095b4:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80095b6:	683b      	ldr	r3, [r7, #0]
 80095b8:	2b01      	cmp	r3, #1
 80095ba:	d103      	bne.n	80095c4 <SAI_InterruptFlag+0x1c>
  {
    tmpIT |= SAI_IT_FREQ;
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	f043 0308 	orr.w	r3, r3, #8
 80095c2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80095c8:	2b08      	cmp	r3, #8
 80095ca:	d10b      	bne.n	80095e4 <SAI_InterruptFlag+0x3c>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80095cc:	687b      	ldr	r3, [r7, #4]
 80095ce:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80095d0:	2b03      	cmp	r3, #3
 80095d2:	d003      	beq.n	80095dc <SAI_InterruptFlag+0x34>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	685b      	ldr	r3, [r3, #4]
 80095d8:	2b01      	cmp	r3, #1
 80095da:	d103      	bne.n	80095e4 <SAI_InterruptFlag+0x3c>
  {
    tmpIT |= SAI_IT_CNRDY;
 80095dc:	68fb      	ldr	r3, [r7, #12]
 80095de:	f043 0310 	orr.w	r3, r3, #16
 80095e2:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	2b03      	cmp	r3, #3
 80095ea:	d003      	beq.n	80095f4 <SAI_InterruptFlag+0x4c>
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	685b      	ldr	r3, [r3, #4]
 80095f0:	2b02      	cmp	r3, #2
 80095f2:	d104      	bne.n	80095fe <SAI_InterruptFlag+0x56>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80095fa:	60fb      	str	r3, [r7, #12]
 80095fc:	e003      	b.n	8009606 <SAI_InterruptFlag+0x5e>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	f043 0304 	orr.w	r3, r3, #4
 8009604:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8009606:	68fb      	ldr	r3, [r7, #12]
}
 8009608:	4618      	mov	r0, r3
 800960a:	3714      	adds	r7, #20
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <SAI_Disable>:
  * @param  hsai  pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8009614:	b480      	push	{r7}
 8009616:	b085      	sub	sp, #20
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 800961c:	4b17      	ldr	r3, [pc, #92]	; (800967c <SAI_Disable+0x68>)
 800961e:	681b      	ldr	r3, [r3, #0]
 8009620:	4a17      	ldr	r2, [pc, #92]	; (8009680 <SAI_Disable+0x6c>)
 8009622:	fba2 2303 	umull	r2, r3, r2, r3
 8009626:	0b1b      	lsrs	r3, r3, #12
 8009628:	009b      	lsls	r3, r3, #2
 800962a:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 800962c:	2300      	movs	r3, #0
 800962e:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800963e:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count-- == 0U)
 8009640:	68fb      	ldr	r3, [r7, #12]
 8009642:	1e5a      	subs	r2, r3, #1
 8009644:	60fa      	str	r2, [r7, #12]
 8009646:	2b00      	cmp	r3, #0
 8009648:	d10a      	bne.n	8009660 <SAI_Disable+0x4c>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009650:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8009654:	687b      	ldr	r3, [r7, #4]
 8009656:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      status = HAL_TIMEOUT;
 800965a:	2303      	movs	r3, #3
 800965c:	72fb      	strb	r3, [r7, #11]
      break;
 800965e:	e006      	b.n	800966e <SAI_Disable+0x5a>
    }
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != RESET);
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e8      	bne.n	8009640 <SAI_Disable+0x2c>

  return status;
 800966e:	7afb      	ldrb	r3, [r7, #11]
}
 8009670:	4618      	mov	r0, r3
 8009672:	3714      	adds	r7, #20
 8009674:	46bd      	mov	sp, r7
 8009676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800967a:	4770      	bx	lr
 800967c:	20000058 	.word	0x20000058
 8009680:	95cbec1b 	.word	0x95cbec1b

08009684 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009690:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	69db      	ldr	r3, [r3, #28]
 8009696:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800969a:	d01c      	beq.n	80096d6 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	681a      	ldr	r2, [r3, #0]
 80096a2:	68fb      	ldr	r3, [r7, #12]
 80096a4:	681b      	ldr	r3, [r3, #0]
 80096a6:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80096aa:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0U;
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	2200      	movs	r2, #0
 80096b0:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80096b4:	2100      	movs	r1, #0
 80096b6:	68f8      	ldr	r0, [r7, #12]
 80096b8:	f7ff ff76 	bl	80095a8 <SAI_InterruptFlag>
 80096bc:	4603      	mov	r3, r0
 80096be:	43d9      	mvns	r1, r3
 80096c0:	68fb      	ldr	r3, [r7, #12]
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	691a      	ldr	r2, [r3, #16]
 80096c6:	68fb      	ldr	r3, [r7, #12]
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	400a      	ands	r2, r1
 80096cc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	2201      	movs	r2, #1
 80096d2:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 80096d6:	68f8      	ldr	r0, [r7, #12]
 80096d8:	f7fb ff7c 	bl	80055d4 <HAL_SAI_RxCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80096dc:	bf00      	nop
 80096de:	3710      	adds	r7, #16
 80096e0:	46bd      	mov	sp, r7
 80096e2:	bd80      	pop	{r7, pc}

080096e4 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096f0:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 80096f2:	68f8      	ldr	r0, [r7, #12]
 80096f4:	f7fb ff5a 	bl	80055ac <HAL_SAI_RxHalfCpltCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}

08009700 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009700:	b580      	push	{r7, lr}
 8009702:	b084      	sub	sp, #16
 8009704:	af00      	add	r7, sp, #0
 8009706:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800970c:	60fb      	str	r3, [r7, #12]

  /* Set SAI error code */
  hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009714:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  if ((hsai->hdmatx->ErrorCode == HAL_DMA_ERROR_TE) || (hsai->hdmarx->ErrorCode == HAL_DMA_ERROR_TE))
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009722:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009724:	2b01      	cmp	r3, #1
 8009726:	d004      	beq.n	8009732 <SAI_DMAError+0x32>
 8009728:	68fb      	ldr	r3, [r7, #12]
 800972a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800972c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800972e:	2b01      	cmp	r3, #1
 8009730:	d112      	bne.n	8009758 <SAI_DMAError+0x58>
  {
    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8009732:	68fb      	ldr	r3, [r7, #12]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	681a      	ldr	r2, [r3, #0]
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8009740:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    SAI_Disable(hsai);
 8009742:	68f8      	ldr	r0, [r7, #12]
 8009744:	f7ff ff66 	bl	8009614 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8009748:	68fb      	ldr	r3, [r7, #12]
 800974a:	2201      	movs	r2, #1
 800974c:	f883 2081 	strb.w	r2, [r3, #129]	; 0x81

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	2200      	movs	r2, #0
 8009754:	f8a3 206e 	strh.w	r2, [r3, #110]	; 0x6e
  }
  /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->ErrorCallback(hsai);
#else
  HAL_SAI_ErrorCallback(hsai);
 8009758:	68f8      	ldr	r0, [r7, #12]
 800975a:	f7ff fded 	bl	8009338 <HAL_SAI_ErrorCallback>
#endif /* USE_HAL_SAI_REGISTER_CALLBACKS */
}
 800975e:	bf00      	nop
 8009760:	3710      	adds	r7, #16
 8009762:	46bd      	mov	sp, r7
 8009764:	bd80      	pop	{r7, pc}
	...

08009768 <SAI_BlockSynchroConfig>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *               the configuration information for SAI module.
  * @retval SAI Clock Input
  */
void SAI_BlockSynchroConfig(SAI_HandleTypeDef *hsai)
{
 8009768:	b480      	push	{r7}
 800976a:	b085      	sub	sp, #20
 800976c:	af00      	add	r7, sp, #0
 800976e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregisterGCR;

#if defined(STM32F446xx)
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b02      	cmp	r3, #2
 8009776:	d00c      	beq.n	8009792 <SAI_BlockSynchroConfig+0x2a>
 8009778:	2b02      	cmp	r3, #2
 800977a:	d80d      	bhi.n	8009798 <SAI_BlockSynchroConfig+0x30>
 800977c:	2b00      	cmp	r3, #0
 800977e:	d002      	beq.n	8009786 <SAI_BlockSynchroConfig+0x1e>
 8009780:	2b01      	cmp	r3, #1
 8009782:	d003      	beq.n	800978c <SAI_BlockSynchroConfig+0x24>
 8009784:	e008      	b.n	8009798 <SAI_BlockSynchroConfig+0x30>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0U;
 8009786:	2300      	movs	r3, #0
 8009788:	60fb      	str	r3, [r7, #12]
      break;
 800978a:	e008      	b.n	800979e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800978c:	2310      	movs	r3, #16
 800978e:	60fb      	str	r3, [r7, #12]
      break;
 8009790:	e005      	b.n	800979e <SAI_BlockSynchroConfig+0x36>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8009792:	2320      	movs	r3, #32
 8009794:	60fb      	str	r3, [r7, #12]
      break;
 8009796:	e002      	b.n	800979e <SAI_BlockSynchroConfig+0x36>
    default:
      tmpregisterGCR = 0U;
 8009798:	2300      	movs	r3, #0
 800979a:	60fb      	str	r3, [r7, #12]
      break;
 800979c:	bf00      	nop
  }

  if ((hsai->Init.Synchro) == SAI_SYNCHRONOUS_EXT_SAI2)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	689b      	ldr	r3, [r3, #8]
 80097a2:	2b03      	cmp	r3, #3
 80097a4:	d103      	bne.n	80097ae <SAI_BlockSynchroConfig+0x46>
  {
    tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	f043 0301 	orr.w	r3, r3, #1
 80097ac:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a0b      	ldr	r2, [pc, #44]	; (80097e0 <SAI_BlockSynchroConfig+0x78>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d004      	beq.n	80097c2 <SAI_BlockSynchroConfig+0x5a>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a09      	ldr	r2, [pc, #36]	; (80097e4 <SAI_BlockSynchroConfig+0x7c>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d103      	bne.n	80097ca <SAI_BlockSynchroConfig+0x62>
  {
    SAI1->GCR = tmpregisterGCR;
 80097c2:	4a09      	ldr	r2, [pc, #36]	; (80097e8 <SAI_BlockSynchroConfig+0x80>)
 80097c4:	68fb      	ldr	r3, [r7, #12]
 80097c6:	6013      	str	r3, [r2, #0]
 80097c8:	e003      	b.n	80097d2 <SAI_BlockSynchroConfig+0x6a>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 80097ca:	4a08      	ldr	r2, [pc, #32]	; (80097ec <SAI_BlockSynchroConfig+0x84>)
 80097cc:	68fb      	ldr	r3, [r7, #12]
 80097ce:	6013      	str	r3, [r2, #0]
      tmpregisterGCR = 0U;
      break;
  }
  SAI1->GCR = tmpregisterGCR;
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
}
 80097d0:	bf00      	nop
 80097d2:	bf00      	nop
 80097d4:	3714      	adds	r7, #20
 80097d6:	46bd      	mov	sp, r7
 80097d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097dc:	4770      	bx	lr
 80097de:	bf00      	nop
 80097e0:	40015804 	.word	0x40015804
 80097e4:	40015824 	.word	0x40015824
 80097e8:	40015800 	.word	0x40015800
 80097ec:	40015c00 	.word	0x40015c00

080097f0 <SAI_GetInputClock>:
* @param  hsai pointer to a SAI_HandleTypeDef structure that contains
*               the configuration information for SAI module.
* @retval SAI Clock Input
*/
uint32_t SAI_GetInputClock(SAI_HandleTypeDef *hsai)
{
 80097f0:	b580      	push	{r7, lr}
 80097f2:	b084      	sub	sp, #16
 80097f4:	af00      	add	r7, sp, #0
 80097f6:	6078      	str	r0, [r7, #4]
  /* This variable used to store the SAI_CK_x (value in Hz) */
  uint32_t saiclocksource = 0U;
 80097f8:	2300      	movs	r3, #0
 80097fa:	60fb      	str	r3, [r7, #12]

#if defined(STM32F446xx)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	681b      	ldr	r3, [r3, #0]
 8009800:	4a0a      	ldr	r2, [pc, #40]	; (800982c <SAI_GetInputClock+0x3c>)
 8009802:	4293      	cmp	r3, r2
 8009804:	d004      	beq.n	8009810 <SAI_GetInputClock+0x20>
 8009806:	687b      	ldr	r3, [r7, #4]
 8009808:	681b      	ldr	r3, [r3, #0]
 800980a:	4a09      	ldr	r2, [pc, #36]	; (8009830 <SAI_GetInputClock+0x40>)
 800980c:	4293      	cmp	r3, r2
 800980e:	d104      	bne.n	800981a <SAI_GetInputClock+0x2a>
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8009810:	2004      	movs	r0, #4
 8009812:	f7fe fc9b 	bl	800814c <HAL_RCCEx_GetPeriphCLKFreq>
 8009816:	60f8      	str	r0, [r7, #12]
 8009818:	e003      	b.n	8009822 <SAI_GetInputClock+0x32>
  }
  else /* SAI2_Block_A || SAI2_Block_B*/
  {
    saiclocksource = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800981a:	2008      	movs	r0, #8
 800981c:	f7fe fc96 	bl	800814c <HAL_RCCEx_GetPeriphCLKFreq>
 8009820:	60f8      	str	r0, [r7, #12]
    saiclocksource = EXTERNAL_CLOCK_VALUE;
  }
#endif /* STM32F413xx || STM32F423xx */
#endif /* STM32F427xx || STM32F437xx || STM32F429xx || STM32F439xx || STM32F469xx || STM32F479xx || STM32F413xx || STM32F423xx */
  /* the return result is the value of SAI clock */
  return saiclocksource;
 8009822:	68fb      	ldr	r3, [r7, #12]
}
 8009824:	4618      	mov	r0, r3
 8009826:	3710      	adds	r7, #16
 8009828:	46bd      	mov	sp, r7
 800982a:	bd80      	pop	{r7, pc}
 800982c:	40015804 	.word	0x40015804
 8009830:	40015824 	.word	0x40015824

08009834 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009834:	b580      	push	{r7, lr}
 8009836:	b082      	sub	sp, #8
 8009838:	af00      	add	r7, sp, #0
 800983a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800983c:	687b      	ldr	r3, [r7, #4]
 800983e:	2b00      	cmp	r3, #0
 8009840:	d101      	bne.n	8009846 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009842:	2301      	movs	r3, #1
 8009844:	e03f      	b.n	80098c6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800984c:	b2db      	uxtb	r3, r3
 800984e:	2b00      	cmp	r3, #0
 8009850:	d106      	bne.n	8009860 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	2200      	movs	r2, #0
 8009856:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800985a:	6878      	ldr	r0, [r7, #4]
 800985c:	f7fc fefa 	bl	8006654 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2224      	movs	r2, #36	; 0x24
 8009864:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	68da      	ldr	r2, [r3, #12]
 800986e:	687b      	ldr	r3, [r7, #4]
 8009870:	681b      	ldr	r3, [r3, #0]
 8009872:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009876:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009878:	6878      	ldr	r0, [r7, #4]
 800987a:	f000 f905 	bl	8009a88 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800987e:	687b      	ldr	r3, [r7, #4]
 8009880:	681b      	ldr	r3, [r3, #0]
 8009882:	691a      	ldr	r2, [r3, #16]
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800988c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	681b      	ldr	r3, [r3, #0]
 8009892:	695a      	ldr	r2, [r3, #20]
 8009894:	687b      	ldr	r3, [r7, #4]
 8009896:	681b      	ldr	r3, [r3, #0]
 8009898:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800989c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800989e:	687b      	ldr	r3, [r7, #4]
 80098a0:	681b      	ldr	r3, [r3, #0]
 80098a2:	68da      	ldr	r2, [r3, #12]
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80098ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	2200      	movs	r2, #0
 80098b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80098b4:	687b      	ldr	r3, [r7, #4]
 80098b6:	2220      	movs	r2, #32
 80098b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	2220      	movs	r2, #32
 80098c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80098c4:	2300      	movs	r3, #0
}
 80098c6:	4618      	mov	r0, r3
 80098c8:	3708      	adds	r7, #8
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}

080098ce <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80098ce:	b580      	push	{r7, lr}
 80098d0:	b08a      	sub	sp, #40	; 0x28
 80098d2:	af02      	add	r7, sp, #8
 80098d4:	60f8      	str	r0, [r7, #12]
 80098d6:	60b9      	str	r1, [r7, #8]
 80098d8:	603b      	str	r3, [r7, #0]
 80098da:	4613      	mov	r3, r2
 80098dc:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80098de:	2300      	movs	r3, #0
 80098e0:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80098e2:	68fb      	ldr	r3, [r7, #12]
 80098e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80098e8:	b2db      	uxtb	r3, r3
 80098ea:	2b20      	cmp	r3, #32
 80098ec:	d17c      	bne.n	80099e8 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80098ee:	68bb      	ldr	r3, [r7, #8]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d002      	beq.n	80098fa <HAL_UART_Transmit+0x2c>
 80098f4:	88fb      	ldrh	r3, [r7, #6]
 80098f6:	2b00      	cmp	r3, #0
 80098f8:	d101      	bne.n	80098fe <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	e075      	b.n	80099ea <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009904:	2b01      	cmp	r3, #1
 8009906:	d101      	bne.n	800990c <HAL_UART_Transmit+0x3e>
 8009908:	2302      	movs	r3, #2
 800990a:	e06e      	b.n	80099ea <HAL_UART_Transmit+0x11c>
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	2201      	movs	r2, #1
 8009910:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	2200      	movs	r2, #0
 8009918:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	2221      	movs	r2, #33	; 0x21
 800991e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009922:	f7fd f907 	bl	8006b34 <HAL_GetTick>
 8009926:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	88fa      	ldrh	r2, [r7, #6]
 800992c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800992e:	68fb      	ldr	r3, [r7, #12]
 8009930:	88fa      	ldrh	r2, [r7, #6]
 8009932:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009934:	68fb      	ldr	r3, [r7, #12]
 8009936:	689b      	ldr	r3, [r3, #8]
 8009938:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800993c:	d108      	bne.n	8009950 <HAL_UART_Transmit+0x82>
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	691b      	ldr	r3, [r3, #16]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d104      	bne.n	8009950 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009946:	2300      	movs	r3, #0
 8009948:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800994a:	68bb      	ldr	r3, [r7, #8]
 800994c:	61bb      	str	r3, [r7, #24]
 800994e:	e003      	b.n	8009958 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009954:	2300      	movs	r3, #0
 8009956:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009958:	68fb      	ldr	r3, [r7, #12]
 800995a:	2200      	movs	r2, #0
 800995c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009960:	e02a      	b.n	80099b8 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009962:	683b      	ldr	r3, [r7, #0]
 8009964:	9300      	str	r3, [sp, #0]
 8009966:	697b      	ldr	r3, [r7, #20]
 8009968:	2200      	movs	r2, #0
 800996a:	2180      	movs	r1, #128	; 0x80
 800996c:	68f8      	ldr	r0, [r7, #12]
 800996e:	f000 f840 	bl	80099f2 <UART_WaitOnFlagUntilTimeout>
 8009972:	4603      	mov	r3, r0
 8009974:	2b00      	cmp	r3, #0
 8009976:	d001      	beq.n	800997c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009978:	2303      	movs	r3, #3
 800997a:	e036      	b.n	80099ea <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800997c:	69fb      	ldr	r3, [r7, #28]
 800997e:	2b00      	cmp	r3, #0
 8009980:	d10b      	bne.n	800999a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009982:	69bb      	ldr	r3, [r7, #24]
 8009984:	881b      	ldrh	r3, [r3, #0]
 8009986:	461a      	mov	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009990:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009992:	69bb      	ldr	r3, [r7, #24]
 8009994:	3302      	adds	r3, #2
 8009996:	61bb      	str	r3, [r7, #24]
 8009998:	e007      	b.n	80099aa <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800999a:	69fb      	ldr	r3, [r7, #28]
 800999c:	781a      	ldrb	r2, [r3, #0]
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80099a4:	69fb      	ldr	r3, [r7, #28]
 80099a6:	3301      	adds	r3, #1
 80099a8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099ae:	b29b      	uxth	r3, r3
 80099b0:	3b01      	subs	r3, #1
 80099b2:	b29a      	uxth	r2, r3
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80099bc:	b29b      	uxth	r3, r3
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d1cf      	bne.n	8009962 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80099c2:	683b      	ldr	r3, [r7, #0]
 80099c4:	9300      	str	r3, [sp, #0]
 80099c6:	697b      	ldr	r3, [r7, #20]
 80099c8:	2200      	movs	r2, #0
 80099ca:	2140      	movs	r1, #64	; 0x40
 80099cc:	68f8      	ldr	r0, [r7, #12]
 80099ce:	f000 f810 	bl	80099f2 <UART_WaitOnFlagUntilTimeout>
 80099d2:	4603      	mov	r3, r0
 80099d4:	2b00      	cmp	r3, #0
 80099d6:	d001      	beq.n	80099dc <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80099d8:	2303      	movs	r3, #3
 80099da:	e006      	b.n	80099ea <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80099dc:	68fb      	ldr	r3, [r7, #12]
 80099de:	2220      	movs	r2, #32
 80099e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80099e4:	2300      	movs	r3, #0
 80099e6:	e000      	b.n	80099ea <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80099e8:	2302      	movs	r3, #2
  }
}
 80099ea:	4618      	mov	r0, r3
 80099ec:	3720      	adds	r7, #32
 80099ee:	46bd      	mov	sp, r7
 80099f0:	bd80      	pop	{r7, pc}

080099f2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80099f2:	b580      	push	{r7, lr}
 80099f4:	b084      	sub	sp, #16
 80099f6:	af00      	add	r7, sp, #0
 80099f8:	60f8      	str	r0, [r7, #12]
 80099fa:	60b9      	str	r1, [r7, #8]
 80099fc:	603b      	str	r3, [r7, #0]
 80099fe:	4613      	mov	r3, r2
 8009a00:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a02:	e02c      	b.n	8009a5e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009a04:	69bb      	ldr	r3, [r7, #24]
 8009a06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a0a:	d028      	beq.n	8009a5e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8009a0c:	69bb      	ldr	r3, [r7, #24]
 8009a0e:	2b00      	cmp	r3, #0
 8009a10:	d007      	beq.n	8009a22 <UART_WaitOnFlagUntilTimeout+0x30>
 8009a12:	f7fd f88f 	bl	8006b34 <HAL_GetTick>
 8009a16:	4602      	mov	r2, r0
 8009a18:	683b      	ldr	r3, [r7, #0]
 8009a1a:	1ad3      	subs	r3, r2, r3
 8009a1c:	69ba      	ldr	r2, [r7, #24]
 8009a1e:	429a      	cmp	r2, r3
 8009a20:	d21d      	bcs.n	8009a5e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	68da      	ldr	r2, [r3, #12]
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8009a30:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009a32:	68fb      	ldr	r3, [r7, #12]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	695a      	ldr	r2, [r3, #20]
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f022 0201 	bic.w	r2, r2, #1
 8009a40:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	2220      	movs	r2, #32
 8009a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	2220      	movs	r2, #32
 8009a4e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009a52:	68fb      	ldr	r3, [r7, #12]
 8009a54:	2200      	movs	r2, #0
 8009a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8009a5a:	2303      	movs	r3, #3
 8009a5c:	e00f      	b.n	8009a7e <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	681a      	ldr	r2, [r3, #0]
 8009a64:	68bb      	ldr	r3, [r7, #8]
 8009a66:	4013      	ands	r3, r2
 8009a68:	68ba      	ldr	r2, [r7, #8]
 8009a6a:	429a      	cmp	r2, r3
 8009a6c:	bf0c      	ite	eq
 8009a6e:	2301      	moveq	r3, #1
 8009a70:	2300      	movne	r3, #0
 8009a72:	b2db      	uxtb	r3, r3
 8009a74:	461a      	mov	r2, r3
 8009a76:	79fb      	ldrb	r3, [r7, #7]
 8009a78:	429a      	cmp	r2, r3
 8009a7a:	d0c3      	beq.n	8009a04 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8009a7c:	2300      	movs	r3, #0
}
 8009a7e:	4618      	mov	r0, r3
 8009a80:	3710      	adds	r7, #16
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
	...

08009a88 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a8c:	b09f      	sub	sp, #124	; 0x7c
 8009a8e:	af00      	add	r7, sp, #0
 8009a90:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	691b      	ldr	r3, [r3, #16]
 8009a98:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009a9e:	68d9      	ldr	r1, [r3, #12]
 8009aa0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	ea40 0301 	orr.w	r3, r0, r1
 8009aa8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009aaa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aac:	689a      	ldr	r2, [r3, #8]
 8009aae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab0:	691b      	ldr	r3, [r3, #16]
 8009ab2:	431a      	orrs	r2, r3
 8009ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ab6:	695b      	ldr	r3, [r3, #20]
 8009ab8:	431a      	orrs	r2, r3
 8009aba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009abc:	69db      	ldr	r3, [r3, #28]
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8009ac2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	68db      	ldr	r3, [r3, #12]
 8009ac8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009acc:	f021 010c 	bic.w	r1, r1, #12
 8009ad0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ad2:	681a      	ldr	r2, [r3, #0]
 8009ad4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009ad6:	430b      	orrs	r3, r1
 8009ad8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009adc:	681b      	ldr	r3, [r3, #0]
 8009ade:	695b      	ldr	r3, [r3, #20]
 8009ae0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009ae4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009ae6:	6999      	ldr	r1, [r3, #24]
 8009ae8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009aea:	681a      	ldr	r2, [r3, #0]
 8009aec:	ea40 0301 	orr.w	r3, r0, r1
 8009af0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009af2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009af4:	681a      	ldr	r2, [r3, #0]
 8009af6:	4bc5      	ldr	r3, [pc, #788]	; (8009e0c <UART_SetConfig+0x384>)
 8009af8:	429a      	cmp	r2, r3
 8009afa:	d004      	beq.n	8009b06 <UART_SetConfig+0x7e>
 8009afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009afe:	681a      	ldr	r2, [r3, #0]
 8009b00:	4bc3      	ldr	r3, [pc, #780]	; (8009e10 <UART_SetConfig+0x388>)
 8009b02:	429a      	cmp	r2, r3
 8009b04:	d103      	bne.n	8009b0e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009b06:	f7fd ffe3 	bl	8007ad0 <HAL_RCC_GetPCLK2Freq>
 8009b0a:	6778      	str	r0, [r7, #116]	; 0x74
 8009b0c:	e002      	b.n	8009b14 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009b0e:	f7fd ffcb 	bl	8007aa8 <HAL_RCC_GetPCLK1Freq>
 8009b12:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009b14:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b16:	69db      	ldr	r3, [r3, #28]
 8009b18:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009b1c:	f040 80b6 	bne.w	8009c8c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009b20:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b22:	461c      	mov	r4, r3
 8009b24:	f04f 0500 	mov.w	r5, #0
 8009b28:	4622      	mov	r2, r4
 8009b2a:	462b      	mov	r3, r5
 8009b2c:	1891      	adds	r1, r2, r2
 8009b2e:	6439      	str	r1, [r7, #64]	; 0x40
 8009b30:	415b      	adcs	r3, r3
 8009b32:	647b      	str	r3, [r7, #68]	; 0x44
 8009b34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b38:	1912      	adds	r2, r2, r4
 8009b3a:	eb45 0303 	adc.w	r3, r5, r3
 8009b3e:	f04f 0000 	mov.w	r0, #0
 8009b42:	f04f 0100 	mov.w	r1, #0
 8009b46:	00d9      	lsls	r1, r3, #3
 8009b48:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009b4c:	00d0      	lsls	r0, r2, #3
 8009b4e:	4602      	mov	r2, r0
 8009b50:	460b      	mov	r3, r1
 8009b52:	1911      	adds	r1, r2, r4
 8009b54:	6639      	str	r1, [r7, #96]	; 0x60
 8009b56:	416b      	adcs	r3, r5
 8009b58:	667b      	str	r3, [r7, #100]	; 0x64
 8009b5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009b5c:	685b      	ldr	r3, [r3, #4]
 8009b5e:	461a      	mov	r2, r3
 8009b60:	f04f 0300 	mov.w	r3, #0
 8009b64:	1891      	adds	r1, r2, r2
 8009b66:	63b9      	str	r1, [r7, #56]	; 0x38
 8009b68:	415b      	adcs	r3, r3
 8009b6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b6c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009b70:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009b74:	f7f7 f8a8 	bl	8000cc8 <__aeabi_uldivmod>
 8009b78:	4602      	mov	r2, r0
 8009b7a:	460b      	mov	r3, r1
 8009b7c:	4ba5      	ldr	r3, [pc, #660]	; (8009e14 <UART_SetConfig+0x38c>)
 8009b7e:	fba3 2302 	umull	r2, r3, r3, r2
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	011e      	lsls	r6, r3, #4
 8009b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009b88:	461c      	mov	r4, r3
 8009b8a:	f04f 0500 	mov.w	r5, #0
 8009b8e:	4622      	mov	r2, r4
 8009b90:	462b      	mov	r3, r5
 8009b92:	1891      	adds	r1, r2, r2
 8009b94:	6339      	str	r1, [r7, #48]	; 0x30
 8009b96:	415b      	adcs	r3, r3
 8009b98:	637b      	str	r3, [r7, #52]	; 0x34
 8009b9a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8009b9e:	1912      	adds	r2, r2, r4
 8009ba0:	eb45 0303 	adc.w	r3, r5, r3
 8009ba4:	f04f 0000 	mov.w	r0, #0
 8009ba8:	f04f 0100 	mov.w	r1, #0
 8009bac:	00d9      	lsls	r1, r3, #3
 8009bae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009bb2:	00d0      	lsls	r0, r2, #3
 8009bb4:	4602      	mov	r2, r0
 8009bb6:	460b      	mov	r3, r1
 8009bb8:	1911      	adds	r1, r2, r4
 8009bba:	65b9      	str	r1, [r7, #88]	; 0x58
 8009bbc:	416b      	adcs	r3, r5
 8009bbe:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009bc2:	685b      	ldr	r3, [r3, #4]
 8009bc4:	461a      	mov	r2, r3
 8009bc6:	f04f 0300 	mov.w	r3, #0
 8009bca:	1891      	adds	r1, r2, r2
 8009bcc:	62b9      	str	r1, [r7, #40]	; 0x28
 8009bce:	415b      	adcs	r3, r3
 8009bd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009bd2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009bd6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8009bda:	f7f7 f875 	bl	8000cc8 <__aeabi_uldivmod>
 8009bde:	4602      	mov	r2, r0
 8009be0:	460b      	mov	r3, r1
 8009be2:	4b8c      	ldr	r3, [pc, #560]	; (8009e14 <UART_SetConfig+0x38c>)
 8009be4:	fba3 1302 	umull	r1, r3, r3, r2
 8009be8:	095b      	lsrs	r3, r3, #5
 8009bea:	2164      	movs	r1, #100	; 0x64
 8009bec:	fb01 f303 	mul.w	r3, r1, r3
 8009bf0:	1ad3      	subs	r3, r2, r3
 8009bf2:	00db      	lsls	r3, r3, #3
 8009bf4:	3332      	adds	r3, #50	; 0x32
 8009bf6:	4a87      	ldr	r2, [pc, #540]	; (8009e14 <UART_SetConfig+0x38c>)
 8009bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8009bfc:	095b      	lsrs	r3, r3, #5
 8009bfe:	005b      	lsls	r3, r3, #1
 8009c00:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c04:	441e      	add	r6, r3
 8009c06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c08:	4618      	mov	r0, r3
 8009c0a:	f04f 0100 	mov.w	r1, #0
 8009c0e:	4602      	mov	r2, r0
 8009c10:	460b      	mov	r3, r1
 8009c12:	1894      	adds	r4, r2, r2
 8009c14:	623c      	str	r4, [r7, #32]
 8009c16:	415b      	adcs	r3, r3
 8009c18:	627b      	str	r3, [r7, #36]	; 0x24
 8009c1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c1e:	1812      	adds	r2, r2, r0
 8009c20:	eb41 0303 	adc.w	r3, r1, r3
 8009c24:	f04f 0400 	mov.w	r4, #0
 8009c28:	f04f 0500 	mov.w	r5, #0
 8009c2c:	00dd      	lsls	r5, r3, #3
 8009c2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009c32:	00d4      	lsls	r4, r2, #3
 8009c34:	4622      	mov	r2, r4
 8009c36:	462b      	mov	r3, r5
 8009c38:	1814      	adds	r4, r2, r0
 8009c3a:	653c      	str	r4, [r7, #80]	; 0x50
 8009c3c:	414b      	adcs	r3, r1
 8009c3e:	657b      	str	r3, [r7, #84]	; 0x54
 8009c40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c42:	685b      	ldr	r3, [r3, #4]
 8009c44:	461a      	mov	r2, r3
 8009c46:	f04f 0300 	mov.w	r3, #0
 8009c4a:	1891      	adds	r1, r2, r2
 8009c4c:	61b9      	str	r1, [r7, #24]
 8009c4e:	415b      	adcs	r3, r3
 8009c50:	61fb      	str	r3, [r7, #28]
 8009c52:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009c56:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8009c5a:	f7f7 f835 	bl	8000cc8 <__aeabi_uldivmod>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	460b      	mov	r3, r1
 8009c62:	4b6c      	ldr	r3, [pc, #432]	; (8009e14 <UART_SetConfig+0x38c>)
 8009c64:	fba3 1302 	umull	r1, r3, r3, r2
 8009c68:	095b      	lsrs	r3, r3, #5
 8009c6a:	2164      	movs	r1, #100	; 0x64
 8009c6c:	fb01 f303 	mul.w	r3, r1, r3
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	00db      	lsls	r3, r3, #3
 8009c74:	3332      	adds	r3, #50	; 0x32
 8009c76:	4a67      	ldr	r2, [pc, #412]	; (8009e14 <UART_SetConfig+0x38c>)
 8009c78:	fba2 2303 	umull	r2, r3, r2, r3
 8009c7c:	095b      	lsrs	r3, r3, #5
 8009c7e:	f003 0207 	and.w	r2, r3, #7
 8009c82:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009c84:	681b      	ldr	r3, [r3, #0]
 8009c86:	4432      	add	r2, r6
 8009c88:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c8a:	e0b9      	b.n	8009e00 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009c8e:	461c      	mov	r4, r3
 8009c90:	f04f 0500 	mov.w	r5, #0
 8009c94:	4622      	mov	r2, r4
 8009c96:	462b      	mov	r3, r5
 8009c98:	1891      	adds	r1, r2, r2
 8009c9a:	6139      	str	r1, [r7, #16]
 8009c9c:	415b      	adcs	r3, r3
 8009c9e:	617b      	str	r3, [r7, #20]
 8009ca0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009ca4:	1912      	adds	r2, r2, r4
 8009ca6:	eb45 0303 	adc.w	r3, r5, r3
 8009caa:	f04f 0000 	mov.w	r0, #0
 8009cae:	f04f 0100 	mov.w	r1, #0
 8009cb2:	00d9      	lsls	r1, r3, #3
 8009cb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009cb8:	00d0      	lsls	r0, r2, #3
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	eb12 0804 	adds.w	r8, r2, r4
 8009cc2:	eb43 0905 	adc.w	r9, r3, r5
 8009cc6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009cc8:	685b      	ldr	r3, [r3, #4]
 8009cca:	4618      	mov	r0, r3
 8009ccc:	f04f 0100 	mov.w	r1, #0
 8009cd0:	f04f 0200 	mov.w	r2, #0
 8009cd4:	f04f 0300 	mov.w	r3, #0
 8009cd8:	008b      	lsls	r3, r1, #2
 8009cda:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009cde:	0082      	lsls	r2, r0, #2
 8009ce0:	4640      	mov	r0, r8
 8009ce2:	4649      	mov	r1, r9
 8009ce4:	f7f6 fff0 	bl	8000cc8 <__aeabi_uldivmod>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4b49      	ldr	r3, [pc, #292]	; (8009e14 <UART_SetConfig+0x38c>)
 8009cee:	fba3 2302 	umull	r2, r3, r3, r2
 8009cf2:	095b      	lsrs	r3, r3, #5
 8009cf4:	011e      	lsls	r6, r3, #4
 8009cf6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009cf8:	4618      	mov	r0, r3
 8009cfa:	f04f 0100 	mov.w	r1, #0
 8009cfe:	4602      	mov	r2, r0
 8009d00:	460b      	mov	r3, r1
 8009d02:	1894      	adds	r4, r2, r2
 8009d04:	60bc      	str	r4, [r7, #8]
 8009d06:	415b      	adcs	r3, r3
 8009d08:	60fb      	str	r3, [r7, #12]
 8009d0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009d0e:	1812      	adds	r2, r2, r0
 8009d10:	eb41 0303 	adc.w	r3, r1, r3
 8009d14:	f04f 0400 	mov.w	r4, #0
 8009d18:	f04f 0500 	mov.w	r5, #0
 8009d1c:	00dd      	lsls	r5, r3, #3
 8009d1e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009d22:	00d4      	lsls	r4, r2, #3
 8009d24:	4622      	mov	r2, r4
 8009d26:	462b      	mov	r3, r5
 8009d28:	1814      	adds	r4, r2, r0
 8009d2a:	64bc      	str	r4, [r7, #72]	; 0x48
 8009d2c:	414b      	adcs	r3, r1
 8009d2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009d30:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d32:	685b      	ldr	r3, [r3, #4]
 8009d34:	4618      	mov	r0, r3
 8009d36:	f04f 0100 	mov.w	r1, #0
 8009d3a:	f04f 0200 	mov.w	r2, #0
 8009d3e:	f04f 0300 	mov.w	r3, #0
 8009d42:	008b      	lsls	r3, r1, #2
 8009d44:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009d48:	0082      	lsls	r2, r0, #2
 8009d4a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8009d4e:	f7f6 ffbb 	bl	8000cc8 <__aeabi_uldivmod>
 8009d52:	4602      	mov	r2, r0
 8009d54:	460b      	mov	r3, r1
 8009d56:	4b2f      	ldr	r3, [pc, #188]	; (8009e14 <UART_SetConfig+0x38c>)
 8009d58:	fba3 1302 	umull	r1, r3, r3, r2
 8009d5c:	095b      	lsrs	r3, r3, #5
 8009d5e:	2164      	movs	r1, #100	; 0x64
 8009d60:	fb01 f303 	mul.w	r3, r1, r3
 8009d64:	1ad3      	subs	r3, r2, r3
 8009d66:	011b      	lsls	r3, r3, #4
 8009d68:	3332      	adds	r3, #50	; 0x32
 8009d6a:	4a2a      	ldr	r2, [pc, #168]	; (8009e14 <UART_SetConfig+0x38c>)
 8009d6c:	fba2 2303 	umull	r2, r3, r2, r3
 8009d70:	095b      	lsrs	r3, r3, #5
 8009d72:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009d76:	441e      	add	r6, r3
 8009d78:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009d7a:	4618      	mov	r0, r3
 8009d7c:	f04f 0100 	mov.w	r1, #0
 8009d80:	4602      	mov	r2, r0
 8009d82:	460b      	mov	r3, r1
 8009d84:	1894      	adds	r4, r2, r2
 8009d86:	603c      	str	r4, [r7, #0]
 8009d88:	415b      	adcs	r3, r3
 8009d8a:	607b      	str	r3, [r7, #4]
 8009d8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d90:	1812      	adds	r2, r2, r0
 8009d92:	eb41 0303 	adc.w	r3, r1, r3
 8009d96:	f04f 0400 	mov.w	r4, #0
 8009d9a:	f04f 0500 	mov.w	r5, #0
 8009d9e:	00dd      	lsls	r5, r3, #3
 8009da0:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009da4:	00d4      	lsls	r4, r2, #3
 8009da6:	4622      	mov	r2, r4
 8009da8:	462b      	mov	r3, r5
 8009daa:	eb12 0a00 	adds.w	sl, r2, r0
 8009dae:	eb43 0b01 	adc.w	fp, r3, r1
 8009db2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009db4:	685b      	ldr	r3, [r3, #4]
 8009db6:	4618      	mov	r0, r3
 8009db8:	f04f 0100 	mov.w	r1, #0
 8009dbc:	f04f 0200 	mov.w	r2, #0
 8009dc0:	f04f 0300 	mov.w	r3, #0
 8009dc4:	008b      	lsls	r3, r1, #2
 8009dc6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009dca:	0082      	lsls	r2, r0, #2
 8009dcc:	4650      	mov	r0, sl
 8009dce:	4659      	mov	r1, fp
 8009dd0:	f7f6 ff7a 	bl	8000cc8 <__aeabi_uldivmod>
 8009dd4:	4602      	mov	r2, r0
 8009dd6:	460b      	mov	r3, r1
 8009dd8:	4b0e      	ldr	r3, [pc, #56]	; (8009e14 <UART_SetConfig+0x38c>)
 8009dda:	fba3 1302 	umull	r1, r3, r3, r2
 8009dde:	095b      	lsrs	r3, r3, #5
 8009de0:	2164      	movs	r1, #100	; 0x64
 8009de2:	fb01 f303 	mul.w	r3, r1, r3
 8009de6:	1ad3      	subs	r3, r2, r3
 8009de8:	011b      	lsls	r3, r3, #4
 8009dea:	3332      	adds	r3, #50	; 0x32
 8009dec:	4a09      	ldr	r2, [pc, #36]	; (8009e14 <UART_SetConfig+0x38c>)
 8009dee:	fba2 2303 	umull	r2, r3, r2, r3
 8009df2:	095b      	lsrs	r3, r3, #5
 8009df4:	f003 020f 	and.w	r2, r3, #15
 8009df8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4432      	add	r2, r6
 8009dfe:	609a      	str	r2, [r3, #8]
}
 8009e00:	bf00      	nop
 8009e02:	377c      	adds	r7, #124	; 0x7c
 8009e04:	46bd      	mov	sp, r7
 8009e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e0a:	bf00      	nop
 8009e0c:	40011000 	.word	0x40011000
 8009e10:	40011400 	.word	0x40011400
 8009e14:	51eb851f 	.word	0x51eb851f

08009e18 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  const float32_t * pSrcA,
  const float32_t * pSrcB,
        uint32_t blockSize,
        float32_t * result)
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b087      	sub	sp, #28
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	60f8      	str	r0, [r7, #12]
 8009e20:	60b9      	str	r1, [r7, #8]
 8009e22:	607a      	str	r2, [r7, #4]
 8009e24:	603b      	str	r3, [r7, #0]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary return variable */
 8009e26:	f04f 0300 	mov.w	r3, #0
 8009e2a:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */
#endif /* #if defined(ARM_MATH_NEON) */

  while (blkCnt > 0U)
 8009e30:	e014      	b.n	8009e5c <arm_dot_prod_f32+0x44>
  {
    /* C = A[0]* B[0] + A[1]* B[1] + A[2]* B[2] + .....+ A[blockSize-1]* B[blockSize-1] */

    /* Calculate dot product and store result in a temporary buffer. */
    sum += (*pSrcA++) * (*pSrcB++);
 8009e32:	68fb      	ldr	r3, [r7, #12]
 8009e34:	1d1a      	adds	r2, r3, #4
 8009e36:	60fa      	str	r2, [r7, #12]
 8009e38:	ed93 7a00 	vldr	s14, [r3]
 8009e3c:	68bb      	ldr	r3, [r7, #8]
 8009e3e:	1d1a      	adds	r2, r3, #4
 8009e40:	60ba      	str	r2, [r7, #8]
 8009e42:	edd3 7a00 	vldr	s15, [r3]
 8009e46:	ee67 7a27 	vmul.f32	s15, s14, s15
 8009e4a:	ed97 7a04 	vldr	s14, [r7, #16]
 8009e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009e52:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8009e56:	697b      	ldr	r3, [r7, #20]
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8009e5c:	697b      	ldr	r3, [r7, #20]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d1e7      	bne.n	8009e32 <arm_dot_prod_f32+0x1a>
  }

  /* Store result in destination buffer */
  *result = sum;
 8009e62:	683b      	ldr	r3, [r7, #0]
 8009e64:	693a      	ldr	r2, [r7, #16]
 8009e66:	601a      	str	r2, [r3, #0]
}
 8009e68:	bf00      	nop
 8009e6a:	371c      	adds	r7, #28
 8009e6c:	46bd      	mov	sp, r7
 8009e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e72:	4770      	bx	lr

08009e74 <arm_mat_trans_f32>:
}
#else
arm_status arm_mat_trans_f32(
  const arm_matrix_instance_f32 * pSrc,
        arm_matrix_instance_f32 * pDst)
{
 8009e74:	b480      	push	{r7}
 8009e76:	b08b      	sub	sp, #44	; 0x2c
 8009e78:	af00      	add	r7, sp, #0
 8009e7a:	6078      	str	r0, [r7, #4]
 8009e7c:	6039      	str	r1, [r7, #0]
  float32_t *pIn = pSrc->pData;                  /* input data matrix pointer */
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	685b      	ldr	r3, [r3, #4]
 8009e82:	627b      	str	r3, [r7, #36]	; 0x24
  float32_t *pOut = pDst->pData;                 /* output data matrix pointer */
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	685b      	ldr	r3, [r3, #4]
 8009e88:	613b      	str	r3, [r7, #16]
  float32_t *px;                                 /* Temporary output data matrix pointer */
  uint16_t nRows = pSrc->numRows;                /* number of rows */
 8009e8a:	687b      	ldr	r3, [r7, #4]
 8009e8c:	881b      	ldrh	r3, [r3, #0]
 8009e8e:	81fb      	strh	r3, [r7, #14]
  uint16_t nCols = pSrc->numCols;                /* number of columns */
 8009e90:	687b      	ldr	r3, [r7, #4]
 8009e92:	885b      	ldrh	r3, [r3, #2]
 8009e94:	81bb      	strh	r3, [r7, #12]
  uint32_t col, row = nRows, i = 0U;             /* Loop counters */
 8009e96:	89fb      	ldrh	r3, [r7, #14]
 8009e98:	61bb      	str	r3, [r7, #24]
 8009e9a:	2300      	movs	r3, #0
 8009e9c:	617b      	str	r3, [r7, #20]
    /* Matrix transpose by exchanging the rows with columns */
    /* row loop */
    do
    {
      /* Pointer px is set to starting address of column being processed */
      px = pOut + i;
 8009e9e:	697b      	ldr	r3, [r7, #20]
 8009ea0:	009b      	lsls	r3, r3, #2
 8009ea2:	693a      	ldr	r2, [r7, #16]
 8009ea4:	4413      	add	r3, r2
 8009ea6:	623b      	str	r3, [r7, #32]
      col = nCols % 0x4U;

#else

      /* Initialize col with number of samples */
      col = nCols;
 8009ea8:	89bb      	ldrh	r3, [r7, #12]
 8009eaa:	61fb      	str	r3, [r7, #28]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

      while (col > 0U)
 8009eac:	e00d      	b.n	8009eca <arm_mat_trans_f32+0x56>
      {
        /* Read and store input element in destination */
        *px = *pIn++;
 8009eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009eb0:	1d1a      	adds	r2, r3, #4
 8009eb2:	627a      	str	r2, [r7, #36]	; 0x24
 8009eb4:	681a      	ldr	r2, [r3, #0]
 8009eb6:	6a3b      	ldr	r3, [r7, #32]
 8009eb8:	601a      	str	r2, [r3, #0]

        /* Update pointer px to point to next row of transposed matrix */
        px += nRows;
 8009eba:	89fb      	ldrh	r3, [r7, #14]
 8009ebc:	009b      	lsls	r3, r3, #2
 8009ebe:	6a3a      	ldr	r2, [r7, #32]
 8009ec0:	4413      	add	r3, r2
 8009ec2:	623b      	str	r3, [r7, #32]

        /* Decrement column loop counter */
        col--;
 8009ec4:	69fb      	ldr	r3, [r7, #28]
 8009ec6:	3b01      	subs	r3, #1
 8009ec8:	61fb      	str	r3, [r7, #28]
      while (col > 0U)
 8009eca:	69fb      	ldr	r3, [r7, #28]
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d1ee      	bne.n	8009eae <arm_mat_trans_f32+0x3a>
      }

      i++;
 8009ed0:	697b      	ldr	r3, [r7, #20]
 8009ed2:	3301      	adds	r3, #1
 8009ed4:	617b      	str	r3, [r7, #20]

      /* Decrement row loop counter */
      row--;
 8009ed6:	69bb      	ldr	r3, [r7, #24]
 8009ed8:	3b01      	subs	r3, #1
 8009eda:	61bb      	str	r3, [r7, #24]

    } while (row > 0U);          /* row loop end */
 8009edc:	69bb      	ldr	r3, [r7, #24]
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d1dd      	bne.n	8009e9e <arm_mat_trans_f32+0x2a>

    /* Set status as ARM_MATH_SUCCESS */
    status = ARM_MATH_SUCCESS;
 8009ee2:	2300      	movs	r3, #0
 8009ee4:	72fb      	strb	r3, [r7, #11]
  }

  /* Return to application */
  return (status);
 8009ee6:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009eea:	4618      	mov	r0, r3
 8009eec:	372c      	adds	r7, #44	; 0x2c
 8009eee:	46bd      	mov	sp, r7
 8009ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ef4:	4770      	bx	lr

08009ef6 <arm_mean_f32>:
#else
void arm_mean_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8009ef6:	b480      	push	{r7}
 8009ef8:	b087      	sub	sp, #28
 8009efa:	af00      	add	r7, sp, #0
 8009efc:	60f8      	str	r0, [r7, #12]
 8009efe:	60b9      	str	r1, [r7, #8]
 8009f00:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8009f02:	f04f 0300 	mov.w	r3, #0
 8009f06:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8009f08:	68bb      	ldr	r3, [r7, #8]
 8009f0a:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8009f0c:	e00d      	b.n	8009f2a <arm_mean_f32+0x34>
  {
    /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) */
    sum += *pSrc++;
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	1d1a      	adds	r2, r3, #4
 8009f12:	60fa      	str	r2, [r7, #12]
 8009f14:	edd3 7a00 	vldr	s15, [r3]
 8009f18:	ed97 7a04 	vldr	s14, [r7, #16]
 8009f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f20:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Decrement loop counter */
    blkCnt--;
 8009f24:	697b      	ldr	r3, [r7, #20]
 8009f26:	3b01      	subs	r3, #1
 8009f28:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 8009f2a:	697b      	ldr	r3, [r7, #20]
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d1ee      	bne.n	8009f0e <arm_mean_f32+0x18>
  }

  /* C = (A[0] + A[1] + A[2] + ... + A[blockSize-1]) / blockSize  */
  /* Store result to destination */
  *pResult = (sum / blockSize);
 8009f30:	68bb      	ldr	r3, [r7, #8]
 8009f32:	ee07 3a90 	vmov	s15, r3
 8009f36:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009f3a:	edd7 6a04 	vldr	s13, [r7, #16]
 8009f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	edc3 7a00 	vstr	s15, [r3]
}
 8009f48:	bf00      	nop
 8009f4a:	371c      	adds	r7, #28
 8009f4c:	46bd      	mov	sp, r7
 8009f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f52:	4770      	bx	lr

08009f54 <arm_rms_f32>:
#else
void arm_rms_f32(
  const float32_t * pSrc,
        uint32_t blockSize,
        float32_t * pResult)
{
 8009f54:	b580      	push	{r7, lr}
 8009f56:	b08a      	sub	sp, #40	; 0x28
 8009f58:	af00      	add	r7, sp, #0
 8009f5a:	60f8      	str	r0, [r7, #12]
 8009f5c:	60b9      	str	r1, [r7, #8]
 8009f5e:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
        float32_t sum = 0.0f;                          /* Temporary result storage */
 8009f60:	f04f 0300 	mov.w	r3, #0
 8009f64:	623b      	str	r3, [r7, #32]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8009f66:	68bb      	ldr	r3, [r7, #8]
 8009f68:	627b      	str	r3, [r7, #36]	; 0x24

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8009f6a:	e011      	b.n	8009f90 <arm_rms_f32+0x3c>
  {
    /* C = A[0] * A[0] + A[1] * A[1] + ... + A[blockSize-1] * A[blockSize-1] */

    in = *pSrc++;
 8009f6c:	68fb      	ldr	r3, [r7, #12]
 8009f6e:	1d1a      	adds	r2, r3, #4
 8009f70:	60fa      	str	r2, [r7, #12]
 8009f72:	681b      	ldr	r3, [r3, #0]
 8009f74:	61fb      	str	r3, [r7, #28]
    /* Compute sum of squares and store result in a temporary variable. */
    sum += ( in * in);
 8009f76:	edd7 7a07 	vldr	s15, [r7, #28]
 8009f7a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8009f7e:	ed97 7a08 	vldr	s14, [r7, #32]
 8009f82:	ee77 7a27 	vadd.f32	s15, s14, s15
 8009f86:	edc7 7a08 	vstr	s15, [r7, #32]

    /* Decrement loop counter */
    blkCnt--;
 8009f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f8c:	3b01      	subs	r3, #1
 8009f8e:	627b      	str	r3, [r7, #36]	; 0x24
  while (blkCnt > 0U)
 8009f90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d1ea      	bne.n	8009f6c <arm_rms_f32+0x18>
  }

  /* Compute Rms and store result in destination */
  arm_sqrt_f32(sum / (float32_t) blockSize, pResult);
 8009f96:	68bb      	ldr	r3, [r7, #8]
 8009f98:	ee07 3a90 	vmov	s15, r3
 8009f9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8009fa0:	edd7 6a08 	vldr	s13, [r7, #32]
 8009fa4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8009fa8:	edc7 7a06 	vstr	s15, [r7, #24]
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	617b      	str	r3, [r7, #20]
    if (in >= 0.0f)
 8009fb0:	edd7 7a06 	vldr	s15, [r7, #24]
 8009fb4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8009fb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009fbc:	db09      	blt.n	8009fd2 <arm_rms_f32+0x7e>
      *pOut = sqrtf(in);
 8009fbe:	ed97 0a06 	vldr	s0, [r7, #24]
 8009fc2:	f00e fc29 	bl	8018818 <sqrtf>
 8009fc6:	eef0 7a40 	vmov.f32	s15, s0
 8009fca:	697b      	ldr	r3, [r7, #20]
 8009fcc:	edc3 7a00 	vstr	s15, [r3]
      return (ARM_MATH_SUCCESS);
 8009fd0:	e004      	b.n	8009fdc <arm_rms_f32+0x88>
      *pOut = 0.0f;
 8009fd2:	697b      	ldr	r3, [r7, #20]
 8009fd4:	f04f 0200 	mov.w	r2, #0
 8009fd8:	601a      	str	r2, [r3, #0]
      return (ARM_MATH_ARGUMENT_ERROR);
 8009fda:	bf00      	nop
}
 8009fdc:	bf00      	nop
 8009fde:	3728      	adds	r7, #40	; 0x28
 8009fe0:	46bd      	mov	sp, r7
 8009fe2:	bd80      	pop	{r7, pc}

08009fe4 <arm_q15_to_float>:
#else
void arm_q15_to_float(
  const q15_t * pSrc,
        float32_t * pDst,
        uint32_t blockSize)
{
 8009fe4:	b480      	push	{r7}
 8009fe6:	b087      	sub	sp, #28
 8009fe8:	af00      	add	r7, sp, #0
 8009fea:	60f8      	str	r0, [r7, #12]
 8009fec:	60b9      	str	r1, [r7, #8]
 8009fee:	607a      	str	r2, [r7, #4]
        uint32_t blkCnt;                               /* Loop counter */
  const q15_t *pIn = pSrc;                             /* Source pointer */
 8009ff0:	68fb      	ldr	r3, [r7, #12]
 8009ff2:	613b      	str	r3, [r7, #16]
  blkCnt = blockSize % 0x4U;

#else

  /* Initialize blkCnt with number of samples */
  blkCnt = blockSize;
 8009ff4:	687b      	ldr	r3, [r7, #4]
 8009ff6:	617b      	str	r3, [r7, #20]

#endif /* #if defined (ARM_MATH_LOOPUNROLL) */

  while (blkCnt > 0U)
 8009ff8:	e014      	b.n	800a024 <arm_q15_to_float+0x40>
  {
    /* C = (float32_t) A / 32768 */

    /* Convert from q15 to float and store result in destination buffer */
    *pDst++ = ((float32_t) *pIn++ / 32768.0f);
 8009ffa:	693b      	ldr	r3, [r7, #16]
 8009ffc:	1c9a      	adds	r2, r3, #2
 8009ffe:	613a      	str	r2, [r7, #16]
 800a000:	f9b3 3000 	ldrsh.w	r3, [r3]
 800a004:	ee07 3a90 	vmov	s15, r3
 800a008:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a00c:	68bb      	ldr	r3, [r7, #8]
 800a00e:	1d1a      	adds	r2, r3, #4
 800a010:	60ba      	str	r2, [r7, #8]
 800a012:	eddf 6a09 	vldr	s13, [pc, #36]	; 800a038 <arm_q15_to_float+0x54>
 800a016:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800a01a:	edc3 7a00 	vstr	s15, [r3]

    /* Decrement loop counter */
    blkCnt--;
 800a01e:	697b      	ldr	r3, [r7, #20]
 800a020:	3b01      	subs	r3, #1
 800a022:	617b      	str	r3, [r7, #20]
  while (blkCnt > 0U)
 800a024:	697b      	ldr	r3, [r7, #20]
 800a026:	2b00      	cmp	r3, #0
 800a028:	d1e7      	bne.n	8009ffa <arm_q15_to_float+0x16>
  }

}
 800a02a:	bf00      	nop
 800a02c:	bf00      	nop
 800a02e:	371c      	adds	r7, #28
 800a030:	46bd      	mov	sp, r7
 800a032:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a036:	4770      	bx	lr
 800a038:	47000000 	.word	0x47000000

0800a03c <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc,
  const uint16_t bitRevLen,
  const uint16_t *pBitRevTab)
{
 800a03c:	b480      	push	{r7}
 800a03e:	b089      	sub	sp, #36	; 0x24
 800a040:	af00      	add	r7, sp, #0
 800a042:	60f8      	str	r0, [r7, #12]
 800a044:	460b      	mov	r3, r1
 800a046:	607a      	str	r2, [r7, #4]
 800a048:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 800a04a:	2300      	movs	r3, #0
 800a04c:	61fb      	str	r3, [r7, #28]
 800a04e:	e043      	b.n	800a0d8 <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 800a050:	69fb      	ldr	r3, [r7, #28]
 800a052:	005b      	lsls	r3, r3, #1
 800a054:	687a      	ldr	r2, [r7, #4]
 800a056:	4413      	add	r3, r2
 800a058:	881b      	ldrh	r3, [r3, #0]
 800a05a:	089b      	lsrs	r3, r3, #2
 800a05c:	b29b      	uxth	r3, r3
 800a05e:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 800a060:	69fb      	ldr	r3, [r7, #28]
 800a062:	3301      	adds	r3, #1
 800a064:	005b      	lsls	r3, r3, #1
 800a066:	687a      	ldr	r2, [r7, #4]
 800a068:	4413      	add	r3, r2
 800a06a:	881b      	ldrh	r3, [r3, #0]
 800a06c:	089b      	lsrs	r3, r3, #2
 800a06e:	b29b      	uxth	r3, r3
 800a070:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 800a072:	69bb      	ldr	r3, [r7, #24]
 800a074:	009b      	lsls	r3, r3, #2
 800a076:	68fa      	ldr	r2, [r7, #12]
 800a078:	4413      	add	r3, r2
 800a07a:	681b      	ldr	r3, [r3, #0]
 800a07c:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 800a07e:	697b      	ldr	r3, [r7, #20]
 800a080:	009b      	lsls	r3, r3, #2
 800a082:	68fa      	ldr	r2, [r7, #12]
 800a084:	441a      	add	r2, r3
 800a086:	69bb      	ldr	r3, [r7, #24]
 800a088:	009b      	lsls	r3, r3, #2
 800a08a:	68f9      	ldr	r1, [r7, #12]
 800a08c:	440b      	add	r3, r1
 800a08e:	6812      	ldr	r2, [r2, #0]
 800a090:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 800a092:	697b      	ldr	r3, [r7, #20]
 800a094:	009b      	lsls	r3, r3, #2
 800a096:	68fa      	ldr	r2, [r7, #12]
 800a098:	4413      	add	r3, r2
 800a09a:	693a      	ldr	r2, [r7, #16]
 800a09c:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 800a09e:	69bb      	ldr	r3, [r7, #24]
 800a0a0:	3301      	adds	r3, #1
 800a0a2:	009b      	lsls	r3, r3, #2
 800a0a4:	68fa      	ldr	r2, [r7, #12]
 800a0a6:	4413      	add	r3, r2
 800a0a8:	681b      	ldr	r3, [r3, #0]
 800a0aa:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 800a0ac:	697b      	ldr	r3, [r7, #20]
 800a0ae:	3301      	adds	r3, #1
 800a0b0:	009b      	lsls	r3, r3, #2
 800a0b2:	68fa      	ldr	r2, [r7, #12]
 800a0b4:	441a      	add	r2, r3
 800a0b6:	69bb      	ldr	r3, [r7, #24]
 800a0b8:	3301      	adds	r3, #1
 800a0ba:	009b      	lsls	r3, r3, #2
 800a0bc:	68f9      	ldr	r1, [r7, #12]
 800a0be:	440b      	add	r3, r1
 800a0c0:	6812      	ldr	r2, [r2, #0]
 800a0c2:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 800a0c4:	697b      	ldr	r3, [r7, #20]
 800a0c6:	3301      	adds	r3, #1
 800a0c8:	009b      	lsls	r3, r3, #2
 800a0ca:	68fa      	ldr	r2, [r7, #12]
 800a0cc:	4413      	add	r3, r2
 800a0ce:	693a      	ldr	r2, [r7, #16]
 800a0d0:	601a      	str	r2, [r3, #0]

    i += 2;
 800a0d2:	69fb      	ldr	r3, [r7, #28]
 800a0d4:	3302      	adds	r3, #2
 800a0d6:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800a0d8:	897b      	ldrh	r3, [r7, #10]
 800a0da:	69fa      	ldr	r2, [r7, #28]
 800a0dc:	429a      	cmp	r2, r3
 800a0de:	d3b7      	bcc.n	800a050 <arm_bitreversal_32+0x14>
  }
}
 800a0e0:	bf00      	nop
 800a0e2:	bf00      	nop
 800a0e4:	3724      	adds	r7, #36	; 0x24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ec:	4770      	bx	lr

0800a0ee <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800a0ee:	b580      	push	{r7, lr}
 800a0f0:	b0a0      	sub	sp, #128	; 0x80
 800a0f2:	af00      	add	r7, sp, #0
 800a0f4:	6078      	str	r0, [r7, #4]
 800a0f6:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	881b      	ldrh	r3, [r3, #0]
 800a0fc:	66bb      	str	r3, [r7, #104]	; 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 800a0fe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a100:	009b      	lsls	r3, r3, #2
 800a102:	683a      	ldr	r2, [r7, #0]
 800a104:	4413      	add	r3, r2
 800a106:	677b      	str	r3, [r7, #116]	; 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	673b      	str	r3, [r7, #112]	; 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 800a10e:	683b      	ldr	r3, [r7, #0]
 800a110:	667b      	str	r3, [r7, #100]	; 0x64
  pCol2 = p2;
 800a112:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a114:	663b      	str	r3, [r7, #96]	; 0x60

  /* Define new length */
  L >>= 1;
 800a116:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a118:	085b      	lsrs	r3, r3, #1
 800a11a:	66bb      	str	r3, [r7, #104]	; 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 800a11c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	683a      	ldr	r2, [r7, #0]
 800a122:	4413      	add	r3, r2
 800a124:	67fb      	str	r3, [r7, #124]	; 0x7c
  pMid2 = p2 + L;
 800a126:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a128:	009b      	lsls	r3, r3, #2
 800a12a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800a12c:	4413      	add	r3, r2
 800a12e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 800a130:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a132:	089b      	lsrs	r3, r3, #2
 800a134:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a136:	e1b6      	b.n	800a4a6 <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800a138:	683b      	ldr	r3, [r7, #0]
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	63bb      	str	r3, [r7, #56]	; 0x38
    t1[1] = p1[1];
 800a13e:	683b      	ldr	r3, [r7, #0]
 800a140:	685b      	ldr	r3, [r3, #4]
 800a142:	63fb      	str	r3, [r7, #60]	; 0x3c
    t1[2] = p1[2];
 800a144:	683b      	ldr	r3, [r7, #0]
 800a146:	689b      	ldr	r3, [r3, #8]
 800a148:	643b      	str	r3, [r7, #64]	; 0x40
    t1[3] = p1[3];
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	68db      	ldr	r3, [r3, #12]
 800a14e:	647b      	str	r3, [r7, #68]	; 0x44

    t2[0] = p2[0];
 800a150:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	62bb      	str	r3, [r7, #40]	; 0x28
    t2[1] = p2[1];
 800a156:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a158:	685b      	ldr	r3, [r3, #4]
 800a15a:	62fb      	str	r3, [r7, #44]	; 0x2c
    t2[2] = p2[2];
 800a15c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a15e:	689b      	ldr	r3, [r3, #8]
 800a160:	633b      	str	r3, [r7, #48]	; 0x30
    t2[3] = p2[3];
 800a162:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a164:	68db      	ldr	r3, [r3, #12]
 800a166:	637b      	str	r3, [r7, #52]	; 0x34

    t3[0] = pMid1[0];
 800a168:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 800a16e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a170:	685b      	ldr	r3, [r3, #4]
 800a172:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 800a174:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a176:	689b      	ldr	r3, [r3, #8]
 800a178:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 800a17a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a17c:	68db      	ldr	r3, [r3, #12]
 800a17e:	627b      	str	r3, [r7, #36]	; 0x24

    t4[0] = pMid2[0];
 800a180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a182:	681b      	ldr	r3, [r3, #0]
 800a184:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 800a186:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a188:	685b      	ldr	r3, [r3, #4]
 800a18a:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 800a18c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a18e:	689b      	ldr	r3, [r3, #8]
 800a190:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 800a192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a194:	68db      	ldr	r3, [r3, #12]
 800a196:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 800a198:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a19c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1a0:	683b      	ldr	r3, [r7, #0]
 800a1a2:	1d1a      	adds	r2, r3, #4
 800a1a4:	603a      	str	r2, [r7, #0]
 800a1a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1aa:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 800a1ae:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a1b2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a1b6:	683b      	ldr	r3, [r7, #0]
 800a1b8:	1d1a      	adds	r2, r3, #4
 800a1ba:	603a      	str	r2, [r7, #0]
 800a1bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1c0:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 800a1c4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a1c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	1d1a      	adds	r2, r3, #4
 800a1d0:	603a      	str	r2, [r7, #0]
 800a1d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1d6:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800a1da:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a1de:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a1e2:	683b      	ldr	r3, [r7, #0]
 800a1e4:	1d1a      	adds	r2, r3, #4
 800a1e6:	603a      	str	r2, [r7, #0]
 800a1e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a1ec:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 800a1f0:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800a1f4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a1f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a1fc:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
    t2[1] = t1[1] - t2[1];
 800a200:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800a204:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a20c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[2] = t1[2] - t2[2];
 800a210:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800a214:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a218:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a21c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 800a220:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800a224:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a228:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a22c:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34

    *pMid1++ = t3[0] + t4[0];
 800a230:	ed97 7a06 	vldr	s14, [r7, #24]
 800a234:	edd7 7a02 	vldr	s15, [r7, #8]
 800a238:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a23a:	1d1a      	adds	r2, r3, #4
 800a23c:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a23e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a242:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 800a246:	ed97 7a07 	vldr	s14, [r7, #28]
 800a24a:	edd7 7a03 	vldr	s15, [r7, #12]
 800a24e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a250:	1d1a      	adds	r2, r3, #4
 800a252:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a254:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a258:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 800a25c:	ed97 7a08 	vldr	s14, [r7, #32]
 800a260:	edd7 7a04 	vldr	s15, [r7, #16]
 800a264:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a266:	1d1a      	adds	r2, r3, #4
 800a268:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a26a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a26e:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 800a272:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800a276:	edd7 7a05 	vldr	s15, [r7, #20]
 800a27a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800a27c:	1d1a      	adds	r2, r3, #4
 800a27e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800a280:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a284:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 800a288:	ed97 7a02 	vldr	s14, [r7, #8]
 800a28c:	edd7 7a06 	vldr	s15, [r7, #24]
 800a290:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a294:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 800a298:	ed97 7a03 	vldr	s14, [r7, #12]
 800a29c:	edd7 7a07 	vldr	s15, [r7, #28]
 800a2a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2a4:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800a2a8:	ed97 7a04 	vldr	s14, [r7, #16]
 800a2ac:	edd7 7a08 	vldr	s15, [r7, #32]
 800a2b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2b4:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800a2b8:	ed97 7a05 	vldr	s14, [r7, #20]
 800a2bc:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800a2c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a2c4:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800a2c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2ca:	1d1a      	adds	r2, r3, #4
 800a2cc:	673a      	str	r2, [r7, #112]	; 0x70
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800a2d2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a2d4:	1d1a      	adds	r2, r3, #4
 800a2d6:	673a      	str	r2, [r7, #112]	; 0x70
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	65bb      	str	r3, [r7, #88]	; 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 800a2dc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a2e0:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a2e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[1] * twI;
 800a2ec:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a2f0:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a2f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a2f8:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[1] * twR;
 800a2fc:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800a300:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a304:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a308:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[0] * twI;
 800a30c:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800a310:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a314:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a318:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 800a31c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a31e:	1d1a      	adds	r2, r3, #4
 800a320:	677a      	str	r2, [r7, #116]	; 0x74
 800a322:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a326:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a32a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a32e:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 800a332:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a334:	1d1a      	adds	r2, r3, #4
 800a336:	677a      	str	r2, [r7, #116]	; 0x74
 800a338:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a33c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a340:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a344:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 800a348:	edd7 7a02 	vldr	s15, [r7, #8]
 800a34c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a350:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a354:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[1] * twR;
 800a358:	edd7 7a03 	vldr	s15, [r7, #12]
 800a35c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a360:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a364:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[1] * twI;
 800a368:	edd7 7a03 	vldr	s15, [r7, #12]
 800a36c:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a370:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a374:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[0] * twR;
 800a378:	edd7 7a02 	vldr	s15, [r7, #8]
 800a37c:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a380:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a384:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800a388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a38a:	1d1a      	adds	r2, r3, #4
 800a38c:	67ba      	str	r2, [r7, #120]	; 0x78
 800a38e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a392:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a396:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a39a:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800a39e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a3a0:	1d1a      	adds	r2, r3, #4
 800a3a2:	67ba      	str	r2, [r7, #120]	; 0x78
 800a3a4:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a3a8:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a3ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a3b0:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 800a3b4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3b6:	1d1a      	adds	r2, r3, #4
 800a3b8:	673a      	str	r2, [r7, #112]	; 0x70
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	65fb      	str	r3, [r7, #92]	; 0x5c
    twI = *tw++;
 800a3be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a3c0:	1d1a      	adds	r2, r3, #4
 800a3c2:	673a      	str	r2, [r7, #112]	; 0x70
 800a3c4:	681b      	ldr	r3, [r3, #0]
 800a3c6:	65bb      	str	r3, [r7, #88]	; 0x58

    m0 = t2[2] * twR;
 800a3c8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a3cc:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a3d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3d4:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t2[3] * twI;
 800a3d8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a3dc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a3e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3e4:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t2[3] * twR;
 800a3e8:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800a3ec:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a3f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a3f4:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t2[2] * twI;
 800a3f8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800a3fc:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a400:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a404:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *p2++ = m0 + m1;
 800a408:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a40a:	1d1a      	adds	r2, r3, #4
 800a40c:	677a      	str	r2, [r7, #116]	; 0x74
 800a40e:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a412:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a416:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a41a:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800a41e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a420:	1d1a      	adds	r2, r3, #4
 800a422:	677a      	str	r2, [r7, #116]	; 0x74
 800a424:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a428:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a42c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a430:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 800a434:	edd7 7a04 	vldr	s15, [r7, #16]
 800a438:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a43c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a440:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
    m1 = t4[3] * twR;
 800a444:	edd7 7a05 	vldr	s15, [r7, #20]
 800a448:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a44c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a450:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
    m2 = t4[3] * twI;
 800a454:	edd7 7a05 	vldr	s15, [r7, #20]
 800a458:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a45c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a460:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
    m3 = t4[2] * twR;
 800a464:	edd7 7a04 	vldr	s15, [r7, #16]
 800a468:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a46c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800a470:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48

    *pMid2++ = m0 - m1;
 800a474:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a476:	1d1a      	adds	r2, r3, #4
 800a478:	67ba      	str	r2, [r7, #120]	; 0x78
 800a47a:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a47e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800a482:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a486:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 800a48a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a48c:	1d1a      	adds	r2, r3, #4
 800a48e:	67ba      	str	r2, [r7, #120]	; 0x78
 800a490:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800a494:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800a498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a49c:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 800a4a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a2:	3b01      	subs	r3, #1
 800a4a4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800a4a6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	f47f ae45 	bne.w	800a138 <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 800a4ae:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4b0:	b299      	uxth	r1, r3
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	685a      	ldr	r2, [r3, #4]
 800a4b6:	2302      	movs	r3, #2
 800a4b8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 800a4ba:	f000 ffc3 	bl	800b444 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 800a4be:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a4c0:	b299      	uxth	r1, r3
 800a4c2:	687b      	ldr	r3, [r7, #4]
 800a4c4:	685a      	ldr	r2, [r3, #4]
 800a4c6:	2302      	movs	r3, #2
 800a4c8:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800a4ca:	f000 ffbb 	bl	800b444 <arm_radix8_butterfly_f32>
}
 800a4ce:	bf00      	nop
 800a4d0:	3780      	adds	r7, #128	; 0x80
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800a4d6:	b580      	push	{r7, lr}
 800a4d8:	b0ac      	sub	sp, #176	; 0xb0
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
 800a4de:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	881b      	ldrh	r3, [r3, #0]
 800a4e4:	085b      	lsrs	r3, r3, #1
 800a4e6:	b29b      	uxth	r3, r3
 800a4e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 800a4ec:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4f0:	009b      	lsls	r3, r3, #2
 800a4f2:	683a      	ldr	r2, [r7, #0]
 800a4f4:	4413      	add	r3, r2
 800a4f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    float32_t * p3 = p2 + L;
 800a4fa:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a4fe:	009b      	lsls	r3, r3, #2
 800a500:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800a504:	4413      	add	r3, r2
 800a506:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    float32_t * p4 = p3 + L;
 800a50a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a50e:	009b      	lsls	r3, r3, #2
 800a510:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800a514:	4413      	add	r3, r2
 800a516:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800a51a:	683b      	ldr	r3, [r7, #0]
 800a51c:	67fb      	str	r3, [r7, #124]	; 0x7c
    pCol2 = p2;
 800a51e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a522:	67bb      	str	r3, [r7, #120]	; 0x78
    pCol3 = p3;
 800a524:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a528:	677b      	str	r3, [r7, #116]	; 0x74
    pCol4 = p4;
 800a52a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a52e:	673b      	str	r3, [r7, #112]	; 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 800a530:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a534:	3b04      	subs	r3, #4
 800a536:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    pEnd2 = p3 - 1;
 800a53a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a53e:	3b04      	subs	r3, #4
 800a540:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    pEnd3 = p4 - 1;
 800a544:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a548:	3b04      	subs	r3, #4
 800a54a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    pEnd4 = pEnd3 + L;
 800a54e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a552:	009b      	lsls	r3, r3, #2
 800a554:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800a558:	4413      	add	r3, r2
 800a55a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	685b      	ldr	r3, [r3, #4]
 800a562:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800a566:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800a56a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800a56e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800a572:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

    L >>= 1;
 800a576:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a57a:	085b      	lsrs	r3, r3, #1
 800a57c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 800a580:	2302      	movs	r3, #2
 800a582:	66fb      	str	r3, [r7, #108]	; 0x6c
    twMod3 = 4;
 800a584:	2304      	movs	r3, #4
 800a586:	66bb      	str	r3, [r7, #104]	; 0x68
    twMod4 = 6;
 800a588:	2306      	movs	r3, #6
 800a58a:	667b      	str	r3, [r7, #100]	; 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 800a58c:	683b      	ldr	r3, [r7, #0]
 800a58e:	ed93 7a00 	vldr	s14, [r3]
 800a592:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a596:	edd3 7a00 	vldr	s15, [r3]
 800a59a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a59e:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800a5a2:	683b      	ldr	r3, [r7, #0]
 800a5a4:	ed93 7a00 	vldr	s14, [r3]
 800a5a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5ac:	edd3 7a00 	vldr	s15, [r3]
 800a5b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5b4:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800a5b8:	683b      	ldr	r3, [r7, #0]
 800a5ba:	3304      	adds	r3, #4
 800a5bc:	ed93 7a00 	vldr	s14, [r3]
 800a5c0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5c4:	3304      	adds	r3, #4
 800a5c6:	edd3 7a00 	vldr	s15, [r3]
 800a5ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a5ce:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800a5d2:	683b      	ldr	r3, [r7, #0]
 800a5d4:	3304      	adds	r3, #4
 800a5d6:	ed93 7a00 	vldr	s14, [r3]
 800a5da:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a5de:	3304      	adds	r3, #4
 800a5e0:	edd3 7a00 	vldr	s15, [r3]
 800a5e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a5e8:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a5ec:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a5f0:	3304      	adds	r3, #4
 800a5f2:	ed93 7a00 	vldr	s14, [r3]
 800a5f6:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a5fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a5fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a602:	3304      	adds	r3, #4
 800a604:	edd3 7a00 	vldr	s15, [r3]
 800a608:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a60c:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a610:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a614:	edd3 7a00 	vldr	s15, [r3]
 800a618:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a61c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a620:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a624:	edd3 7a00 	vldr	s15, [r3]
 800a628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a62c:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a630:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a634:	edd3 7a00 	vldr	s15, [r3]
 800a638:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a63c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a640:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a644:	edd3 7a00 	vldr	s15, [r3]
 800a648:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a64c:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a650:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a654:	3304      	adds	r3, #4
 800a656:	edd3 7a00 	vldr	s15, [r3]
 800a65a:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a65e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a662:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a666:	3304      	adds	r3, #4
 800a668:	edd3 7a00 	vldr	s15, [r3]
 800a66c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a670:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a674:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a678:	3304      	adds	r3, #4
 800a67a:	edd3 7a00 	vldr	s15, [r3]
 800a67e:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a682:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a686:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a68a:	3304      	adds	r3, #4
 800a68c:	edd3 7a00 	vldr	s15, [r3]
 800a690:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a694:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a698:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a69c:	ed93 7a00 	vldr	s14, [r3]
 800a6a0:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a6a4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6ac:	edd3 7a00 	vldr	s15, [r3]
 800a6b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a6b4:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a6b8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6bc:	ed93 7a00 	vldr	s14, [r3]
 800a6c0:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a6c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6cc:	edd3 7a00 	vldr	s15, [r3]
 800a6d0:	683b      	ldr	r3, [r7, #0]
 800a6d2:	1d1a      	adds	r2, r3, #4
 800a6d4:	603a      	str	r2, [r7, #0]
 800a6d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a6da:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a6de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a6e2:	3304      	adds	r3, #4
 800a6e4:	ed93 7a00 	vldr	s14, [r3]
 800a6e8:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a6ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a6f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a6f4:	3304      	adds	r3, #4
 800a6f6:	edd3 7a00 	vldr	s15, [r3]
 800a6fa:	683b      	ldr	r3, [r7, #0]
 800a6fc:	1d1a      	adds	r2, r3, #4
 800a6fe:	603a      	str	r2, [r7, #0]
 800a700:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a704:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 800a708:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a70c:	1d1a      	adds	r2, r3, #4
 800a70e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a712:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a714:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 800a716:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a71a:	1d1a      	adds	r2, r3, #4
 800a71c:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800a720:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a722:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 800a724:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a728:	1d1a      	adds	r2, r3, #4
 800a72a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a72e:	69fa      	ldr	r2, [r7, #28]
 800a730:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 800a732:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a736:	1d1a      	adds	r2, r3, #4
 800a738:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800a73c:	6a3a      	ldr	r2, [r7, #32]
 800a73e:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 800a740:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a744:	1d1a      	adds	r2, r3, #4
 800a746:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a74a:	68fa      	ldr	r2, [r7, #12]
 800a74c:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 800a74e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a752:	1d1a      	adds	r2, r3, #4
 800a754:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800a758:	693a      	ldr	r2, [r7, #16]
 800a75a:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 800a75c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800a75e:	009b      	lsls	r3, r3, #2
 800a760:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800a764:	4413      	add	r3, r2
 800a766:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    tw3 += twMod3;
 800a76a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800a76c:	009b      	lsls	r3, r3, #2
 800a76e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800a772:	4413      	add	r3, r2
 800a774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    tw4 += twMod4;
 800a778:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a77a:	009b      	lsls	r3, r3, #2
 800a77c:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a780:	4413      	add	r3, r2
 800a782:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 800a786:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800a78a:	3b02      	subs	r3, #2
 800a78c:	085b      	lsrs	r3, r3, #1
 800a78e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800a792:	e31a      	b.n	800adca <arm_cfft_radix8by4_f32+0x8f4>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	ed93 7a00 	vldr	s14, [r3]
 800a79a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a79e:	edd3 7a00 	vldr	s15, [r3]
 800a7a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7a6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = p1[0] - p3[0];
 800a7aa:	683b      	ldr	r3, [r7, #0]
 800a7ac:	ed93 7a00 	vldr	s14, [r3]
 800a7b0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7b4:	edd3 7a00 	vldr	s15, [r3]
 800a7b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7bc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      p1ap3_1 = p1[1] + p3[1];
 800a7c0:	683b      	ldr	r3, [r7, #0]
 800a7c2:	3304      	adds	r3, #4
 800a7c4:	ed93 7a00 	vldr	s14, [r3]
 800a7c8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7cc:	3304      	adds	r3, #4
 800a7ce:	edd3 7a00 	vldr	s15, [r3]
 800a7d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a7d6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = p1[1] - p3[1];
 800a7da:	683b      	ldr	r3, [r7, #0]
 800a7dc:	3304      	adds	r3, #4
 800a7de:	ed93 7a00 	vldr	s14, [r3]
 800a7e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a7e6:	3304      	adds	r3, #4
 800a7e8:	edd3 7a00 	vldr	s15, [r3]
 800a7ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7f0:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 800a7f4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a7f8:	3304      	adds	r3, #4
 800a7fa:	ed93 7a00 	vldr	s14, [r3]
 800a7fe:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800a802:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a80a:	3304      	adds	r3, #4
 800a80c:	edd3 7a00 	vldr	s15, [r3]
 800a810:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a814:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 800a818:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a81c:	edd3 7a00 	vldr	s15, [r3]
 800a820:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800a824:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a828:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a82c:	edd3 7a00 	vldr	s15, [r3]
 800a830:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a834:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 800a838:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a83c:	edd3 7a00 	vldr	s15, [r3]
 800a840:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a844:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a84c:	edd3 7a00 	vldr	s15, [r3]
 800a850:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a854:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 800a858:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a85c:	3304      	adds	r3, #4
 800a85e:	edd3 7a00 	vldr	s15, [r3]
 800a862:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a866:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a86a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a86e:	3304      	adds	r3, #4
 800a870:	edd3 7a00 	vldr	s15, [r3]
 800a874:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a878:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 800a87c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a880:	3304      	adds	r3, #4
 800a882:	edd3 7a00 	vldr	s15, [r3]
 800a886:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800a88a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a88e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a892:	3304      	adds	r3, #4
 800a894:	edd3 7a00 	vldr	s15, [r3]
 800a898:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a89c:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 800a8a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8a4:	ed93 7a00 	vldr	s14, [r3]
 800a8a8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a8ac:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8b4:	edd3 7a00 	vldr	s15, [r3]
 800a8b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a8bc:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 800a8c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8c4:	ed93 7a00 	vldr	s14, [r3]
 800a8c8:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800a8cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8d4:	edd3 7a00 	vldr	s15, [r3]
 800a8d8:	683b      	ldr	r3, [r7, #0]
 800a8da:	1d1a      	adds	r2, r3, #4
 800a8dc:	603a      	str	r2, [r7, #0]
 800a8de:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a8e2:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 800a8e6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800a8ea:	3304      	adds	r3, #4
 800a8ec:	ed93 7a00 	vldr	s14, [r3]
 800a8f0:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800a8f4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800a8f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a8fc:	3304      	adds	r3, #4
 800a8fe:	edd3 7a00 	vldr	s15, [r3]
 800a902:	683b      	ldr	r3, [r7, #0]
 800a904:	1d1a      	adds	r2, r3, #4
 800a906:	603a      	str	r2, [r7, #0]
 800a908:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a90c:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 800a910:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a914:	3b04      	subs	r3, #4
 800a916:	ed93 7a00 	vldr	s14, [r3]
 800a91a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a91e:	3b04      	subs	r3, #4
 800a920:	edd3 7a00 	vldr	s15, [r3]
 800a924:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a928:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 800a92c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a930:	3b04      	subs	r3, #4
 800a932:	ed93 7a00 	vldr	s14, [r3]
 800a936:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a93a:	3b04      	subs	r3, #4
 800a93c:	edd3 7a00 	vldr	s15, [r3]
 800a940:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a944:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 800a948:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a94c:	ed93 7a00 	vldr	s14, [r3]
 800a950:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a954:	edd3 7a00 	vldr	s15, [r3]
 800a958:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a95c:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 800a960:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a964:	ed93 7a00 	vldr	s14, [r3]
 800a968:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a96c:	edd3 7a00 	vldr	s15, [r3]
 800a970:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a974:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 800a978:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a97c:	ed93 7a00 	vldr	s14, [r3]
 800a980:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a984:	edd3 7a00 	vldr	s15, [r3]
 800a988:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a98c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800a990:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a994:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 800a998:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800a99c:	ed93 7a00 	vldr	s14, [r3]
 800a9a0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800a9a4:	edd3 7a00 	vldr	s15, [r3]
 800a9a8:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9ac:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9b0:	3b04      	subs	r3, #4
 800a9b2:	edd3 7a00 	vldr	s15, [r3]
 800a9b6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9ba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9be:	3b04      	subs	r3, #4
 800a9c0:	edd3 7a00 	vldr	s15, [r3]
 800a9c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800a9c8:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 800a9cc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9d0:	3b04      	subs	r3, #4
 800a9d2:	edd3 7a00 	vldr	s15, [r3]
 800a9d6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800a9da:	ee37 7a67 	vsub.f32	s14, s14, s15
 800a9de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800a9e2:	3b04      	subs	r3, #4
 800a9e4:	edd3 7a00 	vldr	s15, [r3]
 800a9e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a9ec:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 800a9f0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800a9f4:	edd3 7a00 	vldr	s15, [r3]
 800a9f8:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800a9fc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa00:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa04:	edd3 7a00 	vldr	s15, [r3]
 800aa08:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa0c:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 800aa10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa14:	ed93 7a00 	vldr	s14, [r3]
 800aa18:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa1c:	edd3 7a00 	vldr	s15, [r3]
 800aa20:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa24:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800aa28:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa2c:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 800aa30:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa34:	3b04      	subs	r3, #4
 800aa36:	ed93 7a00 	vldr	s14, [r3]
 800aa3a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa3e:	3b04      	subs	r3, #4
 800aa40:	edd3 7a00 	vldr	s15, [r3]
 800aa44:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aa48:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800aa4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aa50:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 800aa54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa58:	ed93 7a00 	vldr	s14, [r3]
 800aa5c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800aa60:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa68:	edd3 7a00 	vldr	s15, [r3]
 800aa6c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa70:	1f1a      	subs	r2, r3, #4
 800aa72:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa76:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aa7a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 800aa7e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800aa82:	3b04      	subs	r3, #4
 800aa84:	ed93 7a00 	vldr	s14, [r3]
 800aa88:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800aa8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aa90:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800aa94:	3b04      	subs	r3, #4
 800aa96:	edd3 7a00 	vldr	s15, [r3]
 800aa9a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800aa9e:	1f1a      	subs	r2, r3, #4
 800aaa0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aaa4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aaa8:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 800aaac:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aab0:	1d1a      	adds	r2, r3, #4
 800aab2:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	653b      	str	r3, [r7, #80]	; 0x50
      twI = *tw2++;
 800aaba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800aabe:	1d1a      	adds	r2, r3, #4
 800aac0:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	64fb      	str	r3, [r7, #76]	; 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 800aac8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aacc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800aad0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aad4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[1] * twI;
 800aad8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aadc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800aae0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aae4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[1] * twR;
 800aae8:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800aaec:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800aaf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aaf4:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[0] * twI;
 800aaf8:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800aafc:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab04:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p2++ = m0 + m1;
 800ab08:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab0c:	1d1a      	adds	r2, r3, #4
 800ab0e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ab12:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ab16:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ab1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ab1e:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 800ab22:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ab26:	1d1a      	adds	r2, r3, #4
 800ab28:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800ab2c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ab30:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ab34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab38:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 800ab3c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ab40:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab44:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab48:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t2[2] * twR;
 800ab4c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab50:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ab54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab58:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t2[2] * twI;
 800ab5c:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800ab60:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ab64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab68:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t2[3] * twR;
 800ab6c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800ab70:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ab74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ab78:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd2-- = m0 - m1;
 800ab7c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab80:	1f1a      	subs	r2, r3, #4
 800ab82:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800ab86:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ab8a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ab8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ab92:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 800ab96:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800ab9a:	1f1a      	subs	r2, r3, #4
 800ab9c:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800aba0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800aba4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800aba8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800abac:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 800abb0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abb4:	681b      	ldr	r3, [r3, #0]
 800abb6:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw3[1];
 800abb8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800abbc:	685b      	ldr	r3, [r3, #4]
 800abbe:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw3 += twMod3;
 800abc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800abc2:	009b      	lsls	r3, r3, #2
 800abc4:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800abc8:	4413      	add	r3, r2
 800abca:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
      /* Top */
      m0 = t3[0] * twR;
 800abce:	edd7 7a07 	vldr	s15, [r7, #28]
 800abd2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800abd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abda:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t3[1] * twI;
 800abde:	edd7 7a08 	vldr	s15, [r7, #32]
 800abe2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800abe6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abea:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t3[1] * twR;
 800abee:	edd7 7a08 	vldr	s15, [r7, #32]
 800abf2:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800abf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800abfa:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t3[0] * twI;
 800abfe:	edd7 7a07 	vldr	s15, [r7, #28]
 800ac02:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ac06:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac0a:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p3++ = m0 + m1;
 800ac0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac12:	1d1a      	adds	r2, r3, #4
 800ac14:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac18:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ac1c:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ac20:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ac24:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800ac28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ac2c:	1d1a      	adds	r2, r3, #4
 800ac2e:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ac32:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ac36:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ac3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac3e:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 800ac42:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac46:	eef1 7a67 	vneg.f32	s15, s15
 800ac4a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ac4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac52:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 =  t3[2] * twI;
 800ac56:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ac5a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ac5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac62:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 =  t3[2] * twR;
 800ac66:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800ac6a:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ac6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac72:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 =  t3[3] * twI;
 800ac76:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800ac7a:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ac7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ac82:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd3-- = m0 - m1;
 800ac86:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800ac8a:	1f1a      	subs	r2, r3, #4
 800ac8c:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800ac90:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ac94:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ac98:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ac9c:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 800aca0:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800aca4:	1f1a      	subs	r2, r3, #4
 800aca6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800acaa:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800acae:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800acb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800acb6:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 800acba:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	653b      	str	r3, [r7, #80]	; 0x50
      twI = tw4[1];
 800acc2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800acc6:	685b      	ldr	r3, [r3, #4]
 800acc8:	64fb      	str	r3, [r7, #76]	; 0x4c
      tw4 += twMod4;
 800acca:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800acd2:	4413      	add	r3, r2
 800acd4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
      /* Top */
      m0 = t4[0] * twR;
 800acd8:	edd7 7a03 	vldr	s15, [r7, #12]
 800acdc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ace0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ace4:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[1] * twI;
 800ace8:	edd7 7a04 	vldr	s15, [r7, #16]
 800acec:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800acf0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800acf4:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[1] * twR;
 800acf8:	edd7 7a04 	vldr	s15, [r7, #16]
 800acfc:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ad00:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad04:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[0] * twI;
 800ad08:	edd7 7a03 	vldr	s15, [r7, #12]
 800ad0c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ad10:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad14:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *p4++ = m0 + m1;
 800ad18:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad1c:	1d1a      	adds	r2, r3, #4
 800ad1e:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ad22:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ad26:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ad2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ad2e:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800ad32:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ad36:	1d1a      	adds	r2, r3, #4
 800ad38:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800ad3c:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800ad40:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800ad44:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ad48:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 800ad4c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad50:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ad54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad58:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
      m1 = t4[2] * twR;
 800ad5c:	edd7 7a05 	vldr	s15, [r7, #20]
 800ad60:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ad64:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad68:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
      m2 = t4[2] * twI;
 800ad6c:	edd7 7a05 	vldr	s15, [r7, #20]
 800ad70:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800ad74:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad78:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
      m3 = t4[3] * twR;
 800ad7c:	edd7 7a06 	vldr	s15, [r7, #24]
 800ad80:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800ad84:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ad88:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

      *pEnd4-- = m0 - m1;
 800ad8c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800ad90:	1f1a      	subs	r2, r3, #4
 800ad92:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800ad96:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800ad9a:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800ad9e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ada2:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800ada6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800adaa:	1f1a      	subs	r2, r3, #4
 800adac:	f8c7 20a0 	str.w	r2, [r7, #160]	; 0xa0
 800adb0:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800adb4:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800adb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800adbc:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 800adc0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adc4:	3b01      	subs	r3, #1
 800adc6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800adca:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800adce:	2b00      	cmp	r3, #0
 800add0:	f47f ace0 	bne.w	800a794 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800add4:	683b      	ldr	r3, [r7, #0]
 800add6:	ed93 7a00 	vldr	s14, [r3]
 800adda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adde:	edd3 7a00 	vldr	s15, [r3]
 800ade2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ade6:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
    p1sp3_0 = p1[0] - p3[0];
 800adea:	683b      	ldr	r3, [r7, #0]
 800adec:	ed93 7a00 	vldr	s14, [r3]
 800adf0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800adf4:	edd3 7a00 	vldr	s15, [r3]
 800adf8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800adfc:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
    p1ap3_1 = p1[1] + p3[1];
 800ae00:	683b      	ldr	r3, [r7, #0]
 800ae02:	3304      	adds	r3, #4
 800ae04:	ed93 7a00 	vldr	s14, [r3]
 800ae08:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae0c:	3304      	adds	r3, #4
 800ae0e:	edd3 7a00 	vldr	s15, [r3]
 800ae12:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae16:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
    p1sp3_1 = p1[1] - p3[1];
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	3304      	adds	r3, #4
 800ae1e:	ed93 7a00 	vldr	s14, [r3]
 800ae22:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800ae26:	3304      	adds	r3, #4
 800ae28:	edd3 7a00 	vldr	s15, [r3]
 800ae2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae30:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800ae34:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae38:	3304      	adds	r3, #4
 800ae3a:	ed93 7a00 	vldr	s14, [r3]
 800ae3e:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 800ae42:	ee37 7a27 	vadd.f32	s14, s14, s15
 800ae46:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae4a:	3304      	adds	r3, #4
 800ae4c:	edd3 7a00 	vldr	s15, [r3]
 800ae50:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae54:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 800ae58:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae5c:	edd3 7a00 	vldr	s15, [r3]
 800ae60:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800ae64:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae68:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae6c:	edd3 7a00 	vldr	s15, [r3]
 800ae70:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ae74:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 800ae78:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae7c:	edd3 7a00 	vldr	s15, [r3]
 800ae80:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800ae84:	ee37 7a67 	vsub.f32	s14, s14, s15
 800ae88:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800ae8c:	edd3 7a00 	vldr	s15, [r3]
 800ae90:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ae94:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 800ae98:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ae9c:	3304      	adds	r3, #4
 800ae9e:	edd3 7a00 	vldr	s15, [r3]
 800aea2:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800aea6:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aeaa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aeae:	3304      	adds	r3, #4
 800aeb0:	edd3 7a00 	vldr	s15, [r3]
 800aeb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aeb8:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 800aebc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aec0:	3304      	adds	r3, #4
 800aec2:	edd3 7a00 	vldr	s15, [r3]
 800aec6:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800aeca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800aece:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aed2:	3304      	adds	r3, #4
 800aed4:	edd3 7a00 	vldr	s15, [r3]
 800aed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800aedc:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 800aee0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800aee4:	ed93 7a00 	vldr	s14, [r3]
 800aee8:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800aeec:	ee37 7a27 	vadd.f32	s14, s14, s15
 800aef0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800aef4:	edd3 7a00 	vldr	s15, [r3]
 800aef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800aefc:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 800af00:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af04:	ed93 7a00 	vldr	s14, [r3]
 800af08:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800af0c:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af14:	edd3 7a00 	vldr	s15, [r3]
 800af18:	683b      	ldr	r3, [r7, #0]
 800af1a:	1d1a      	adds	r2, r3, #4
 800af1c:	603a      	str	r2, [r7, #0]
 800af1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af22:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800af26:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800af2a:	3304      	adds	r3, #4
 800af2c:	ed93 7a00 	vldr	s14, [r3]
 800af30:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800af34:	ee37 7a27 	vadd.f32	s14, s14, s15
 800af38:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800af3c:	3304      	adds	r3, #4
 800af3e:	edd3 7a00 	vldr	s15, [r3]
 800af42:	683b      	ldr	r3, [r7, #0]
 800af44:	1d1a      	adds	r2, r3, #4
 800af46:	603a      	str	r2, [r7, #0]
 800af48:	ee77 7a27 	vadd.f32	s15, s14, s15
 800af4c:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 800af50:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af54:	681b      	ldr	r3, [r3, #0]
 800af56:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw2[1];
 800af58:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800af5c:	685b      	ldr	r3, [r3, #4]
 800af5e:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t2[0] * twR;
 800af60:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800af64:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800af68:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af6c:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t2[1] * twI;
 800af70:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800af74:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800af78:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af7c:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t2[1] * twR;
 800af80:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800af84:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800af88:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af8c:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t2[0] * twI;
 800af90:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800af94:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800af98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800af9c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p2++ = m0 + m1;
 800afa0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afa4:	1d1a      	adds	r2, r3, #4
 800afa6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800afaa:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800afae:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800afb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800afb6:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 800afba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800afbe:	1d1a      	adds	r2, r3, #4
 800afc0:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
 800afc4:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800afc8:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800afcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800afd0:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800afd4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afd8:	681b      	ldr	r3, [r3, #0]
 800afda:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw3[1];
 800afdc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800afe0:	685b      	ldr	r3, [r3, #4]
 800afe2:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t3[0] * twR;
 800afe4:	edd7 7a07 	vldr	s15, [r7, #28]
 800afe8:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800afec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800aff0:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t3[1] * twI;
 800aff4:	edd7 7a08 	vldr	s15, [r7, #32]
 800aff8:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800affc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b000:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t3[1] * twR;
 800b004:	edd7 7a08 	vldr	s15, [r7, #32]
 800b008:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b00c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b010:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t3[0] * twI;
 800b014:	edd7 7a07 	vldr	s15, [r7, #28]
 800b018:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b01c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b020:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p3++ = m0 + m1;
 800b024:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b028:	1d1a      	adds	r2, r3, #4
 800b02a:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b02e:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b032:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b036:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b03a:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 800b03e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800b042:	1d1a      	adds	r2, r3, #4
 800b044:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800b048:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b04c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b050:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b054:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 800b058:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	653b      	str	r3, [r7, #80]	; 0x50
    twI = tw4[1];
 800b060:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800b064:	685b      	ldr	r3, [r3, #4]
 800b066:	64fb      	str	r3, [r7, #76]	; 0x4c

    m0 = t4[0] * twR;
 800b068:	edd7 7a03 	vldr	s15, [r7, #12]
 800b06c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b070:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b074:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
    m1 = t4[1] * twI;
 800b078:	edd7 7a04 	vldr	s15, [r7, #16]
 800b07c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b080:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b084:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44
    m2 = t4[1] * twR;
 800b088:	edd7 7a04 	vldr	s15, [r7, #16]
 800b08c:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800b090:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b094:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
    m3 = t4[0] * twI;
 800b098:	edd7 7a03 	vldr	s15, [r7, #12]
 800b09c:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800b0a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b0a4:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c

    *p4++ = m0 + m1;
 800b0a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0ac:	1d1a      	adds	r2, r3, #4
 800b0ae:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b0b2:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800b0b6:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800b0ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b0be:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 800b0c2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800b0c6:	1d1a      	adds	r2, r3, #4
 800b0c8:	f8c7 2088 	str.w	r2, [r7, #136]	; 0x88
 800b0cc:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800b0d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800b0d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0d8:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800b0dc:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0e0:	b299      	uxth	r1, r3
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	685a      	ldr	r2, [r3, #4]
 800b0e6:	2304      	movs	r3, #4
 800b0e8:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800b0ea:	f000 f9ab 	bl	800b444 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800b0ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b0f2:	b299      	uxth	r1, r3
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	2304      	movs	r3, #4
 800b0fa:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800b0fc:	f000 f9a2 	bl	800b444 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800b100:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b104:	b299      	uxth	r1, r3
 800b106:	687b      	ldr	r3, [r7, #4]
 800b108:	685a      	ldr	r2, [r3, #4]
 800b10a:	2304      	movs	r3, #4
 800b10c:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800b10e:	f000 f999 	bl	800b444 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 800b112:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800b116:	b299      	uxth	r1, r3
 800b118:	687b      	ldr	r3, [r7, #4]
 800b11a:	685a      	ldr	r2, [r3, #4]
 800b11c:	2304      	movs	r3, #4
 800b11e:	6f38      	ldr	r0, [r7, #112]	; 0x70
 800b120:	f000 f990 	bl	800b444 <arm_radix8_butterfly_f32>
}
 800b124:	bf00      	nop
 800b126:	37b0      	adds	r7, #176	; 0xb0
 800b128:	46bd      	mov	sp, r7
 800b12a:	bd80      	pop	{r7, pc}

0800b12c <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800b12c:	b580      	push	{r7, lr}
 800b12e:	b088      	sub	sp, #32
 800b130:	af00      	add	r7, sp, #0
 800b132:	60f8      	str	r0, [r7, #12]
 800b134:	60b9      	str	r1, [r7, #8]
 800b136:	4611      	mov	r1, r2
 800b138:	461a      	mov	r2, r3
 800b13a:	460b      	mov	r3, r1
 800b13c:	71fb      	strb	r3, [r7, #7]
 800b13e:	4613      	mov	r3, r2
 800b140:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 800b142:	68fb      	ldr	r3, [r7, #12]
 800b144:	881b      	ldrh	r3, [r3, #0]
 800b146:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 800b148:	79fb      	ldrb	r3, [r7, #7]
 800b14a:	2b01      	cmp	r3, #1
 800b14c:	d117      	bne.n	800b17e <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 800b14e:	68bb      	ldr	r3, [r7, #8]
 800b150:	3304      	adds	r3, #4
 800b152:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800b154:	2300      	movs	r3, #0
 800b156:	61fb      	str	r3, [r7, #28]
 800b158:	e00d      	b.n	800b176 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 800b15a:	69bb      	ldr	r3, [r7, #24]
 800b15c:	edd3 7a00 	vldr	s15, [r3]
 800b160:	eef1 7a67 	vneg.f32	s15, s15
 800b164:	69bb      	ldr	r3, [r7, #24]
 800b166:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	3308      	adds	r3, #8
 800b16e:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 800b170:	69fb      	ldr	r3, [r7, #28]
 800b172:	3301      	adds	r3, #1
 800b174:	61fb      	str	r3, [r7, #28]
 800b176:	69fa      	ldr	r2, [r7, #28]
 800b178:	697b      	ldr	r3, [r7, #20]
 800b17a:	429a      	cmp	r2, r3
 800b17c:	d3ed      	bcc.n	800b15a <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 800b17e:	697b      	ldr	r3, [r7, #20]
 800b180:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b184:	d040      	beq.n	800b208 <arm_cfft_f32+0xdc>
 800b186:	697b      	ldr	r3, [r7, #20]
 800b188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b18c:	d845      	bhi.n	800b21a <arm_cfft_f32+0xee>
 800b18e:	697b      	ldr	r3, [r7, #20]
 800b190:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b194:	d033      	beq.n	800b1fe <arm_cfft_f32+0xd2>
 800b196:	697b      	ldr	r3, [r7, #20]
 800b198:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b19c:	d83d      	bhi.n	800b21a <arm_cfft_f32+0xee>
 800b19e:	697b      	ldr	r3, [r7, #20]
 800b1a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1a4:	d026      	beq.n	800b1f4 <arm_cfft_f32+0xc8>
 800b1a6:	697b      	ldr	r3, [r7, #20]
 800b1a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1ac:	d835      	bhi.n	800b21a <arm_cfft_f32+0xee>
 800b1ae:	697b      	ldr	r3, [r7, #20]
 800b1b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1b4:	d028      	beq.n	800b208 <arm_cfft_f32+0xdc>
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b1bc:	d82d      	bhi.n	800b21a <arm_cfft_f32+0xee>
 800b1be:	697b      	ldr	r3, [r7, #20]
 800b1c0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1c4:	d01b      	beq.n	800b1fe <arm_cfft_f32+0xd2>
 800b1c6:	697b      	ldr	r3, [r7, #20]
 800b1c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b1cc:	d825      	bhi.n	800b21a <arm_cfft_f32+0xee>
 800b1ce:	697b      	ldr	r3, [r7, #20]
 800b1d0:	2b80      	cmp	r3, #128	; 0x80
 800b1d2:	d00f      	beq.n	800b1f4 <arm_cfft_f32+0xc8>
 800b1d4:	697b      	ldr	r3, [r7, #20]
 800b1d6:	2b80      	cmp	r3, #128	; 0x80
 800b1d8:	d81f      	bhi.n	800b21a <arm_cfft_f32+0xee>
 800b1da:	697b      	ldr	r3, [r7, #20]
 800b1dc:	2b40      	cmp	r3, #64	; 0x40
 800b1de:	d013      	beq.n	800b208 <arm_cfft_f32+0xdc>
 800b1e0:	697b      	ldr	r3, [r7, #20]
 800b1e2:	2b40      	cmp	r3, #64	; 0x40
 800b1e4:	d819      	bhi.n	800b21a <arm_cfft_f32+0xee>
 800b1e6:	697b      	ldr	r3, [r7, #20]
 800b1e8:	2b10      	cmp	r3, #16
 800b1ea:	d003      	beq.n	800b1f4 <arm_cfft_f32+0xc8>
 800b1ec:	697b      	ldr	r3, [r7, #20]
 800b1ee:	2b20      	cmp	r3, #32
 800b1f0:	d005      	beq.n	800b1fe <arm_cfft_f32+0xd2>
 800b1f2:	e012      	b.n	800b21a <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800b1f4:	68b9      	ldr	r1, [r7, #8]
 800b1f6:	68f8      	ldr	r0, [r7, #12]
 800b1f8:	f7fe ff79 	bl	800a0ee <arm_cfft_radix8by2_f32>
    break;
 800b1fc:	e00d      	b.n	800b21a <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800b1fe:	68b9      	ldr	r1, [r7, #8]
 800b200:	68f8      	ldr	r0, [r7, #12]
 800b202:	f7ff f968 	bl	800a4d6 <arm_cfft_radix8by4_f32>
    break;
 800b206:	e008      	b.n	800b21a <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 800b208:	697b      	ldr	r3, [r7, #20]
 800b20a:	b299      	uxth	r1, r3
 800b20c:	68fb      	ldr	r3, [r7, #12]
 800b20e:	685a      	ldr	r2, [r3, #4]
 800b210:	2301      	movs	r3, #1
 800b212:	68b8      	ldr	r0, [r7, #8]
 800b214:	f000 f916 	bl	800b444 <arm_radix8_butterfly_f32>
    break;
 800b218:	bf00      	nop
  }

  if ( bitReverseFlag )
 800b21a:	79bb      	ldrb	r3, [r7, #6]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d007      	beq.n	800b230 <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800b220:	68fb      	ldr	r3, [r7, #12]
 800b222:	8999      	ldrh	r1, [r3, #12]
 800b224:	68fb      	ldr	r3, [r7, #12]
 800b226:	689b      	ldr	r3, [r3, #8]
 800b228:	461a      	mov	r2, r3
 800b22a:	68b8      	ldr	r0, [r7, #8]
 800b22c:	f7fe ff06 	bl	800a03c <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800b230:	79fb      	ldrb	r3, [r7, #7]
 800b232:	2b01      	cmp	r3, #1
 800b234:	d130      	bne.n	800b298 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 800b236:	697b      	ldr	r3, [r7, #20]
 800b238:	ee07 3a90 	vmov	s15, r3
 800b23c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800b240:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b244:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b248:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 800b24c:	68bb      	ldr	r3, [r7, #8]
 800b24e:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800b250:	2300      	movs	r3, #0
 800b252:	61fb      	str	r3, [r7, #28]
 800b254:	e01c      	b.n	800b290 <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 800b256:	69bb      	ldr	r3, [r7, #24]
 800b258:	1d1a      	adds	r2, r3, #4
 800b25a:	61ba      	str	r2, [r7, #24]
 800b25c:	ed93 7a00 	vldr	s14, [r3]
 800b260:	edd7 7a04 	vldr	s15, [r7, #16]
 800b264:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b268:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 800b26c:	69bb      	ldr	r3, [r7, #24]
 800b26e:	edd3 7a00 	vldr	s15, [r3]
 800b272:	eeb1 7a67 	vneg.f32	s14, s15
 800b276:	edd7 7a04 	vldr	s15, [r7, #16]
 800b27a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b27e:	69bb      	ldr	r3, [r7, #24]
 800b280:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 800b284:	69bb      	ldr	r3, [r7, #24]
 800b286:	3304      	adds	r3, #4
 800b288:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 800b28a:	69fb      	ldr	r3, [r7, #28]
 800b28c:	3301      	adds	r3, #1
 800b28e:	61fb      	str	r3, [r7, #28]
 800b290:	69fa      	ldr	r2, [r7, #28]
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	429a      	cmp	r2, r3
 800b296:	d3de      	bcc.n	800b256 <arm_cfft_f32+0x12a>
    }
  }
}
 800b298:	bf00      	nop
 800b29a:	3720      	adds	r7, #32
 800b29c:	46bd      	mov	sp, r7
 800b29e:	bd80      	pop	{r7, pc}

0800b2a0 <arm_cfft_init_f32>:
}
#else
arm_status arm_cfft_init_f32(
  arm_cfft_instance_f32 * S,
  uint16_t fftLen)
{
 800b2a0:	b480      	push	{r7}
 800b2a2:	b085      	sub	sp, #20
 800b2a4:	af00      	add	r7, sp, #0
 800b2a6:	6078      	str	r0, [r7, #4]
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	807b      	strh	r3, [r7, #2]
        /*  Initialise the default arm status */
        arm_status status = ARM_MATH_SUCCESS;
 800b2ac:	2300      	movs	r3, #0
 800b2ae:	73fb      	strb	r3, [r7, #15]

        /*  Initialise the FFT length */
        S->fftLen = fftLen;
 800b2b0:	687b      	ldr	r3, [r7, #4]
 800b2b2:	887a      	ldrh	r2, [r7, #2]
 800b2b4:	801a      	strh	r2, [r3, #0]

        /*  Initialise the Twiddle coefficient pointer */
        S->pTwiddle = NULL;
 800b2b6:	687b      	ldr	r3, [r7, #4]
 800b2b8:	2200      	movs	r2, #0
 800b2ba:	605a      	str	r2, [r3, #4]


        /*  Initializations of Instance structure depending on the FFT length */
        switch (S->fftLen) {
 800b2bc:	687b      	ldr	r3, [r7, #4]
 800b2be:	881b      	ldrh	r3, [r3, #0]
 800b2c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2c4:	d02c      	beq.n	800b320 <arm_cfft_init_f32+0x80>
 800b2c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b2ca:	f300 809e 	bgt.w	800b40a <arm_cfft_init_f32+0x16a>
 800b2ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2d2:	d032      	beq.n	800b33a <arm_cfft_init_f32+0x9a>
 800b2d4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b2d8:	f300 8097 	bgt.w	800b40a <arm_cfft_init_f32+0x16a>
 800b2dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e0:	d038      	beq.n	800b354 <arm_cfft_init_f32+0xb4>
 800b2e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b2e6:	f300 8090 	bgt.w	800b40a <arm_cfft_init_f32+0x16a>
 800b2ea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2ee:	d03e      	beq.n	800b36e <arm_cfft_init_f32+0xce>
 800b2f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b2f4:	f300 8089 	bgt.w	800b40a <arm_cfft_init_f32+0x16a>
 800b2f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b2fc:	d044      	beq.n	800b388 <arm_cfft_init_f32+0xe8>
 800b2fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b302:	f300 8082 	bgt.w	800b40a <arm_cfft_init_f32+0x16a>
 800b306:	2b80      	cmp	r3, #128	; 0x80
 800b308:	d04b      	beq.n	800b3a2 <arm_cfft_init_f32+0x102>
 800b30a:	2b80      	cmp	r3, #128	; 0x80
 800b30c:	dc7d      	bgt.n	800b40a <arm_cfft_init_f32+0x16a>
 800b30e:	2b40      	cmp	r3, #64	; 0x40
 800b310:	d054      	beq.n	800b3bc <arm_cfft_init_f32+0x11c>
 800b312:	2b40      	cmp	r3, #64	; 0x40
 800b314:	dc79      	bgt.n	800b40a <arm_cfft_init_f32+0x16a>
 800b316:	2b10      	cmp	r3, #16
 800b318:	d06a      	beq.n	800b3f0 <arm_cfft_init_f32+0x150>
 800b31a:	2b20      	cmp	r3, #32
 800b31c:	d05b      	beq.n	800b3d6 <arm_cfft_init_f32+0x136>
 800b31e:	e074      	b.n	800b40a <arm_cfft_init_f32+0x16a>
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_4096) && defined(ARM_TABLE_BITREVIDX_FLT_4096))
            /*  Initializations of structure parameters for 4096 point FFT */
        case 4096U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,4096);
 800b320:	4b3f      	ldr	r3, [pc, #252]	; (800b420 <arm_cfft_init_f32+0x180>)
 800b322:	899a      	ldrh	r2, [r3, #12]
 800b324:	687b      	ldr	r3, [r7, #4]
 800b326:	819a      	strh	r2, [r3, #12]
 800b328:	4b3d      	ldr	r3, [pc, #244]	; (800b420 <arm_cfft_init_f32+0x180>)
 800b32a:	689a      	ldr	r2, [r3, #8]
 800b32c:	687b      	ldr	r3, [r7, #4]
 800b32e:	609a      	str	r2, [r3, #8]
 800b330:	4b3b      	ldr	r3, [pc, #236]	; (800b420 <arm_cfft_init_f32+0x180>)
 800b332:	685a      	ldr	r2, [r3, #4]
 800b334:	687b      	ldr	r3, [r7, #4]
 800b336:	605a      	str	r2, [r3, #4]
            break;
 800b338:	e06a      	b.n	800b410 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048))
            /*  Initializations of structure parameters for 2048 point FFT */
        case 2048U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,2048);
 800b33a:	4b3a      	ldr	r3, [pc, #232]	; (800b424 <arm_cfft_init_f32+0x184>)
 800b33c:	899a      	ldrh	r2, [r3, #12]
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	819a      	strh	r2, [r3, #12]
 800b342:	4b38      	ldr	r3, [pc, #224]	; (800b424 <arm_cfft_init_f32+0x184>)
 800b344:	689a      	ldr	r2, [r3, #8]
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	609a      	str	r2, [r3, #8]
 800b34a:	4b36      	ldr	r3, [pc, #216]	; (800b424 <arm_cfft_init_f32+0x184>)
 800b34c:	685a      	ldr	r2, [r3, #4]
 800b34e:	687b      	ldr	r3, [r7, #4]
 800b350:	605a      	str	r2, [r3, #4]

            break;
 800b352:	e05d      	b.n	800b410 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024))
            /*  Initializations of structure parameters for 1024 point FFT */
        case 1024U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,1024);
 800b354:	4b34      	ldr	r3, [pc, #208]	; (800b428 <arm_cfft_init_f32+0x188>)
 800b356:	899a      	ldrh	r2, [r3, #12]
 800b358:	687b      	ldr	r3, [r7, #4]
 800b35a:	819a      	strh	r2, [r3, #12]
 800b35c:	4b32      	ldr	r3, [pc, #200]	; (800b428 <arm_cfft_init_f32+0x188>)
 800b35e:	689a      	ldr	r2, [r3, #8]
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	609a      	str	r2, [r3, #8]
 800b364:	4b30      	ldr	r3, [pc, #192]	; (800b428 <arm_cfft_init_f32+0x188>)
 800b366:	685a      	ldr	r2, [r3, #4]
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	605a      	str	r2, [r3, #4]

            break;
 800b36c:	e050      	b.n	800b410 <arm_cfft_init_f32+0x170>

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512))
            /*  Initializations of structure parameters for 512 point FFT */
        case 512U:
            /*  Initialise the bit reversal table modifier */
            FFTINIT(f32,512);
 800b36e:	4b2f      	ldr	r3, [pc, #188]	; (800b42c <arm_cfft_init_f32+0x18c>)
 800b370:	899a      	ldrh	r2, [r3, #12]
 800b372:	687b      	ldr	r3, [r7, #4]
 800b374:	819a      	strh	r2, [r3, #12]
 800b376:	4b2d      	ldr	r3, [pc, #180]	; (800b42c <arm_cfft_init_f32+0x18c>)
 800b378:	689a      	ldr	r2, [r3, #8]
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	609a      	str	r2, [r3, #8]
 800b37e:	4b2b      	ldr	r3, [pc, #172]	; (800b42c <arm_cfft_init_f32+0x18c>)
 800b380:	685a      	ldr	r2, [r3, #4]
 800b382:	687b      	ldr	r3, [r7, #4]
 800b384:	605a      	str	r2, [r3, #4]
            break;
 800b386:	e043      	b.n	800b410 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256))
        case 256U:
            FFTINIT(f32,256);
 800b388:	4b29      	ldr	r3, [pc, #164]	; (800b430 <arm_cfft_init_f32+0x190>)
 800b38a:	899a      	ldrh	r2, [r3, #12]
 800b38c:	687b      	ldr	r3, [r7, #4]
 800b38e:	819a      	strh	r2, [r3, #12]
 800b390:	4b27      	ldr	r3, [pc, #156]	; (800b430 <arm_cfft_init_f32+0x190>)
 800b392:	689a      	ldr	r2, [r3, #8]
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	609a      	str	r2, [r3, #8]
 800b398:	4b25      	ldr	r3, [pc, #148]	; (800b430 <arm_cfft_init_f32+0x190>)
 800b39a:	685a      	ldr	r2, [r3, #4]
 800b39c:	687b      	ldr	r3, [r7, #4]
 800b39e:	605a      	str	r2, [r3, #4]
            break;
 800b3a0:	e036      	b.n	800b410 <arm_cfft_init_f32+0x170>
#endif

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128))
        case 128U:
            FFTINIT(f32,128);
 800b3a2:	4b24      	ldr	r3, [pc, #144]	; (800b434 <arm_cfft_init_f32+0x194>)
 800b3a4:	899a      	ldrh	r2, [r3, #12]
 800b3a6:	687b      	ldr	r3, [r7, #4]
 800b3a8:	819a      	strh	r2, [r3, #12]
 800b3aa:	4b22      	ldr	r3, [pc, #136]	; (800b434 <arm_cfft_init_f32+0x194>)
 800b3ac:	689a      	ldr	r2, [r3, #8]
 800b3ae:	687b      	ldr	r3, [r7, #4]
 800b3b0:	609a      	str	r2, [r3, #8]
 800b3b2:	4b20      	ldr	r3, [pc, #128]	; (800b434 <arm_cfft_init_f32+0x194>)
 800b3b4:	685a      	ldr	r2, [r3, #4]
 800b3b6:	687b      	ldr	r3, [r7, #4]
 800b3b8:	605a      	str	r2, [r3, #4]
            break;
 800b3ba:	e029      	b.n	800b410 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64))
        case 64U:
            FFTINIT(f32,64);
 800b3bc:	4b1e      	ldr	r3, [pc, #120]	; (800b438 <arm_cfft_init_f32+0x198>)
 800b3be:	899a      	ldrh	r2, [r3, #12]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	819a      	strh	r2, [r3, #12]
 800b3c4:	4b1c      	ldr	r3, [pc, #112]	; (800b438 <arm_cfft_init_f32+0x198>)
 800b3c6:	689a      	ldr	r2, [r3, #8]
 800b3c8:	687b      	ldr	r3, [r7, #4]
 800b3ca:	609a      	str	r2, [r3, #8]
 800b3cc:	4b1a      	ldr	r3, [pc, #104]	; (800b438 <arm_cfft_init_f32+0x198>)
 800b3ce:	685a      	ldr	r2, [r3, #4]
 800b3d0:	687b      	ldr	r3, [r7, #4]
 800b3d2:	605a      	str	r2, [r3, #4]
            break;
 800b3d4:	e01c      	b.n	800b410 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32))
        case 32U:
            FFTINIT(f32,32);
 800b3d6:	4b19      	ldr	r3, [pc, #100]	; (800b43c <arm_cfft_init_f32+0x19c>)
 800b3d8:	899a      	ldrh	r2, [r3, #12]
 800b3da:	687b      	ldr	r3, [r7, #4]
 800b3dc:	819a      	strh	r2, [r3, #12]
 800b3de:	4b17      	ldr	r3, [pc, #92]	; (800b43c <arm_cfft_init_f32+0x19c>)
 800b3e0:	689a      	ldr	r2, [r3, #8]
 800b3e2:	687b      	ldr	r3, [r7, #4]
 800b3e4:	609a      	str	r2, [r3, #8]
 800b3e6:	4b15      	ldr	r3, [pc, #84]	; (800b43c <arm_cfft_init_f32+0x19c>)
 800b3e8:	685a      	ldr	r2, [r3, #4]
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	605a      	str	r2, [r3, #4]
            break;
 800b3ee:	e00f      	b.n	800b410 <arm_cfft_init_f32+0x170>
#endif 

#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16))
        case 16U:
            /*  Initializations of structure parameters for 16 point FFT */
            FFTINIT(f32,16);
 800b3f0:	4b13      	ldr	r3, [pc, #76]	; (800b440 <arm_cfft_init_f32+0x1a0>)
 800b3f2:	899a      	ldrh	r2, [r3, #12]
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	819a      	strh	r2, [r3, #12]
 800b3f8:	4b11      	ldr	r3, [pc, #68]	; (800b440 <arm_cfft_init_f32+0x1a0>)
 800b3fa:	689a      	ldr	r2, [r3, #8]
 800b3fc:	687b      	ldr	r3, [r7, #4]
 800b3fe:	609a      	str	r2, [r3, #8]
 800b400:	4b0f      	ldr	r3, [pc, #60]	; (800b440 <arm_cfft_init_f32+0x1a0>)
 800b402:	685a      	ldr	r2, [r3, #4]
 800b404:	687b      	ldr	r3, [r7, #4]
 800b406:	605a      	str	r2, [r3, #4]
            break;
 800b408:	e002      	b.n	800b410 <arm_cfft_init_f32+0x170>
#endif

        default:
            /*  Reporting argument error if fftSize is not valid value */
            status = ARM_MATH_ARGUMENT_ERROR;
 800b40a:	23ff      	movs	r3, #255	; 0xff
 800b40c:	73fb      	strb	r3, [r7, #15]
            break;
 800b40e:	bf00      	nop
        }


        return (status);
 800b410:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800b414:	4618      	mov	r0, r3
 800b416:	3714      	adds	r7, #20
 800b418:	46bd      	mov	sp, r7
 800b41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b41e:	4770      	bx	lr
 800b420:	0803c7c8 	.word	0x0803c7c8
 800b424:	0803c7b8 	.word	0x0803c7b8
 800b428:	0803c7a8 	.word	0x0803c7a8
 800b42c:	0803c798 	.word	0x0803c798
 800b430:	0803c788 	.word	0x0803c788
 800b434:	0803c778 	.word	0x0803c778
 800b438:	0803c768 	.word	0x0803c768
 800b43c:	0803c758 	.word	0x0803c758
 800b440:	0803c748 	.word	0x0803c748

0800b444 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 800b444:	b480      	push	{r7}
 800b446:	b0bd      	sub	sp, #244	; 0xf4
 800b448:	af00      	add	r7, sp, #0
 800b44a:	60f8      	str	r0, [r7, #12]
 800b44c:	607a      	str	r2, [r7, #4]
 800b44e:	461a      	mov	r2, r3
 800b450:	460b      	mov	r3, r1
 800b452:	817b      	strh	r3, [r7, #10]
 800b454:	4613      	mov	r3, r2
 800b456:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 800b458:	4b09      	ldr	r3, [pc, #36]	; (800b480 <arm_radix8_butterfly_f32+0x3c>)
 800b45a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

   n2 = fftLen;
 800b45e:	897b      	ldrh	r3, [r7, #10]
 800b460:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4

   do
   {
      n1 = n2;
 800b464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b468:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
      n2 = n2 >> 3;
 800b46c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b470:	08db      	lsrs	r3, r3, #3
 800b472:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      i1 = 0;
 800b476:	2300      	movs	r3, #0
 800b478:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800b47c:	e002      	b.n	800b484 <arm_radix8_butterfly_f32+0x40>
 800b47e:	bf00      	nop
 800b480:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 800b484:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800b488:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b48c:	4413      	add	r3, r2
 800b48e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
         i3 = i2 + n2;
 800b492:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800b496:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b49a:	4413      	add	r3, r2
 800b49c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
         i4 = i3 + n2;
 800b4a0:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800b4a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4a8:	4413      	add	r3, r2
 800b4aa:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
         i5 = i4 + n2;
 800b4ae:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800b4b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4b6:	4413      	add	r3, r2
 800b4b8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
         i6 = i5 + n2;
 800b4bc:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800b4c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4c4:	4413      	add	r3, r2
 800b4c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
         i7 = i6 + n2;
 800b4ca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800b4ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4d2:	4413      	add	r3, r2
 800b4d4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
         i8 = i7 + n2;
 800b4d8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800b4dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800b4e0:	4413      	add	r3, r2
 800b4e2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800b4e6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b4ea:	00db      	lsls	r3, r3, #3
 800b4ec:	68fa      	ldr	r2, [r7, #12]
 800b4ee:	4413      	add	r3, r2
 800b4f0:	ed93 7a00 	vldr	s14, [r3]
 800b4f4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b4f8:	00db      	lsls	r3, r3, #3
 800b4fa:	68fa      	ldr	r2, [r7, #12]
 800b4fc:	4413      	add	r3, r2
 800b4fe:	edd3 7a00 	vldr	s15, [r3]
 800b502:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b506:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800b50a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b50e:	00db      	lsls	r3, r3, #3
 800b510:	68fa      	ldr	r2, [r7, #12]
 800b512:	4413      	add	r3, r2
 800b514:	ed93 7a00 	vldr	s14, [r3]
 800b518:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b51c:	00db      	lsls	r3, r3, #3
 800b51e:	68fa      	ldr	r2, [r7, #12]
 800b520:	4413      	add	r3, r2
 800b522:	edd3 7a00 	vldr	s15, [r3]
 800b526:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b52a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800b52e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b532:	00db      	lsls	r3, r3, #3
 800b534:	68fa      	ldr	r2, [r7, #12]
 800b536:	4413      	add	r3, r2
 800b538:	ed93 7a00 	vldr	s14, [r3]
 800b53c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b540:	00db      	lsls	r3, r3, #3
 800b542:	68fa      	ldr	r2, [r7, #12]
 800b544:	4413      	add	r3, r2
 800b546:	edd3 7a00 	vldr	s15, [r3]
 800b54a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b54e:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800b552:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b556:	00db      	lsls	r3, r3, #3
 800b558:	68fa      	ldr	r2, [r7, #12]
 800b55a:	4413      	add	r3, r2
 800b55c:	ed93 7a00 	vldr	s14, [r3]
 800b560:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b564:	00db      	lsls	r3, r3, #3
 800b566:	68fa      	ldr	r2, [r7, #12]
 800b568:	4413      	add	r3, r2
 800b56a:	edd3 7a00 	vldr	s15, [r3]
 800b56e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b572:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800b576:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b57a:	00db      	lsls	r3, r3, #3
 800b57c:	68fa      	ldr	r2, [r7, #12]
 800b57e:	4413      	add	r3, r2
 800b580:	ed93 7a00 	vldr	s14, [r3]
 800b584:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b588:	00db      	lsls	r3, r3, #3
 800b58a:	68fa      	ldr	r2, [r7, #12]
 800b58c:	4413      	add	r3, r2
 800b58e:	edd3 7a00 	vldr	s15, [r3]
 800b592:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b596:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800b59a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b59e:	00db      	lsls	r3, r3, #3
 800b5a0:	68fa      	ldr	r2, [r7, #12]
 800b5a2:	4413      	add	r3, r2
 800b5a4:	ed93 7a00 	vldr	s14, [r3]
 800b5a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b5ac:	00db      	lsls	r3, r3, #3
 800b5ae:	68fa      	ldr	r2, [r7, #12]
 800b5b0:	4413      	add	r3, r2
 800b5b2:	edd3 7a00 	vldr	s15, [r3]
 800b5b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b5ba:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800b5be:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5c2:	00db      	lsls	r3, r3, #3
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4413      	add	r3, r2
 800b5c8:	ed93 7a00 	vldr	s14, [r3]
 800b5cc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b5d0:	00db      	lsls	r3, r3, #3
 800b5d2:	68fa      	ldr	r2, [r7, #12]
 800b5d4:	4413      	add	r3, r2
 800b5d6:	edd3 7a00 	vldr	s15, [r3]
 800b5da:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b5de:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800b5e2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b5e6:	00db      	lsls	r3, r3, #3
 800b5e8:	68fa      	ldr	r2, [r7, #12]
 800b5ea:	4413      	add	r3, r2
 800b5ec:	ed93 7a00 	vldr	s14, [r3]
 800b5f0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b5f4:	00db      	lsls	r3, r3, #3
 800b5f6:	68fa      	ldr	r2, [r7, #12]
 800b5f8:	4413      	add	r3, r2
 800b5fa:	edd3 7a00 	vldr	s15, [r3]
 800b5fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b602:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         t1 = r1 - r3;
 800b606:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b60a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b60e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b612:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r1 = r1 + r3;
 800b616:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b61a:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b61e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b622:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r3 = r2 - r4;
 800b626:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b62a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b62e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b632:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
         r2 = r2 + r4;
 800b636:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b63a:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b63e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b642:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1] = r1 + r2;
 800b646:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b64a:	00db      	lsls	r3, r3, #3
 800b64c:	68fa      	ldr	r2, [r7, #12]
 800b64e:	4413      	add	r3, r2
 800b650:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b654:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b658:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b65c:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800b660:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b664:	00db      	lsls	r3, r3, #3
 800b666:	68fa      	ldr	r2, [r7, #12]
 800b668:	4413      	add	r3, r2
 800b66a:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b66e:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b672:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b676:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800b67a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b67e:	00db      	lsls	r3, r3, #3
 800b680:	3304      	adds	r3, #4
 800b682:	68fa      	ldr	r2, [r7, #12]
 800b684:	4413      	add	r3, r2
 800b686:	ed93 7a00 	vldr	s14, [r3]
 800b68a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b68e:	00db      	lsls	r3, r3, #3
 800b690:	3304      	adds	r3, #4
 800b692:	68fa      	ldr	r2, [r7, #12]
 800b694:	4413      	add	r3, r2
 800b696:	edd3 7a00 	vldr	s15, [r3]
 800b69a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b69e:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800b6a2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b6a6:	00db      	lsls	r3, r3, #3
 800b6a8:	3304      	adds	r3, #4
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	4413      	add	r3, r2
 800b6ae:	ed93 7a00 	vldr	s14, [r3]
 800b6b2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b6b6:	00db      	lsls	r3, r3, #3
 800b6b8:	3304      	adds	r3, #4
 800b6ba:	68fa      	ldr	r2, [r7, #12]
 800b6bc:	4413      	add	r3, r2
 800b6be:	edd3 7a00 	vldr	s15, [r3]
 800b6c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b6c6:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800b6ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6ce:	00db      	lsls	r3, r3, #3
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	68fa      	ldr	r2, [r7, #12]
 800b6d4:	4413      	add	r3, r2
 800b6d6:	ed93 7a00 	vldr	s14, [r3]
 800b6da:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b6de:	00db      	lsls	r3, r3, #3
 800b6e0:	3304      	adds	r3, #4
 800b6e2:	68fa      	ldr	r2, [r7, #12]
 800b6e4:	4413      	add	r3, r2
 800b6e6:	edd3 7a00 	vldr	s15, [r3]
 800b6ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b6ee:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800b6f2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b6f6:	00db      	lsls	r3, r3, #3
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	68fa      	ldr	r2, [r7, #12]
 800b6fc:	4413      	add	r3, r2
 800b6fe:	ed93 7a00 	vldr	s14, [r3]
 800b702:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b706:	00db      	lsls	r3, r3, #3
 800b708:	3304      	adds	r3, #4
 800b70a:	68fa      	ldr	r2, [r7, #12]
 800b70c:	4413      	add	r3, r2
 800b70e:	edd3 7a00 	vldr	s15, [r3]
 800b712:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b716:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800b71a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b71e:	00db      	lsls	r3, r3, #3
 800b720:	3304      	adds	r3, #4
 800b722:	68fa      	ldr	r2, [r7, #12]
 800b724:	4413      	add	r3, r2
 800b726:	ed93 7a00 	vldr	s14, [r3]
 800b72a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b72e:	00db      	lsls	r3, r3, #3
 800b730:	3304      	adds	r3, #4
 800b732:	68fa      	ldr	r2, [r7, #12]
 800b734:	4413      	add	r3, r2
 800b736:	edd3 7a00 	vldr	s15, [r3]
 800b73a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b73e:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800b742:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b746:	00db      	lsls	r3, r3, #3
 800b748:	3304      	adds	r3, #4
 800b74a:	68fa      	ldr	r2, [r7, #12]
 800b74c:	4413      	add	r3, r2
 800b74e:	ed93 7a00 	vldr	s14, [r3]
 800b752:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b756:	00db      	lsls	r3, r3, #3
 800b758:	3304      	adds	r3, #4
 800b75a:	68fa      	ldr	r2, [r7, #12]
 800b75c:	4413      	add	r3, r2
 800b75e:	edd3 7a00 	vldr	s15, [r3]
 800b762:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b766:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800b76a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b76e:	00db      	lsls	r3, r3, #3
 800b770:	3304      	adds	r3, #4
 800b772:	68fa      	ldr	r2, [r7, #12]
 800b774:	4413      	add	r3, r2
 800b776:	ed93 7a00 	vldr	s14, [r3]
 800b77a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b77e:	00db      	lsls	r3, r3, #3
 800b780:	3304      	adds	r3, #4
 800b782:	68fa      	ldr	r2, [r7, #12]
 800b784:	4413      	add	r3, r2
 800b786:	edd3 7a00 	vldr	s15, [r3]
 800b78a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b78e:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800b792:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b796:	00db      	lsls	r3, r3, #3
 800b798:	3304      	adds	r3, #4
 800b79a:	68fa      	ldr	r2, [r7, #12]
 800b79c:	4413      	add	r3, r2
 800b79e:	ed93 7a00 	vldr	s14, [r3]
 800b7a2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b7a6:	00db      	lsls	r3, r3, #3
 800b7a8:	3304      	adds	r3, #4
 800b7aa:	68fa      	ldr	r2, [r7, #12]
 800b7ac:	4413      	add	r3, r2
 800b7ae:	edd3 7a00 	vldr	s15, [r3]
 800b7b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7b6:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         t2 = r1 - s3;
 800b7ba:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b7be:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b7c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7c6:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         r1 = r1 + s3;
 800b7ca:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b7ce:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b7d2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7d6:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         s3 = r2 - r4;
 800b7da:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b7de:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b7e2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b7e6:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
         r2 = r2 + r4;
 800b7ea:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800b7ee:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800b7f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b7f6:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 800b7fa:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800b7fe:	00db      	lsls	r3, r3, #3
 800b800:	3304      	adds	r3, #4
 800b802:	68fa      	ldr	r2, [r7, #12]
 800b804:	4413      	add	r3, r2
 800b806:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b80a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b80e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b812:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 800b816:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800b81a:	00db      	lsls	r3, r3, #3
 800b81c:	3304      	adds	r3, #4
 800b81e:	68fa      	ldr	r2, [r7, #12]
 800b820:	4413      	add	r3, r2
 800b822:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800b826:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b82a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b82e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 800b832:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b836:	00db      	lsls	r3, r3, #3
 800b838:	68fa      	ldr	r2, [r7, #12]
 800b83a:	4413      	add	r3, r2
 800b83c:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b840:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b844:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b848:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 800b84c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b850:	00db      	lsls	r3, r3, #3
 800b852:	68fa      	ldr	r2, [r7, #12]
 800b854:	4413      	add	r3, r2
 800b856:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b85a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800b85e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b862:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 800b866:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800b86a:	00db      	lsls	r3, r3, #3
 800b86c:	3304      	adds	r3, #4
 800b86e:	68fa      	ldr	r2, [r7, #12]
 800b870:	4413      	add	r3, r2
 800b872:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b876:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b87a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b87e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 800b882:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800b886:	00db      	lsls	r3, r3, #3
 800b888:	3304      	adds	r3, #4
 800b88a:	68fa      	ldr	r2, [r7, #12]
 800b88c:	4413      	add	r3, r2
 800b88e:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800b892:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800b896:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b89a:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 800b89e:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b8a2:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b8a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8aa:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b8ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8b2:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
         r6 = (r6 + r8) * C81;
 800b8b6:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800b8ba:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800b8be:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8c2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b8c6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8ca:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
         r2 = (s6 - s8) * C81;
 800b8ce:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b8d2:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b8d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b8da:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b8de:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8e2:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
         s6 = (s6 + s8) * C81;
 800b8e6:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800b8ea:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b8ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b8f2:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800b8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800b8fa:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
         t1 = r5 - r1;
 800b8fe:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b902:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b906:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b90a:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
         r5 = r5 + r1;
 800b90e:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b912:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800b916:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b91a:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
         r8 = r7 - r6;
 800b91e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b922:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b926:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b92a:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
         r7 = r7 + r6;
 800b92e:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800b932:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800b936:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b93a:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
         t2 = s5 - r2;
 800b93e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b942:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b946:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b94a:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
         s5 = s5 + r2;
 800b94e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b952:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800b956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b95a:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
         s8 = s7 - s6;
 800b95e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b962:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b966:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b96a:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
         s7 = s7 + s6;
 800b96e:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800b972:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800b976:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b97a:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
         pSrc[2 * i2]     = r5 + s7;
 800b97e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b982:	00db      	lsls	r3, r3, #3
 800b984:	68fa      	ldr	r2, [r7, #12]
 800b986:	4413      	add	r3, r2
 800b988:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b98c:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b990:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b994:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 800b998:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800b99c:	00db      	lsls	r3, r3, #3
 800b99e:	68fa      	ldr	r2, [r7, #12]
 800b9a0:	4413      	add	r3, r2
 800b9a2:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800b9a6:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800b9aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9ae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 800b9b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800b9b6:	00db      	lsls	r3, r3, #3
 800b9b8:	68fa      	ldr	r2, [r7, #12]
 800b9ba:	4413      	add	r3, r2
 800b9bc:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b9c0:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b9c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800b9c8:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 800b9cc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800b9d0:	00db      	lsls	r3, r3, #3
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	4413      	add	r3, r2
 800b9d6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800b9da:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800b9de:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9e2:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 800b9e6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800b9ea:	00db      	lsls	r3, r3, #3
 800b9ec:	3304      	adds	r3, #4
 800b9ee:	68fa      	ldr	r2, [r7, #12]
 800b9f0:	4413      	add	r3, r2
 800b9f2:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800b9f6:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800b9fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b9fe:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 800ba02:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800ba06:	00db      	lsls	r3, r3, #3
 800ba08:	3304      	adds	r3, #4
 800ba0a:	68fa      	ldr	r2, [r7, #12]
 800ba0c:	4413      	add	r3, r2
 800ba0e:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800ba12:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800ba16:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba1a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 800ba1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800ba22:	00db      	lsls	r3, r3, #3
 800ba24:	3304      	adds	r3, #4
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	4413      	add	r3, r2
 800ba2a:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ba2e:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ba32:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ba36:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 800ba3a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800ba3e:	00db      	lsls	r3, r3, #3
 800ba40:	3304      	adds	r3, #4
 800ba42:	68fa      	ldr	r2, [r7, #12]
 800ba44:	4413      	add	r3, r2
 800ba46:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800ba4a:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800ba4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800ba52:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 800ba56:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ba5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ba5e:	4413      	add	r3, r2
 800ba60:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
      } while (i1 < fftLen);
 800ba64:	897b      	ldrh	r3, [r7, #10]
 800ba66:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800ba6a:	429a      	cmp	r2, r3
 800ba6c:	f4ff ad0a 	bcc.w	800b484 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 800ba70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ba74:	2b07      	cmp	r3, #7
 800ba76:	f240 84e3 	bls.w	800c440 <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
      j = 1;
 800ba80:	2301      	movs	r3, #1
 800ba82:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 800ba86:	893b      	ldrh	r3, [r7, #8]
 800ba88:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ba8c:	4413      	add	r3, r2
 800ba8e:	67fb      	str	r3, [r7, #124]	; 0x7c
         ia1 = id;
 800ba90:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba92:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
         ia2 = ia1 + id;
 800ba96:	f8d7 20ec 	ldr.w	r2, [r7, #236]	; 0xec
 800ba9a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ba9c:	4413      	add	r3, r2
 800ba9e:	67bb      	str	r3, [r7, #120]	; 0x78
         ia3 = ia2 + id;
 800baa0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800baa2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800baa4:	4413      	add	r3, r2
 800baa6:	677b      	str	r3, [r7, #116]	; 0x74
         ia4 = ia3 + id;
 800baa8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800baaa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800baac:	4413      	add	r3, r2
 800baae:	673b      	str	r3, [r7, #112]	; 0x70
         ia5 = ia4 + id;
 800bab0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800bab2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bab4:	4413      	add	r3, r2
 800bab6:	66fb      	str	r3, [r7, #108]	; 0x6c
         ia6 = ia5 + id;
 800bab8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800baba:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800babc:	4413      	add	r3, r2
 800babe:	66bb      	str	r3, [r7, #104]	; 0x68
         ia7 = ia6 + id;
 800bac0:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bac2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800bac4:	4413      	add	r3, r2
 800bac6:	667b      	str	r3, [r7, #100]	; 0x64

         co2 = pCoef[2 * ia1];
 800bac8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bacc:	00db      	lsls	r3, r3, #3
 800bace:	687a      	ldr	r2, [r7, #4]
 800bad0:	4413      	add	r3, r2
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	663b      	str	r3, [r7, #96]	; 0x60
         co3 = pCoef[2 * ia2];
 800bad6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bad8:	00db      	lsls	r3, r3, #3
 800bada:	687a      	ldr	r2, [r7, #4]
 800badc:	4413      	add	r3, r2
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	65fb      	str	r3, [r7, #92]	; 0x5c
         co4 = pCoef[2 * ia3];
 800bae2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bae4:	00db      	lsls	r3, r3, #3
 800bae6:	687a      	ldr	r2, [r7, #4]
 800bae8:	4413      	add	r3, r2
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	65bb      	str	r3, [r7, #88]	; 0x58
         co5 = pCoef[2 * ia4];
 800baee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800baf0:	00db      	lsls	r3, r3, #3
 800baf2:	687a      	ldr	r2, [r7, #4]
 800baf4:	4413      	add	r3, r2
 800baf6:	681b      	ldr	r3, [r3, #0]
 800baf8:	657b      	str	r3, [r7, #84]	; 0x54
         co6 = pCoef[2 * ia5];
 800bafa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bafc:	00db      	lsls	r3, r3, #3
 800bafe:	687a      	ldr	r2, [r7, #4]
 800bb00:	4413      	add	r3, r2
 800bb02:	681b      	ldr	r3, [r3, #0]
 800bb04:	653b      	str	r3, [r7, #80]	; 0x50
         co7 = pCoef[2 * ia6];
 800bb06:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb08:	00db      	lsls	r3, r3, #3
 800bb0a:	687a      	ldr	r2, [r7, #4]
 800bb0c:	4413      	add	r3, r2
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	64fb      	str	r3, [r7, #76]	; 0x4c
         co8 = pCoef[2 * ia7];
 800bb12:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb14:	00db      	lsls	r3, r3, #3
 800bb16:	687a      	ldr	r2, [r7, #4]
 800bb18:	4413      	add	r3, r2
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	64bb      	str	r3, [r7, #72]	; 0x48
         si2 = pCoef[2 * ia1 + 1];
 800bb1e:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800bb22:	00db      	lsls	r3, r3, #3
 800bb24:	3304      	adds	r3, #4
 800bb26:	687a      	ldr	r2, [r7, #4]
 800bb28:	4413      	add	r3, r2
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	647b      	str	r3, [r7, #68]	; 0x44
         si3 = pCoef[2 * ia2 + 1];
 800bb2e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800bb30:	00db      	lsls	r3, r3, #3
 800bb32:	3304      	adds	r3, #4
 800bb34:	687a      	ldr	r2, [r7, #4]
 800bb36:	4413      	add	r3, r2
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	643b      	str	r3, [r7, #64]	; 0x40
         si4 = pCoef[2 * ia3 + 1];
 800bb3c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800bb3e:	00db      	lsls	r3, r3, #3
 800bb40:	3304      	adds	r3, #4
 800bb42:	687a      	ldr	r2, [r7, #4]
 800bb44:	4413      	add	r3, r2
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	63fb      	str	r3, [r7, #60]	; 0x3c
         si5 = pCoef[2 * ia4 + 1];
 800bb4a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800bb4c:	00db      	lsls	r3, r3, #3
 800bb4e:	3304      	adds	r3, #4
 800bb50:	687a      	ldr	r2, [r7, #4]
 800bb52:	4413      	add	r3, r2
 800bb54:	681b      	ldr	r3, [r3, #0]
 800bb56:	63bb      	str	r3, [r7, #56]	; 0x38
         si6 = pCoef[2 * ia5 + 1];
 800bb58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb5a:	00db      	lsls	r3, r3, #3
 800bb5c:	3304      	adds	r3, #4
 800bb5e:	687a      	ldr	r2, [r7, #4]
 800bb60:	4413      	add	r3, r2
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	637b      	str	r3, [r7, #52]	; 0x34
         si7 = pCoef[2 * ia6 + 1];
 800bb66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800bb68:	00db      	lsls	r3, r3, #3
 800bb6a:	3304      	adds	r3, #4
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	4413      	add	r3, r2
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	633b      	str	r3, [r7, #48]	; 0x30
         si8 = pCoef[2 * ia7 + 1];
 800bb74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bb76:	00db      	lsls	r3, r3, #3
 800bb78:	3304      	adds	r3, #4
 800bb7a:	687a      	ldr	r2, [r7, #4]
 800bb7c:	4413      	add	r3, r2
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	62fb      	str	r3, [r7, #44]	; 0x2c

         i1 = j;
 800bb82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800bb86:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 800bb8a:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800bb8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bb92:	4413      	add	r3, r2
 800bb94:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
            i3 = i2 + n2;
 800bb98:	f8d7 20d4 	ldr.w	r2, [r7, #212]	; 0xd4
 800bb9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bba0:	4413      	add	r3, r2
 800bba2:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
            i4 = i3 + n2;
 800bba6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800bbaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbae:	4413      	add	r3, r2
 800bbb0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
            i5 = i4 + n2;
 800bbb4:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800bbb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbbc:	4413      	add	r3, r2
 800bbbe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
            i6 = i5 + n2;
 800bbc2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800bbc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbca:	4413      	add	r3, r2
 800bbcc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
            i7 = i6 + n2;
 800bbd0:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800bbd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbd8:	4413      	add	r3, r2
 800bbda:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
            i8 = i7 + n2;
 800bbde:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800bbe2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800bbe6:	4413      	add	r3, r2
 800bbe8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 800bbec:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bbf0:	00db      	lsls	r3, r3, #3
 800bbf2:	68fa      	ldr	r2, [r7, #12]
 800bbf4:	4413      	add	r3, r2
 800bbf6:	ed93 7a00 	vldr	s14, [r3]
 800bbfa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bbfe:	00db      	lsls	r3, r3, #3
 800bc00:	68fa      	ldr	r2, [r7, #12]
 800bc02:	4413      	add	r3, r2
 800bc04:	edd3 7a00 	vldr	s15, [r3]
 800bc08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc0c:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 800bc10:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bc14:	00db      	lsls	r3, r3, #3
 800bc16:	68fa      	ldr	r2, [r7, #12]
 800bc18:	4413      	add	r3, r2
 800bc1a:	ed93 7a00 	vldr	s14, [r3]
 800bc1e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bc22:	00db      	lsls	r3, r3, #3
 800bc24:	68fa      	ldr	r2, [r7, #12]
 800bc26:	4413      	add	r3, r2
 800bc28:	edd3 7a00 	vldr	s15, [r3]
 800bc2c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc30:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 800bc34:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc38:	00db      	lsls	r3, r3, #3
 800bc3a:	68fa      	ldr	r2, [r7, #12]
 800bc3c:	4413      	add	r3, r2
 800bc3e:	ed93 7a00 	vldr	s14, [r3]
 800bc42:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bc46:	00db      	lsls	r3, r3, #3
 800bc48:	68fa      	ldr	r2, [r7, #12]
 800bc4a:	4413      	add	r3, r2
 800bc4c:	edd3 7a00 	vldr	s15, [r3]
 800bc50:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc54:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800bc58:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bc5c:	00db      	lsls	r3, r3, #3
 800bc5e:	68fa      	ldr	r2, [r7, #12]
 800bc60:	4413      	add	r3, r2
 800bc62:	ed93 7a00 	vldr	s14, [r3]
 800bc66:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bc6a:	00db      	lsls	r3, r3, #3
 800bc6c:	68fa      	ldr	r2, [r7, #12]
 800bc6e:	4413      	add	r3, r2
 800bc70:	edd3 7a00 	vldr	s15, [r3]
 800bc74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bc78:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 800bc7c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bc80:	00db      	lsls	r3, r3, #3
 800bc82:	68fa      	ldr	r2, [r7, #12]
 800bc84:	4413      	add	r3, r2
 800bc86:	ed93 7a00 	vldr	s14, [r3]
 800bc8a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bc8e:	00db      	lsls	r3, r3, #3
 800bc90:	68fa      	ldr	r2, [r7, #12]
 800bc92:	4413      	add	r3, r2
 800bc94:	edd3 7a00 	vldr	s15, [r3]
 800bc98:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bc9c:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 800bca0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800bca4:	00db      	lsls	r3, r3, #3
 800bca6:	68fa      	ldr	r2, [r7, #12]
 800bca8:	4413      	add	r3, r2
 800bcaa:	ed93 7a00 	vldr	s14, [r3]
 800bcae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800bcb2:	00db      	lsls	r3, r3, #3
 800bcb4:	68fa      	ldr	r2, [r7, #12]
 800bcb6:	4413      	add	r3, r2
 800bcb8:	edd3 7a00 	vldr	s15, [r3]
 800bcbc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bcc0:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800bcc4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bcc8:	00db      	lsls	r3, r3, #3
 800bcca:	68fa      	ldr	r2, [r7, #12]
 800bccc:	4413      	add	r3, r2
 800bcce:	ed93 7a00 	vldr	s14, [r3]
 800bcd2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bcd6:	00db      	lsls	r3, r3, #3
 800bcd8:	68fa      	ldr	r2, [r7, #12]
 800bcda:	4413      	add	r3, r2
 800bcdc:	edd3 7a00 	vldr	s15, [r3]
 800bce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bce4:	edc7 7a28 	vstr	s15, [r7, #160]	; 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 800bce8:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800bcec:	00db      	lsls	r3, r3, #3
 800bcee:	68fa      	ldr	r2, [r7, #12]
 800bcf0:	4413      	add	r3, r2
 800bcf2:	ed93 7a00 	vldr	s14, [r3]
 800bcf6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bcfa:	00db      	lsls	r3, r3, #3
 800bcfc:	68fa      	ldr	r2, [r7, #12]
 800bcfe:	4413      	add	r3, r2
 800bd00:	edd3 7a00 	vldr	s15, [r3]
 800bd04:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd08:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            t1 = r1 - r3;
 800bd0c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800bd10:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bd14:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd18:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r1 = r1 + r3;
 800bd1c:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800bd20:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bd24:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd28:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r3 = r2 - r4;
 800bd2c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800bd30:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800bd34:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd38:	edc7 7a2a 	vstr	s15, [r7, #168]	; 0xa8
            r2 = r2 + r4;
 800bd3c:	ed97 7a2c 	vldr	s14, [r7, #176]	; 0xb0
 800bd40:	edd7 7a28 	vldr	s15, [r7, #160]	; 0xa0
 800bd44:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd48:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            pSrc[2 * i1] = r1 + r2;
 800bd4c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd50:	00db      	lsls	r3, r3, #3
 800bd52:	68fa      	ldr	r2, [r7, #12]
 800bd54:	4413      	add	r3, r2
 800bd56:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800bd5a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bd5e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd62:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 800bd66:	ed97 7a2e 	vldr	s14, [r7, #184]	; 0xb8
 800bd6a:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bd6e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bd72:	edc7 7a2c 	vstr	s15, [r7, #176]	; 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 800bd76:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bd7a:	00db      	lsls	r3, r3, #3
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	68fa      	ldr	r2, [r7, #12]
 800bd80:	4413      	add	r3, r2
 800bd82:	ed93 7a00 	vldr	s14, [r3]
 800bd86:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bd8a:	00db      	lsls	r3, r3, #3
 800bd8c:	3304      	adds	r3, #4
 800bd8e:	68fa      	ldr	r2, [r7, #12]
 800bd90:	4413      	add	r3, r2
 800bd92:	edd3 7a00 	vldr	s15, [r3]
 800bd96:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bd9a:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800bd9e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bda2:	00db      	lsls	r3, r3, #3
 800bda4:	3304      	adds	r3, #4
 800bda6:	68fa      	ldr	r2, [r7, #12]
 800bda8:	4413      	add	r3, r2
 800bdaa:	ed93 7a00 	vldr	s14, [r3]
 800bdae:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bdb2:	00db      	lsls	r3, r3, #3
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	68fa      	ldr	r2, [r7, #12]
 800bdb8:	4413      	add	r3, r2
 800bdba:	edd3 7a00 	vldr	s15, [r3]
 800bdbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bdc2:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 800bdc6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdca:	00db      	lsls	r3, r3, #3
 800bdcc:	3304      	adds	r3, #4
 800bdce:	68fa      	ldr	r2, [r7, #12]
 800bdd0:	4413      	add	r3, r2
 800bdd2:	ed93 7a00 	vldr	s14, [r3]
 800bdd6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800bdda:	00db      	lsls	r3, r3, #3
 800bddc:	3304      	adds	r3, #4
 800bdde:	68fa      	ldr	r2, [r7, #12]
 800bde0:	4413      	add	r3, r2
 800bde2:	edd3 7a00 	vldr	s15, [r3]
 800bde6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bdea:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 800bdee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800bdf2:	00db      	lsls	r3, r3, #3
 800bdf4:	3304      	adds	r3, #4
 800bdf6:	68fa      	ldr	r2, [r7, #12]
 800bdf8:	4413      	add	r3, r2
 800bdfa:	ed93 7a00 	vldr	s14, [r3]
 800bdfe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800be02:	00db      	lsls	r3, r3, #3
 800be04:	3304      	adds	r3, #4
 800be06:	68fa      	ldr	r2, [r7, #12]
 800be08:	4413      	add	r3, r2
 800be0a:	edd3 7a00 	vldr	s15, [r3]
 800be0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be12:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 800be16:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800be1a:	00db      	lsls	r3, r3, #3
 800be1c:	3304      	adds	r3, #4
 800be1e:	68fa      	ldr	r2, [r7, #12]
 800be20:	4413      	add	r3, r2
 800be22:	ed93 7a00 	vldr	s14, [r3]
 800be26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be2a:	00db      	lsls	r3, r3, #3
 800be2c:	3304      	adds	r3, #4
 800be2e:	68fa      	ldr	r2, [r7, #12]
 800be30:	4413      	add	r3, r2
 800be32:	edd3 7a00 	vldr	s15, [r3]
 800be36:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be3a:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800be3e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800be42:	00db      	lsls	r3, r3, #3
 800be44:	3304      	adds	r3, #4
 800be46:	68fa      	ldr	r2, [r7, #12]
 800be48:	4413      	add	r3, r2
 800be4a:	ed93 7a00 	vldr	s14, [r3]
 800be4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800be52:	00db      	lsls	r3, r3, #3
 800be54:	3304      	adds	r3, #4
 800be56:	68fa      	ldr	r2, [r7, #12]
 800be58:	4413      	add	r3, r2
 800be5a:	edd3 7a00 	vldr	s15, [r3]
 800be5e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800be62:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 800be66:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800be6a:	00db      	lsls	r3, r3, #3
 800be6c:	3304      	adds	r3, #4
 800be6e:	68fa      	ldr	r2, [r7, #12]
 800be70:	4413      	add	r3, r2
 800be72:	ed93 7a00 	vldr	s14, [r3]
 800be76:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800be7a:	00db      	lsls	r3, r3, #3
 800be7c:	3304      	adds	r3, #4
 800be7e:	68fa      	ldr	r2, [r7, #12]
 800be80:	4413      	add	r3, r2
 800be82:	edd3 7a00 	vldr	s15, [r3]
 800be86:	ee77 7a27 	vadd.f32	s15, s14, s15
 800be8a:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800be8e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800be92:	00db      	lsls	r3, r3, #3
 800be94:	3304      	adds	r3, #4
 800be96:	68fa      	ldr	r2, [r7, #12]
 800be98:	4413      	add	r3, r2
 800be9a:	ed93 7a00 	vldr	s14, [r3]
 800be9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800bea2:	00db      	lsls	r3, r3, #3
 800bea4:	3304      	adds	r3, #4
 800bea6:	68fa      	ldr	r2, [r7, #12]
 800bea8:	4413      	add	r3, r2
 800beaa:	edd3 7a00 	vldr	s15, [r3]
 800beae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800beb2:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            t2 = s1 - s3;
 800beb6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800beba:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bec2:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s1 = s1 + s3;
 800bec6:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800beca:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bece:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bed2:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s3 = s2 - s4;
 800bed6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800beda:	edd7 7a08 	vldr	s15, [r7, #32]
 800bede:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bee2:	edc7 7a23 	vstr	s15, [r7, #140]	; 0x8c
            s2 = s2 + s4;
 800bee6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800beea:	edd7 7a08 	vldr	s15, [r7, #32]
 800beee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bef2:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            r1 = t1 + s3;
 800bef6:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800befa:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800befe:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf02:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            t1 = t1 - s3;
 800bf06:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800bf0a:	edd7 7a23 	vldr	s15, [r7, #140]	; 0x8c
 800bf0e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf12:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 800bf16:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800bf1a:	00db      	lsls	r3, r3, #3
 800bf1c:	3304      	adds	r3, #4
 800bf1e:	68fa      	ldr	r2, [r7, #12]
 800bf20:	4413      	add	r3, r2
 800bf22:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf26:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bf2a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf2e:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 800bf32:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800bf36:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bf3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf3e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
            s1 = t2 - r3;
 800bf42:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bf46:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bf4a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bf4e:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            t2 = t2 + r3;
 800bf52:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800bf56:	edd7 7a2a 	vldr	s15, [r7, #168]	; 0xa8
 800bf5a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bf5e:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co5 * r2;
 800bf62:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bf66:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bf6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf6e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800bf72:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bf76:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bf7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf7e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800bf82:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 800bf86:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800bf8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf8e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800bf92:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800bf96:	edd7 7a2c 	vldr	s15, [r7, #176]	; 0xb0
 800bf9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bf9e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800bfa2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bfa6:	00db      	lsls	r3, r3, #3
 800bfa8:	68fa      	ldr	r2, [r7, #12]
 800bfaa:	4413      	add	r3, r2
 800bfac:	ed97 7a07 	vldr	s14, [r7, #28]
 800bfb0:	edd7 7a06 	vldr	s15, [r7, #24]
 800bfb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800bfb8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 800bfbc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800bfc0:	00db      	lsls	r3, r3, #3
 800bfc2:	3304      	adds	r3, #4
 800bfc4:	68fa      	ldr	r2, [r7, #12]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	ed97 7a05 	vldr	s14, [r7, #20]
 800bfcc:	edd7 7a04 	vldr	s15, [r7, #16]
 800bfd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800bfd4:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 800bfd8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bfdc:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800bfe0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bfe4:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 800bfe8:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800bfec:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800bff0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800bff4:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 800bff8:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 800bffc:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c000:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c004:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 800c008:	ed97 7a10 	vldr	s14, [r7, #64]	; 0x40
 800c00c:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c010:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c014:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 800c018:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c01c:	00db      	lsls	r3, r3, #3
 800c01e:	68fa      	ldr	r2, [r7, #12]
 800c020:	4413      	add	r3, r2
 800c022:	ed97 7a07 	vldr	s14, [r7, #28]
 800c026:	edd7 7a06 	vldr	s15, [r7, #24]
 800c02a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c02e:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 800c032:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800c036:	00db      	lsls	r3, r3, #3
 800c038:	3304      	adds	r3, #4
 800c03a:	68fa      	ldr	r2, [r7, #12]
 800c03c:	4413      	add	r3, r2
 800c03e:	ed97 7a05 	vldr	s14, [r7, #20]
 800c042:	edd7 7a04 	vldr	s15, [r7, #16]
 800c046:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c04a:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800c04e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c052:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800c056:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c05a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800c05e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c062:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c066:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c06a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800c06e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800c072:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c076:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c07a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800c07e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c082:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800c086:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c08a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800c08e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c092:	00db      	lsls	r3, r3, #3
 800c094:	68fa      	ldr	r2, [r7, #12]
 800c096:	4413      	add	r3, r2
 800c098:	ed97 7a07 	vldr	s14, [r7, #28]
 800c09c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c0a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0a4:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 800c0a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c0ac:	00db      	lsls	r3, r3, #3
 800c0ae:	3304      	adds	r3, #4
 800c0b0:	68fa      	ldr	r2, [r7, #12]
 800c0b2:	4413      	add	r3, r2
 800c0b4:	ed97 7a05 	vldr	s14, [r7, #20]
 800c0b8:	edd7 7a04 	vldr	s15, [r7, #16]
 800c0bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0c0:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 800c0c4:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800c0c8:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c0cc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0d0:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c0d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0d8:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r6 = (r6 + r8) * C81;
 800c0dc:	ed97 7a2b 	vldr	s14, [r7, #172]	; 0xac
 800c0e0:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c0e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c0e8:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c0ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c0f0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            s1 = (s6 - s8) * C81;
 800c0f4:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800c0f8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c0fc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c100:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c104:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c108:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s6 = (s6 + s8) * C81;
 800c10c:	ed97 7a24 	vldr	s14, [r7, #144]	; 0x90
 800c110:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c114:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c118:	ed97 7a37 	vldr	s14, [r7, #220]	; 0xdc
 800c11c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c120:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t1 = r5 - r1;
 800c124:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c128:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c12c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c130:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            r5 = r5 + r1;
 800c134:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c138:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c13c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c140:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r8 = r7 - r6;
 800c144:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c148:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c14c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c150:	edc7 7a27 	vstr	s15, [r7, #156]	; 0x9c
            r7 = r7 + r6;
 800c154:	ed97 7a29 	vldr	s14, [r7, #164]	; 0xa4
 800c158:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c15c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c160:	edc7 7a29 	vstr	s15, [r7, #164]	; 0xa4
            t2 = s5 - s1;
 800c164:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c168:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c16c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c170:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            s5 = s5 + s1;
 800c174:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c178:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c17c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c180:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s8 = s7 - s6;
 800c184:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800c188:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c18c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c190:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84
            s7 = s7 + s6;
 800c194:	ed97 7a22 	vldr	s14, [r7, #136]	; 0x88
 800c198:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c19c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1a0:	edc7 7a22 	vstr	s15, [r7, #136]	; 0x88
            r1 = r5 + s7;
 800c1a4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c1a8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800c1ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1b0:	edc7 7a2e 	vstr	s15, [r7, #184]	; 0xb8
            r5 = r5 - s7;
 800c1b4:	ed97 7a2d 	vldr	s14, [r7, #180]	; 0xb4
 800c1b8:	edd7 7a22 	vldr	s15, [r7, #136]	; 0x88
 800c1bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1c0:	edc7 7a2d 	vstr	s15, [r7, #180]	; 0xb4
            r6 = t1 + s8;
 800c1c4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c1c8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c1cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c1d0:	edc7 7a2b 	vstr	s15, [r7, #172]	; 0xac
            t1 = t1 - s8;
 800c1d4:	ed97 7a26 	vldr	s14, [r7, #152]	; 0x98
 800c1d8:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800c1dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1e0:	edc7 7a26 	vstr	s15, [r7, #152]	; 0x98
            s1 = s5 - r7;
 800c1e4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c1e8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c1ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c1f0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
            s5 = s5 + r7;
 800c1f4:	ed97 7a25 	vldr	s14, [r7, #148]	; 0x94
 800c1f8:	edd7 7a29 	vldr	s15, [r7, #164]	; 0xa4
 800c1fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c200:	edc7 7a25 	vstr	s15, [r7, #148]	; 0x94
            s6 = t2 - r8;
 800c204:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c208:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c20c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c210:	edc7 7a24 	vstr	s15, [r7, #144]	; 0x90
            t2 = t2 + r8;
 800c214:	ed97 7a20 	vldr	s14, [r7, #128]	; 0x80
 800c218:	edd7 7a27 	vldr	s15, [r7, #156]	; 0x9c
 800c21c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c220:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
            p1 = co2 * r1;
 800c224:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800c228:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c22c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c230:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 800c234:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800c238:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c23c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c240:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 800c244:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 800c248:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800c24c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c250:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 800c254:	ed97 7a11 	vldr	s14, [r7, #68]	; 0x44
 800c258:	edd7 7a2e 	vldr	s15, [r7, #184]	; 0xb8
 800c25c:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c260:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 800c264:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c268:	00db      	lsls	r3, r3, #3
 800c26a:	68fa      	ldr	r2, [r7, #12]
 800c26c:	4413      	add	r3, r2
 800c26e:	ed97 7a07 	vldr	s14, [r7, #28]
 800c272:	edd7 7a06 	vldr	s15, [r7, #24]
 800c276:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c27a:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800c27e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c282:	00db      	lsls	r3, r3, #3
 800c284:	3304      	adds	r3, #4
 800c286:	68fa      	ldr	r2, [r7, #12]
 800c288:	4413      	add	r3, r2
 800c28a:	ed97 7a05 	vldr	s14, [r7, #20]
 800c28e:	edd7 7a04 	vldr	s15, [r7, #16]
 800c292:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c296:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 800c29a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c29e:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c2a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2a6:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 800c2aa:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c2ae:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800c2b2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2b6:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 800c2ba:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800c2be:	edd7 7a25 	vldr	s15, [r7, #148]	; 0x94
 800c2c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2c6:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 800c2ca:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c2ce:	edd7 7a2d 	vldr	s15, [r7, #180]	; 0xb4
 800c2d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c2d6:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 800c2da:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c2de:	00db      	lsls	r3, r3, #3
 800c2e0:	68fa      	ldr	r2, [r7, #12]
 800c2e2:	4413      	add	r3, r2
 800c2e4:	ed97 7a07 	vldr	s14, [r7, #28]
 800c2e8:	edd7 7a06 	vldr	s15, [r7, #24]
 800c2ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c2f0:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 800c2f4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800c2f8:	00db      	lsls	r3, r3, #3
 800c2fa:	3304      	adds	r3, #4
 800c2fc:	68fa      	ldr	r2, [r7, #12]
 800c2fe:	4413      	add	r3, r2
 800c300:	ed97 7a05 	vldr	s14, [r7, #20]
 800c304:	edd7 7a04 	vldr	s15, [r7, #16]
 800c308:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c30c:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 800c310:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c314:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c31c:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 800c320:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c324:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c32c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 800c330:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 800c334:	edd7 7a24 	vldr	s15, [r7, #144]	; 0x90
 800c338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c33c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800c340:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c344:	edd7 7a2b 	vldr	s15, [r7, #172]	; 0xac
 800c348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c34c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800c350:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	68fa      	ldr	r2, [r7, #12]
 800c358:	4413      	add	r3, r2
 800c35a:	ed97 7a07 	vldr	s14, [r7, #28]
 800c35e:	edd7 7a06 	vldr	s15, [r7, #24]
 800c362:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c366:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 800c36a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800c36e:	00db      	lsls	r3, r3, #3
 800c370:	3304      	adds	r3, #4
 800c372:	68fa      	ldr	r2, [r7, #12]
 800c374:	4413      	add	r3, r2
 800c376:	ed97 7a05 	vldr	s14, [r7, #20]
 800c37a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c37e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c382:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 800c386:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800c38a:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800c38e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c392:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 800c396:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c39a:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c39e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3a2:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 800c3a6:	ed97 7a16 	vldr	s14, [r7, #88]	; 0x58
 800c3aa:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800c3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3b2:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 800c3b6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c3ba:	edd7 7a26 	vldr	s15, [r7, #152]	; 0x98
 800c3be:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c3c2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 800c3c6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3ca:	00db      	lsls	r3, r3, #3
 800c3cc:	68fa      	ldr	r2, [r7, #12]
 800c3ce:	4413      	add	r3, r2
 800c3d0:	ed97 7a07 	vldr	s14, [r7, #28]
 800c3d4:	edd7 7a06 	vldr	s15, [r7, #24]
 800c3d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c3dc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 800c3e0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800c3e4:	00db      	lsls	r3, r3, #3
 800c3e6:	3304      	adds	r3, #4
 800c3e8:	68fa      	ldr	r2, [r7, #12]
 800c3ea:	4413      	add	r3, r2
 800c3ec:	ed97 7a05 	vldr	s14, [r7, #20]
 800c3f0:	edd7 7a04 	vldr	s15, [r7, #16]
 800c3f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c3f8:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 800c3fc:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c404:	4413      	add	r3, r2
 800c406:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
         } while (i1 < fftLen);
 800c40a:	897b      	ldrh	r3, [r7, #10]
 800c40c:	f8d7 20e8 	ldr.w	r2, [r7, #232]	; 0xe8
 800c410:	429a      	cmp	r2, r3
 800c412:	f4ff abba 	bcc.w	800bb8a <arm_radix8_butterfly_f32+0x746>

         j++;
 800c416:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c41a:	3301      	adds	r3, #1
 800c41c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
      } while (j < n2);
 800c420:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c428:	429a      	cmp	r2, r3
 800c42a:	f4ff ab2c 	bcc.w	800ba86 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 800c42e:	893b      	ldrh	r3, [r7, #8]
 800c430:	00db      	lsls	r3, r3, #3
 800c432:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 800c434:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c438:	2b07      	cmp	r3, #7
 800c43a:	f63f a813 	bhi.w	800b464 <arm_radix8_butterfly_f32+0x20>
}
 800c43e:	e000      	b.n	800c442 <arm_radix8_butterfly_f32+0xffe>
         break;
 800c440:	bf00      	nop
}
 800c442:	bf00      	nop
 800c444:	37f4      	adds	r7, #244	; 0xf4
 800c446:	46bd      	mov	sp, r7
 800c448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c44c:	4770      	bx	lr
 800c44e:	bf00      	nop

0800c450 <stage_rfft_f32>:
#else
void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800c450:	b480      	push	{r7}
 800c452:	b095      	sub	sp, #84	; 0x54
 800c454:	af00      	add	r7, sp, #0
 800c456:	60f8      	str	r0, [r7, #12]
 800c458:	60b9      	str	r1, [r7, #8]
 800c45a:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 800c45c:	68fb      	ldr	r3, [r7, #12]
 800c45e:	695b      	ldr	r3, [r3, #20]
 800c460:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800c462:	68bb      	ldr	r3, [r7, #8]
 800c464:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800c466:	68bb      	ldr	r3, [r7, #8]
 800c468:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 800c46a:	68fb      	ldr	r3, [r7, #12]
 800c46c:	881b      	ldrh	r3, [r3, #0]
 800c46e:	3b01      	subs	r3, #1
 800c470:	64fb      	str	r3, [r7, #76]	; 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800c472:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	63fb      	str	r3, [r7, #60]	; 0x3c
   xBI = pB[1];
 800c478:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c47a:	685b      	ldr	r3, [r3, #4]
 800c47c:	63bb      	str	r3, [r7, #56]	; 0x38
   xAR = pA[0];
 800c47e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	637b      	str	r3, [r7, #52]	; 0x34
   xAI = pA[1];
 800c484:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c486:	685b      	ldr	r3, [r3, #4]
 800c488:	633b      	str	r3, [r7, #48]	; 0x30

   twR = *pCoeff++ ;
 800c48a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c48c:	1d1a      	adds	r2, r3, #4
 800c48e:	64ba      	str	r2, [r7, #72]	; 0x48
 800c490:	681b      	ldr	r3, [r3, #0]
 800c492:	62fb      	str	r3, [r7, #44]	; 0x2c
   twI = *pCoeff++ ;
 800c494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c496:	1d1a      	adds	r2, r3, #4
 800c498:	64ba      	str	r2, [r7, #72]	; 0x48
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	62bb      	str	r3, [r7, #40]	; 0x28


   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800c49e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c4a2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c4a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4aa:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800c4ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c4b2:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c4b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4ba:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800c4be:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c4c2:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	1d1a      	adds	r2, r3, #4
 800c4ce:	607a      	str	r2, [r7, #4]
 800c4d0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c4d4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4d8:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 800c4dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800c4e0:	edd7 7a08 	vldr	s15, [r7, #32]
 800c4e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c4e8:	687b      	ldr	r3, [r7, #4]
 800c4ea:	1d1a      	adds	r2, r3, #4
 800c4ec:	607a      	str	r2, [r7, #4]
 800c4ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c4f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c4f6:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 800c4fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c4fc:	00db      	lsls	r3, r3, #3
 800c4fe:	68ba      	ldr	r2, [r7, #8]
 800c500:	4413      	add	r3, r2
 800c502:	643b      	str	r3, [r7, #64]	; 0x40
   pA += 2;
 800c504:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c506:	3308      	adds	r3, #8
 800c508:	647b      	str	r3, [r7, #68]	; 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 800c50a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c50c:	685b      	ldr	r3, [r3, #4]
 800c50e:	63bb      	str	r3, [r7, #56]	; 0x38
      xBR = pB[0];
 800c510:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c512:	681b      	ldr	r3, [r3, #0]
 800c514:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAR = pA[0];
 800c516:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c518:	681b      	ldr	r3, [r3, #0]
 800c51a:	637b      	str	r3, [r7, #52]	; 0x34
      xAI = pA[1];
 800c51c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c51e:	685b      	ldr	r3, [r3, #4]
 800c520:	633b      	str	r3, [r7, #48]	; 0x30

      twR = *pCoeff++;
 800c522:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c524:	1d1a      	adds	r2, r3, #4
 800c526:	64ba      	str	r2, [r7, #72]	; 0x48
 800c528:	681b      	ldr	r3, [r3, #0]
 800c52a:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800c52c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c52e:	1d1a      	adds	r2, r3, #4
 800c530:	64ba      	str	r2, [r7, #72]	; 0x48
 800c532:	681b      	ldr	r3, [r3, #0]
 800c534:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xBR - xAR ;
 800c536:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c53a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c53e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c542:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xBI + xAI ;
 800c546:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c54a:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c54e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c552:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 800c556:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c55a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c55e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c562:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 800c566:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c56a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c56e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c572:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 800c576:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c57a:	edd7 7a08 	vldr	s15, [r7, #32]
 800c57e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c582:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 800c586:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c58a:	edd7 7a08 	vldr	s15, [r7, #32]
 800c58e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c592:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 800c596:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800c59a:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800c59e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5a2:	edd7 7a07 	vldr	s15, [r7, #28]
 800c5a6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5aa:	edd7 7a04 	vldr	s15, [r7, #16]
 800c5ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c5b2:	687b      	ldr	r3, [r7, #4]
 800c5b4:	1d1a      	adds	r2, r3, #4
 800c5b6:	607a      	str	r2, [r7, #4]
 800c5b8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c5bc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5c0:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 800c5c4:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800c5c8:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c5cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c5d0:	edd7 7a06 	vldr	s15, [r7, #24]
 800c5d4:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c5d8:	edd7 7a05 	vldr	s15, [r7, #20]
 800c5dc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c5e0:	687b      	ldr	r3, [r7, #4]
 800c5e2:	1d1a      	adds	r2, r3, #4
 800c5e4:	607a      	str	r2, [r7, #4]
 800c5e6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c5ea:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c5ee:	edc3 7a00 	vstr	s15, [r3]


      pA += 2;
 800c5f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c5f4:	3308      	adds	r3, #8
 800c5f6:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800c5f8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c5fa:	3b08      	subs	r3, #8
 800c5fc:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800c5fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c600:	3b01      	subs	r3, #1
 800c602:	64fb      	str	r3, [r7, #76]	; 0x4c
   } while (k > 0U);
 800c604:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c606:	2b00      	cmp	r3, #0
 800c608:	f47f af7f 	bne.w	800c50a <stage_rfft_f32+0xba>
}
 800c60c:	bf00      	nop
 800c60e:	bf00      	nop
 800c610:	3754      	adds	r7, #84	; 0x54
 800c612:	46bd      	mov	sp, r7
 800c614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c618:	4770      	bx	lr

0800c61a <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800c61a:	b480      	push	{r7}
 800c61c:	b095      	sub	sp, #84	; 0x54
 800c61e:	af00      	add	r7, sp, #0
 800c620:	60f8      	str	r0, [r7, #12]
 800c622:	60b9      	str	r1, [r7, #8]
 800c624:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 800c626:	68fb      	ldr	r3, [r7, #12]
 800c628:	695b      	ldr	r3, [r3, #20]
 800c62a:	64bb      	str	r3, [r7, #72]	; 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800c62c:	68bb      	ldr	r3, [r7, #8]
 800c62e:	647b      	str	r3, [r7, #68]	; 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 800c630:	68bb      	ldr	r3, [r7, #8]
 800c632:	643b      	str	r3, [r7, #64]	; 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 800c634:	68fb      	ldr	r3, [r7, #12]
 800c636:	881b      	ldrh	r3, [r3, #0]
 800c638:	3b01      	subs	r3, #1
 800c63a:	64fb      	str	r3, [r7, #76]	; 0x4c

   xAR = pA[0];
 800c63c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c63e:	681b      	ldr	r3, [r3, #0]
 800c640:	63fb      	str	r3, [r7, #60]	; 0x3c
   xAI = pA[1];
 800c642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c644:	685b      	ldr	r3, [r3, #4]
 800c646:	63bb      	str	r3, [r7, #56]	; 0x38

   pCoeff += 2 ;
 800c648:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c64a:	3308      	adds	r3, #8
 800c64c:	64bb      	str	r3, [r7, #72]	; 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800c64e:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c652:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c656:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c65a:	687b      	ldr	r3, [r7, #4]
 800c65c:	1d1a      	adds	r2, r3, #4
 800c65e:	607a      	str	r2, [r7, #4]
 800c660:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c664:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c668:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 800c66c:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c670:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800c674:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c678:	687b      	ldr	r3, [r7, #4]
 800c67a:	1d1a      	adds	r2, r3, #4
 800c67c:	607a      	str	r2, [r7, #4]
 800c67e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c682:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c686:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 800c68a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c68c:	00db      	lsls	r3, r3, #3
 800c68e:	68ba      	ldr	r2, [r7, #8]
 800c690:	4413      	add	r3, r2
 800c692:	643b      	str	r3, [r7, #64]	; 0x40
   pA +=  2	   ;
 800c694:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c696:	3308      	adds	r3, #8
 800c698:	647b      	str	r3, [r7, #68]	; 0x44

   while (k > 0U)
 800c69a:	e07c      	b.n	800c796 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 800c69c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	637b      	str	r3, [r7, #52]	; 0x34
      xBR =   pB[0]    ;
 800c6a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c6a4:	681b      	ldr	r3, [r3, #0]
 800c6a6:	633b      	str	r3, [r7, #48]	; 0x30
      xAR =  pA[0];
 800c6a8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6aa:	681b      	ldr	r3, [r3, #0]
 800c6ac:	63fb      	str	r3, [r7, #60]	; 0x3c
      xAI =  pA[1];
 800c6ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c6b0:	685b      	ldr	r3, [r3, #4]
 800c6b2:	63bb      	str	r3, [r7, #56]	; 0x38

      twR = *pCoeff++;
 800c6b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6b6:	1d1a      	adds	r2, r3, #4
 800c6b8:	64ba      	str	r2, [r7, #72]	; 0x48
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      twI = *pCoeff++;
 800c6be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c6c0:	1d1a      	adds	r2, r3, #4
 800c6c2:	64ba      	str	r2, [r7, #72]	; 0x48
 800c6c4:	681b      	ldr	r3, [r3, #0]
 800c6c6:	62bb      	str	r3, [r7, #40]	; 0x28

      t1a = xAR - xBR ;
 800c6c8:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c6cc:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c6d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c6d4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
      t1b = xAI + xBI ;
 800c6d8:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c6dc:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c6e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800c6e4:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 800c6e8:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c6ec:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c6f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c6f4:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 800c6f8:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c6fc:	edd7 7a08 	vldr	s15, [r7, #32]
 800c700:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c704:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 800c708:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800c70c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800c710:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c714:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 800c718:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800c71c:	edd7 7a08 	vldr	s15, [r7, #32]
 800c720:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c724:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 800c728:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800c72c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800c730:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c734:	edd7 7a07 	vldr	s15, [r7, #28]
 800c738:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c73c:	edd7 7a06 	vldr	s15, [r7, #24]
 800c740:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	1d1a      	adds	r2, r3, #4
 800c748:	607a      	str	r2, [r7, #4]
 800c74a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c74e:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c752:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 800c756:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800c75a:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800c75e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c762:	edd7 7a05 	vldr	s15, [r7, #20]
 800c766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800c76a:	edd7 7a04 	vldr	s15, [r7, #16]
 800c76e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c772:	687b      	ldr	r3, [r7, #4]
 800c774:	1d1a      	adds	r2, r3, #4
 800c776:	607a      	str	r2, [r7, #4]
 800c778:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c77c:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c780:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 800c784:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800c786:	3308      	adds	r3, #8
 800c788:	647b      	str	r3, [r7, #68]	; 0x44
      pB -= 2;
 800c78a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800c78c:	3b08      	subs	r3, #8
 800c78e:	643b      	str	r3, [r7, #64]	; 0x40
      k--;
 800c790:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c792:	3b01      	subs	r3, #1
 800c794:	64fb      	str	r3, [r7, #76]	; 0x4c
   while (k > 0U)
 800c796:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c798:	2b00      	cmp	r3, #0
 800c79a:	f47f af7f 	bne.w	800c69c <merge_rfft_f32+0x82>
   }

}
 800c79e:	bf00      	nop
 800c7a0:	bf00      	nop
 800c7a2:	3754      	adds	r7, #84	; 0x54
 800c7a4:	46bd      	mov	sp, r7
 800c7a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7aa:	4770      	bx	lr

0800c7ac <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  const arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 800c7ac:	b580      	push	{r7, lr}
 800c7ae:	b086      	sub	sp, #24
 800c7b0:	af00      	add	r7, sp, #0
 800c7b2:	60f8      	str	r0, [r7, #12]
 800c7b4:	60b9      	str	r1, [r7, #8]
 800c7b6:	607a      	str	r2, [r7, #4]
 800c7b8:	70fb      	strb	r3, [r7, #3]
   const arm_cfft_instance_f32 * Sint = &(S->Sint);
 800c7ba:	68fb      	ldr	r3, [r7, #12]
 800c7bc:	617b      	str	r3, [r7, #20]

   /* Calculation of Real FFT */
   if (ifftFlag)
 800c7be:	78fb      	ldrb	r3, [r7, #3]
 800c7c0:	2b00      	cmp	r3, #0
 800c7c2:	d00b      	beq.n	800c7dc <arm_rfft_fast_f32+0x30>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 800c7c4:	687a      	ldr	r2, [r7, #4]
 800c7c6:	68b9      	ldr	r1, [r7, #8]
 800c7c8:	68f8      	ldr	r0, [r7, #12]
 800c7ca:	f7ff ff26 	bl	800c61a <merge_rfft_f32>
      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 800c7ce:	78fa      	ldrb	r2, [r7, #3]
 800c7d0:	2301      	movs	r3, #1
 800c7d2:	6879      	ldr	r1, [r7, #4]
 800c7d4:	6978      	ldr	r0, [r7, #20]
 800c7d6:	f7fe fca9 	bl	800b12c <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 800c7da:	e00a      	b.n	800c7f2 <arm_rfft_fast_f32+0x46>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 800c7dc:	78fa      	ldrb	r2, [r7, #3]
 800c7de:	2301      	movs	r3, #1
 800c7e0:	68b9      	ldr	r1, [r7, #8]
 800c7e2:	6978      	ldr	r0, [r7, #20]
 800c7e4:	f7fe fca2 	bl	800b12c <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 800c7e8:	687a      	ldr	r2, [r7, #4]
 800c7ea:	68b9      	ldr	r1, [r7, #8]
 800c7ec:	68f8      	ldr	r0, [r7, #12]
 800c7ee:	f7ff fe2f 	bl	800c450 <stage_rfft_f32>
}
 800c7f2:	bf00      	nop
 800c7f4:	3718      	adds	r7, #24
 800c7f6:	46bd      	mov	sp, r7
 800c7f8:	bd80      	pop	{r7, pc}
	...

0800c7fc <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c7fc:	b580      	push	{r7, lr}
 800c7fe:	b084      	sub	sp, #16
 800c800:	af00      	add	r7, sp, #0
 800c802:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	2b00      	cmp	r3, #0
 800c808:	d102      	bne.n	800c810 <arm_rfft_32_fast_init_f32+0x14>
 800c80a:	f04f 33ff 	mov.w	r3, #4294967295
 800c80e:	e014      	b.n	800c83a <arm_rfft_32_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),16);
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	2110      	movs	r1, #16
 800c814:	4618      	mov	r0, r3
 800c816:	f7fe fd43 	bl	800b2a0 <arm_cfft_init_f32>
 800c81a:	4603      	mov	r3, r0
 800c81c:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c81e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c822:	2b00      	cmp	r3, #0
 800c824:	d002      	beq.n	800c82c <arm_rfft_32_fast_init_f32+0x30>
  {
    return(status);
 800c826:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c82a:	e006      	b.n	800c83a <arm_rfft_32_fast_init_f32+0x3e>
  }

  S->fftLenRFFT = 32U;
 800c82c:	687b      	ldr	r3, [r7, #4]
 800c82e:	2220      	movs	r2, #32
 800c830:	821a      	strh	r2, [r3, #16]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 800c832:	687b      	ldr	r3, [r7, #4]
 800c834:	4a03      	ldr	r2, [pc, #12]	; (800c844 <arm_rfft_32_fast_init_f32+0x48>)
 800c836:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c838:	2300      	movs	r3, #0
}
 800c83a:	4618      	mov	r0, r3
 800c83c:	3710      	adds	r7, #16
 800c83e:	46bd      	mov	sp, r7
 800c840:	bd80      	pop	{r7, pc}
 800c842:	bf00      	nop
 800c844:	080347c8 	.word	0x080347c8

0800c848 <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c848:	b580      	push	{r7, lr}
 800c84a:	b084      	sub	sp, #16
 800c84c:	af00      	add	r7, sp, #0
 800c84e:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	2b00      	cmp	r3, #0
 800c854:	d102      	bne.n	800c85c <arm_rfft_64_fast_init_f32+0x14>
 800c856:	f04f 33ff 	mov.w	r3, #4294967295
 800c85a:	e014      	b.n	800c886 <arm_rfft_64_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),32);
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	2120      	movs	r1, #32
 800c860:	4618      	mov	r0, r3
 800c862:	f7fe fd1d 	bl	800b2a0 <arm_cfft_init_f32>
 800c866:	4603      	mov	r3, r0
 800c868:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c86a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c86e:	2b00      	cmp	r3, #0
 800c870:	d002      	beq.n	800c878 <arm_rfft_64_fast_init_f32+0x30>
  {
    return(status);
 800c872:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c876:	e006      	b.n	800c886 <arm_rfft_64_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 64U;
 800c878:	687b      	ldr	r3, [r7, #4]
 800c87a:	2240      	movs	r2, #64	; 0x40
 800c87c:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	4a03      	ldr	r2, [pc, #12]	; (800c890 <arm_rfft_64_fast_init_f32+0x48>)
 800c882:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c884:	2300      	movs	r3, #0
}
 800c886:	4618      	mov	r0, r3
 800c888:	3710      	adds	r7, #16
 800c88a:	46bd      	mov	sp, r7
 800c88c:	bd80      	pop	{r7, pc}
 800c88e:	bf00      	nop
 800c890:	08034848 	.word	0x08034848

0800c894 <arm_rfft_128_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_128_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c894:	b580      	push	{r7, lr}
 800c896:	b084      	sub	sp, #16
 800c898:	af00      	add	r7, sp, #0
 800c89a:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c89c:	687b      	ldr	r3, [r7, #4]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d102      	bne.n	800c8a8 <arm_rfft_128_fast_init_f32+0x14>
 800c8a2:	f04f 33ff 	mov.w	r3, #4294967295
 800c8a6:	e014      	b.n	800c8d2 <arm_rfft_128_fast_init_f32+0x3e>

  status=arm_cfft_init_f32(&(S->Sint),64);
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2140      	movs	r1, #64	; 0x40
 800c8ac:	4618      	mov	r0, r3
 800c8ae:	f7fe fcf7 	bl	800b2a0 <arm_cfft_init_f32>
 800c8b2:	4603      	mov	r3, r0
 800c8b4:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c8b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8ba:	2b00      	cmp	r3, #0
 800c8bc:	d002      	beq.n	800c8c4 <arm_rfft_128_fast_init_f32+0x30>
  {
    return(status);
 800c8be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c8c2:	e006      	b.n	800c8d2 <arm_rfft_128_fast_init_f32+0x3e>
  }
  S->fftLenRFFT = 128;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	2280      	movs	r2, #128	; 0x80
 800c8c8:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_128;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	4a03      	ldr	r2, [pc, #12]	; (800c8dc <arm_rfft_128_fast_init_f32+0x48>)
 800c8ce:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c8d0:	2300      	movs	r3, #0
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
 800c8da:	bf00      	nop
 800c8dc:	08034948 	.word	0x08034948

0800c8e0 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

static arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c8e0:	b580      	push	{r7, lr}
 800c8e2:	b084      	sub	sp, #16
 800c8e4:	af00      	add	r7, sp, #0
 800c8e6:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	2b00      	cmp	r3, #0
 800c8ec:	d102      	bne.n	800c8f4 <arm_rfft_256_fast_init_f32+0x14>
 800c8ee:	f04f 33ff 	mov.w	r3, #4294967295
 800c8f2:	e015      	b.n	800c920 <arm_rfft_256_fast_init_f32+0x40>

  status=arm_cfft_init_f32(&(S->Sint),128);
 800c8f4:	687b      	ldr	r3, [r7, #4]
 800c8f6:	2180      	movs	r1, #128	; 0x80
 800c8f8:	4618      	mov	r0, r3
 800c8fa:	f7fe fcd1 	bl	800b2a0 <arm_cfft_init_f32>
 800c8fe:	4603      	mov	r3, r0
 800c900:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c902:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c906:	2b00      	cmp	r3, #0
 800c908:	d002      	beq.n	800c910 <arm_rfft_256_fast_init_f32+0x30>
  {
    return(status);
 800c90a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c90e:	e007      	b.n	800c920 <arm_rfft_256_fast_init_f32+0x40>
  }
  S->fftLenRFFT = 256U;
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	f44f 7280 	mov.w	r2, #256	; 0x100
 800c916:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	4a03      	ldr	r2, [pc, #12]	; (800c928 <arm_rfft_256_fast_init_f32+0x48>)
 800c91c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c91e:	2300      	movs	r3, #0
}
 800c920:	4618      	mov	r0, r3
 800c922:	3710      	adds	r7, #16
 800c924:	46bd      	mov	sp, r7
 800c926:	bd80      	pop	{r7, pc}
 800c928:	08034b48 	.word	0x08034b48

0800c92c <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c92c:	b580      	push	{r7, lr}
 800c92e:	b084      	sub	sp, #16
 800c930:	af00      	add	r7, sp, #0
 800c932:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	2b00      	cmp	r3, #0
 800c938:	d102      	bne.n	800c940 <arm_rfft_512_fast_init_f32+0x14>
 800c93a:	f04f 33ff 	mov.w	r3, #4294967295
 800c93e:	e016      	b.n	800c96e <arm_rfft_512_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),256);
 800c940:	687b      	ldr	r3, [r7, #4]
 800c942:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c946:	4618      	mov	r0, r3
 800c948:	f7fe fcaa 	bl	800b2a0 <arm_cfft_init_f32>
 800c94c:	4603      	mov	r3, r0
 800c94e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c950:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c954:	2b00      	cmp	r3, #0
 800c956:	d002      	beq.n	800c95e <arm_rfft_512_fast_init_f32+0x32>
  {
    return(status);
 800c958:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c95c:	e007      	b.n	800c96e <arm_rfft_512_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 512U;
 800c95e:	687b      	ldr	r3, [r7, #4]
 800c960:	f44f 7200 	mov.w	r2, #512	; 0x200
 800c964:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	4a03      	ldr	r2, [pc, #12]	; (800c978 <arm_rfft_512_fast_init_f32+0x4c>)
 800c96a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c96c:	2300      	movs	r3, #0
}
 800c96e:	4618      	mov	r0, r3
 800c970:	3710      	adds	r7, #16
 800c972:	46bd      	mov	sp, r7
 800c974:	bd80      	pop	{r7, pc}
 800c976:	bf00      	nop
 800c978:	08034f48 	.word	0x08034f48

0800c97c <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b084      	sub	sp, #16
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2b00      	cmp	r3, #0
 800c988:	d102      	bne.n	800c990 <arm_rfft_1024_fast_init_f32+0x14>
 800c98a:	f04f 33ff 	mov.w	r3, #4294967295
 800c98e:	e016      	b.n	800c9be <arm_rfft_1024_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),512);
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c996:	4618      	mov	r0, r3
 800c998:	f7fe fc82 	bl	800b2a0 <arm_cfft_init_f32>
 800c99c:	4603      	mov	r3, r0
 800c99e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c9a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9a4:	2b00      	cmp	r3, #0
 800c9a6:	d002      	beq.n	800c9ae <arm_rfft_1024_fast_init_f32+0x32>
  {
    return(status);
 800c9a8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9ac:	e007      	b.n	800c9be <arm_rfft_1024_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 1024U;
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800c9b4:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	4a03      	ldr	r2, [pc, #12]	; (800c9c8 <arm_rfft_1024_fast_init_f32+0x4c>)
 800c9ba:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800c9bc:	2300      	movs	r3, #0
}
 800c9be:	4618      	mov	r0, r3
 800c9c0:	3710      	adds	r7, #16
 800c9c2:	46bd      	mov	sp, r7
 800c9c4:	bd80      	pop	{r7, pc}
 800c9c6:	bf00      	nop
 800c9c8:	08035748 	.word	0x08035748

0800c9cc <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
static arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800c9cc:	b580      	push	{r7, lr}
 800c9ce:	b084      	sub	sp, #16
 800c9d0:	af00      	add	r7, sp, #0
 800c9d2:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	2b00      	cmp	r3, #0
 800c9d8:	d102      	bne.n	800c9e0 <arm_rfft_2048_fast_init_f32+0x14>
 800c9da:	f04f 33ff 	mov.w	r3, #4294967295
 800c9de:	e016      	b.n	800ca0e <arm_rfft_2048_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),1024);
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800c9e6:	4618      	mov	r0, r3
 800c9e8:	f7fe fc5a 	bl	800b2a0 <arm_cfft_init_f32>
 800c9ec:	4603      	mov	r3, r0
 800c9ee:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800c9f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d002      	beq.n	800c9fe <arm_rfft_2048_fast_init_f32+0x32>
  {
    return(status);
 800c9f8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c9fc:	e007      	b.n	800ca0e <arm_rfft_2048_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 2048U;
 800c9fe:	687b      	ldr	r3, [r7, #4]
 800ca00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800ca04:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	4a03      	ldr	r2, [pc, #12]	; (800ca18 <arm_rfft_2048_fast_init_f32+0x4c>)
 800ca0a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800ca0c:	2300      	movs	r3, #0
}
 800ca0e:	4618      	mov	r0, r3
 800ca10:	3710      	adds	r7, #16
 800ca12:	46bd      	mov	sp, r7
 800ca14:	bd80      	pop	{r7, pc}
 800ca16:	bf00      	nop
 800ca18:	08036748 	.word	0x08036748

0800ca1c <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

static arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 800ca1c:	b580      	push	{r7, lr}
 800ca1e:	b084      	sub	sp, #16
 800ca20:	af00      	add	r7, sp, #0
 800ca22:	6078      	str	r0, [r7, #4]

  arm_status status;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	2b00      	cmp	r3, #0
 800ca28:	d102      	bne.n	800ca30 <arm_rfft_4096_fast_init_f32+0x14>
 800ca2a:	f04f 33ff 	mov.w	r3, #4294967295
 800ca2e:	e016      	b.n	800ca5e <arm_rfft_4096_fast_init_f32+0x42>

  status=arm_cfft_init_f32(&(S->Sint),2048);
 800ca30:	687b      	ldr	r3, [r7, #4]
 800ca32:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fe fc32 	bl	800b2a0 <arm_cfft_init_f32>
 800ca3c:	4603      	mov	r3, r0
 800ca3e:	73fb      	strb	r3, [r7, #15]
  if (status != ARM_MATH_SUCCESS)
 800ca40:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca44:	2b00      	cmp	r3, #0
 800ca46:	d002      	beq.n	800ca4e <arm_rfft_4096_fast_init_f32+0x32>
  {
    return(status);
 800ca48:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ca4c:	e007      	b.n	800ca5e <arm_rfft_4096_fast_init_f32+0x42>
  }
  S->fftLenRFFT = 4096U;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ca54:	821a      	strh	r2, [r3, #16]

  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	4a03      	ldr	r2, [pc, #12]	; (800ca68 <arm_rfft_4096_fast_init_f32+0x4c>)
 800ca5a:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 800ca5c:	2300      	movs	r3, #0
}
 800ca5e:	4618      	mov	r0, r3
 800ca60:	3710      	adds	r7, #16
 800ca62:	46bd      	mov	sp, r7
 800ca64:	bd80      	pop	{r7, pc}
 800ca66:	bf00      	nop
 800ca68:	08038748 	.word	0x08038748

0800ca6c <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 800ca6c:	b580      	push	{r7, lr}
 800ca6e:	b084      	sub	sp, #16
 800ca70:	af00      	add	r7, sp, #0
 800ca72:	6078      	str	r0, [r7, #4]
 800ca74:	460b      	mov	r3, r1
 800ca76:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 800ca78:	2300      	movs	r3, #0
 800ca7a:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 800ca7c:	887b      	ldrh	r3, [r7, #2]
 800ca7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca82:	d023      	beq.n	800cacc <arm_rfft_fast_init_f32+0x60>
 800ca84:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca88:	dc38      	bgt.n	800cafc <arm_rfft_fast_init_f32+0x90>
 800ca8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca8e:	d020      	beq.n	800cad2 <arm_rfft_fast_init_f32+0x66>
 800ca90:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca94:	dc32      	bgt.n	800cafc <arm_rfft_fast_init_f32+0x90>
 800ca96:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca9a:	d01d      	beq.n	800cad8 <arm_rfft_fast_init_f32+0x6c>
 800ca9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800caa0:	dc2c      	bgt.n	800cafc <arm_rfft_fast_init_f32+0x90>
 800caa2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caa6:	d01a      	beq.n	800cade <arm_rfft_fast_init_f32+0x72>
 800caa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800caac:	dc26      	bgt.n	800cafc <arm_rfft_fast_init_f32+0x90>
 800caae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cab2:	d017      	beq.n	800cae4 <arm_rfft_fast_init_f32+0x78>
 800cab4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800cab8:	dc20      	bgt.n	800cafc <arm_rfft_fast_init_f32+0x90>
 800caba:	2b80      	cmp	r3, #128	; 0x80
 800cabc:	d015      	beq.n	800caea <arm_rfft_fast_init_f32+0x7e>
 800cabe:	2b80      	cmp	r3, #128	; 0x80
 800cac0:	dc1c      	bgt.n	800cafc <arm_rfft_fast_init_f32+0x90>
 800cac2:	2b20      	cmp	r3, #32
 800cac4:	d017      	beq.n	800caf6 <arm_rfft_fast_init_f32+0x8a>
 800cac6:	2b40      	cmp	r3, #64	; 0x40
 800cac8:	d012      	beq.n	800caf0 <arm_rfft_fast_init_f32+0x84>
 800caca:	e017      	b.n	800cafc <arm_rfft_fast_init_f32+0x90>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 800cacc:	4b14      	ldr	r3, [pc, #80]	; (800cb20 <arm_rfft_fast_init_f32+0xb4>)
 800cace:	60fb      	str	r3, [r7, #12]
    break;
 800cad0:	e017      	b.n	800cb02 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 800cad2:	4b14      	ldr	r3, [pc, #80]	; (800cb24 <arm_rfft_fast_init_f32+0xb8>)
 800cad4:	60fb      	str	r3, [r7, #12]
    break;
 800cad6:	e014      	b.n	800cb02 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 800cad8:	4b13      	ldr	r3, [pc, #76]	; (800cb28 <arm_rfft_fast_init_f32+0xbc>)
 800cada:	60fb      	str	r3, [r7, #12]
    break;
 800cadc:	e011      	b.n	800cb02 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 800cade:	4b13      	ldr	r3, [pc, #76]	; (800cb2c <arm_rfft_fast_init_f32+0xc0>)
 800cae0:	60fb      	str	r3, [r7, #12]
    break;
 800cae2:	e00e      	b.n	800cb02 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 800cae4:	4b12      	ldr	r3, [pc, #72]	; (800cb30 <arm_rfft_fast_init_f32+0xc4>)
 800cae6:	60fb      	str	r3, [r7, #12]
    break;
 800cae8:	e00b      	b.n	800cb02 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_BITREVIDX_FLT_64) && defined(ARM_TABLE_TWIDDLECOEF_F32_64) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_128))
  case 128U:
    fptr = arm_rfft_128_fast_init_f32;
 800caea:	4b12      	ldr	r3, [pc, #72]	; (800cb34 <arm_rfft_fast_init_f32+0xc8>)
 800caec:	60fb      	str	r3, [r7, #12]
    break;
 800caee:	e008      	b.n	800cb02 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 800caf0:	4b11      	ldr	r3, [pc, #68]	; (800cb38 <arm_rfft_fast_init_f32+0xcc>)
 800caf2:	60fb      	str	r3, [r7, #12]
    break;
 800caf4:	e005      	b.n	800cb02 <arm_rfft_fast_init_f32+0x96>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 800caf6:	4b11      	ldr	r3, [pc, #68]	; (800cb3c <arm_rfft_fast_init_f32+0xd0>)
 800caf8:	60fb      	str	r3, [r7, #12]
    break;
 800cafa:	e002      	b.n	800cb02 <arm_rfft_fast_init_f32+0x96>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 800cafc:	f04f 33ff 	mov.w	r3, #4294967295
 800cb00:	e009      	b.n	800cb16 <arm_rfft_fast_init_f32+0xaa>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 800cb02:	68fb      	ldr	r3, [r7, #12]
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d102      	bne.n	800cb0e <arm_rfft_fast_init_f32+0xa2>
 800cb08:	f04f 33ff 	mov.w	r3, #4294967295
 800cb0c:	e003      	b.n	800cb16 <arm_rfft_fast_init_f32+0xaa>
  return fptr( S );
 800cb0e:	68fb      	ldr	r3, [r7, #12]
 800cb10:	6878      	ldr	r0, [r7, #4]
 800cb12:	4798      	blx	r3
 800cb14:	4603      	mov	r3, r0

}
 800cb16:	4618      	mov	r0, r3
 800cb18:	3710      	adds	r7, #16
 800cb1a:	46bd      	mov	sp, r7
 800cb1c:	bd80      	pop	{r7, pc}
 800cb1e:	bf00      	nop
 800cb20:	0800ca1d 	.word	0x0800ca1d
 800cb24:	0800c9cd 	.word	0x0800c9cd
 800cb28:	0800c97d 	.word	0x0800c97d
 800cb2c:	0800c92d 	.word	0x0800c92d
 800cb30:	0800c8e1 	.word	0x0800c8e1
 800cb34:	0800c895 	.word	0x0800c895
 800cb38:	0800c849 	.word	0x0800c849
 800cb3c:	0800c7fd 	.word	0x0800c7fd

0800cb40 <_ZSt3cosf>:
  { return __builtin_cosf(__x); }
 800cb40:	b580      	push	{r7, lr}
 800cb42:	b082      	sub	sp, #8
 800cb44:	af00      	add	r7, sp, #0
 800cb46:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb4a:	ed97 0a01 	vldr	s0, [r7, #4]
 800cb4e:	f00b fc35 	bl	80183bc <cosf>
 800cb52:	eef0 7a40 	vmov.f32	s15, s0
 800cb56:	eeb0 0a67 	vmov.f32	s0, s15
 800cb5a:	3708      	adds	r7, #8
 800cb5c:	46bd      	mov	sp, r7
 800cb5e:	bd80      	pop	{r7, pc}

0800cb60 <_ZSt3sinf>:
  { return __builtin_sinf(__x); }
 800cb60:	b580      	push	{r7, lr}
 800cb62:	b082      	sub	sp, #8
 800cb64:	af00      	add	r7, sp, #0
 800cb66:	ed87 0a01 	vstr	s0, [r7, #4]
 800cb6a:	ed97 0a01 	vldr	s0, [r7, #4]
 800cb6e:	f00b fcf1 	bl	8018554 <sinf>
 800cb72:	eef0 7a40 	vmov.f32	s15, s0
 800cb76:	eeb0 0a67 	vmov.f32	s0, s15
 800cb7a:	3708      	adds	r7, #8
 800cb7c:	46bd      	mov	sp, r7
 800cb7e:	bd80      	pop	{r7, pc}

0800cb80 <_ZN2ei3dct9transformEPfj>:
#ifndef M_PI
#define M_PI 3.14159265358979323846264338327950288
#endif // M_PI

// DCT type II, unscaled
int ei::dct::transform(float vector[], size_t len) {
 800cb80:	b5b0      	push	{r4, r5, r7, lr}
 800cb82:	ed2d 8b02 	vpush	{d8}
 800cb86:	b08e      	sub	sp, #56	; 0x38
 800cb88:	af02      	add	r7, sp, #8
 800cb8a:	6078      	str	r0, [r7, #4]
 800cb8c:	6039      	str	r1, [r7, #0]
	const size_t fft_data_out_size = (len / 2 + 1) * sizeof(ei::fft_complex_t);
 800cb8e:	683b      	ldr	r3, [r7, #0]
 800cb90:	085b      	lsrs	r3, r3, #1
 800cb92:	3301      	adds	r3, #1
 800cb94:	00db      	lsls	r3, r3, #3
 800cb96:	627b      	str	r3, [r7, #36]	; 0x24
	const size_t fft_data_in_size = len * sizeof(float);
 800cb98:	683b      	ldr	r3, [r7, #0]
 800cb9a:	009b      	lsls	r3, r3, #2
 800cb9c:	623b      	str	r3, [r7, #32]

	// Allocate KissFFT input / output buffer
    fft_complex_t *fft_data_out =
		(ei::fft_complex_t*)ei_dsp_calloc(fft_data_out_size, 1);
 800cb9e:	2101      	movs	r1, #1
 800cba0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cba2:	f00e fa31 	bl	801b008 <calloc>
 800cba6:	4603      	mov	r3, r0
 800cba8:	61fb      	str	r3, [r7, #28]
	if (!fft_data_out) {
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	2b00      	cmp	r3, #0
 800cbae:	d101      	bne.n	800cbb4 <_ZN2ei3dct9transformEPfj+0x34>
		return ei::EIDSP_OUT_OF_MEM;
 800cbb0:	4b5f      	ldr	r3, [pc, #380]	; (800cd30 <_ZN2ei3dct9transformEPfj+0x1b0>)
 800cbb2:	e0b1      	b.n	800cd18 <_ZN2ei3dct9transformEPfj+0x198>
	}

    float *fft_data_in = (float*)ei_dsp_calloc(fft_data_in_size, 1);
 800cbb4:	2101      	movs	r1, #1
 800cbb6:	6a38      	ldr	r0, [r7, #32]
 800cbb8:	f00e fa26 	bl	801b008 <calloc>
 800cbbc:	4603      	mov	r3, r0
 800cbbe:	61bb      	str	r3, [r7, #24]
	if (!fft_data_in) {
 800cbc0:	69bb      	ldr	r3, [r7, #24]
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d104      	bne.n	800cbd0 <_ZN2ei3dct9transformEPfj+0x50>
		ei_dsp_free(fft_data_out, fft_data_out_size);
 800cbc6:	69f8      	ldr	r0, [r7, #28]
 800cbc8:	f00e faf0 	bl	801b1ac <free>
		return ei::EIDSP_OUT_OF_MEM;
 800cbcc:	4b58      	ldr	r3, [pc, #352]	; (800cd30 <_ZN2ei3dct9transformEPfj+0x1b0>)
 800cbce:	e0a3      	b.n	800cd18 <_ZN2ei3dct9transformEPfj+0x198>
	}

	// Preprocess the input buffer with the data from the vector
	size_t halfLen = len / 2;
 800cbd0:	683b      	ldr	r3, [r7, #0]
 800cbd2:	085b      	lsrs	r3, r3, #1
 800cbd4:	617b      	str	r3, [r7, #20]
	for (size_t i = 0; i < halfLen; i++) {
 800cbd6:	2300      	movs	r3, #0
 800cbd8:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cbda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800cbdc:	697b      	ldr	r3, [r7, #20]
 800cbde:	429a      	cmp	r2, r3
 800cbe0:	d21b      	bcs.n	800cc1a <_ZN2ei3dct9transformEPfj+0x9a>
		fft_data_in[i] = vector[i * 2];
 800cbe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbe4:	00db      	lsls	r3, r3, #3
 800cbe6:	687a      	ldr	r2, [r7, #4]
 800cbe8:	441a      	add	r2, r3
 800cbea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbec:	009b      	lsls	r3, r3, #2
 800cbee:	69b9      	ldr	r1, [r7, #24]
 800cbf0:	440b      	add	r3, r1
 800cbf2:	6812      	ldr	r2, [r2, #0]
 800cbf4:	601a      	str	r2, [r3, #0]
		fft_data_in[len - 1 - i] = vector[i * 2 + 1];
 800cbf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cbf8:	00db      	lsls	r3, r3, #3
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	687a      	ldr	r2, [r7, #4]
 800cbfe:	441a      	add	r2, r3
 800cc00:	6839      	ldr	r1, [r7, #0]
 800cc02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc04:	1acb      	subs	r3, r1, r3
 800cc06:	3b01      	subs	r3, #1
 800cc08:	009b      	lsls	r3, r3, #2
 800cc0a:	69b9      	ldr	r1, [r7, #24]
 800cc0c:	440b      	add	r3, r1
 800cc0e:	6812      	ldr	r2, [r2, #0]
 800cc10:	601a      	str	r2, [r3, #0]
	for (size_t i = 0; i < halfLen; i++) {
 800cc12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc14:	3301      	adds	r3, #1
 800cc16:	62fb      	str	r3, [r7, #44]	; 0x2c
 800cc18:	e7df      	b.n	800cbda <_ZN2ei3dct9transformEPfj+0x5a>
	}
	if (len % 2 == 1) {
 800cc1a:	683b      	ldr	r3, [r7, #0]
 800cc1c:	f003 0301 	and.w	r3, r3, #1
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d00c      	beq.n	800cc3e <_ZN2ei3dct9transformEPfj+0xbe>
		fft_data_in[halfLen] = vector[len - 1];
 800cc24:	683b      	ldr	r3, [r7, #0]
 800cc26:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cc2a:	3b01      	subs	r3, #1
 800cc2c:	009b      	lsls	r3, r3, #2
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	441a      	add	r2, r3
 800cc32:	697b      	ldr	r3, [r7, #20]
 800cc34:	009b      	lsls	r3, r3, #2
 800cc36:	69b9      	ldr	r1, [r7, #24]
 800cc38:	440b      	add	r3, r1
 800cc3a:	6812      	ldr	r2, [r2, #0]
 800cc3c:	601a      	str	r2, [r3, #0]
	}

	int r = ei::numpy::rfft(fft_data_in, len, fft_data_out, (len / 2 + 1), len);
 800cc3e:	683b      	ldr	r3, [r7, #0]
 800cc40:	085b      	lsrs	r3, r3, #1
 800cc42:	1c5a      	adds	r2, r3, #1
 800cc44:	683b      	ldr	r3, [r7, #0]
 800cc46:	9300      	str	r3, [sp, #0]
 800cc48:	4613      	mov	r3, r2
 800cc4a:	69fa      	ldr	r2, [r7, #28]
 800cc4c:	6839      	ldr	r1, [r7, #0]
 800cc4e:	69b8      	ldr	r0, [r7, #24]
 800cc50:	f7f5 f920 	bl	8001e94 <_ZN2ei5numpy4rfftEPKfjPNS_13fft_complex_tEjj>
 800cc54:	6138      	str	r0, [r7, #16]
	if (r != 0) {
 800cc56:	693b      	ldr	r3, [r7, #16]
 800cc58:	2b00      	cmp	r3, #0
 800cc5a:	d007      	beq.n	800cc6c <_ZN2ei3dct9transformEPfj+0xec>
		ei_dsp_free(fft_data_in, fft_data_in_size);
 800cc5c:	69b8      	ldr	r0, [r7, #24]
 800cc5e:	f00e faa5 	bl	801b1ac <free>
		ei_dsp_free(fft_data_out, fft_data_out_size);
 800cc62:	69f8      	ldr	r0, [r7, #28]
 800cc64:	f00e faa2 	bl	801b1ac <free>
		return r;
 800cc68:	693b      	ldr	r3, [r7, #16]
 800cc6a:	e055      	b.n	800cd18 <_ZN2ei3dct9transformEPfj+0x198>
	}

	for (size_t i = 0; i < len / 2 + 1; i++) {
 800cc6c:	2300      	movs	r3, #0
 800cc6e:	62bb      	str	r3, [r7, #40]	; 0x28
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	085b      	lsrs	r3, r3, #1
 800cc74:	3301      	adds	r3, #1
 800cc76:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cc78:	429a      	cmp	r2, r3
 800cc7a:	d246      	bcs.n	800cd0a <_ZN2ei3dct9transformEPfj+0x18a>
		float temp = i * M_PI / (len * 2);
 800cc7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800cc7e:	f7f3 fc61 	bl	8000544 <__aeabi_ui2d>
 800cc82:	a329      	add	r3, pc, #164	; (adr r3, 800cd28 <_ZN2ei3dct9transformEPfj+0x1a8>)
 800cc84:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc88:	f7f3 fcd6 	bl	8000638 <__aeabi_dmul>
 800cc8c:	4602      	mov	r2, r0
 800cc8e:	460b      	mov	r3, r1
 800cc90:	4614      	mov	r4, r2
 800cc92:	461d      	mov	r5, r3
 800cc94:	683b      	ldr	r3, [r7, #0]
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	4618      	mov	r0, r3
 800cc9a:	f7f3 fc53 	bl	8000544 <__aeabi_ui2d>
 800cc9e:	4602      	mov	r2, r0
 800cca0:	460b      	mov	r3, r1
 800cca2:	4620      	mov	r0, r4
 800cca4:	4629      	mov	r1, r5
 800cca6:	f7f3 fdf1 	bl	800088c <__aeabi_ddiv>
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4610      	mov	r0, r2
 800ccb0:	4619      	mov	r1, r3
 800ccb2:	f7f3 ffb9 	bl	8000c28 <__aeabi_d2f>
 800ccb6:	4603      	mov	r3, r0
 800ccb8:	60fb      	str	r3, [r7, #12]
		vector[i] = fft_data_out[i].r * cos(temp) + fft_data_out[i].i * sin(temp);
 800ccba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccbc:	00db      	lsls	r3, r3, #3
 800ccbe:	69fa      	ldr	r2, [r7, #28]
 800ccc0:	4413      	add	r3, r2
 800ccc2:	ed93 8a00 	vldr	s16, [r3]
 800ccc6:	ed97 0a03 	vldr	s0, [r7, #12]
 800ccca:	f7ff ff39 	bl	800cb40 <_ZSt3cosf>
 800ccce:	eef0 7a40 	vmov.f32	s15, s0
 800ccd2:	ee28 8a27 	vmul.f32	s16, s16, s15
 800ccd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccd8:	00db      	lsls	r3, r3, #3
 800ccda:	69fa      	ldr	r2, [r7, #28]
 800ccdc:	4413      	add	r3, r2
 800ccde:	edd3 8a01 	vldr	s17, [r3, #4]
 800cce2:	ed97 0a03 	vldr	s0, [r7, #12]
 800cce6:	f7ff ff3b 	bl	800cb60 <_ZSt3sinf>
 800ccea:	eef0 7a40 	vmov.f32	s15, s0
 800ccee:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800ccf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ccf4:	009b      	lsls	r3, r3, #2
 800ccf6:	687a      	ldr	r2, [r7, #4]
 800ccf8:	4413      	add	r3, r2
 800ccfa:	ee78 7a27 	vadd.f32	s15, s16, s15
 800ccfe:	edc3 7a00 	vstr	s15, [r3]
	for (size_t i = 0; i < len / 2 + 1; i++) {
 800cd02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cd04:	3301      	adds	r3, #1
 800cd06:	62bb      	str	r3, [r7, #40]	; 0x28
 800cd08:	e7b2      	b.n	800cc70 <_ZN2ei3dct9transformEPfj+0xf0>
	}

	ei_dsp_free(fft_data_in, fft_data_in_size);
 800cd0a:	69b8      	ldr	r0, [r7, #24]
 800cd0c:	f00e fa4e 	bl	801b1ac <free>
	ei_dsp_free(fft_data_out, fft_data_out_size);
 800cd10:	69f8      	ldr	r0, [r7, #28]
 800cd12:	f00e fa4b 	bl	801b1ac <free>

	return 0;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	4618      	mov	r0, r3
 800cd1a:	3730      	adds	r7, #48	; 0x30
 800cd1c:	46bd      	mov	sp, r7
 800cd1e:	ecbd 8b02 	vpop	{d8}
 800cd22:	bdb0      	pop	{r4, r5, r7, pc}
 800cd24:	f3af 8000 	nop.w
 800cd28:	54442d18 	.word	0x54442d18
 800cd2c:	400921fb 	.word	0x400921fb
 800cd30:	fffffc16 	.word	0xfffffc16

0800cd34 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800cd34:	b480      	push	{r7}
 800cd36:	b089      	sub	sp, #36	; 0x24
 800cd38:	af00      	add	r7, sp, #0
 800cd3a:	60f8      	str	r0, [r7, #12]
 800cd3c:	60b9      	str	r1, [r7, #8]
 800cd3e:	607a      	str	r2, [r7, #4]
 800cd40:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout2;
    kiss_fft_cpx * tw1 = st->twiddles;
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800cd48:	61bb      	str	r3, [r7, #24]
    kiss_fft_cpx t;
    Fout2 = Fout + m;
 800cd4a:	683b      	ldr	r3, [r7, #0]
 800cd4c:	00db      	lsls	r3, r3, #3
 800cd4e:	68fa      	ldr	r2, [r7, #12]
 800cd50:	4413      	add	r3, r2
 800cd52:	61fb      	str	r3, [r7, #28]
    do{
        C_FIXDIV(*Fout,2); C_FIXDIV(*Fout2,2);

        C_MUL (t,  *Fout2 , *tw1);
 800cd54:	69fb      	ldr	r3, [r7, #28]
 800cd56:	ed93 7a00 	vldr	s14, [r3]
 800cd5a:	69bb      	ldr	r3, [r7, #24]
 800cd5c:	edd3 7a00 	vldr	s15, [r3]
 800cd60:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd64:	69fb      	ldr	r3, [r7, #28]
 800cd66:	edd3 6a01 	vldr	s13, [r3, #4]
 800cd6a:	69bb      	ldr	r3, [r7, #24]
 800cd6c:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd74:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd78:	edc7 7a04 	vstr	s15, [r7, #16]
 800cd7c:	69fb      	ldr	r3, [r7, #28]
 800cd7e:	ed93 7a00 	vldr	s14, [r3]
 800cd82:	69bb      	ldr	r3, [r7, #24]
 800cd84:	edd3 7a01 	vldr	s15, [r3, #4]
 800cd88:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd8c:	69fb      	ldr	r3, [r7, #28]
 800cd8e:	edd3 6a01 	vldr	s13, [r3, #4]
 800cd92:	69bb      	ldr	r3, [r7, #24]
 800cd94:	edd3 7a00 	vldr	s15, [r3]
 800cd98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cd9c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cda0:	edc7 7a05 	vstr	s15, [r7, #20]
        tw1 += fstride;
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	00db      	lsls	r3, r3, #3
 800cda8:	69ba      	ldr	r2, [r7, #24]
 800cdaa:	4413      	add	r3, r2
 800cdac:	61bb      	str	r3, [r7, #24]
        C_SUB( *Fout2 ,  *Fout , t );
 800cdae:	68fb      	ldr	r3, [r7, #12]
 800cdb0:	ed93 7a00 	vldr	s14, [r3]
 800cdb4:	edd7 7a04 	vldr	s15, [r7, #16]
 800cdb8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdbc:	69fb      	ldr	r3, [r7, #28]
 800cdbe:	edc3 7a00 	vstr	s15, [r3]
 800cdc2:	68fb      	ldr	r3, [r7, #12]
 800cdc4:	ed93 7a01 	vldr	s14, [r3, #4]
 800cdc8:	edd7 7a05 	vldr	s15, [r7, #20]
 800cdcc:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdd0:	69fb      	ldr	r3, [r7, #28]
 800cdd2:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADDTO( *Fout ,  t );
 800cdd6:	68fb      	ldr	r3, [r7, #12]
 800cdd8:	ed93 7a00 	vldr	s14, [r3]
 800cddc:	edd7 7a04 	vldr	s15, [r7, #16]
 800cde0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cde4:	68fb      	ldr	r3, [r7, #12]
 800cde6:	edc3 7a00 	vstr	s15, [r3]
 800cdea:	68fb      	ldr	r3, [r7, #12]
 800cdec:	ed93 7a01 	vldr	s14, [r3, #4]
 800cdf0:	edd7 7a05 	vldr	s15, [r7, #20]
 800cdf4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cdf8:	68fb      	ldr	r3, [r7, #12]
 800cdfa:	edc3 7a01 	vstr	s15, [r3, #4]
        ++Fout2;
 800cdfe:	69fb      	ldr	r3, [r7, #28]
 800ce00:	3308      	adds	r3, #8
 800ce02:	61fb      	str	r3, [r7, #28]
        ++Fout;
 800ce04:	68fb      	ldr	r3, [r7, #12]
 800ce06:	3308      	adds	r3, #8
 800ce08:	60fb      	str	r3, [r7, #12]
    }while (--m);
 800ce0a:	683b      	ldr	r3, [r7, #0]
 800ce0c:	3b01      	subs	r3, #1
 800ce0e:	603b      	str	r3, [r7, #0]
 800ce10:	683b      	ldr	r3, [r7, #0]
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	bf14      	ite	ne
 800ce16:	2301      	movne	r3, #1
 800ce18:	2300      	moveq	r3, #0
 800ce1a:	b2db      	uxtb	r3, r3
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d000      	beq.n	800ce22 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0xee>
    do{
 800ce20:	e798      	b.n	800cd54 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei+0x20>
}
 800ce22:	bf00      	nop
 800ce24:	3724      	adds	r7, #36	; 0x24
 800ce26:	46bd      	mov	sp, r7
 800ce28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce2c:	4770      	bx	lr

0800ce2e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        const size_t m
        )
{
 800ce2e:	b480      	push	{r7}
 800ce30:	b097      	sub	sp, #92	; 0x5c
 800ce32:	af00      	add	r7, sp, #0
 800ce34:	60f8      	str	r0, [r7, #12]
 800ce36:	60b9      	str	r1, [r7, #8]
 800ce38:	607a      	str	r2, [r7, #4]
 800ce3a:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *tw1,*tw2,*tw3;
    kiss_fft_cpx scratch[6];
    size_t k=m;
 800ce3c:	683b      	ldr	r3, [r7, #0]
 800ce3e:	64bb      	str	r3, [r7, #72]	; 0x48
    const size_t m2=2*m;
 800ce40:	683b      	ldr	r3, [r7, #0]
 800ce42:	005b      	lsls	r3, r3, #1
 800ce44:	647b      	str	r3, [r7, #68]	; 0x44
    const size_t m3=3*m;
 800ce46:	683a      	ldr	r2, [r7, #0]
 800ce48:	4613      	mov	r3, r2
 800ce4a:	005b      	lsls	r3, r3, #1
 800ce4c:	4413      	add	r3, r2
 800ce4e:	643b      	str	r3, [r7, #64]	; 0x40


    tw3 = tw2 = tw1 = st->twiddles;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800ce56:	657b      	str	r3, [r7, #84]	; 0x54
 800ce58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce5a:	653b      	str	r3, [r7, #80]	; 0x50
 800ce5c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ce5e:	64fb      	str	r3, [r7, #76]	; 0x4c

    do {
        C_FIXDIV(*Fout,4); C_FIXDIV(Fout[m],4); C_FIXDIV(Fout[m2],4); C_FIXDIV(Fout[m3],4);

        C_MUL(scratch[0],Fout[m] , *tw1 );
 800ce60:	683b      	ldr	r3, [r7, #0]
 800ce62:	00db      	lsls	r3, r3, #3
 800ce64:	68fa      	ldr	r2, [r7, #12]
 800ce66:	4413      	add	r3, r2
 800ce68:	ed93 7a00 	vldr	s14, [r3]
 800ce6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce6e:	edd3 7a00 	vldr	s15, [r3]
 800ce72:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ce76:	683b      	ldr	r3, [r7, #0]
 800ce78:	00db      	lsls	r3, r3, #3
 800ce7a:	68fa      	ldr	r2, [r7, #12]
 800ce7c:	4413      	add	r3, r2
 800ce7e:	edd3 6a01 	vldr	s13, [r3, #4]
 800ce82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ce84:	edd3 7a01 	vldr	s15, [r3, #4]
 800ce88:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800ce8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ce90:	edc7 7a04 	vstr	s15, [r7, #16]
 800ce94:	683b      	ldr	r3, [r7, #0]
 800ce96:	00db      	lsls	r3, r3, #3
 800ce98:	68fa      	ldr	r2, [r7, #12]
 800ce9a:	4413      	add	r3, r2
 800ce9c:	ed93 7a00 	vldr	s14, [r3]
 800cea0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800cea2:	edd3 7a01 	vldr	s15, [r3, #4]
 800cea6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ceaa:	683b      	ldr	r3, [r7, #0]
 800ceac:	00db      	lsls	r3, r3, #3
 800ceae:	68fa      	ldr	r2, [r7, #12]
 800ceb0:	4413      	add	r3, r2
 800ceb2:	edd3 6a01 	vldr	s13, [r3, #4]
 800ceb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ceb8:	edd3 7a00 	vldr	s15, [r3]
 800cebc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cec0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cec4:	edc7 7a05 	vstr	s15, [r7, #20]
        C_MUL(scratch[1],Fout[m2] , *tw2 );
 800cec8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ceca:	00db      	lsls	r3, r3, #3
 800cecc:	68fa      	ldr	r2, [r7, #12]
 800cece:	4413      	add	r3, r2
 800ced0:	ed93 7a00 	vldr	s14, [r3]
 800ced4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ced6:	edd3 7a00 	vldr	s15, [r3]
 800ceda:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cee0:	00db      	lsls	r3, r3, #3
 800cee2:	68fa      	ldr	r2, [r7, #12]
 800cee4:	4413      	add	r3, r2
 800cee6:	edd3 6a01 	vldr	s13, [r3, #4]
 800ceea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ceec:	edd3 7a01 	vldr	s15, [r3, #4]
 800cef0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cef4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cef8:	edc7 7a06 	vstr	s15, [r7, #24]
 800cefc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cefe:	00db      	lsls	r3, r3, #3
 800cf00:	68fa      	ldr	r2, [r7, #12]
 800cf02:	4413      	add	r3, r2
 800cf04:	ed93 7a00 	vldr	s14, [r3]
 800cf08:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf0a:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf0e:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf12:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800cf14:	00db      	lsls	r3, r3, #3
 800cf16:	68fa      	ldr	r2, [r7, #12]
 800cf18:	4413      	add	r3, r2
 800cf1a:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf1e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cf20:	edd3 7a00 	vldr	s15, [r3]
 800cf24:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf28:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf2c:	edc7 7a07 	vstr	s15, [r7, #28]
        C_MUL(scratch[2],Fout[m3] , *tw3 );
 800cf30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf32:	00db      	lsls	r3, r3, #3
 800cf34:	68fa      	ldr	r2, [r7, #12]
 800cf36:	4413      	add	r3, r2
 800cf38:	ed93 7a00 	vldr	s14, [r3]
 800cf3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf3e:	edd3 7a00 	vldr	s15, [r3]
 800cf42:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf46:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf48:	00db      	lsls	r3, r3, #3
 800cf4a:	68fa      	ldr	r2, [r7, #12]
 800cf4c:	4413      	add	r3, r2
 800cf4e:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf52:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf54:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cf60:	edc7 7a08 	vstr	s15, [r7, #32]
 800cf64:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf66:	00db      	lsls	r3, r3, #3
 800cf68:	68fa      	ldr	r2, [r7, #12]
 800cf6a:	4413      	add	r3, r2
 800cf6c:	ed93 7a00 	vldr	s14, [r3]
 800cf70:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf72:	edd3 7a01 	vldr	s15, [r3, #4]
 800cf76:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cf7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800cf7c:	00db      	lsls	r3, r3, #3
 800cf7e:	68fa      	ldr	r2, [r7, #12]
 800cf80:	4413      	add	r3, r2
 800cf82:	edd3 6a01 	vldr	s13, [r3, #4]
 800cf86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cf88:	edd3 7a00 	vldr	s15, [r3]
 800cf8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800cf90:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cf94:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24

        C_SUB( scratch[5] , *Fout, scratch[1] );
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	ed93 7a00 	vldr	s14, [r3]
 800cf9e:	edd7 7a06 	vldr	s15, [r7, #24]
 800cfa2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfa6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	ed93 7a01 	vldr	s14, [r3, #4]
 800cfb0:	edd7 7a07 	vldr	s15, [r7, #28]
 800cfb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cfb8:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_ADDTO(*Fout, scratch[1]);
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	ed93 7a00 	vldr	s14, [r3]
 800cfc2:	edd7 7a06 	vldr	s15, [r7, #24]
 800cfc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfca:	68fb      	ldr	r3, [r7, #12]
 800cfcc:	edc3 7a00 	vstr	s15, [r3]
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	ed93 7a01 	vldr	s14, [r3, #4]
 800cfd6:	edd7 7a07 	vldr	s15, [r7, #28]
 800cfda:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD( scratch[3] , scratch[0] , scratch[2] );
 800cfe4:	ed97 7a04 	vldr	s14, [r7, #16]
 800cfe8:	edd7 7a08 	vldr	s15, [r7, #32]
 800cfec:	ee77 7a27 	vadd.f32	s15, s14, s15
 800cff0:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800cff4:	ed97 7a05 	vldr	s14, [r7, #20]
 800cff8:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800cffc:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d000:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( scratch[4] , scratch[0] , scratch[2] );
 800d004:	ed97 7a04 	vldr	s14, [r7, #16]
 800d008:	edd7 7a08 	vldr	s15, [r7, #32]
 800d00c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d010:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d014:	ed97 7a05 	vldr	s14, [r7, #20]
 800d018:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800d01c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d020:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_SUB( Fout[m2], *Fout, scratch[3] );
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	ed93 7a00 	vldr	s14, [r3]
 800d02a:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d02e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d030:	00db      	lsls	r3, r3, #3
 800d032:	68fa      	ldr	r2, [r7, #12]
 800d034:	4413      	add	r3, r2
 800d036:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d03a:	edc3 7a00 	vstr	s15, [r3]
 800d03e:	68fb      	ldr	r3, [r7, #12]
 800d040:	ed93 7a01 	vldr	s14, [r3, #4]
 800d044:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d048:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d04a:	00db      	lsls	r3, r3, #3
 800d04c:	68fa      	ldr	r2, [r7, #12]
 800d04e:	4413      	add	r3, r2
 800d050:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d054:	edc3 7a01 	vstr	s15, [r3, #4]
        tw1 += fstride;
 800d058:	68bb      	ldr	r3, [r7, #8]
 800d05a:	00db      	lsls	r3, r3, #3
 800d05c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d05e:	4413      	add	r3, r2
 800d060:	657b      	str	r3, [r7, #84]	; 0x54
        tw2 += fstride*2;
 800d062:	68bb      	ldr	r3, [r7, #8]
 800d064:	011b      	lsls	r3, r3, #4
 800d066:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d068:	4413      	add	r3, r2
 800d06a:	653b      	str	r3, [r7, #80]	; 0x50
        tw3 += fstride*3;
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	4613      	mov	r3, r2
 800d070:	005b      	lsls	r3, r3, #1
 800d072:	4413      	add	r3, r2
 800d074:	00db      	lsls	r3, r3, #3
 800d076:	461a      	mov	r2, r3
 800d078:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d07a:	4413      	add	r3, r2
 800d07c:	64fb      	str	r3, [r7, #76]	; 0x4c
        C_ADDTO( *Fout , scratch[3] );
 800d07e:	68fb      	ldr	r3, [r7, #12]
 800d080:	ed93 7a00 	vldr	s14, [r3]
 800d084:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d088:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d08c:	68fb      	ldr	r3, [r7, #12]
 800d08e:	edc3 7a00 	vstr	s15, [r3]
 800d092:	68fb      	ldr	r3, [r7, #12]
 800d094:	ed93 7a01 	vldr	s14, [r3, #4]
 800d098:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d09c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0a0:	68fb      	ldr	r3, [r7, #12]
 800d0a2:	edc3 7a01 	vstr	s15, [r3, #4]

        if(st->inverse) {
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	685b      	ldr	r3, [r3, #4]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d030      	beq.n	800d110 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x2e2>
            Fout[m].r = scratch[5].r - scratch[4].i;
 800d0ae:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d0b2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d0b6:	683b      	ldr	r3, [r7, #0]
 800d0b8:	00db      	lsls	r3, r3, #3
 800d0ba:	68fa      	ldr	r2, [r7, #12]
 800d0bc:	4413      	add	r3, r2
 800d0be:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d0c2:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i + scratch[4].r;
 800d0c6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d0ca:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d0ce:	683b      	ldr	r3, [r7, #0]
 800d0d0:	00db      	lsls	r3, r3, #3
 800d0d2:	68fa      	ldr	r2, [r7, #12]
 800d0d4:	4413      	add	r3, r2
 800d0d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0da:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r + scratch[4].i;
 800d0de:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d0e2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d0e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d0e8:	00db      	lsls	r3, r3, #3
 800d0ea:	68fa      	ldr	r2, [r7, #12]
 800d0ec:	4413      	add	r3, r2
 800d0ee:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d0f2:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i - scratch[4].r;
 800d0f6:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d0fa:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d0fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d100:	00db      	lsls	r3, r3, #3
 800d102:	68fa      	ldr	r2, [r7, #12]
 800d104:	4413      	add	r3, r2
 800d106:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d10a:	edc3 7a01 	vstr	s15, [r3, #4]
 800d10e:	e02f      	b.n	800d170 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x342>
        }else{
            Fout[m].r = scratch[5].r + scratch[4].i;
 800d110:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d114:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d118:	683b      	ldr	r3, [r7, #0]
 800d11a:	00db      	lsls	r3, r3, #3
 800d11c:	68fa      	ldr	r2, [r7, #12]
 800d11e:	4413      	add	r3, r2
 800d120:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d124:	edc3 7a00 	vstr	s15, [r3]
            Fout[m].i = scratch[5].i - scratch[4].r;
 800d128:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d12c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d130:	683b      	ldr	r3, [r7, #0]
 800d132:	00db      	lsls	r3, r3, #3
 800d134:	68fa      	ldr	r2, [r7, #12]
 800d136:	4413      	add	r3, r2
 800d138:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d13c:	edc3 7a01 	vstr	s15, [r3, #4]
            Fout[m3].r = scratch[5].r - scratch[4].i;
 800d140:	ed97 7a0e 	vldr	s14, [r7, #56]	; 0x38
 800d144:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d148:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d14a:	00db      	lsls	r3, r3, #3
 800d14c:	68fa      	ldr	r2, [r7, #12]
 800d14e:	4413      	add	r3, r2
 800d150:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d154:	edc3 7a00 	vstr	s15, [r3]
            Fout[m3].i = scratch[5].i + scratch[4].r;
 800d158:	ed97 7a0f 	vldr	s14, [r7, #60]	; 0x3c
 800d15c:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d160:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d162:	00db      	lsls	r3, r3, #3
 800d164:	68fa      	ldr	r2, [r7, #12]
 800d166:	4413      	add	r3, r2
 800d168:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d16c:	edc3 7a01 	vstr	s15, [r3, #4]
        }
        ++Fout;
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	3308      	adds	r3, #8
 800d174:	60fb      	str	r3, [r7, #12]
    }while(--k);
 800d176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d178:	3b01      	subs	r3, #1
 800d17a:	64bb      	str	r3, [r7, #72]	; 0x48
 800d17c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d17e:	2b00      	cmp	r3, #0
 800d180:	bf14      	ite	ne
 800d182:	2301      	movne	r3, #1
 800d184:	2300      	moveq	r3, #0
 800d186:	b2db      	uxtb	r3, r3
 800d188:	2b00      	cmp	r3, #0
 800d18a:	d000      	beq.n	800d18e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x360>
    do {
 800d18c:	e668      	b.n	800ce60 <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej+0x32>
}
 800d18e:	bf00      	nop
 800d190:	375c      	adds	r7, #92	; 0x5c
 800d192:	46bd      	mov	sp, r7
 800d194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d198:	4770      	bx	lr
	...

0800d19c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>:
         kiss_fft_cpx * Fout,
         const size_t fstride,
         const kiss_fft_cfg st,
         size_t m
         )
{
 800d19c:	b5b0      	push	{r4, r5, r7, lr}
 800d19e:	b094      	sub	sp, #80	; 0x50
 800d1a0:	af00      	add	r7, sp, #0
 800d1a2:	60f8      	str	r0, [r7, #12]
 800d1a4:	60b9      	str	r1, [r7, #8]
 800d1a6:	607a      	str	r2, [r7, #4]
 800d1a8:	603b      	str	r3, [r7, #0]
     size_t k=m;
 800d1aa:	683b      	ldr	r3, [r7, #0]
 800d1ac:	64fb      	str	r3, [r7, #76]	; 0x4c
     const size_t m2 = 2*m;
 800d1ae:	683b      	ldr	r3, [r7, #0]
 800d1b0:	005b      	lsls	r3, r3, #1
 800d1b2:	643b      	str	r3, [r7, #64]	; 0x40
     kiss_fft_cpx *tw1,*tw2;
     kiss_fft_cpx scratch[5];
     kiss_fft_cpx epi3;
     epi3 = st->twiddles[fstride*m];
 800d1b4:	68bb      	ldr	r3, [r7, #8]
 800d1b6:	683a      	ldr	r2, [r7, #0]
 800d1b8:	fb02 f303 	mul.w	r3, r2, r3
 800d1bc:	6879      	ldr	r1, [r7, #4]
 800d1be:	3321      	adds	r3, #33	; 0x21
 800d1c0:	f107 0210 	add.w	r2, r7, #16
 800d1c4:	00db      	lsls	r3, r3, #3
 800d1c6:	440b      	add	r3, r1
 800d1c8:	e893 0003 	ldmia.w	r3, {r0, r1}
 800d1cc:	e882 0003 	stmia.w	r2, {r0, r1}

     tw1=tw2=st->twiddles;
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d1d6:	647b      	str	r3, [r7, #68]	; 0x44
 800d1d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d1da:	64bb      	str	r3, [r7, #72]	; 0x48

     do{
         C_FIXDIV(*Fout,3); C_FIXDIV(Fout[m],3); C_FIXDIV(Fout[m2],3);

         C_MUL(scratch[1],Fout[m] , *tw1);
 800d1dc:	683b      	ldr	r3, [r7, #0]
 800d1de:	00db      	lsls	r3, r3, #3
 800d1e0:	68fa      	ldr	r2, [r7, #12]
 800d1e2:	4413      	add	r3, r2
 800d1e4:	ed93 7a00 	vldr	s14, [r3]
 800d1e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d1ea:	edd3 7a00 	vldr	s15, [r3]
 800d1ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1f2:	683b      	ldr	r3, [r7, #0]
 800d1f4:	00db      	lsls	r3, r3, #3
 800d1f6:	68fa      	ldr	r2, [r7, #12]
 800d1f8:	4413      	add	r3, r2
 800d1fa:	edd3 6a01 	vldr	s13, [r3, #4]
 800d1fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d200:	edd3 7a01 	vldr	s15, [r3, #4]
 800d204:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d208:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d20c:	edc7 7a08 	vstr	s15, [r7, #32]
 800d210:	683b      	ldr	r3, [r7, #0]
 800d212:	00db      	lsls	r3, r3, #3
 800d214:	68fa      	ldr	r2, [r7, #12]
 800d216:	4413      	add	r3, r2
 800d218:	ed93 7a00 	vldr	s14, [r3]
 800d21c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d21e:	edd3 7a01 	vldr	s15, [r3, #4]
 800d222:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d226:	683b      	ldr	r3, [r7, #0]
 800d228:	00db      	lsls	r3, r3, #3
 800d22a:	68fa      	ldr	r2, [r7, #12]
 800d22c:	4413      	add	r3, r2
 800d22e:	edd3 6a01 	vldr	s13, [r3, #4]
 800d232:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d234:	edd3 7a00 	vldr	s15, [r3]
 800d238:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d23c:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d240:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
         C_MUL(scratch[2],Fout[m2] , *tw2);
 800d244:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d246:	00db      	lsls	r3, r3, #3
 800d248:	68fa      	ldr	r2, [r7, #12]
 800d24a:	4413      	add	r3, r2
 800d24c:	ed93 7a00 	vldr	s14, [r3]
 800d250:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d252:	edd3 7a00 	vldr	s15, [r3]
 800d256:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d25a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d25c:	00db      	lsls	r3, r3, #3
 800d25e:	68fa      	ldr	r2, [r7, #12]
 800d260:	4413      	add	r3, r2
 800d262:	edd3 6a01 	vldr	s13, [r3, #4]
 800d266:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d268:	edd3 7a01 	vldr	s15, [r3, #4]
 800d26c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d270:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d274:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800d278:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d27a:	00db      	lsls	r3, r3, #3
 800d27c:	68fa      	ldr	r2, [r7, #12]
 800d27e:	4413      	add	r3, r2
 800d280:	ed93 7a00 	vldr	s14, [r3]
 800d284:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d286:	edd3 7a01 	vldr	s15, [r3, #4]
 800d28a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d28e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d290:	00db      	lsls	r3, r3, #3
 800d292:	68fa      	ldr	r2, [r7, #12]
 800d294:	4413      	add	r3, r2
 800d296:	edd3 6a01 	vldr	s13, [r3, #4]
 800d29a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d29c:	edd3 7a00 	vldr	s15, [r3]
 800d2a0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d2a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2a8:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c

         C_ADD(scratch[3],scratch[1],scratch[2]);
 800d2ac:	ed97 7a08 	vldr	s14, [r7, #32]
 800d2b0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2b8:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d2bc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d2c0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d2c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d2c8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
         C_SUB(scratch[0],scratch[1],scratch[2]);
 800d2cc:	ed97 7a08 	vldr	s14, [r7, #32]
 800d2d0:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800d2d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d8:	edc7 7a06 	vstr	s15, [r7, #24]
 800d2dc:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d2e0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800d2e4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2e8:	edc7 7a07 	vstr	s15, [r7, #28]
         tw1 += fstride;
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	00db      	lsls	r3, r3, #3
 800d2f0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2f2:	4413      	add	r3, r2
 800d2f4:	64bb      	str	r3, [r7, #72]	; 0x48
         tw2 += fstride*2;
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	011b      	lsls	r3, r3, #4
 800d2fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d2fc:	4413      	add	r3, r2
 800d2fe:	647b      	str	r3, [r7, #68]	; 0x44

         Fout[m].r = Fout->r - HALF_OF(scratch[3].r);
 800d300:	68fb      	ldr	r3, [r7, #12]
 800d302:	681b      	ldr	r3, [r3, #0]
 800d304:	4618      	mov	r0, r3
 800d306:	f7f3 f93f 	bl	8000588 <__aeabi_f2d>
 800d30a:	4604      	mov	r4, r0
 800d30c:	460d      	mov	r5, r1
 800d30e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d310:	4618      	mov	r0, r3
 800d312:	f7f3 f939 	bl	8000588 <__aeabi_f2d>
 800d316:	f04f 0200 	mov.w	r2, #0
 800d31a:	4b57      	ldr	r3, [pc, #348]	; (800d478 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800d31c:	f7f3 f98c 	bl	8000638 <__aeabi_dmul>
 800d320:	4602      	mov	r2, r0
 800d322:	460b      	mov	r3, r1
 800d324:	4620      	mov	r0, r4
 800d326:	4629      	mov	r1, r5
 800d328:	f7f2 ffce 	bl	80002c8 <__aeabi_dsub>
 800d32c:	4602      	mov	r2, r0
 800d32e:	460b      	mov	r3, r1
 800d330:	4610      	mov	r0, r2
 800d332:	4619      	mov	r1, r3
 800d334:	683b      	ldr	r3, [r7, #0]
 800d336:	00db      	lsls	r3, r3, #3
 800d338:	68fa      	ldr	r2, [r7, #12]
 800d33a:	18d4      	adds	r4, r2, r3
 800d33c:	f7f3 fc74 	bl	8000c28 <__aeabi_d2f>
 800d340:	4603      	mov	r3, r0
 800d342:	6023      	str	r3, [r4, #0]
         Fout[m].i = Fout->i - HALF_OF(scratch[3].i);
 800d344:	68fb      	ldr	r3, [r7, #12]
 800d346:	685b      	ldr	r3, [r3, #4]
 800d348:	4618      	mov	r0, r3
 800d34a:	f7f3 f91d 	bl	8000588 <__aeabi_f2d>
 800d34e:	4604      	mov	r4, r0
 800d350:	460d      	mov	r5, r1
 800d352:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d354:	4618      	mov	r0, r3
 800d356:	f7f3 f917 	bl	8000588 <__aeabi_f2d>
 800d35a:	f04f 0200 	mov.w	r2, #0
 800d35e:	4b46      	ldr	r3, [pc, #280]	; (800d478 <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2dc>)
 800d360:	f7f3 f96a 	bl	8000638 <__aeabi_dmul>
 800d364:	4602      	mov	r2, r0
 800d366:	460b      	mov	r3, r1
 800d368:	4620      	mov	r0, r4
 800d36a:	4629      	mov	r1, r5
 800d36c:	f7f2 ffac 	bl	80002c8 <__aeabi_dsub>
 800d370:	4602      	mov	r2, r0
 800d372:	460b      	mov	r3, r1
 800d374:	4610      	mov	r0, r2
 800d376:	4619      	mov	r1, r3
 800d378:	683b      	ldr	r3, [r7, #0]
 800d37a:	00db      	lsls	r3, r3, #3
 800d37c:	68fa      	ldr	r2, [r7, #12]
 800d37e:	18d4      	adds	r4, r2, r3
 800d380:	f7f3 fc52 	bl	8000c28 <__aeabi_d2f>
 800d384:	4603      	mov	r3, r0
 800d386:	6063      	str	r3, [r4, #4]

         C_MULBYSCALAR( scratch[0] , epi3.i );
 800d388:	ed97 7a06 	vldr	s14, [r7, #24]
 800d38c:	edd7 7a05 	vldr	s15, [r7, #20]
 800d390:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d394:	edc7 7a06 	vstr	s15, [r7, #24]
 800d398:	ed97 7a07 	vldr	s14, [r7, #28]
 800d39c:	edd7 7a05 	vldr	s15, [r7, #20]
 800d3a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d3a4:	edc7 7a07 	vstr	s15, [r7, #28]

         C_ADDTO(*Fout,scratch[3]);
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	ed93 7a00 	vldr	s14, [r3]
 800d3ae:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800d3b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3b6:	68fb      	ldr	r3, [r7, #12]
 800d3b8:	edc3 7a00 	vstr	s15, [r3]
 800d3bc:	68fb      	ldr	r3, [r7, #12]
 800d3be:	ed93 7a01 	vldr	s14, [r3, #4]
 800d3c2:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 800d3c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ca:	68fb      	ldr	r3, [r7, #12]
 800d3cc:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m2].r = Fout[m].r + scratch[0].i;
 800d3d0:	683b      	ldr	r3, [r7, #0]
 800d3d2:	00db      	lsls	r3, r3, #3
 800d3d4:	68fa      	ldr	r2, [r7, #12]
 800d3d6:	4413      	add	r3, r2
 800d3d8:	ed93 7a00 	vldr	s14, [r3]
 800d3dc:	edd7 7a07 	vldr	s15, [r7, #28]
 800d3e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d3e2:	00db      	lsls	r3, r3, #3
 800d3e4:	68fa      	ldr	r2, [r7, #12]
 800d3e6:	4413      	add	r3, r2
 800d3e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d3ec:	edc3 7a00 	vstr	s15, [r3]
         Fout[m2].i = Fout[m].i - scratch[0].r;
 800d3f0:	683b      	ldr	r3, [r7, #0]
 800d3f2:	00db      	lsls	r3, r3, #3
 800d3f4:	68fa      	ldr	r2, [r7, #12]
 800d3f6:	4413      	add	r3, r2
 800d3f8:	ed93 7a01 	vldr	s14, [r3, #4]
 800d3fc:	edd7 7a06 	vldr	s15, [r7, #24]
 800d400:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d402:	00db      	lsls	r3, r3, #3
 800d404:	68fa      	ldr	r2, [r7, #12]
 800d406:	4413      	add	r3, r2
 800d408:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d40c:	edc3 7a01 	vstr	s15, [r3, #4]

         Fout[m].r -= scratch[0].i;
 800d410:	683b      	ldr	r3, [r7, #0]
 800d412:	00db      	lsls	r3, r3, #3
 800d414:	68fa      	ldr	r2, [r7, #12]
 800d416:	4413      	add	r3, r2
 800d418:	ed93 7a00 	vldr	s14, [r3]
 800d41c:	edd7 7a07 	vldr	s15, [r7, #28]
 800d420:	683b      	ldr	r3, [r7, #0]
 800d422:	00db      	lsls	r3, r3, #3
 800d424:	68fa      	ldr	r2, [r7, #12]
 800d426:	4413      	add	r3, r2
 800d428:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d42c:	edc3 7a00 	vstr	s15, [r3]
         Fout[m].i += scratch[0].r;
 800d430:	683b      	ldr	r3, [r7, #0]
 800d432:	00db      	lsls	r3, r3, #3
 800d434:	68fa      	ldr	r2, [r7, #12]
 800d436:	4413      	add	r3, r2
 800d438:	ed93 7a01 	vldr	s14, [r3, #4]
 800d43c:	edd7 7a06 	vldr	s15, [r7, #24]
 800d440:	683b      	ldr	r3, [r7, #0]
 800d442:	00db      	lsls	r3, r3, #3
 800d444:	68fa      	ldr	r2, [r7, #12]
 800d446:	4413      	add	r3, r2
 800d448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d44c:	edc3 7a01 	vstr	s15, [r3, #4]

         ++Fout;
 800d450:	68fb      	ldr	r3, [r7, #12]
 800d452:	3308      	adds	r3, #8
 800d454:	60fb      	str	r3, [r7, #12]
     }while(--k);
 800d456:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d458:	3b01      	subs	r3, #1
 800d45a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d45c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d45e:	2b00      	cmp	r3, #0
 800d460:	bf14      	ite	ne
 800d462:	2301      	movne	r3, #1
 800d464:	2300      	moveq	r3, #0
 800d466:	b2db      	uxtb	r3, r3
 800d468:	2b00      	cmp	r3, #0
 800d46a:	d000      	beq.n	800d46e <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x2d2>
     do{
 800d46c:	e6b6      	b.n	800d1dc <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej+0x40>
}
 800d46e:	bf00      	nop
 800d470:	3750      	adds	r7, #80	; 0x50
 800d472:	46bd      	mov	sp, r7
 800d474:	bdb0      	pop	{r4, r5, r7, pc}
 800d476:	bf00      	nop
 800d478:	3fe00000 	.word	0x3fe00000

0800d47c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>:
        kiss_fft_cpx * Fout,
        const size_t fstride,
        const kiss_fft_cfg st,
        int m
        )
{
 800d47c:	b480      	push	{r7}
 800d47e:	b0ab      	sub	sp, #172	; 0xac
 800d480:	af00      	add	r7, sp, #0
 800d482:	60f8      	str	r0, [r7, #12]
 800d484:	60b9      	str	r1, [r7, #8]
 800d486:	607a      	str	r2, [r7, #4]
 800d488:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx *Fout0,*Fout1,*Fout2,*Fout3,*Fout4;
    int u;
    kiss_fft_cpx scratch[13];
    kiss_fft_cpx * twiddles = st->twiddles;
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d490:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
    kiss_fft_cpx *tw;
    kiss_fft_cpx ya,yb;
    ya = twiddles[fstride*m];
 800d494:	683b      	ldr	r3, [r7, #0]
 800d496:	68ba      	ldr	r2, [r7, #8]
 800d498:	fb02 f303 	mul.w	r3, r2, r3
 800d49c:	00db      	lsls	r3, r3, #3
 800d49e:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d4a2:	441a      	add	r2, r3
 800d4a4:	f107 0318 	add.w	r3, r7, #24
 800d4a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4ac:	e883 0003 	stmia.w	r3, {r0, r1}
    yb = twiddles[fstride*2*m];
 800d4b0:	683b      	ldr	r3, [r7, #0]
 800d4b2:	68ba      	ldr	r2, [r7, #8]
 800d4b4:	fb02 f303 	mul.w	r3, r2, r3
 800d4b8:	011b      	lsls	r3, r3, #4
 800d4ba:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800d4be:	441a      	add	r2, r3
 800d4c0:	f107 0310 	add.w	r3, r7, #16
 800d4c4:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d4c8:	e883 0003 	stmia.w	r3, {r0, r1}

    Fout0=Fout;
 800d4cc:	68fb      	ldr	r3, [r7, #12]
 800d4ce:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    Fout1=Fout0+m;
 800d4d2:	683b      	ldr	r3, [r7, #0]
 800d4d4:	00db      	lsls	r3, r3, #3
 800d4d6:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d4da:	4413      	add	r3, r2
 800d4dc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    Fout2=Fout0+2*m;
 800d4e0:	683b      	ldr	r3, [r7, #0]
 800d4e2:	011b      	lsls	r3, r3, #4
 800d4e4:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d4e8:	4413      	add	r3, r2
 800d4ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    Fout3=Fout0+3*m;
 800d4ee:	683a      	ldr	r2, [r7, #0]
 800d4f0:	4613      	mov	r3, r2
 800d4f2:	005b      	lsls	r3, r3, #1
 800d4f4:	4413      	add	r3, r2
 800d4f6:	00db      	lsls	r3, r3, #3
 800d4f8:	461a      	mov	r2, r3
 800d4fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d4fe:	4413      	add	r3, r2
 800d500:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    Fout4=Fout0+4*m;
 800d504:	683b      	ldr	r3, [r7, #0]
 800d506:	015b      	lsls	r3, r3, #5
 800d508:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d50c:	4413      	add	r3, r2
 800d50e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

    tw=st->twiddles;
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800d518:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
    for ( u=0; u<m; ++u ) {
 800d51c:	2300      	movs	r3, #0
 800d51e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800d522:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	429a      	cmp	r2, r3
 800d52a:	f280 82a9 	bge.w	800da80 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0x604>
        C_FIXDIV( *Fout0,5); C_FIXDIV( *Fout1,5); C_FIXDIV( *Fout2,5); C_FIXDIV( *Fout3,5); C_FIXDIV( *Fout4,5);
        scratch[0] = *Fout0;
 800d52e:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 800d532:	f107 0320 	add.w	r3, r7, #32
 800d536:	e892 0003 	ldmia.w	r2, {r0, r1}
 800d53a:	e883 0003 	stmia.w	r3, {r0, r1}

        C_MUL(scratch[1] ,*Fout1, tw[u*fstride]);
 800d53e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d542:	ed93 7a00 	vldr	s14, [r3]
 800d546:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d54a:	68ba      	ldr	r2, [r7, #8]
 800d54c:	fb02 f303 	mul.w	r3, r2, r3
 800d550:	00db      	lsls	r3, r3, #3
 800d552:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d556:	4413      	add	r3, r2
 800d558:	edd3 7a00 	vldr	s15, [r3]
 800d55c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d560:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d564:	edd3 6a01 	vldr	s13, [r3, #4]
 800d568:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d56c:	68ba      	ldr	r2, [r7, #8]
 800d56e:	fb02 f303 	mul.w	r3, r2, r3
 800d572:	00db      	lsls	r3, r3, #3
 800d574:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d578:	4413      	add	r3, r2
 800d57a:	edd3 7a01 	vldr	s15, [r3, #4]
 800d57e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d582:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d586:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800d58a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d58e:	ed93 7a00 	vldr	s14, [r3]
 800d592:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d596:	68ba      	ldr	r2, [r7, #8]
 800d598:	fb02 f303 	mul.w	r3, r2, r3
 800d59c:	00db      	lsls	r3, r3, #3
 800d59e:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d5a2:	4413      	add	r3, r2
 800d5a4:	edd3 7a01 	vldr	s15, [r3, #4]
 800d5a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5ac:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d5b0:	edd3 6a01 	vldr	s13, [r3, #4]
 800d5b4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5b8:	68ba      	ldr	r2, [r7, #8]
 800d5ba:	fb02 f303 	mul.w	r3, r2, r3
 800d5be:	00db      	lsls	r3, r3, #3
 800d5c0:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d5c4:	4413      	add	r3, r2
 800d5c6:	edd3 7a00 	vldr	s15, [r3]
 800d5ca:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d5ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d5d2:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_MUL(scratch[2] ,*Fout2, tw[2*u*fstride]);
 800d5d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5da:	ed93 7a00 	vldr	s14, [r3]
 800d5de:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d5e2:	68ba      	ldr	r2, [r7, #8]
 800d5e4:	fb02 f303 	mul.w	r3, r2, r3
 800d5e8:	011b      	lsls	r3, r3, #4
 800d5ea:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d5ee:	4413      	add	r3, r2
 800d5f0:	edd3 7a00 	vldr	s15, [r3]
 800d5f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d5f8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d5fc:	edd3 6a01 	vldr	s13, [r3, #4]
 800d600:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d604:	68ba      	ldr	r2, [r7, #8]
 800d606:	fb02 f303 	mul.w	r3, r2, r3
 800d60a:	011b      	lsls	r3, r3, #4
 800d60c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d610:	4413      	add	r3, r2
 800d612:	edd3 7a01 	vldr	s15, [r3, #4]
 800d616:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d61a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d61e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800d622:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d626:	ed93 7a00 	vldr	s14, [r3]
 800d62a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d62e:	68ba      	ldr	r2, [r7, #8]
 800d630:	fb02 f303 	mul.w	r3, r2, r3
 800d634:	011b      	lsls	r3, r3, #4
 800d636:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d63a:	4413      	add	r3, r2
 800d63c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d640:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d644:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800d648:	edd3 6a01 	vldr	s13, [r3, #4]
 800d64c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d650:	68ba      	ldr	r2, [r7, #8]
 800d652:	fb02 f303 	mul.w	r3, r2, r3
 800d656:	011b      	lsls	r3, r3, #4
 800d658:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d65c:	4413      	add	r3, r2
 800d65e:	edd3 7a00 	vldr	s15, [r3]
 800d662:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d666:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d66a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
        C_MUL(scratch[3] ,*Fout3, tw[3*u*fstride]);
 800d66e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d672:	ed93 7a00 	vldr	s14, [r3]
 800d676:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d67a:	68ba      	ldr	r2, [r7, #8]
 800d67c:	fb02 f203 	mul.w	r2, r2, r3
 800d680:	4613      	mov	r3, r2
 800d682:	005b      	lsls	r3, r3, #1
 800d684:	4413      	add	r3, r2
 800d686:	00db      	lsls	r3, r3, #3
 800d688:	461a      	mov	r2, r3
 800d68a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d68e:	4413      	add	r3, r2
 800d690:	edd3 7a00 	vldr	s15, [r3]
 800d694:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d698:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d69c:	edd3 6a01 	vldr	s13, [r3, #4]
 800d6a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6a4:	68ba      	ldr	r2, [r7, #8]
 800d6a6:	fb02 f203 	mul.w	r2, r2, r3
 800d6aa:	4613      	mov	r3, r2
 800d6ac:	005b      	lsls	r3, r3, #1
 800d6ae:	4413      	add	r3, r2
 800d6b0:	00db      	lsls	r3, r3, #3
 800d6b2:	461a      	mov	r2, r3
 800d6b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6b8:	4413      	add	r3, r2
 800d6ba:	edd3 7a01 	vldr	s15, [r3, #4]
 800d6be:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d6c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d6c6:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
 800d6ca:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6ce:	ed93 7a00 	vldr	s14, [r3]
 800d6d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d6d6:	68ba      	ldr	r2, [r7, #8]
 800d6d8:	fb02 f203 	mul.w	r2, r2, r3
 800d6dc:	4613      	mov	r3, r2
 800d6de:	005b      	lsls	r3, r3, #1
 800d6e0:	4413      	add	r3, r2
 800d6e2:	00db      	lsls	r3, r3, #3
 800d6e4:	461a      	mov	r2, r3
 800d6e6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d6ea:	4413      	add	r3, r2
 800d6ec:	edd3 7a01 	vldr	s15, [r3, #4]
 800d6f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d6f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800d6f8:	edd3 6a01 	vldr	s13, [r3, #4]
 800d6fc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d700:	68ba      	ldr	r2, [r7, #8]
 800d702:	fb02 f203 	mul.w	r2, r2, r3
 800d706:	4613      	mov	r3, r2
 800d708:	005b      	lsls	r3, r3, #1
 800d70a:	4413      	add	r3, r2
 800d70c:	00db      	lsls	r3, r3, #3
 800d70e:	461a      	mov	r2, r3
 800d710:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800d714:	4413      	add	r3, r2
 800d716:	edd3 7a00 	vldr	s15, [r3]
 800d71a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d71e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d722:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_MUL(scratch[4] ,*Fout4, tw[4*u*fstride]);
 800d726:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d72a:	ed93 7a00 	vldr	s14, [r3]
 800d72e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d732:	68ba      	ldr	r2, [r7, #8]
 800d734:	fb02 f303 	mul.w	r3, r2, r3
 800d738:	015b      	lsls	r3, r3, #5
 800d73a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d73e:	4413      	add	r3, r2
 800d740:	edd3 7a00 	vldr	s15, [r3]
 800d744:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d748:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d74c:	edd3 6a01 	vldr	s13, [r3, #4]
 800d750:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	fb02 f303 	mul.w	r3, r2, r3
 800d75a:	015b      	lsls	r3, r3, #5
 800d75c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d760:	4413      	add	r3, r2
 800d762:	edd3 7a01 	vldr	s15, [r3, #4]
 800d766:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d76a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d76e:	edc7 7a10 	vstr	s15, [r7, #64]	; 0x40
 800d772:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d776:	ed93 7a00 	vldr	s14, [r3]
 800d77a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d77e:	68ba      	ldr	r2, [r7, #8]
 800d780:	fb02 f303 	mul.w	r3, r2, r3
 800d784:	015b      	lsls	r3, r3, #5
 800d786:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d78a:	4413      	add	r3, r2
 800d78c:	edd3 7a01 	vldr	s15, [r3, #4]
 800d790:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d794:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d798:	edd3 6a01 	vldr	s13, [r3, #4]
 800d79c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800d7a0:	68ba      	ldr	r2, [r7, #8]
 800d7a2:	fb02 f303 	mul.w	r3, r2, r3
 800d7a6:	015b      	lsls	r3, r3, #5
 800d7a8:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800d7ac:	4413      	add	r3, r2
 800d7ae:	edd3 7a00 	vldr	s15, [r3]
 800d7b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d7b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7ba:	edc7 7a11 	vstr	s15, [r7, #68]	; 0x44

        C_ADD( scratch[7],scratch[1],scratch[4]);
 800d7be:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7c2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d7c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7ca:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800d7ce:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d7d2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d7d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d7da:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
        C_SUB( scratch[10],scratch[1],scratch[4]);
 800d7de:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800d7e2:	edd7 7a10 	vldr	s15, [r7, #64]	; 0x40
 800d7e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7ea:	edc7 7a1c 	vstr	s15, [r7, #112]	; 0x70
 800d7ee:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800d7f2:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 800d7f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d7fa:	edc7 7a1d 	vstr	s15, [r7, #116]	; 0x74
        C_ADD( scratch[8],scratch[2],scratch[3]);
 800d7fe:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d802:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d806:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d80a:	edc7 7a18 	vstr	s15, [r7, #96]	; 0x60
 800d80e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d812:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d81a:	edc7 7a19 	vstr	s15, [r7, #100]	; 0x64
        C_SUB( scratch[9],scratch[2],scratch[3]);
 800d81e:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800d822:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800d826:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d82a:	edc7 7a1a 	vstr	s15, [r7, #104]	; 0x68
 800d82e:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800d832:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800d836:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d83a:	edc7 7a1b 	vstr	s15, [r7, #108]	; 0x6c

        Fout0->r += scratch[7].r + scratch[8].r;
 800d83e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d842:	ed93 7a00 	vldr	s14, [r3]
 800d846:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d84a:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 800d84e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d852:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d856:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d85a:	edc3 7a00 	vstr	s15, [r3]
        Fout0->i += scratch[7].i + scratch[8].i;
 800d85e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d862:	ed93 7a01 	vldr	s14, [r3, #4]
 800d866:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800d86a:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 800d86e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800d872:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d876:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800d87a:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[5].r = scratch[0].r + S_MUL(scratch[7].r,ya.r) + S_MUL(scratch[8].r,yb.r);
 800d87e:	ed97 7a08 	vldr	s14, [r7, #32]
 800d882:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d886:	edd7 7a06 	vldr	s15, [r7, #24]
 800d88a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d88e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d892:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800d896:	edd7 7a04 	vldr	s15, [r7, #16]
 800d89a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d89e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8a2:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
        scratch[5].i = scratch[0].i + S_MUL(scratch[7].i,ya.r) + S_MUL(scratch[8].i,yb.r);
 800d8a6:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d8aa:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800d8ae:	edd7 7a06 	vldr	s15, [r7, #24]
 800d8b2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d8ba:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800d8be:	edd7 7a04 	vldr	s15, [r7, #16]
 800d8c2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8ca:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c

        scratch[6].r =  S_MUL(scratch[10].i,ya.i) + S_MUL(scratch[9].i,yb.i);
 800d8ce:	ed97 7a1d 	vldr	s14, [r7, #116]	; 0x74
 800d8d2:	edd7 7a07 	vldr	s15, [r7, #28]
 800d8d6:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d8da:	edd7 6a1b 	vldr	s13, [r7, #108]	; 0x6c
 800d8de:	edd7 7a05 	vldr	s15, [r7, #20]
 800d8e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d8e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d8ea:	edc7 7a14 	vstr	s15, [r7, #80]	; 0x50
        scratch[6].i = -S_MUL(scratch[10].r,ya.i) - S_MUL(scratch[9].r,yb.i);
 800d8ee:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800d8f2:	edd7 7a07 	vldr	s15, [r7, #28]
 800d8f6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d8fa:	eeb1 7a67 	vneg.f32	s14, s15
 800d8fe:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800d902:	edd7 7a05 	vldr	s15, [r7, #20]
 800d906:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d90a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d90e:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54

        C_SUB(*Fout1,scratch[5],scratch[6]);
 800d912:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d916:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d91a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d91e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d922:	edc3 7a00 	vstr	s15, [r3]
 800d926:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d92a:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d92e:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d932:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800d936:	edc3 7a01 	vstr	s15, [r3, #4]
        C_ADD(*Fout4,scratch[5],scratch[6]);
 800d93a:	ed97 7a12 	vldr	s14, [r7, #72]	; 0x48
 800d93e:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 800d942:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d946:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d94a:	edc3 7a00 	vstr	s15, [r3]
 800d94e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800d952:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 800d956:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d95a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800d95e:	edc3 7a01 	vstr	s15, [r3, #4]

        scratch[11].r = scratch[0].r + S_MUL(scratch[7].r,yb.r) + S_MUL(scratch[8].r,ya.r);
 800d962:	ed97 7a08 	vldr	s14, [r7, #32]
 800d966:	edd7 6a16 	vldr	s13, [r7, #88]	; 0x58
 800d96a:	edd7 7a04 	vldr	s15, [r7, #16]
 800d96e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d972:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d976:	edd7 6a18 	vldr	s13, [r7, #96]	; 0x60
 800d97a:	edd7 7a06 	vldr	s15, [r7, #24]
 800d97e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d982:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d986:	edc7 7a1e 	vstr	s15, [r7, #120]	; 0x78
        scratch[11].i = scratch[0].i + S_MUL(scratch[7].i,yb.r) + S_MUL(scratch[8].i,ya.r);
 800d98a:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 800d98e:	edd7 6a17 	vldr	s13, [r7, #92]	; 0x5c
 800d992:	edd7 7a04 	vldr	s15, [r7, #16]
 800d996:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d99a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d99e:	edd7 6a19 	vldr	s13, [r7, #100]	; 0x64
 800d9a2:	edd7 7a06 	vldr	s15, [r7, #24]
 800d9a6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9ae:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
        scratch[12].r = - S_MUL(scratch[10].i,yb.i) + S_MUL(scratch[9].i,ya.i);
 800d9b2:	ed97 7a1b 	vldr	s14, [r7, #108]	; 0x6c
 800d9b6:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9ba:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9be:	edd7 6a1d 	vldr	s13, [r7, #116]	; 0x74
 800d9c2:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9ce:	edc7 7a20 	vstr	s15, [r7, #128]	; 0x80
        scratch[12].i = S_MUL(scratch[10].r,yb.i) - S_MUL(scratch[9].r,ya.i);
 800d9d2:	ed97 7a1c 	vldr	s14, [r7, #112]	; 0x70
 800d9d6:	edd7 7a05 	vldr	s15, [r7, #20]
 800d9da:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d9de:	edd7 6a1a 	vldr	s13, [r7, #104]	; 0x68
 800d9e2:	edd7 7a07 	vldr	s15, [r7, #28]
 800d9e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800d9ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d9ee:	edc7 7a21 	vstr	s15, [r7, #132]	; 0x84

        C_ADD(*Fout2,scratch[11],scratch[12]);
 800d9f2:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800d9f6:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800d9fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 800d9fe:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da02:	edc3 7a00 	vstr	s15, [r3]
 800da06:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800da0a:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800da0e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800da12:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da16:	edc3 7a01 	vstr	s15, [r3, #4]
        C_SUB(*Fout3,scratch[11],scratch[12]);
 800da1a:	ed97 7a1e 	vldr	s14, [r7, #120]	; 0x78
 800da1e:	edd7 7a20 	vldr	s15, [r7, #128]	; 0x80
 800da22:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da26:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da2a:	edc3 7a00 	vstr	s15, [r3]
 800da2e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 800da32:	edd7 7a21 	vldr	s15, [r7, #132]	; 0x84
 800da36:	ee77 7a67 	vsub.f32	s15, s14, s15
 800da3a:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da3e:	edc3 7a01 	vstr	s15, [r3, #4]

        ++Fout0;++Fout1;++Fout2;++Fout3;++Fout4;
 800da42:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800da46:	3308      	adds	r3, #8
 800da48:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 800da4c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800da50:	3308      	adds	r3, #8
 800da52:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800da56:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800da5a:	3308      	adds	r3, #8
 800da5c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800da60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800da64:	3308      	adds	r3, #8
 800da66:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800da6a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800da6e:	3308      	adds	r3, #8
 800da70:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    for ( u=0; u<m; ++u ) {
 800da74:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800da78:	3301      	adds	r3, #1
 800da7a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800da7e:	e550      	b.n	800d522 <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei+0xa6>
    }
}
 800da80:	bf00      	nop
 800da82:	37ac      	adds	r7, #172	; 0xac
 800da84:	46bd      	mov	sp, r7
 800da86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da8a:	4770      	bx	lr

0800da8c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>:
        const size_t fstride,
        const kiss_fft_cfg st,
        int m,
        int p
        )
{
 800da8c:	b580      	push	{r7, lr}
 800da8e:	b08e      	sub	sp, #56	; 0x38
 800da90:	af00      	add	r7, sp, #0
 800da92:	60f8      	str	r0, [r7, #12]
 800da94:	60b9      	str	r1, [r7, #8]
 800da96:	607a      	str	r2, [r7, #4]
 800da98:	603b      	str	r3, [r7, #0]
    int u,k,q1,q;
    kiss_fft_cpx * twiddles = st->twiddles;
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	f503 7384 	add.w	r3, r3, #264	; 0x108
 800daa0:	623b      	str	r3, [r7, #32]
    kiss_fft_cpx t;
    int Norig = st->nfft;
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	61fb      	str	r3, [r7, #28]

    kiss_fft_cpx * scratch = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC(sizeof(kiss_fft_cpx)*p);
 800daa8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800daaa:	00db      	lsls	r3, r3, #3
 800daac:	4618      	mov	r0, r3
 800daae:	f00d fb75 	bl	801b19c <malloc>
 800dab2:	4603      	mov	r3, r0
 800dab4:	61bb      	str	r3, [r7, #24]

    for ( u=0; u<m; ++u ) {
 800dab6:	2300      	movs	r3, #0
 800dab8:	637b      	str	r3, [r7, #52]	; 0x34
 800daba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dabc:	683b      	ldr	r3, [r7, #0]
 800dabe:	429a      	cmp	r2, r3
 800dac0:	f280 80b6 	bge.w	800dc30 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x1a4>
        k=u;
 800dac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dac6:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800dac8:	2300      	movs	r3, #0
 800daca:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dacc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dace:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800dad0:	429a      	cmp	r2, r3
 800dad2:	da14      	bge.n	800dafe <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x72>
            scratch[q1] = Fout[ k  ];
 800dad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dad6:	00db      	lsls	r3, r3, #3
 800dad8:	68fa      	ldr	r2, [r7, #12]
 800dada:	18d1      	adds	r1, r2, r3
 800dadc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dade:	00db      	lsls	r3, r3, #3
 800dae0:	69ba      	ldr	r2, [r7, #24]
 800dae2:	4413      	add	r3, r2
 800dae4:	460a      	mov	r2, r1
 800dae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 800daea:	e883 0003 	stmia.w	r3, {r0, r1}
            C_FIXDIV(scratch[q1],p);
            k += m;
 800daee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800daf0:	683b      	ldr	r3, [r7, #0]
 800daf2:	4413      	add	r3, r2
 800daf4:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800daf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800daf8:	3301      	adds	r3, #1
 800dafa:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dafc:	e7e6      	b.n	800dacc <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x40>
        }

        k=u;
 800dafe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800db00:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800db02:	2300      	movs	r3, #0
 800db04:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db06:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db0a:	429a      	cmp	r2, r3
 800db0c:	f280 808c 	bge.w	800dc28 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x19c>
            int twidx=0;
 800db10:	2300      	movs	r3, #0
 800db12:	627b      	str	r3, [r7, #36]	; 0x24
            Fout[ k ] = scratch[0];
 800db14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db16:	00db      	lsls	r3, r3, #3
 800db18:	68fa      	ldr	r2, [r7, #12]
 800db1a:	4413      	add	r3, r2
 800db1c:	69ba      	ldr	r2, [r7, #24]
 800db1e:	e892 0003 	ldmia.w	r2, {r0, r1}
 800db22:	e883 0003 	stmia.w	r3, {r0, r1}
            for (q=1;q<p;++q ) {
 800db26:	2301      	movs	r3, #1
 800db28:	62bb      	str	r3, [r7, #40]	; 0x28
 800db2a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800db2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800db2e:	429a      	cmp	r2, r3
 800db30:	da72      	bge.n	800dc18 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x18c>
                twidx += fstride * k;
 800db32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800db34:	68ba      	ldr	r2, [r7, #8]
 800db36:	fb02 f203 	mul.w	r2, r2, r3
 800db3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db3c:	4413      	add	r3, r2
 800db3e:	627b      	str	r3, [r7, #36]	; 0x24
                if (twidx>=Norig) twidx-=Norig;
 800db40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db42:	69fb      	ldr	r3, [r7, #28]
 800db44:	429a      	cmp	r2, r3
 800db46:	db03      	blt.n	800db50 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0xc4>
 800db48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	1ad3      	subs	r3, r2, r3
 800db4e:	627b      	str	r3, [r7, #36]	; 0x24
                C_MUL(t,scratch[q] , twiddles[twidx] );
 800db50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db52:	00db      	lsls	r3, r3, #3
 800db54:	69ba      	ldr	r2, [r7, #24]
 800db56:	4413      	add	r3, r2
 800db58:	ed93 7a00 	vldr	s14, [r3]
 800db5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db5e:	00db      	lsls	r3, r3, #3
 800db60:	6a3a      	ldr	r2, [r7, #32]
 800db62:	4413      	add	r3, r2
 800db64:	edd3 7a00 	vldr	s15, [r3]
 800db68:	ee27 7a27 	vmul.f32	s14, s14, s15
 800db6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db6e:	00db      	lsls	r3, r3, #3
 800db70:	69ba      	ldr	r2, [r7, #24]
 800db72:	4413      	add	r3, r2
 800db74:	edd3 6a01 	vldr	s13, [r3, #4]
 800db78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db7a:	00db      	lsls	r3, r3, #3
 800db7c:	6a3a      	ldr	r2, [r7, #32]
 800db7e:	4413      	add	r3, r2
 800db80:	edd3 7a01 	vldr	s15, [r3, #4]
 800db84:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800db88:	ee77 7a67 	vsub.f32	s15, s14, s15
 800db8c:	edc7 7a04 	vstr	s15, [r7, #16]
 800db90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db92:	00db      	lsls	r3, r3, #3
 800db94:	69ba      	ldr	r2, [r7, #24]
 800db96:	4413      	add	r3, r2
 800db98:	ed93 7a00 	vldr	s14, [r3]
 800db9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db9e:	00db      	lsls	r3, r3, #3
 800dba0:	6a3a      	ldr	r2, [r7, #32]
 800dba2:	4413      	add	r3, r2
 800dba4:	edd3 7a01 	vldr	s15, [r3, #4]
 800dba8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800dbac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dbae:	00db      	lsls	r3, r3, #3
 800dbb0:	69ba      	ldr	r2, [r7, #24]
 800dbb2:	4413      	add	r3, r2
 800dbb4:	edd3 6a01 	vldr	s13, [r3, #4]
 800dbb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dbba:	00db      	lsls	r3, r3, #3
 800dbbc:	6a3a      	ldr	r2, [r7, #32]
 800dbbe:	4413      	add	r3, r2
 800dbc0:	edd3 7a00 	vldr	s15, [r3]
 800dbc4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800dbc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbcc:	edc7 7a05 	vstr	s15, [r7, #20]
                C_ADDTO( Fout[ k ] ,t);
 800dbd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbd2:	00db      	lsls	r3, r3, #3
 800dbd4:	68fa      	ldr	r2, [r7, #12]
 800dbd6:	4413      	add	r3, r2
 800dbd8:	ed93 7a00 	vldr	s14, [r3]
 800dbdc:	edd7 7a04 	vldr	s15, [r7, #16]
 800dbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbe2:	00db      	lsls	r3, r3, #3
 800dbe4:	68fa      	ldr	r2, [r7, #12]
 800dbe6:	4413      	add	r3, r2
 800dbe8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dbec:	edc3 7a00 	vstr	s15, [r3]
 800dbf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dbf2:	00db      	lsls	r3, r3, #3
 800dbf4:	68fa      	ldr	r2, [r7, #12]
 800dbf6:	4413      	add	r3, r2
 800dbf8:	ed93 7a01 	vldr	s14, [r3, #4]
 800dbfc:	edd7 7a05 	vldr	s15, [r7, #20]
 800dc00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dc02:	00db      	lsls	r3, r3, #3
 800dc04:	68fa      	ldr	r2, [r7, #12]
 800dc06:	4413      	add	r3, r2
 800dc08:	ee77 7a27 	vadd.f32	s15, s14, s15
 800dc0c:	edc3 7a01 	vstr	s15, [r3, #4]
            for (q=1;q<p;++q ) {
 800dc10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc12:	3301      	adds	r3, #1
 800dc14:	62bb      	str	r3, [r7, #40]	; 0x28
 800dc16:	e788      	b.n	800db2a <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x9e>
            }
            k += m;
 800dc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc1a:	683b      	ldr	r3, [r7, #0]
 800dc1c:	4413      	add	r3, r2
 800dc1e:	633b      	str	r3, [r7, #48]	; 0x30
        for ( q1=0 ; q1<p ; ++q1 ) {
 800dc20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dc22:	3301      	adds	r3, #1
 800dc24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800dc26:	e76e      	b.n	800db06 <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x7a>
    for ( u=0; u<m; ++u ) {
 800dc28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2a:	3301      	adds	r3, #1
 800dc2c:	637b      	str	r3, [r7, #52]	; 0x34
 800dc2e:	e744      	b.n	800daba <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii+0x2e>
        }
    }
    KISS_FFT_TMP_FREE(scratch);
 800dc30:	69b8      	ldr	r0, [r7, #24]
 800dc32:	f00d fabb 	bl	801b1ac <free>
}
 800dc36:	bf00      	nop
 800dc38:	3738      	adds	r7, #56	; 0x38
 800dc3a:	46bd      	mov	sp, r7
 800dc3c:	bd80      	pop	{r7, pc}
	...

0800dc40 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>:
        const size_t fstride,
        int in_stride,
        int * factors,
        const kiss_fft_cfg st
        )
{
 800dc40:	b580      	push	{r7, lr}
 800dc42:	b08a      	sub	sp, #40	; 0x28
 800dc44:	af02      	add	r7, sp, #8
 800dc46:	60f8      	str	r0, [r7, #12]
 800dc48:	60b9      	str	r1, [r7, #8]
 800dc4a:	607a      	str	r2, [r7, #4]
 800dc4c:	603b      	str	r3, [r7, #0]
    kiss_fft_cpx * Fout_beg=Fout;
 800dc4e:	68fb      	ldr	r3, [r7, #12]
 800dc50:	61fb      	str	r3, [r7, #28]
    const int p=*factors++; /* the radix  */
 800dc52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc54:	1d1a      	adds	r2, r3, #4
 800dc56:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc58:	681b      	ldr	r3, [r3, #0]
 800dc5a:	61bb      	str	r3, [r7, #24]
    const int m=*factors++; /* stage's fft length/p */
 800dc5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dc5e:	1d1a      	adds	r2, r3, #4
 800dc60:	62ba      	str	r2, [r7, #40]	; 0x28
 800dc62:	681b      	ldr	r3, [r3, #0]
 800dc64:	617b      	str	r3, [r7, #20]
    const kiss_fft_cpx * Fout_end = Fout + p*m;
 800dc66:	69bb      	ldr	r3, [r7, #24]
 800dc68:	697a      	ldr	r2, [r7, #20]
 800dc6a:	fb02 f303 	mul.w	r3, r2, r3
 800dc6e:	00db      	lsls	r3, r3, #3
 800dc70:	68fa      	ldr	r2, [r7, #12]
 800dc72:	4413      	add	r3, r2
 800dc74:	613b      	str	r3, [r7, #16]
        }
        return;
    }
#endif

    if (m==1) {
 800dc76:	697b      	ldr	r3, [r7, #20]
 800dc78:	2b01      	cmp	r3, #1
 800dc7a:	d11a      	bne.n	800dcb2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
        do{
            *Fout = *f;
 800dc7c:	68fb      	ldr	r3, [r7, #12]
 800dc7e:	68ba      	ldr	r2, [r7, #8]
 800dc80:	e892 0003 	ldmia.w	r2, {r0, r1}
 800dc84:	e883 0003 	stmia.w	r3, {r0, r1}
            f += fstride*in_stride;
 800dc88:	683b      	ldr	r3, [r7, #0]
 800dc8a:	687a      	ldr	r2, [r7, #4]
 800dc8c:	fb02 f303 	mul.w	r3, r2, r3
 800dc90:	00db      	lsls	r3, r3, #3
 800dc92:	68ba      	ldr	r2, [r7, #8]
 800dc94:	4413      	add	r3, r2
 800dc96:	60bb      	str	r3, [r7, #8]
        }while(++Fout != Fout_end );
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	3308      	adds	r3, #8
 800dc9c:	60fb      	str	r3, [r7, #12]
 800dc9e:	68fa      	ldr	r2, [r7, #12]
 800dca0:	693b      	ldr	r3, [r7, #16]
 800dca2:	429a      	cmp	r2, r3
 800dca4:	bf14      	ite	ne
 800dca6:	2301      	movne	r3, #1
 800dca8:	2300      	moveq	r3, #0
 800dcaa:	b2db      	uxtb	r3, r3
 800dcac:	2b00      	cmp	r3, #0
 800dcae:	d024      	beq.n	800dcfa <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800dcb0:	e7e4      	b.n	800dc7c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x3c>
        do{
            // recursive call:
            // DFT of size m*p performed by doing
            // p instances of smaller DFTs of size m,
            // each one takes a decimated version of the input
            kf_work( Fout , f, fstride*p, in_stride, factors,st);
 800dcb2:	69bb      	ldr	r3, [r7, #24]
 800dcb4:	687a      	ldr	r2, [r7, #4]
 800dcb6:	fb02 f203 	mul.w	r2, r2, r3
 800dcba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dcbc:	9301      	str	r3, [sp, #4]
 800dcbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcc0:	9300      	str	r3, [sp, #0]
 800dcc2:	683b      	ldr	r3, [r7, #0]
 800dcc4:	68b9      	ldr	r1, [r7, #8]
 800dcc6:	68f8      	ldr	r0, [r7, #12]
 800dcc8:	f7ff ffba 	bl	800dc40 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
            f += fstride*in_stride;
 800dccc:	683b      	ldr	r3, [r7, #0]
 800dcce:	687a      	ldr	r2, [r7, #4]
 800dcd0:	fb02 f303 	mul.w	r3, r2, r3
 800dcd4:	00db      	lsls	r3, r3, #3
 800dcd6:	68ba      	ldr	r2, [r7, #8]
 800dcd8:	4413      	add	r3, r2
 800dcda:	60bb      	str	r3, [r7, #8]
        }while( (Fout += m) != Fout_end );
 800dcdc:	697b      	ldr	r3, [r7, #20]
 800dcde:	00db      	lsls	r3, r3, #3
 800dce0:	68fa      	ldr	r2, [r7, #12]
 800dce2:	4413      	add	r3, r2
 800dce4:	60fb      	str	r3, [r7, #12]
 800dce6:	68fa      	ldr	r2, [r7, #12]
 800dce8:	693b      	ldr	r3, [r7, #16]
 800dcea:	429a      	cmp	r2, r3
 800dcec:	bf14      	ite	ne
 800dcee:	2301      	movne	r3, #1
 800dcf0:	2300      	moveq	r3, #0
 800dcf2:	b2db      	uxtb	r3, r3
 800dcf4:	2b00      	cmp	r3, #0
 800dcf6:	d000      	beq.n	800dcfa <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xba>
        do{
 800dcf8:	e7db      	b.n	800dcb2 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x72>
    }

    Fout=Fout_beg;
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	60fb      	str	r3, [r7, #12]
 800dcfe:	69bb      	ldr	r3, [r7, #24]
 800dd00:	3b02      	subs	r3, #2
 800dd02:	2b03      	cmp	r3, #3
 800dd04:	d826      	bhi.n	800dd54 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x114>
 800dd06:	a201      	add	r2, pc, #4	; (adr r2, 800dd0c <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0xcc>)
 800dd08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800dd0c:	0800dd1d 	.word	0x0800dd1d
 800dd10:	0800dd2b 	.word	0x0800dd2b
 800dd14:	0800dd39 	.word	0x0800dd39
 800dd18:	0800dd47 	.word	0x0800dd47

    // recombine the p smaller DFTs
    switch (p) {
        case 2: kf_bfly2(Fout,fstride,st,m); break;
 800dd1c:	697b      	ldr	r3, [r7, #20]
 800dd1e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd20:	6879      	ldr	r1, [r7, #4]
 800dd22:	68f8      	ldr	r0, [r7, #12]
 800dd24:	f7ff f806 	bl	800cd34 <_ZL8kf_bfly2P12kiss_fft_cpxjP14kiss_fft_statei>
 800dd28:	e01d      	b.n	800dd66 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 3: kf_bfly3(Fout,fstride,st,m); break;
 800dd2a:	697b      	ldr	r3, [r7, #20]
 800dd2c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd2e:	6879      	ldr	r1, [r7, #4]
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f7ff fa33 	bl	800d19c <_ZL8kf_bfly3P12kiss_fft_cpxjP14kiss_fft_statej>
 800dd36:	e016      	b.n	800dd66 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 4: kf_bfly4(Fout,fstride,st,m); break;
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd3c:	6879      	ldr	r1, [r7, #4]
 800dd3e:	68f8      	ldr	r0, [r7, #12]
 800dd40:	f7ff f875 	bl	800ce2e <_ZL8kf_bfly4P12kiss_fft_cpxjP14kiss_fft_statej>
 800dd44:	e00f      	b.n	800dd66 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        case 5: kf_bfly5(Fout,fstride,st,m); break;
 800dd46:	697b      	ldr	r3, [r7, #20]
 800dd48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd4a:	6879      	ldr	r1, [r7, #4]
 800dd4c:	68f8      	ldr	r0, [r7, #12]
 800dd4e:	f7ff fb95 	bl	800d47c <_ZL8kf_bfly5P12kiss_fft_cpxjP14kiss_fft_statei>
 800dd52:	e008      	b.n	800dd66 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state+0x126>
        default: kf_bfly_generic(Fout,fstride,st,m,p); break;
 800dd54:	69bb      	ldr	r3, [r7, #24]
 800dd56:	9300      	str	r3, [sp, #0]
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dd5c:	6879      	ldr	r1, [r7, #4]
 800dd5e:	68f8      	ldr	r0, [r7, #12]
 800dd60:	f7ff fe94 	bl	800da8c <_ZL15kf_bfly_genericP12kiss_fft_cpxjP14kiss_fft_stateii>
 800dd64:	bf00      	nop
    }
}
 800dd66:	bf00      	nop
 800dd68:	3720      	adds	r7, #32
 800dd6a:	46bd      	mov	sp, r7
 800dd6c:	bd80      	pop	{r7, pc}
 800dd6e:	bf00      	nop

0800dd70 <_ZL9kf_factoriPi>:
    where
    p[i] * m[i] = m[i-1]
    m0 = n                  */
static
void kf_factor(int n,int * facbuf)
{
 800dd70:	b580      	push	{r7, lr}
 800dd72:	b086      	sub	sp, #24
 800dd74:	af00      	add	r7, sp, #0
 800dd76:	6078      	str	r0, [r7, #4]
 800dd78:	6039      	str	r1, [r7, #0]
    int p=4;
 800dd7a:	2304      	movs	r3, #4
 800dd7c:	617b      	str	r3, [r7, #20]
    double floor_sqrt;
    floor_sqrt = floor( sqrt((double)n) );
 800dd7e:	6878      	ldr	r0, [r7, #4]
 800dd80:	f7f2 fbf0 	bl	8000564 <__aeabi_i2d>
 800dd84:	4602      	mov	r2, r0
 800dd86:	460b      	mov	r3, r1
 800dd88:	ec43 2b10 	vmov	d0, r2, r3
 800dd8c:	f00a fcd2 	bl	8018734 <sqrt>
 800dd90:	eeb0 7a40 	vmov.f32	s14, s0
 800dd94:	eef0 7a60 	vmov.f32	s15, s1
 800dd98:	eeb0 0a47 	vmov.f32	s0, s14
 800dd9c:	eef0 0a67 	vmov.f32	s1, s15
 800dda0:	f00a f976 	bl	8018090 <floor>
 800dda4:	ed87 0b02 	vstr	d0, [r7, #8]

    /*factor out powers of 4, powers of 2, then any remaining primes */
    do {
        while (n % p) {
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	697a      	ldr	r2, [r7, #20]
 800ddac:	fb93 f2f2 	sdiv	r2, r3, r2
 800ddb0:	6979      	ldr	r1, [r7, #20]
 800ddb2:	fb01 f202 	mul.w	r2, r1, r2
 800ddb6:	1a9b      	subs	r3, r3, r2
 800ddb8:	2b00      	cmp	r3, #0
 800ddba:	d01e      	beq.n	800ddfa <_ZL9kf_factoriPi+0x8a>
            switch (p) {
 800ddbc:	697b      	ldr	r3, [r7, #20]
 800ddbe:	2b02      	cmp	r3, #2
 800ddc0:	d005      	beq.n	800ddce <_ZL9kf_factoriPi+0x5e>
 800ddc2:	697b      	ldr	r3, [r7, #20]
 800ddc4:	2b04      	cmp	r3, #4
 800ddc6:	d105      	bne.n	800ddd4 <_ZL9kf_factoriPi+0x64>
                case 4: p = 2; break;
 800ddc8:	2302      	movs	r3, #2
 800ddca:	617b      	str	r3, [r7, #20]
 800ddcc:	e006      	b.n	800dddc <_ZL9kf_factoriPi+0x6c>
                case 2: p = 3; break;
 800ddce:	2303      	movs	r3, #3
 800ddd0:	617b      	str	r3, [r7, #20]
 800ddd2:	e003      	b.n	800dddc <_ZL9kf_factoriPi+0x6c>
                default: p += 2; break;
 800ddd4:	697b      	ldr	r3, [r7, #20]
 800ddd6:	3302      	adds	r3, #2
 800ddd8:	617b      	str	r3, [r7, #20]
 800ddda:	bf00      	nop
            }
            if (p > floor_sqrt)
 800dddc:	6978      	ldr	r0, [r7, #20]
 800ddde:	f7f2 fbc1 	bl	8000564 <__aeabi_i2d>
 800dde2:	4602      	mov	r2, r0
 800dde4:	460b      	mov	r3, r1
 800dde6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800ddea:	f7f2 fe97 	bl	8000b1c <__aeabi_dcmplt>
 800ddee:	4603      	mov	r3, r0
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	d001      	beq.n	800ddf8 <_ZL9kf_factoriPi+0x88>
                p = n;          /* no more factors, skip to end */
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	617b      	str	r3, [r7, #20]
        while (n % p) {
 800ddf8:	e7d6      	b.n	800dda8 <_ZL9kf_factoriPi+0x38>
        }
        n /= p;
 800ddfa:	687a      	ldr	r2, [r7, #4]
 800ddfc:	697b      	ldr	r3, [r7, #20]
 800ddfe:	fb92 f3f3 	sdiv	r3, r2, r3
 800de02:	607b      	str	r3, [r7, #4]
        *facbuf++ = p;
 800de04:	683b      	ldr	r3, [r7, #0]
 800de06:	1d1a      	adds	r2, r3, #4
 800de08:	603a      	str	r2, [r7, #0]
 800de0a:	697a      	ldr	r2, [r7, #20]
 800de0c:	601a      	str	r2, [r3, #0]
        *facbuf++ = n;
 800de0e:	683b      	ldr	r3, [r7, #0]
 800de10:	1d1a      	adds	r2, r3, #4
 800de12:	603a      	str	r2, [r7, #0]
 800de14:	687a      	ldr	r2, [r7, #4]
 800de16:	601a      	str	r2, [r3, #0]
    } while (n > 1);
 800de18:	687b      	ldr	r3, [r7, #4]
 800de1a:	2b01      	cmp	r3, #1
 800de1c:	dd00      	ble.n	800de20 <_ZL9kf_factoriPi+0xb0>
    do {
 800de1e:	e7c3      	b.n	800dda8 <_ZL9kf_factoriPi+0x38>
}
 800de20:	bf00      	nop
 800de22:	3718      	adds	r7, #24
 800de24:	46bd      	mov	sp, r7
 800de26:	bd80      	pop	{r7, pc}

0800de28 <kiss_fft_alloc>:
 *
 * The return value is a contiguous block of memory, allocated with malloc.  As such,
 * It can be freed with free(), rather than a kiss_fft-specific function.
 * */
kiss_fft_cfg kiss_fft_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated )
{
 800de28:	b5b0      	push	{r4, r5, r7, lr}
 800de2a:	b08c      	sub	sp, #48	; 0x30
 800de2c:	af00      	add	r7, sp, #0
 800de2e:	60f8      	str	r0, [r7, #12]
 800de30:	60b9      	str	r1, [r7, #8]
 800de32:	607a      	str	r2, [r7, #4]
 800de34:	603b      	str	r3, [r7, #0]
    kiss_fft_cfg st=NULL;
 800de36:	2300      	movs	r3, #0
 800de38:	62fb      	str	r3, [r7, #44]	; 0x2c
    size_t memneeded = sizeof(struct kiss_fft_state)
        + sizeof(kiss_fft_cpx)*(nfft-1); /* twiddle factors*/
 800de3a:	68fb      	ldr	r3, [r7, #12]
 800de3c:	3321      	adds	r3, #33	; 0x21
    size_t memneeded = sizeof(struct kiss_fft_state)
 800de3e:	00db      	lsls	r3, r3, #3
 800de40:	61fb      	str	r3, [r7, #28]

    if ( lenmem==NULL ) {
 800de42:	683b      	ldr	r3, [r7, #0]
 800de44:	2b00      	cmp	r3, #0
 800de46:	d105      	bne.n	800de54 <kiss_fft_alloc+0x2c>
        st = ( kiss_fft_cfg)KISS_FFT_MALLOC( memneeded );
 800de48:	69f8      	ldr	r0, [r7, #28]
 800de4a:	f00d f9a7 	bl	801b19c <malloc>
 800de4e:	4603      	mov	r3, r0
 800de50:	62fb      	str	r3, [r7, #44]	; 0x2c
 800de52:	e00c      	b.n	800de6e <kiss_fft_alloc+0x46>
    }else{
        if (mem != NULL && *lenmem >= memneeded)
 800de54:	687b      	ldr	r3, [r7, #4]
 800de56:	2b00      	cmp	r3, #0
 800de58:	d006      	beq.n	800de68 <kiss_fft_alloc+0x40>
 800de5a:	683b      	ldr	r3, [r7, #0]
 800de5c:	681b      	ldr	r3, [r3, #0]
 800de5e:	69fa      	ldr	r2, [r7, #28]
 800de60:	429a      	cmp	r2, r3
 800de62:	d801      	bhi.n	800de68 <kiss_fft_alloc+0x40>
            st = (kiss_fft_cfg)mem;
 800de64:	687b      	ldr	r3, [r7, #4]
 800de66:	62fb      	str	r3, [r7, #44]	; 0x2c
        *lenmem = memneeded;
 800de68:	683b      	ldr	r3, [r7, #0]
 800de6a:	69fa      	ldr	r2, [r7, #28]
 800de6c:	601a      	str	r2, [r3, #0]
    }
    if (st) {
 800de6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de70:	2b00      	cmp	r3, #0
 800de72:	d05d      	beq.n	800df30 <kiss_fft_alloc+0x108>
        int i;
        st->nfft=nfft;
 800de74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de76:	68fa      	ldr	r2, [r7, #12]
 800de78:	601a      	str	r2, [r3, #0]
        st->inverse = inverse_fft;
 800de7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de7c:	68ba      	ldr	r2, [r7, #8]
 800de7e:	605a      	str	r2, [r3, #4]

        for (i=0;i<nfft;++i) {
 800de80:	2300      	movs	r3, #0
 800de82:	62bb      	str	r3, [r7, #40]	; 0x28
 800de84:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de86:	68fb      	ldr	r3, [r7, #12]
 800de88:	429a      	cmp	r2, r3
 800de8a:	da4b      	bge.n	800df24 <kiss_fft_alloc+0xfc>
            const double pi=3.141592653589793238462643383279502884197169399375105820974944;
 800de8c:	a32e      	add	r3, pc, #184	; (adr r3, 800df48 <kiss_fft_alloc+0x120>)
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	e9c7 2304 	strd	r2, r3, [r7, #16]
            double phase = -2*pi*i / nfft;
 800de96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800de98:	f7f2 fb64 	bl	8000564 <__aeabi_i2d>
 800de9c:	a32c      	add	r3, pc, #176	; (adr r3, 800df50 <kiss_fft_alloc+0x128>)
 800de9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea2:	f7f2 fbc9 	bl	8000638 <__aeabi_dmul>
 800dea6:	4602      	mov	r2, r0
 800dea8:	460b      	mov	r3, r1
 800deaa:	4614      	mov	r4, r2
 800deac:	461d      	mov	r5, r3
 800deae:	68f8      	ldr	r0, [r7, #12]
 800deb0:	f7f2 fb58 	bl	8000564 <__aeabi_i2d>
 800deb4:	4602      	mov	r2, r0
 800deb6:	460b      	mov	r3, r1
 800deb8:	4620      	mov	r0, r4
 800deba:	4629      	mov	r1, r5
 800debc:	f7f2 fce6 	bl	800088c <__aeabi_ddiv>
 800dec0:	4602      	mov	r2, r0
 800dec2:	460b      	mov	r3, r1
 800dec4:	e9c7 2308 	strd	r2, r3, [r7, #32]
            if (st->inverse)
 800dec8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deca:	685b      	ldr	r3, [r3, #4]
 800decc:	2b00      	cmp	r3, #0
 800dece:	d005      	beq.n	800dedc <kiss_fft_alloc+0xb4>
                phase *= -1;
 800ded0:	6a3b      	ldr	r3, [r7, #32]
 800ded2:	623b      	str	r3, [r7, #32]
 800ded4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ded6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800deda:	627b      	str	r3, [r7, #36]	; 0x24
            kf_cexp(st->twiddles+i, phase );
 800dedc:	ed97 0b08 	vldr	d0, [r7, #32]
 800dee0:	f00a f886 	bl	8017ff0 <cos>
 800dee4:	ec51 0b10 	vmov	r0, r1, d0
 800dee8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800deea:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800deee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800def0:	00db      	lsls	r3, r3, #3
 800def2:	18d4      	adds	r4, r2, r3
 800def4:	f7f2 fe98 	bl	8000c28 <__aeabi_d2f>
 800def8:	4603      	mov	r3, r0
 800defa:	6023      	str	r3, [r4, #0]
 800defc:	ed97 0b08 	vldr	d0, [r7, #32]
 800df00:	f00a f9c6 	bl	8018290 <sin>
 800df04:	ec51 0b10 	vmov	r0, r1, d0
 800df08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df0a:	f503 7284 	add.w	r2, r3, #264	; 0x108
 800df0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df10:	00db      	lsls	r3, r3, #3
 800df12:	18d4      	adds	r4, r2, r3
 800df14:	f7f2 fe88 	bl	8000c28 <__aeabi_d2f>
 800df18:	4603      	mov	r3, r0
 800df1a:	6063      	str	r3, [r4, #4]
        for (i=0;i<nfft;++i) {
 800df1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df1e:	3301      	adds	r3, #1
 800df20:	62bb      	str	r3, [r7, #40]	; 0x28
 800df22:	e7af      	b.n	800de84 <kiss_fft_alloc+0x5c>
        }

        kf_factor(nfft,st->factors);
 800df24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df26:	3308      	adds	r3, #8
 800df28:	4619      	mov	r1, r3
 800df2a:	68f8      	ldr	r0, [r7, #12]
 800df2c:	f7ff ff20 	bl	800dd70 <_ZL9kf_factoriPi>
    }

    if (memallocated != NULL) {
 800df30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df32:	2b00      	cmp	r3, #0
 800df34:	d002      	beq.n	800df3c <kiss_fft_alloc+0x114>
        *memallocated = memneeded;
 800df36:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800df38:	69fa      	ldr	r2, [r7, #28]
 800df3a:	601a      	str	r2, [r3, #0]
    }

    return st;
 800df3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800df3e:	4618      	mov	r0, r3
 800df40:	3730      	adds	r7, #48	; 0x30
 800df42:	46bd      	mov	sp, r7
 800df44:	bdb0      	pop	{r4, r5, r7, pc}
 800df46:	bf00      	nop
 800df48:	54442d18 	.word	0x54442d18
 800df4c:	400921fb 	.word	0x400921fb
 800df50:	54442d18 	.word	0x54442d18
 800df54:	c01921fb 	.word	0xc01921fb

0800df58 <kiss_fft_stride>:


void kiss_fft_stride(kiss_fft_cfg st,const kiss_fft_cpx *fin,kiss_fft_cpx *fout,int in_stride)
{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b088      	sub	sp, #32
 800df5c:	af02      	add	r7, sp, #8
 800df5e:	60f8      	str	r0, [r7, #12]
 800df60:	60b9      	str	r1, [r7, #8]
 800df62:	607a      	str	r2, [r7, #4]
 800df64:	603b      	str	r3, [r7, #0]
    if (fin == fout) {
 800df66:	68ba      	ldr	r2, [r7, #8]
 800df68:	687b      	ldr	r3, [r7, #4]
 800df6a:	429a      	cmp	r2, r3
 800df6c:	d11e      	bne.n	800dfac <kiss_fft_stride+0x54>
        //NOTE: this is not really an in-place FFT algorithm.
        //It just performs an out-of-place FFT into a temp buffer
        kiss_fft_cpx * tmpbuf = (kiss_fft_cpx*)KISS_FFT_TMP_ALLOC( sizeof(kiss_fft_cpx)*st->nfft);
 800df6e:	68fb      	ldr	r3, [r7, #12]
 800df70:	681b      	ldr	r3, [r3, #0]
 800df72:	00db      	lsls	r3, r3, #3
 800df74:	4618      	mov	r0, r3
 800df76:	f00d f911 	bl	801b19c <malloc>
 800df7a:	4603      	mov	r3, r0
 800df7c:	617b      	str	r3, [r7, #20]
        kf_work(tmpbuf,fin,1,in_stride, st->factors,st);
 800df7e:	68fb      	ldr	r3, [r7, #12]
 800df80:	3308      	adds	r3, #8
 800df82:	68fa      	ldr	r2, [r7, #12]
 800df84:	9201      	str	r2, [sp, #4]
 800df86:	9300      	str	r3, [sp, #0]
 800df88:	683b      	ldr	r3, [r7, #0]
 800df8a:	2201      	movs	r2, #1
 800df8c:	68b9      	ldr	r1, [r7, #8]
 800df8e:	6978      	ldr	r0, [r7, #20]
 800df90:	f7ff fe56 	bl	800dc40 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
        memcpy(fout,tmpbuf,sizeof(kiss_fft_cpx)*st->nfft);
 800df94:	68fb      	ldr	r3, [r7, #12]
 800df96:	681b      	ldr	r3, [r3, #0]
 800df98:	00db      	lsls	r3, r3, #3
 800df9a:	461a      	mov	r2, r3
 800df9c:	6979      	ldr	r1, [r7, #20]
 800df9e:	6878      	ldr	r0, [r7, #4]
 800dfa0:	f00d f91a 	bl	801b1d8 <memcpy>
        KISS_FFT_TMP_FREE(tmpbuf);
 800dfa4:	6978      	ldr	r0, [r7, #20]
 800dfa6:	f00d f901 	bl	801b1ac <free>
    }else{
        kf_work( fout, fin, 1,in_stride, st->factors,st );
    }
}
 800dfaa:	e00a      	b.n	800dfc2 <kiss_fft_stride+0x6a>
        kf_work( fout, fin, 1,in_stride, st->factors,st );
 800dfac:	68fb      	ldr	r3, [r7, #12]
 800dfae:	3308      	adds	r3, #8
 800dfb0:	68fa      	ldr	r2, [r7, #12]
 800dfb2:	9201      	str	r2, [sp, #4]
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	683b      	ldr	r3, [r7, #0]
 800dfb8:	2201      	movs	r2, #1
 800dfba:	68b9      	ldr	r1, [r7, #8]
 800dfbc:	6878      	ldr	r0, [r7, #4]
 800dfbe:	f7ff fe3f 	bl	800dc40 <_ZL7kf_workP12kiss_fft_cpxPKS_jiPiP14kiss_fft_state>
}
 800dfc2:	bf00      	nop
 800dfc4:	3718      	adds	r7, #24
 800dfc6:	46bd      	mov	sp, r7
 800dfc8:	bd80      	pop	{r7, pc}

0800dfca <kiss_fft>:

void kiss_fft(kiss_fft_cfg cfg,const kiss_fft_cpx *fin,kiss_fft_cpx *fout)
{
 800dfca:	b580      	push	{r7, lr}
 800dfcc:	b084      	sub	sp, #16
 800dfce:	af00      	add	r7, sp, #0
 800dfd0:	60f8      	str	r0, [r7, #12]
 800dfd2:	60b9      	str	r1, [r7, #8]
 800dfd4:	607a      	str	r2, [r7, #4]
    kiss_fft_stride(cfg,fin,fout,1);
 800dfd6:	2301      	movs	r3, #1
 800dfd8:	687a      	ldr	r2, [r7, #4]
 800dfda:	68b9      	ldr	r1, [r7, #8]
 800dfdc:	68f8      	ldr	r0, [r7, #12]
 800dfde:	f7ff ffbb 	bl	800df58 <kiss_fft_stride>
}
 800dfe2:	bf00      	nop
 800dfe4:	3710      	adds	r7, #16
 800dfe6:	46bd      	mov	sp, r7
 800dfe8:	bd80      	pop	{r7, pc}
 800dfea:	0000      	movs	r0, r0
 800dfec:	0000      	movs	r0, r0
	...

0800dff0 <kiss_fftr_alloc>:
    void * pad;
#endif
};

kiss_fftr_cfg kiss_fftr_alloc(int nfft,int inverse_fft,void * mem,size_t * lenmem,size_t * memallocated)
{
 800dff0:	b5b0      	push	{r4, r5, r7, lr}
 800dff2:	b08c      	sub	sp, #48	; 0x30
 800dff4:	af02      	add	r7, sp, #8
 800dff6:	60f8      	str	r0, [r7, #12]
 800dff8:	60b9      	str	r1, [r7, #8]
 800dffa:	607a      	str	r2, [r7, #4]
 800dffc:	603b      	str	r3, [r7, #0]
    int i;
    kiss_fftr_cfg st = NULL;
 800dffe:	2300      	movs	r3, #0
 800e000:	623b      	str	r3, [r7, #32]
    size_t subsize = 0, memneeded;
 800e002:	2300      	movs	r3, #0
 800e004:	613b      	str	r3, [r7, #16]

    if (nfft & 1) {
 800e006:	68fb      	ldr	r3, [r7, #12]
 800e008:	f003 0301 	and.w	r3, r3, #1
 800e00c:	2b00      	cmp	r3, #0
 800e00e:	d009      	beq.n	800e024 <kiss_fftr_alloc+0x34>
        fprintf(stderr,"Real FFT optimization must be even.\n");
 800e010:	4b5f      	ldr	r3, [pc, #380]	; (800e190 <kiss_fftr_alloc+0x1a0>)
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	68db      	ldr	r3, [r3, #12]
 800e016:	2224      	movs	r2, #36	; 0x24
 800e018:	2101      	movs	r1, #1
 800e01a:	485e      	ldr	r0, [pc, #376]	; (800e194 <kiss_fftr_alloc+0x1a4>)
 800e01c:	f00d f888 	bl	801b130 <fwrite>
        return NULL;
 800e020:	2300      	movs	r3, #0
 800e022:	e0ad      	b.n	800e180 <kiss_fftr_alloc+0x190>
    }
    nfft >>= 1;
 800e024:	68fb      	ldr	r3, [r7, #12]
 800e026:	105b      	asrs	r3, r3, #1
 800e028:	60fb      	str	r3, [r7, #12]

    kiss_fft_alloc (nfft, inverse_fft, NULL, &subsize);
 800e02a:	f107 0310 	add.w	r3, r7, #16
 800e02e:	2200      	movs	r2, #0
 800e030:	9200      	str	r2, [sp, #0]
 800e032:	2200      	movs	r2, #0
 800e034:	68b9      	ldr	r1, [r7, #8]
 800e036:	68f8      	ldr	r0, [r7, #12]
 800e038:	f7ff fef6 	bl	800de28 <kiss_fft_alloc>
    memneeded = sizeof(struct kiss_fftr_state) + subsize + sizeof(kiss_fft_cpx) * ( nfft * 3 / 2);
 800e03c:	68fa      	ldr	r2, [r7, #12]
 800e03e:	4613      	mov	r3, r2
 800e040:	005b      	lsls	r3, r3, #1
 800e042:	4413      	add	r3, r2
 800e044:	0fda      	lsrs	r2, r3, #31
 800e046:	4413      	add	r3, r2
 800e048:	105b      	asrs	r3, r3, #1
 800e04a:	00da      	lsls	r2, r3, #3
 800e04c:	693b      	ldr	r3, [r7, #16]
 800e04e:	4413      	add	r3, r2
 800e050:	330c      	adds	r3, #12
 800e052:	617b      	str	r3, [r7, #20]

    if (lenmem == NULL) {
 800e054:	683b      	ldr	r3, [r7, #0]
 800e056:	2b00      	cmp	r3, #0
 800e058:	d105      	bne.n	800e066 <kiss_fftr_alloc+0x76>
        st = (kiss_fftr_cfg) KISS_FFT_MALLOC (memneeded);
 800e05a:	6978      	ldr	r0, [r7, #20]
 800e05c:	f00d f89e 	bl	801b19c <malloc>
 800e060:	4603      	mov	r3, r0
 800e062:	623b      	str	r3, [r7, #32]
 800e064:	e009      	b.n	800e07a <kiss_fftr_alloc+0x8a>
    } else {
        if (*lenmem >= memneeded)
 800e066:	683b      	ldr	r3, [r7, #0]
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	697a      	ldr	r2, [r7, #20]
 800e06c:	429a      	cmp	r2, r3
 800e06e:	d801      	bhi.n	800e074 <kiss_fftr_alloc+0x84>
            st = (kiss_fftr_cfg) mem;
 800e070:	687b      	ldr	r3, [r7, #4]
 800e072:	623b      	str	r3, [r7, #32]
        *lenmem = memneeded;
 800e074:	683b      	ldr	r3, [r7, #0]
 800e076:	697a      	ldr	r2, [r7, #20]
 800e078:	601a      	str	r2, [r3, #0]
    }
    if (!st)
 800e07a:	6a3b      	ldr	r3, [r7, #32]
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	d101      	bne.n	800e084 <kiss_fftr_alloc+0x94>
        return NULL;
 800e080:	2300      	movs	r3, #0
 800e082:	e07d      	b.n	800e180 <kiss_fftr_alloc+0x190>

    st->substate = (kiss_fft_cfg) (st + 1); /*just beyond kiss_fftr_state struct */
 800e084:	6a3b      	ldr	r3, [r7, #32]
 800e086:	f103 020c 	add.w	r2, r3, #12
 800e08a:	6a3b      	ldr	r3, [r7, #32]
 800e08c:	601a      	str	r2, [r3, #0]
    st->tmpbuf = (kiss_fft_cpx *) (((char *) st->substate) + subsize);
 800e08e:	6a3b      	ldr	r3, [r7, #32]
 800e090:	681a      	ldr	r2, [r3, #0]
 800e092:	693b      	ldr	r3, [r7, #16]
 800e094:	441a      	add	r2, r3
 800e096:	6a3b      	ldr	r3, [r7, #32]
 800e098:	605a      	str	r2, [r3, #4]
    st->super_twiddles = st->tmpbuf + nfft;
 800e09a:	6a3b      	ldr	r3, [r7, #32]
 800e09c:	685a      	ldr	r2, [r3, #4]
 800e09e:	68fb      	ldr	r3, [r7, #12]
 800e0a0:	00db      	lsls	r3, r3, #3
 800e0a2:	441a      	add	r2, r3
 800e0a4:	6a3b      	ldr	r3, [r7, #32]
 800e0a6:	609a      	str	r2, [r3, #8]
    kiss_fft_alloc(nfft, inverse_fft, st->substate, &subsize);
 800e0a8:	6a3b      	ldr	r3, [r7, #32]
 800e0aa:	681a      	ldr	r2, [r3, #0]
 800e0ac:	f107 0310 	add.w	r3, r7, #16
 800e0b0:	2100      	movs	r1, #0
 800e0b2:	9100      	str	r1, [sp, #0]
 800e0b4:	68b9      	ldr	r1, [r7, #8]
 800e0b6:	68f8      	ldr	r0, [r7, #12]
 800e0b8:	f7ff feb6 	bl	800de28 <kiss_fft_alloc>

    for (i = 0; i < nfft/2; ++i) {
 800e0bc:	2300      	movs	r3, #0
 800e0be:	627b      	str	r3, [r7, #36]	; 0x24
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	0fda      	lsrs	r2, r3, #31
 800e0c4:	4413      	add	r3, r2
 800e0c6:	105b      	asrs	r3, r3, #1
 800e0c8:	461a      	mov	r2, r3
 800e0ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0cc:	4293      	cmp	r3, r2
 800e0ce:	da50      	bge.n	800e172 <kiss_fftr_alloc+0x182>
        double phase =
            -3.14159265358979323846264338327 * ((double) (i+1) / nfft + .5);
 800e0d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e0d2:	3301      	adds	r3, #1
 800e0d4:	4618      	mov	r0, r3
 800e0d6:	f7f2 fa45 	bl	8000564 <__aeabi_i2d>
 800e0da:	4604      	mov	r4, r0
 800e0dc:	460d      	mov	r5, r1
 800e0de:	68f8      	ldr	r0, [r7, #12]
 800e0e0:	f7f2 fa40 	bl	8000564 <__aeabi_i2d>
 800e0e4:	4602      	mov	r2, r0
 800e0e6:	460b      	mov	r3, r1
 800e0e8:	4620      	mov	r0, r4
 800e0ea:	4629      	mov	r1, r5
 800e0ec:	f7f2 fbce 	bl	800088c <__aeabi_ddiv>
 800e0f0:	4602      	mov	r2, r0
 800e0f2:	460b      	mov	r3, r1
 800e0f4:	4610      	mov	r0, r2
 800e0f6:	4619      	mov	r1, r3
 800e0f8:	f04f 0200 	mov.w	r2, #0
 800e0fc:	4b26      	ldr	r3, [pc, #152]	; (800e198 <kiss_fftr_alloc+0x1a8>)
 800e0fe:	f7f2 f8e5 	bl	80002cc <__adddf3>
 800e102:	4602      	mov	r2, r0
 800e104:	460b      	mov	r3, r1
 800e106:	4610      	mov	r0, r2
 800e108:	4619      	mov	r1, r3
        double phase =
 800e10a:	a31f      	add	r3, pc, #124	; (adr r3, 800e188 <kiss_fftr_alloc+0x198>)
 800e10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e110:	f7f2 fa92 	bl	8000638 <__aeabi_dmul>
 800e114:	4602      	mov	r2, r0
 800e116:	460b      	mov	r3, r1
 800e118:	e9c7 2306 	strd	r2, r3, [r7, #24]
        if (inverse_fft)
 800e11c:	68bb      	ldr	r3, [r7, #8]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	d005      	beq.n	800e12e <kiss_fftr_alloc+0x13e>
            phase *= -1;
 800e122:	69bb      	ldr	r3, [r7, #24]
 800e124:	61bb      	str	r3, [r7, #24]
 800e126:	69fb      	ldr	r3, [r7, #28]
 800e128:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 800e12c:	61fb      	str	r3, [r7, #28]
        kf_cexp (st->super_twiddles+i,phase);
 800e12e:	ed97 0b06 	vldr	d0, [r7, #24]
 800e132:	f009 ff5d 	bl	8017ff0 <cos>
 800e136:	ec51 0b10 	vmov	r0, r1, d0
 800e13a:	6a3b      	ldr	r3, [r7, #32]
 800e13c:	689a      	ldr	r2, [r3, #8]
 800e13e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e140:	00db      	lsls	r3, r3, #3
 800e142:	18d4      	adds	r4, r2, r3
 800e144:	f7f2 fd70 	bl	8000c28 <__aeabi_d2f>
 800e148:	4603      	mov	r3, r0
 800e14a:	6023      	str	r3, [r4, #0]
 800e14c:	ed97 0b06 	vldr	d0, [r7, #24]
 800e150:	f00a f89e 	bl	8018290 <sin>
 800e154:	ec51 0b10 	vmov	r0, r1, d0
 800e158:	6a3b      	ldr	r3, [r7, #32]
 800e15a:	689a      	ldr	r2, [r3, #8]
 800e15c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e15e:	00db      	lsls	r3, r3, #3
 800e160:	18d4      	adds	r4, r2, r3
 800e162:	f7f2 fd61 	bl	8000c28 <__aeabi_d2f>
 800e166:	4603      	mov	r3, r0
 800e168:	6063      	str	r3, [r4, #4]
    for (i = 0; i < nfft/2; ++i) {
 800e16a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e16c:	3301      	adds	r3, #1
 800e16e:	627b      	str	r3, [r7, #36]	; 0x24
 800e170:	e7a6      	b.n	800e0c0 <kiss_fftr_alloc+0xd0>
    }

    if (memallocated != NULL) {
 800e172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e174:	2b00      	cmp	r3, #0
 800e176:	d002      	beq.n	800e17e <kiss_fftr_alloc+0x18e>
        *memallocated = memneeded;
 800e178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e17a:	697a      	ldr	r2, [r7, #20]
 800e17c:	601a      	str	r2, [r3, #0]
    }

    return st;
 800e17e:	6a3b      	ldr	r3, [r7, #32]
}
 800e180:	4618      	mov	r0, r3
 800e182:	3728      	adds	r7, #40	; 0x28
 800e184:	46bd      	mov	sp, r7
 800e186:	bdb0      	pop	{r4, r5, r7, pc}
 800e188:	54442d18 	.word	0x54442d18
 800e18c:	c00921fb 	.word	0xc00921fb
 800e190:	20000518 	.word	0x20000518
 800e194:	0801e084 	.word	0x0801e084
 800e198:	3fe00000 	.word	0x3fe00000

0800e19c <kiss_fftr>:

void kiss_fftr(kiss_fftr_cfg st,const kiss_fft_scalar *timedata,kiss_fft_cpx *freqdata)
{
 800e19c:	b580      	push	{r7, lr}
 800e19e:	b092      	sub	sp, #72	; 0x48
 800e1a0:	af00      	add	r7, sp, #0
 800e1a2:	60f8      	str	r0, [r7, #12]
 800e1a4:	60b9      	str	r1, [r7, #8]
 800e1a6:	607a      	str	r2, [r7, #4]
    /* input buffer timedata is stored row-wise */
    int k,ncfft;
    kiss_fft_cpx fpnk,fpk,f1k,f2k,tw,tdc;

    if ( st->substate->inverse) {
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	681b      	ldr	r3, [r3, #0]
 800e1ac:	685b      	ldr	r3, [r3, #4]
 800e1ae:	2b00      	cmp	r3, #0
 800e1b0:	d00a      	beq.n	800e1c8 <kiss_fftr+0x2c>
        fprintf(stderr,"kiss fft usage error: improper alloc\n");
 800e1b2:	4b8b      	ldr	r3, [pc, #556]	; (800e3e0 <kiss_fftr+0x244>)
 800e1b4:	681b      	ldr	r3, [r3, #0]
 800e1b6:	68db      	ldr	r3, [r3, #12]
 800e1b8:	2225      	movs	r2, #37	; 0x25
 800e1ba:	2101      	movs	r1, #1
 800e1bc:	4889      	ldr	r0, [pc, #548]	; (800e3e4 <kiss_fftr+0x248>)
 800e1be:	f00c ffb7 	bl	801b130 <fwrite>
        exit(1);
 800e1c2:	2001      	movs	r0, #1
 800e1c4:	f00c ff2e 	bl	801b024 <exit>
    }

    ncfft = st->substate->nfft;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	681b      	ldr	r3, [r3, #0]
 800e1cc:	681b      	ldr	r3, [r3, #0]
 800e1ce:	643b      	str	r3, [r7, #64]	; 0x40

    /*perform the parallel fft of two real signals packed in real,imag*/
    kiss_fft( st->substate , (const kiss_fft_cpx*)timedata, st->tmpbuf );
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	6818      	ldr	r0, [r3, #0]
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	685b      	ldr	r3, [r3, #4]
 800e1d8:	461a      	mov	r2, r3
 800e1da:	68b9      	ldr	r1, [r7, #8]
 800e1dc:	f7ff fef5 	bl	800dfca <kiss_fft>
     *      yielding DC of input time sequence
     * The difference of tdc.r - tdc.i is the sum of the input (dot product) [1,-1,1,-1...
     *      yielding Nyquist bin of input time sequence
     */

    tdc.r = st->tmpbuf[0].r;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	685b      	ldr	r3, [r3, #4]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	613b      	str	r3, [r7, #16]
    tdc.i = st->tmpbuf[0].i;
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	685b      	ldr	r3, [r3, #4]
 800e1ec:	685b      	ldr	r3, [r3, #4]
 800e1ee:	617b      	str	r3, [r7, #20]
    C_FIXDIV(tdc,2);
    CHECK_OVERFLOW_OP(tdc.r ,+, tdc.i);
    CHECK_OVERFLOW_OP(tdc.r ,-, tdc.i);
    freqdata[0].r = tdc.r + tdc.i;
 800e1f0:	ed97 7a04 	vldr	s14, [r7, #16]
 800e1f4:	edd7 7a05 	vldr	s15, [r7, #20]
 800e1f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e1fc:	687b      	ldr	r3, [r7, #4]
 800e1fe:	edc3 7a00 	vstr	s15, [r3]
    freqdata[ncfft].r = tdc.r - tdc.i;
 800e202:	ed97 7a04 	vldr	s14, [r7, #16]
 800e206:	edd7 7a05 	vldr	s15, [r7, #20]
 800e20a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e20c:	00db      	lsls	r3, r3, #3
 800e20e:	687a      	ldr	r2, [r7, #4]
 800e210:	4413      	add	r3, r2
 800e212:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e216:	edc3 7a00 	vstr	s15, [r3]
#ifdef USE_SIMD
    freqdata[ncfft].i = freqdata[0].i = _mm_set1_ps(0);
#else
    freqdata[ncfft].i = freqdata[0].i = 0;
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	f04f 0200 	mov.w	r2, #0
 800e220:	605a      	str	r2, [r3, #4]
 800e222:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e224:	00db      	lsls	r3, r3, #3
 800e226:	687a      	ldr	r2, [r7, #4]
 800e228:	4413      	add	r3, r2
 800e22a:	687a      	ldr	r2, [r7, #4]
 800e22c:	6852      	ldr	r2, [r2, #4]
 800e22e:	605a      	str	r2, [r3, #4]
#endif

    for ( k=1;k <= ncfft/2 ; ++k ) {
 800e230:	2301      	movs	r3, #1
 800e232:	647b      	str	r3, [r7, #68]	; 0x44
 800e234:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e236:	0fda      	lsrs	r2, r3, #31
 800e238:	4413      	add	r3, r2
 800e23a:	105b      	asrs	r3, r3, #1
 800e23c:	461a      	mov	r2, r3
 800e23e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e240:	4293      	cmp	r3, r2
 800e242:	f300 80c9 	bgt.w	800e3d8 <kiss_fftr+0x23c>
        fpk    = st->tmpbuf[k];
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	685a      	ldr	r2, [r3, #4]
 800e24a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e24c:	00db      	lsls	r3, r3, #3
 800e24e:	441a      	add	r2, r3
 800e250:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800e254:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e258:	e883 0003 	stmia.w	r3, {r0, r1}
        fpnk.r =   st->tmpbuf[ncfft-k].r;
 800e25c:	68fb      	ldr	r3, [r7, #12]
 800e25e:	685a      	ldr	r2, [r3, #4]
 800e260:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e262:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e264:	1acb      	subs	r3, r1, r3
 800e266:	00db      	lsls	r3, r3, #3
 800e268:	4413      	add	r3, r2
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	63bb      	str	r3, [r7, #56]	; 0x38
        fpnk.i = - st->tmpbuf[ncfft-k].i;
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	685a      	ldr	r2, [r3, #4]
 800e272:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e274:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e276:	1acb      	subs	r3, r1, r3
 800e278:	00db      	lsls	r3, r3, #3
 800e27a:	4413      	add	r3, r2
 800e27c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e280:	eef1 7a67 	vneg.f32	s15, s15
 800e284:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
        C_FIXDIV(fpk,2);
        C_FIXDIV(fpnk,2);

        C_ADD( f1k, fpk , fpnk );
 800e288:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e28c:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e290:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e294:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
 800e298:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e29c:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e2a0:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e2a4:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
        C_SUB( f2k, fpk , fpnk );
 800e2a8:	ed97 7a0c 	vldr	s14, [r7, #48]	; 0x30
 800e2ac:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 800e2b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2b4:	edc7 7a08 	vstr	s15, [r7, #32]
 800e2b8:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 800e2bc:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800e2c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e2c4:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
        C_MUL( tw , f2k , st->super_twiddles[k-1]);
 800e2c8:	ed97 7a08 	vldr	s14, [r7, #32]
 800e2cc:	68fb      	ldr	r3, [r7, #12]
 800e2ce:	689a      	ldr	r2, [r3, #8]
 800e2d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2d2:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e2d6:	3b01      	subs	r3, #1
 800e2d8:	00db      	lsls	r3, r3, #3
 800e2da:	4413      	add	r3, r2
 800e2dc:	edd3 7a00 	vldr	s15, [r3]
 800e2e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e2e4:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	689a      	ldr	r2, [r3, #8]
 800e2ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2ee:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e2f2:	3b01      	subs	r3, #1
 800e2f4:	00db      	lsls	r3, r3, #3
 800e2f6:	4413      	add	r3, r2
 800e2f8:	edd3 7a01 	vldr	s15, [r3, #4]
 800e2fc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e300:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e304:	edc7 7a06 	vstr	s15, [r7, #24]
 800e308:	ed97 7a08 	vldr	s14, [r7, #32]
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	689a      	ldr	r2, [r3, #8]
 800e310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e312:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e316:	3b01      	subs	r3, #1
 800e318:	00db      	lsls	r3, r3, #3
 800e31a:	4413      	add	r3, r2
 800e31c:	edd3 7a01 	vldr	s15, [r3, #4]
 800e320:	ee27 7a27 	vmul.f32	s14, s14, s15
 800e324:	edd7 6a09 	vldr	s13, [r7, #36]	; 0x24
 800e328:	68fb      	ldr	r3, [r7, #12]
 800e32a:	689a      	ldr	r2, [r3, #8]
 800e32c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e32e:	f103 5300 	add.w	r3, r3, #536870912	; 0x20000000
 800e332:	3b01      	subs	r3, #1
 800e334:	00db      	lsls	r3, r3, #3
 800e336:	4413      	add	r3, r2
 800e338:	edd3 7a00 	vldr	s15, [r3]
 800e33c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800e340:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e344:	edc7 7a07 	vstr	s15, [r7, #28]

        freqdata[k].r = HALF_OF(f1k.r + tw.r);
 800e348:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e34c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e350:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e354:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e356:	00db      	lsls	r3, r3, #3
 800e358:	687a      	ldr	r2, [r7, #4]
 800e35a:	4413      	add	r3, r2
 800e35c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e360:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e364:	edc3 7a00 	vstr	s15, [r3]
        freqdata[k].i = HALF_OF(f1k.i + tw.i);
 800e368:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 800e36c:	edd7 7a07 	vldr	s15, [r7, #28]
 800e370:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e374:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e376:	00db      	lsls	r3, r3, #3
 800e378:	687a      	ldr	r2, [r7, #4]
 800e37a:	4413      	add	r3, r2
 800e37c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e380:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e384:	edc3 7a01 	vstr	s15, [r3, #4]
        freqdata[ncfft-k].r = HALF_OF(f1k.r - tw.r);
 800e388:	ed97 7a0a 	vldr	s14, [r7, #40]	; 0x28
 800e38c:	edd7 7a06 	vldr	s15, [r7, #24]
 800e390:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e394:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e396:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e398:	1ad3      	subs	r3, r2, r3
 800e39a:	00db      	lsls	r3, r3, #3
 800e39c:	687a      	ldr	r2, [r7, #4]
 800e39e:	4413      	add	r3, r2
 800e3a0:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e3a4:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3a8:	edc3 7a00 	vstr	s15, [r3]
        freqdata[ncfft-k].i = HALF_OF(tw.i - f1k.i);
 800e3ac:	ed97 7a07 	vldr	s14, [r7, #28]
 800e3b0:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800e3b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800e3b8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e3ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3bc:	1ad3      	subs	r3, r2, r3
 800e3be:	00db      	lsls	r3, r3, #3
 800e3c0:	687a      	ldr	r2, [r7, #4]
 800e3c2:	4413      	add	r3, r2
 800e3c4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800e3c8:	ee67 7a87 	vmul.f32	s15, s15, s14
 800e3cc:	edc3 7a01 	vstr	s15, [r3, #4]
    for ( k=1;k <= ncfft/2 ; ++k ) {
 800e3d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e3d2:	3301      	adds	r3, #1
 800e3d4:	647b      	str	r3, [r7, #68]	; 0x44
 800e3d6:	e72d      	b.n	800e234 <kiss_fftr+0x98>
    }
}
 800e3d8:	bf00      	nop
 800e3da:	3748      	adds	r7, #72	; 0x48
 800e3dc:	46bd      	mov	sp, r7
 800e3de:	bd80      	pop	{r7, pc}
 800e3e0:	20000518 	.word	0x20000518
 800e3e4:	0801e0ac 	.word	0x0801e0ac

0800e3e8 <_Z29ei_run_impulse_check_canceledv>:
#include "main.h"
#include "edge-impulse-sdk/porting/ei_classifier_porting.h"
#include <stdarg.h>
#include <stdio.h>

__attribute__((weak)) EI_IMPULSE_ERROR ei_run_impulse_check_canceled() {
 800e3e8:	b480      	push	{r7}
 800e3ea:	af00      	add	r7, sp, #0
    return EI_IMPULSE_OK;
 800e3ec:	2300      	movs	r3, #0
}
 800e3ee:	4618      	mov	r0, r3
 800e3f0:	46bd      	mov	sp, r7
 800e3f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f6:	4770      	bx	lr

0800e3f8 <_Z16ei_read_timer_msv>:
__attribute__((weak)) EI_IMPULSE_ERROR ei_sleep(int32_t time_ms) {
    HAL_Delay(time_ms);
    return EI_IMPULSE_OK;
}

uint64_t ei_read_timer_ms() {
 800e3f8:	b580      	push	{r7, lr}
 800e3fa:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800e3fc:	f7f8 fb9a 	bl	8006b34 <HAL_GetTick>
 800e400:	4603      	mov	r3, r0
 800e402:	461a      	mov	r2, r3
 800e404:	f04f 0300 	mov.w	r3, #0
}
 800e408:	4610      	mov	r0, r2
 800e40a:	4619      	mov	r1, r3
 800e40c:	bd80      	pop	{r7, pc}
	...

0800e410 <_Z15ei_printf_floatf>:
    va_start(myargs, format);
    vprintf(format, myargs);
    va_end(myargs);
}

__attribute__((weak)) void ei_printf_float(float f) {
 800e410:	b580      	push	{r7, lr}
 800e412:	b082      	sub	sp, #8
 800e414:	af00      	add	r7, sp, #0
 800e416:	ed87 0a01 	vstr	s0, [r7, #4]
    ei_printf("%f", f);
 800e41a:	6878      	ldr	r0, [r7, #4]
 800e41c:	f7f2 f8b4 	bl	8000588 <__aeabi_f2d>
 800e420:	4602      	mov	r2, r0
 800e422:	460b      	mov	r3, r1
 800e424:	4803      	ldr	r0, [pc, #12]	; (800e434 <_Z15ei_printf_floatf+0x24>)
 800e426:	f7f7 f8af 	bl	8005588 <_Z9ei_printfPKcz>
}
 800e42a:	bf00      	nop
 800e42c:	3708      	adds	r7, #8
 800e42e:	46bd      	mov	sp, r7
 800e430:	bd80      	pop	{r7, pc}
 800e432:	bf00      	nop
 800e434:	0801e0d4 	.word	0x0801e0d4

0800e438 <TfLiteIntArrayEqual>:
int TfLiteIntArrayGetSizeInBytes(int size) {
  static TfLiteIntArray dummy;
  return sizeof(dummy) + sizeof(dummy.data[0]) * size;
}

int TfLiteIntArrayEqual(const TfLiteIntArray* a, const TfLiteIntArray* b) {
 800e438:	b580      	push	{r7, lr}
 800e43a:	b082      	sub	sp, #8
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
 800e440:	6039      	str	r1, [r7, #0]
  if (a == b) return 1;
 800e442:	687a      	ldr	r2, [r7, #4]
 800e444:	683b      	ldr	r3, [r7, #0]
 800e446:	429a      	cmp	r2, r3
 800e448:	d101      	bne.n	800e44e <TfLiteIntArrayEqual+0x16>
 800e44a:	2301      	movs	r3, #1
 800e44c:	e010      	b.n	800e470 <TfLiteIntArrayEqual+0x38>
  if (a == NULL || b == NULL) return 0;
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2b00      	cmp	r3, #0
 800e452:	d002      	beq.n	800e45a <TfLiteIntArrayEqual+0x22>
 800e454:	683b      	ldr	r3, [r7, #0]
 800e456:	2b00      	cmp	r3, #0
 800e458:	d101      	bne.n	800e45e <TfLiteIntArrayEqual+0x26>
 800e45a:	2300      	movs	r3, #0
 800e45c:	e008      	b.n	800e470 <TfLiteIntArrayEqual+0x38>
  return TfLiteIntArrayEqualsArray(a, b->size, b->data);
 800e45e:	683b      	ldr	r3, [r7, #0]
 800e460:	6819      	ldr	r1, [r3, #0]
 800e462:	683b      	ldr	r3, [r7, #0]
 800e464:	3304      	adds	r3, #4
 800e466:	461a      	mov	r2, r3
 800e468:	6878      	ldr	r0, [r7, #4]
 800e46a:	f000 f805 	bl	800e478 <TfLiteIntArrayEqualsArray>
 800e46e:	4603      	mov	r3, r0
}
 800e470:	4618      	mov	r0, r3
 800e472:	3708      	adds	r7, #8
 800e474:	46bd      	mov	sp, r7
 800e476:	bd80      	pop	{r7, pc}

0800e478 <TfLiteIntArrayEqualsArray>:

int TfLiteIntArrayEqualsArray(const TfLiteIntArray* a, int b_size,
                              const int b_data[]) {
 800e478:	b480      	push	{r7}
 800e47a:	b087      	sub	sp, #28
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	60f8      	str	r0, [r7, #12]
 800e480:	60b9      	str	r1, [r7, #8]
 800e482:	607a      	str	r2, [r7, #4]
  if (a == NULL) return (b_size == 0);
 800e484:	68fb      	ldr	r3, [r7, #12]
 800e486:	2b00      	cmp	r3, #0
 800e488:	d106      	bne.n	800e498 <TfLiteIntArrayEqualsArray+0x20>
 800e48a:	68bb      	ldr	r3, [r7, #8]
 800e48c:	2b00      	cmp	r3, #0
 800e48e:	bf0c      	ite	eq
 800e490:	2301      	moveq	r3, #1
 800e492:	2300      	movne	r3, #0
 800e494:	b2db      	uxtb	r3, r3
 800e496:	e020      	b.n	800e4da <TfLiteIntArrayEqualsArray+0x62>
  if (a->size != b_size) return 0;
 800e498:	68fb      	ldr	r3, [r7, #12]
 800e49a:	681b      	ldr	r3, [r3, #0]
 800e49c:	68ba      	ldr	r2, [r7, #8]
 800e49e:	429a      	cmp	r2, r3
 800e4a0:	d001      	beq.n	800e4a6 <TfLiteIntArrayEqualsArray+0x2e>
 800e4a2:	2300      	movs	r3, #0
 800e4a4:	e019      	b.n	800e4da <TfLiteIntArrayEqualsArray+0x62>
  int i = 0;
 800e4a6:	2300      	movs	r3, #0
 800e4a8:	617b      	str	r3, [r7, #20]
  for (; i < a->size; i++)
 800e4aa:	e010      	b.n	800e4ce <TfLiteIntArrayEqualsArray+0x56>
    if (a->data[i] != b_data[i]) return 0;
 800e4ac:	68fa      	ldr	r2, [r7, #12]
 800e4ae:	697b      	ldr	r3, [r7, #20]
 800e4b0:	009b      	lsls	r3, r3, #2
 800e4b2:	4413      	add	r3, r2
 800e4b4:	685a      	ldr	r2, [r3, #4]
 800e4b6:	697b      	ldr	r3, [r7, #20]
 800e4b8:	009b      	lsls	r3, r3, #2
 800e4ba:	6879      	ldr	r1, [r7, #4]
 800e4bc:	440b      	add	r3, r1
 800e4be:	681b      	ldr	r3, [r3, #0]
 800e4c0:	429a      	cmp	r2, r3
 800e4c2:	d001      	beq.n	800e4c8 <TfLiteIntArrayEqualsArray+0x50>
 800e4c4:	2300      	movs	r3, #0
 800e4c6:	e008      	b.n	800e4da <TfLiteIntArrayEqualsArray+0x62>
  for (; i < a->size; i++)
 800e4c8:	697b      	ldr	r3, [r7, #20]
 800e4ca:	3301      	adds	r3, #1
 800e4cc:	617b      	str	r3, [r7, #20]
 800e4ce:	68fb      	ldr	r3, [r7, #12]
 800e4d0:	681b      	ldr	r3, [r3, #0]
 800e4d2:	697a      	ldr	r2, [r7, #20]
 800e4d4:	429a      	cmp	r2, r3
 800e4d6:	dbe9      	blt.n	800e4ac <TfLiteIntArrayEqualsArray+0x34>
  return 1;
 800e4d8:	2301      	movs	r3, #1
}
 800e4da:	4618      	mov	r0, r3
 800e4dc:	371c      	adds	r7, #28
 800e4de:	46bd      	mov	sp, r7
 800e4e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4e4:	4770      	bx	lr
	...

0800e4e8 <TfLiteTypeGetName>:
  }
  tensor->bytes = num_bytes;
}
#endif  // TF_LITE_STATIC_MEMORY

const char* TfLiteTypeGetName(TfLiteType type) {
 800e4e8:	b480      	push	{r7}
 800e4ea:	b083      	sub	sp, #12
 800e4ec:	af00      	add	r7, sp, #0
 800e4ee:	4603      	mov	r3, r0
 800e4f0:	71fb      	strb	r3, [r7, #7]
  switch (type) {
 800e4f2:	79fb      	ldrb	r3, [r7, #7]
 800e4f4:	2b0b      	cmp	r3, #11
 800e4f6:	d833      	bhi.n	800e560 <TfLiteTypeGetName+0x78>
 800e4f8:	a201      	add	r2, pc, #4	; (adr r2, 800e500 <TfLiteTypeGetName+0x18>)
 800e4fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e4fe:	bf00      	nop
 800e500:	0800e531 	.word	0x0800e531
 800e504:	0800e535 	.word	0x0800e535
 800e508:	0800e53d 	.word	0x0800e53d
 800e50c:	0800e541 	.word	0x0800e541
 800e510:	0800e549 	.word	0x0800e549
 800e514:	0800e555 	.word	0x0800e555
 800e518:	0800e54d 	.word	0x0800e54d
 800e51c:	0800e539 	.word	0x0800e539
 800e520:	0800e551 	.word	0x0800e551
 800e524:	0800e545 	.word	0x0800e545
 800e528:	0800e559 	.word	0x0800e559
 800e52c:	0800e55d 	.word	0x0800e55d
    case kTfLiteNoType:
      return "NOTYPE";
 800e530:	4b0f      	ldr	r3, [pc, #60]	; (800e570 <TfLiteTypeGetName+0x88>)
 800e532:	e016      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat32:
      return "FLOAT32";
 800e534:	4b0f      	ldr	r3, [pc, #60]	; (800e574 <TfLiteTypeGetName+0x8c>)
 800e536:	e014      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt16:
      return "INT16";
 800e538:	4b0f      	ldr	r3, [pc, #60]	; (800e578 <TfLiteTypeGetName+0x90>)
 800e53a:	e012      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt32:
      return "INT32";
 800e53c:	4b0f      	ldr	r3, [pc, #60]	; (800e57c <TfLiteTypeGetName+0x94>)
 800e53e:	e010      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteUInt8:
      return "UINT8";
 800e540:	4b0f      	ldr	r3, [pc, #60]	; (800e580 <TfLiteTypeGetName+0x98>)
 800e542:	e00e      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt8:
      return "INT8";
 800e544:	4b0f      	ldr	r3, [pc, #60]	; (800e584 <TfLiteTypeGetName+0x9c>)
 800e546:	e00c      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteInt64:
      return "INT64";
 800e548:	4b0f      	ldr	r3, [pc, #60]	; (800e588 <TfLiteTypeGetName+0xa0>)
 800e54a:	e00a      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteBool:
      return "BOOL";
 800e54c:	4b0f      	ldr	r3, [pc, #60]	; (800e58c <TfLiteTypeGetName+0xa4>)
 800e54e:	e008      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteComplex64:
      return "COMPLEX64";
 800e550:	4b0f      	ldr	r3, [pc, #60]	; (800e590 <TfLiteTypeGetName+0xa8>)
 800e552:	e006      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteString:
      return "STRING";
 800e554:	4b0f      	ldr	r3, [pc, #60]	; (800e594 <TfLiteTypeGetName+0xac>)
 800e556:	e004      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat16:
      return "FLOAT16";
 800e558:	4b0f      	ldr	r3, [pc, #60]	; (800e598 <TfLiteTypeGetName+0xb0>)
 800e55a:	e002      	b.n	800e562 <TfLiteTypeGetName+0x7a>
    case kTfLiteFloat64:
      return "FLOAT64";
 800e55c:	4b0f      	ldr	r3, [pc, #60]	; (800e59c <TfLiteTypeGetName+0xb4>)
 800e55e:	e000      	b.n	800e562 <TfLiteTypeGetName+0x7a>
  }
  return "Unknown type";
 800e560:	4b0f      	ldr	r3, [pc, #60]	; (800e5a0 <TfLiteTypeGetName+0xb8>)
}
 800e562:	4618      	mov	r0, r3
 800e564:	370c      	adds	r7, #12
 800e566:	46bd      	mov	sp, r7
 800e568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e56c:	4770      	bx	lr
 800e56e:	bf00      	nop
 800e570:	0801e0dc 	.word	0x0801e0dc
 800e574:	0801e0e4 	.word	0x0801e0e4
 800e578:	0801e0ec 	.word	0x0801e0ec
 800e57c:	0801e0f4 	.word	0x0801e0f4
 800e580:	0801e0fc 	.word	0x0801e0fc
 800e584:	0801e104 	.word	0x0801e104
 800e588:	0801e10c 	.word	0x0801e10c
 800e58c:	0801e114 	.word	0x0801e114
 800e590:	0801e11c 	.word	0x0801e11c
 800e594:	0801e128 	.word	0x0801e128
 800e598:	0801e130 	.word	0x0801e130
 800e59c:	0801e138 	.word	0x0801e138
 800e5a0:	0801e140 	.word	0x0801e140

0800e5a4 <_ZNSt14numeric_limitsIlE3maxEv>:

      static _GLIBCXX_CONSTEXPR long
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }

      static _GLIBCXX_CONSTEXPR long
      max() _GLIBCXX_USE_NOEXCEPT { return __LONG_MAX__; }
 800e5a4:	b480      	push	{r7}
 800e5a6:	af00      	add	r7, sp, #0
 800e5a8:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 800e5ac:	4618      	mov	r0, r3
 800e5ae:	46bd      	mov	sp, r7
 800e5b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5b4:	4770      	bx	lr
	...

0800e5b8 <_ZN6tflite18QuantizeMultiplierEdPlPi>:
constexpr uint32_t kFractionRoundingMask = 0x003fffff;
constexpr uint32_t kFractionRoundingThreshold = 0x00200000;
}  // namespace

void QuantizeMultiplier(double double_multiplier, int32_t* quantized_multiplier,
                        int* shift) {
 800e5b8:	b5b0      	push	{r4, r5, r7, lr}
 800e5ba:	b088      	sub	sp, #32
 800e5bc:	af00      	add	r7, sp, #0
 800e5be:	ed87 0b02 	vstr	d0, [r7, #8]
 800e5c2:	6078      	str	r0, [r7, #4]
 800e5c4:	6039      	str	r1, [r7, #0]
  if (double_multiplier == 0.) {
 800e5c6:	f04f 0200 	mov.w	r2, #0
 800e5ca:	f04f 0300 	mov.w	r3, #0
 800e5ce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e5d2:	f7f2 fa99 	bl	8000b08 <__aeabi_dcmpeq>
 800e5d6:	4603      	mov	r3, r0
 800e5d8:	2b00      	cmp	r3, #0
 800e5da:	d006      	beq.n	800e5ea <_ZN6tflite18QuantizeMultiplierEdPlPi+0x32>
    *quantized_multiplier = 0;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	601a      	str	r2, [r3, #0]
    *shift = 0;
 800e5e2:	683b      	ldr	r3, [r7, #0]
 800e5e4:	2200      	movs	r2, #0
 800e5e6:	601a      	str	r2, [r3, #0]
    return;
 800e5e8:	e06b      	b.n	800e6c2 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x10a>
  // example on microcontrollers) then use an alternative implementation
  // that only requires integer and bitwise operations. To enable this, you
  // need to set the define during the build process for your platform.
  int64_t q_fixed = IntegerFrExp(double_multiplier, shift);
#else   // TFLITE_EMULATE_FLOAT
  const double q = std::frexp(double_multiplier, shift);
 800e5ea:	6838      	ldr	r0, [r7, #0]
 800e5ec:	ed97 0b02 	vldr	d0, [r7, #8]
 800e5f0:	f009 fdce 	bl	8018190 <frexp>
 800e5f4:	ed87 0b04 	vstr	d0, [r7, #16]
  auto q_fixed = static_cast<int64_t>(TfLiteRound(q * (1ll << 31)));
 800e5f8:	f04f 0200 	mov.w	r2, #0
 800e5fc:	4b32      	ldr	r3, [pc, #200]	; (800e6c8 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x110>)
 800e5fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800e602:	f7f2 f819 	bl	8000638 <__aeabi_dmul>
 800e606:	4602      	mov	r2, r0
 800e608:	460b      	mov	r3, r1
 800e60a:	ec43 2b17 	vmov	d7, r2, r3
 800e60e:	eeb0 0a47 	vmov.f32	s0, s14
 800e612:	eef0 0a67 	vmov.f32	s1, s15
 800e616:	f000 f9b0 	bl	800e97a <_ZN6tflite11TfLiteRoundIdEET_S1_>
 800e61a:	ec53 2b10 	vmov	r2, r3, d0
 800e61e:	4610      	mov	r0, r2
 800e620:	4619      	mov	r1, r3
 800e622:	f7f2 fb69 	bl	8000cf8 <__aeabi_d2lz>
 800e626:	4602      	mov	r2, r0
 800e628:	460b      	mov	r3, r1
 800e62a:	e9c7 2306 	strd	r2, r3, [r7, #24]
#endif  // TFLITE_EMULATE_FLOAT
  TFLITE_CHECK(q_fixed <= (1ll << 31));
 800e62e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e632:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 800e636:	f04f 0100 	mov.w	r1, #0
 800e63a:	4290      	cmp	r0, r2
 800e63c:	eb71 0303 	sbcs.w	r3, r1, r3
 800e640:	da01      	bge.n	800e646 <_ZN6tflite18QuantizeMultiplierEdPlPi+0x8e>
 800e642:	f00c fcb5 	bl	801afb0 <abort>
  if (q_fixed == (1ll << 31)) {
 800e646:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e64a:	2b00      	cmp	r3, #0
 800e64c:	bf08      	it	eq
 800e64e:	f1b2 4f00 	cmpeq.w	r2, #2147483648	; 0x80000000
 800e652:	d117      	bne.n	800e684 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xcc>
    q_fixed /= 2;
 800e654:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e658:	0fd9      	lsrs	r1, r3, #31
 800e65a:	4608      	mov	r0, r1
 800e65c:	f04f 0100 	mov.w	r1, #0
 800e660:	1884      	adds	r4, r0, r2
 800e662:	eb41 0503 	adc.w	r5, r1, r3
 800e666:	f04f 0200 	mov.w	r2, #0
 800e66a:	f04f 0300 	mov.w	r3, #0
 800e66e:	0862      	lsrs	r2, r4, #1
 800e670:	ea42 72c5 	orr.w	r2, r2, r5, lsl #31
 800e674:	106b      	asrs	r3, r5, #1
 800e676:	e9c7 2306 	strd	r2, r3, [r7, #24]
    ++*shift;
 800e67a:	683b      	ldr	r3, [r7, #0]
 800e67c:	681b      	ldr	r3, [r3, #0]
 800e67e:	1c5a      	adds	r2, r3, #1
 800e680:	683b      	ldr	r3, [r7, #0]
 800e682:	601a      	str	r2, [r3, #0]
  }
  TFLITE_CHECK_LE(q_fixed, std::numeric_limits<int32_t>::max());
 800e684:	f7ff ff8e 	bl	800e5a4 <_ZNSt14numeric_limitsIlE3maxEv>
 800e688:	4603      	mov	r3, r0
 800e68a:	4618      	mov	r0, r3
 800e68c:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800e690:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800e694:	4290      	cmp	r0, r2
 800e696:	eb71 0303 	sbcs.w	r3, r1, r3
 800e69a:	da01      	bge.n	800e6a0 <_ZN6tflite18QuantizeMultiplierEdPlPi+0xe8>
 800e69c:	f00c fc88 	bl	801afb0 <abort>
  // that we're effectively flushing tiny double_multiplier's to zero.
  // We could conceivably handle values in the range (roughly) [32, 63]
  // as 'denormals' i.e. (shift==0, q_fixed < 2^30). In that point of view
  // the present handling is just doing 'flush denormals to zero'. We could
  // reconsider and actually generate nonzero denormals if a need arises.
  if (*shift < -31) {
 800e6a0:	683b      	ldr	r3, [r7, #0]
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	f113 0f1f 	cmn.w	r3, #31
 800e6a8:	da08      	bge.n	800e6bc <_ZN6tflite18QuantizeMultiplierEdPlPi+0x104>
    *shift = 0;
 800e6aa:	683b      	ldr	r3, [r7, #0]
 800e6ac:	2200      	movs	r2, #0
 800e6ae:	601a      	str	r2, [r3, #0]
    q_fixed = 0;
 800e6b0:	f04f 0200 	mov.w	r2, #0
 800e6b4:	f04f 0300 	mov.w	r3, #0
 800e6b8:	e9c7 2306 	strd	r2, r3, [r7, #24]
  }
  *quantized_multiplier = static_cast<int32_t>(q_fixed);
 800e6bc:	69ba      	ldr	r2, [r7, #24]
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	601a      	str	r2, [r3, #0]
}
 800e6c2:	3720      	adds	r7, #32
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	bdb0      	pop	{r4, r5, r7, pc}
 800e6c8:	41e00000 	.word	0x41e00000

0800e6cc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>:

void QuantizeMultiplierGreaterThanOne(double double_multiplier,
                                      int32_t* quantized_multiplier,
                                      int* left_shift) {
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	ed87 0b02 	vstr	d0, [r7, #8]
 800e6d6:	6078      	str	r0, [r7, #4]
 800e6d8:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_GT(double_multiplier, 1.);
 800e6da:	f04f 0200 	mov.w	r2, #0
 800e6de:	4b0d      	ldr	r3, [pc, #52]	; (800e714 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x48>)
 800e6e0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e6e4:	f7f2 fa38 	bl	8000b58 <__aeabi_dcmpgt>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d101      	bne.n	800e6f2 <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x26>
 800e6ee:	f00c fc5f 	bl	801afb0 <abort>
  QuantizeMultiplier(double_multiplier, quantized_multiplier, left_shift);
 800e6f2:	6839      	ldr	r1, [r7, #0]
 800e6f4:	6878      	ldr	r0, [r7, #4]
 800e6f6:	ed97 0b02 	vldr	d0, [r7, #8]
 800e6fa:	f7ff ff5d 	bl	800e5b8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_GE(*left_shift, 0);
 800e6fe:	683b      	ldr	r3, [r7, #0]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	2b00      	cmp	r3, #0
 800e704:	da01      	bge.n	800e70a <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi+0x3e>
 800e706:	f00c fc53 	bl	801afb0 <abort>
}
 800e70a:	bf00      	nop
 800e70c:	3710      	adds	r7, #16
 800e70e:	46bd      	mov	sp, r7
 800e710:	bd80      	pop	{r7, pc}
 800e712:	bf00      	nop
 800e714:	3ff00000 	.word	0x3ff00000

0800e718 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>:

void QuantizeMultiplierSmallerThanOneExp(double double_multiplier,
                                         int32_t* quantized_multiplier,
                                         int* left_shift) {
 800e718:	b580      	push	{r7, lr}
 800e71a:	b086      	sub	sp, #24
 800e71c:	af00      	add	r7, sp, #0
 800e71e:	ed87 0b02 	vstr	d0, [r7, #8]
 800e722:	6078      	str	r0, [r7, #4]
 800e724:	6039      	str	r1, [r7, #0]
  TFLITE_CHECK_LT(double_multiplier, 1.);
 800e726:	f04f 0200 	mov.w	r2, #0
 800e72a:	4b15      	ldr	r3, [pc, #84]	; (800e780 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x68>)
 800e72c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e730:	f7f2 f9f4 	bl	8000b1c <__aeabi_dcmplt>
 800e734:	4603      	mov	r3, r0
 800e736:	2b00      	cmp	r3, #0
 800e738:	d101      	bne.n	800e73e <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x26>
 800e73a:	f00c fc39 	bl	801afb0 <abort>
  TFLITE_CHECK_GT(double_multiplier, 0.);
 800e73e:	f04f 0200 	mov.w	r2, #0
 800e742:	f04f 0300 	mov.w	r3, #0
 800e746:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800e74a:	f7f2 fa05 	bl	8000b58 <__aeabi_dcmpgt>
 800e74e:	4603      	mov	r3, r0
 800e750:	2b00      	cmp	r3, #0
 800e752:	d101      	bne.n	800e758 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x40>
 800e754:	f00c fc2c 	bl	801afb0 <abort>
  int shift;
  QuantizeMultiplier(double_multiplier, quantized_multiplier, &shift);
 800e758:	f107 0314 	add.w	r3, r7, #20
 800e75c:	4619      	mov	r1, r3
 800e75e:	6878      	ldr	r0, [r7, #4]
 800e760:	ed97 0b02 	vldr	d0, [r7, #8]
 800e764:	f7ff ff28 	bl	800e5b8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
  TFLITE_CHECK_LE(shift, 0);
 800e768:	697b      	ldr	r3, [r7, #20]
 800e76a:	2b00      	cmp	r3, #0
 800e76c:	dd01      	ble.n	800e772 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi+0x5a>
 800e76e:	f00c fc1f 	bl	801afb0 <abort>
  *left_shift = shift;
 800e772:	697a      	ldr	r2, [r7, #20]
 800e774:	683b      	ldr	r3, [r7, #0]
 800e776:	601a      	str	r2, [r3, #0]
}
 800e778:	bf00      	nop
 800e77a:	3718      	adds	r7, #24
 800e77c:	46bd      	mov	sp, r7
 800e77e:	bd80      	pop	{r7, pc}
 800e780:	3ff00000 	.word	0x3ff00000

0800e784 <_ZSt3minIdERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800e784:	b580      	push	{r7, lr}
 800e786:	b082      	sub	sp, #8
 800e788:	af00      	add	r7, sp, #0
 800e78a:	6078      	str	r0, [r7, #4]
 800e78c:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800e78e:	683b      	ldr	r3, [r7, #0]
 800e790:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e79a:	f7f2 f9bf 	bl	8000b1c <__aeabi_dcmplt>
 800e79e:	4603      	mov	r3, r0
 800e7a0:	2b00      	cmp	r3, #0
 800e7a2:	d001      	beq.n	800e7a8 <_ZSt3minIdERKT_S2_S2_+0x24>
	return __b;
 800e7a4:	683b      	ldr	r3, [r7, #0]
 800e7a6:	e000      	b.n	800e7aa <_ZSt3minIdERKT_S2_S2_+0x26>
      return __a;
 800e7a8:	687b      	ldr	r3, [r7, #4]
    }
 800e7aa:	4618      	mov	r0, r3
 800e7ac:	3708      	adds	r7, #8
 800e7ae:	46bd      	mov	sp, r7
 800e7b0:	bd80      	pop	{r7, pc}
 800e7b2:	0000      	movs	r0, r0
 800e7b4:	0000      	movs	r0, r0
	...

0800e7b8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>:
  }
}

void PreprocessSoftmaxScaling(double beta, double input_scale,
                              int input_integer_bits,
                              int32_t* quantized_multiplier, int* left_shift) {
 800e7b8:	b5b0      	push	{r4, r5, r7, lr}
 800e7ba:	b08e      	sub	sp, #56	; 0x38
 800e7bc:	af00      	add	r7, sp, #0
 800e7be:	ed87 0b06 	vstr	d0, [r7, #24]
 800e7c2:	ed87 1b04 	vstr	d1, [r7, #16]
 800e7c6:	60f8      	str	r0, [r7, #12]
 800e7c8:	60b9      	str	r1, [r7, #8]
 800e7ca:	607a      	str	r2, [r7, #4]
  if (IntegerDoubleCompare(input_beta_real_multiplier, (1ll << 31) - 1.0) > 0) {
    input_beta_real_multiplier = (1ll << 31) - 1.0;
  }
#else   // TFLITE_EMULATE_FLOAT
  const double input_beta_real_multiplier = std::min(
      beta * input_scale * (1 << (31 - input_integer_bits)), (1ll << 31) - 1.0);
 800e7cc:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800e7d0:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800e7d4:	f7f1 ff30 	bl	8000638 <__aeabi_dmul>
 800e7d8:	4602      	mov	r2, r0
 800e7da:	460b      	mov	r3, r1
 800e7dc:	4614      	mov	r4, r2
 800e7de:	461d      	mov	r5, r3
 800e7e0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e7e4:	68fb      	ldr	r3, [r7, #12]
 800e7e6:	fa22 f303 	lsr.w	r3, r2, r3
 800e7ea:	4618      	mov	r0, r3
 800e7ec:	f7f1 feba 	bl	8000564 <__aeabi_i2d>
 800e7f0:	4602      	mov	r2, r0
 800e7f2:	460b      	mov	r3, r1
 800e7f4:	4620      	mov	r0, r4
 800e7f6:	4629      	mov	r1, r5
 800e7f8:	f7f1 ff1e 	bl	8000638 <__aeabi_dmul>
 800e7fc:	4602      	mov	r2, r0
 800e7fe:	460b      	mov	r3, r1
 800e800:	e9c7 2308 	strd	r2, r3, [r7, #32]
 800e804:	a30e      	add	r3, pc, #56	; (adr r3, 800e840 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi+0x88>)
 800e806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e80a:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 800e80e:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800e812:	f107 0320 	add.w	r3, r7, #32
 800e816:	4611      	mov	r1, r2
 800e818:	4618      	mov	r0, r3
 800e81a:	f7ff ffb3 	bl	800e784 <_ZSt3minIdERKT_S2_S2_>
 800e81e:	4603      	mov	r3, r0
 800e820:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e824:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
#endif  // TFLITE_EMULATE_FLOAT

  QuantizeMultiplierGreaterThanOne(input_beta_real_multiplier,
 800e828:	6879      	ldr	r1, [r7, #4]
 800e82a:	68b8      	ldr	r0, [r7, #8]
 800e82c:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800e830:	f7ff ff4c 	bl	800e6cc <_ZN6tflite32QuantizeMultiplierGreaterThanOneEdPlPi>
                                   quantized_multiplier, left_shift);
}
 800e834:	bf00      	nop
 800e836:	3738      	adds	r7, #56	; 0x38
 800e838:	46bd      	mov	sp, r7
 800e83a:	bdb0      	pop	{r4, r5, r7, pc}
 800e83c:	f3af 8000 	nop.w
 800e840:	ffc00000 	.word	0xffc00000
 800e844:	41dfffff 	.word	0x41dfffff

0800e848 <_ZN6tflite20CalculateInputRadiusEiii>:
                                              reverse_scaling_divisor,
                                              reverse_scaling_left_shift);
}

int CalculateInputRadius(int input_integer_bits, int input_left_shift,
                         int total_signed_bits) {
 800e848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e84c:	b087      	sub	sp, #28
 800e84e:	af00      	add	r7, sp, #0
 800e850:	60f8      	str	r0, [r7, #12]
 800e852:	60b9      	str	r1, [r7, #8]
 800e854:	607a      	str	r2, [r7, #4]
  result <<= (total_signed_bits - input_integer_bits);
  result >>= input_left_shift;
  return result;
#else   // TFLITE_EMULATE_FLOAT
  const double max_input_rescaled =
      1.0 * ((1 << input_integer_bits) - 1) *
 800e856:	2201      	movs	r2, #1
 800e858:	68fb      	ldr	r3, [r7, #12]
 800e85a:	fa02 f303 	lsl.w	r3, r2, r3
 800e85e:	3b01      	subs	r3, #1
 800e860:	4618      	mov	r0, r3
 800e862:	f7f1 fe7f 	bl	8000564 <__aeabi_i2d>
 800e866:	4682      	mov	sl, r0
 800e868:	468b      	mov	fp, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800e86a:	687a      	ldr	r2, [r7, #4]
 800e86c:	68fb      	ldr	r3, [r7, #12]
 800e86e:	1ad1      	subs	r1, r2, r3
 800e870:	f04f 0201 	mov.w	r2, #1
 800e874:	f04f 0300 	mov.w	r3, #0
 800e878:	f1a1 0620 	sub.w	r6, r1, #32
 800e87c:	f1c1 0020 	rsb	r0, r1, #32
 800e880:	fa03 f901 	lsl.w	r9, r3, r1
 800e884:	fa02 f606 	lsl.w	r6, r2, r6
 800e888:	ea49 0906 	orr.w	r9, r9, r6
 800e88c:	fa22 f000 	lsr.w	r0, r2, r0
 800e890:	ea49 0900 	orr.w	r9, r9, r0
 800e894:	fa02 f801 	lsl.w	r8, r2, r1
      1.0 * ((1 << input_integer_bits) - 1) *
 800e898:	4640      	mov	r0, r8
 800e89a:	4649      	mov	r1, r9
 800e89c:	f7f1 fe9e 	bl	80005dc <__aeabi_l2d>
 800e8a0:	4602      	mov	r2, r0
 800e8a2:	460b      	mov	r3, r1
 800e8a4:	4650      	mov	r0, sl
 800e8a6:	4659      	mov	r1, fp
 800e8a8:	f7f1 fec6 	bl	8000638 <__aeabi_dmul>
 800e8ac:	4602      	mov	r2, r0
 800e8ae:	460b      	mov	r3, r1
 800e8b0:	4690      	mov	r8, r2
 800e8b2:	4699      	mov	r9, r3
      (1ll << input_left_shift);
 800e8b4:	f04f 0201 	mov.w	r2, #1
 800e8b8:	f04f 0300 	mov.w	r3, #0
 800e8bc:	68b9      	ldr	r1, [r7, #8]
 800e8be:	f1a1 0620 	sub.w	r6, r1, #32
 800e8c2:	f1c1 0020 	rsb	r0, r1, #32
 800e8c6:	fa03 f501 	lsl.w	r5, r3, r1
 800e8ca:	fa02 f606 	lsl.w	r6, r2, r6
 800e8ce:	4335      	orrs	r5, r6
 800e8d0:	fa22 f000 	lsr.w	r0, r2, r0
 800e8d4:	4305      	orrs	r5, r0
 800e8d6:	fa02 f401 	lsl.w	r4, r2, r1
      (1ll << (total_signed_bits - input_integer_bits)) /
 800e8da:	4620      	mov	r0, r4
 800e8dc:	4629      	mov	r1, r5
 800e8de:	f7f1 fe7d 	bl	80005dc <__aeabi_l2d>
 800e8e2:	4602      	mov	r2, r0
 800e8e4:	460b      	mov	r3, r1
  const double max_input_rescaled =
 800e8e6:	4640      	mov	r0, r8
 800e8e8:	4649      	mov	r1, r9
 800e8ea:	f7f1 ffcf 	bl	800088c <__aeabi_ddiv>
 800e8ee:	4602      	mov	r2, r0
 800e8f0:	460b      	mov	r3, r1
 800e8f2:	e9c7 2304 	strd	r2, r3, [r7, #16]
  // Tighten bound using floor.  Suppose that we could use the exact value.
  // After scaling the difference, the result would be at the maximum.  Thus we
  // must ensure that our value has lower magnitude.
  return static_cast<int>(std::floor(max_input_rescaled));
 800e8f6:	ed97 0b04 	vldr	d0, [r7, #16]
 800e8fa:	f009 fbc9 	bl	8018090 <floor>
 800e8fe:	ec53 2b10 	vmov	r2, r3, d0
 800e902:	4610      	mov	r0, r2
 800e904:	4619      	mov	r1, r3
 800e906:	f7f2 f947 	bl	8000b98 <__aeabi_d2iz>
 800e90a:	4603      	mov	r3, r0
#endif  // TFLITE_EMULATE_FLOAT
}
 800e90c:	4618      	mov	r0, r3
 800e90e:	371c      	adds	r7, #28
 800e910:	46bd      	mov	sp, r7
 800e912:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e916 <_ZSt3minIfERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800e916:	b480      	push	{r7}
 800e918:	b083      	sub	sp, #12
 800e91a:	af00      	add	r7, sp, #0
 800e91c:	6078      	str	r0, [r7, #4]
 800e91e:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800e920:	683b      	ldr	r3, [r7, #0]
 800e922:	ed93 7a00 	vldr	s14, [r3]
 800e926:	687b      	ldr	r3, [r7, #4]
 800e928:	edd3 7a00 	vldr	s15, [r3]
 800e92c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e930:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e934:	d501      	bpl.n	800e93a <_ZSt3minIfERKT_S2_S2_+0x24>
	return __b;
 800e936:	683b      	ldr	r3, [r7, #0]
 800e938:	e000      	b.n	800e93c <_ZSt3minIfERKT_S2_S2_+0x26>
      return __a;
 800e93a:	687b      	ldr	r3, [r7, #4]
    }
 800e93c:	4618      	mov	r0, r3
 800e93e:	370c      	adds	r7, #12
 800e940:	46bd      	mov	sp, r7
 800e942:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e946:	4770      	bx	lr

0800e948 <_ZSt3maxIfERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800e948:	b480      	push	{r7}
 800e94a:	b083      	sub	sp, #12
 800e94c:	af00      	add	r7, sp, #0
 800e94e:	6078      	str	r0, [r7, #4]
 800e950:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	ed93 7a00 	vldr	s14, [r3]
 800e958:	683b      	ldr	r3, [r7, #0]
 800e95a:	edd3 7a00 	vldr	s15, [r3]
 800e95e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800e962:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e966:	d501      	bpl.n	800e96c <_ZSt3maxIfERKT_S2_S2_+0x24>
	return __b;
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	e000      	b.n	800e96e <_ZSt3maxIfERKT_S2_S2_+0x26>
      return __a;
 800e96c:	687b      	ldr	r3, [r7, #4]
    }
 800e96e:	4618      	mov	r0, r3
 800e970:	370c      	adds	r7, #12
 800e972:	46bd      	mov	sp, r7
 800e974:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e978:	4770      	bx	lr

0800e97a <_ZN6tflite11TfLiteRoundIdEET_S1_>:
  template <class T>                                  \
  inline T tf_name(const T x) {                       \
    return TF_LITE_GLOBAL_STD_PREFIX::std_name(x);    \
  }

DECLARE_STD_GLOBAL_SWITCH1(TfLiteRound, round);
 800e97a:	b580      	push	{r7, lr}
 800e97c:	b082      	sub	sp, #8
 800e97e:	af00      	add	r7, sp, #0
 800e980:	ed87 0b00 	vstr	d0, [r7]
 800e984:	ed97 0b00 	vldr	d0, [r7]
 800e988:	f009 fc3a 	bl	8018200 <round>
 800e98c:	eeb0 7a40 	vmov.f32	s14, s0
 800e990:	eef0 7a60 	vmov.f32	s15, s1
 800e994:	eeb0 0a47 	vmov.f32	s0, s14
 800e998:	eef0 0a67 	vmov.f32	s1, s15
 800e99c:	3708      	adds	r7, #8
 800e99e:	46bd      	mov	sp, r7
 800e9a0:	bd80      	pop	{r7, pc}

0800e9a2 <_ZN6tflite11TfLiteRoundIfEET_S1_>:
 800e9a2:	b580      	push	{r7, lr}
 800e9a4:	b082      	sub	sp, #8
 800e9a6:	af00      	add	r7, sp, #0
 800e9a8:	ed87 0a01 	vstr	s0, [r7, #4]
 800e9ac:	ed97 0a01 	vldr	s0, [r7, #4]
 800e9b0:	f7f2 fb88 	bl	80010c4 <_ZSt5roundf>
 800e9b4:	eef0 7a40 	vmov.f32	s15, s0
 800e9b8:	eeb0 0a67 	vmov.f32	s0, s15
 800e9bc:	3708      	adds	r7, #8
 800e9be:	46bd      	mov	sp, r7
 800e9c0:	bd80      	pop	{r7, pc}

0800e9c2 <_ZNSt14numeric_limitsIaE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SCHAR_MAX__ - 1; }
 800e9c2:	b480      	push	{r7}
 800e9c4:	af00      	add	r7, sp, #0
 800e9c6:	f06f 037f 	mvn.w	r3, #127	; 0x7f
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9d2:	4770      	bx	lr

0800e9d4 <_ZNSt14numeric_limitsIaE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__; }
 800e9d4:	b480      	push	{r7}
 800e9d6:	af00      	add	r7, sp, #0
 800e9d8:	237f      	movs	r3, #127	; 0x7f
 800e9da:	4618      	mov	r0, r3
 800e9dc:	46bd      	mov	sp, r7
 800e9de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9e2:	4770      	bx	lr

0800e9e4 <_ZNSt14numeric_limitsIhE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return 0; }
 800e9e4:	b480      	push	{r7}
 800e9e6:	af00      	add	r7, sp, #0
 800e9e8:	2300      	movs	r3, #0
 800e9ea:	4618      	mov	r0, r3
 800e9ec:	46bd      	mov	sp, r7
 800e9ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e9f2:	4770      	bx	lr

0800e9f4 <_ZNSt14numeric_limitsIhE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SCHAR_MAX__ * 2U + 1; }
 800e9f4:	b480      	push	{r7}
 800e9f6:	af00      	add	r7, sp, #0
 800e9f8:	23ff      	movs	r3, #255	; 0xff
 800e9fa:	4618      	mov	r0, r3
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea02:	4770      	bx	lr

0800ea04 <_ZNSt14numeric_limitsIsE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__SHRT_MAX__ - 1; }
 800ea04:	b480      	push	{r7}
 800ea06:	af00      	add	r7, sp, #0
 800ea08:	4b02      	ldr	r3, [pc, #8]	; (800ea14 <_ZNSt14numeric_limitsIsE3minEv+0x10>)
 800ea0a:	4618      	mov	r0, r3
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	ffff8000 	.word	0xffff8000

0800ea18 <_ZNSt14numeric_limitsIsE3maxEv>:
      max() _GLIBCXX_USE_NOEXCEPT { return __SHRT_MAX__; }
 800ea18:	b480      	push	{r7}
 800ea1a:	af00      	add	r7, sp, #0
 800ea1c:	f647 73ff 	movw	r3, #32767	; 0x7fff
 800ea20:	4618      	mov	r0, r3
 800ea22:	46bd      	mov	sp, r7
 800ea24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea28:	4770      	bx	lr

0800ea2a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>:
#include "../../../../../ei-keyword-spotting/edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "../../../../../ei-keyword-spotting/edge-impulse-sdk/tensorflow/lite/c/common.h"

namespace tflite {

inline int NumDimensions(const TfLiteTensor* t) { return t->dims->size; }
 800ea2a:	b480      	push	{r7}
 800ea2c:	b083      	sub	sp, #12
 800ea2e:	af00      	add	r7, sp, #0
 800ea30:	6078      	str	r0, [r7, #4]
 800ea32:	687b      	ldr	r3, [r7, #4]
 800ea34:	689b      	ldr	r3, [r3, #8]
 800ea36:	681b      	ldr	r3, [r3, #0]
 800ea38:	4618      	mov	r0, r3
 800ea3a:	370c      	adds	r7, #12
 800ea3c:	46bd      	mov	sp, r7
 800ea3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea42:	4770      	bx	lr

0800ea44 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>:
inline int SizeOfDimension(const TfLiteTensor* t, int dim) {
 800ea44:	b480      	push	{r7}
 800ea46:	b083      	sub	sp, #12
 800ea48:	af00      	add	r7, sp, #0
 800ea4a:	6078      	str	r0, [r7, #4]
 800ea4c:	6039      	str	r1, [r7, #0]
  return t->dims->data[dim];
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	689a      	ldr	r2, [r3, #8]
 800ea52:	683b      	ldr	r3, [r7, #0]
 800ea54:	009b      	lsls	r3, r3, #2
 800ea56:	4413      	add	r3, r2
 800ea58:	685b      	ldr	r3, [r3, #4]
}
 800ea5a:	4618      	mov	r0, r3
 800ea5c:	370c      	adds	r7, #12
 800ea5e:	46bd      	mov	sp, r7
 800ea60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea64:	4770      	bx	lr

0800ea66 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
inline int NumIntermediates(const TfLiteNode* node) {
  return node->intermediates->size;
}

inline int64_t NumElements(const TfLiteIntArray* dims) {
 800ea66:	b480      	push	{r7}
 800ea68:	b087      	sub	sp, #28
 800ea6a:	af00      	add	r7, sp, #0
 800ea6c:	6078      	str	r0, [r7, #4]
  int64_t count = 1;
 800ea6e:	f04f 0201 	mov.w	r2, #1
 800ea72:	f04f 0300 	mov.w	r3, #0
 800ea76:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800ea7a:	2300      	movs	r3, #0
 800ea7c:	60fb      	str	r3, [r7, #12]
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	681b      	ldr	r3, [r3, #0]
 800ea82:	68fa      	ldr	r2, [r7, #12]
 800ea84:	429a      	cmp	r2, r3
 800ea86:	da1b      	bge.n	800eac0 <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x5a>
    count *= dims->data[i];
 800ea88:	687a      	ldr	r2, [r7, #4]
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	009b      	lsls	r3, r3, #2
 800ea8e:	4413      	add	r3, r2
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	461a      	mov	r2, r3
 800ea94:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800ea98:	6979      	ldr	r1, [r7, #20]
 800ea9a:	fb02 f001 	mul.w	r0, r2, r1
 800ea9e:	6939      	ldr	r1, [r7, #16]
 800eaa0:	fb03 f101 	mul.w	r1, r3, r1
 800eaa4:	4401      	add	r1, r0
 800eaa6:	6938      	ldr	r0, [r7, #16]
 800eaa8:	fba0 2302 	umull	r2, r3, r0, r2
 800eaac:	4419      	add	r1, r3
 800eaae:	460b      	mov	r3, r1
 800eab0:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800eab4:	e9c7 2304 	strd	r2, r3, [r7, #16]
  for (int i = 0; i < dims->size; ++i) {
 800eab8:	68fb      	ldr	r3, [r7, #12]
 800eaba:	3301      	adds	r3, #1
 800eabc:	60fb      	str	r3, [r7, #12]
 800eabe:	e7de      	b.n	800ea7e <_ZN6tflite11NumElementsEPK14TfLiteIntArray+0x18>
  }
  return count;
 800eac0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 800eac4:	4610      	mov	r0, r2
 800eac6:	4619      	mov	r1, r3
 800eac8:	371c      	adds	r7, #28
 800eaca:	46bd      	mov	sp, r7
 800eacc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ead0:	4770      	bx	lr

0800ead2 <_ZN6tflite11NumElementsEPK12TfLiteTensor>:

inline int64_t NumElements(const TfLiteTensor* t) {
 800ead2:	b580      	push	{r7, lr}
 800ead4:	b082      	sub	sp, #8
 800ead6:	af00      	add	r7, sp, #0
 800ead8:	6078      	str	r0, [r7, #4]
  return NumElements(t->dims);
 800eada:	687b      	ldr	r3, [r7, #4]
 800eadc:	689b      	ldr	r3, [r3, #8]
 800eade:	4618      	mov	r0, r3
 800eae0:	f7ff ffc1 	bl	800ea66 <_ZN6tflite11NumElementsEPK14TfLiteIntArray>
 800eae4:	4602      	mov	r2, r0
 800eae6:	460b      	mov	r3, r1
}
 800eae8:	4610      	mov	r0, r2
 800eaea:	4619      	mov	r1, r3
 800eaec:	3708      	adds	r7, #8
 800eaee:	46bd      	mov	sp, r7
 800eaf0:	bd80      	pop	{r7, pc}

0800eaf2 <_ZSt3absd>:
// 2735. std::abs(short), std::abs(signed char) and others should return int

#ifndef __CORRECT_ISO_CPP_MATH_H_PROTO
  inline _GLIBCXX_CONSTEXPR double
  abs(double __x)
  { return __builtin_fabs(__x); }
 800eaf2:	b480      	push	{r7}
 800eaf4:	b083      	sub	sp, #12
 800eaf6:	af00      	add	r7, sp, #0
 800eaf8:	ed87 0b00 	vstr	d0, [r7]
 800eafc:	683a      	ldr	r2, [r7, #0]
 800eafe:	6879      	ldr	r1, [r7, #4]
 800eb00:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800eb04:	ec43 2b17 	vmov	d7, r2, r3
 800eb08:	eeb0 0a47 	vmov.f32	s0, s14
 800eb0c:	eef0 0a67 	vmov.f32	s1, s15
 800eb10:	370c      	adds	r7, #12
 800eb12:	46bd      	mov	sp, r7
 800eb14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb18:	4770      	bx	lr
	...

0800eb1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>:
TfLiteStatus PopulateConvolutionQuantizationParams(
    TfLiteContext* context, const TfLiteTensor* input,
    const TfLiteTensor* filter, const TfLiteTensor* bias, TfLiteTensor* output,
    const TfLiteFusedActivation& activation, int32_t* multiplier, int* shift,
    int32_t* output_activation_min, int32_t* output_activation_max,
    int32_t* per_channel_multiplier, int* per_channel_shift, int num_channels) {
 800eb1c:	b5b0      	push	{r4, r5, r7, lr}
 800eb1e:	b09c      	sub	sp, #112	; 0x70
 800eb20:	af04      	add	r7, sp, #16
 800eb22:	60f8      	str	r0, [r7, #12]
 800eb24:	60b9      	str	r1, [r7, #8]
 800eb26:	607a      	str	r2, [r7, #4]
 800eb28:	603b      	str	r3, [r7, #0]
  TF_LITE_ENSURE_EQ(context, input->quantization.type,
 800eb2a:	68bb      	ldr	r3, [r7, #8]
 800eb2c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb30:	2b01      	cmp	r3, #1
 800eb32:	d013      	beq.n	800eb5c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x40>
 800eb34:	68fb      	ldr	r3, [r7, #12]
 800eb36:	695c      	ldr	r4, [r3, #20]
 800eb38:	68bb      	ldr	r3, [r7, #8]
 800eb3a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb3e:	461a      	mov	r2, r3
 800eb40:	2301      	movs	r3, #1
 800eb42:	9303      	str	r3, [sp, #12]
 800eb44:	9202      	str	r2, [sp, #8]
 800eb46:	4b98      	ldr	r3, [pc, #608]	; (800eda8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800eb48:	9301      	str	r3, [sp, #4]
 800eb4a:	4b98      	ldr	r3, [pc, #608]	; (800edac <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x290>)
 800eb4c:	9300      	str	r3, [sp, #0]
 800eb4e:	2335      	movs	r3, #53	; 0x35
 800eb50:	4a97      	ldr	r2, [pc, #604]	; (800edb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800eb52:	4998      	ldr	r1, [pc, #608]	; (800edb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800eb54:	68f8      	ldr	r0, [r7, #12]
 800eb56:	47a0      	blx	r4
 800eb58:	2301      	movs	r3, #1
 800eb5a:	e173      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                    kTfLiteAffineQuantization);
  TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 800eb5c:	687b      	ldr	r3, [r7, #4]
 800eb5e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb62:	2b01      	cmp	r3, #1
 800eb64:	d013      	beq.n	800eb8e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x72>
 800eb66:	68fb      	ldr	r3, [r7, #12]
 800eb68:	695c      	ldr	r4, [r3, #20]
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800eb70:	461a      	mov	r2, r3
 800eb72:	2301      	movs	r3, #1
 800eb74:	9303      	str	r3, [sp, #12]
 800eb76:	9202      	str	r2, [sp, #8]
 800eb78:	4b8b      	ldr	r3, [pc, #556]	; (800eda8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x28c>)
 800eb7a:	9301      	str	r3, [sp, #4]
 800eb7c:	4b8e      	ldr	r3, [pc, #568]	; (800edb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x29c>)
 800eb7e:	9300      	str	r3, [sp, #0]
 800eb80:	2337      	movs	r3, #55	; 0x37
 800eb82:	4a8b      	ldr	r2, [pc, #556]	; (800edb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800eb84:	498b      	ldr	r1, [pc, #556]	; (800edb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800eb86:	68f8      	ldr	r0, [r7, #12]
 800eb88:	47a0      	blx	r4
 800eb8a:	2301      	movs	r3, #1
 800eb8c:	e15a      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  // quantization is properly populated.
  // TF_LITE_ENSURE_EQ(context, bias->quantization.type,
  // kTfLiteAffineQuantization);

  // Check data type.
  const auto* affine_quantization =
 800eb8e:	687b      	ldr	r3, [r7, #4]
 800eb90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800eb92:	65bb      	str	r3, [r7, #88]	; 0x58
      reinterpret_cast<TfLiteAffineQuantization*>(filter->quantization.params);
  TF_LITE_ENSURE(context, affine_quantization);
 800eb94:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800eb96:	2b00      	cmp	r3, #0
 800eb98:	d10a      	bne.n	800ebb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x94>
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	695c      	ldr	r4, [r3, #20]
 800eb9e:	4b87      	ldr	r3, [pc, #540]	; (800edbc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a0>)
 800eba0:	9300      	str	r3, [sp, #0]
 800eba2:	2342      	movs	r3, #66	; 0x42
 800eba4:	4a82      	ldr	r2, [pc, #520]	; (800edb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800eba6:	4986      	ldr	r1, [pc, #536]	; (800edc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800eba8:	68f8      	ldr	r0, [r7, #12]
 800ebaa:	47a0      	blx	r4
 800ebac:	2301      	movs	r3, #1
 800ebae:	e149      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  TF_LITE_ENSURE(context, affine_quantization->scale);
 800ebb0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebb2:	681b      	ldr	r3, [r3, #0]
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d10a      	bne.n	800ebce <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xb2>
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	695c      	ldr	r4, [r3, #20]
 800ebbc:	4b81      	ldr	r3, [pc, #516]	; (800edc4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a8>)
 800ebbe:	9300      	str	r3, [sp, #0]
 800ebc0:	2343      	movs	r3, #67	; 0x43
 800ebc2:	4a7b      	ldr	r2, [pc, #492]	; (800edb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ebc4:	497e      	ldr	r1, [pc, #504]	; (800edc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800ebc6:	68f8      	ldr	r0, [r7, #12]
 800ebc8:	47a0      	blx	r4
 800ebca:	2301      	movs	r3, #1
 800ebcc:	e13a      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
  const bool is_per_channel = affine_quantization->scale->size > 1;
 800ebce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ebd0:	681b      	ldr	r3, [r3, #0]
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	2b01      	cmp	r3, #1
 800ebd6:	bfcc      	ite	gt
 800ebd8:	2301      	movgt	r3, #1
 800ebda:	2300      	movle	r3, #0
 800ebdc:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  if (is_per_channel) {
 800ebe0:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d067      	beq.n	800ecb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
    //  Currently only Int8/Int16 is supported for per channel quantization.
    TF_LITE_ENSURE(context,
 800ebe8:	68bb      	ldr	r3, [r7, #8]
 800ebea:	781b      	ldrb	r3, [r3, #0]
 800ebec:	2b09      	cmp	r3, #9
 800ebee:	d00e      	beq.n	800ec0e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800ebf0:	68bb      	ldr	r3, [r7, #8]
 800ebf2:	781b      	ldrb	r3, [r3, #0]
 800ebf4:	2b07      	cmp	r3, #7
 800ebf6:	d00a      	beq.n	800ec0e <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0xf2>
 800ebf8:	68fb      	ldr	r3, [r7, #12]
 800ebfa:	695c      	ldr	r4, [r3, #20]
 800ebfc:	4b72      	ldr	r3, [pc, #456]	; (800edc8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2ac>)
 800ebfe:	9300      	str	r3, [sp, #0]
 800ec00:	2347      	movs	r3, #71	; 0x47
 800ec02:	4a6b      	ldr	r2, [pc, #428]	; (800edb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ec04:	496e      	ldr	r1, [pc, #440]	; (800edc0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2a4>)
 800ec06:	68f8      	ldr	r0, [r7, #12]
 800ec08:	47a0      	blx	r4
 800ec0a:	2301      	movs	r3, #1
 800ec0c:	e11a      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
                   input->type == kTfLiteInt8 || input->type == kTfLiteInt16);
    TF_LITE_ENSURE_EQ(context, filter->type, kTfLiteInt8);
 800ec0e:	687b      	ldr	r3, [r7, #4]
 800ec10:	781b      	ldrb	r3, [r3, #0]
 800ec12:	2b09      	cmp	r3, #9
 800ec14:	d012      	beq.n	800ec3c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x120>
 800ec16:	68fb      	ldr	r3, [r7, #12]
 800ec18:	695c      	ldr	r4, [r3, #20]
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	781b      	ldrb	r3, [r3, #0]
 800ec1e:	461a      	mov	r2, r3
 800ec20:	2309      	movs	r3, #9
 800ec22:	9303      	str	r3, [sp, #12]
 800ec24:	9202      	str	r2, [sp, #8]
 800ec26:	4b69      	ldr	r3, [pc, #420]	; (800edcc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b0>)
 800ec28:	9301      	str	r3, [sp, #4]
 800ec2a:	4b69      	ldr	r3, [pc, #420]	; (800edd0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b4>)
 800ec2c:	9300      	str	r3, [sp, #0]
 800ec2e:	2349      	movs	r3, #73	; 0x49
 800ec30:	4a5f      	ldr	r2, [pc, #380]	; (800edb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ec32:	4960      	ldr	r1, [pc, #384]	; (800edb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800ec34:	68f8      	ldr	r0, [r7, #12]
 800ec36:	47a0      	blx	r4
 800ec38:	2301      	movs	r3, #1
 800ec3a:	e103      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size, num_channels);
 800ec3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec3e:	681b      	ldr	r3, [r3, #0]
 800ec40:	681b      	ldr	r3, [r3, #0]
 800ec42:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ec46:	429a      	cmp	r2, r3
 800ec48:	d013      	beq.n	800ec72 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x156>
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	695c      	ldr	r4, [r3, #20]
 800ec4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec50:	681b      	ldr	r3, [r3, #0]
 800ec52:	681b      	ldr	r3, [r3, #0]
 800ec54:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ec58:	9203      	str	r2, [sp, #12]
 800ec5a:	9302      	str	r3, [sp, #8]
 800ec5c:	4b5d      	ldr	r3, [pc, #372]	; (800edd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800ec5e:	9301      	str	r3, [sp, #4]
 800ec60:	4b5d      	ldr	r3, [pc, #372]	; (800edd8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2bc>)
 800ec62:	9300      	str	r3, [sp, #0]
 800ec64:	234a      	movs	r3, #74	; 0x4a
 800ec66:	4a52      	ldr	r2, [pc, #328]	; (800edb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ec68:	4952      	ldr	r1, [pc, #328]	; (800edb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800ec6a:	68f8      	ldr	r0, [r7, #12]
 800ec6c:	47a0      	blx	r4
 800ec6e:	2301      	movs	r3, #1
 800ec70:	e0e8      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
    TF_LITE_ENSURE_EQ(
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	689a      	ldr	r2, [r3, #8]
 800ec76:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec78:	689b      	ldr	r3, [r3, #8]
 800ec7a:	009b      	lsls	r3, r3, #2
 800ec7c:	4413      	add	r3, r2
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 800ec84:	429a      	cmp	r2, r3
 800ec86:	d017      	beq.n	800ecb8 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x19c>
 800ec88:	68fb      	ldr	r3, [r7, #12]
 800ec8a:	695c      	ldr	r4, [r3, #20]
 800ec8c:	687b      	ldr	r3, [r7, #4]
 800ec8e:	689a      	ldr	r2, [r3, #8]
 800ec90:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ec92:	689b      	ldr	r3, [r3, #8]
 800ec94:	009b      	lsls	r3, r3, #2
 800ec96:	4413      	add	r3, r2
 800ec98:	685b      	ldr	r3, [r3, #4]
 800ec9a:	9303      	str	r3, [sp, #12]
 800ec9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800eca0:	9302      	str	r3, [sp, #8]
 800eca2:	4b4e      	ldr	r3, [pc, #312]	; (800eddc <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c0>)
 800eca4:	9301      	str	r3, [sp, #4]
 800eca6:	4b4b      	ldr	r3, [pc, #300]	; (800edd4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2b8>)
 800eca8:	9300      	str	r3, [sp, #0]
 800ecaa:	234b      	movs	r3, #75	; 0x4b
 800ecac:	4a40      	ldr	r2, [pc, #256]	; (800edb0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x294>)
 800ecae:	4941      	ldr	r1, [pc, #260]	; (800edb4 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x298>)
 800ecb0:	68f8      	ldr	r0, [r7, #12]
 800ecb2:	47a0      	blx	r4
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	e0c5      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, num_channels,
        filter->dims->data[affine_quantization->quantized_dimension]);
  }

  // Populate multiplier and shift using affine quantization.
  const float input_scale = input->params.scale;
 800ecb8:	68bb      	ldr	r3, [r7, #8]
 800ecba:	68db      	ldr	r3, [r3, #12]
 800ecbc:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_scale = output->params.scale;
 800ecbe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ecc0:	68db      	ldr	r3, [r3, #12]
 800ecc2:	64fb      	str	r3, [r7, #76]	; 0x4c
  const float* filter_scales = affine_quantization->scale->data;
 800ecc4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800ecc6:	681b      	ldr	r3, [r3, #0]
 800ecc8:	3304      	adds	r3, #4
 800ecca:	64bb      	str	r3, [r7, #72]	; 0x48
  for (int i = 0; i < num_channels; ++i) {
 800eccc:	2300      	movs	r3, #0
 800ecce:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ecd0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ecd2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ecd6:	429a      	cmp	r2, r3
 800ecd8:	da47      	bge.n	800ed6a <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x24e>
    // If per-tensor quantization parameter is specified, broadcast it along the
    // quantization dimension (channels_out).
    const float scale = is_per_channel ? filter_scales[i] : filter_scales[0];
 800ecda:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 800ecde:	2b00      	cmp	r3, #0
 800ece0:	d005      	beq.n	800ecee <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d2>
 800ece2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ece4:	009b      	lsls	r3, r3, #2
 800ece6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ece8:	4413      	add	r3, r2
 800ecea:	681b      	ldr	r3, [r3, #0]
 800ecec:	e001      	b.n	800ecf2 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1d6>
 800ecee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800ecf0:	681b      	ldr	r3, [r3, #0]
 800ecf2:	647b      	str	r3, [r7, #68]	; 0x44
    const double filter_scale = static_cast<double>(scale);
 800ecf4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ecf6:	f7f1 fc47 	bl	8000588 <__aeabi_f2d>
 800ecfa:	4602      	mov	r2, r0
 800ecfc:	460b      	mov	r3, r1
 800ecfe:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    const double effective_output_scale = static_cast<double>(input_scale) *
 800ed02:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800ed04:	f7f1 fc40 	bl	8000588 <__aeabi_f2d>
 800ed08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800ed0c:	f7f1 fc94 	bl	8000638 <__aeabi_dmul>
 800ed10:	4602      	mov	r2, r0
 800ed12:	460b      	mov	r3, r1
 800ed14:	4614      	mov	r4, r2
 800ed16:	461d      	mov	r5, r3
                                          filter_scale /
                                          static_cast<double>(output_scale);
 800ed18:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 800ed1a:	f7f1 fc35 	bl	8000588 <__aeabi_f2d>
 800ed1e:	4602      	mov	r2, r0
 800ed20:	460b      	mov	r3, r1
    const double effective_output_scale = static_cast<double>(input_scale) *
 800ed22:	4620      	mov	r0, r4
 800ed24:	4629      	mov	r1, r5
 800ed26:	f7f1 fdb1 	bl	800088c <__aeabi_ddiv>
 800ed2a:	4602      	mov	r2, r0
 800ed2c:	460b      	mov	r3, r1
 800ed2e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    int32_t significand;
    int channel_shift;
    QuantizeMultiplier(effective_output_scale, &significand, &channel_shift);
 800ed32:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800ed36:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800ed3a:	4611      	mov	r1, r2
 800ed3c:	4618      	mov	r0, r3
 800ed3e:	ed97 0b0c 	vldr	d0, [r7, #48]	; 0x30
 800ed42:	f7ff fc39 	bl	800e5b8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    per_channel_multiplier[i] = significand;
 800ed46:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed48:	009b      	lsls	r3, r3, #2
 800ed4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ed4e:	4413      	add	r3, r2
 800ed50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ed52:	601a      	str	r2, [r3, #0]
    per_channel_shift[i] = channel_shift;
 800ed54:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed56:	009b      	lsls	r3, r3, #2
 800ed58:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ed5c:	4413      	add	r3, r2
 800ed5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ed60:	601a      	str	r2, [r3, #0]
  for (int i = 0; i < num_channels; ++i) {
 800ed62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800ed64:	3301      	adds	r3, #1
 800ed66:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ed68:	e7b2      	b.n	800ecd0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x1b4>
  }

  // Populate scalar quantization parameters.
  // This check on legacy quantization parameters is kept only for backward
  // compatibility.
  if (input->type == kTfLiteUInt8) {
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	781b      	ldrb	r3, [r3, #0]
 800ed6e:	2b03      	cmp	r3, #3
 800ed70:	d146      	bne.n	800ee00 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2e4>
    // Check bias scale == input scale * filter scale.
    double real_multiplier = 0.0;
 800ed72:	f04f 0200 	mov.w	r2, #0
 800ed76:	f04f 0300 	mov.w	r3, #0
 800ed7a:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 800ed7e:	f107 0318 	add.w	r3, r7, #24
 800ed82:	9301      	str	r3, [sp, #4]
 800ed84:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ed86:	9300      	str	r3, [sp, #0]
 800ed88:	683b      	ldr	r3, [r7, #0]
 800ed8a:	687a      	ldr	r2, [r7, #4]
 800ed8c:	68b9      	ldr	r1, [r7, #8]
 800ed8e:	68f8      	ldr	r0, [r7, #12]
 800ed90:	f000 f85e 	bl	800ee50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 800ed94:	4603      	mov	r3, r0
 800ed96:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 800ed9a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800ed9e:	2b00      	cmp	r3, #0
 800eda0:	d01e      	beq.n	800ede0 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2c4>
 800eda2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800eda6:	e04d      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
 800eda8:	0801e1c0 	.word	0x0801e1c0
 800edac:	0801e1dc 	.word	0x0801e1dc
 800edb0:	0801e150 	.word	0x0801e150
 800edb4:	0801e1a4 	.word	0x0801e1a4
 800edb8:	0801e1f8 	.word	0x0801e1f8
 800edbc:	0801e22c 	.word	0x0801e22c
 800edc0:	0801e214 	.word	0x0801e214
 800edc4:	0801e240 	.word	0x0801e240
 800edc8:	0801e25c 	.word	0x0801e25c
 800edcc:	0801e298 	.word	0x0801e298
 800edd0:	0801e2a4 	.word	0x0801e2a4
 800edd4:	0801e2b4 	.word	0x0801e2b4
 800edd8:	0801e2c4 	.word	0x0801e2c4
 800eddc:	0801e2e8 	.word	0x0801e2e8
        context, input, filter, bias, output, &real_multiplier));
    int exponent;

    // Populate quantization parameters with multiplier and shift.
    QuantizeMultiplier(real_multiplier, multiplier, &exponent);
 800ede0:	ed97 7b06 	vldr	d7, [r7, #24]
 800ede4:	f107 0314 	add.w	r3, r7, #20
 800ede8:	4619      	mov	r1, r3
 800edea:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 800edec:	eeb0 0a47 	vmov.f32	s0, s14
 800edf0:	eef0 0a67 	vmov.f32	s1, s15
 800edf4:	f7ff fbe0 	bl	800e5b8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    *shift = -exponent;
 800edf8:	697b      	ldr	r3, [r7, #20]
 800edfa:	425a      	negs	r2, r3
 800edfc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800edfe:	601a      	str	r2, [r3, #0]
  }
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	781b      	ldrb	r3, [r3, #0]
 800ee04:	2b09      	cmp	r3, #9
 800ee06:	d007      	beq.n	800ee18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
 800ee08:	68bb      	ldr	r3, [r7, #8]
 800ee0a:	781b      	ldrb	r3, [r3, #0]
 800ee0c:	2b03      	cmp	r3, #3
 800ee0e:	d003      	beq.n	800ee18 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x2fc>
      input->type == kTfLiteInt16) {
 800ee10:	68bb      	ldr	r3, [r7, #8]
 800ee12:	781b      	ldrb	r3, [r3, #0]
  if (input->type == kTfLiteInt8 || input->type == kTfLiteUInt8 ||
 800ee14:	2b07      	cmp	r3, #7
 800ee16:	d114      	bne.n	800ee42 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 800ee18:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ee1a:	7819      	ldrb	r1, [r3, #0]
 800ee1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800ee20:	9300      	str	r3, [sp, #0]
 800ee22:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800ee26:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800ee28:	68f8      	ldr	r0, [r7, #12]
 800ee2a:	f000 f99b 	bl	800f164 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 800ee2e:	4603      	mov	r3, r0
 800ee30:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 800ee34:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ee38:	2b00      	cmp	r3, #0
 800ee3a:	d002      	beq.n	800ee42 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x326>
 800ee3c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 800ee40:	e000      	b.n	800ee44 <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i+0x328>
        context, activation, output, output_activation_min,
        output_activation_max));
  }
  return kTfLiteOk;
 800ee42:	2300      	movs	r3, #0
}
 800ee44:	4618      	mov	r0, r3
 800ee46:	3760      	adds	r7, #96	; 0x60
 800ee48:	46bd      	mov	sp, r7
 800ee4a:	bdb0      	pop	{r4, r5, r7, pc}
 800ee4c:	0000      	movs	r0, r0
	...

0800ee50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>:
TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              const TfLiteTensor* bias,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800ee50:	b5b0      	push	{r4, r5, r7, lr}
 800ee52:	b08e      	sub	sp, #56	; 0x38
 800ee54:	af02      	add	r7, sp, #8
 800ee56:	60f8      	str	r0, [r7, #12]
 800ee58:	60b9      	str	r1, [r7, #8]
 800ee5a:	607a      	str	r2, [r7, #4]
 800ee5c:	603b      	str	r3, [r7, #0]
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800ee5e:	68bb      	ldr	r3, [r7, #8]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	4618      	mov	r0, r3
 800ee64:	f7f1 fb90 	bl	8000588 <__aeabi_f2d>
 800ee68:	4604      	mov	r4, r0
 800ee6a:	460d      	mov	r5, r1
                                     static_cast<double>(filter->params.scale);
 800ee6c:	687b      	ldr	r3, [r7, #4]
 800ee6e:	68db      	ldr	r3, [r3, #12]
 800ee70:	4618      	mov	r0, r3
 800ee72:	f7f1 fb89 	bl	8000588 <__aeabi_f2d>
 800ee76:	4602      	mov	r2, r0
 800ee78:	460b      	mov	r3, r1
  const double input_product_scale = static_cast<double>(input->params.scale) *
 800ee7a:	4620      	mov	r0, r4
 800ee7c:	4629      	mov	r1, r5
 800ee7e:	f7f1 fbdb 	bl	8000638 <__aeabi_dmul>
 800ee82:	4602      	mov	r2, r0
 800ee84:	460b      	mov	r3, r1
 800ee86:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
  // TODO(ahentz): The following conditions must be guaranteed by the training
  // pipeline.
  if (bias) {
 800ee8a:	683b      	ldr	r3, [r7, #0]
 800ee8c:	2b00      	cmp	r3, #0
 800ee8e:	d04a      	beq.n	800ef26 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
    const double bias_scale = static_cast<double>(bias->params.scale);
 800ee90:	683b      	ldr	r3, [r7, #0]
 800ee92:	68db      	ldr	r3, [r3, #12]
 800ee94:	4618      	mov	r0, r3
 800ee96:	f7f1 fb77 	bl	8000588 <__aeabi_f2d>
 800ee9a:	4602      	mov	r2, r0
 800ee9c:	460b      	mov	r3, r1
 800ee9e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    // bias * (bias_scale - input_product_scale) / output_scale should be
    // a small number for an integer.
    // Since normally bias should be within a small range.
    // We should expect (bias_scale - input_product_scale) / output_scale to
    // be a small number like 0.02.
    const double scale_diff = std::abs(input_product_scale - bias_scale);
 800eea2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800eea6:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800eeaa:	f7f1 fa0d 	bl	80002c8 <__aeabi_dsub>
 800eeae:	4602      	mov	r2, r0
 800eeb0:	460b      	mov	r3, r1
 800eeb2:	ec43 2b17 	vmov	d7, r2, r3
 800eeb6:	eeb0 0a47 	vmov.f32	s0, s14
 800eeba:	eef0 0a67 	vmov.f32	s1, s15
 800eebe:	f7ff fe18 	bl	800eaf2 <_ZSt3absd>
 800eec2:	ed87 0b06 	vstr	d0, [r7, #24]
    const double output_scale = static_cast<double>(output->params.scale);
 800eec6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eec8:	68db      	ldr	r3, [r3, #12]
 800eeca:	4618      	mov	r0, r3
 800eecc:	f7f1 fb5c 	bl	8000588 <__aeabi_f2d>
 800eed0:	4602      	mov	r2, r0
 800eed2:	460b      	mov	r3, r1
 800eed4:	e9c7 2304 	strd	r2, r3, [r7, #16]

    TF_LITE_ENSURE(context, scale_diff / output_scale <= 0.02);
 800eed8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800eedc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800eee0:	f7f1 fcd4 	bl	800088c <__aeabi_ddiv>
 800eee4:	4602      	mov	r2, r0
 800eee6:	460b      	mov	r3, r1
 800eee8:	4610      	mov	r0, r2
 800eeea:	4619      	mov	r1, r3
 800eeec:	2301      	movs	r3, #1
 800eeee:	461c      	mov	r4, r3
 800eef0:	a318      	add	r3, pc, #96	; (adr r3, 800ef54 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x104>)
 800eef2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef6:	f7f1 fe1b 	bl	8000b30 <__aeabi_dcmple>
 800eefa:	4603      	mov	r3, r0
 800eefc:	2b00      	cmp	r3, #0
 800eefe:	d101      	bne.n	800ef04 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xb4>
 800ef00:	2300      	movs	r3, #0
 800ef02:	461c      	mov	r4, r3
 800ef04:	b2e3      	uxtb	r3, r4
 800ef06:	f083 0301 	eor.w	r3, r3, #1
 800ef0a:	b2db      	uxtb	r3, r3
 800ef0c:	2b00      	cmp	r3, #0
 800ef0e:	d00a      	beq.n	800ef26 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xd6>
 800ef10:	68fb      	ldr	r3, [r7, #12]
 800ef12:	695c      	ldr	r4, [r3, #20]
 800ef14:	4b0c      	ldr	r3, [pc, #48]	; (800ef48 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xf8>)
 800ef16:	9300      	str	r3, [sp, #0]
 800ef18:	239a      	movs	r3, #154	; 0x9a
 800ef1a:	4a0c      	ldr	r2, [pc, #48]	; (800ef4c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xfc>)
 800ef1c:	490c      	ldr	r1, [pc, #48]	; (800ef50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0x100>)
 800ef1e:	68f8      	ldr	r0, [r7, #12]
 800ef20:	47a0      	blx	r4
 800ef22:	2301      	movs	r3, #1
 800ef24:	e009      	b.n	800ef3a <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd+0xea>
  }
  return GetQuantizedConvolutionMultipler(context, input, filter, output,
 800ef26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ef28:	9300      	str	r3, [sp, #0]
 800ef2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ef2c:	687a      	ldr	r2, [r7, #4]
 800ef2e:	68b9      	ldr	r1, [r7, #8]
 800ef30:	68f8      	ldr	r0, [r7, #12]
 800ef32:	f000 f813 	bl	800ef5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>
 800ef36:	4603      	mov	r3, r0
                                          multiplier);
 800ef38:	bf00      	nop
}
 800ef3a:	4618      	mov	r0, r3
 800ef3c:	3730      	adds	r7, #48	; 0x30
 800ef3e:	46bd      	mov	sp, r7
 800ef40:	bdb0      	pop	{r4, r5, r7, pc}
 800ef42:	bf00      	nop
 800ef44:	f3af 8000 	nop.w
 800ef48:	0801e328 	.word	0x0801e328
 800ef4c:	0801e150 	.word	0x0801e150
 800ef50:	0801e214 	.word	0x0801e214
 800ef54:	47ae147b 	.word	0x47ae147b
 800ef58:	3f947ae1 	.word	0x3f947ae1

0800ef5c <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd>:

TfLiteStatus GetQuantizedConvolutionMultipler(TfLiteContext* context,
                                              const TfLiteTensor* input,
                                              const TfLiteTensor* filter,
                                              TfLiteTensor* output,
                                              double* multiplier) {
 800ef5c:	b590      	push	{r4, r7, lr}
 800ef5e:	b089      	sub	sp, #36	; 0x24
 800ef60:	af02      	add	r7, sp, #8
 800ef62:	60f8      	str	r0, [r7, #12]
 800ef64:	60b9      	str	r1, [r7, #8]
 800ef66:	607a      	str	r2, [r7, #4]
 800ef68:	603b      	str	r3, [r7, #0]
  const double input_product_scale =
      static_cast<double>(input->params.scale * filter->params.scale);
 800ef6a:	68bb      	ldr	r3, [r7, #8]
 800ef6c:	ed93 7a03 	vldr	s14, [r3, #12]
 800ef70:	687b      	ldr	r3, [r7, #4]
 800ef72:	edd3 7a03 	vldr	s15, [r3, #12]
 800ef76:	ee67 7a27 	vmul.f32	s15, s14, s15
  const double input_product_scale =
 800ef7a:	ee17 0a90 	vmov	r0, s15
 800ef7e:	f7f1 fb03 	bl	8000588 <__aeabi_f2d>
 800ef82:	4602      	mov	r2, r0
 800ef84:	460b      	mov	r3, r1
 800ef86:	e9c7 2304 	strd	r2, r3, [r7, #16]
  TF_LITE_ENSURE(context, input_product_scale >= 0);
 800ef8a:	2301      	movs	r3, #1
 800ef8c:	461c      	mov	r4, r3
 800ef8e:	f04f 0200 	mov.w	r2, #0
 800ef92:	f04f 0300 	mov.w	r3, #0
 800ef96:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800ef9a:	f7f1 fdd3 	bl	8000b44 <__aeabi_dcmpge>
 800ef9e:	4603      	mov	r3, r0
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d101      	bne.n	800efa8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x4c>
 800efa4:	2300      	movs	r3, #0
 800efa6:	461c      	mov	r4, r3
 800efa8:	b2e3      	uxtb	r3, r4
 800efaa:	f083 0301 	eor.w	r3, r3, #1
 800efae:	b2db      	uxtb	r3, r3
 800efb0:	2b00      	cmp	r3, #0
 800efb2:	d00a      	beq.n	800efca <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x6e>
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	695c      	ldr	r4, [r3, #20]
 800efb8:	4b0e      	ldr	r3, [pc, #56]	; (800eff4 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x98>)
 800efba:	9300      	str	r3, [sp, #0]
 800efbc:	23a7      	movs	r3, #167	; 0xa7
 800efbe:	4a0e      	ldr	r2, [pc, #56]	; (800eff8 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x9c>)
 800efc0:	490e      	ldr	r1, [pc, #56]	; (800effc <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0xa0>)
 800efc2:	68f8      	ldr	r0, [r7, #12]
 800efc4:	47a0      	blx	r4
 800efc6:	2301      	movs	r3, #1
 800efc8:	e010      	b.n	800efec <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_PS2_Pd+0x90>
  *multiplier = input_product_scale / static_cast<double>(output->params.scale);
 800efca:	683b      	ldr	r3, [r7, #0]
 800efcc:	68db      	ldr	r3, [r3, #12]
 800efce:	4618      	mov	r0, r3
 800efd0:	f7f1 fada 	bl	8000588 <__aeabi_f2d>
 800efd4:	4602      	mov	r2, r0
 800efd6:	460b      	mov	r3, r1
 800efd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800efdc:	f7f1 fc56 	bl	800088c <__aeabi_ddiv>
 800efe0:	4602      	mov	r2, r0
 800efe2:	460b      	mov	r3, r1
 800efe4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800efe6:	e9c1 2300 	strd	r2, r3, [r1]

  return kTfLiteOk;
 800efea:	2300      	movs	r3, #0
}
 800efec:	4618      	mov	r0, r3
 800efee:	371c      	adds	r7, #28
 800eff0:	46bd      	mov	sp, r7
 800eff2:	bd90      	pop	{r4, r7, pc}
 800eff4:	0801e34c 	.word	0x0801e34c
 800eff8:	0801e150 	.word	0x0801e150
 800effc:	0801e214 	.word	0x0801e214

0800f000 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>:
                                           TfLiteTensor* output,
                                           int32_t* act_min, int32_t* act_max) {
  const auto scale = output->params.scale;
  const auto zero_point = output->params.zero_point;

  auto quantize = [scale, zero_point](float f) {
 800f000:	b580      	push	{r7, lr}
 800f002:	b082      	sub	sp, #8
 800f004:	af00      	add	r7, sp, #0
 800f006:	6078      	str	r0, [r7, #4]
 800f008:	ed87 0a00 	vstr	s0, [r7]
 800f00c:	687b      	ldr	r3, [r7, #4]
 800f00e:	edd3 7a00 	vldr	s15, [r3]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800f012:	ed97 7a00 	vldr	s14, [r7]
 800f016:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800f01a:	eeb0 0a66 	vmov.f32	s0, s13
 800f01e:	f7ff fcc0 	bl	800e9a2 <_ZN6tflite11TfLiteRoundIfEET_S1_>
 800f022:	eef0 7a40 	vmov.f32	s15, s0
 800f026:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800f02a:	ee17 2a90 	vmov	r2, s15
  auto quantize = [scale, zero_point](float f) {
 800f02e:	687b      	ldr	r3, [r7, #4]
 800f030:	685b      	ldr	r3, [r3, #4]
    return zero_point + static_cast<int32_t>(TfLiteRound(f / scale));
 800f032:	4413      	add	r3, r2
  };
 800f034:	4618      	mov	r0, r3
 800f036:	3708      	adds	r7, #8
 800f038:	46bd      	mov	sp, r7
 800f03a:	bd80      	pop	{r7, pc}

0800f03c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>:
                                           int32_t* act_min, int32_t* act_max) {
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b08e      	sub	sp, #56	; 0x38
 800f040:	af00      	add	r7, sp, #0
 800f042:	60b9      	str	r1, [r7, #8]
 800f044:	607a      	str	r2, [r7, #4]
 800f046:	603b      	str	r3, [r7, #0]
 800f048:	4603      	mov	r3, r0
 800f04a:	73fb      	strb	r3, [r7, #15]
  const auto scale = output->params.scale;
 800f04c:	683b      	ldr	r3, [r7, #0]
 800f04e:	68db      	ldr	r3, [r3, #12]
 800f050:	637b      	str	r3, [r7, #52]	; 0x34
  const auto zero_point = output->params.zero_point;
 800f052:	683b      	ldr	r3, [r7, #0]
 800f054:	691b      	ldr	r3, [r3, #16]
 800f056:	633b      	str	r3, [r7, #48]	; 0x30
  };
 800f058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f05a:	617b      	str	r3, [r7, #20]
 800f05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f05e:	61bb      	str	r3, [r7, #24]

  if (activation == kTfLiteActRelu) {
 800f060:	7bfb      	ldrb	r3, [r7, #15]
 800f062:	2b01      	cmp	r3, #1
 800f064:	d118      	bne.n	800f098 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x5c>
    *act_min = std::max(qmin, quantize(0.0));
 800f066:	f107 0314 	add.w	r3, r7, #20
 800f06a:	ed9f 0a3d 	vldr	s0, [pc, #244]	; 800f160 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800f06e:	4618      	mov	r0, r3
 800f070:	f7ff ffc6 	bl	800f000 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f074:	4603      	mov	r3, r0
 800f076:	61fb      	str	r3, [r7, #28]
 800f078:	f107 021c 	add.w	r2, r7, #28
 800f07c:	f107 0308 	add.w	r3, r7, #8
 800f080:	4611      	mov	r1, r2
 800f082:	4618      	mov	r0, r3
 800f084:	f000 f8ed 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 800f088:	4603      	mov	r3, r0
 800f08a:	681a      	ldr	r2, [r3, #0]
 800f08c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f08e:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800f090:	687a      	ldr	r2, [r7, #4]
 800f092:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f094:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
  } else {
    *act_min = qmin;
    *act_max = qmax;
  }
}
 800f096:	e05f      	b.n	800f158 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActRelu6) {
 800f098:	7bfb      	ldrb	r3, [r7, #15]
 800f09a:	2b03      	cmp	r3, #3
 800f09c:	d129      	bne.n	800f0f2 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0xb6>
    *act_min = std::max(qmin, quantize(0.0));
 800f09e:	f107 0314 	add.w	r3, r7, #20
 800f0a2:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 800f160 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x124>
 800f0a6:	4618      	mov	r0, r3
 800f0a8:	f7ff ffaa 	bl	800f000 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f0ac:	4603      	mov	r3, r0
 800f0ae:	623b      	str	r3, [r7, #32]
 800f0b0:	f107 0220 	add.w	r2, r7, #32
 800f0b4:	f107 0308 	add.w	r3, r7, #8
 800f0b8:	4611      	mov	r1, r2
 800f0ba:	4618      	mov	r0, r3
 800f0bc:	f000 f8d1 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 800f0c0:	4603      	mov	r3, r0
 800f0c2:	681a      	ldr	r2, [r3, #0]
 800f0c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f0c6:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(6.0));
 800f0c8:	f107 0314 	add.w	r3, r7, #20
 800f0cc:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 800f0d0:	4618      	mov	r0, r3
 800f0d2:	f7ff ff95 	bl	800f000 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	627b      	str	r3, [r7, #36]	; 0x24
 800f0da:	f107 0224 	add.w	r2, r7, #36	; 0x24
 800f0de:	1d3b      	adds	r3, r7, #4
 800f0e0:	4611      	mov	r1, r2
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	f000 f8d1 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 800f0e8:	4603      	mov	r3, r0
 800f0ea:	681a      	ldr	r2, [r3, #0]
 800f0ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f0ee:	601a      	str	r2, [r3, #0]
}
 800f0f0:	e032      	b.n	800f158 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
  } else if (activation == kTfLiteActReluN1To1) {
 800f0f2:	7bfb      	ldrb	r3, [r7, #15]
 800f0f4:	2b02      	cmp	r3, #2
 800f0f6:	d129      	bne.n	800f14c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x110>
    *act_min = std::max(qmin, quantize(-1.0));
 800f0f8:	f107 0314 	add.w	r3, r7, #20
 800f0fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800f100:	4618      	mov	r0, r3
 800f102:	f7ff ff7d 	bl	800f000 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f106:	4603      	mov	r3, r0
 800f108:	62bb      	str	r3, [r7, #40]	; 0x28
 800f10a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800f10e:	f107 0308 	add.w	r3, r7, #8
 800f112:	4611      	mov	r1, r2
 800f114:	4618      	mov	r0, r3
 800f116:	f000 f8a4 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 800f11a:	4603      	mov	r3, r0
 800f11c:	681a      	ldr	r2, [r3, #0]
 800f11e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f120:	601a      	str	r2, [r3, #0]
    *act_max = std::min(qmax, quantize(1.0));
 800f122:	f107 0314 	add.w	r3, r7, #20
 800f126:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800f12a:	4618      	mov	r0, r3
 800f12c:	f7ff ff68 	bl	800f000 <_ZZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_ENKUlfE_clEf>
 800f130:	4603      	mov	r3, r0
 800f132:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f134:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800f138:	1d3b      	adds	r3, r7, #4
 800f13a:	4611      	mov	r1, r2
 800f13c:	4618      	mov	r0, r3
 800f13e:	f000 f8a4 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 800f142:	4603      	mov	r3, r0
 800f144:	681a      	ldr	r2, [r3, #0]
 800f146:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f148:	601a      	str	r2, [r3, #0]
}
 800f14a:	e005      	b.n	800f158 <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_+0x11c>
    *act_min = qmin;
 800f14c:	68ba      	ldr	r2, [r7, #8]
 800f14e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800f150:	601a      	str	r2, [r3, #0]
    *act_max = qmax;
 800f152:	687a      	ldr	r2, [r7, #4]
 800f154:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800f156:	601a      	str	r2, [r3, #0]
}
 800f158:	bf00      	nop
 800f15a:	3738      	adds	r7, #56	; 0x38
 800f15c:	46bd      	mov	sp, r7
 800f15e:	bd80      	pop	{r7, pc}
 800f160:	00000000 	.word	0x00000000

0800f164 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>:

TfLiteStatus CalculateActivationRangeQuantized(TfLiteContext* context,
                                               TfLiteFusedActivation activation,
                                               TfLiteTensor* output,
                                               int32_t* act_min,
                                               int32_t* act_max) {
 800f164:	b590      	push	{r4, r7, lr}
 800f166:	b089      	sub	sp, #36	; 0x24
 800f168:	af02      	add	r7, sp, #8
 800f16a:	60f8      	str	r0, [r7, #12]
 800f16c:	607a      	str	r2, [r7, #4]
 800f16e:	603b      	str	r3, [r7, #0]
 800f170:	460b      	mov	r3, r1
 800f172:	72fb      	strb	r3, [r7, #11]
  int32_t qmin = 0;
 800f174:	2300      	movs	r3, #0
 800f176:	617b      	str	r3, [r7, #20]
  int32_t qmax = 0;
 800f178:	2300      	movs	r3, #0
 800f17a:	613b      	str	r3, [r7, #16]
  if (output->type == kTfLiteUInt8) {
 800f17c:	687b      	ldr	r3, [r7, #4]
 800f17e:	781b      	ldrb	r3, [r3, #0]
 800f180:	2b03      	cmp	r3, #3
 800f182:	d108      	bne.n	800f196 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x32>
    qmin = std::numeric_limits<uint8_t>::min();
 800f184:	f7ff fc2e 	bl	800e9e4 <_ZNSt14numeric_limitsIhE3minEv>
 800f188:	4603      	mov	r3, r0
 800f18a:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<uint8_t>::max();
 800f18c:	f7ff fc32 	bl	800e9f4 <_ZNSt14numeric_limitsIhE3maxEv>
 800f190:	4603      	mov	r3, r0
 800f192:	613b      	str	r3, [r7, #16]
 800f194:	e024      	b.n	800f1e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt8) {
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	781b      	ldrb	r3, [r3, #0]
 800f19a:	2b09      	cmp	r3, #9
 800f19c:	d108      	bne.n	800f1b0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x4c>
    qmin = std::numeric_limits<int8_t>::min();
 800f19e:	f7ff fc10 	bl	800e9c2 <_ZNSt14numeric_limitsIaE3minEv>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int8_t>::max();
 800f1a6:	f7ff fc15 	bl	800e9d4 <_ZNSt14numeric_limitsIaE3maxEv>
 800f1aa:	4603      	mov	r3, r0
 800f1ac:	613b      	str	r3, [r7, #16]
 800f1ae:	e017      	b.n	800f1e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else if (output->type == kTfLiteInt16) {
 800f1b0:	687b      	ldr	r3, [r7, #4]
 800f1b2:	781b      	ldrb	r3, [r3, #0]
 800f1b4:	2b07      	cmp	r3, #7
 800f1b6:	d108      	bne.n	800f1ca <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x66>
    qmin = std::numeric_limits<int16_t>::min();
 800f1b8:	f7ff fc24 	bl	800ea04 <_ZNSt14numeric_limitsIsE3minEv>
 800f1bc:	4603      	mov	r3, r0
 800f1be:	617b      	str	r3, [r7, #20]
    qmax = std::numeric_limits<int16_t>::max();
 800f1c0:	f7ff fc2a 	bl	800ea18 <_ZNSt14numeric_limitsIsE3maxEv>
 800f1c4:	4603      	mov	r3, r0
 800f1c6:	613b      	str	r3, [r7, #16]
 800f1c8:	e00a      	b.n	800f1e0 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x7c>
  } else {
    TF_LITE_ENSURE(context, false);
 800f1ca:	68fb      	ldr	r3, [r7, #12]
 800f1cc:	695c      	ldr	r4, [r3, #20]
 800f1ce:	4b0c      	ldr	r3, [pc, #48]	; (800f200 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x9c>)
 800f1d0:	9300      	str	r3, [sp, #0]
 800f1d2:	23da      	movs	r3, #218	; 0xda
 800f1d4:	4a0b      	ldr	r2, [pc, #44]	; (800f204 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa0>)
 800f1d6:	490c      	ldr	r1, [pc, #48]	; (800f208 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0xa4>)
 800f1d8:	68f8      	ldr	r0, [r7, #12]
 800f1da:	47a0      	blx	r4
 800f1dc:	2301      	movs	r3, #1
 800f1de:	e00a      	b.n	800f1f6 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_+0x92>
  }

  CalculateActivationRangeQuantizedImpl(activation, qmin, qmax, output, act_min,
 800f1e0:	7af8      	ldrb	r0, [r7, #11]
 800f1e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f1e4:	9301      	str	r3, [sp, #4]
 800f1e6:	683b      	ldr	r3, [r7, #0]
 800f1e8:	9300      	str	r3, [sp, #0]
 800f1ea:	687b      	ldr	r3, [r7, #4]
 800f1ec:	693a      	ldr	r2, [r7, #16]
 800f1ee:	6979      	ldr	r1, [r7, #20]
 800f1f0:	f7ff ff24 	bl	800f03c <_ZN6tflite12_GLOBAL__N_137CalculateActivationRangeQuantizedImplE21TfLiteFusedActivationllP12TfLiteTensorPlS4_>
                                        act_max);
  return kTfLiteOk;
 800f1f4:	2300      	movs	r3, #0
}
 800f1f6:	4618      	mov	r0, r3
 800f1f8:	371c      	adds	r7, #28
 800f1fa:	46bd      	mov	sp, r7
 800f1fc:	bd90      	pop	{r4, r7, pc}
 800f1fe:	bf00      	nop
 800f200:	0801e368 	.word	0x0801e368
 800f204:	0801e150 	.word	0x0801e150
 800f208:	0801e214 	.word	0x0801e214

0800f20c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>:

bool HaveSameShapes(const TfLiteTensor* input1, const TfLiteTensor* input2) {
 800f20c:	b580      	push	{r7, lr}
 800f20e:	b082      	sub	sp, #8
 800f210:	af00      	add	r7, sp, #0
 800f212:	6078      	str	r0, [r7, #4]
 800f214:	6039      	str	r1, [r7, #0]
  return TfLiteIntArrayEqual(input1->dims, input2->dims);
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	689a      	ldr	r2, [r3, #8]
 800f21a:	683b      	ldr	r3, [r7, #0]
 800f21c:	689b      	ldr	r3, [r3, #8]
 800f21e:	4619      	mov	r1, r3
 800f220:	4610      	mov	r0, r2
 800f222:	f7ff f909 	bl	800e438 <TfLiteIntArrayEqual>
 800f226:	4603      	mov	r3, r0
 800f228:	2b00      	cmp	r3, #0
 800f22a:	bf14      	ite	ne
 800f22c:	2301      	movne	r3, #1
 800f22e:	2300      	moveq	r3, #0
 800f230:	b2db      	uxtb	r3, r3
}
 800f232:	4618      	mov	r0, r3
 800f234:	3708      	adds	r7, #8
 800f236:	46bd      	mov	sp, r7
 800f238:	bd80      	pop	{r7, pc}

0800f23a <_ZSt3maxIiERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f23a:	b480      	push	{r7}
 800f23c:	b083      	sub	sp, #12
 800f23e:	af00      	add	r7, sp, #0
 800f240:	6078      	str	r0, [r7, #4]
 800f242:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f244:	687b      	ldr	r3, [r7, #4]
 800f246:	681a      	ldr	r2, [r3, #0]
 800f248:	683b      	ldr	r3, [r7, #0]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	429a      	cmp	r2, r3
 800f24e:	da01      	bge.n	800f254 <_ZSt3maxIiERKT_S2_S2_+0x1a>
	return __b;
 800f250:	683b      	ldr	r3, [r7, #0]
 800f252:	e000      	b.n	800f256 <_ZSt3maxIiERKT_S2_S2_+0x1c>
      return __a;
 800f254:	687b      	ldr	r3, [r7, #4]
    }
 800f256:	4618      	mov	r0, r3
 800f258:	370c      	adds	r7, #12
 800f25a:	46bd      	mov	sp, r7
 800f25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f260:	4770      	bx	lr

0800f262 <_ZSt3maxIlERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 800f262:	b480      	push	{r7}
 800f264:	b083      	sub	sp, #12
 800f266:	af00      	add	r7, sp, #0
 800f268:	6078      	str	r0, [r7, #4]
 800f26a:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	681a      	ldr	r2, [r3, #0]
 800f270:	683b      	ldr	r3, [r7, #0]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	429a      	cmp	r2, r3
 800f276:	da01      	bge.n	800f27c <_ZSt3maxIlERKT_S2_S2_+0x1a>
	return __b;
 800f278:	683b      	ldr	r3, [r7, #0]
 800f27a:	e000      	b.n	800f27e <_ZSt3maxIlERKT_S2_S2_+0x1c>
      return __a;
 800f27c:	687b      	ldr	r3, [r7, #4]
    }
 800f27e:	4618      	mov	r0, r3
 800f280:	370c      	adds	r7, #12
 800f282:	46bd      	mov	sp, r7
 800f284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f288:	4770      	bx	lr

0800f28a <_ZSt3minIlERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 800f28a:	b480      	push	{r7}
 800f28c:	b083      	sub	sp, #12
 800f28e:	af00      	add	r7, sp, #0
 800f290:	6078      	str	r0, [r7, #4]
 800f292:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 800f294:	683b      	ldr	r3, [r7, #0]
 800f296:	681a      	ldr	r2, [r3, #0]
 800f298:	687b      	ldr	r3, [r7, #4]
 800f29a:	681b      	ldr	r3, [r3, #0]
 800f29c:	429a      	cmp	r2, r3
 800f29e:	da01      	bge.n	800f2a4 <_ZSt3minIlERKT_S2_S2_+0x1a>
	return __b;
 800f2a0:	683b      	ldr	r3, [r7, #0]
 800f2a2:	e000      	b.n	800f2a6 <_ZSt3minIlERKT_S2_S2_+0x1c>
      return __a;
 800f2a4:	687b      	ldr	r3, [r7, #4]
    }
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	370c      	adds	r7, #12
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2b0:	4770      	bx	lr

0800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>:
                                    const TfLiteNode* node, int index) {
 800f2b2:	b480      	push	{r7}
 800f2b4:	b085      	sub	sp, #20
 800f2b6:	af00      	add	r7, sp, #0
 800f2b8:	60f8      	str	r0, [r7, #12]
 800f2ba:	60b9      	str	r1, [r7, #8]
 800f2bc:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->inputs->data[index]];
 800f2be:	68fb      	ldr	r3, [r7, #12]
 800f2c0:	689a      	ldr	r2, [r3, #8]
 800f2c2:	68bb      	ldr	r3, [r7, #8]
 800f2c4:	6819      	ldr	r1, [r3, #0]
 800f2c6:	687b      	ldr	r3, [r7, #4]
 800f2c8:	009b      	lsls	r3, r3, #2
 800f2ca:	440b      	add	r3, r1
 800f2cc:	685b      	ldr	r3, [r3, #4]
 800f2ce:	019b      	lsls	r3, r3, #6
 800f2d0:	4413      	add	r3, r2
}
 800f2d2:	4618      	mov	r0, r3
 800f2d4:	3714      	adds	r7, #20
 800f2d6:	46bd      	mov	sp, r7
 800f2d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2dc:	4770      	bx	lr

0800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>:
                               int index) {
 800f2de:	b480      	push	{r7}
 800f2e0:	b085      	sub	sp, #20
 800f2e2:	af00      	add	r7, sp, #0
 800f2e4:	60f8      	str	r0, [r7, #12]
 800f2e6:	60b9      	str	r1, [r7, #8]
 800f2e8:	607a      	str	r2, [r7, #4]
  return &context->tensors[node->outputs->data[index]];
 800f2ea:	68fb      	ldr	r3, [r7, #12]
 800f2ec:	689a      	ldr	r2, [r3, #8]
 800f2ee:	68bb      	ldr	r3, [r7, #8]
 800f2f0:	6859      	ldr	r1, [r3, #4]
 800f2f2:	687b      	ldr	r3, [r7, #4]
 800f2f4:	009b      	lsls	r3, r3, #2
 800f2f6:	440b      	add	r3, r1
 800f2f8:	685b      	ldr	r3, [r3, #4]
 800f2fa:	019b      	lsls	r3, r3, #6
 800f2fc:	4413      	add	r3, r2
}
 800f2fe:	4618      	mov	r0, r3
 800f300:	3714      	adds	r7, #20
 800f302:	46bd      	mov	sp, r7
 800f304:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f308:	4770      	bx	lr

0800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
}

template <typename T>
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800f30a:	b480      	push	{r7}
 800f30c:	b083      	sub	sp, #12
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	2b00      	cmp	r3, #0
 800f316:	d002      	beq.n	800f31e <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x14>
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800f31c:	e000      	b.n	800f320 <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f31e:	2300      	movs	r3, #0
}
 800f320:	4618      	mov	r0, r3
 800f322:	370c      	adds	r7, #12
 800f324:	46bd      	mov	sp, r7
 800f326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f32a:	4770      	bx	lr

0800f32c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800f32c:	b480      	push	{r7}
 800f32e:	b083      	sub	sp, #12
 800f330:	af00      	add	r7, sp, #0
 800f332:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800f334:	687b      	ldr	r3, [r7, #4]
 800f336:	2b00      	cmp	r3, #0
 800f338:	d002      	beq.n	800f340 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x14>
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	685b      	ldr	r3, [r3, #4]
 800f33e:	e000      	b.n	800f342 <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor+0x16>
 800f340:	2300      	movs	r3, #0
}
 800f342:	4618      	mov	r0, r3
 800f344:	370c      	adds	r7, #12
 800f346:	46bd      	mov	sp, r7
 800f348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f34c:	4770      	bx	lr

0800f34e <_ZN6tflite12RuntimeShapeC1Ev>:
  // larger shapes are separately allocated.
  static constexpr int kMaxSmallSize = 5;

  RuntimeShape& operator=(RuntimeShape const&) = delete;

  RuntimeShape() : size_(0) {}
 800f34e:	b480      	push	{r7}
 800f350:	b083      	sub	sp, #12
 800f352:	af00      	add	r7, sp, #0
 800f354:	6078      	str	r0, [r7, #4]
 800f356:	687b      	ldr	r3, [r7, #4]
 800f358:	2200      	movs	r2, #0
 800f35a:	601a      	str	r2, [r3, #0]
 800f35c:	687b      	ldr	r3, [r7, #4]
 800f35e:	4618      	mov	r0, r3
 800f360:	370c      	adds	r7, #12
 800f362:	46bd      	mov	sp, r7
 800f364:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f368:	4770      	bx	lr

0800f36a <_ZN6tflite12RuntimeShapeC1EiPKl>:
    for (int i = 0; i < shape_size; ++i) {
      SetDim(i, value);
    }
  }

  RuntimeShape(int dimensions_count, const int32* dims_data) : size_(0) {
 800f36a:	b580      	push	{r7, lr}
 800f36c:	b084      	sub	sp, #16
 800f36e:	af00      	add	r7, sp, #0
 800f370:	60f8      	str	r0, [r7, #12]
 800f372:	60b9      	str	r1, [r7, #8]
 800f374:	607a      	str	r2, [r7, #4]
 800f376:	68fb      	ldr	r3, [r7, #12]
 800f378:	2200      	movs	r2, #0
 800f37a:	601a      	str	r2, [r3, #0]
    ReplaceWith(dimensions_count, dims_data);
 800f37c:	687a      	ldr	r2, [r7, #4]
 800f37e:	68b9      	ldr	r1, [r7, #8]
 800f380:	68f8      	ldr	r0, [r7, #12]
 800f382:	f000 f89e 	bl	800f4c2 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>
  }
 800f386:	68fb      	ldr	r3, [r7, #12]
 800f388:	4618      	mov	r0, r3
 800f38a:	3710      	adds	r7, #16
 800f38c:	46bd      	mov	sp, r7
 800f38e:	bd80      	pop	{r7, pc}

0800f390 <_ZN6tflite12RuntimeShapeD1Ev>:
  bool operator==(const RuntimeShape& comp) const {
    return this->size_ == comp.size_ &&
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
  }

  ~RuntimeShape() {
 800f390:	b580      	push	{r7, lr}
 800f392:	b082      	sub	sp, #8
 800f394:	af00      	add	r7, sp, #0
 800f396:	6078      	str	r0, [r7, #4]
    if (size_ > kMaxSmallSize) {
 800f398:	687b      	ldr	r3, [r7, #4]
 800f39a:	681b      	ldr	r3, [r3, #0]
 800f39c:	2b05      	cmp	r3, #5
 800f39e:	dd08      	ble.n	800f3b2 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	685b      	ldr	r3, [r3, #4]
 800f3a4:	2b00      	cmp	r3, #0
 800f3a6:	d004      	beq.n	800f3b2 <_ZN6tflite12RuntimeShapeD1Ev+0x22>
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	685b      	ldr	r3, [r3, #4]
 800f3ac:	4618      	mov	r0, r3
 800f3ae:	f008 fd37 	bl	8017e20 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	4618      	mov	r0, r3
 800f3b6:	3708      	adds	r7, #8
 800f3b8:	46bd      	mov	sp, r7
 800f3ba:	bd80      	pop	{r7, pc}

0800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>:

  inline int32 DimensionsCount() const { return size_; }
 800f3bc:	b480      	push	{r7}
 800f3be:	b083      	sub	sp, #12
 800f3c0:	af00      	add	r7, sp, #0
 800f3c2:	6078      	str	r0, [r7, #4]
 800f3c4:	687b      	ldr	r3, [r7, #4]
 800f3c6:	681b      	ldr	r3, [r3, #0]
 800f3c8:	4618      	mov	r0, r3
 800f3ca:	370c      	adds	r7, #12
 800f3cc:	46bd      	mov	sp, r7
 800f3ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d2:	4770      	bx	lr

0800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>:
  inline int32 Dims(int i) const {
 800f3d4:	b580      	push	{r7, lr}
 800f3d6:	b082      	sub	sp, #8
 800f3d8:	af00      	add	r7, sp, #0
 800f3da:	6078      	str	r0, [r7, #4]
 800f3dc:	6039      	str	r1, [r7, #0]
    TFLITE_DCHECK_GE(i, 0);
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	2b00      	cmp	r3, #0
 800f3e2:	da01      	bge.n	800f3e8 <_ZNK6tflite12RuntimeShape4DimsEi+0x14>
 800f3e4:	f00b fde4 	bl	801afb0 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800f3e8:	687b      	ldr	r3, [r7, #4]
 800f3ea:	681b      	ldr	r3, [r3, #0]
 800f3ec:	683a      	ldr	r2, [r7, #0]
 800f3ee:	429a      	cmp	r2, r3
 800f3f0:	db01      	blt.n	800f3f6 <_ZNK6tflite12RuntimeShape4DimsEi+0x22>
 800f3f2:	f00b fddd 	bl	801afb0 <abort>
    return size_ > kMaxSmallSize ? dims_pointer_[i] : dims_[i];
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	681b      	ldr	r3, [r3, #0]
 800f3fa:	2b05      	cmp	r3, #5
 800f3fc:	dd06      	ble.n	800f40c <_ZNK6tflite12RuntimeShape4DimsEi+0x38>
 800f3fe:	687b      	ldr	r3, [r7, #4]
 800f400:	685a      	ldr	r2, [r3, #4]
 800f402:	683b      	ldr	r3, [r7, #0]
 800f404:	009b      	lsls	r3, r3, #2
 800f406:	4413      	add	r3, r2
 800f408:	681b      	ldr	r3, [r3, #0]
 800f40a:	e004      	b.n	800f416 <_ZNK6tflite12RuntimeShape4DimsEi+0x42>
 800f40c:	687a      	ldr	r2, [r7, #4]
 800f40e:	683b      	ldr	r3, [r7, #0]
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	4413      	add	r3, r2
 800f414:	685b      	ldr	r3, [r3, #4]
  }
 800f416:	4618      	mov	r0, r3
 800f418:	3708      	adds	r7, #8
 800f41a:	46bd      	mov	sp, r7
 800f41c:	bd80      	pop	{r7, pc}

0800f41e <_ZN6tflite12RuntimeShape8DimsDataEv>:
    } else {
      dims_[i] = val;
    }
  }

  inline int32* DimsData() {
 800f41e:	b480      	push	{r7}
 800f420:	b083      	sub	sp, #12
 800f422:	af00      	add	r7, sp, #0
 800f424:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800f426:	687b      	ldr	r3, [r7, #4]
 800f428:	681b      	ldr	r3, [r3, #0]
 800f42a:	2b05      	cmp	r3, #5
 800f42c:	dd02      	ble.n	800f434 <_ZN6tflite12RuntimeShape8DimsDataEv+0x16>
 800f42e:	687b      	ldr	r3, [r7, #4]
 800f430:	685b      	ldr	r3, [r3, #4]
 800f432:	e001      	b.n	800f438 <_ZN6tflite12RuntimeShape8DimsDataEv+0x1a>
 800f434:	687b      	ldr	r3, [r7, #4]
 800f436:	3304      	adds	r3, #4
  }
 800f438:	4618      	mov	r0, r3
 800f43a:	370c      	adds	r7, #12
 800f43c:	46bd      	mov	sp, r7
 800f43e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f442:	4770      	bx	lr

0800f444 <_ZNK6tflite12RuntimeShape8DimsDataEv>:
  inline const int32* DimsData() const {
 800f444:	b480      	push	{r7}
 800f446:	b083      	sub	sp, #12
 800f448:	af00      	add	r7, sp, #0
 800f44a:	6078      	str	r0, [r7, #4]
    return size_ > kMaxSmallSize ? dims_pointer_ : dims_;
 800f44c:	687b      	ldr	r3, [r7, #4]
 800f44e:	681b      	ldr	r3, [r3, #0]
 800f450:	2b05      	cmp	r3, #5
 800f452:	dd02      	ble.n	800f45a <_ZNK6tflite12RuntimeShape8DimsDataEv+0x16>
 800f454:	687b      	ldr	r3, [r7, #4]
 800f456:	685b      	ldr	r3, [r3, #4]
 800f458:	e001      	b.n	800f45e <_ZNK6tflite12RuntimeShape8DimsDataEv+0x1a>
 800f45a:	687b      	ldr	r3, [r7, #4]
 800f45c:	3304      	adds	r3, #4
  }
 800f45e:	4618      	mov	r0, r3
 800f460:	370c      	adds	r7, #12
 800f462:	46bd      	mov	sp, r7
 800f464:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f468:	4770      	bx	lr

0800f46a <_ZN6tflite12RuntimeShape6ResizeEi>:
  // The caller must ensure that the shape is no bigger than 5-D.
  inline const int32* DimsDataUpTo5D() const { return dims_; }

  inline void Resize(int dimensions_count) {
 800f46a:	b580      	push	{r7, lr}
 800f46c:	b082      	sub	sp, #8
 800f46e:	af00      	add	r7, sp, #0
 800f470:	6078      	str	r0, [r7, #4]
 800f472:	6039      	str	r1, [r7, #0]
    if (size_ > kMaxSmallSize) {
 800f474:	687b      	ldr	r3, [r7, #4]
 800f476:	681b      	ldr	r3, [r3, #0]
 800f478:	2b05      	cmp	r3, #5
 800f47a:	dd08      	ble.n	800f48e <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      delete[] dims_pointer_;
 800f47c:	687b      	ldr	r3, [r7, #4]
 800f47e:	685b      	ldr	r3, [r3, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d004      	beq.n	800f48e <_ZN6tflite12RuntimeShape6ResizeEi+0x24>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	685b      	ldr	r3, [r3, #4]
 800f488:	4618      	mov	r0, r3
 800f48a:	f008 fcc9 	bl	8017e20 <_ZdaPv>
#endif  // TF_LITE_STATIC_MEMORY
    }
    size_ = dimensions_count;
 800f48e:	687b      	ldr	r3, [r7, #4]
 800f490:	683a      	ldr	r2, [r7, #0]
 800f492:	601a      	str	r2, [r3, #0]
    if (dimensions_count > kMaxSmallSize) {
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	2b05      	cmp	r3, #5
 800f498:	dd0f      	ble.n	800f4ba <_ZN6tflite12RuntimeShape6ResizeEi+0x50>
#ifdef TF_LITE_STATIC_MEMORY
      TFLITE_CHECK(false && "No shape resizing supported on this platform");
#else   // TF_LITE_STATIC_MEMORY
      dims_pointer_ = new int32[dimensions_count];
 800f49a:	683b      	ldr	r3, [r7, #0]
 800f49c:	f06f 4260 	mvn.w	r2, #3758096384	; 0xe0000000
 800f4a0:	4293      	cmp	r3, r2
 800f4a2:	d201      	bcs.n	800f4a8 <_ZN6tflite12RuntimeShape6ResizeEi+0x3e>
 800f4a4:	009b      	lsls	r3, r3, #2
 800f4a6:	e001      	b.n	800f4ac <_ZN6tflite12RuntimeShape6ResizeEi+0x42>
 800f4a8:	f04f 33ff 	mov.w	r3, #4294967295
 800f4ac:	4618      	mov	r0, r3
 800f4ae:	f008 fcd9 	bl	8017e64 <_Znaj>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	461a      	mov	r2, r3
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	605a      	str	r2, [r3, #4]
#endif  // TF_LITE_STATIC_MEMORY
    }
  }
 800f4ba:	bf00      	nop
 800f4bc:	3708      	adds	r7, #8
 800f4be:	46bd      	mov	sp, r7
 800f4c0:	bd80      	pop	{r7, pc}

0800f4c2 <_ZN6tflite12RuntimeShape11ReplaceWithEiPKl>:

  inline void ReplaceWith(int dimensions_count, const int32* dims_data) {
 800f4c2:	b580      	push	{r7, lr}
 800f4c4:	b086      	sub	sp, #24
 800f4c6:	af00      	add	r7, sp, #0
 800f4c8:	60f8      	str	r0, [r7, #12]
 800f4ca:	60b9      	str	r1, [r7, #8]
 800f4cc:	607a      	str	r2, [r7, #4]
    Resize(dimensions_count);
 800f4ce:	68b9      	ldr	r1, [r7, #8]
 800f4d0:	68f8      	ldr	r0, [r7, #12]
 800f4d2:	f7ff ffca 	bl	800f46a <_ZN6tflite12RuntimeShape6ResizeEi>
    int32* dst_dims = DimsData();
 800f4d6:	68f8      	ldr	r0, [r7, #12]
 800f4d8:	f7ff ffa1 	bl	800f41e <_ZN6tflite12RuntimeShape8DimsDataEv>
 800f4dc:	6178      	str	r0, [r7, #20]
    std::memcpy(dst_dims, dims_data, dimensions_count * sizeof(int32));
 800f4de:	68bb      	ldr	r3, [r7, #8]
 800f4e0:	009b      	lsls	r3, r3, #2
 800f4e2:	461a      	mov	r2, r3
 800f4e4:	6879      	ldr	r1, [r7, #4]
 800f4e6:	6978      	ldr	r0, [r7, #20]
 800f4e8:	f00b fe76 	bl	801b1d8 <memcpy>
  }
 800f4ec:	bf00      	nop
 800f4ee:	3718      	adds	r7, #24
 800f4f0:	46bd      	mov	sp, r7
 800f4f2:	bd80      	pop	{r7, pc}

0800f4f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>:
    BuildFrom<const std::initializer_list<int>>(init_list);
  }

  // Returns the total count of elements, that is the size when flattened into a
  // vector.
  inline int FlatSize() const {
 800f4f4:	b580      	push	{r7, lr}
 800f4f6:	b086      	sub	sp, #24
 800f4f8:	af00      	add	r7, sp, #0
 800f4fa:	6078      	str	r0, [r7, #4]
    int buffer_size = 1;
 800f4fc:	2301      	movs	r3, #1
 800f4fe:	617b      	str	r3, [r7, #20]
    const int* dims_data = reinterpret_cast<const int*>(DimsData());
 800f500:	6878      	ldr	r0, [r7, #4]
 800f502:	f7ff ff9f 	bl	800f444 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f506:	60f8      	str	r0, [r7, #12]
    for (int i = 0; i < size_; i++) {
 800f508:	2300      	movs	r3, #0
 800f50a:	613b      	str	r3, [r7, #16]
 800f50c:	687b      	ldr	r3, [r7, #4]
 800f50e:	681b      	ldr	r3, [r3, #0]
 800f510:	693a      	ldr	r2, [r7, #16]
 800f512:	429a      	cmp	r2, r3
 800f514:	da0c      	bge.n	800f530 <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x3c>
      buffer_size *= dims_data[i];
 800f516:	693b      	ldr	r3, [r7, #16]
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	68fa      	ldr	r2, [r7, #12]
 800f51c:	4413      	add	r3, r2
 800f51e:	681a      	ldr	r2, [r3, #0]
 800f520:	697b      	ldr	r3, [r7, #20]
 800f522:	fb02 f303 	mul.w	r3, r2, r3
 800f526:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size_; i++) {
 800f528:	693b      	ldr	r3, [r7, #16]
 800f52a:	3301      	adds	r3, #1
 800f52c:	613b      	str	r3, [r7, #16]
 800f52e:	e7ed      	b.n	800f50c <_ZNK6tflite12RuntimeShape8FlatSizeEv+0x18>
    }
    return buffer_size;
 800f530:	697b      	ldr	r3, [r7, #20]
  }
 800f532:	4618      	mov	r0, r3
 800f534:	3718      	adds	r7, #24
 800f536:	46bd      	mov	sp, r7
 800f538:	bd80      	pop	{r7, pc}

0800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>:

inline RuntimeShape GetTensorShape(const TfLiteTensor* tensor) {
 800f53a:	b580      	push	{r7, lr}
 800f53c:	b086      	sub	sp, #24
 800f53e:	af00      	add	r7, sp, #0
 800f540:	6078      	str	r0, [r7, #4]
 800f542:	6039      	str	r1, [r7, #0]
  if (tensor == nullptr) {
 800f544:	683b      	ldr	r3, [r7, #0]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d103      	bne.n	800f552 <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x18>
    return RuntimeShape();
 800f54a:	6878      	ldr	r0, [r7, #4]
 800f54c:	f7ff feff 	bl	800f34e <_ZN6tflite12RuntimeShapeC1Ev>
 800f550:	e00d      	b.n	800f56e <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor+0x34>
  }

  TfLiteIntArray* dims = tensor->dims;
 800f552:	683b      	ldr	r3, [r7, #0]
 800f554:	689b      	ldr	r3, [r3, #8]
 800f556:	617b      	str	r3, [r7, #20]
  const int dims_size = dims->size;
 800f558:	697b      	ldr	r3, [r7, #20]
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	613b      	str	r3, [r7, #16]
  const int32_t* dims_data = reinterpret_cast<const int32_t*>(dims->data);
 800f55e:	697b      	ldr	r3, [r7, #20]
 800f560:	3304      	adds	r3, #4
 800f562:	60fb      	str	r3, [r7, #12]
  return RuntimeShape(dims_size, dims_data);
 800f564:	68fa      	ldr	r2, [r7, #12]
 800f566:	6939      	ldr	r1, [r7, #16]
 800f568:	6878      	ldr	r0, [r7, #4]
 800f56a:	f7ff fefe 	bl	800f36a <_ZN6tflite12RuntimeShapeC1EiPKl>
}
 800f56e:	6878      	ldr	r0, [r7, #4]
 800f570:	3718      	adds	r7, #24
 800f572:	46bd      	mov	sp, r7
 800f574:	bd80      	pop	{r7, pc}

0800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800f576:	b480      	push	{r7}
 800f578:	b083      	sub	sp, #12
 800f57a:	af00      	add	r7, sp, #0
 800f57c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f57e:	687b      	ldr	r3, [r7, #4]
 800f580:	2b00      	cmp	r3, #0
 800f582:	d002      	beq.n	800f58a <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x14>
 800f584:	687b      	ldr	r3, [r7, #4]
 800f586:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800f588:	e000      	b.n	800f58c <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f58a:	2300      	movs	r3, #0
}
 800f58c:	4618      	mov	r0, r3
 800f58e:	370c      	adds	r7, #12
 800f590:	46bd      	mov	sp, r7
 800f592:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f596:	4770      	bx	lr

0800f598 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800f598:	b480      	push	{r7}
 800f59a:	b083      	sub	sp, #12
 800f59c:	af00      	add	r7, sp, #0
 800f59e:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	2b00      	cmp	r3, #0
 800f5a4:	d002      	beq.n	800f5ac <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x14>
 800f5a6:	687b      	ldr	r3, [r7, #4]
 800f5a8:	685b      	ldr	r3, [r3, #4]
 800f5aa:	e000      	b.n	800f5ae <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor+0x16>
 800f5ac:	2300      	movs	r3, #0
}
 800f5ae:	4618      	mov	r0, r3
 800f5b0:	370c      	adds	r7, #12
 800f5b2:	46bd      	mov	sp, r7
 800f5b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5b8:	4770      	bx	lr

0800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 800f5ba:	b480      	push	{r7}
 800f5bc:	b083      	sub	sp, #12
 800f5be:	af00      	add	r7, sp, #0
 800f5c0:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f5c2:	687b      	ldr	r3, [r7, #4]
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d002      	beq.n	800f5ce <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x14>
 800f5c8:	687b      	ldr	r3, [r7, #4]
 800f5ca:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 800f5cc:	e000      	b.n	800f5d0 <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 800f5ce:	2300      	movs	r3, #0
}
 800f5d0:	4618      	mov	r0, r3
 800f5d2:	370c      	adds	r7, #12
 800f5d4:	46bd      	mov	sp, r7
 800f5d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5da:	4770      	bx	lr

0800f5dc <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 800f5dc:	b480      	push	{r7}
 800f5de:	b083      	sub	sp, #12
 800f5e0:	af00      	add	r7, sp, #0
 800f5e2:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 800f5e4:	687b      	ldr	r3, [r7, #4]
 800f5e6:	2b00      	cmp	r3, #0
 800f5e8:	d002      	beq.n	800f5f0 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x14>
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	685b      	ldr	r3, [r3, #4]
 800f5ee:	e000      	b.n	800f5f2 <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor+0x16>
 800f5f0:	2300      	movs	r3, #0
}
 800f5f2:	4618      	mov	r0, r3
 800f5f4:	370c      	adds	r7, #12
 800f5f6:	46bd      	mov	sp, r7
 800f5f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5fc:	4770      	bx	lr

0800f5fe <_ZNSt14numeric_limitsIlE3minEv>:
      min() _GLIBCXX_USE_NOEXCEPT { return -__LONG_MAX__ - 1; }
 800f5fe:	b480      	push	{r7}
 800f600:	af00      	add	r7, sp, #0
 800f602:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800f606:	4618      	mov	r0, r3
 800f608:	46bd      	mov	sp, r7
 800f60a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f60e:	4770      	bx	lr

0800f610 <_ZNSt14numeric_limitsIfE3maxEv>:

      static _GLIBCXX_CONSTEXPR float
      min() _GLIBCXX_USE_NOEXCEPT { return __FLT_MIN__; }

      static _GLIBCXX_CONSTEXPR float
      max() _GLIBCXX_USE_NOEXCEPT { return __FLT_MAX__; }
 800f610:	b480      	push	{r7}
 800f612:	af00      	add	r7, sp, #0
 800f614:	4b04      	ldr	r3, [pc, #16]	; (800f628 <_ZNSt14numeric_limitsIfE3maxEv+0x18>)
 800f616:	ee07 3a90 	vmov	s15, r3
 800f61a:	eeb0 0a67 	vmov.f32	s0, s15
 800f61e:	46bd      	mov	sp, r7
 800f620:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f624:	4770      	bx	lr
 800f626:	bf00      	nop
 800f628:	7f7fffff 	.word	0x7f7fffff

0800f62c <_ZNSt14numeric_limitsIfE6lowestEv>:

#if __cplusplus >= 201103L
      static constexpr float
      lowest() noexcept { return -__FLT_MAX__; }
 800f62c:	b480      	push	{r7}
 800f62e:	af00      	add	r7, sp, #0
 800f630:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 800f634:	ee07 3a90 	vmov	s15, r3
 800f638:	eeb0 0a67 	vmov.f32	s0, s15
 800f63c:	46bd      	mov	sp, r7
 800f63e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f642:	4770      	bx	lr

0800f644 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>:

// This function implements the same computation as the ARMv7 NEON VQRDMULH
// instruction.
template <>
inline std::int32_t SaturatingRoundingDoublingHighMul(std::int32_t a,
                                                      std::int32_t b) {
 800f644:	b5b0      	push	{r4, r5, r7, lr}
 800f646:	b08c      	sub	sp, #48	; 0x30
 800f648:	af00      	add	r7, sp, #0
 800f64a:	6078      	str	r0, [r7, #4]
 800f64c:	6039      	str	r1, [r7, #0]
  bool overflow = a == b && a == std::numeric_limits<std::int32_t>::min();
 800f64e:	687a      	ldr	r2, [r7, #4]
 800f650:	683b      	ldr	r3, [r7, #0]
 800f652:	429a      	cmp	r2, r3
 800f654:	d107      	bne.n	800f666 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800f656:	f7ff ffd2 	bl	800f5fe <_ZNSt14numeric_limitsIlE3minEv>
 800f65a:	4602      	mov	r2, r0
 800f65c:	687b      	ldr	r3, [r7, #4]
 800f65e:	4293      	cmp	r3, r2
 800f660:	d101      	bne.n	800f666 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x22>
 800f662:	2301      	movs	r3, #1
 800f664:	e000      	b.n	800f668 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x24>
 800f666:	2300      	movs	r3, #0
 800f668:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  std::int64_t a_64(a);
 800f66c:	687b      	ldr	r3, [r7, #4]
 800f66e:	461a      	mov	r2, r3
 800f670:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f674:	e9c7 2308 	strd	r2, r3, [r7, #32]
  std::int64_t b_64(b);
 800f678:	683b      	ldr	r3, [r7, #0]
 800f67a:	461a      	mov	r2, r3
 800f67c:	ea4f 73e2 	mov.w	r3, r2, asr #31
 800f680:	e9c7 2306 	strd	r2, r3, [r7, #24]
  std::int64_t ab_64 = a_64 * b_64;
 800f684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f686:	69ba      	ldr	r2, [r7, #24]
 800f688:	fb02 f203 	mul.w	r2, r2, r3
 800f68c:	69fb      	ldr	r3, [r7, #28]
 800f68e:	6a39      	ldr	r1, [r7, #32]
 800f690:	fb01 f303 	mul.w	r3, r1, r3
 800f694:	18d1      	adds	r1, r2, r3
 800f696:	6a3a      	ldr	r2, [r7, #32]
 800f698:	69bb      	ldr	r3, [r7, #24]
 800f69a:	fba2 2303 	umull	r2, r3, r2, r3
 800f69e:	4419      	add	r1, r3
 800f6a0:	460b      	mov	r3, r1
 800f6a2:	e9c7 2304 	strd	r2, r3, [r7, #16]
 800f6a6:	e9c7 2304 	strd	r2, r3, [r7, #16]
  std::int32_t nudge = ab_64 >= 0 ? (1 << 30) : (1 - (1 << 30));
 800f6aa:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f6ae:	2a00      	cmp	r2, #0
 800f6b0:	f173 0300 	sbcs.w	r3, r3, #0
 800f6b4:	db02      	blt.n	800f6bc <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x78>
 800f6b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f6ba:	e000      	b.n	800f6be <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0x7a>
 800f6bc:	4b18      	ldr	r3, [pc, #96]	; (800f720 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xdc>)
 800f6be:	60fb      	str	r3, [r7, #12]
  std::int32_t ab_x2_high32 =
      static_cast<std::int32_t>((ab_64 + nudge) / (1ll << 31));
 800f6c0:	68fb      	ldr	r3, [r7, #12]
 800f6c2:	4618      	mov	r0, r3
 800f6c4:	ea4f 71e0 	mov.w	r1, r0, asr #31
 800f6c8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800f6cc:	1884      	adds	r4, r0, r2
 800f6ce:	eb41 0503 	adc.w	r5, r1, r3
 800f6d2:	4622      	mov	r2, r4
 800f6d4:	462b      	mov	r3, r5
 800f6d6:	2a00      	cmp	r2, #0
 800f6d8:	f173 0100 	sbcs.w	r1, r3, #0
 800f6dc:	da06      	bge.n	800f6ec <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xa8>
 800f6de:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 800f6e2:	f04f 0100 	mov.w	r1, #0
 800f6e6:	1812      	adds	r2, r2, r0
 800f6e8:	eb41 0303 	adc.w	r3, r1, r3
 800f6ec:	f04f 0000 	mov.w	r0, #0
 800f6f0:	f04f 0100 	mov.w	r1, #0
 800f6f4:	0fd0      	lsrs	r0, r2, #31
 800f6f6:	ea40 0043 	orr.w	r0, r0, r3, lsl #1
 800f6fa:	17d9      	asrs	r1, r3, #31
 800f6fc:	4602      	mov	r2, r0
 800f6fe:	460b      	mov	r3, r1
  std::int32_t ab_x2_high32 =
 800f700:	4613      	mov	r3, r2
 800f702:	60bb      	str	r3, [r7, #8]
  return overflow ? std::numeric_limits<std::int32_t>::max() : ab_x2_high32;
 800f704:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800f708:	2b00      	cmp	r3, #0
 800f70a:	d003      	beq.n	800f714 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd0>
 800f70c:	f7fe ff4a 	bl	800e5a4 <_ZNSt14numeric_limitsIlE3maxEv>
 800f710:	4603      	mov	r3, r0
 800f712:	e000      	b.n	800f716 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_+0xd2>
 800f714:	68bb      	ldr	r3, [r7, #8]
}
 800f716:	4618      	mov	r0, r3
 800f718:	3730      	adds	r7, #48	; 0x30
 800f71a:	46bd      	mov	sp, r7
 800f71c:	bdb0      	pop	{r4, r5, r7, pc}
 800f71e:	bf00      	nop
 800f720:	c0000001 	.word	0xc0000001

0800f724 <_ZN6tflite12RuntimeShapeC1Eil>:
  RuntimeShape(int shape_size, int32 value) : size_(0) {
 800f724:	b580      	push	{r7, lr}
 800f726:	b086      	sub	sp, #24
 800f728:	af00      	add	r7, sp, #0
 800f72a:	60f8      	str	r0, [r7, #12]
 800f72c:	60b9      	str	r1, [r7, #8]
 800f72e:	607a      	str	r2, [r7, #4]
 800f730:	68fb      	ldr	r3, [r7, #12]
 800f732:	2200      	movs	r2, #0
 800f734:	601a      	str	r2, [r3, #0]
    Resize(shape_size);
 800f736:	68b9      	ldr	r1, [r7, #8]
 800f738:	68f8      	ldr	r0, [r7, #12]
 800f73a:	f7ff fe96 	bl	800f46a <_ZN6tflite12RuntimeShape6ResizeEi>
    for (int i = 0; i < shape_size; ++i) {
 800f73e:	2300      	movs	r3, #0
 800f740:	617b      	str	r3, [r7, #20]
 800f742:	697a      	ldr	r2, [r7, #20]
 800f744:	68bb      	ldr	r3, [r7, #8]
 800f746:	429a      	cmp	r2, r3
 800f748:	da08      	bge.n	800f75c <_ZN6tflite12RuntimeShapeC1Eil+0x38>
      SetDim(i, value);
 800f74a:	687a      	ldr	r2, [r7, #4]
 800f74c:	6979      	ldr	r1, [r7, #20]
 800f74e:	68f8      	ldr	r0, [r7, #12]
 800f750:	f000 f82d 	bl	800f7ae <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < shape_size; ++i) {
 800f754:	697b      	ldr	r3, [r7, #20]
 800f756:	3301      	adds	r3, #1
 800f758:	617b      	str	r3, [r7, #20]
 800f75a:	e7f2      	b.n	800f742 <_ZN6tflite12RuntimeShapeC1Eil+0x1e>
  }
 800f75c:	68fb      	ldr	r3, [r7, #12]
 800f75e:	4618      	mov	r0, r3
 800f760:	3718      	adds	r7, #24
 800f762:	46bd      	mov	sp, r7
 800f764:	bd80      	pop	{r7, pc}

0800f766 <_ZNK6tflite12RuntimeShapeeqERKS0_>:
  bool operator==(const RuntimeShape& comp) const {
 800f766:	b590      	push	{r4, r7, lr}
 800f768:	b083      	sub	sp, #12
 800f76a:	af00      	add	r7, sp, #0
 800f76c:	6078      	str	r0, [r7, #4]
 800f76e:	6039      	str	r1, [r7, #0]
    return this->size_ == comp.size_ &&
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	681a      	ldr	r2, [r3, #0]
 800f774:	683b      	ldr	r3, [r7, #0]
 800f776:	681b      	ldr	r3, [r3, #0]
 800f778:	429a      	cmp	r2, r3
 800f77a:	d113      	bne.n	800f7a4 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x3e>
           std::memcmp(DimsData(), comp.DimsData(), size_ * sizeof(int32)) == 0;
 800f77c:	6878      	ldr	r0, [r7, #4]
 800f77e:	f7ff fe61 	bl	800f444 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f782:	4604      	mov	r4, r0
 800f784:	6838      	ldr	r0, [r7, #0]
 800f786:	f7ff fe5d 	bl	800f444 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f78a:	4601      	mov	r1, r0
 800f78c:	687b      	ldr	r3, [r7, #4]
 800f78e:	681b      	ldr	r3, [r3, #0]
 800f790:	009b      	lsls	r3, r3, #2
 800f792:	461a      	mov	r2, r3
 800f794:	4620      	mov	r0, r4
 800f796:	f00b fd11 	bl	801b1bc <memcmp>
 800f79a:	4603      	mov	r3, r0
    return this->size_ == comp.size_ &&
 800f79c:	2b00      	cmp	r3, #0
 800f79e:	d101      	bne.n	800f7a4 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x3e>
 800f7a0:	2301      	movs	r3, #1
 800f7a2:	e000      	b.n	800f7a6 <_ZNK6tflite12RuntimeShapeeqERKS0_+0x40>
 800f7a4:	2300      	movs	r3, #0
  }
 800f7a6:	4618      	mov	r0, r3
 800f7a8:	370c      	adds	r7, #12
 800f7aa:	46bd      	mov	sp, r7
 800f7ac:	bd90      	pop	{r4, r7, pc}

0800f7ae <_ZN6tflite12RuntimeShape6SetDimEil>:
  inline void SetDim(int i, int32 val) {
 800f7ae:	b580      	push	{r7, lr}
 800f7b0:	b084      	sub	sp, #16
 800f7b2:	af00      	add	r7, sp, #0
 800f7b4:	60f8      	str	r0, [r7, #12]
 800f7b6:	60b9      	str	r1, [r7, #8]
 800f7b8:	607a      	str	r2, [r7, #4]
    TFLITE_DCHECK_GE(i, 0);
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	2b00      	cmp	r3, #0
 800f7be:	da01      	bge.n	800f7c4 <_ZN6tflite12RuntimeShape6SetDimEil+0x16>
 800f7c0:	f00b fbf6 	bl	801afb0 <abort>
    TFLITE_DCHECK_LT(i, size_);
 800f7c4:	68fb      	ldr	r3, [r7, #12]
 800f7c6:	681b      	ldr	r3, [r3, #0]
 800f7c8:	68ba      	ldr	r2, [r7, #8]
 800f7ca:	429a      	cmp	r2, r3
 800f7cc:	db01      	blt.n	800f7d2 <_ZN6tflite12RuntimeShape6SetDimEil+0x24>
 800f7ce:	f00b fbef 	bl	801afb0 <abort>
    if (size_ > kMaxSmallSize) {
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	681b      	ldr	r3, [r3, #0]
 800f7d6:	2b05      	cmp	r3, #5
 800f7d8:	dd07      	ble.n	800f7ea <_ZN6tflite12RuntimeShape6SetDimEil+0x3c>
      dims_pointer_[i] = val;
 800f7da:	68fb      	ldr	r3, [r7, #12]
 800f7dc:	685a      	ldr	r2, [r3, #4]
 800f7de:	68bb      	ldr	r3, [r7, #8]
 800f7e0:	009b      	lsls	r3, r3, #2
 800f7e2:	4413      	add	r3, r2
 800f7e4:	687a      	ldr	r2, [r7, #4]
 800f7e6:	601a      	str	r2, [r3, #0]
  }
 800f7e8:	e005      	b.n	800f7f6 <_ZN6tflite12RuntimeShape6SetDimEil+0x48>
      dims_[i] = val;
 800f7ea:	68fa      	ldr	r2, [r7, #12]
 800f7ec:	68bb      	ldr	r3, [r7, #8]
 800f7ee:	009b      	lsls	r3, r3, #2
 800f7f0:	4413      	add	r3, r2
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	605a      	str	r2, [r3, #4]
  }
 800f7f6:	bf00      	nop
 800f7f8:	3710      	adds	r7, #16
 800f7fa:	46bd      	mov	sp, r7
 800f7fc:	bd80      	pop	{r7, pc}

0800f7fe <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>:
  inline const int32* DimsDataUpTo5D() const { return dims_; }
 800f7fe:	b480      	push	{r7}
 800f800:	b083      	sub	sp, #12
 800f802:	af00      	add	r7, sp, #0
 800f804:	6078      	str	r0, [r7, #4]
 800f806:	687b      	ldr	r3, [r7, #4]
 800f808:	3304      	adds	r3, #4
 800f80a:	4618      	mov	r0, r3
 800f80c:	370c      	adds	r7, #12
 800f80e:	46bd      	mov	sp, r7
 800f810:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f814:	4770      	bx	lr

0800f816 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>:
  inline static RuntimeShape ExtendedShape(int new_shape_size,
 800f816:	b580      	push	{r7, lr}
 800f818:	b084      	sub	sp, #16
 800f81a:	af00      	add	r7, sp, #0
 800f81c:	60f8      	str	r0, [r7, #12]
 800f81e:	60b9      	str	r1, [r7, #8]
 800f820:	607a      	str	r2, [r7, #4]
    return RuntimeShape(new_shape_size, shape, 1);
 800f822:	2301      	movs	r3, #1
 800f824:	687a      	ldr	r2, [r7, #4]
 800f826:	68b9      	ldr	r1, [r7, #8]
 800f828:	68f8      	ldr	r0, [r7, #12]
 800f82a:	f000 f804 	bl	800f836 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>
  }
 800f82e:	68f8      	ldr	r0, [r7, #12]
 800f830:	3710      	adds	r7, #16
 800f832:	46bd      	mov	sp, r7
 800f834:	bd80      	pop	{r7, pc}

0800f836 <_ZN6tflite12RuntimeShapeC1EiRKS0_i>:

 private:
  // For use only by ExtendedShape(), written to guarantee (return-value) copy
  // elision in C++17.
  // This creates a shape padded to the desired size with the specified value.
  RuntimeShape(int new_shape_size, const RuntimeShape& shape, int pad_value)
 800f836:	b5b0      	push	{r4, r5, r7, lr}
 800f838:	b086      	sub	sp, #24
 800f83a:	af00      	add	r7, sp, #0
 800f83c:	60f8      	str	r0, [r7, #12]
 800f83e:	60b9      	str	r1, [r7, #8]
 800f840:	607a      	str	r2, [r7, #4]
 800f842:	603b      	str	r3, [r7, #0]
      : size_(0) {
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	2200      	movs	r2, #0
 800f848:	601a      	str	r2, [r3, #0]
    // If the following check fails, it is likely because a 4D-only kernel is
    // being used with an array of larger dimension count.
    TFLITE_CHECK_GE(new_shape_size, shape.DimensionsCount());
 800f84a:	6878      	ldr	r0, [r7, #4]
 800f84c:	f7ff fdb6 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f850:	4602      	mov	r2, r0
 800f852:	68bb      	ldr	r3, [r7, #8]
 800f854:	4293      	cmp	r3, r2
 800f856:	da01      	bge.n	800f85c <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x26>
 800f858:	f00b fbaa 	bl	801afb0 <abort>
    Resize(new_shape_size);
 800f85c:	68b9      	ldr	r1, [r7, #8]
 800f85e:	68f8      	ldr	r0, [r7, #12]
 800f860:	f7ff fe03 	bl	800f46a <_ZN6tflite12RuntimeShape6ResizeEi>
    const int size_increase = new_shape_size - shape.DimensionsCount();
 800f864:	6878      	ldr	r0, [r7, #4]
 800f866:	f7ff fda9 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f86a:	4602      	mov	r2, r0
 800f86c:	68bb      	ldr	r3, [r7, #8]
 800f86e:	1a9b      	subs	r3, r3, r2
 800f870:	613b      	str	r3, [r7, #16]
    for (int i = 0; i < size_increase; ++i) {
 800f872:	2300      	movs	r3, #0
 800f874:	617b      	str	r3, [r7, #20]
 800f876:	697a      	ldr	r2, [r7, #20]
 800f878:	693b      	ldr	r3, [r7, #16]
 800f87a:	429a      	cmp	r2, r3
 800f87c:	da08      	bge.n	800f890 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x5a>
      SetDim(i, pad_value);
 800f87e:	683a      	ldr	r2, [r7, #0]
 800f880:	6979      	ldr	r1, [r7, #20]
 800f882:	68f8      	ldr	r0, [r7, #12]
 800f884:	f7ff ff93 	bl	800f7ae <_ZN6tflite12RuntimeShape6SetDimEil>
    for (int i = 0; i < size_increase; ++i) {
 800f888:	697b      	ldr	r3, [r7, #20]
 800f88a:	3301      	adds	r3, #1
 800f88c:	617b      	str	r3, [r7, #20]
 800f88e:	e7f2      	b.n	800f876 <_ZN6tflite12RuntimeShapeC1EiRKS0_i+0x40>
    }
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800f890:	68f8      	ldr	r0, [r7, #12]
 800f892:	f7ff fdc4 	bl	800f41e <_ZN6tflite12RuntimeShape8DimsDataEv>
 800f896:	4602      	mov	r2, r0
 800f898:	693b      	ldr	r3, [r7, #16]
 800f89a:	009b      	lsls	r3, r3, #2
 800f89c:	18d4      	adds	r4, r2, r3
 800f89e:	6878      	ldr	r0, [r7, #4]
 800f8a0:	f7ff fdd0 	bl	800f444 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 800f8a4:	4605      	mov	r5, r0
                sizeof(int32) * shape.DimensionsCount());
 800f8a6:	6878      	ldr	r0, [r7, #4]
 800f8a8:	f7ff fd88 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f8ac:	4603      	mov	r3, r0
 800f8ae:	009b      	lsls	r3, r3, #2
    std::memcpy(DimsData() + size_increase, shape.DimsData(),
 800f8b0:	461a      	mov	r2, r3
 800f8b2:	4629      	mov	r1, r5
 800f8b4:	4620      	mov	r0, r4
 800f8b6:	f00b fc8f 	bl	801b1d8 <memcpy>
  }
 800f8ba:	68fb      	ldr	r3, [r7, #12]
 800f8bc:	4618      	mov	r0, r3
 800f8be:	3718      	adds	r7, #24
 800f8c0:	46bd      	mov	sp, r7
 800f8c2:	bdb0      	pop	{r4, r5, r7, pc}

0800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>:
    }
  }
  return offset;
}

inline int Offset(const RuntimeShape& shape, int i0, int i1, int i2, int i3) {
 800f8c4:	b580      	push	{r7, lr}
 800f8c6:	b086      	sub	sp, #24
 800f8c8:	af00      	add	r7, sp, #0
 800f8ca:	60f8      	str	r0, [r7, #12]
 800f8cc:	60b9      	str	r1, [r7, #8]
 800f8ce:	607a      	str	r2, [r7, #4]
 800f8d0:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape.DimensionsCount(), 4);
 800f8d2:	68f8      	ldr	r0, [r7, #12]
 800f8d4:	f7ff fd72 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 800f8d8:	4603      	mov	r3, r0
 800f8da:	2b04      	cmp	r3, #4
 800f8dc:	d001      	beq.n	800f8e2 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x1e>
 800f8de:	f00b fb67 	bl	801afb0 <abort>
  const int* dims_data = reinterpret_cast<const int*>(shape.DimsDataUpTo5D());
 800f8e2:	68f8      	ldr	r0, [r7, #12]
 800f8e4:	f7ff ff8b 	bl	800f7fe <_ZNK6tflite12RuntimeShape14DimsDataUpTo5DEv>
 800f8e8:	6178      	str	r0, [r7, #20]
  TFLITE_DCHECK(i0 >= 0 && i0 < dims_data[0]);
 800f8ea:	68bb      	ldr	r3, [r7, #8]
 800f8ec:	2b00      	cmp	r3, #0
 800f8ee:	db04      	blt.n	800f8fa <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x36>
 800f8f0:	697b      	ldr	r3, [r7, #20]
 800f8f2:	681b      	ldr	r3, [r3, #0]
 800f8f4:	68ba      	ldr	r2, [r7, #8]
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	db01      	blt.n	800f8fe <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x3a>
 800f8fa:	f00b fb59 	bl	801afb0 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < dims_data[1]);
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	2b00      	cmp	r3, #0
 800f902:	db05      	blt.n	800f910 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x4c>
 800f904:	697b      	ldr	r3, [r7, #20]
 800f906:	3304      	adds	r3, #4
 800f908:	681b      	ldr	r3, [r3, #0]
 800f90a:	687a      	ldr	r2, [r7, #4]
 800f90c:	429a      	cmp	r2, r3
 800f90e:	db01      	blt.n	800f914 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x50>
 800f910:	f00b fb4e 	bl	801afb0 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < dims_data[2]);
 800f914:	683b      	ldr	r3, [r7, #0]
 800f916:	2b00      	cmp	r3, #0
 800f918:	db05      	blt.n	800f926 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x62>
 800f91a:	697b      	ldr	r3, [r7, #20]
 800f91c:	3308      	adds	r3, #8
 800f91e:	681b      	ldr	r3, [r3, #0]
 800f920:	683a      	ldr	r2, [r7, #0]
 800f922:	429a      	cmp	r2, r3
 800f924:	db01      	blt.n	800f92a <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x66>
 800f926:	f00b fb43 	bl	801afb0 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < dims_data[3]);
 800f92a:	6a3b      	ldr	r3, [r7, #32]
 800f92c:	2b00      	cmp	r3, #0
 800f92e:	db05      	blt.n	800f93c <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x78>
 800f930:	697b      	ldr	r3, [r7, #20]
 800f932:	330c      	adds	r3, #12
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6a3a      	ldr	r2, [r7, #32]
 800f938:	429a      	cmp	r2, r3
 800f93a:	db01      	blt.n	800f940 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii+0x7c>
 800f93c:	f00b fb38 	bl	801afb0 <abort>
  return ((i0 * dims_data[1] + i1) * dims_data[2] + i2) * dims_data[3] + i3;
 800f940:	697b      	ldr	r3, [r7, #20]
 800f942:	3304      	adds	r3, #4
 800f944:	681b      	ldr	r3, [r3, #0]
 800f946:	68ba      	ldr	r2, [r7, #8]
 800f948:	fb02 f203 	mul.w	r2, r2, r3
 800f94c:	687b      	ldr	r3, [r7, #4]
 800f94e:	4413      	add	r3, r2
 800f950:	697a      	ldr	r2, [r7, #20]
 800f952:	3208      	adds	r2, #8
 800f954:	6812      	ldr	r2, [r2, #0]
 800f956:	fb02 f203 	mul.w	r2, r2, r3
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	4413      	add	r3, r2
 800f95e:	697a      	ldr	r2, [r7, #20]
 800f960:	320c      	adds	r2, #12
 800f962:	6812      	ldr	r2, [r2, #0]
 800f964:	fb02 f203 	mul.w	r2, r2, r3
 800f968:	6a3b      	ldr	r3, [r7, #32]
 800f96a:	4413      	add	r3, r2
}
 800f96c:	4618      	mov	r0, r3
 800f96e:	3718      	adds	r7, #24
 800f970:	46bd      	mov	sp, r7
 800f972:	bd80      	pop	{r7, pc}

0800f974 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>:
  return size_1;
}

inline int MatchingElementsSize(const RuntimeShape& shape,
                                const RuntimeShape& check_shape_0,
                                const RuntimeShape& check_shape_1) {
 800f974:	b580      	push	{r7, lr}
 800f976:	b088      	sub	sp, #32
 800f978:	af00      	add	r7, sp, #0
 800f97a:	60f8      	str	r0, [r7, #12]
 800f97c:	60b9      	str	r1, [r7, #8]
 800f97e:	607a      	str	r2, [r7, #4]
  const int size_1 = shape.FlatSize();
 800f980:	68f8      	ldr	r0, [r7, #12]
 800f982:	f7ff fdb7 	bl	800f4f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f986:	61f8      	str	r0, [r7, #28]
  const int size_2 = check_shape_0.FlatSize();
 800f988:	68b8      	ldr	r0, [r7, #8]
 800f98a:	f7ff fdb3 	bl	800f4f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f98e:	61b8      	str	r0, [r7, #24]
  const int size_3 = check_shape_1.FlatSize();
 800f990:	6878      	ldr	r0, [r7, #4]
 800f992:	f7ff fdaf 	bl	800f4f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 800f996:	6178      	str	r0, [r7, #20]
  TFLITE_CHECK_EQ(size_1, size_2);
 800f998:	69fa      	ldr	r2, [r7, #28]
 800f99a:	69bb      	ldr	r3, [r7, #24]
 800f99c:	429a      	cmp	r2, r3
 800f99e:	d001      	beq.n	800f9a4 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x30>
 800f9a0:	f00b fb06 	bl	801afb0 <abort>
  TFLITE_CHECK_EQ(size_2, size_3);
 800f9a4:	69ba      	ldr	r2, [r7, #24]
 800f9a6:	697b      	ldr	r3, [r7, #20]
 800f9a8:	429a      	cmp	r2, r3
 800f9aa:	d001      	beq.n	800f9b0 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_+0x3c>
 800f9ac:	f00b fb00 	bl	801afb0 <abort>
  return size_1;
 800f9b0:	69fb      	ldr	r3, [r7, #28]
}
 800f9b2:	4618      	mov	r0, r3
 800f9b4:	3720      	adds	r7, #32
 800f9b6:	46bd      	mov	sp, r7
 800f9b8:	bd80      	pop	{r7, pc}

0800f9ba <_ZN6tflite28ActivationFunctionWithMinMaxEfff>:
      break;
  }
}

inline float ActivationFunctionWithMinMax(float x, float output_activation_min,
                                          float output_activation_max) {
 800f9ba:	b580      	push	{r7, lr}
 800f9bc:	b084      	sub	sp, #16
 800f9be:	af00      	add	r7, sp, #0
 800f9c0:	ed87 0a03 	vstr	s0, [r7, #12]
 800f9c4:	edc7 0a02 	vstr	s1, [r7, #8]
 800f9c8:	ed87 1a01 	vstr	s2, [r7, #4]
  return std::min(std::max(x, output_activation_min), output_activation_max);
 800f9cc:	f107 0208 	add.w	r2, r7, #8
 800f9d0:	f107 030c 	add.w	r3, r7, #12
 800f9d4:	4611      	mov	r1, r2
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	f7fe ffb6 	bl	800e948 <_ZSt3maxIfERKT_S2_S2_>
 800f9dc:	4602      	mov	r2, r0
 800f9de:	1d3b      	adds	r3, r7, #4
 800f9e0:	4619      	mov	r1, r3
 800f9e2:	4610      	mov	r0, r2
 800f9e4:	f7fe ff97 	bl	800e916 <_ZSt3minIfERKT_S2_S2_>
 800f9e8:	4603      	mov	r3, r0
 800f9ea:	681b      	ldr	r3, [r3, #0]
 800f9ec:	ee07 3a90 	vmov	s15, r3
}
 800f9f0:	eeb0 0a67 	vmov.f32	s0, s15
 800f9f4:	3710      	adds	r7, #16
 800f9f6:	46bd      	mov	sp, r7
 800f9f8:	bd80      	pop	{r7, pc}

0800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>:
  }
#endif
}

inline int32 MultiplyByQuantizedMultiplierSmallerThanOneExp(
    int32 x, int32 quantized_multiplier, int left_shift) {
 800f9fa:	b580      	push	{r7, lr}
 800f9fc:	b084      	sub	sp, #16
 800f9fe:	af00      	add	r7, sp, #0
 800fa00:	60f8      	str	r0, [r7, #12]
 800fa02:	60b9      	str	r1, [r7, #8]
 800fa04:	607a      	str	r2, [r7, #4]
  using gemmlowp::RoundingDivideByPOT;
  using gemmlowp::SaturatingRoundingDoublingHighMul;
  return RoundingDivideByPOT(
 800fa06:	68b9      	ldr	r1, [r7, #8]
 800fa08:	68f8      	ldr	r0, [r7, #12]
 800fa0a:	f7ff fe1b 	bl	800f644 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 800fa0e:	4602      	mov	r2, r0
 800fa10:	687b      	ldr	r3, [r7, #4]
 800fa12:	425b      	negs	r3, r3
 800fa14:	4619      	mov	r1, r3
 800fa16:	4610      	mov	r0, r2
 800fa18:	f001 fa06 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 800fa1c:	4603      	mov	r3, r0
      SaturatingRoundingDoublingHighMul(x, quantized_multiplier), -left_shift);
}
 800fa1e:	4618      	mov	r0, r3
 800fa20:	3710      	adds	r7, #16
 800fa22:	46bd      	mov	sp, r7
 800fa24:	bd80      	pop	{r7, pc}

0800fa26 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>:
// DO NOT USE THIS FUNCTION FOR NEW FUNCTIONALITY BEYOND IMPLEMENTING
// BROADCASTING.
//
// Same as Offset(), except takes as NdArrayDesc<N> instead of Dims<N>.
inline int SubscriptToIndex(const NdArrayDesc<4>& desc, int i0, int i1, int i2,
                            int i3) {
 800fa26:	b580      	push	{r7, lr}
 800fa28:	b084      	sub	sp, #16
 800fa2a:	af00      	add	r7, sp, #0
 800fa2c:	60f8      	str	r0, [r7, #12]
 800fa2e:	60b9      	str	r1, [r7, #8]
 800fa30:	607a      	str	r2, [r7, #4]
 800fa32:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(i0 >= 0 && i0 < desc.extents[0]);
 800fa34:	68bb      	ldr	r3, [r7, #8]
 800fa36:	2b00      	cmp	r3, #0
 800fa38:	db04      	blt.n	800fa44 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x1e>
 800fa3a:	68fb      	ldr	r3, [r7, #12]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	68ba      	ldr	r2, [r7, #8]
 800fa40:	429a      	cmp	r2, r3
 800fa42:	db01      	blt.n	800fa48 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x22>
 800fa44:	f00b fab4 	bl	801afb0 <abort>
  TFLITE_DCHECK(i1 >= 0 && i1 < desc.extents[1]);
 800fa48:	687b      	ldr	r3, [r7, #4]
 800fa4a:	2b00      	cmp	r3, #0
 800fa4c:	db04      	blt.n	800fa58 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x32>
 800fa4e:	68fb      	ldr	r3, [r7, #12]
 800fa50:	685b      	ldr	r3, [r3, #4]
 800fa52:	687a      	ldr	r2, [r7, #4]
 800fa54:	429a      	cmp	r2, r3
 800fa56:	db01      	blt.n	800fa5c <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x36>
 800fa58:	f00b faaa 	bl	801afb0 <abort>
  TFLITE_DCHECK(i2 >= 0 && i2 < desc.extents[2]);
 800fa5c:	683b      	ldr	r3, [r7, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	db04      	blt.n	800fa6c <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x46>
 800fa62:	68fb      	ldr	r3, [r7, #12]
 800fa64:	689b      	ldr	r3, [r3, #8]
 800fa66:	683a      	ldr	r2, [r7, #0]
 800fa68:	429a      	cmp	r2, r3
 800fa6a:	db01      	blt.n	800fa70 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x4a>
 800fa6c:	f00b faa0 	bl	801afb0 <abort>
  TFLITE_DCHECK(i3 >= 0 && i3 < desc.extents[3]);
 800fa70:	69bb      	ldr	r3, [r7, #24]
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	db04      	blt.n	800fa80 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x5a>
 800fa76:	68fb      	ldr	r3, [r7, #12]
 800fa78:	68db      	ldr	r3, [r3, #12]
 800fa7a:	69ba      	ldr	r2, [r7, #24]
 800fa7c:	429a      	cmp	r2, r3
 800fa7e:	db01      	blt.n	800fa84 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii+0x5e>
 800fa80:	f00b fa96 	bl	801afb0 <abort>
  return i0 * desc.strides[0] + i1 * desc.strides[1] + i2 * desc.strides[2] +
 800fa84:	68fb      	ldr	r3, [r7, #12]
 800fa86:	691b      	ldr	r3, [r3, #16]
 800fa88:	68ba      	ldr	r2, [r7, #8]
 800fa8a:	fb02 f203 	mul.w	r2, r2, r3
 800fa8e:	68fb      	ldr	r3, [r7, #12]
 800fa90:	695b      	ldr	r3, [r3, #20]
 800fa92:	6879      	ldr	r1, [r7, #4]
 800fa94:	fb01 f303 	mul.w	r3, r1, r3
 800fa98:	441a      	add	r2, r3
 800fa9a:	68fb      	ldr	r3, [r7, #12]
 800fa9c:	699b      	ldr	r3, [r3, #24]
 800fa9e:	6839      	ldr	r1, [r7, #0]
 800faa0:	fb01 f303 	mul.w	r3, r1, r3
 800faa4:	441a      	add	r2, r3
         i3 * desc.strides[3];
 800faa6:	68fb      	ldr	r3, [r7, #12]
 800faa8:	69db      	ldr	r3, [r3, #28]
 800faaa:	69b9      	ldr	r1, [r7, #24]
 800faac:	fb01 f303 	mul.w	r3, r1, r3
 800fab0:	4413      	add	r3, r2
}
 800fab2:	4618      	mov	r0, r3
 800fab4:	3710      	adds	r7, #16
 800fab6:	46bd      	mov	sp, r7
 800fab8:	bd80      	pop	{r7, pc}

0800faba <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const float* input1_data,
                const RuntimeShape& input2_shape, const float* input2_data,
                const RuntimeShape& output_shape, float* output_data) {
 800faba:	b590      	push	{r4, r7, lr}
 800fabc:	b089      	sub	sp, #36	; 0x24
 800fabe:	af00      	add	r7, sp, #0
 800fac0:	60f8      	str	r0, [r7, #12]
 800fac2:	60b9      	str	r1, [r7, #8]
 800fac4:	607a      	str	r2, [r7, #4]
 800fac6:	603b      	str	r3, [r7, #0]
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800fac8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800faca:	6839      	ldr	r1, [r7, #0]
 800facc:	68b8      	ldr	r0, [r7, #8]
 800face:	f7ff ff51 	bl	800f974 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800fad2:	61b8      	str	r0, [r7, #24]
  for (int i = 0; i < flat_size; i++) {
 800fad4:	2300      	movs	r3, #0
 800fad6:	61fb      	str	r3, [r7, #28]
 800fad8:	69fa      	ldr	r2, [r7, #28]
 800fada:	69bb      	ldr	r3, [r7, #24]
 800fadc:	429a      	cmp	r2, r3
 800fade:	da29      	bge.n	800fb34 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x7a>
    auto x = input1_data[i] + input2_data[i];
 800fae0:	69fb      	ldr	r3, [r7, #28]
 800fae2:	009b      	lsls	r3, r3, #2
 800fae4:	687a      	ldr	r2, [r7, #4]
 800fae6:	4413      	add	r3, r2
 800fae8:	ed93 7a00 	vldr	s14, [r3]
 800faec:	69fb      	ldr	r3, [r7, #28]
 800faee:	009b      	lsls	r3, r3, #2
 800faf0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800faf2:	4413      	add	r3, r2
 800faf4:	edd3 7a00 	vldr	s15, [r3]
 800faf8:	ee77 7a27 	vadd.f32	s15, s14, s15
 800fafc:	edc7 7a05 	vstr	s15, [r7, #20]
    output_data[i] = ActivationFunctionWithMinMax(
        x, params.float_activation_min, params.float_activation_max);
 800fb00:	68fb      	ldr	r3, [r7, #12]
 800fb02:	edd3 7a0d 	vldr	s15, [r3, #52]	; 0x34
 800fb06:	68fb      	ldr	r3, [r7, #12]
 800fb08:	ed93 7a0e 	vldr	s14, [r3, #56]	; 0x38
    output_data[i] = ActivationFunctionWithMinMax(
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	009b      	lsls	r3, r3, #2
 800fb10:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800fb12:	18d4      	adds	r4, r2, r3
 800fb14:	eeb0 1a47 	vmov.f32	s2, s14
 800fb18:	eef0 0a67 	vmov.f32	s1, s15
 800fb1c:	ed97 0a05 	vldr	s0, [r7, #20]
 800fb20:	f7ff ff4b 	bl	800f9ba <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 800fb24:	eef0 7a40 	vmov.f32	s15, s0
 800fb28:	edc4 7a00 	vstr	s15, [r4]
  for (int i = 0; i < flat_size; i++) {
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	3301      	adds	r3, #1
 800fb30:	61fb      	str	r3, [r7, #28]
 800fb32:	e7d1      	b.n	800fad8 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x1e>
  }
}
 800fb34:	bf00      	nop
 800fb36:	3724      	adds	r7, #36	; 0x24
 800fb38:	46bd      	mov	sp, r7
 800fb3a:	bd90      	pop	{r4, r7, pc}

0800fb3c <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph>:

// Element-wise add that can often be used for inner loop of broadcast add as
// well as the non-broadcast add.
inline void AddElementwise(int size, const ArithmeticParams& params,
                           const uint8* input1_data, const uint8* input2_data,
                           uint8* output_data) {
 800fb3c:	b590      	push	{r4, r7, lr}
 800fb3e:	b08f      	sub	sp, #60	; 0x3c
 800fb40:	af00      	add	r7, sp, #0
 800fb42:	60f8      	str	r0, [r7, #12]
 800fb44:	60b9      	str	r1, [r7, #8]
 800fb46:	607a      	str	r2, [r7, #4]
 800fb48:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_GT(params.input1_offset, -256);
 800fb4a:	68bb      	ldr	r3, [r7, #8]
 800fb4c:	685b      	ldr	r3, [r3, #4]
 800fb4e:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800fb52:	da01      	bge.n	800fb58 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x1c>
 800fb54:	f00b fa2c 	bl	801afb0 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
 800fb58:	68bb      	ldr	r3, [r7, #8]
 800fb5a:	689b      	ldr	r3, [r3, #8]
 800fb5c:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800fb60:	da01      	bge.n	800fb66 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x2a>
 800fb62:	f00b fa25 	bl	801afb0 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
 800fb66:	68bb      	ldr	r3, [r7, #8]
 800fb68:	685b      	ldr	r3, [r3, #4]
 800fb6a:	2bff      	cmp	r3, #255	; 0xff
 800fb6c:	dd01      	ble.n	800fb72 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x36>
 800fb6e:	f00b fa1f 	bl	801afb0 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
 800fb72:	68bb      	ldr	r3, [r7, #8]
 800fb74:	689b      	ldr	r3, [r3, #8]
 800fb76:	2bff      	cmp	r3, #255	; 0xff
 800fb78:	dd01      	ble.n	800fb7e <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x42>
 800fb7a:	f00b fa19 	bl	801afb0 <abort>

  for (int i = 0; i < size; ++i) {
 800fb7e:	2300      	movs	r3, #0
 800fb80:	637b      	str	r3, [r7, #52]	; 0x34
 800fb82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb84:	68fb      	ldr	r3, [r7, #12]
 800fb86:	429a      	cmp	r2, r3
 800fb88:	da5b      	bge.n	800fc42 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x106>
    const int32 input1_val = params.input1_offset + input1_data[i];
 800fb8a:	68bb      	ldr	r3, [r7, #8]
 800fb8c:	685b      	ldr	r3, [r3, #4]
 800fb8e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fb90:	6879      	ldr	r1, [r7, #4]
 800fb92:	440a      	add	r2, r1
 800fb94:	7812      	ldrb	r2, [r2, #0]
 800fb96:	4413      	add	r3, r2
 800fb98:	633b      	str	r3, [r7, #48]	; 0x30
    const int32 input2_val = params.input2_offset + input2_data[i];
 800fb9a:	68bb      	ldr	r3, [r7, #8]
 800fb9c:	689b      	ldr	r3, [r3, #8]
 800fb9e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800fba0:	6839      	ldr	r1, [r7, #0]
 800fba2:	440a      	add	r2, r1
 800fba4:	7812      	ldrb	r2, [r2, #0]
 800fba6:	4413      	add	r3, r2
 800fba8:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
 800fbaa:	68bb      	ldr	r3, [r7, #8]
 800fbac:	699b      	ldr	r3, [r3, #24]
 800fbae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800fbb0:	fa02 f303 	lsl.w	r3, r2, r3
 800fbb4:	62bb      	str	r3, [r7, #40]	; 0x28
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
 800fbb6:	68bb      	ldr	r3, [r7, #8]
 800fbb8:	699b      	ldr	r3, [r3, #24]
 800fbba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800fbbc:	fa02 f303 	lsl.w	r3, r2, r3
 800fbc0:	627b      	str	r3, [r7, #36]	; 0x24
    const int32 scaled_input1_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	69d9      	ldr	r1, [r3, #28]
 800fbc6:	68bb      	ldr	r3, [r7, #8]
 800fbc8:	6a1b      	ldr	r3, [r3, #32]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800fbca:	461a      	mov	r2, r3
 800fbcc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800fbce:	f7ff ff14 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800fbd2:	6238      	str	r0, [r7, #32]
    const int32 scaled_input2_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
 800fbd4:	68bb      	ldr	r3, [r7, #8]
 800fbd6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800fbd8:	68bb      	ldr	r3, [r7, #8]
 800fbda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800fbdc:	461a      	mov	r2, r3
 800fbde:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800fbe0:	f7ff ff0b 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800fbe4:	61f8      	str	r0, [r7, #28]
    const int32 raw_sum = scaled_input1_val + scaled_input2_val;
 800fbe6:	6a3a      	ldr	r2, [r7, #32]
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	4413      	add	r3, r2
 800fbec:	61bb      	str	r3, [r7, #24]
    const int32 raw_output =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            raw_sum, params.output_multiplier, params.output_shift) +
 800fbee:	68bb      	ldr	r3, [r7, #8]
 800fbf0:	6919      	ldr	r1, [r3, #16]
 800fbf2:	68bb      	ldr	r3, [r7, #8]
 800fbf4:	695b      	ldr	r3, [r3, #20]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800fbf6:	461a      	mov	r2, r3
 800fbf8:	69b8      	ldr	r0, [r7, #24]
 800fbfa:	f7ff fefe 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800fbfe:	4602      	mov	r2, r0
        params.output_offset;
 800fc00:	68bb      	ldr	r3, [r7, #8]
 800fc02:	68db      	ldr	r3, [r3, #12]
            raw_sum, params.output_multiplier, params.output_shift) +
 800fc04:	4413      	add	r3, r2
        params.output_offset;
 800fc06:	613b      	str	r3, [r7, #16]
    const int32 clamped_output =
        std::min(params.quantized_activation_max,
 800fc08:	68bb      	ldr	r3, [r7, #8]
 800fc0a:	f103 0430 	add.w	r4, r3, #48	; 0x30
                 std::max(params.quantized_activation_min, raw_output));
 800fc0e:	68bb      	ldr	r3, [r7, #8]
 800fc10:	332c      	adds	r3, #44	; 0x2c
 800fc12:	f107 0210 	add.w	r2, r7, #16
 800fc16:	4611      	mov	r1, r2
 800fc18:	4618      	mov	r0, r3
 800fc1a:	f7ff fb22 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 800fc1e:	4603      	mov	r3, r0
 800fc20:	4619      	mov	r1, r3
 800fc22:	4620      	mov	r0, r4
 800fc24:	f7ff fb31 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 800fc28:	4603      	mov	r3, r0
 800fc2a:	681b      	ldr	r3, [r3, #0]
 800fc2c:	617b      	str	r3, [r7, #20]
    output_data[i] = static_cast<uint8>(clamped_output);
 800fc2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc30:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800fc32:	4413      	add	r3, r2
 800fc34:	697a      	ldr	r2, [r7, #20]
 800fc36:	b2d2      	uxtb	r2, r2
 800fc38:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 800fc3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fc3c:	3301      	adds	r3, #1
 800fc3e:	637b      	str	r3, [r7, #52]	; 0x34
 800fc40:	e79f      	b.n	800fb82 <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph+0x46>
  }
}
 800fc42:	bf00      	nop
 800fc44:	373c      	adds	r7, #60	; 0x3c
 800fc46:	46bd      	mov	sp, r7
 800fc48:	bd90      	pop	{r4, r7, pc}

0800fc4a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
}

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const uint8* input1_data,
                const RuntimeShape& input2_shape, const uint8* input2_data,
                const RuntimeShape& output_shape, uint8* output_data) {
 800fc4a:	b580      	push	{r7, lr}
 800fc4c:	b088      	sub	sp, #32
 800fc4e:	af02      	add	r7, sp, #8
 800fc50:	60f8      	str	r0, [r7, #12]
 800fc52:	60b9      	str	r1, [r7, #8]
 800fc54:	607a      	str	r2, [r7, #4]
 800fc56:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 800fc58:	68fb      	ldr	r3, [r7, #12]
 800fc5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800fc5c:	68fb      	ldr	r3, [r7, #12]
 800fc5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fc60:	429a      	cmp	r2, r3
 800fc62:	dd01      	ble.n	800fc68 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1e>
 800fc64:	f00b f9a4 	bl	801afb0 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 800fc68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc6a:	6839      	ldr	r1, [r7, #0]
 800fc6c:	68b8      	ldr	r0, [r7, #8]
 800fc6e:	f7ff fe81 	bl	800f974 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 800fc72:	6178      	str	r0, [r7, #20]

  TFLITE_DCHECK_GT(params.input1_offset, -256);
 800fc74:	68fb      	ldr	r3, [r7, #12]
 800fc76:	685b      	ldr	r3, [r3, #4]
 800fc78:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800fc7c:	da01      	bge.n	800fc82 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x38>
 800fc7e:	f00b f997 	bl	801afb0 <abort>
  TFLITE_DCHECK_GT(params.input2_offset, -256);
 800fc82:	68fb      	ldr	r3, [r7, #12]
 800fc84:	689b      	ldr	r3, [r3, #8]
 800fc86:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800fc8a:	da01      	bge.n	800fc90 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x46>
 800fc8c:	f00b f990 	bl	801afb0 <abort>
  TFLITE_DCHECK_LT(params.input1_offset, 256);
 800fc90:	68fb      	ldr	r3, [r7, #12]
 800fc92:	685b      	ldr	r3, [r3, #4]
 800fc94:	2bff      	cmp	r3, #255	; 0xff
 800fc96:	dd01      	ble.n	800fc9c <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x52>
 800fc98:	f00b f98a 	bl	801afb0 <abort>
  TFLITE_DCHECK_LT(params.input2_offset, 256);
 800fc9c:	68fb      	ldr	r3, [r7, #12]
 800fc9e:	689b      	ldr	r3, [r3, #8]
 800fca0:	2bff      	cmp	r3, #255	; 0xff
 800fca2:	dd01      	ble.n	800fca8 <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5e>
 800fca4:	f00b f984 	bl	801afb0 <abort>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
 800fca8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fcaa:	9300      	str	r3, [sp, #0]
 800fcac:	6a3b      	ldr	r3, [r7, #32]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	68f9      	ldr	r1, [r7, #12]
 800fcb2:	6978      	ldr	r0, [r7, #20]
 800fcb4:	f7ff ff42 	bl	800fb3c <_ZN6tflite13reference_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKhS5_Ph>
}
 800fcb8:	bf00      	nop
 800fcba:	3718      	adds	r7, #24
 800fcbc:	46bd      	mov	sp, r7
 800fcbe:	bd80      	pop	{r7, pc}

0800fcc0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>:
                               const RuntimeShape& input1_shape,
                               const float* input1_data,
                               const RuntimeShape& input2_shape,
                               const float* input2_data,
                               const RuntimeShape& output_shape,
                               float* output_data) {
 800fcc0:	b590      	push	{r4, r7, lr}
 800fcc2:	ed2d 8b04 	vpush	{d8-d9}
 800fcc6:	b0a1      	sub	sp, #132	; 0x84
 800fcc8:	af02      	add	r7, sp, #8
 800fcca:	60f8      	str	r0, [r7, #12]
 800fccc:	60b9      	str	r1, [r7, #8]
 800fcce:	607a      	str	r2, [r7, #4]
 800fcd0:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 800fcd2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800fcd6:	f107 0248 	add.w	r2, r7, #72	; 0x48
 800fcda:	6839      	ldr	r1, [r7, #0]
 800fcdc:	68b8      	ldr	r0, [r7, #8]
 800fcde:	f001 f917 	bl	8010f10 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 800fce2:	f107 0310 	add.w	r3, r7, #16
 800fce6:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 800fcea:	2104      	movs	r1, #4
 800fcec:	4618      	mov	r0, r3
 800fcee:	f7ff fd92 	bl	800f816 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800fcf2:	2300      	movs	r3, #0
 800fcf4:	677b      	str	r3, [r7, #116]	; 0x74
 800fcf6:	f107 0310 	add.w	r3, r7, #16
 800fcfa:	2100      	movs	r1, #0
 800fcfc:	4618      	mov	r0, r3
 800fcfe:	f7ff fb69 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd02:	4602      	mov	r2, r0
 800fd04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fd06:	4293      	cmp	r3, r2
 800fd08:	bfb4      	ite	lt
 800fd0a:	2301      	movlt	r3, #1
 800fd0c:	2300      	movge	r3, #0
 800fd0e:	b2db      	uxtb	r3, r3
 800fd10:	2b00      	cmp	r3, #0
 800fd12:	f000 8084 	beq.w	800fe1e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x15e>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800fd16:	2300      	movs	r3, #0
 800fd18:	673b      	str	r3, [r7, #112]	; 0x70
 800fd1a:	f107 0310 	add.w	r3, r7, #16
 800fd1e:	2101      	movs	r1, #1
 800fd20:	4618      	mov	r0, r3
 800fd22:	f7ff fb57 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd26:	4602      	mov	r2, r0
 800fd28:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fd2a:	4293      	cmp	r3, r2
 800fd2c:	bfb4      	ite	lt
 800fd2e:	2301      	movlt	r3, #1
 800fd30:	2300      	movge	r3, #0
 800fd32:	b2db      	uxtb	r3, r3
 800fd34:	2b00      	cmp	r3, #0
 800fd36:	d06e      	beq.n	800fe16 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x156>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800fd38:	2300      	movs	r3, #0
 800fd3a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fd3c:	f107 0310 	add.w	r3, r7, #16
 800fd40:	2102      	movs	r1, #2
 800fd42:	4618      	mov	r0, r3
 800fd44:	f7ff fb46 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd48:	4602      	mov	r2, r0
 800fd4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd4c:	4293      	cmp	r3, r2
 800fd4e:	bfb4      	ite	lt
 800fd50:	2301      	movlt	r3, #1
 800fd52:	2300      	movge	r3, #0
 800fd54:	b2db      	uxtb	r3, r3
 800fd56:	2b00      	cmp	r3, #0
 800fd58:	d059      	beq.n	800fe0e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x14e>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800fd5a:	2300      	movs	r3, #0
 800fd5c:	66bb      	str	r3, [r7, #104]	; 0x68
 800fd5e:	f107 0310 	add.w	r3, r7, #16
 800fd62:	2103      	movs	r1, #3
 800fd64:	4618      	mov	r0, r3
 800fd66:	f7ff fb35 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fd6a:	4602      	mov	r2, r0
 800fd6c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd6e:	4293      	cmp	r3, r2
 800fd70:	bfb4      	ite	lt
 800fd72:	2301      	movlt	r3, #1
 800fd74:	2300      	movge	r3, #0
 800fd76:	b2db      	uxtb	r3, r3
 800fd78:	2b00      	cmp	r3, #0
 800fd7a:	d044      	beq.n	800fe06 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x146>
          output_data[Offset(extended_output_shape, b, y, x, c)] =
              ActivationFunctionWithMinMax(
                  input1_data[SubscriptToIndex(desc1, b, y, x, c)] +
 800fd7c:	f107 0048 	add.w	r0, r7, #72	; 0x48
 800fd80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fd82:	9300      	str	r3, [sp, #0]
 800fd84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fd86:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fd88:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fd8a:	f7ff fe4c 	bl	800fa26 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800fd8e:	4603      	mov	r3, r0
 800fd90:	009b      	lsls	r3, r3, #2
 800fd92:	687a      	ldr	r2, [r7, #4]
 800fd94:	4413      	add	r3, r2
 800fd96:	ed93 8a00 	vldr	s16, [r3]
                      input2_data[SubscriptToIndex(desc2, b, y, x, c)],
 800fd9a:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800fd9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fda0:	9300      	str	r3, [sp, #0]
 800fda2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fda4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fda6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fda8:	f7ff fe3d 	bl	800fa26 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800fdac:	4603      	mov	r3, r0
 800fdae:	009b      	lsls	r3, r3, #2
 800fdb0:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800fdb4:	4413      	add	r3, r2
 800fdb6:	edd3 7a00 	vldr	s15, [r3]
              ActivationFunctionWithMinMax(
 800fdba:	ee38 8a27 	vadd.f32	s16, s16, s15
                  params.float_activation_min, params.float_activation_max);
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	edd3 8a0d 	vldr	s17, [r3, #52]	; 0x34
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	ed93 9a0e 	vldr	s18, [r3, #56]	; 0x38
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 800fdca:	f107 0010 	add.w	r0, r7, #16
 800fdce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fdd4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800fdd6:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800fdd8:	f7ff fd74 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 800fddc:	4603      	mov	r3, r0
 800fdde:	009b      	lsls	r3, r3, #2
 800fde0:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800fde4:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(
 800fde6:	eeb0 1a49 	vmov.f32	s2, s18
 800fdea:	eef0 0a68 	vmov.f32	s1, s17
 800fdee:	eeb0 0a48 	vmov.f32	s0, s16
 800fdf2:	f7ff fde2 	bl	800f9ba <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 800fdf6:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 800fdfa:	edc4 7a00 	vstr	s15, [r4]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800fdfe:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800fe00:	3301      	adds	r3, #1
 800fe02:	66bb      	str	r3, [r7, #104]	; 0x68
 800fe04:	e7ab      	b.n	800fd5e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x9e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800fe06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800fe08:	3301      	adds	r3, #1
 800fe0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800fe0c:	e796      	b.n	800fd3c <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x7c>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800fe0e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800fe10:	3301      	adds	r3, #1
 800fe12:	673b      	str	r3, [r7, #112]	; 0x70
 800fe14:	e781      	b.n	800fd1a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x5a>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800fe16:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800fe18:	3301      	adds	r3, #1
 800fe1a:	677b      	str	r3, [r7, #116]	; 0x74
 800fe1c:	e76b      	b.n	800fcf6 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf+0x36>
      RuntimeShape::ExtendedShape(4, output_shape);
 800fe1e:	f107 0310 	add.w	r3, r7, #16
 800fe22:	4618      	mov	r0, r3
 800fe24:	f7ff fab4 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
        }
      }
    }
  }
}
 800fe28:	bf00      	nop
 800fe2a:	377c      	adds	r7, #124	; 0x7c
 800fe2c:	46bd      	mov	sp, r7
 800fe2e:	ecbd 8b04 	vpop	{d8-d9}
 800fe32:	bd90      	pop	{r4, r7, pc}

0800fe34 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>:
                               const RuntimeShape& input1_shape,
                               const uint8* input1_data,
                               const RuntimeShape& input2_shape,
                               const uint8* input2_data,
                               const RuntimeShape& output_shape,
                               uint8* output_data) {
 800fe34:	b590      	push	{r4, r7, lr}
 800fe36:	b0ab      	sub	sp, #172	; 0xac
 800fe38:	af02      	add	r7, sp, #8
 800fe3a:	60f8      	str	r0, [r7, #12]
 800fe3c:	60b9      	str	r1, [r7, #8]
 800fe3e:	607a      	str	r2, [r7, #4]
 800fe40:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 800fe42:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800fe46:	f107 0250 	add.w	r2, r7, #80	; 0x50
 800fe4a:	6839      	ldr	r1, [r7, #0]
 800fe4c:	68b8      	ldr	r0, [r7, #8]
 800fe4e:	f001 f85f 	bl	8010f10 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 800fe52:	f107 0318 	add.w	r3, r7, #24
 800fe56:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800fe5a:	2104      	movs	r1, #4
 800fe5c:	4618      	mov	r0, r3
 800fe5e:	f7ff fcda 	bl	800f816 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 800fe62:	2300      	movs	r3, #0
 800fe64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800fe68:	f107 0318 	add.w	r3, r7, #24
 800fe6c:	2100      	movs	r1, #0
 800fe6e:	4618      	mov	r0, r3
 800fe70:	f7ff fab0 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fe74:	4602      	mov	r2, r0
 800fe76:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800fe7a:	4293      	cmp	r3, r2
 800fe7c:	bfb4      	ite	lt
 800fe7e:	2301      	movlt	r3, #1
 800fe80:	2300      	movge	r3, #0
 800fe82:	b2db      	uxtb	r3, r3
 800fe84:	2b00      	cmp	r3, #0
 800fe86:	f000 80e0 	beq.w	801004a <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x216>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 800fe8a:	2300      	movs	r3, #0
 800fe8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800fe90:	f107 0318 	add.w	r3, r7, #24
 800fe94:	2101      	movs	r1, #1
 800fe96:	4618      	mov	r0, r3
 800fe98:	f7ff fa9c 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fe9c:	4602      	mov	r2, r0
 800fe9e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800fea2:	4293      	cmp	r3, r2
 800fea4:	bfb4      	ite	lt
 800fea6:	2301      	movlt	r3, #1
 800fea8:	2300      	movge	r3, #0
 800feaa:	b2db      	uxtb	r3, r3
 800feac:	2b00      	cmp	r3, #0
 800feae:	f000 80c6 	beq.w	801003e <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x20a>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 800feb2:	2300      	movs	r3, #0
 800feb4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800feb8:	f107 0318 	add.w	r3, r7, #24
 800febc:	2102      	movs	r1, #2
 800febe:	4618      	mov	r0, r3
 800fec0:	f7ff fa88 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800fec4:	4602      	mov	r2, r0
 800fec6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800feca:	4293      	cmp	r3, r2
 800fecc:	bfb4      	ite	lt
 800fece:	2301      	movlt	r3, #1
 800fed0:	2300      	movge	r3, #0
 800fed2:	b2db      	uxtb	r3, r3
 800fed4:	2b00      	cmp	r3, #0
 800fed6:	f000 80ac 	beq.w	8010032 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1fe>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 800feda:	2300      	movs	r3, #0
 800fedc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800fee0:	f107 0318 	add.w	r3, r7, #24
 800fee4:	2103      	movs	r1, #3
 800fee6:	4618      	mov	r0, r3
 800fee8:	f7ff fa74 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 800feec:	4602      	mov	r2, r0
 800feee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fef2:	4293      	cmp	r3, r2
 800fef4:	bfb4      	ite	lt
 800fef6:	2301      	movlt	r3, #1
 800fef8:	2300      	movge	r3, #0
 800fefa:	b2db      	uxtb	r3, r3
 800fefc:	2b00      	cmp	r3, #0
 800fefe:	f000 8092 	beq.w	8010026 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x1f2>
          const int32 input1_val =
              params.input1_offset +
 800ff02:	68fb      	ldr	r3, [r7, #12]
 800ff04:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 800ff06:	f107 0050 	add.w	r0, r7, #80	; 0x50
 800ff0a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff0e:	9300      	str	r3, [sp, #0]
 800ff10:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff14:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff18:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ff1c:	f7ff fd83 	bl	800fa26 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800ff20:	4603      	mov	r3, r0
 800ff22:	461a      	mov	r2, r3
 800ff24:	687b      	ldr	r3, [r7, #4]
 800ff26:	4413      	add	r3, r2
 800ff28:	781b      	ldrb	r3, [r3, #0]
 800ff2a:	4423      	add	r3, r4
 800ff2c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          const int32 input2_val =
              params.input2_offset +
 800ff30:	68fb      	ldr	r3, [r7, #12]
 800ff32:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 800ff34:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800ff38:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800ff3c:	9300      	str	r3, [sp, #0]
 800ff3e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800ff42:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 800ff46:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 800ff4a:	f7ff fd6c 	bl	800fa26 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 800ff4e:	4603      	mov	r3, r0
 800ff50:	461a      	mov	r2, r3
 800ff52:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800ff56:	4413      	add	r3, r2
 800ff58:	781b      	ldrb	r3, [r3, #0]
 800ff5a:	4423      	add	r3, r4
 800ff5c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          const int32 shifted_input1_val =
              input1_val * (1 << params.left_shift);
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	699b      	ldr	r3, [r3, #24]
          const int32 shifted_input1_val =
 800ff64:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 800ff68:	fa02 f303 	lsl.w	r3, r2, r3
 800ff6c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          const int32 shifted_input2_val =
              input2_val * (1 << params.left_shift);
 800ff70:	68fb      	ldr	r3, [r7, #12]
 800ff72:	699b      	ldr	r3, [r3, #24]
          const int32 shifted_input2_val =
 800ff74:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 800ff78:	fa02 f303 	lsl.w	r3, r2, r3
 800ff7c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          const int32 scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
 800ff80:	68fb      	ldr	r3, [r7, #12]
 800ff82:	69d9      	ldr	r1, [r3, #28]
                  params.input1_shift);
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	6a1b      	ldr	r3, [r3, #32]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800ff88:	461a      	mov	r2, r3
 800ff8a:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 800ff8e:	f7ff fd34 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ff92:	67f8      	str	r0, [r7, #124]	; 0x7c
          const int32 scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
 800ff94:	68fb      	ldr	r3, [r7, #12]
 800ff96:	6a59      	ldr	r1, [r3, #36]	; 0x24
                  params.input2_shift);
 800ff98:	68fb      	ldr	r3, [r7, #12]
 800ff9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800ff9c:	461a      	mov	r2, r3
 800ff9e:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 800ffa2:	f7ff fd2a 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ffa6:	67b8      	str	r0, [r7, #120]	; 0x78
          const int32 raw_sum = scaled_input1_val + scaled_input2_val;
 800ffa8:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800ffaa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ffac:	4413      	add	r3, r2
 800ffae:	677b      	str	r3, [r7, #116]	; 0x74
          const int32 raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
 800ffb0:	68fb      	ldr	r3, [r7, #12]
 800ffb2:	6919      	ldr	r1, [r3, #16]
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 800ffb8:	461a      	mov	r2, r3
 800ffba:	6f78      	ldr	r0, [r7, #116]	; 0x74
 800ffbc:	f7ff fd1d 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 800ffc0:	4602      	mov	r2, r0
              params.output_offset;
 800ffc2:	68fb      	ldr	r3, [r7, #12]
 800ffc4:	68db      	ldr	r3, [r3, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
 800ffc6:	4413      	add	r3, r2
              params.output_offset;
 800ffc8:	617b      	str	r3, [r7, #20]
          const int32 clamped_output =
              std::min(params.quantized_activation_max,
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	f103 0430 	add.w	r4, r3, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
 800ffd0:	68fb      	ldr	r3, [r7, #12]
 800ffd2:	332c      	adds	r3, #44	; 0x2c
 800ffd4:	f107 0214 	add.w	r2, r7, #20
 800ffd8:	4611      	mov	r1, r2
 800ffda:	4618      	mov	r0, r3
 800ffdc:	f7ff f941 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 800ffe0:	4603      	mov	r3, r0
 800ffe2:	4619      	mov	r1, r3
 800ffe4:	4620      	mov	r0, r4
 800ffe6:	f7ff f950 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 800ffea:	4603      	mov	r3, r0
 800ffec:	681b      	ldr	r3, [r3, #0]
 800ffee:	673b      	str	r3, [r7, #112]	; 0x70
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 800fff0:	f107 0018 	add.w	r0, r7, #24
 800fff4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800fff8:	9300      	str	r3, [sp, #0]
 800fffa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800fffe:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010002:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010006:	f7ff fc5d 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801000a:	4603      	mov	r3, r0
 801000c:	461a      	mov	r2, r3
 801000e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8010012:	4413      	add	r3, r2
 8010014:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8010016:	b2d2      	uxtb	r2, r2
 8010018:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 801001a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801001e:	3301      	adds	r3, #1
 8010020:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010024:	e75c      	b.n	800fee0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0xac>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 8010026:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 801002a:	3301      	adds	r3, #1
 801002c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010030:	e742      	b.n	800feb8 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x84>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 8010032:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8010036:	3301      	adds	r3, #1
 8010038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801003c:	e728      	b.n	800fe90 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x5c>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 801003e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010042:	3301      	adds	r3, #1
 8010044:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010048:	e70e      	b.n	800fe68 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph+0x34>
      RuntimeShape::ExtendedShape(4, output_shape);
 801004a:	f107 0318 	add.w	r3, r7, #24
 801004e:	4618      	mov	r0, r3
 8010050:	f7ff f99e 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<uint8>(clamped_output);
        }
      }
    }
  }
}
 8010054:	bf00      	nop
 8010056:	37a4      	adds	r7, #164	; 0xa4
 8010058:	46bd      	mov	sp, r7
 801005a:	bd90      	pop	{r4, r7, pc}

0801005c <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa>:

// Element-wise add that can often be used for inner loop of broadcast add as
// well as the non-broadcast add.
inline void AddElementwise(int size, const ArithmeticParams& params,
                           const int8_t* input1_data, const int8_t* input2_data,
                           int8_t* output_data) {
 801005c:	b590      	push	{r4, r7, lr}
 801005e:	b091      	sub	sp, #68	; 0x44
 8010060:	af00      	add	r7, sp, #0
 8010062:	60f8      	str	r0, [r7, #12]
 8010064:	60b9      	str	r1, [r7, #8]
 8010066:	607a      	str	r2, [r7, #4]
 8010068:	603b      	str	r3, [r7, #0]
  const int32_t int8_max_value = std::numeric_limits<int8_t>::max() + 1;
 801006a:	2380      	movs	r3, #128	; 0x80
 801006c:	63bb      	str	r3, [r7, #56]	; 0x38
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
 801006e:	68bb      	ldr	r3, [r7, #8]
 8010070:	685b      	ldr	r3, [r3, #4]
 8010072:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8010076:	da01      	bge.n	801007c <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x20>
 8010078:	f00a ff9a 	bl	801afb0 <abort>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
 801007c:	68bb      	ldr	r3, [r7, #8]
 801007e:	689b      	ldr	r3, [r3, #8]
 8010080:	f113 0f80 	cmn.w	r3, #128	; 0x80
 8010084:	da01      	bge.n	801008a <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x2e>
 8010086:	f00a ff93 	bl	801afb0 <abort>
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
 801008a:	68bb      	ldr	r3, [r7, #8]
 801008c:	685b      	ldr	r3, [r3, #4]
 801008e:	2b80      	cmp	r3, #128	; 0x80
 8010090:	dd01      	ble.n	8010096 <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x3a>
 8010092:	f00a ff8d 	bl	801afb0 <abort>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
 8010096:	68bb      	ldr	r3, [r7, #8]
 8010098:	689b      	ldr	r3, [r3, #8]
 801009a:	2b80      	cmp	r3, #128	; 0x80
 801009c:	dd01      	ble.n	80100a2 <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x46>
 801009e:	f00a ff87 	bl	801afb0 <abort>

  for (int i = 0; i < size; ++i) {
 80100a2:	2300      	movs	r3, #0
 80100a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80100a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100a8:	68fb      	ldr	r3, [r7, #12]
 80100aa:	429a      	cmp	r2, r3
 80100ac:	da5d      	bge.n	801016a <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x10e>
    const int32 input1_val = params.input1_offset + input1_data[i];
 80100ae:	68bb      	ldr	r3, [r7, #8]
 80100b0:	685b      	ldr	r3, [r3, #4]
 80100b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100b4:	6879      	ldr	r1, [r7, #4]
 80100b6:	440a      	add	r2, r1
 80100b8:	f992 2000 	ldrsb.w	r2, [r2]
 80100bc:	4413      	add	r3, r2
 80100be:	637b      	str	r3, [r7, #52]	; 0x34
    const int32 input2_val = params.input2_offset + input2_data[i];
 80100c0:	68bb      	ldr	r3, [r7, #8]
 80100c2:	689b      	ldr	r3, [r3, #8]
 80100c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80100c6:	6839      	ldr	r1, [r7, #0]
 80100c8:	440a      	add	r2, r1
 80100ca:	f992 2000 	ldrsb.w	r2, [r2]
 80100ce:	4413      	add	r3, r2
 80100d0:	633b      	str	r3, [r7, #48]	; 0x30
    const int32 shifted_input1_val = input1_val * (1 << params.left_shift);
 80100d2:	68bb      	ldr	r3, [r7, #8]
 80100d4:	699b      	ldr	r3, [r3, #24]
 80100d6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80100d8:	fa02 f303 	lsl.w	r3, r2, r3
 80100dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const int32 shifted_input2_val = input2_val * (1 << params.left_shift);
 80100de:	68bb      	ldr	r3, [r7, #8]
 80100e0:	699b      	ldr	r3, [r3, #24]
 80100e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100e4:	fa02 f303 	lsl.w	r3, r2, r3
 80100e8:	62bb      	str	r3, [r7, #40]	; 0x28
    const int32 scaled_input1_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input1_val, params.input1_multiplier, params.input1_shift);
 80100ea:	68bb      	ldr	r3, [r7, #8]
 80100ec:	69d9      	ldr	r1, [r3, #28]
 80100ee:	68bb      	ldr	r3, [r7, #8]
 80100f0:	6a1b      	ldr	r3, [r3, #32]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 80100f2:	461a      	mov	r2, r3
 80100f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80100f6:	f7ff fc80 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 80100fa:	6278      	str	r0, [r7, #36]	; 0x24
    const int32 scaled_input2_val =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            shifted_input2_val, params.input2_multiplier, params.input2_shift);
 80100fc:	68bb      	ldr	r3, [r7, #8]
 80100fe:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8010100:	68bb      	ldr	r3, [r7, #8]
 8010102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8010104:	461a      	mov	r2, r3
 8010106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010108:	f7ff fc77 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 801010c:	6238      	str	r0, [r7, #32]
    const int32 raw_sum = scaled_input1_val + scaled_input2_val;
 801010e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010110:	6a3b      	ldr	r3, [r7, #32]
 8010112:	4413      	add	r3, r2
 8010114:	61fb      	str	r3, [r7, #28]
    const int32 raw_output =
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
            raw_sum, params.output_multiplier, params.output_shift) +
 8010116:	68bb      	ldr	r3, [r7, #8]
 8010118:	6919      	ldr	r1, [r3, #16]
 801011a:	68bb      	ldr	r3, [r7, #8]
 801011c:	695b      	ldr	r3, [r3, #20]
        MultiplyByQuantizedMultiplierSmallerThanOneExp(
 801011e:	461a      	mov	r2, r3
 8010120:	69f8      	ldr	r0, [r7, #28]
 8010122:	f7ff fc6a 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8010126:	4602      	mov	r2, r0
        params.output_offset;
 8010128:	68bb      	ldr	r3, [r7, #8]
 801012a:	68db      	ldr	r3, [r3, #12]
            raw_sum, params.output_multiplier, params.output_shift) +
 801012c:	4413      	add	r3, r2
        params.output_offset;
 801012e:	617b      	str	r3, [r7, #20]
    const int32 clamped_output =
        std::min(params.quantized_activation_max,
 8010130:	68bb      	ldr	r3, [r7, #8]
 8010132:	f103 0430 	add.w	r4, r3, #48	; 0x30
                 std::max(params.quantized_activation_min, raw_output));
 8010136:	68bb      	ldr	r3, [r7, #8]
 8010138:	332c      	adds	r3, #44	; 0x2c
 801013a:	f107 0214 	add.w	r2, r7, #20
 801013e:	4611      	mov	r1, r2
 8010140:	4618      	mov	r0, r3
 8010142:	f7ff f88e 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8010146:	4603      	mov	r3, r0
 8010148:	4619      	mov	r1, r3
 801014a:	4620      	mov	r0, r4
 801014c:	f7ff f89d 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 8010150:	4603      	mov	r3, r0
 8010152:	681b      	ldr	r3, [r3, #0]
 8010154:	61bb      	str	r3, [r7, #24]
    output_data[i] = static_cast<int8_t>(clamped_output);
 8010156:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010158:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801015a:	4413      	add	r3, r2
 801015c:	69ba      	ldr	r2, [r7, #24]
 801015e:	b252      	sxtb	r2, r2
 8010160:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < size; ++i) {
 8010162:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8010164:	3301      	adds	r3, #1
 8010166:	63fb      	str	r3, [r7, #60]	; 0x3c
 8010168:	e79d      	b.n	80100a6 <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa+0x4a>
  }
}
 801016a:	bf00      	nop
 801016c:	3744      	adds	r7, #68	; 0x44
 801016e:	46bd      	mov	sp, r7
 8010170:	bd90      	pop	{r4, r7, pc}

08010172 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:

inline void Add(const ArithmeticParams& params,
                const RuntimeShape& input1_shape, const int8_t* input1_data,
                const RuntimeShape& input2_shape, const int8_t* input2_data,
                const RuntimeShape& output_shape, int8_t* output_data) {
 8010172:	b580      	push	{r7, lr}
 8010174:	b088      	sub	sp, #32
 8010176:	af02      	add	r7, sp, #8
 8010178:	60f8      	str	r0, [r7, #12]
 801017a:	60b9      	str	r1, [r7, #8]
 801017c:	607a      	str	r2, [r7, #4]
 801017e:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8010180:	68fb      	ldr	r3, [r7, #12]
 8010182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010188:	429a      	cmp	r2, r3
 801018a:	dd01      	ble.n	8010190 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1e>
 801018c:	f00a ff10 	bl	801afb0 <abort>
                   params.quantized_activation_max);
  const int flat_size =
      MatchingElementsSize(input1_shape, input2_shape, output_shape);
 8010190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8010192:	6839      	ldr	r1, [r7, #0]
 8010194:	68b8      	ldr	r0, [r7, #8]
 8010196:	f7ff fbed 	bl	800f974 <_ZN6tflite20MatchingElementsSizeERKNS_12RuntimeShapeES2_S2_>
 801019a:	6178      	str	r0, [r7, #20]

  const int32_t int8_max_value = std::numeric_limits<int8_t>::max() + 1;
 801019c:	2380      	movs	r3, #128	; 0x80
 801019e:	613b      	str	r3, [r7, #16]
  TFLITE_DCHECK_GE(params.input1_offset, -1 * int8_max_value);
 80101a0:	68fb      	ldr	r3, [r7, #12]
 80101a2:	685b      	ldr	r3, [r3, #4]
 80101a4:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80101a8:	da01      	bge.n	80101ae <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x3c>
 80101aa:	f00a ff01 	bl	801afb0 <abort>
  TFLITE_DCHECK_GE(params.input2_offset, -1 * int8_max_value);
 80101ae:	68fb      	ldr	r3, [r7, #12]
 80101b0:	689b      	ldr	r3, [r3, #8]
 80101b2:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80101b6:	da01      	bge.n	80101bc <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x4a>
 80101b8:	f00a fefa 	bl	801afb0 <abort>
  TFLITE_DCHECK_LE(params.input1_offset, int8_max_value);
 80101bc:	68fb      	ldr	r3, [r7, #12]
 80101be:	685b      	ldr	r3, [r3, #4]
 80101c0:	2b80      	cmp	r3, #128	; 0x80
 80101c2:	dd01      	ble.n	80101c8 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x56>
 80101c4:	f00a fef4 	bl	801afb0 <abort>
  TFLITE_DCHECK_LE(params.input2_offset, int8_max_value);
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	689b      	ldr	r3, [r3, #8]
 80101cc:	2b80      	cmp	r3, #128	; 0x80
 80101ce:	dd01      	ble.n	80101d4 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x62>
 80101d0:	f00a feee 	bl	801afb0 <abort>
  AddElementwise(flat_size, params, input1_data, input2_data, output_data);
 80101d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80101d6:	9300      	str	r3, [sp, #0]
 80101d8:	6a3b      	ldr	r3, [r7, #32]
 80101da:	687a      	ldr	r2, [r7, #4]
 80101dc:	68f9      	ldr	r1, [r7, #12]
 80101de:	6978      	ldr	r0, [r7, #20]
 80101e0:	f7ff ff3c 	bl	801005c <_ZN6tflite21reference_integer_ops14AddElementwiseEiRKNS_16ArithmeticParamsEPKaS5_Pa>
}
 80101e4:	bf00      	nop
 80101e6:	3718      	adds	r7, #24
 80101e8:	46bd      	mov	sp, r7
 80101ea:	bd80      	pop	{r7, pc}

080101ec <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>:
                               const RuntimeShape& input1_shape,
                               const int8_t* input1_data,
                               const RuntimeShape& input2_shape,
                               const int8_t* input2_data,
                               const RuntimeShape& output_shape,
                               int8_t* output_data) {
 80101ec:	b590      	push	{r4, r7, lr}
 80101ee:	b0ab      	sub	sp, #172	; 0xac
 80101f0:	af02      	add	r7, sp, #8
 80101f2:	60f8      	str	r0, [r7, #12]
 80101f4:	60b9      	str	r1, [r7, #8]
 80101f6:	607a      	str	r2, [r7, #4]
 80101f8:	603b      	str	r3, [r7, #0]
  NdArrayDesc<4> desc1;
  NdArrayDesc<4> desc2;
  NdArrayDescsForElementwiseBroadcast(input1_shape, input2_shape, &desc1,
 80101fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80101fe:	f107 0250 	add.w	r2, r7, #80	; 0x50
 8010202:	6839      	ldr	r1, [r7, #0]
 8010204:	68b8      	ldr	r0, [r7, #8]
 8010206:	f000 fe83 	bl	8010f10 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>
                                      &desc2);
  const RuntimeShape extended_output_shape =
      RuntimeShape::ExtendedShape(4, output_shape);
 801020a:	f107 0318 	add.w	r3, r7, #24
 801020e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8010212:	2104      	movs	r1, #4
 8010214:	4618      	mov	r0, r3
 8010216:	f7ff fafe 	bl	800f816 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  // first dimension has smallest stride.
  //
  // We name our variables by their Tensorflow convention, but generate C code
  // nesting loops such that the innermost loop has the smallest stride for the
  // best cache behavior.
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 801021a:	2300      	movs	r3, #0
 801021c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010220:	f107 0318 	add.w	r3, r7, #24
 8010224:	2100      	movs	r1, #0
 8010226:	4618      	mov	r0, r3
 8010228:	f7ff f8d4 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801022c:	4602      	mov	r2, r0
 801022e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8010232:	4293      	cmp	r3, r2
 8010234:	bfb4      	ite	lt
 8010236:	2301      	movlt	r3, #1
 8010238:	2300      	movge	r3, #0
 801023a:	b2db      	uxtb	r3, r3
 801023c:	2b00      	cmp	r3, #0
 801023e:	f000 80e2 	beq.w	8010406 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x21a>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 8010242:	2300      	movs	r3, #0
 8010244:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8010248:	f107 0318 	add.w	r3, r7, #24
 801024c:	2101      	movs	r1, #1
 801024e:	4618      	mov	r0, r3
 8010250:	f7ff f8c0 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010254:	4602      	mov	r2, r0
 8010256:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 801025a:	4293      	cmp	r3, r2
 801025c:	bfb4      	ite	lt
 801025e:	2301      	movlt	r3, #1
 8010260:	2300      	movge	r3, #0
 8010262:	b2db      	uxtb	r3, r3
 8010264:	2b00      	cmp	r3, #0
 8010266:	f000 80c8 	beq.w	80103fa <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x20e>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 801026a:	2300      	movs	r3, #0
 801026c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8010270:	f107 0318 	add.w	r3, r7, #24
 8010274:	2102      	movs	r1, #2
 8010276:	4618      	mov	r0, r3
 8010278:	f7ff f8ac 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801027c:	4602      	mov	r2, r0
 801027e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8010282:	4293      	cmp	r3, r2
 8010284:	bfb4      	ite	lt
 8010286:	2301      	movlt	r3, #1
 8010288:	2300      	movge	r3, #0
 801028a:	b2db      	uxtb	r3, r3
 801028c:	2b00      	cmp	r3, #0
 801028e:	f000 80ae 	beq.w	80103ee <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x202>
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 8010292:	2300      	movs	r3, #0
 8010294:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8010298:	f107 0318 	add.w	r3, r7, #24
 801029c:	2103      	movs	r1, #3
 801029e:	4618      	mov	r0, r3
 80102a0:	f7ff f898 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80102a4:	4602      	mov	r2, r0
 80102a6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102aa:	4293      	cmp	r3, r2
 80102ac:	bfb4      	ite	lt
 80102ae:	2301      	movlt	r3, #1
 80102b0:	2300      	movge	r3, #0
 80102b2:	b2db      	uxtb	r3, r3
 80102b4:	2b00      	cmp	r3, #0
 80102b6:	f000 8094 	beq.w	80103e2 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x1f6>
          const int32_t input1_val =
              params.input1_offset +
 80102ba:	68fb      	ldr	r3, [r7, #12]
 80102bc:	685c      	ldr	r4, [r3, #4]
              input1_data[SubscriptToIndex(desc1, b, y, x, c)];
 80102be:	f107 0050 	add.w	r0, r7, #80	; 0x50
 80102c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102c6:	9300      	str	r3, [sp, #0]
 80102c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80102d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80102d4:	f7ff fba7 	bl	800fa26 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 80102d8:	4603      	mov	r3, r0
 80102da:	461a      	mov	r2, r3
 80102dc:	687b      	ldr	r3, [r7, #4]
 80102de:	4413      	add	r3, r2
 80102e0:	f993 3000 	ldrsb.w	r3, [r3]
 80102e4:	4423      	add	r3, r4
 80102e6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
          const int32_t input2_val =
              params.input2_offset +
 80102ea:	68fb      	ldr	r3, [r7, #12]
 80102ec:	689c      	ldr	r4, [r3, #8]
              input2_data[SubscriptToIndex(desc2, b, y, x, c)];
 80102ee:	f107 0030 	add.w	r0, r7, #48	; 0x30
 80102f2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80102f6:	9300      	str	r3, [sp, #0]
 80102f8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80102fc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8010300:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8010304:	f7ff fb8f 	bl	800fa26 <_ZN6tflite16SubscriptToIndexERKNS_11NdArrayDescILi4EEEiiii>
 8010308:	4603      	mov	r3, r0
 801030a:	461a      	mov	r2, r3
 801030c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8010310:	4413      	add	r3, r2
 8010312:	f993 3000 	ldrsb.w	r3, [r3]
 8010316:	4423      	add	r3, r4
 8010318:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
          const int32_t shifted_input1_val =
              input1_val * (1 << params.left_shift);
 801031c:	68fb      	ldr	r3, [r7, #12]
 801031e:	699b      	ldr	r3, [r3, #24]
          const int32_t shifted_input1_val =
 8010320:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8010324:	fa02 f303 	lsl.w	r3, r2, r3
 8010328:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
          const int32_t shifted_input2_val =
              input2_val * (1 << params.left_shift);
 801032c:	68fb      	ldr	r3, [r7, #12]
 801032e:	699b      	ldr	r3, [r3, #24]
          const int32_t shifted_input2_val =
 8010330:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8010334:	fa02 f303 	lsl.w	r3, r2, r3
 8010338:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
          const int32_t scaled_input1_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input1_val, params.input1_multiplier,
 801033c:	68fb      	ldr	r3, [r7, #12]
 801033e:	69d9      	ldr	r1, [r3, #28]
                  params.input1_shift);
 8010340:	68fb      	ldr	r3, [r7, #12]
 8010342:	6a1b      	ldr	r3, [r3, #32]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8010344:	461a      	mov	r2, r3
 8010346:	f8d7 0084 	ldr.w	r0, [r7, #132]	; 0x84
 801034a:	f7ff fb56 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 801034e:	67f8      	str	r0, [r7, #124]	; 0x7c
          const int32_t scaled_input2_val =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  shifted_input2_val, params.input2_multiplier,
 8010350:	68fb      	ldr	r3, [r7, #12]
 8010352:	6a59      	ldr	r1, [r3, #36]	; 0x24
                  params.input2_shift);
 8010354:	68fb      	ldr	r3, [r7, #12]
 8010356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8010358:	461a      	mov	r2, r3
 801035a:	f8d7 0080 	ldr.w	r0, [r7, #128]	; 0x80
 801035e:	f7ff fb4c 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 8010362:	67b8      	str	r0, [r7, #120]	; 0x78
          const int32_t raw_sum = scaled_input1_val + scaled_input2_val;
 8010364:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8010366:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8010368:	4413      	add	r3, r2
 801036a:	677b      	str	r3, [r7, #116]	; 0x74
          const int32_t raw_output =
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
                  raw_sum, params.output_multiplier, params.output_shift) +
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	6919      	ldr	r1, [r3, #16]
 8010370:	68fb      	ldr	r3, [r7, #12]
 8010372:	695b      	ldr	r3, [r3, #20]
              MultiplyByQuantizedMultiplierSmallerThanOneExp(
 8010374:	461a      	mov	r2, r3
 8010376:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8010378:	f7ff fb3f 	bl	800f9fa <_ZN6tflite46MultiplyByQuantizedMultiplierSmallerThanOneExpElli>
 801037c:	4602      	mov	r2, r0
              params.output_offset;
 801037e:	68fb      	ldr	r3, [r7, #12]
 8010380:	68db      	ldr	r3, [r3, #12]
                  raw_sum, params.output_multiplier, params.output_shift) +
 8010382:	4413      	add	r3, r2
              params.output_offset;
 8010384:	617b      	str	r3, [r7, #20]
          const int32_t clamped_output =
              std::min(params.quantized_activation_max,
 8010386:	68fb      	ldr	r3, [r7, #12]
 8010388:	f103 0430 	add.w	r4, r3, #48	; 0x30
                       std::max(params.quantized_activation_min, raw_output));
 801038c:	68fb      	ldr	r3, [r7, #12]
 801038e:	332c      	adds	r3, #44	; 0x2c
 8010390:	f107 0214 	add.w	r2, r7, #20
 8010394:	4611      	mov	r1, r2
 8010396:	4618      	mov	r0, r3
 8010398:	f7fe ff63 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 801039c:	4603      	mov	r3, r0
 801039e:	4619      	mov	r1, r3
 80103a0:	4620      	mov	r0, r4
 80103a2:	f7fe ff72 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 80103a6:	4603      	mov	r3, r0
 80103a8:	681b      	ldr	r3, [r3, #0]
 80103aa:	673b      	str	r3, [r7, #112]	; 0x70
          output_data[Offset(extended_output_shape, b, y, x, c)] =
 80103ac:	f107 0018 	add.w	r0, r7, #24
 80103b0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103b4:	9300      	str	r3, [sp, #0]
 80103b6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103ba:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80103be:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80103c2:	f7ff fa7f 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80103c6:	4603      	mov	r3, r0
 80103c8:	461a      	mov	r2, r3
 80103ca:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80103ce:	4413      	add	r3, r2
 80103d0:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80103d2:	b252      	sxtb	r2, r2
 80103d4:	701a      	strb	r2, [r3, #0]
        for (int c = 0; c < extended_output_shape.Dims(3); ++c) {
 80103d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80103da:	3301      	adds	r3, #1
 80103dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80103e0:	e75a      	b.n	8010298 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0xac>
      for (int x = 0; x < extended_output_shape.Dims(2); ++x) {
 80103e2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80103e6:	3301      	adds	r3, #1
 80103e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80103ec:	e740      	b.n	8010270 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x84>
    for (int y = 0; y < extended_output_shape.Dims(1); ++y) {
 80103ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80103f2:	3301      	adds	r3, #1
 80103f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80103f8:	e726      	b.n	8010248 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x5c>
  for (int b = 0; b < extended_output_shape.Dims(0); ++b) {
 80103fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80103fe:	3301      	adds	r3, #1
 8010400:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8010404:	e70c      	b.n	8010220 <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa+0x34>
      RuntimeShape::ExtendedShape(4, output_shape);
 8010406:	f107 0318 	add.w	r3, r7, #24
 801040a:	4618      	mov	r0, r3
 801040c:	f7fe ffc0 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
              static_cast<int8_t>(clamped_output);
        }
      }
    }
  }
}
 8010410:	bf00      	nop
 8010412:	37a4      	adds	r7, #164	; 0xa4
 8010414:	46bd      	mov	sp, r7
 8010416:	bd90      	pop	{r4, r7, pc}

08010418 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>:
//
// Returns true iff there is some sort of broadcast, which includes five-fold
// patterns and falling back to generic broadcast.
inline bool ProcessBroadcastShapes(const RuntimeShape& shape0,
                                   const RuntimeShape& shape1,
                                   tflite::ArithmeticParams* params) {
 8010418:	b590      	push	{r4, r7, lr}
 801041a:	b09f      	sub	sp, #124	; 0x7c
 801041c:	af00      	add	r7, sp, #0
 801041e:	60f8      	str	r0, [r7, #12]
 8010420:	60b9      	str	r1, [r7, #8]
 8010422:	607a      	str	r2, [r7, #4]
  const int dims_count =
      std::max(shape0.DimensionsCount(), shape1.DimensionsCount());
 8010424:	68f8      	ldr	r0, [r7, #12]
 8010426:	f7fe ffc9 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801042a:	4603      	mov	r3, r0
 801042c:	65bb      	str	r3, [r7, #88]	; 0x58
 801042e:	68b8      	ldr	r0, [r7, #8]
 8010430:	f7fe ffc4 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8010434:	4603      	mov	r3, r0
 8010436:	65fb      	str	r3, [r7, #92]	; 0x5c
 8010438:	f107 025c 	add.w	r2, r7, #92	; 0x5c
 801043c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8010440:	4611      	mov	r1, r2
 8010442:	4618      	mov	r0, r3
 8010444:	f7fe ff0d 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8010448:	4603      	mov	r3, r0
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	66fb      	str	r3, [r7, #108]	; 0x6c

  params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 801044e:	687b      	ldr	r3, [r7, #4]
 8010450:	2204      	movs	r2, #4
 8010452:	701a      	strb	r2, [r3, #0]
  RuntimeShape scalar_shape(dims_count, 1);
 8010454:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010458:	2201      	movs	r2, #1
 801045a:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801045c:	4618      	mov	r0, r3
 801045e:	f7ff f961 	bl	800f724 <_ZN6tflite12RuntimeShapeC1Eil>

  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
 8010462:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010466:	68fa      	ldr	r2, [r7, #12]
 8010468:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 801046a:	4618      	mov	r0, r3
 801046c:	f7ff f9d3 	bl	800f816 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
 8010470:	f107 0310 	add.w	r3, r7, #16
 8010474:	68ba      	ldr	r2, [r7, #8]
 8010476:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8010478:	4618      	mov	r0, r3
 801047a:	f7ff f9cc 	bl	800f816 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  // Check for "exact" match, implicitly accepting any scalar shapes.
  if (extended_shape0 == extended_shape1) {
 801047e:	f107 0210 	add.w	r2, r7, #16
 8010482:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010486:	4611      	mov	r1, r2
 8010488:	4618      	mov	r0, r3
 801048a:	f7ff f96c 	bl	800f766 <_ZNK6tflite12RuntimeShapeeqERKS0_>
 801048e:	4603      	mov	r3, r0
 8010490:	2b00      	cmp	r3, #0
 8010492:	d004      	beq.n	801049e <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x86>
    params->broadcast_category = BroadcastableOpCategory::kNonBroadcast;
 8010494:	687b      	ldr	r3, [r7, #4]
 8010496:	2201      	movs	r2, #1
 8010498:	701a      	strb	r2, [r3, #0]
    return false;
 801049a:	2400      	movs	r4, #0
 801049c:	e12c      	b.n	80106f8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2e0>
  }

  for (int i = dims_count - 1; i >= 0; --i) {
 801049e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80104a0:	3b01      	subs	r3, #1
 80104a2:	677b      	str	r3, [r7, #116]	; 0x74
 80104a4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80104a6:	2b00      	cmp	r3, #0
 80104a8:	db42      	blt.n	8010530 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    if (extended_shape0.Dims(i) == extended_shape1.Dims(i)) {
 80104aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104ae:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80104b0:	4618      	mov	r0, r3
 80104b2:	f7fe ff8f 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80104b6:	4604      	mov	r4, r0
 80104b8:	f107 0310 	add.w	r3, r7, #16
 80104bc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80104be:	4618      	mov	r0, r3
 80104c0:	f7fe ff88 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80104c4:	4603      	mov	r3, r0
 80104c6:	429c      	cmp	r4, r3
 80104c8:	bf0c      	ite	eq
 80104ca:	2301      	moveq	r3, #1
 80104cc:	2300      	movne	r3, #0
 80104ce:	b2db      	uxtb	r3, r3
 80104d0:	2b00      	cmp	r3, #0
 80104d2:	d128      	bne.n	8010526 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x10e>
      continue;
    } else if (extended_shape0.Dims(i) == 1) {
 80104d4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80104d8:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80104da:	4618      	mov	r0, r3
 80104dc:	f7fe ff7a 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80104e0:	4603      	mov	r3, r0
 80104e2:	2b01      	cmp	r3, #1
 80104e4:	bf0c      	ite	eq
 80104e6:	2301      	moveq	r3, #1
 80104e8:	2300      	movne	r3, #0
 80104ea:	b2db      	uxtb	r3, r3
 80104ec:	2b00      	cmp	r3, #0
 80104ee:	d003      	beq.n	80104f8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0xe0>
      params->broadcast_category =
 80104f0:	687b      	ldr	r3, [r7, #4]
 80104f2:	2202      	movs	r2, #2
 80104f4:	701a      	strb	r2, [r3, #0]
          BroadcastableOpCategory::kFirstInputBroadcastsFast;
      break;
 80104f6:	e01b      	b.n	8010530 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    } else if (extended_shape1.Dims(i) == 1) {
 80104f8:	f107 0310 	add.w	r3, r7, #16
 80104fc:	6f79      	ldr	r1, [r7, #116]	; 0x74
 80104fe:	4618      	mov	r0, r3
 8010500:	f7fe ff68 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010504:	4603      	mov	r3, r0
 8010506:	2b01      	cmp	r3, #1
 8010508:	bf0c      	ite	eq
 801050a:	2301      	moveq	r3, #1
 801050c:	2300      	movne	r3, #0
 801050e:	b2db      	uxtb	r3, r3
 8010510:	2b00      	cmp	r3, #0
 8010512:	d003      	beq.n	801051c <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x104>
      params->broadcast_category =
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	2203      	movs	r2, #3
 8010518:	701a      	strb	r2, [r3, #0]
          BroadcastableOpCategory::kSecondInputBroadcastsFast;
      break;
 801051a:	e009      	b.n	8010530 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x118>
    } else {
      // This case is erroneous: there is a dimension that does not match and
      // is not a broadcast from one shape to the other.
      params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 801051c:	687b      	ldr	r3, [r7, #4]
 801051e:	2204      	movs	r2, #4
 8010520:	701a      	strb	r2, [r3, #0]
      return true;
 8010522:	2401      	movs	r4, #1
 8010524:	e0e8      	b.n	80106f8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2e0>
      continue;
 8010526:	bf00      	nop
  for (int i = dims_count - 1; i >= 0; --i) {
 8010528:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801052a:	3b01      	subs	r3, #1
 801052c:	677b      	str	r3, [r7, #116]	; 0x74
 801052e:	e7b9      	b.n	80104a4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x8c>
    }
  }

  if (params->broadcast_category !=
 8010530:	687b      	ldr	r3, [r7, #4]
 8010532:	781b      	ldrb	r3, [r3, #0]
 8010534:	2b02      	cmp	r3, #2
 8010536:	d005      	beq.n	8010544 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x12c>
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
      params->broadcast_category !=
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	781b      	ldrb	r3, [r3, #0]
          BroadcastableOpCategory::kFirstInputBroadcastsFast &&
 801053c:	2b03      	cmp	r3, #3
 801053e:	d001      	beq.n	8010544 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x12c>
          BroadcastableOpCategory::kSecondInputBroadcastsFast) {
    // This is unreachable because at least one else clause in the above loop
    // must be reached.
    TFLITE_DCHECK(false);
 8010540:	f00a fd36 	bl	801afb0 <abort>
    return false;
  }

  // From this point it is assumed contractually that corresponding dimensions
  // in shape0 and shape1 are either (a) equal or (b) one or other equals 1.
  const bool swap_inputs = params->broadcast_category ==
 8010544:	687b      	ldr	r3, [r7, #4]
 8010546:	781b      	ldrb	r3, [r3, #0]
 8010548:	2b03      	cmp	r3, #3
 801054a:	bf0c      	ite	eq
 801054c:	2301      	moveq	r3, #1
 801054e:	2300      	movne	r3, #0
 8010550:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
                           BroadcastableOpCategory::kSecondInputBroadcastsFast;
  const RuntimeShape* shape_a =
 8010554:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 8010558:	2b00      	cmp	r3, #0
 801055a:	d002      	beq.n	8010562 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x14a>
 801055c:	f107 0310 	add.w	r3, r7, #16
 8010560:	e001      	b.n	8010566 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x14e>
 8010562:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010566:	667b      	str	r3, [r7, #100]	; 0x64
      swap_inputs ? &extended_shape1 : &extended_shape0;
  const RuntimeShape* shape_b =
 8010568:	f897 306b 	ldrb.w	r3, [r7, #107]	; 0x6b
 801056c:	2b00      	cmp	r3, #0
 801056e:	d002      	beq.n	8010576 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x15e>
 8010570:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010574:	e001      	b.n	801057a <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x162>
 8010576:	f107 0310 	add.w	r3, r7, #16
 801057a:	663b      	str	r3, [r7, #96]	; 0x60
      swap_inputs ? &extended_shape0 : &extended_shape1;

  int i = dims_count - 1;
 801057c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801057e:	3b01      	subs	r3, #1
 8010580:	673b      	str	r3, [r7, #112]	; 0x70
  params->broadcast_shape[0] = 1;
 8010582:	687b      	ldr	r3, [r7, #4]
 8010584:	2201      	movs	r2, #1
 8010586:	63da      	str	r2, [r3, #60]	; 0x3c
  params->broadcast_shape[1] = 1;
 8010588:	687b      	ldr	r3, [r7, #4]
 801058a:	2201      	movs	r2, #1
 801058c:	641a      	str	r2, [r3, #64]	; 0x40
  params->broadcast_shape[2] = 1;
 801058e:	687b      	ldr	r3, [r7, #4]
 8010590:	2201      	movs	r2, #1
 8010592:	645a      	str	r2, [r3, #68]	; 0x44
  params->broadcast_shape[3] = 1;
 8010594:	687b      	ldr	r3, [r7, #4]
 8010596:	2201      	movs	r2, #1
 8010598:	649a      	str	r2, [r3, #72]	; 0x48
  params->broadcast_shape[4] = 1;
 801059a:	687b      	ldr	r3, [r7, #4]
 801059c:	2201      	movs	r2, #1
 801059e:	64da      	str	r2, [r3, #76]	; 0x4c
  // y_0 is greedy: include dims if both or neither equal 1: in other words,
  // test for equality rather than (shape_a->Dims(i) != 1).
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 80105a0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105a2:	2b00      	cmp	r3, #0
 80105a4:	db0d      	blt.n	80105c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1aa>
 80105a6:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105a8:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80105aa:	f7fe ff13 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80105ae:	4604      	mov	r4, r0
 80105b0:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105b2:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80105b4:	f7fe ff0e 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80105b8:	4603      	mov	r3, r0
 80105ba:	429c      	cmp	r4, r3
 80105bc:	d101      	bne.n	80105c2 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1aa>
 80105be:	2301      	movs	r3, #1
 80105c0:	e000      	b.n	80105c4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ac>
 80105c2:	2300      	movs	r3, #0
 80105c4:	2b00      	cmp	r3, #0
 80105c6:	d00e      	beq.n	80105e6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ce>
    params->broadcast_shape[4] *= shape_b->Dims(i);
 80105c8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105ca:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80105cc:	f7fe ff02 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80105d0:	4602      	mov	r2, r0
 80105d2:	687b      	ldr	r3, [r7, #4]
 80105d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80105d6:	fb03 f202 	mul.w	r2, r3, r2
 80105da:	687b      	ldr	r3, [r7, #4]
 80105dc:	64da      	str	r2, [r3, #76]	; 0x4c
    --i;
 80105de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105e0:	3b01      	subs	r3, #1
 80105e2:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 80105e4:	e7dc      	b.n	80105a0 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x188>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).  If it is input_b
  // that has the unit dimension, the next two loops are not entered.
  while (i >= 0 && shape_a->Dims(i) == 1) {
 80105e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80105e8:	2b00      	cmp	r3, #0
 80105ea:	db08      	blt.n	80105fe <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e6>
 80105ec:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80105ee:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80105f0:	f7fe fef0 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80105f4:	4603      	mov	r3, r0
 80105f6:	2b01      	cmp	r3, #1
 80105f8:	d101      	bne.n	80105fe <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e6>
 80105fa:	2301      	movs	r3, #1
 80105fc:	e000      	b.n	8010600 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1e8>
 80105fe:	2300      	movs	r3, #0
 8010600:	2b00      	cmp	r3, #0
 8010602:	d00e      	beq.n	8010622 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20a>
    params->broadcast_shape[3] *= shape_b->Dims(i);
 8010604:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010606:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010608:	f7fe fee4 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801060c:	4602      	mov	r2, r0
 801060e:	687b      	ldr	r3, [r7, #4]
 8010610:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010612:	fb03 f202 	mul.w	r2, r3, r2
 8010616:	687b      	ldr	r3, [r7, #4]
 8010618:	649a      	str	r2, [r3, #72]	; 0x48
    --i;
 801061a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801061c:	3b01      	subs	r3, #1
 801061e:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == 1) {
 8010620:	e7e1      	b.n	80105e6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x1ce>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8010622:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010624:	2b00      	cmp	r3, #0
 8010626:	db0d      	blt.n	8010644 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22c>
 8010628:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801062a:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801062c:	f7fe fed2 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010630:	4604      	mov	r4, r0
 8010632:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010634:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010636:	f7fe fecd 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801063a:	4603      	mov	r3, r0
 801063c:	429c      	cmp	r4, r3
 801063e:	d101      	bne.n	8010644 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22c>
 8010640:	2301      	movs	r3, #1
 8010642:	e000      	b.n	8010646 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x22e>
 8010644:	2300      	movs	r3, #0
 8010646:	2b00      	cmp	r3, #0
 8010648:	d00e      	beq.n	8010668 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x250>
    params->broadcast_shape[2] *= shape_a->Dims(i);
 801064a:	6f39      	ldr	r1, [r7, #112]	; 0x70
 801064c:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801064e:	f7fe fec1 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010652:	4602      	mov	r2, r0
 8010654:	687b      	ldr	r3, [r7, #4]
 8010656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010658:	fb03 f202 	mul.w	r2, r3, r2
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	645a      	str	r2, [r3, #68]	; 0x44
    --i;
 8010660:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8010662:	3b01      	subs	r3, #1
 8010664:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 8010666:	e7dc      	b.n	8010622 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x20a>
  }
  // Here either input_a or input_b has dim of 1 (if i >= 0).
  while (i >= 0 && shape_b->Dims(i) == 1) {
 8010668:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801066a:	2b00      	cmp	r3, #0
 801066c:	db08      	blt.n	8010680 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x268>
 801066e:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010670:	6e38      	ldr	r0, [r7, #96]	; 0x60
 8010672:	f7fe feaf 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010676:	4603      	mov	r3, r0
 8010678:	2b01      	cmp	r3, #1
 801067a:	d101      	bne.n	8010680 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x268>
 801067c:	2301      	movs	r3, #1
 801067e:	e000      	b.n	8010682 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x26a>
 8010680:	2300      	movs	r3, #0
 8010682:	2b00      	cmp	r3, #0
 8010684:	d00e      	beq.n	80106a4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28c>
    params->broadcast_shape[1] *= shape_a->Dims(i);
 8010686:	6f39      	ldr	r1, [r7, #112]	; 0x70
 8010688:	6e78      	ldr	r0, [r7, #100]	; 0x64
 801068a:	f7fe fea3 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801068e:	4602      	mov	r2, r0
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010694:	fb03 f202 	mul.w	r2, r3, r2
 8010698:	687b      	ldr	r3, [r7, #4]
 801069a:	641a      	str	r2, [r3, #64]	; 0x40
    --i;
 801069c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801069e:	3b01      	subs	r3, #1
 80106a0:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_b->Dims(i) == 1) {
 80106a2:	e7e1      	b.n	8010668 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x250>
  }
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 80106a4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106a6:	2b00      	cmp	r3, #0
 80106a8:	db0d      	blt.n	80106c6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2ae>
 80106aa:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80106ac:	6e78      	ldr	r0, [r7, #100]	; 0x64
 80106ae:	f7fe fe91 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80106b2:	4604      	mov	r4, r0
 80106b4:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80106b6:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80106b8:	f7fe fe8c 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80106bc:	4603      	mov	r3, r0
 80106be:	429c      	cmp	r4, r3
 80106c0:	d101      	bne.n	80106c6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2ae>
 80106c2:	2301      	movs	r3, #1
 80106c4:	e000      	b.n	80106c8 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2b0>
 80106c6:	2300      	movs	r3, #0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d00e      	beq.n	80106ea <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2d2>
    params->broadcast_shape[0] *= shape_b->Dims(i);
 80106cc:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80106ce:	6e38      	ldr	r0, [r7, #96]	; 0x60
 80106d0:	f7fe fe80 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80106d4:	4602      	mov	r2, r0
 80106d6:	687b      	ldr	r3, [r7, #4]
 80106d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80106da:	fb03 f202 	mul.w	r2, r3, r2
 80106de:	687b      	ldr	r3, [r7, #4]
 80106e0:	63da      	str	r2, [r3, #60]	; 0x3c
    --i;
 80106e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106e4:	3b01      	subs	r3, #1
 80106e6:	673b      	str	r3, [r7, #112]	; 0x70
  while (i >= 0 && shape_a->Dims(i) == shape_b->Dims(i)) {
 80106e8:	e7dc      	b.n	80106a4 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x28c>
  }

  // Rarer case is when the broadcast dimensions cannot be handled by a fivefold
  // loop.
  if (i >= 0) {
 80106ea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80106ec:	2b00      	cmp	r3, #0
 80106ee:	db02      	blt.n	80106f6 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE+0x2de>
    params->broadcast_category = BroadcastableOpCategory::kGenericBroadcast;
 80106f0:	687b      	ldr	r3, [r7, #4]
 80106f2:	2204      	movs	r2, #4
 80106f4:	701a      	strb	r2, [r3, #0]
  }
  return true;
 80106f6:	2401      	movs	r4, #1
  auto extended_shape1 = RuntimeShape::ExtendedShape(dims_count, shape1);
 80106f8:	f107 0310 	add.w	r3, r7, #16
 80106fc:	4618      	mov	r0, r3
 80106fe:	f7fe fe47 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_shape0 = RuntimeShape::ExtendedShape(dims_count, shape0);
 8010702:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8010706:	4618      	mov	r0, r3
 8010708:	f7fe fe42 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  RuntimeShape scalar_shape(dims_count, 1);
 801070c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8010710:	4618      	mov	r0, r3
 8010712:	f7fe fe3d 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010716:	4623      	mov	r3, r4
}
 8010718:	4618      	mov	r0, r3
 801071a:	377c      	adds	r7, #124	; 0x7c
 801071c:	46bd      	mov	sp, r7
 801071e:	bd90      	pop	{r4, r7, pc}

08010720 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>:
};

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteAddParams* params,
                             const TfLiteTensor* input1,
                             const TfLiteTensor* input2, TfLiteTensor* output,
                             OpData* data) {
 8010720:	b5b0      	push	{r4, r5, r7, lr}
 8010722:	b090      	sub	sp, #64	; 0x40
 8010724:	af02      	add	r7, sp, #8
 8010726:	60f8      	str	r0, [r7, #12]
 8010728:	60b9      	str	r1, [r7, #8]
 801072a:	607a      	str	r2, [r7, #4]
 801072c:	603b      	str	r3, [r7, #0]
  data->requires_broadcast = !HaveSameShapes(input1, input2);
 801072e:	6839      	ldr	r1, [r7, #0]
 8010730:	6878      	ldr	r0, [r7, #4]
 8010732:	f7fe fd6b 	bl	800f20c <_ZN6tflite14HaveSameShapesEPK12TfLiteTensorS2_>
 8010736:	4603      	mov	r3, r0
 8010738:	f083 0301 	eor.w	r3, r3, #1
 801073c:	b2da      	uxtb	r2, r3
 801073e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010740:	701a      	strb	r2, [r3, #0]

  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 8010742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010744:	781b      	ldrb	r3, [r3, #0]
 8010746:	2b03      	cmp	r3, #3
 8010748:	d004      	beq.n	8010754 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x34>
 801074a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801074c:	781b      	ldrb	r3, [r3, #0]
 801074e:	2b09      	cmp	r3, #9
 8010750:	f040 8095 	bne.w	801087e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x15e>
    // 8bit -> 8bit general quantized path, with general rescalings
    data->input1_offset = -input1->params.zero_point;
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	691b      	ldr	r3, [r3, #16]
 8010758:	425a      	negs	r2, r3
 801075a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801075c:	629a      	str	r2, [r3, #40]	; 0x28
    data->input2_offset = -input2->params.zero_point;
 801075e:	683b      	ldr	r3, [r7, #0]
 8010760:	691b      	ldr	r3, [r3, #16]
 8010762:	425a      	negs	r2, r3
 8010764:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010766:	62da      	str	r2, [r3, #44]	; 0x2c
    data->output_offset = output->params.zero_point;
 8010768:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801076a:	691a      	ldr	r2, [r3, #16]
 801076c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801076e:	631a      	str	r2, [r3, #48]	; 0x30
    data->left_shift = 20;
 8010770:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010772:	2214      	movs	r2, #20
 8010774:	625a      	str	r2, [r3, #36]	; 0x24
    const double twice_max_input_scale =
        2 * static_cast<double>(
                std::max(input1->params.scale, input2->params.scale));
 8010776:	687b      	ldr	r3, [r7, #4]
 8010778:	f103 020c 	add.w	r2, r3, #12
 801077c:	683b      	ldr	r3, [r7, #0]
 801077e:	330c      	adds	r3, #12
 8010780:	4619      	mov	r1, r3
 8010782:	4610      	mov	r0, r2
 8010784:	f7fe f8e0 	bl	800e948 <_ZSt3maxIfERKT_S2_S2_>
 8010788:	4603      	mov	r3, r0
 801078a:	681b      	ldr	r3, [r3, #0]
        2 * static_cast<double>(
 801078c:	4618      	mov	r0, r3
 801078e:	f7ef fefb 	bl	8000588 <__aeabi_f2d>
                std::max(input1->params.scale, input2->params.scale));
 8010792:	4602      	mov	r2, r0
 8010794:	460b      	mov	r3, r1
 8010796:	f7ef fd99 	bl	80002cc <__adddf3>
 801079a:	4602      	mov	r2, r0
 801079c:	460b      	mov	r3, r1
 801079e:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30
    const double real_input1_multiplier =
        static_cast<double>(input1->params.scale) / twice_max_input_scale;
 80107a2:	687b      	ldr	r3, [r7, #4]
 80107a4:	68db      	ldr	r3, [r3, #12]
 80107a6:	4618      	mov	r0, r3
 80107a8:	f7ef feee 	bl	8000588 <__aeabi_f2d>
    const double real_input1_multiplier =
 80107ac:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80107b0:	f7f0 f86c 	bl	800088c <__aeabi_ddiv>
 80107b4:	4602      	mov	r2, r0
 80107b6:	460b      	mov	r3, r1
 80107b8:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    const double real_input2_multiplier =
        static_cast<double>(input2->params.scale) / twice_max_input_scale;
 80107bc:	683b      	ldr	r3, [r7, #0]
 80107be:	68db      	ldr	r3, [r3, #12]
 80107c0:	4618      	mov	r0, r3
 80107c2:	f7ef fee1 	bl	8000588 <__aeabi_f2d>
    const double real_input2_multiplier =
 80107c6:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80107ca:	f7f0 f85f 	bl	800088c <__aeabi_ddiv>
 80107ce:	4602      	mov	r2, r0
 80107d0:	460b      	mov	r3, r1
 80107d2:	e9c7 2308 	strd	r2, r3, [r7, #32]
    const double real_output_multiplier =
        twice_max_input_scale /
        ((1 << data->left_shift) * static_cast<double>(output->params.scale));
 80107d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80107d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80107da:	2201      	movs	r2, #1
 80107dc:	fa02 f303 	lsl.w	r3, r2, r3
 80107e0:	4618      	mov	r0, r3
 80107e2:	f7ef febf 	bl	8000564 <__aeabi_i2d>
 80107e6:	4604      	mov	r4, r0
 80107e8:	460d      	mov	r5, r1
 80107ea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80107ec:	68db      	ldr	r3, [r3, #12]
 80107ee:	4618      	mov	r0, r3
 80107f0:	f7ef feca 	bl	8000588 <__aeabi_f2d>
 80107f4:	4602      	mov	r2, r0
 80107f6:	460b      	mov	r3, r1
 80107f8:	4620      	mov	r0, r4
 80107fa:	4629      	mov	r1, r5
 80107fc:	f7ef ff1c 	bl	8000638 <__aeabi_dmul>
 8010800:	4602      	mov	r2, r0
 8010802:	460b      	mov	r3, r1
    const double real_output_multiplier =
 8010804:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 8010808:	f7f0 f840 	bl	800088c <__aeabi_ddiv>
 801080c:	4602      	mov	r2, r0
 801080e:	460b      	mov	r3, r1
 8010810:	e9c7 2306 	strd	r2, r3, [r7, #24]

    QuantizeMultiplierSmallerThanOneExp(
 8010814:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010816:	f103 0214 	add.w	r2, r3, #20
 801081a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801081c:	3304      	adds	r3, #4
 801081e:	4619      	mov	r1, r3
 8010820:	4610      	mov	r0, r2
 8010822:	ed97 0b0a 	vldr	d0, [r7, #40]	; 0x28
 8010826:	f7fd ff77 	bl	800e718 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input1_multiplier, &data->input1_multiplier, &data->input1_shift);

    QuantizeMultiplierSmallerThanOneExp(
 801082a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801082c:	f103 0218 	add.w	r2, r3, #24
 8010830:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010832:	3308      	adds	r3, #8
 8010834:	4619      	mov	r1, r3
 8010836:	4610      	mov	r0, r2
 8010838:	ed97 0b08 	vldr	d0, [r7, #32]
 801083c:	f7fd ff6c 	bl	800e718 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_input2_multiplier, &data->input2_multiplier, &data->input2_shift);

    QuantizeMultiplierSmallerThanOneExp(
 8010840:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010842:	f103 021c 	add.w	r2, r3, #28
 8010846:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010848:	3320      	adds	r3, #32
 801084a:	4619      	mov	r1, r3
 801084c:	4610      	mov	r0, r2
 801084e:	ed97 0b06 	vldr	d0, [r7, #24]
 8010852:	f7fd ff61 	bl	800e718 <_ZN6tflite35QuantizeMultiplierSmallerThanOneExpEdPlPi>
        real_output_multiplier, &data->output_multiplier, &data->output_shift);

    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8010856:	68bb      	ldr	r3, [r7, #8]
 8010858:	7819      	ldrb	r1, [r3, #0]
 801085a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801085c:	f103 020c 	add.w	r2, r3, #12
 8010860:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010862:	3310      	adds	r3, #16
 8010864:	9300      	str	r3, [sp, #0]
 8010866:	4613      	mov	r3, r2
 8010868:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801086a:	68f8      	ldr	r0, [r7, #12]
 801086c:	f7fe fc7a 	bl	800f164 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8010870:	4603      	mov	r3, r0
 8010872:	75fb      	strb	r3, [r7, #23]
 8010874:	7dfb      	ldrb	r3, [r7, #23]
 8010876:	2b00      	cmp	r3, #0
 8010878:	d001      	beq.n	801087e <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x15e>
 801087a:	7dfb      	ldrb	r3, [r7, #23]
 801087c:	e000      	b.n	8010880 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE+0x160>
        context, params->activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }

  return kTfLiteOk;
 801087e:	2300      	movs	r3, #0
}
 8010880:	4618      	mov	r0, r3
 8010882:	3738      	adds	r7, #56	; 0x38
 8010884:	46bd      	mov	sp, r7
 8010886:	bdb0      	pop	{r4, r5, r7, pc}

08010888 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:

void EvalAdd(TfLiteContext* context, TfLiteNode* node, TfLiteAddParams* params,
             const OpData* data, const TfLiteTensor* input1,
             const TfLiteTensor* input2, TfLiteTensor* output) {
 8010888:	b5b0      	push	{r4, r5, r7, lr}
 801088a:	b0c2      	sub	sp, #264	; 0x108
 801088c:	af04      	add	r7, sp, #16
 801088e:	60f8      	str	r0, [r7, #12]
 8010890:	60b9      	str	r1, [r7, #8]
 8010892:	607a      	str	r2, [r7, #4]
 8010894:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 8010896:	687b      	ldr	r3, [r7, #4]
 8010898:	781b      	ldrb	r3, [r3, #0]
 801089a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 801089e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 80108a2:	4618      	mov	r0, r3
 80108a4:	f000 fba8 	bl	8010ff8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::ArithmeticParams op_params;
  SetActivationParams(output_activation_min, output_activation_max, &op_params);
 80108a8:	edd7 7a19 	vldr	s15, [r7, #100]	; 0x64
 80108ac:	ed97 7a18 	vldr	s14, [r7, #96]	; 0x60
 80108b0:	f107 0310 	add.w	r3, r7, #16
 80108b4:	4618      	mov	r0, r3
 80108b6:	eef0 0a47 	vmov.f32	s1, s14
 80108ba:	eeb0 0a67 	vmov.f32	s0, s15
 80108be:	f000 fbdd 	bl	801107c <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>
#define TF_LITE_ADD(opname)                                                   \
  reference_ops::opname(op_params, GetTensorShape(input1),                    \
                        GetTensorData<float>(input1), GetTensorShape(input2), \
                        GetTensorData<float>(input2), GetTensorShape(output), \
                        GetTensorData<float>(output))
  if (data->requires_broadcast) {
 80108c2:	683b      	ldr	r3, [r7, #0]
 80108c4:	781b      	ldrb	r3, [r3, #0]
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d042      	beq.n	8010950 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0xc8>
    TF_LITE_ADD(BroadcastAdd4DSlow);
 80108ca:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80108ce:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 80108d2:	4618      	mov	r0, r3
 80108d4:	f7fe fe31 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80108d8:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 80108dc:	f7fe fe4b 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80108e0:	4605      	mov	r5, r0
 80108e2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80108e6:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80108ea:	4618      	mov	r0, r3
 80108ec:	f7fe fe25 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80108f0:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80108f4:	f7fe fe3f 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80108f8:	4604      	mov	r4, r0
 80108fa:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80108fe:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8010902:	4618      	mov	r0, r3
 8010904:	f7fe fe19 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010908:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 801090c:	f7fe fe44 	bl	800f598 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8010910:	4603      	mov	r3, r0
 8010912:	f107 0280 	add.w	r2, r7, #128	; 0x80
 8010916:	f107 0168 	add.w	r1, r7, #104	; 0x68
 801091a:	f107 0010 	add.w	r0, r7, #16
 801091e:	9302      	str	r3, [sp, #8]
 8010920:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010924:	9301      	str	r3, [sp, #4]
 8010926:	9400      	str	r4, [sp, #0]
 8010928:	4613      	mov	r3, r2
 801092a:	462a      	mov	r2, r5
 801092c:	f7ff f9c8 	bl	800fcc0 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
 8010930:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8010934:	4618      	mov	r0, r3
 8010936:	f7fe fd2b 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 801093a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801093e:	4618      	mov	r0, r3
 8010940:	f7fe fd26 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010944:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8010948:	4618      	mov	r0, r3
 801094a:	f7fe fd21 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    TF_LITE_ADD(Add);
  }
#undef TF_LITE_ADD
}
 801094e:	e041      	b.n	80109d4 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x14c>
    TF_LITE_ADD(Add);
 8010950:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8010954:	f8d7 1108 	ldr.w	r1, [r7, #264]	; 0x108
 8010958:	4618      	mov	r0, r3
 801095a:	f7fe fdee 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801095e:	f8d7 0108 	ldr.w	r0, [r7, #264]	; 0x108
 8010962:	f7fe fe08 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8010966:	4605      	mov	r5, r0
 8010968:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 801096c:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8010970:	4618      	mov	r0, r3
 8010972:	f7fe fde2 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010976:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 801097a:	f7fe fdfc 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801097e:	4604      	mov	r4, r0
 8010980:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8010984:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8010988:	4618      	mov	r0, r3
 801098a:	f7fe fdd6 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801098e:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8010992:	f7fe fe01 	bl	800f598 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8010996:	4603      	mov	r3, r0
 8010998:	f107 02c8 	add.w	r2, r7, #200	; 0xc8
 801099c:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 80109a0:	f107 0010 	add.w	r0, r7, #16
 80109a4:	9302      	str	r3, [sp, #8]
 80109a6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80109aa:	9301      	str	r3, [sp, #4]
 80109ac:	9400      	str	r4, [sp, #0]
 80109ae:	4613      	mov	r3, r2
 80109b0:	462a      	mov	r2, r5
 80109b2:	f7ff f882 	bl	800faba <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_Pf>
 80109b6:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80109ba:	4618      	mov	r0, r3
 80109bc:	f7fe fce8 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 80109c0:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80109c4:	4618      	mov	r0, r3
 80109c6:	f7fe fce3 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 80109ca:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80109ce:	4618      	mov	r0, r3
 80109d0:	f7fe fcde 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80109d4:	bf00      	nop
 80109d6:	37f8      	adds	r7, #248	; 0xf8
 80109d8:	46bd      	mov	sp, r7
 80109da:	bdb0      	pop	{r4, r5, r7, pc}

080109dc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>:

TfLiteStatus EvalAddQuantized(TfLiteContext* context, TfLiteNode* node,
                              TfLiteAddParams* params, const OpData* data,
                              const TfLiteTensor* input1,
                              const TfLiteTensor* input2,
                              TfLiteTensor* output) {
 80109dc:	b5b0      	push	{r4, r5, r7, lr}
 80109de:	b0f2      	sub	sp, #456	; 0x1c8
 80109e0:	af04      	add	r7, sp, #16
 80109e2:	f107 040c 	add.w	r4, r7, #12
 80109e6:	6020      	str	r0, [r4, #0]
 80109e8:	f107 0008 	add.w	r0, r7, #8
 80109ec:	6001      	str	r1, [r0, #0]
 80109ee:	1d39      	adds	r1, r7, #4
 80109f0:	600a      	str	r2, [r1, #0]
 80109f2:	463a      	mov	r2, r7
 80109f4:	6013      	str	r3, [r2, #0]
  if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 80109f6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 80109fa:	781b      	ldrb	r3, [r3, #0]
 80109fc:	2b03      	cmp	r3, #3
 80109fe:	d005      	beq.n	8010a0c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x30>
 8010a00:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010a04:	781b      	ldrb	r3, [r3, #0]
 8010a06:	2b09      	cmp	r3, #9
 8010a08:	f040 8184 	bne.w	8010d14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x338>
    tflite::ArithmeticParams op_params;
    op_params.left_shift = data->left_shift;
 8010a0c:	463b      	mov	r3, r7
 8010a0e:	681b      	ldr	r3, [r3, #0]
 8010a10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010a12:	f107 0314 	add.w	r3, r7, #20
 8010a16:	619a      	str	r2, [r3, #24]
    op_params.input1_offset = data->input1_offset;
 8010a18:	463b      	mov	r3, r7
 8010a1a:	681b      	ldr	r3, [r3, #0]
 8010a1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8010a1e:	f107 0314 	add.w	r3, r7, #20
 8010a22:	605a      	str	r2, [r3, #4]
    op_params.input1_multiplier = data->input1_multiplier;
 8010a24:	463b      	mov	r3, r7
 8010a26:	681b      	ldr	r3, [r3, #0]
 8010a28:	695a      	ldr	r2, [r3, #20]
 8010a2a:	f107 0314 	add.w	r3, r7, #20
 8010a2e:	61da      	str	r2, [r3, #28]
    op_params.input1_shift = data->input1_shift;
 8010a30:	463b      	mov	r3, r7
 8010a32:	681b      	ldr	r3, [r3, #0]
 8010a34:	685a      	ldr	r2, [r3, #4]
 8010a36:	f107 0314 	add.w	r3, r7, #20
 8010a3a:	621a      	str	r2, [r3, #32]
    op_params.input2_offset = data->input2_offset;
 8010a3c:	463b      	mov	r3, r7
 8010a3e:	681b      	ldr	r3, [r3, #0]
 8010a40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a42:	f107 0314 	add.w	r3, r7, #20
 8010a46:	609a      	str	r2, [r3, #8]
    op_params.input2_multiplier = data->input2_multiplier;
 8010a48:	463b      	mov	r3, r7
 8010a4a:	681b      	ldr	r3, [r3, #0]
 8010a4c:	699a      	ldr	r2, [r3, #24]
 8010a4e:	f107 0314 	add.w	r3, r7, #20
 8010a52:	625a      	str	r2, [r3, #36]	; 0x24
    op_params.input2_shift = data->input2_shift;
 8010a54:	463b      	mov	r3, r7
 8010a56:	681b      	ldr	r3, [r3, #0]
 8010a58:	689a      	ldr	r2, [r3, #8]
 8010a5a:	f107 0314 	add.w	r3, r7, #20
 8010a5e:	629a      	str	r2, [r3, #40]	; 0x28
    op_params.output_offset = data->output_offset;
 8010a60:	463b      	mov	r3, r7
 8010a62:	681b      	ldr	r3, [r3, #0]
 8010a64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8010a66:	f107 0314 	add.w	r3, r7, #20
 8010a6a:	60da      	str	r2, [r3, #12]
    op_params.output_multiplier = data->output_multiplier;
 8010a6c:	463b      	mov	r3, r7
 8010a6e:	681b      	ldr	r3, [r3, #0]
 8010a70:	69da      	ldr	r2, [r3, #28]
 8010a72:	f107 0314 	add.w	r3, r7, #20
 8010a76:	611a      	str	r2, [r3, #16]
    op_params.output_shift = data->output_shift;
 8010a78:	463b      	mov	r3, r7
 8010a7a:	681b      	ldr	r3, [r3, #0]
 8010a7c:	6a1a      	ldr	r2, [r3, #32]
 8010a7e:	f107 0314 	add.w	r3, r7, #20
 8010a82:	615a      	str	r2, [r3, #20]
    SetActivationParams(data->output_activation_min,
 8010a84:	463b      	mov	r3, r7
 8010a86:	681b      	ldr	r3, [r3, #0]
 8010a88:	68d8      	ldr	r0, [r3, #12]
                        data->output_activation_max, &op_params);
 8010a8a:	463b      	mov	r3, r7
 8010a8c:	681b      	ldr	r3, [r3, #0]
 8010a8e:	691b      	ldr	r3, [r3, #16]
    SetActivationParams(data->output_activation_min,
 8010a90:	f107 0214 	add.w	r2, r7, #20
 8010a94:	4619      	mov	r1, r3
 8010a96:	f000 fb05 	bl	80110a4 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
 8010a9a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010a9e:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010aa2:	4618      	mov	r0, r3
 8010aa4:	f7fe fd49 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010aa8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010aac:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010ab0:	4618      	mov	r0, r3
 8010ab2:	f7fe fd42 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    bool need_broadcast = reference_ops::ProcessBroadcastShapes(
 8010ab6:	f107 0214 	add.w	r2, r7, #20
 8010aba:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8010abe:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010ac2:	4618      	mov	r0, r3
 8010ac4:	f7ff fca8 	bl	8010418 <_ZN6tflite13reference_ops22ProcessBroadcastShapesERKNS_12RuntimeShapeES3_PNS_16ArithmeticParamsE>
 8010ac8:	4603      	mov	r3, r0
 8010aca:	f887 31b7 	strb.w	r3, [r7, #439]	; 0x1b7
        GetTensorShape(input1), GetTensorShape(input2), &op_params);
 8010ace:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8010ad2:	4618      	mov	r0, r3
 8010ad4:	f7fe fc5c 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010ad8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8010adc:	4618      	mov	r0, r3
 8010ade:	f7fe fc57 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
#define TF_LITE_ADD(type, opname, dtype)                             \
  type::opname(op_params, GetTensorShape(input1),                    \
               GetTensorData<dtype>(input1), GetTensorShape(input2), \
               GetTensorData<dtype>(input2), GetTensorShape(output), \
               GetTensorData<dtype>(output));
    if (output->type == kTfLiteInt8) {
 8010ae2:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
 8010ae6:	781b      	ldrb	r3, [r3, #0]
 8010ae8:	2b09      	cmp	r3, #9
 8010aea:	f040 808a 	bne.w	8010c02 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x226>
      if (need_broadcast) {
 8010aee:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	d042      	beq.n	8010b7c <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x1a0>
        TF_LITE_ADD(reference_integer_ops, BroadcastAdd4DSlow, int8_t);
 8010af6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010afa:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010afe:	4618      	mov	r0, r3
 8010b00:	f7fe fd1b 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010b04:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8010b08:	f7fe fd57 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010b0c:	4605      	mov	r5, r0
 8010b0e:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010b12:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010b16:	4618      	mov	r0, r3
 8010b18:	f7fe fd0f 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010b1c:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8010b20:	f7fe fd4b 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010b24:	4604      	mov	r4, r0
 8010b26:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010b2a:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8010b2e:	4618      	mov	r0, r3
 8010b30:	f7fe fd03 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010b34:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8010b38:	f7fe fd50 	bl	800f5dc <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8010b3c:	4603      	mov	r3, r0
 8010b3e:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8010b42:	f107 0194 	add.w	r1, r7, #148	; 0x94
 8010b46:	f107 0014 	add.w	r0, r7, #20
 8010b4a:	9302      	str	r3, [sp, #8]
 8010b4c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010b50:	9301      	str	r3, [sp, #4]
 8010b52:	9400      	str	r4, [sp, #0]
 8010b54:	4613      	mov	r3, r2
 8010b56:	462a      	mov	r2, r5
 8010b58:	f7ff fb48 	bl	80101ec <_ZN6tflite21reference_integer_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
 8010b5c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8010b60:	4618      	mov	r0, r3
 8010b62:	f7fe fc15 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010b66:	f107 03ac 	add.w	r3, r7, #172	; 0xac
 8010b6a:	4618      	mov	r0, r3
 8010b6c:	f7fe fc10 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010b70:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8010b74:	4618      	mov	r0, r3
 8010b76:	f7fe fc0b 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010b7a:	e0cb      	b.n	8010d14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x338>
      } else {
        TF_LITE_ADD(reference_integer_ops, Add, int8_t);
 8010b7c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010b80:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010b84:	4618      	mov	r0, r3
 8010b86:	f7fe fcd8 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010b8a:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8010b8e:	f7fe fd14 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010b92:	4605      	mov	r5, r0
 8010b94:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8010b98:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010b9c:	4618      	mov	r0, r3
 8010b9e:	f7fe fccc 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010ba2:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8010ba6:	f7fe fd08 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8010baa:	4604      	mov	r4, r0
 8010bac:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010bb0:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8010bb4:	4618      	mov	r0, r3
 8010bb6:	f7fe fcc0 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010bba:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8010bbe:	f7fe fd0d 	bl	800f5dc <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8010bc2:	4603      	mov	r3, r0
 8010bc4:	f107 02f4 	add.w	r2, r7, #244	; 0xf4
 8010bc8:	f107 01dc 	add.w	r1, r7, #220	; 0xdc
 8010bcc:	f107 0014 	add.w	r0, r7, #20
 8010bd0:	9302      	str	r3, [sp, #8]
 8010bd2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010bd6:	9301      	str	r3, [sp, #4]
 8010bd8:	9400      	str	r4, [sp, #0]
 8010bda:	4613      	mov	r3, r2
 8010bdc:	462a      	mov	r2, r5
 8010bde:	f7ff fac8 	bl	8010172 <_ZN6tflite21reference_integer_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_Pa>
 8010be2:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8010be6:	4618      	mov	r0, r3
 8010be8:	f7fe fbd2 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010bec:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8010bf0:	4618      	mov	r0, r3
 8010bf2:	f7fe fbcd 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010bf6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8010bfa:	4618      	mov	r0, r3
 8010bfc:	f7fe fbc8 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c00:	e088      	b.n	8010d14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x338>
      }
    } else {
      if (need_broadcast) {
 8010c02:	f897 31b7 	ldrb.w	r3, [r7, #439]	; 0x1b7
 8010c06:	2b00      	cmp	r3, #0
 8010c08:	d042      	beq.n	8010c90 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x2b4>
        TF_LITE_ADD(reference_ops, BroadcastAdd4DSlow, uint8_t);
 8010c0a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8010c0e:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010c12:	4618      	mov	r0, r3
 8010c14:	f7fe fc91 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c18:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8010c1c:	f7fe fb75 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010c20:	4605      	mov	r5, r0
 8010c22:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8010c26:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010c2a:	4618      	mov	r0, r3
 8010c2c:	f7fe fc85 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c30:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8010c34:	f7fe fb69 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010c38:	4604      	mov	r4, r0
 8010c3a:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8010c3e:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8010c42:	4618      	mov	r0, r3
 8010c44:	f7fe fc79 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c48:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8010c4c:	f7fe fb6e 	bl	800f32c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8010c50:	4603      	mov	r3, r0
 8010c52:	f507 729e 	add.w	r2, r7, #316	; 0x13c
 8010c56:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8010c5a:	f107 0014 	add.w	r0, r7, #20
 8010c5e:	9302      	str	r3, [sp, #8]
 8010c60:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8010c64:	9301      	str	r3, [sp, #4]
 8010c66:	9400      	str	r4, [sp, #0]
 8010c68:	4613      	mov	r3, r2
 8010c6a:	462a      	mov	r2, r5
 8010c6c:	f7ff f8e2 	bl	800fe34 <_ZN6tflite13reference_ops18BroadcastAdd4DSlowERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 8010c70:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8010c74:	4618      	mov	r0, r3
 8010c76:	f7fe fb8b 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c7a:	f507 739e 	add.w	r3, r7, #316	; 0x13c
 8010c7e:	4618      	mov	r0, r3
 8010c80:	f7fe fb86 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c84:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8010c88:	4618      	mov	r0, r3
 8010c8a:	f7fe fb81 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010c8e:	e041      	b.n	8010d14 <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_+0x338>
      } else {
        TF_LITE_ADD(reference_ops, Add, uint8_t);
 8010c90:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8010c94:	f8d7 11c8 	ldr.w	r1, [r7, #456]	; 0x1c8
 8010c98:	4618      	mov	r0, r3
 8010c9a:	f7fe fc4e 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010c9e:	f8d7 01c8 	ldr.w	r0, [r7, #456]	; 0x1c8
 8010ca2:	f7fe fb32 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010ca6:	4605      	mov	r5, r0
 8010ca8:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010cac:	f8d7 11cc 	ldr.w	r1, [r7, #460]	; 0x1cc
 8010cb0:	4618      	mov	r0, r3
 8010cb2:	f7fe fc42 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010cb6:	f8d7 01cc 	ldr.w	r0, [r7, #460]	; 0x1cc
 8010cba:	f7fe fb26 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8010cbe:	4604      	mov	r4, r0
 8010cc0:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8010cc4:	f8d7 11d0 	ldr.w	r1, [r7, #464]	; 0x1d0
 8010cc8:	4618      	mov	r0, r3
 8010cca:	f7fe fc36 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8010cce:	f8d7 01d0 	ldr.w	r0, [r7, #464]	; 0x1d0
 8010cd2:	f7fe fb2b 	bl	800f32c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8010cd6:	4603      	mov	r3, r0
 8010cd8:	f507 72c2 	add.w	r2, r7, #388	; 0x184
 8010cdc:	f507 71b6 	add.w	r1, r7, #364	; 0x16c
 8010ce0:	f107 0014 	add.w	r0, r7, #20
 8010ce4:	9302      	str	r3, [sp, #8]
 8010ce6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8010cea:	9301      	str	r3, [sp, #4]
 8010cec:	9400      	str	r4, [sp, #0]
 8010cee:	4613      	mov	r3, r2
 8010cf0:	462a      	mov	r2, r5
 8010cf2:	f7fe ffaa 	bl	800fc4a <_ZN6tflite13reference_ops3AddERKNS_16ArithmeticParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_Ph>
 8010cf6:	f507 73ce 	add.w	r3, r7, #412	; 0x19c
 8010cfa:	4618      	mov	r0, r3
 8010cfc:	f7fe fb48 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010d00:	f507 73c2 	add.w	r3, r7, #388	; 0x184
 8010d04:	4618      	mov	r0, r3
 8010d06:	f7fe fb43 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8010d0a:	f507 73b6 	add.w	r3, r7, #364	; 0x16c
 8010d0e:	4618      	mov	r0, r3
 8010d10:	f7fe fb3e 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      }
    }
#undef TF_LITE_ADD
  }

  return kTfLiteOk;
 8010d14:	2300      	movs	r3, #0
}
 8010d16:	4618      	mov	r0, r3
 8010d18:	f507 77dc 	add.w	r7, r7, #440	; 0x1b8
 8010d1c:	46bd      	mov	sp, r7
 8010d1e:	bdb0      	pop	{r4, r5, r7, pc}

08010d20 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8010d20:	b590      	push	{r4, r7, lr}
 8010d22:	b099      	sub	sp, #100	; 0x64
 8010d24:	af04      	add	r7, sp, #16
 8010d26:	6078      	str	r0, [r7, #4]
 8010d28:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteAddParams*>(node->builtin_data);
 8010d2a:	683b      	ldr	r3, [r7, #0]
 8010d2c:	695b      	ldr	r3, [r3, #20]
 8010d2e:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input1 = GetInput(context, node, kInputTensor1);
 8010d30:	2200      	movs	r2, #0
 8010d32:	6839      	ldr	r1, [r7, #0]
 8010d34:	6878      	ldr	r0, [r7, #4]
 8010d36:	f7fe fabc 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010d3a:	64b8      	str	r0, [r7, #72]	; 0x48
  const TfLiteTensor* input2 = GetInput(context, node, kInputTensor2);
 8010d3c:	2201      	movs	r2, #1
 8010d3e:	6839      	ldr	r1, [r7, #0]
 8010d40:	6878      	ldr	r0, [r7, #4]
 8010d42:	f7fe fab6 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8010d46:	6478      	str	r0, [r7, #68]	; 0x44
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8010d48:	2200      	movs	r2, #0
 8010d4a:	6839      	ldr	r1, [r7, #0]
 8010d4c:	6878      	ldr	r0, [r7, #4]
 8010d4e:	f7fe fac6 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8010d52:	6438      	str	r0, [r7, #64]	; 0x40

  OpData data;
  TF_LITE_ENSURE_STATUS(
 8010d54:	f107 0308 	add.w	r3, r7, #8
 8010d58:	9301      	str	r3, [sp, #4]
 8010d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d5c:	9300      	str	r3, [sp, #0]
 8010d5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010d62:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010d64:	6878      	ldr	r0, [r7, #4]
 8010d66:	f7ff fcdb 	bl	8010720 <_ZN6tflite3ops5micro3add15CalculateOpDataEP13TfLiteContextP15TfLiteAddParamsPK12TfLiteTensorS9_PS7_PNS2_6OpDataE>
 8010d6a:	4603      	mov	r3, r0
 8010d6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8010d70:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d74:	2b00      	cmp	r3, #0
 8010d76:	d002      	beq.n	8010d7e <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x5e>
 8010d78:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8010d7c:	e043      	b.n	8010e06 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
      CalculateOpData(context, params, input1, input2, output, &data));

  if (output->type == kTfLiteFloat32) {
 8010d7e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d80:	781b      	ldrb	r3, [r3, #0]
 8010d82:	2b01      	cmp	r3, #1
 8010d84:	d10e      	bne.n	8010da4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x84>
    EvalAdd(context, node, params, &data, input1, input2, output);
 8010d86:	f107 0208 	add.w	r2, r7, #8
 8010d8a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010d8c:	9302      	str	r3, [sp, #8]
 8010d8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010d90:	9301      	str	r3, [sp, #4]
 8010d92:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010d94:	9300      	str	r3, [sp, #0]
 8010d96:	4613      	mov	r3, r2
 8010d98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010d9a:	6839      	ldr	r1, [r7, #0]
 8010d9c:	6878      	ldr	r0, [r7, #4]
 8010d9e:	f7ff fd73 	bl	8010888 <_ZN6tflite3ops5micro3add7EvalAddEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
 8010da2:	e02f      	b.n	8010e04 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe4>
  } else if (output->type == kTfLiteUInt8 || output->type == kTfLiteInt8) {
 8010da4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010da6:	781b      	ldrb	r3, [r3, #0]
 8010da8:	2b03      	cmp	r3, #3
 8010daa:	d003      	beq.n	8010db4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0x94>
 8010dac:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dae:	781b      	ldrb	r3, [r3, #0]
 8010db0:	2b09      	cmp	r3, #9
 8010db2:	d117      	bne.n	8010de4 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xc4>
    TF_LITE_ENSURE_OK(context, EvalAddQuantized(context, node, params, &data,
 8010db4:	f107 0208 	add.w	r2, r7, #8
 8010db8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dba:	9302      	str	r3, [sp, #8]
 8010dbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dbe:	9301      	str	r3, [sp, #4]
 8010dc0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010dc2:	9300      	str	r3, [sp, #0]
 8010dc4:	4613      	mov	r3, r2
 8010dc6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010dc8:	6839      	ldr	r1, [r7, #0]
 8010dca:	6878      	ldr	r0, [r7, #4]
 8010dcc:	f7ff fe06 	bl	80109dc <_ZN6tflite3ops5micro3add16EvalAddQuantizedEP13TfLiteContextP10TfLiteNodeP15TfLiteAddParamsPKNS2_6OpDataEPK12TfLiteTensorSE_PSC_>
 8010dd0:	4603      	mov	r3, r0
 8010dd2:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
 8010dd6:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010dda:	2b00      	cmp	r3, #0
 8010ddc:	d011      	beq.n	8010e02 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe2>
 8010dde:	f897 303e 	ldrb.w	r3, [r7, #62]	; 0x3e
 8010de2:	e010      	b.n	8010e06 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
                                                input1, input2, output));
  } else {
    TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8010de4:	687b      	ldr	r3, [r7, #4]
 8010de6:	695c      	ldr	r4, [r3, #20]
 8010de8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010dea:	781b      	ldrb	r3, [r3, #0]
 8010dec:	4618      	mov	r0, r3
 8010dee:	f7fd fb7b 	bl	800e4e8 <TfLiteTypeGetName>
 8010df2:	4602      	mov	r2, r0
 8010df4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010df6:	781b      	ldrb	r3, [r3, #0]
 8010df8:	4905      	ldr	r1, [pc, #20]	; (8010e10 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 8010dfa:	6878      	ldr	r0, [r7, #4]
 8010dfc:	47a0      	blx	r4
                       TfLiteTypeGetName(output->type), output->type);
    return kTfLiteError;
 8010dfe:	2301      	movs	r3, #1
 8010e00:	e001      	b.n	8010e06 <_ZN6tflite3ops5micro3add4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
                                                input1, input2, output));
 8010e02:	bf00      	nop
  }

  return kTfLiteOk;
 8010e04:	2300      	movs	r3, #0
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3754      	adds	r7, #84	; 0x54
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd90      	pop	{r4, r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	0801e3e4 	.word	0x0801e3e4

08010e14 <_ZN6tflite3ops5micro12Register_ADDEv>:

}  // namespace add

TfLiteRegistration* Register_ADD() {
 8010e14:	b480      	push	{r7}
 8010e16:	af00      	add	r7, sp, #0
                                 /*invoke=*/add::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8010e18:	4b02      	ldr	r3, [pc, #8]	; (8010e24 <_ZN6tflite3ops5micro12Register_ADDEv+0x10>)
}
 8010e1a:	4618      	mov	r0, r3
 8010e1c:	46bd      	mov	sp, r7
 8010e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e22:	4770      	bx	lr
 8010e24:	20000064 	.word	0x20000064

08010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>:
}

// Correctly-rounded-to-nearest division by a power-of-two.
// Also known as a rounding arithmetic right shift.
template <typename IntegerType>
inline IntegerType RoundingDivideByPOT(IntegerType x, int exponent) {
 8010e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010e2a:	b089      	sub	sp, #36	; 0x24
 8010e2c:	af00      	add	r7, sp, #0
 8010e2e:	6078      	str	r0, [r7, #4]
 8010e30:	6039      	str	r1, [r7, #0]
  assert(exponent >= 0);
 8010e32:	6839      	ldr	r1, [r7, #0]
 8010e34:	2900      	cmp	r1, #0
 8010e36:	da06      	bge.n	8010e46 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x1e>
 8010e38:	4b31      	ldr	r3, [pc, #196]	; (8010f00 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xd8>)
 8010e3a:	4a32      	ldr	r2, [pc, #200]	; (8010f04 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8010e3c:	f44f 71b3 	mov.w	r1, #358	; 0x166
 8010e40:	4831      	ldr	r0, [pc, #196]	; (8010f08 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8010e42:	f00a f8bd 	bl	801afc0 <__assert_func>
  assert(exponent <= 31);
 8010e46:	6839      	ldr	r1, [r7, #0]
 8010e48:	291f      	cmp	r1, #31
 8010e4a:	dd06      	ble.n	8010e5a <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0x32>
 8010e4c:	4b2f      	ldr	r3, [pc, #188]	; (8010f0c <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe4>)
 8010e4e:	4a2d      	ldr	r2, [pc, #180]	; (8010f04 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xdc>)
 8010e50:	f240 1167 	movw	r1, #359	; 0x167
 8010e54:	482c      	ldr	r0, [pc, #176]	; (8010f08 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i+0xe0>)
 8010e56:	f00a f8b3 	bl	801afc0 <__assert_func>
  const IntegerType mask = Dup<IntegerType>((1ll << exponent) - 1);
 8010e5a:	f04f 0001 	mov.w	r0, #1
 8010e5e:	f04f 0100 	mov.w	r1, #0
 8010e62:	683c      	ldr	r4, [r7, #0]
 8010e64:	f1a4 0620 	sub.w	r6, r4, #32
 8010e68:	f1c4 0520 	rsb	r5, r4, #32
 8010e6c:	fa01 f304 	lsl.w	r3, r1, r4
 8010e70:	fa00 f606 	lsl.w	r6, r0, r6
 8010e74:	4333      	orrs	r3, r6
 8010e76:	fa20 f505 	lsr.w	r5, r0, r5
 8010e7a:	432b      	orrs	r3, r5
 8010e7c:	fa00 f204 	lsl.w	r2, r0, r4
 8010e80:	4613      	mov	r3, r2
 8010e82:	3b01      	subs	r3, #1
 8010e84:	4618      	mov	r0, r3
 8010e86:	f000 f91f 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010e8a:	61f8      	str	r0, [r7, #28]
  const IntegerType zero = Dup<IntegerType>(0);
 8010e8c:	2000      	movs	r0, #0
 8010e8e:	f000 f91b 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010e92:	61b8      	str	r0, [r7, #24]
  const IntegerType one = Dup<IntegerType>(1);
 8010e94:	2001      	movs	r0, #1
 8010e96:	f000 f917 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8010e9a:	6178      	str	r0, [r7, #20]
  const IntegerType remainder = BitAnd(x, mask);
 8010e9c:	69f9      	ldr	r1, [r7, #28]
 8010e9e:	6878      	ldr	r0, [r7, #4]
 8010ea0:	f000 f91d 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010ea4:	6138      	str	r0, [r7, #16]
  const IntegerType threshold =
      Add(ShiftRight(mask, 1), BitAnd(MaskIfLessThan(x, zero), one));
 8010ea6:	2101      	movs	r1, #1
 8010ea8:	69f8      	ldr	r0, [r7, #28]
 8010eaa:	f000 f926 	bl	80110fa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8010eae:	4604      	mov	r4, r0
 8010eb0:	69b9      	ldr	r1, [r7, #24]
 8010eb2:	6878      	ldr	r0, [r7, #4]
 8010eb4:	f000 f930 	bl	8011118 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8010eb8:	4603      	mov	r3, r0
 8010eba:	6979      	ldr	r1, [r7, #20]
 8010ebc:	4618      	mov	r0, r3
 8010ebe:	f000 f90e 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010ec2:	4603      	mov	r3, r0
 8010ec4:	4619      	mov	r1, r3
 8010ec6:	4620      	mov	r0, r4
 8010ec8:	f000 f93a 	bl	8011140 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8010ecc:	60f8      	str	r0, [r7, #12]
  return Add(ShiftRight(x, exponent),
 8010ece:	6839      	ldr	r1, [r7, #0]
 8010ed0:	6878      	ldr	r0, [r7, #4]
 8010ed2:	f000 f912 	bl	80110fa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>
 8010ed6:	4604      	mov	r4, r0
 8010ed8:	68f9      	ldr	r1, [r7, #12]
 8010eda:	6938      	ldr	r0, [r7, #16]
 8010edc:	f000 f93e 	bl	801115c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8010ee0:	4603      	mov	r3, r0
 8010ee2:	6979      	ldr	r1, [r7, #20]
 8010ee4:	4618      	mov	r0, r3
 8010ee6:	f000 f8fa 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8010eea:	4603      	mov	r3, r0
 8010eec:	4619      	mov	r1, r3
 8010eee:	4620      	mov	r0, r4
 8010ef0:	f000 f926 	bl	8011140 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8010ef4:	4603      	mov	r3, r0
             BitAnd(MaskIfGreaterThan(remainder, threshold), one));
}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3724      	adds	r7, #36	; 0x24
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010efe:	bf00      	nop
 8010f00:	0801e400 	.word	0x0801e400
 8010f04:	0801e410 	.word	0x0801e410
 8010f08:	0801e46c 	.word	0x0801e46c
 8010f0c:	0801e4f8 	.word	0x0801e4f8

08010f10 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_>:
    desc_stride *= input_shape.Dims(i);
  }
}

template <int N>
inline void NdArrayDescsForElementwiseBroadcast(
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b094      	sub	sp, #80	; 0x50
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	60f8      	str	r0, [r7, #12]
 8010f18:	60b9      	str	r1, [r7, #8]
 8010f1a:	607a      	str	r2, [r7, #4]
 8010f1c:	603b      	str	r3, [r7, #0]
    const RuntimeShape& input0_shape, const RuntimeShape& input1_shape,
    NdArrayDesc<N>* desc0_out, NdArrayDesc<N>* desc1_out) {
  TFLITE_DCHECK(desc0_out != nullptr);
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	d101      	bne.n	8010f28 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x18>
 8010f24:	f00a f844 	bl	801afb0 <abort>
  TFLITE_DCHECK(desc1_out != nullptr);
 8010f28:	683b      	ldr	r3, [r7, #0]
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d101      	bne.n	8010f32 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x22>
 8010f2e:	f00a f83f 	bl	801afb0 <abort>

  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
 8010f32:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f36:	68fa      	ldr	r2, [r7, #12]
 8010f38:	2104      	movs	r1, #4
 8010f3a:	4618      	mov	r0, r3
 8010f3c:	f7fe fc6b 	bl	800f816 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
 8010f40:	f107 0314 	add.w	r3, r7, #20
 8010f44:	68ba      	ldr	r2, [r7, #8]
 8010f46:	2104      	movs	r1, #4
 8010f48:	4618      	mov	r0, r3
 8010f4a:	f7fe fc64 	bl	800f816 <_ZN6tflite12RuntimeShape13ExtendedShapeEiRKS0_>

  // Copy dims to desc, calculating strides.
  CopyDimsToDesc<N>(extended_input0_shape, desc0_out);
 8010f4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f52:	6879      	ldr	r1, [r7, #4]
 8010f54:	4618      	mov	r0, r3
 8010f56:	f000 f915 	bl	8011184 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>
  CopyDimsToDesc<N>(extended_input1_shape, desc1_out);
 8010f5a:	f107 0314 	add.w	r3, r7, #20
 8010f5e:	6839      	ldr	r1, [r7, #0]
 8010f60:	4618      	mov	r0, r3
 8010f62:	f000 f90f 	bl	8011184 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>

  // Walk over each dimension. If the extents are equal do nothing.
  // Otherwise, set the desc with extent 1 to have extent equal to the other and
  // stride 0.
  for (int i = 0; i < N; ++i) {
 8010f66:	2300      	movs	r3, #0
 8010f68:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010f6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010f6c:	2b03      	cmp	r3, #3
 8010f6e:	dc34      	bgt.n	8010fda <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xca>
    const int extent0 = extended_input0_shape.Dims(i);
 8010f70:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010f74:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010f76:	4618      	mov	r0, r3
 8010f78:	f7fe fa2c 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f7c:	64b8      	str	r0, [r7, #72]	; 0x48
    const int extent1 = extended_input1_shape.Dims(i);
 8010f7e:	f107 0314 	add.w	r3, r7, #20
 8010f82:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8010f84:	4618      	mov	r0, r3
 8010f86:	f7fe fa25 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8010f8a:	6478      	str	r0, [r7, #68]	; 0x44
    if (extent0 != extent1) {
 8010f8c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8010f8e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010f90:	429a      	cmp	r2, r3
 8010f92:	d01e      	beq.n	8010fd2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc2>
      if (extent0 == 1) {
 8010f94:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010f96:	2b01      	cmp	r3, #1
 8010f98:	d10b      	bne.n	8010fb2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xa2>
        desc0_out->strides[i] = 0;
 8010f9a:	687b      	ldr	r3, [r7, #4]
 8010f9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010f9e:	3204      	adds	r2, #4
 8010fa0:	2100      	movs	r1, #0
 8010fa2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        desc0_out->extents[i] = extent1;
 8010fa6:	687b      	ldr	r3, [r7, #4]
 8010fa8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010faa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8010fac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8010fb0:	e00f      	b.n	8010fd2 <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xc2>
      } else {
        TFLITE_DCHECK_EQ(extent1, 1);
 8010fb2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010fb4:	2b01      	cmp	r3, #1
 8010fb6:	d001      	beq.n	8010fbc <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0xac>
 8010fb8:	f009 fffa 	bl	801afb0 <abort>
        desc1_out->strides[i] = 0;
 8010fbc:	683b      	ldr	r3, [r7, #0]
 8010fbe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fc0:	3204      	adds	r2, #4
 8010fc2:	2100      	movs	r1, #0
 8010fc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
        desc1_out->extents[i] = extent0;
 8010fc8:	683b      	ldr	r3, [r7, #0]
 8010fca:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010fcc:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8010fce:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for (int i = 0; i < N; ++i) {
 8010fd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8010fd4:	3301      	adds	r3, #1
 8010fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010fd8:	e7c7      	b.n	8010f6a <_ZN6tflite35NdArrayDescsForElementwiseBroadcastILi4EEEvRKNS_12RuntimeShapeES3_PNS_11NdArrayDescIXT_EEES6_+0x5a>
  auto extended_input1_shape = RuntimeShape::ExtendedShape(N, input1_shape);
 8010fda:	f107 0314 	add.w	r3, r7, #20
 8010fde:	4618      	mov	r0, r3
 8010fe0:	f7fe f9d6 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  auto extended_input0_shape = RuntimeShape::ExtendedShape(N, input0_shape);
 8010fe4:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8010fe8:	4618      	mov	r0, r3
 8010fea:	f7fe f9d1 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      }
    }
  }
}
 8010fee:	bf00      	nop
 8010ff0:	3750      	adds	r7, #80	; 0x50
 8010ff2:	46bd      	mov	sp, r7
 8010ff4:	bd80      	pop	{r7, pc}
	...

08010ff8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>:
                                               int32_t* act_max);

// Calculates the useful range of an activation layer given its activation
// tensor.a
template <typename T>
void CalculateActivationRange(TfLiteFusedActivation activation,
 8010ff8:	b580      	push	{r7, lr}
 8010ffa:	b084      	sub	sp, #16
 8010ffc:	af00      	add	r7, sp, #0
 8010ffe:	4603      	mov	r3, r0
 8011000:	60b9      	str	r1, [r7, #8]
 8011002:	607a      	str	r2, [r7, #4]
 8011004:	73fb      	strb	r3, [r7, #15]
                              T* activation_min, T* activation_max) {
  if (activation == kTfLiteActRelu) {
 8011006:	7bfb      	ldrb	r3, [r7, #15]
 8011008:	2b01      	cmp	r3, #1
 801100a:	d10b      	bne.n	8011024 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x2c>
    *activation_min = 0;
 801100c:	68bb      	ldr	r3, [r7, #8]
 801100e:	f04f 0200 	mov.w	r2, #0
 8011012:	601a      	str	r2, [r3, #0]
    *activation_max = std::numeric_limits<T>::max();
 8011014:	f7fe fafc 	bl	800f610 <_ZNSt14numeric_limitsIfE3maxEv>
 8011018:	eef0 7a40 	vmov.f32	s15, s0
 801101c:	687b      	ldr	r3, [r7, #4]
 801101e:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = 1;
  } else {
    *activation_min = std::numeric_limits<T>::lowest();
    *activation_max = std::numeric_limits<T>::max();
  }
}
 8011022:	e023      	b.n	801106c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActRelu6) {
 8011024:	7bfb      	ldrb	r3, [r7, #15]
 8011026:	2b03      	cmp	r3, #3
 8011028:	d107      	bne.n	801103a <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x42>
    *activation_min = 0;
 801102a:	68bb      	ldr	r3, [r7, #8]
 801102c:	f04f 0200 	mov.w	r2, #0
 8011030:	601a      	str	r2, [r3, #0]
    *activation_max = 6;
 8011032:	687b      	ldr	r3, [r7, #4]
 8011034:	4a0f      	ldr	r2, [pc, #60]	; (8011074 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x7c>)
 8011036:	601a      	str	r2, [r3, #0]
}
 8011038:	e018      	b.n	801106c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
  } else if (activation == kTfLiteActReluN1To1) {
 801103a:	7bfb      	ldrb	r3, [r7, #15]
 801103c:	2b02      	cmp	r3, #2
 801103e:	d107      	bne.n	8011050 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x58>
    *activation_min = -1;
 8011040:	68bb      	ldr	r3, [r7, #8]
 8011042:	4a0d      	ldr	r2, [pc, #52]	; (8011078 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x80>)
 8011044:	601a      	str	r2, [r3, #0]
    *activation_max = 1;
 8011046:	687b      	ldr	r3, [r7, #4]
 8011048:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 801104c:	601a      	str	r2, [r3, #0]
}
 801104e:	e00d      	b.n	801106c <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_+0x74>
    *activation_min = std::numeric_limits<T>::lowest();
 8011050:	f7fe faec 	bl	800f62c <_ZNSt14numeric_limitsIfE6lowestEv>
 8011054:	eef0 7a40 	vmov.f32	s15, s0
 8011058:	68bb      	ldr	r3, [r7, #8]
 801105a:	edc3 7a00 	vstr	s15, [r3]
    *activation_max = std::numeric_limits<T>::max();
 801105e:	f7fe fad7 	bl	800f610 <_ZNSt14numeric_limitsIfE3maxEv>
 8011062:	eef0 7a40 	vmov.f32	s15, s0
 8011066:	687b      	ldr	r3, [r7, #4]
 8011068:	edc3 7a00 	vstr	s15, [r3]
}
 801106c:	bf00      	nop
 801106e:	3710      	adds	r7, #16
 8011070:	46bd      	mov	sp, r7
 8011072:	bd80      	pop	{r7, pc}
 8011074:	40c00000 	.word	0x40c00000
 8011078:	bf800000 	.word	0xbf800000

0801107c <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvffPT_>:
  int32 output_multiplier_identity;
  int32 output_shift_identity;
};

template <typename P>
inline void SetActivationParams(float min, float max, P* params) {
 801107c:	b480      	push	{r7}
 801107e:	b085      	sub	sp, #20
 8011080:	af00      	add	r7, sp, #0
 8011082:	ed87 0a03 	vstr	s0, [r7, #12]
 8011086:	edc7 0a02 	vstr	s1, [r7, #8]
 801108a:	6078      	str	r0, [r7, #4]
  params->float_activation_min = min;
 801108c:	687b      	ldr	r3, [r7, #4]
 801108e:	68fa      	ldr	r2, [r7, #12]
 8011090:	635a      	str	r2, [r3, #52]	; 0x34
  params->float_activation_max = max;
 8011092:	687b      	ldr	r3, [r7, #4]
 8011094:	68ba      	ldr	r2, [r7, #8]
 8011096:	639a      	str	r2, [r3, #56]	; 0x38
}
 8011098:	bf00      	nop
 801109a:	3714      	adds	r7, #20
 801109c:	46bd      	mov	sp, r7
 801109e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110a2:	4770      	bx	lr

080110a4 <_ZN6tflite19SetActivationParamsINS_16ArithmeticParamsEEEvllPT_>:

template <typename P>
inline void SetActivationParams(int32 min, int32 max, P* params) {
 80110a4:	b480      	push	{r7}
 80110a6:	b085      	sub	sp, #20
 80110a8:	af00      	add	r7, sp, #0
 80110aa:	60f8      	str	r0, [r7, #12]
 80110ac:	60b9      	str	r1, [r7, #8]
 80110ae:	607a      	str	r2, [r7, #4]
  params->quantized_activation_min = min;
 80110b0:	687b      	ldr	r3, [r7, #4]
 80110b2:	68fa      	ldr	r2, [r7, #12]
 80110b4:	62da      	str	r2, [r3, #44]	; 0x2c
  params->quantized_activation_max = max;
 80110b6:	687b      	ldr	r3, [r7, #4]
 80110b8:	68ba      	ldr	r2, [r7, #8]
 80110ba:	631a      	str	r2, [r3, #48]	; 0x30
}
 80110bc:	bf00      	nop
 80110be:	3714      	adds	r7, #20
 80110c0:	46bd      	mov	sp, r7
 80110c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110c6:	4770      	bx	lr

080110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>:
tRawType Dup(typename FixedPointRawTypeTraits<tRawType>::ScalarRawType x) {
 80110c8:	b480      	push	{r7}
 80110ca:	b083      	sub	sp, #12
 80110cc:	af00      	add	r7, sp, #0
 80110ce:	6078      	str	r0, [r7, #4]
  return x;
 80110d0:	687b      	ldr	r3, [r7, #4]
}
 80110d2:	4618      	mov	r0, r3
 80110d4:	370c      	adds	r7, #12
 80110d6:	46bd      	mov	sp, r7
 80110d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110dc:	4770      	bx	lr

080110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>:
tIntegerType BitAnd(tIntegerType a, tIntegerType b) {
 80110de:	b480      	push	{r7}
 80110e0:	b083      	sub	sp, #12
 80110e2:	af00      	add	r7, sp, #0
 80110e4:	6078      	str	r0, [r7, #4]
 80110e6:	6039      	str	r1, [r7, #0]
  return a & b;
 80110e8:	687a      	ldr	r2, [r7, #4]
 80110ea:	683b      	ldr	r3, [r7, #0]
 80110ec:	4013      	ands	r3, r2
}
 80110ee:	4618      	mov	r0, r3
 80110f0:	370c      	adds	r7, #12
 80110f2:	46bd      	mov	sp, r7
 80110f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110f8:	4770      	bx	lr

080110fa <_ZN8gemmlowp10ShiftRightIlEET_S1_i>:
tIntegerType ShiftRight(tIntegerType a, int offset) {
 80110fa:	b480      	push	{r7}
 80110fc:	b083      	sub	sp, #12
 80110fe:	af00      	add	r7, sp, #0
 8011100:	6078      	str	r0, [r7, #4]
 8011102:	6039      	str	r1, [r7, #0]
  return a >> offset;
 8011104:	687a      	ldr	r2, [r7, #4]
 8011106:	683b      	ldr	r3, [r7, #0]
 8011108:	fa42 f303 	asr.w	r3, r2, r3
}
 801110c:	4618      	mov	r0, r3
 801110e:	370c      	adds	r7, #12
 8011110:	46bd      	mov	sp, r7
 8011112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011116:	4770      	bx	lr

08011118 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>:
tIntegerType MaskIfLessThan(tIntegerType a, tIntegerType b) {
 8011118:	b580      	push	{r7, lr}
 801111a:	b082      	sub	sp, #8
 801111c:	af00      	add	r7, sp, #0
 801111e:	6078      	str	r0, [r7, #4]
 8011120:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a < b);
 8011122:	687a      	ldr	r2, [r7, #4]
 8011124:	683b      	ldr	r3, [r7, #0]
 8011126:	429a      	cmp	r2, r3
 8011128:	bfb4      	ite	lt
 801112a:	2301      	movlt	r3, #1
 801112c:	2300      	movge	r3, #0
 801112e:	b2db      	uxtb	r3, r3
 8011130:	4618      	mov	r0, r3
 8011132:	f000 f853 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8011136:	4603      	mov	r3, r0
}
 8011138:	4618      	mov	r0, r3
 801113a:	3708      	adds	r7, #8
 801113c:	46bd      	mov	sp, r7
 801113e:	bd80      	pop	{r7, pc}

08011140 <_ZN8gemmlowp3AddIlEET_S1_S1_>:
tIntegerType Add(tIntegerType a, tIntegerType b) {
 8011140:	b480      	push	{r7}
 8011142:	b083      	sub	sp, #12
 8011144:	af00      	add	r7, sp, #0
 8011146:	6078      	str	r0, [r7, #4]
 8011148:	6039      	str	r1, [r7, #0]
  return a + b;
 801114a:	687a      	ldr	r2, [r7, #4]
 801114c:	683b      	ldr	r3, [r7, #0]
 801114e:	4413      	add	r3, r2
}
 8011150:	4618      	mov	r0, r3
 8011152:	370c      	adds	r7, #12
 8011154:	46bd      	mov	sp, r7
 8011156:	f85d 7b04 	ldr.w	r7, [sp], #4
 801115a:	4770      	bx	lr

0801115c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>:
tIntegerType MaskIfGreaterThan(tIntegerType a, tIntegerType b) {
 801115c:	b580      	push	{r7, lr}
 801115e:	b082      	sub	sp, #8
 8011160:	af00      	add	r7, sp, #0
 8011162:	6078      	str	r0, [r7, #4]
 8011164:	6039      	str	r1, [r7, #0]
  return MaskIfNonZero<tIntegerType>(a > b);
 8011166:	687a      	ldr	r2, [r7, #4]
 8011168:	683b      	ldr	r3, [r7, #0]
 801116a:	429a      	cmp	r2, r3
 801116c:	bfcc      	ite	gt
 801116e:	2301      	movgt	r3, #1
 8011170:	2300      	movle	r3, #0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	4618      	mov	r0, r3
 8011176:	f000 f831 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 801117a:	4603      	mov	r3, r0
}
 801117c:	4618      	mov	r0, r3
 801117e:	3708      	adds	r7, #8
 8011180:	46bd      	mov	sp, r7
 8011182:	bd80      	pop	{r7, pc}

08011184 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE>:
inline void CopyDimsToDesc(const RuntimeShape& input_shape,
 8011184:	b580      	push	{r7, lr}
 8011186:	b084      	sub	sp, #16
 8011188:	af00      	add	r7, sp, #0
 801118a:	6078      	str	r0, [r7, #4]
 801118c:	6039      	str	r1, [r7, #0]
  int desc_stride = 1;
 801118e:	2301      	movs	r3, #1
 8011190:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 8011192:	2303      	movs	r3, #3
 8011194:	60bb      	str	r3, [r7, #8]
 8011196:	68bb      	ldr	r3, [r7, #8]
 8011198:	2b00      	cmp	r3, #0
 801119a:	db1b      	blt.n	80111d4 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x50>
    desc_out->extents[i] = input_shape.Dims(i);
 801119c:	68b9      	ldr	r1, [r7, #8]
 801119e:	6878      	ldr	r0, [r7, #4]
 80111a0:	f7fe f918 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80111a4:	4601      	mov	r1, r0
 80111a6:	683b      	ldr	r3, [r7, #0]
 80111a8:	68ba      	ldr	r2, [r7, #8]
 80111aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_out->strides[i] = desc_stride;
 80111ae:	683b      	ldr	r3, [r7, #0]
 80111b0:	68ba      	ldr	r2, [r7, #8]
 80111b2:	3204      	adds	r2, #4
 80111b4:	68f9      	ldr	r1, [r7, #12]
 80111b6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    desc_stride *= input_shape.Dims(i);
 80111ba:	68b9      	ldr	r1, [r7, #8]
 80111bc:	6878      	ldr	r0, [r7, #4]
 80111be:	f7fe f909 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80111c2:	4602      	mov	r2, r0
 80111c4:	68fb      	ldr	r3, [r7, #12]
 80111c6:	fb02 f303 	mul.w	r3, r2, r3
 80111ca:	60fb      	str	r3, [r7, #12]
  for (int i = N - 1; i >= 0; --i) {
 80111cc:	68bb      	ldr	r3, [r7, #8]
 80111ce:	3b01      	subs	r3, #1
 80111d0:	60bb      	str	r3, [r7, #8]
 80111d2:	e7e0      	b.n	8011196 <_ZN6tflite14CopyDimsToDescILi4EEEvRKNS_12RuntimeShapeEPNS_11NdArrayDescIXT_EEE+0x12>
}
 80111d4:	bf00      	nop
 80111d6:	3710      	adds	r7, #16
 80111d8:	46bd      	mov	sp, r7
 80111da:	bd80      	pop	{r7, pc}

080111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>:
tIntegerType MaskIfNonZero(tIntegerType a) {
 80111dc:	b580      	push	{r7, lr}
 80111de:	b082      	sub	sp, #8
 80111e0:	af00      	add	r7, sp, #0
 80111e2:	6078      	str	r0, [r7, #4]
  return a ? BitNot(zero) : zero;
 80111e4:	687b      	ldr	r3, [r7, #4]
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d004      	beq.n	80111f4 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x18>
 80111ea:	2000      	movs	r0, #0
 80111ec:	f000 f807 	bl	80111fe <_ZN8gemmlowp6BitNotIlEET_S1_>
 80111f0:	4603      	mov	r3, r0
 80111f2:	e000      	b.n	80111f6 <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_+0x1a>
 80111f4:	2300      	movs	r3, #0
}
 80111f6:	4618      	mov	r0, r3
 80111f8:	3708      	adds	r7, #8
 80111fa:	46bd      	mov	sp, r7
 80111fc:	bd80      	pop	{r7, pc}

080111fe <_ZN8gemmlowp6BitNotIlEET_S1_>:
tIntegerType BitNot(tIntegerType a) {
 80111fe:	b480      	push	{r7}
 8011200:	b083      	sub	sp, #12
 8011202:	af00      	add	r7, sp, #0
 8011204:	6078      	str	r0, [r7, #4]
  return ~a;
 8011206:	687b      	ldr	r3, [r7, #4]
 8011208:	43db      	mvns	r3, r3
}
 801120a:	4618      	mov	r0, r3
 801120c:	370c      	adds	r7, #12
 801120e:	46bd      	mov	sp, r7
 8011210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011214:	4770      	bx	lr

08011216 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>:
inline const T* GetTensorData(const TfLiteTensor* tensor) {
 8011216:	b480      	push	{r7}
 8011218:	b083      	sub	sp, #12
 801121a:	af00      	add	r7, sp, #0
 801121c:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 801121e:	687b      	ldr	r3, [r7, #4]
 8011220:	2b00      	cmp	r3, #0
 8011222:	d002      	beq.n	801122a <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x14>
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	685b      	ldr	r3, [r3, #4]
                           : nullptr;
 8011228:	e000      	b.n	801122c <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor+0x16>
  return tensor != nullptr ? reinterpret_cast<const T*>(tensor->data.raw)
 801122a:	2300      	movs	r3, #0
}
 801122c:	4618      	mov	r0, r3
 801122e:	370c      	adds	r7, #12
 8011230:	46bd      	mov	sp, r7
 8011232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011236:	4770      	bx	lr

08011238 <_ZN6tflite9NumInputsEPK10TfLiteNode>:
inline int NumInputs(const TfLiteNode* node) { return node->inputs->size; }
 8011238:	b480      	push	{r7}
 801123a:	b083      	sub	sp, #12
 801123c:	af00      	add	r7, sp, #0
 801123e:	6078      	str	r0, [r7, #4]
 8011240:	687b      	ldr	r3, [r7, #4]
 8011242:	681b      	ldr	r3, [r3, #0]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	4618      	mov	r0, r3
 8011248:	370c      	adds	r7, #12
 801124a:	46bd      	mov	sp, r7
 801124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011250:	4770      	bx	lr

08011252 <_ZN6tflite10NumOutputsEPK10TfLiteNode>:
inline int NumOutputs(const TfLiteNode* node) { return node->outputs->size; }
 8011252:	b480      	push	{r7}
 8011254:	b083      	sub	sp, #12
 8011256:	af00      	add	r7, sp, #0
 8011258:	6078      	str	r0, [r7, #4]
 801125a:	687b      	ldr	r3, [r7, #4]
 801125c:	685b      	ldr	r3, [r3, #4]
 801125e:	681b      	ldr	r3, [r3, #0]
 8011260:	4618      	mov	r0, r3
 8011262:	370c      	adds	r7, #12
 8011264:	46bd      	mov	sp, r7
 8011266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801126a:	4770      	bx	lr

0801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>:
                       const RuntimeShape& shape2, int index2) {
 801126c:	b590      	push	{r4, r7, lr}
 801126e:	b085      	sub	sp, #20
 8011270:	af00      	add	r7, sp, #0
 8011272:	60f8      	str	r0, [r7, #12]
 8011274:	60b9      	str	r1, [r7, #8]
 8011276:	607a      	str	r2, [r7, #4]
 8011278:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(shape1.Dims(index1), shape2.Dims(index2));
 801127a:	68b9      	ldr	r1, [r7, #8]
 801127c:	68f8      	ldr	r0, [r7, #12]
 801127e:	f7fe f8a9 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011282:	4604      	mov	r4, r0
 8011284:	6839      	ldr	r1, [r7, #0]
 8011286:	6878      	ldr	r0, [r7, #4]
 8011288:	f7fe f8a4 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801128c:	4603      	mov	r3, r0
 801128e:	429c      	cmp	r4, r3
 8011290:	d001      	beq.n	8011296 <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i+0x2a>
 8011292:	f009 fe8d 	bl	801afb0 <abort>
  return shape1.Dims(index1);
 8011296:	68b9      	ldr	r1, [r7, #8]
 8011298:	68f8      	ldr	r0, [r7, #12]
 801129a:	f7fe f89b 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801129e:	4603      	mov	r3, r0
}
 80112a0:	4618      	mov	r0, r3
 80112a2:	3714      	adds	r7, #20
 80112a4:	46bd      	mov	sp, r7
 80112a6:	bd90      	pop	{r4, r7, pc}

080112a8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>:
                                           int shift) {
 80112a8:	b580      	push	{r7, lr}
 80112aa:	b086      	sub	sp, #24
 80112ac:	af00      	add	r7, sp, #0
 80112ae:	60f8      	str	r0, [r7, #12]
 80112b0:	60b9      	str	r1, [r7, #8]
 80112b2:	607a      	str	r2, [r7, #4]
  int left_shift = shift > 0 ? shift : 0;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80112ba:	617b      	str	r3, [r7, #20]
  int right_shift = shift > 0 ? 0 : -shift;
 80112bc:	687b      	ldr	r3, [r7, #4]
 80112be:	2b00      	cmp	r3, #0
 80112c0:	dc02      	bgt.n	80112c8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x20>
 80112c2:	687b      	ldr	r3, [r7, #4]
 80112c4:	425b      	negs	r3, r3
 80112c6:	e000      	b.n	80112ca <_ZN6tflite29MultiplyByQuantizedMultiplierElli+0x22>
 80112c8:	2300      	movs	r3, #0
 80112ca:	613b      	str	r3, [r7, #16]
  return RoundingDivideByPOT(SaturatingRoundingDoublingHighMul(
 80112cc:	68fa      	ldr	r2, [r7, #12]
 80112ce:	697b      	ldr	r3, [r7, #20]
 80112d0:	fa02 f303 	lsl.w	r3, r2, r3
 80112d4:	68b9      	ldr	r1, [r7, #8]
 80112d6:	4618      	mov	r0, r3
 80112d8:	f7fe f9b4 	bl	800f644 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 80112dc:	4603      	mov	r3, r0
 80112de:	6939      	ldr	r1, [r7, #16]
 80112e0:	4618      	mov	r0, r3
 80112e2:	f7ff fda1 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80112e6:	4603      	mov	r3, r0
}
 80112e8:	4618      	mov	r0, r3
 80112ea:	3718      	adds	r7, #24
 80112ec:	46bd      	mov	sp, r7
 80112ee:	bd80      	pop	{r7, pc}

080112f0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const float* input_data, const RuntimeShape& filter_shape,
                 const float* filter_data, const RuntimeShape& bias_shape,
                 const float* bias_data, const RuntimeShape& output_shape,
                 float* output_data, const RuntimeShape& im2col_shape,
                 float* im2col_data) {
 80112f0:	b590      	push	{r4, r7, lr}
 80112f2:	ed2d 8b02 	vpush	{d8}
 80112f6:	b0a7      	sub	sp, #156	; 0x9c
 80112f8:	af02      	add	r7, sp, #8
 80112fa:	60f8      	str	r0, [r7, #12]
 80112fc:	60b9      	str	r1, [r7, #8]
 80112fe:	607a      	str	r2, [r7, #4]
 8011300:	603b      	str	r3, [r7, #0]
  const int stride_width = params.stride_width;
 8011302:	68fb      	ldr	r3, [r7, #12]
 8011304:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8011308:	66bb      	str	r3, [r7, #104]	; 0x68
  const int stride_height = params.stride_height;
 801130a:	68fb      	ldr	r3, [r7, #12]
 801130c:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011310:	667b      	str	r3, [r7, #100]	; 0x64
  const int dilation_width_factor = params.dilation_width_factor;
 8011312:	68fb      	ldr	r3, [r7, #12]
 8011314:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8011318:	663b      	str	r3, [r7, #96]	; 0x60
  const int dilation_height_factor = params.dilation_height_factor;
 801131a:	68fb      	ldr	r3, [r7, #12]
 801131c:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011320:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int pad_width = params.padding_values.width;
 8011322:	68fb      	ldr	r3, [r7, #12]
 8011324:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011328:	65bb      	str	r3, [r7, #88]	; 0x58
  const int pad_height = params.padding_values.height;
 801132a:	68fb      	ldr	r3, [r7, #12]
 801132c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011330:	657b      	str	r3, [r7, #84]	; 0x54
  const float output_activation_min = params.float_activation_min;
 8011332:	68fb      	ldr	r3, [r7, #12]
 8011334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011336:	653b      	str	r3, [r7, #80]	; 0x50
  const float output_activation_max = params.float_activation_max;
 8011338:	68fb      	ldr	r3, [r7, #12]
 801133a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801133c:	64fb      	str	r3, [r7, #76]	; 0x4c
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801133e:	68b8      	ldr	r0, [r7, #8]
 8011340:	f7fe f83c 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011344:	4603      	mov	r3, r0
 8011346:	2b04      	cmp	r3, #4
 8011348:	d001      	beq.n	801134e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x5e>
 801134a:	f009 fe31 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801134e:	6838      	ldr	r0, [r7, #0]
 8011350:	f7fe f834 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011354:	4603      	mov	r3, r0
 8011356:	2b04      	cmp	r3, #4
 8011358:	d001      	beq.n	801135e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x6e>
 801135a:	f009 fe29 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801135e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8011362:	f7fe f82b 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011366:	4603      	mov	r3, r0
 8011368:	2b04      	cmp	r3, #4
 801136a:	d001      	beq.n	8011370 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x80>
 801136c:	f009 fe20 	bl	801afb0 <abort>

  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8011370:	2300      	movs	r3, #0
 8011372:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011376:	2100      	movs	r1, #0
 8011378:	68b8      	ldr	r0, [r7, #8]
 801137a:	f7ff ff77 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801137e:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 8011380:	2303      	movs	r3, #3
 8011382:	683a      	ldr	r2, [r7, #0]
 8011384:	2103      	movs	r1, #3
 8011386:	68b8      	ldr	r0, [r7, #8]
 8011388:	f7ff ff70 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801138c:	6478      	str	r0, [r7, #68]	; 0x44
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 801138e:	2303      	movs	r3, #3
 8011390:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8011394:	2100      	movs	r1, #0
 8011396:	6838      	ldr	r0, [r7, #0]
 8011398:	f7ff ff68 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801139c:	6438      	str	r0, [r7, #64]	; 0x40
  if (bias_data) {
 801139e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80113a2:	2b00      	cmp	r3, #0
 80113a4:	d009      	beq.n	80113ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80113a6:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80113aa:	f7fe f8a3 	bl	800f4f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80113ae:	4602      	mov	r2, r0
 80113b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80113b2:	4293      	cmp	r3, r2
 80113b4:	d001      	beq.n	80113ba <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0xca>
 80113b6:	f009 fdfb 	bl	801afb0 <abort>
  }
  const int input_height = input_shape.Dims(1);
 80113ba:	2101      	movs	r1, #1
 80113bc:	68b8      	ldr	r0, [r7, #8]
 80113be:	f7fe f809 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80113c2:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int input_width = input_shape.Dims(2);
 80113c4:	2102      	movs	r1, #2
 80113c6:	68b8      	ldr	r0, [r7, #8]
 80113c8:	f7fe f804 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80113cc:	63b8      	str	r0, [r7, #56]	; 0x38
  const int filter_height = filter_shape.Dims(1);
 80113ce:	2101      	movs	r1, #1
 80113d0:	6838      	ldr	r0, [r7, #0]
 80113d2:	f7fd ffff 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80113d6:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_width = filter_shape.Dims(2);
 80113d8:	2102      	movs	r1, #2
 80113da:	6838      	ldr	r0, [r7, #0]
 80113dc:	f7fd fffa 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80113e0:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_height = output_shape.Dims(1);
 80113e2:	2101      	movs	r1, #1
 80113e4:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80113e8:	f7fd fff4 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80113ec:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_width = output_shape.Dims(2);
 80113ee:	2102      	movs	r1, #2
 80113f0:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80113f4:	f7fd ffee 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80113f8:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int batch = 0; batch < batches; ++batch) {
 80113fa:	2300      	movs	r3, #0
 80113fc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011400:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011404:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011406:	429a      	cmp	r2, r3
 8011408:	f280 80de 	bge.w	80115c8 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2d8>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801140c:	2300      	movs	r3, #0
 801140e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011412:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011418:	429a      	cmp	r2, r3
 801141a:	f280 80cf 	bge.w	80115bc <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2cc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801141e:	2300      	movs	r3, #0
 8011420:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011424:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801142a:	429a      	cmp	r2, r3
 801142c:	f280 80c0 	bge.w	80115b0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2c0>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011430:	2300      	movs	r3, #0
 8011432:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011436:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801143a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801143c:	429a      	cmp	r2, r3
 801143e:	f280 80b1 	bge.w	80115a4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x2b4>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8011442:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011446:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011448:	fb02 f203 	mul.w	r2, r2, r3
 801144c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801144e:	1ad3      	subs	r3, r2, r3
 8011450:	627b      	str	r3, [r7, #36]	; 0x24
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8011452:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011456:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011458:	fb02 f203 	mul.w	r2, r2, r3
 801145c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801145e:	1ad3      	subs	r3, r2, r3
 8011460:	623b      	str	r3, [r7, #32]
          float total = 0.f;
 8011462:	f04f 0300 	mov.w	r3, #0
 8011466:	67fb      	str	r3, [r7, #124]	; 0x7c
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011468:	2300      	movs	r3, #0
 801146a:	67bb      	str	r3, [r7, #120]	; 0x78
 801146c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801146e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011470:	429a      	cmp	r2, r3
 8011472:	da5e      	bge.n	8011532 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x242>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011474:	2300      	movs	r3, #0
 8011476:	677b      	str	r3, [r7, #116]	; 0x74
 8011478:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801147a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801147c:	429a      	cmp	r2, r3
 801147e:	da54      	bge.n	801152a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x23a>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011480:	2300      	movs	r3, #0
 8011482:	673b      	str	r3, [r7, #112]	; 0x70
 8011484:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011486:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011488:	429a      	cmp	r2, r3
 801148a:	da4a      	bge.n	8011522 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x232>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 801148c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 801148e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011490:	fb02 f303 	mul.w	r3, r2, r3
 8011494:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011496:	4413      	add	r3, r2
 8011498:	61fb      	str	r3, [r7, #28]
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 801149a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801149c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 801149e:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80114a2:	6a3a      	ldr	r2, [r7, #32]
 80114a4:	4413      	add	r3, r2
 80114a6:	61bb      	str	r3, [r7, #24]
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80114a8:	69fb      	ldr	r3, [r7, #28]
 80114aa:	2b00      	cmp	r3, #0
 80114ac:	db35      	blt.n	801151a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80114ae:	69fa      	ldr	r2, [r7, #28]
 80114b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80114b2:	429a      	cmp	r2, r3
 80114b4:	da31      	bge.n	801151a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80114b6:	69bb      	ldr	r3, [r7, #24]
 80114b8:	2b00      	cmp	r3, #0
 80114ba:	db2e      	blt.n	801151a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
 80114bc:	69ba      	ldr	r2, [r7, #24]
 80114be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80114c0:	429a      	cmp	r2, r3
 80114c2:	da2a      	bge.n	801151a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x22a>
                    (in_y < input_height)) {
                  float input_value = input_data[Offset(
 80114c4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114c6:	9300      	str	r3, [sp, #0]
 80114c8:	69fb      	ldr	r3, [r7, #28]
 80114ca:	69ba      	ldr	r2, [r7, #24]
 80114cc:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 80114d0:	68b8      	ldr	r0, [r7, #8]
 80114d2:	f7fe f9f7 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80114d6:	4603      	mov	r3, r0
                      input_shape, batch, in_y, in_x, in_channel)];
 80114d8:	009b      	lsls	r3, r3, #2
 80114da:	687a      	ldr	r2, [r7, #4]
 80114dc:	4413      	add	r3, r2
 80114de:	681b      	ldr	r3, [r3, #0]
 80114e0:	617b      	str	r3, [r7, #20]
                  float filter_value =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 80114e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80114e4:	9300      	str	r3, [sp, #0]
 80114e6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80114e8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80114ea:	f8d7 1080 	ldr.w	r1, [r7, #128]	; 0x80
 80114ee:	6838      	ldr	r0, [r7, #0]
 80114f0:	f7fe f9e8 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80114f4:	4603      	mov	r3, r0
                                         filter_x, in_channel)];
 80114f6:	009b      	lsls	r3, r3, #2
 80114f8:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80114fc:	4413      	add	r3, r2
 80114fe:	681b      	ldr	r3, [r3, #0]
 8011500:	613b      	str	r3, [r7, #16]
                  total += (input_value * filter_value);
 8011502:	ed97 7a05 	vldr	s14, [r7, #20]
 8011506:	edd7 7a04 	vldr	s15, [r7, #16]
 801150a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801150e:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8011512:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011516:	edc7 7a1f 	vstr	s15, [r7, #124]	; 0x7c
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801151a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801151c:	3301      	adds	r3, #1
 801151e:	673b      	str	r3, [r7, #112]	; 0x70
 8011520:	e7b0      	b.n	8011484 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x194>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011522:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8011524:	3301      	adds	r3, #1
 8011526:	677b      	str	r3, [r7, #116]	; 0x74
 8011528:	e7a6      	b.n	8011478 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x188>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 801152a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801152c:	3301      	adds	r3, #1
 801152e:	67bb      	str	r3, [r7, #120]	; 0x78
 8011530:	e79c      	b.n	801146c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x17c>
                }
              }
            }
          }
          float bias_value = 0.0f;
 8011532:	f04f 0300 	mov.w	r3, #0
 8011536:	66fb      	str	r3, [r7, #108]	; 0x6c
          if (bias_data) {
 8011538:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 801153c:	2b00      	cmp	r3, #0
 801153e:	d007      	beq.n	8011550 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x260>
            bias_value = bias_data[out_channel];
 8011540:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011544:	009b      	lsls	r3, r3, #2
 8011546:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 801154a:	4413      	add	r3, r2
 801154c:	681b      	ldr	r3, [r3, #0]
 801154e:	66fb      	str	r3, [r7, #108]	; 0x6c
          }
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
              ActivationFunctionWithMinMax(total + bias_value,
 8011550:	ed97 7a1f 	vldr	s14, [r7, #124]	; 0x7c
 8011554:	edd7 7a1b 	vldr	s15, [r7, #108]	; 0x6c
 8011558:	ee37 8a27 	vadd.f32	s16, s14, s15
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 801155c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011560:	9300      	str	r3, [sp, #0]
 8011562:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011566:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801156a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801156e:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8011572:	f7fe f9a7 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011576:	4603      	mov	r3, r0
 8011578:	009b      	lsls	r3, r3, #2
 801157a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 801157e:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(total + bias_value,
 8011580:	ed97 1a13 	vldr	s2, [r7, #76]	; 0x4c
 8011584:	edd7 0a14 	vldr	s1, [r7, #80]	; 0x50
 8011588:	eeb0 0a48 	vmov.f32	s0, s16
 801158c:	f7fe fa15 	bl	800f9ba <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 8011590:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8011594:	edc4 7a00 	vstr	s15, [r4]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011598:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 801159c:	3301      	adds	r3, #1
 801159e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80115a2:	e748      	b.n	8011436 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x146>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80115a4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80115a8:	3301      	adds	r3, #1
 80115aa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80115ae:	e739      	b.n	8011424 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x134>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80115b0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80115b4:	3301      	adds	r3, #1
 80115b6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80115ba:	e72a      	b.n	8011412 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x122>
  for (int batch = 0; batch < batches; ++batch) {
 80115bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80115c0:	3301      	adds	r3, #1
 80115c2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80115c6:	e71b      	b.n	8011400 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_+0x110>
                                           output_activation_max);
        }
      }
    }
  }
}
 80115c8:	bf00      	nop
 80115ca:	3794      	adds	r7, #148	; 0x94
 80115cc:	46bd      	mov	sp, r7
 80115ce:	ecbd 8b02 	vpop	{d8}
 80115d2:	bd90      	pop	{r4, r7, pc}

080115d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>:
inline void Conv(const ConvParams& params, const RuntimeShape& input_shape,
                 const uint8* input_data, const RuntimeShape& filter_shape,
                 const uint8* filter_data, const RuntimeShape& bias_shape,
                 const int32* bias_data, const RuntimeShape& output_shape,
                 uint8* output_data, const RuntimeShape& im2col_shape,
                 uint8* im2col_data, void* cpu_backend_context) {
 80115d4:	b590      	push	{r4, r7, lr}
 80115d6:	b0ab      	sub	sp, #172	; 0xac
 80115d8:	af02      	add	r7, sp, #8
 80115da:	60f8      	str	r0, [r7, #12]
 80115dc:	60b9      	str	r1, [r7, #8]
 80115de:	607a      	str	r2, [r7, #4]
 80115e0:	603b      	str	r3, [r7, #0]
  (void)cpu_backend_context;  // only used in optimized code.
  (void)im2col_data;   // only used in optimized code.
  (void)im2col_shape;  // only used in optimized code.
  const int stride_width = params.stride_width;
 80115e2:	68fb      	ldr	r3, [r7, #12]
 80115e4:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80115e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  const int stride_height = params.stride_height;
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80115f2:	67fb      	str	r3, [r7, #124]	; 0x7c
  const int dilation_width_factor = params.dilation_width_factor;
 80115f4:	68fb      	ldr	r3, [r7, #12]
 80115f6:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80115fa:	67bb      	str	r3, [r7, #120]	; 0x78
  const int dilation_height_factor = params.dilation_height_factor;
 80115fc:	68fb      	ldr	r3, [r7, #12]
 80115fe:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011602:	677b      	str	r3, [r7, #116]	; 0x74
  const int pad_width = params.padding_values.width;
 8011604:	68fb      	ldr	r3, [r7, #12]
 8011606:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801160a:	673b      	str	r3, [r7, #112]	; 0x70
  const int pad_height = params.padding_values.height;
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011612:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int32 input_offset = params.input_offset;
 8011614:	68fb      	ldr	r3, [r7, #12]
 8011616:	695b      	ldr	r3, [r3, #20]
 8011618:	66bb      	str	r3, [r7, #104]	; 0x68
  const int32 filter_offset = params.weights_offset;
 801161a:	68fb      	ldr	r3, [r7, #12]
 801161c:	699b      	ldr	r3, [r3, #24]
 801161e:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 output_offset = params.output_offset;
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	69db      	ldr	r3, [r3, #28]
 8011624:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_multiplier = params.output_multiplier;
 8011626:	68fb      	ldr	r3, [r7, #12]
 8011628:	6a1b      	ldr	r3, [r3, #32]
 801162a:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int output_shift = params.output_shift;
 801162c:	68fb      	ldr	r3, [r7, #12]
 801162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011630:	65bb      	str	r3, [r7, #88]	; 0x58
  const int32 output_activation_min = params.quantized_activation_min;
 8011632:	68fb      	ldr	r3, [r7, #12]
 8011634:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011636:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8011638:	68fb      	ldr	r3, [r7, #12]
 801163a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801163c:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 801163e:	69ba      	ldr	r2, [r7, #24]
 8011640:	697b      	ldr	r3, [r7, #20]
 8011642:	429a      	cmp	r2, r3
 8011644:	dd01      	ble.n	801164a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x76>
 8011646:	f009 fcb3 	bl	801afb0 <abort>

  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801164a:	68b8      	ldr	r0, [r7, #8]
 801164c:	f7fd feb6 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011650:	4603      	mov	r3, r0
 8011652:	2b04      	cmp	r3, #4
 8011654:	d001      	beq.n	801165a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x86>
 8011656:	f009 fcab 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 801165a:	6838      	ldr	r0, [r7, #0]
 801165c:	f7fd feae 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011660:	4603      	mov	r3, r0
 8011662:	2b04      	cmp	r3, #4
 8011664:	d001      	beq.n	801166a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x96>
 8011666:	f009 fca3 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801166a:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801166e:	f7fd fea5 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8011672:	4603      	mov	r3, r0
 8011674:	2b04      	cmp	r3, #4
 8011676:	d001      	beq.n	801167c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xa8>
 8011678:	f009 fc9a 	bl	801afb0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801167c:	2300      	movs	r3, #0
 801167e:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 8011682:	2100      	movs	r1, #0
 8011684:	68b8      	ldr	r0, [r7, #8]
 8011686:	f7ff fdf1 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801168a:	6578      	str	r0, [r7, #84]	; 0x54
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 801168c:	2303      	movs	r3, #3
 801168e:	683a      	ldr	r2, [r7, #0]
 8011690:	2103      	movs	r1, #3
 8011692:	68b8      	ldr	r0, [r7, #8]
 8011694:	f7ff fdea 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8011698:	6538      	str	r0, [r7, #80]	; 0x50
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 801169a:	2303      	movs	r3, #3
 801169c:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80116a0:	2100      	movs	r1, #0
 80116a2:	6838      	ldr	r0, [r7, #0]
 80116a4:	f7ff fde2 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80116a8:	64f8      	str	r0, [r7, #76]	; 0x4c
  if (bias_data) {
 80116aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d009      	beq.n	80116c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80116b2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80116b6:	f7fd ff1d 	bl	800f4f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80116ba:	4602      	mov	r2, r0
 80116bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80116be:	4293      	cmp	r3, r2
 80116c0:	d001      	beq.n	80116c6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0xf2>
 80116c2:	f009 fc75 	bl	801afb0 <abort>
  }
  const int input_height = input_shape.Dims(1);
 80116c6:	2101      	movs	r1, #1
 80116c8:	68b8      	ldr	r0, [r7, #8]
 80116ca:	f7fd fe83 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116ce:	64b8      	str	r0, [r7, #72]	; 0x48
  const int input_width = input_shape.Dims(2);
 80116d0:	2102      	movs	r1, #2
 80116d2:	68b8      	ldr	r0, [r7, #8]
 80116d4:	f7fd fe7e 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116d8:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_height = filter_shape.Dims(1);
 80116da:	2101      	movs	r1, #1
 80116dc:	6838      	ldr	r0, [r7, #0]
 80116de:	f7fd fe79 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116e2:	6438      	str	r0, [r7, #64]	; 0x40
  const int filter_width = filter_shape.Dims(2);
 80116e4:	2102      	movs	r1, #2
 80116e6:	6838      	ldr	r0, [r7, #0]
 80116e8:	f7fd fe74 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116ec:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_height = output_shape.Dims(1);
 80116ee:	2101      	movs	r1, #1
 80116f0:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80116f4:	f7fd fe6e 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80116f8:	63b8      	str	r0, [r7, #56]	; 0x38
  const int output_width = output_shape.Dims(2);
 80116fa:	2102      	movs	r1, #2
 80116fc:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011700:	f7fd fe68 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011704:	6378      	str	r0, [r7, #52]	; 0x34
  for (int batch = 0; batch < batches; ++batch) {
 8011706:	2300      	movs	r3, #0
 8011708:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 801170c:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 8011710:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011712:	429a      	cmp	r2, r3
 8011714:	f280 8101 	bge.w	801191a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x346>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011718:	2300      	movs	r3, #0
 801171a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801171e:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8011722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011724:	429a      	cmp	r2, r3
 8011726:	f280 80f2 	bge.w	801190e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x33a>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801172a:	2300      	movs	r3, #0
 801172c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011730:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011736:	429a      	cmp	r2, r3
 8011738:	f280 80e3 	bge.w	8011902 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x32e>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 801173c:	2300      	movs	r3, #0
 801173e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011742:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011746:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011748:	429a      	cmp	r2, r3
 801174a:	f280 80d4 	bge.w	80118f6 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x322>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 801174e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011752:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011756:	fb02 f203 	mul.w	r2, r2, r3
 801175a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801175c:	1ad3      	subs	r3, r2, r3
 801175e:	633b      	str	r3, [r7, #48]	; 0x30
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8011760:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011764:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011766:	fb02 f203 	mul.w	r2, r2, r3
 801176a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801176c:	1ad3      	subs	r3, r2, r3
 801176e:	62fb      	str	r3, [r7, #44]	; 0x2c
          int32 acc = 0;
 8011770:	2300      	movs	r3, #0
 8011772:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011774:	2300      	movs	r3, #0
 8011776:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801177a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801177e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011780:	429a      	cmp	r2, r3
 8011782:	da6d      	bge.n	8011860 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x28c>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011784:	2300      	movs	r3, #0
 8011786:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 801178a:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 801178e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011790:	429a      	cmp	r2, r3
 8011792:	da5f      	bge.n	8011854 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x280>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011794:	2300      	movs	r3, #0
 8011796:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801179a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 801179e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80117a0:	429a      	cmp	r2, r3
 80117a2:	da51      	bge.n	8011848 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x274>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 80117a4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80117a6:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80117aa:	fb02 f303 	mul.w	r3, r2, r3
 80117ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80117b0:	4413      	add	r3, r2
 80117b2:	62bb      	str	r3, [r7, #40]	; 0x28
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 80117b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80117b6:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 80117ba:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 80117be:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80117c0:	4413      	add	r3, r2
 80117c2:	627b      	str	r3, [r7, #36]	; 0x24
                // If the location is outside the bounds of the input image,
                // use zero as a default value.
                if ((in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 80117c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	db38      	blt.n	801183c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 80117ca:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80117cc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80117ce:	429a      	cmp	r2, r3
 80117d0:	da34      	bge.n	801183c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 80117d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	db31      	blt.n	801183c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
 80117d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80117dc:	429a      	cmp	r2, r3
 80117de:	da2d      	bge.n	801183c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x268>
                    (in_y < input_height)) {
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 80117e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80117e4:	9300      	str	r3, [sp, #0]
 80117e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80117e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80117ea:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80117ee:	68b8      	ldr	r0, [r7, #8]
 80117f0:	f7fe f868 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80117f4:	4603      	mov	r3, r0
 80117f6:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 80117f8:	687b      	ldr	r3, [r7, #4]
 80117fa:	4413      	add	r3, r2
 80117fc:	781b      	ldrb	r3, [r3, #0]
 80117fe:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8011800:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011804:	9300      	str	r3, [sp, #0]
 8011806:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801180a:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 801180e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8011812:	6838      	ldr	r0, [r7, #0]
 8011814:	f7fe f856 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011818:	4603      	mov	r3, r0
 801181a:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 801181c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011820:	4413      	add	r3, r2
 8011822:	781b      	ldrb	r3, [r3, #0]
 8011824:	61fb      	str	r3, [r7, #28]
                  acc +=
                      (filter_val + filter_offset) * (input_val + input_offset);
 8011826:	69fa      	ldr	r2, [r7, #28]
 8011828:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801182a:	4413      	add	r3, r2
 801182c:	6a39      	ldr	r1, [r7, #32]
 801182e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011830:	440a      	add	r2, r1
 8011832:	fb02 f203 	mul.w	r2, r2, r3
                  acc +=
 8011836:	693b      	ldr	r3, [r7, #16]
 8011838:	4413      	add	r3, r2
 801183a:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 801183c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011840:	3301      	adds	r3, #1
 8011842:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011846:	e7a8      	b.n	801179a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1c6>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011848:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801184c:	3301      	adds	r3, #1
 801184e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011852:	e79a      	b.n	801178a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1b6>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011854:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011858:	3301      	adds	r3, #1
 801185a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 801185e:	e78c      	b.n	801177a <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x1a6>
                }
              }
            }
          }
          if (bias_data) {
 8011860:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011864:	2b00      	cmp	r3, #0
 8011866:	d009      	beq.n	801187c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x2a8>
            acc += bias_data[out_channel];
 8011868:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 801186c:	009b      	lsls	r3, r3, #2
 801186e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011872:	4413      	add	r3, r2
 8011874:	681a      	ldr	r2, [r3, #0]
 8011876:	693b      	ldr	r3, [r7, #16]
 8011878:	4413      	add	r3, r2
 801187a:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(acc, output_multiplier,
 801187c:	693b      	ldr	r3, [r7, #16]
 801187e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8011880:	6df9      	ldr	r1, [r7, #92]	; 0x5c
 8011882:	4618      	mov	r0, r3
 8011884:	f7ff fd10 	bl	80112a8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8011888:	4603      	mov	r3, r0
 801188a:	613b      	str	r3, [r7, #16]
                                              output_shift);
          acc += output_offset;
 801188c:	693a      	ldr	r2, [r7, #16]
 801188e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011890:	4413      	add	r3, r2
 8011892:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8011894:	f107 0218 	add.w	r2, r7, #24
 8011898:	f107 0310 	add.w	r3, r7, #16
 801189c:	4611      	mov	r1, r2
 801189e:	4618      	mov	r0, r3
 80118a0:	f7fd fcdf 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 80118a4:	4603      	mov	r3, r0
 80118a6:	681b      	ldr	r3, [r3, #0]
 80118a8:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 80118aa:	f107 0214 	add.w	r2, r7, #20
 80118ae:	f107 0310 	add.w	r3, r7, #16
 80118b2:	4611      	mov	r1, r2
 80118b4:	4618      	mov	r0, r3
 80118b6:	f7fd fce8 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 80118ba:	4603      	mov	r3, r0
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 80118c0:	693c      	ldr	r4, [r7, #16]
 80118c2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80118c6:	9300      	str	r3, [sp, #0]
 80118c8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80118cc:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 80118d0:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 80118d4:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80118d8:	f7fd fff4 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80118dc:	4603      	mov	r3, r0
 80118de:	461a      	mov	r2, r3
 80118e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80118e4:	4413      	add	r3, r2
 80118e6:	b2e2      	uxtb	r2, r4
 80118e8:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 80118ea:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80118ee:	3301      	adds	r3, #1
 80118f0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80118f4:	e725      	b.n	8011742 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x16e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80118f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80118fa:	3301      	adds	r3, #1
 80118fc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011900:	e716      	b.n	8011730 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x15c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011902:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8011906:	3301      	adds	r3, #1
 8011908:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801190c:	e707      	b.n	801171e <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x14a>
  for (int batch = 0; batch < batches; ++batch) {
 801190e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8011912:	3301      	adds	r3, #1
 8011914:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8011918:	e6f8      	b.n	801170c <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv+0x138>
              static_cast<uint8>(acc);
        }
      }
    }
  }
}
 801191a:	bf00      	nop
 801191c:	37a4      	adds	r7, #164	; 0xa4
 801191e:	46bd      	mov	sp, r7
 8011920:	bd90      	pop	{r4, r7, pc}

08011922 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>:
    const ConvParams& params, const int32* output_multiplier,
    const int32* output_shift, const RuntimeShape& input_shape,
    const int8* input_data, const RuntimeShape& filter_shape,
    const int8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8* output_data) {
 8011922:	b590      	push	{r4, r7, lr}
 8011924:	b0a9      	sub	sp, #164	; 0xa4
 8011926:	af02      	add	r7, sp, #8
 8011928:	60f8      	str	r0, [r7, #12]
 801192a:	60b9      	str	r1, [r7, #8]
 801192c:	607a      	str	r2, [r7, #4]
 801192e:	603b      	str	r3, [r7, #0]
  // Get parameters.
  const int32 input_offset = params.input_offset;  // r = s(q - Z)
 8011930:	68fb      	ldr	r3, [r7, #12]
 8011932:	695b      	ldr	r3, [r3, #20]
 8011934:	67bb      	str	r3, [r7, #120]	; 0x78
  const int stride_width = params.stride_width;
 8011936:	68fb      	ldr	r3, [r7, #12]
 8011938:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 801193c:	677b      	str	r3, [r7, #116]	; 0x74
  const int stride_height = params.stride_height;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8011944:	673b      	str	r3, [r7, #112]	; 0x70
  const int dilation_width_factor = params.dilation_width_factor;
 8011946:	68fb      	ldr	r3, [r7, #12]
 8011948:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 801194c:	66fb      	str	r3, [r7, #108]	; 0x6c
  const int dilation_height_factor = params.dilation_height_factor;
 801194e:	68fb      	ldr	r3, [r7, #12]
 8011950:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8011954:	66bb      	str	r3, [r7, #104]	; 0x68
  const int pad_width = params.padding_values.width;
 8011956:	68fb      	ldr	r3, [r7, #12]
 8011958:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801195c:	667b      	str	r3, [r7, #100]	; 0x64
  const int pad_height = params.padding_values.height;
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8011964:	663b      	str	r3, [r7, #96]	; 0x60
  const int32 output_offset = params.output_offset;
 8011966:	68fb      	ldr	r3, [r7, #12]
 8011968:	69db      	ldr	r3, [r3, #28]
 801196a:	65fb      	str	r3, [r7, #92]	; 0x5c

  // Set min and max value of the output.
  const int32 output_activation_min = params.quantized_activation_min;
 801196c:	68fb      	ldr	r3, [r7, #12]
 801196e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011970:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011976:	617b      	str	r3, [r7, #20]

  // Sanity check.
  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8011978:	69ba      	ldr	r2, [r7, #24]
 801197a:	697b      	ldr	r3, [r7, #20]
 801197c:	429a      	cmp	r2, r3
 801197e:	dd01      	ble.n	8011984 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x62>
 8011980:	f009 fb16 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8011984:	6838      	ldr	r0, [r7, #0]
 8011986:	f7fd fd19 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801198a:	4603      	mov	r3, r0
 801198c:	2b04      	cmp	r3, #4
 801198e:	d001      	beq.n	8011994 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x72>
 8011990:	f009 fb0e 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(filter_shape.DimensionsCount(), 4);
 8011994:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8011998:	f7fd fd10 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801199c:	4603      	mov	r3, r0
 801199e:	2b04      	cmp	r3, #4
 80119a0:	d001      	beq.n	80119a6 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x84>
 80119a2:	f009 fb05 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 80119a6:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 80119aa:	f7fd fd07 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80119ae:	4603      	mov	r3, r0
 80119b0:	2b04      	cmp	r3, #4
 80119b2:	d001      	beq.n	80119b8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x96>
 80119b4:	f009 fafc 	bl	801afb0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80119b8:	2300      	movs	r3, #0
 80119ba:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119be:	2100      	movs	r1, #0
 80119c0:	6838      	ldr	r0, [r7, #0]
 80119c2:	f7ff fc53 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80119c6:	65b8      	str	r0, [r7, #88]	; 0x58
  const int input_depth = MatchingDim(input_shape, 3, filter_shape, 3);
 80119c8:	2303      	movs	r3, #3
 80119ca:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80119ce:	2103      	movs	r1, #3
 80119d0:	6838      	ldr	r0, [r7, #0]
 80119d2:	f7ff fc4b 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80119d6:	6578      	str	r0, [r7, #84]	; 0x54
  const int output_depth = MatchingDim(filter_shape, 0, output_shape, 3);
 80119d8:	2303      	movs	r3, #3
 80119da:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80119de:	2100      	movs	r1, #0
 80119e0:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 80119e4:	f7ff fc42 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80119e8:	6538      	str	r0, [r7, #80]	; 0x50
  if (bias_data) {
 80119ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80119ee:	2b00      	cmp	r3, #0
 80119f0:	d009      	beq.n	8011a06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
    TFLITE_DCHECK_EQ(bias_shape.FlatSize(), output_depth);
 80119f2:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 80119f6:	f7fd fd7d 	bl	800f4f4 <_ZNK6tflite12RuntimeShape8FlatSizeEv>
 80119fa:	4602      	mov	r2, r0
 80119fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80119fe:	4293      	cmp	r3, r2
 8011a00:	d001      	beq.n	8011a06 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0xe4>
 8011a02:	f009 fad5 	bl	801afb0 <abort>
  }

  // Check dimensions of the tensors.
  const int input_height = input_shape.Dims(1);
 8011a06:	2101      	movs	r1, #1
 8011a08:	6838      	ldr	r0, [r7, #0]
 8011a0a:	f7fd fce3 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a0e:	64f8      	str	r0, [r7, #76]	; 0x4c
  const int input_width = input_shape.Dims(2);
 8011a10:	2102      	movs	r1, #2
 8011a12:	6838      	ldr	r0, [r7, #0]
 8011a14:	f7fd fcde 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a18:	64b8      	str	r0, [r7, #72]	; 0x48
  const int filter_height = filter_shape.Dims(1);
 8011a1a:	2101      	movs	r1, #1
 8011a1c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8011a20:	f7fd fcd8 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a24:	6478      	str	r0, [r7, #68]	; 0x44
  const int filter_width = filter_shape.Dims(2);
 8011a26:	2102      	movs	r1, #2
 8011a28:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8011a2c:	f7fd fcd2 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a30:	6438      	str	r0, [r7, #64]	; 0x40
  const int output_height = output_shape.Dims(1);
 8011a32:	2101      	movs	r1, #1
 8011a34:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011a38:	f7fd fccc 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a3c:	63f8      	str	r0, [r7, #60]	; 0x3c
  const int output_width = output_shape.Dims(2);
 8011a3e:	2102      	movs	r1, #2
 8011a40:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011a44:	f7fd fcc6 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8011a48:	63b8      	str	r0, [r7, #56]	; 0x38
  for (int batch = 0; batch < batches; ++batch) {
 8011a4a:	2300      	movs	r3, #0
 8011a4c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011a50:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8011a54:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8011a56:	429a      	cmp	r2, r3
 8011a58:	f280 810f 	bge.w	8011c7a <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x358>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011a5c:	2300      	movs	r3, #0
 8011a5e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011a62:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011a66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011a68:	429a      	cmp	r2, r3
 8011a6a:	f280 8100 	bge.w	8011c6e <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x34c>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011a6e:	2300      	movs	r3, #0
 8011a70:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011a74:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8011a78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a7a:	429a      	cmp	r2, r3
 8011a7c:	f280 80f1 	bge.w	8011c62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x340>
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011a80:	2300      	movs	r3, #0
 8011a82:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011a86:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8011a8a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011a8c:	429a      	cmp	r2, r3
 8011a8e:	f280 80e2 	bge.w	8011c56 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x334>
          const int in_x_origin = (out_x * stride_width) - pad_width;
 8011a92:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011a96:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8011a98:	fb02 f203 	mul.w	r2, r2, r3
 8011a9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8011a9e:	1ad3      	subs	r3, r2, r3
 8011aa0:	637b      	str	r3, [r7, #52]	; 0x34
          const int in_y_origin = (out_y * stride_height) - pad_height;
 8011aa2:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011aa6:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8011aa8:	fb02 f203 	mul.w	r2, r2, r3
 8011aac:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8011aae:	1ad3      	subs	r3, r2, r3
 8011ab0:	633b      	str	r3, [r7, #48]	; 0x30
          int32 acc = 0;
 8011ab2:	2300      	movs	r3, #0
 8011ab4:	613b      	str	r3, [r7, #16]
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011ab6:	2300      	movs	r3, #0
 8011ab8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011abc:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011ac0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8011ac2:	429a      	cmp	r2, r3
 8011ac4:	da72      	bge.n	8011bac <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x28a>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011ac6:	2300      	movs	r3, #0
 8011ac8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011acc:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011ad0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8011ad2:	429a      	cmp	r2, r3
 8011ad4:	da64      	bge.n	8011ba0 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x27e>
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011ad6:	2300      	movs	r3, #0
 8011ad8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011ada:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8011adc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8011ade:	429a      	cmp	r2, r3
 8011ae0:	da58      	bge.n	8011b94 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x272>
                const int in_x = in_x_origin + dilation_width_factor * filter_x;
 8011ae2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8011ae4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8011ae8:	fb02 f303 	mul.w	r3, r2, r3
 8011aec:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8011aee:	4413      	add	r3, r2
 8011af0:	62fb      	str	r3, [r7, #44]	; 0x2c
                const int in_y =
                    in_y_origin + dilation_height_factor * filter_y;
 8011af2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8011af4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011af8:	fb02 f303 	mul.w	r3, r2, r3
                const int in_y =
 8011afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011afe:	4413      	add	r3, r2
 8011b00:	62bb      	str	r3, [r7, #40]	; 0x28
                // Zero padding by omitting the areas outside the image.
                const bool is_point_inside_image =
                    (in_x >= 0) && (in_x < input_width) && (in_y >= 0) &&
 8011b02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b04:	2b00      	cmp	r3, #0
 8011b06:	db0c      	blt.n	8011b22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8011b08:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011b0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	da08      	bge.n	8011b22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8011b10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	db05      	blt.n	8011b22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8011b16:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8011b1a:	429a      	cmp	r2, r3
 8011b1c:	da01      	bge.n	8011b22 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x200>
 8011b1e:	2301      	movs	r3, #1
 8011b20:	e000      	b.n	8011b24 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x202>
 8011b22:	2300      	movs	r3, #0
                const bool is_point_inside_image =
 8011b24:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
                    (in_y < input_height);
                if (is_point_inside_image) {
 8011b28:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8011b2c:	2b00      	cmp	r3, #0
 8011b2e:	d02d      	beq.n	8011b8c <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x26a>
                  int32 input_val = input_data[Offset(input_shape, batch, in_y,
 8011b30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b32:	9300      	str	r3, [sp, #0]
 8011b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011b36:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011b38:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011b3c:	6838      	ldr	r0, [r7, #0]
 8011b3e:	f7fd fec1 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011b42:	4603      	mov	r3, r0
 8011b44:	461a      	mov	r2, r3
                                                      in_x, in_channel)];
 8011b46:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8011b4a:	4413      	add	r3, r2
 8011b4c:	f993 3000 	ldrsb.w	r3, [r3]
 8011b50:	623b      	str	r3, [r7, #32]
                  int32 filter_val =
                      filter_data[Offset(filter_shape, out_channel, filter_y,
 8011b52:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b54:	9300      	str	r3, [sp, #0]
 8011b56:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011b5a:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8011b5e:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8011b62:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8011b66:	f7fd fead 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011b6a:	4603      	mov	r3, r0
 8011b6c:	461a      	mov	r2, r3
                                         filter_x, in_channel)];
 8011b6e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8011b72:	4413      	add	r3, r2
 8011b74:	f993 3000 	ldrsb.w	r3, [r3]
 8011b78:	61fb      	str	r3, [r7, #28]
                  // long as the filter size (filter_y * filter_x * in_channel)
                  // does not exceed 2^16, which is the case in all the models
                  // we have seen so far.
                  // TODO(jianlijianli): Add a check to make sure the
                  // accumulator depth is smaller than 2^16.
                  acc += filter_val * (input_val + input_offset);
 8011b7a:	6a3a      	ldr	r2, [r7, #32]
 8011b7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8011b7e:	4413      	add	r3, r2
 8011b80:	69fa      	ldr	r2, [r7, #28]
 8011b82:	fb02 f203 	mul.w	r2, r2, r3
 8011b86:	693b      	ldr	r3, [r7, #16]
 8011b88:	4413      	add	r3, r2
 8011b8a:	613b      	str	r3, [r7, #16]
              for (int in_channel = 0; in_channel < input_depth; ++in_channel) {
 8011b8c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8011b8e:	3301      	adds	r3, #1
 8011b90:	67fb      	str	r3, [r7, #124]	; 0x7c
 8011b92:	e7a2      	b.n	8011ada <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1b8>
            for (int filter_x = 0; filter_x < filter_width; ++filter_x) {
 8011b94:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8011b98:	3301      	adds	r3, #1
 8011b9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8011b9e:	e795      	b.n	8011acc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x1aa>
          for (int filter_y = 0; filter_y < filter_height; ++filter_y) {
 8011ba0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8011ba4:	3301      	adds	r3, #1
 8011ba6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8011baa:	e787      	b.n	8011abc <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x19a>
                }
              }
            }
          }

          if (bias_data) {
 8011bac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8011bb0:	2b00      	cmp	r3, #0
 8011bb2:	d009      	beq.n	8011bc8 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x2a6>
            acc += bias_data[out_channel];
 8011bb4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011bb8:	009b      	lsls	r3, r3, #2
 8011bba:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8011bbe:	4413      	add	r3, r2
 8011bc0:	681a      	ldr	r2, [r3, #0]
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	4413      	add	r3, r2
 8011bc6:	613b      	str	r3, [r7, #16]
          }
          acc = MultiplyByQuantizedMultiplier(
 8011bc8:	6938      	ldr	r0, [r7, #16]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8011bca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011bce:	009b      	lsls	r3, r3, #2
 8011bd0:	68ba      	ldr	r2, [r7, #8]
 8011bd2:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8011bd4:	6819      	ldr	r1, [r3, #0]
              acc, output_multiplier[out_channel], output_shift[out_channel]);
 8011bd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	687a      	ldr	r2, [r7, #4]
 8011bde:	4413      	add	r3, r2
          acc = MultiplyByQuantizedMultiplier(
 8011be0:	681b      	ldr	r3, [r3, #0]
 8011be2:	461a      	mov	r2, r3
 8011be4:	f7ff fb60 	bl	80112a8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8011be8:	4603      	mov	r3, r0
 8011bea:	613b      	str	r3, [r7, #16]
          acc += output_offset;
 8011bec:	693a      	ldr	r2, [r7, #16]
 8011bee:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8011bf0:	4413      	add	r3, r2
 8011bf2:	613b      	str	r3, [r7, #16]
          acc = std::max(acc, output_activation_min);
 8011bf4:	f107 0218 	add.w	r2, r7, #24
 8011bf8:	f107 0310 	add.w	r3, r7, #16
 8011bfc:	4611      	mov	r1, r2
 8011bfe:	4618      	mov	r0, r3
 8011c00:	f7fd fb2f 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8011c04:	4603      	mov	r3, r0
 8011c06:	681b      	ldr	r3, [r3, #0]
 8011c08:	613b      	str	r3, [r7, #16]
          acc = std::min(acc, output_activation_max);
 8011c0a:	f107 0214 	add.w	r2, r7, #20
 8011c0e:	f107 0310 	add.w	r3, r7, #16
 8011c12:	4611      	mov	r1, r2
 8011c14:	4618      	mov	r0, r3
 8011c16:	f7fd fb38 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 8011c1a:	4603      	mov	r3, r0
 8011c1c:	681b      	ldr	r3, [r3, #0]
 8011c1e:	613b      	str	r3, [r7, #16]
          output_data[Offset(output_shape, batch, out_y, out_x, out_channel)] =
 8011c20:	693c      	ldr	r4, [r7, #16]
 8011c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c26:	9300      	str	r3, [sp, #0]
 8011c28:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c2c:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8011c30:	f8d7 1094 	ldr.w	r1, [r7, #148]	; 0x94
 8011c34:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8011c38:	f7fd fe44 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8011c3c:	4603      	mov	r3, r0
 8011c3e:	461a      	mov	r2, r3
 8011c40:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8011c44:	4413      	add	r3, r2
 8011c46:	b262      	sxtb	r2, r4
 8011c48:	701a      	strb	r2, [r3, #0]
        for (int out_channel = 0; out_channel < output_depth; ++out_channel) {
 8011c4a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8011c4e:	3301      	adds	r3, #1
 8011c50:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8011c54:	e717      	b.n	8011a86 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x164>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8011c56:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8011c5a:	3301      	adds	r3, #1
 8011c5c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8011c60:	e708      	b.n	8011a74 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x152>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8011c62:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8011c66:	3301      	adds	r3, #1
 8011c68:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8011c6c:	e6f9      	b.n	8011a62 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x140>
  for (int batch = 0; batch < batches; ++batch) {
 8011c6e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8011c72:	3301      	adds	r3, #1
 8011c74:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8011c78:	e6ea      	b.n	8011a50 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa+0x12e>
              static_cast<int8_t>(acc);
        }
      }
    }
  }
}
 8011c7a:	bf00      	nop
 8011c7c:	379c      	adds	r7, #156	; 0x9c
 8011c7e:	46bd      	mov	sp, r7
 8011c80:	bd90      	pop	{r4, r7, pc}

08011c82 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>:
                                                  int index) {
 8011c82:	b480      	push	{r7}
 8011c84:	b087      	sub	sp, #28
 8011c86:	af00      	add	r7, sp, #0
 8011c88:	60f8      	str	r0, [r7, #12]
 8011c8a:	60b9      	str	r1, [r7, #8]
 8011c8c:	607a      	str	r2, [r7, #4]
  const bool use_tensor = index < node->inputs->size &&
 8011c8e:	68bb      	ldr	r3, [r7, #8]
 8011c90:	681b      	ldr	r3, [r3, #0]
 8011c92:	681b      	ldr	r3, [r3, #0]
 8011c94:	687a      	ldr	r2, [r7, #4]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	da0a      	bge.n	8011cb0 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
                          node->inputs->data[index] != kTfLiteOptionalTensor;
 8011c9a:	68bb      	ldr	r3, [r7, #8]
 8011c9c:	681a      	ldr	r2, [r3, #0]
 8011c9e:	687b      	ldr	r3, [r7, #4]
 8011ca0:	009b      	lsls	r3, r3, #2
 8011ca2:	4413      	add	r3, r2
 8011ca4:	685b      	ldr	r3, [r3, #4]
  const bool use_tensor = index < node->inputs->size &&
 8011ca6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011caa:	d001      	beq.n	8011cb0 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x2e>
 8011cac:	2301      	movs	r3, #1
 8011cae:	e000      	b.n	8011cb2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x30>
 8011cb0:	2300      	movs	r3, #0
 8011cb2:	75fb      	strb	r3, [r7, #23]
  if (use_tensor) {
 8011cb4:	7dfb      	ldrb	r3, [r7, #23]
 8011cb6:	2b00      	cmp	r3, #0
 8011cb8:	d00a      	beq.n	8011cd0 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x4e>
    return &context->tensors[node->inputs->data[index]];
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	689a      	ldr	r2, [r3, #8]
 8011cbe:	68bb      	ldr	r3, [r7, #8]
 8011cc0:	6819      	ldr	r1, [r3, #0]
 8011cc2:	687b      	ldr	r3, [r7, #4]
 8011cc4:	009b      	lsls	r3, r3, #2
 8011cc6:	440b      	add	r3, r1
 8011cc8:	685b      	ldr	r3, [r3, #4]
 8011cca:	019b      	lsls	r3, r3, #6
 8011ccc:	4413      	add	r3, r2
 8011cce:	e000      	b.n	8011cd2 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei+0x50>
  return nullptr;
 8011cd0:	2300      	movs	r3, #0
}
 8011cd2:	4618      	mov	r0, r3
 8011cd4:	371c      	adds	r7, #28
 8011cd6:	46bd      	mov	sp, r7
 8011cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cdc:	4770      	bx	lr

08011cde <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>:

// It's not guaranteed that padding is symmetric. It's important to keep
// offset for algorithms need all paddings.
inline int ComputePaddingWithOffset(int stride, int dilation_rate, int in_size,
                                    int filter_size, int out_size,
                                    int* offset) {
 8011cde:	b480      	push	{r7}
 8011ce0:	b087      	sub	sp, #28
 8011ce2:	af00      	add	r7, sp, #0
 8011ce4:	60f8      	str	r0, [r7, #12]
 8011ce6:	60b9      	str	r1, [r7, #8]
 8011ce8:	607a      	str	r2, [r7, #4]
 8011cea:	603b      	str	r3, [r7, #0]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011cec:	683b      	ldr	r3, [r7, #0]
 8011cee:	3b01      	subs	r3, #1
 8011cf0:	68ba      	ldr	r2, [r7, #8]
 8011cf2:	fb02 f303 	mul.w	r3, r2, r3
 8011cf6:	3301      	adds	r3, #1
 8011cf8:	617b      	str	r3, [r7, #20]
  int total_padding =
      ((out_size - 1) * stride + effective_filter_size - in_size);
 8011cfa:	6a3b      	ldr	r3, [r7, #32]
 8011cfc:	3b01      	subs	r3, #1
 8011cfe:	68fa      	ldr	r2, [r7, #12]
 8011d00:	fb02 f203 	mul.w	r2, r2, r3
 8011d04:	697b      	ldr	r3, [r7, #20]
 8011d06:	441a      	add	r2, r3
  int total_padding =
 8011d08:	687b      	ldr	r3, [r7, #4]
 8011d0a:	1ad3      	subs	r3, r2, r3
 8011d0c:	613b      	str	r3, [r7, #16]
  total_padding = total_padding > 0 ? total_padding : 0;
 8011d0e:	693b      	ldr	r3, [r7, #16]
 8011d10:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8011d14:	613b      	str	r3, [r7, #16]
  *offset = total_padding % 2;
 8011d16:	693b      	ldr	r3, [r7, #16]
 8011d18:	2b00      	cmp	r3, #0
 8011d1a:	f003 0301 	and.w	r3, r3, #1
 8011d1e:	bfb8      	it	lt
 8011d20:	425b      	neglt	r3, r3
 8011d22:	461a      	mov	r2, r3
 8011d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011d26:	601a      	str	r2, [r3, #0]
  return total_padding / 2;
 8011d28:	693b      	ldr	r3, [r7, #16]
 8011d2a:	0fda      	lsrs	r2, r3, #31
 8011d2c:	4413      	add	r3, r2
 8011d2e:	105b      	asrs	r3, r3, #1
}
 8011d30:	4618      	mov	r0, r3
 8011d32:	371c      	adds	r7, #28
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>:

// Matching GetWindowedOutputSize in TensorFlow.
inline int ComputeOutSize(TfLitePadding padding, int image_size,
                          int filter_size, int stride, int dilation_rate = 1) {
 8011d3c:	b480      	push	{r7}
 8011d3e:	b087      	sub	sp, #28
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	60b9      	str	r1, [r7, #8]
 8011d44:	607a      	str	r2, [r7, #4]
 8011d46:	603b      	str	r3, [r7, #0]
 8011d48:	4603      	mov	r3, r0
 8011d4a:	73fb      	strb	r3, [r7, #15]
  int effective_filter_size = (filter_size - 1) * dilation_rate + 1;
 8011d4c:	687b      	ldr	r3, [r7, #4]
 8011d4e:	3b01      	subs	r3, #1
 8011d50:	6a3a      	ldr	r2, [r7, #32]
 8011d52:	fb02 f303 	mul.w	r3, r2, r3
 8011d56:	3301      	adds	r3, #1
 8011d58:	617b      	str	r3, [r7, #20]
  switch (padding) {
 8011d5a:	7bfb      	ldrb	r3, [r7, #15]
 8011d5c:	2b01      	cmp	r3, #1
 8011d5e:	d002      	beq.n	8011d66 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x2a>
 8011d60:	2b02      	cmp	r3, #2
 8011d62:	d008      	beq.n	8011d76 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x3a>
 8011d64:	e010      	b.n	8011d88 <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4c>
    case kTfLitePaddingSame:
      return (image_size + stride - 1) / stride;
 8011d66:	68ba      	ldr	r2, [r7, #8]
 8011d68:	683b      	ldr	r3, [r7, #0]
 8011d6a:	4413      	add	r3, r2
 8011d6c:	1e5a      	subs	r2, r3, #1
 8011d6e:	683b      	ldr	r3, [r7, #0]
 8011d70:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d74:	e009      	b.n	8011d8a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    case kTfLitePaddingValid:
      return (image_size + stride - effective_filter_size) / stride;
 8011d76:	68ba      	ldr	r2, [r7, #8]
 8011d78:	683b      	ldr	r3, [r7, #0]
 8011d7a:	441a      	add	r2, r3
 8011d7c:	697b      	ldr	r3, [r7, #20]
 8011d7e:	1ad2      	subs	r2, r2, r3
 8011d80:	683b      	ldr	r3, [r7, #0]
 8011d82:	fb92 f3f3 	sdiv	r3, r2, r3
 8011d86:	e000      	b.n	8011d8a <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii+0x4e>
    default:
      return 0;
 8011d88:	2300      	movs	r3, #0
  }
}
 8011d8a:	4618      	mov	r0, r3
 8011d8c:	371c      	adds	r7, #28
 8011d8e:	46bd      	mov	sp, r7
 8011d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d94:	4770      	bx	lr

08011d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>:

inline TfLitePaddingValues ComputePaddingHeightWidth(
    int stride_height, int stride_width, int dilation_rate_height,
    int dilation_rate_width, int in_height, int in_width, int filter_height,
    int filter_width, TfLitePadding padding, int* out_height, int* out_width) {
 8011d96:	b580      	push	{r7, lr}
 8011d98:	b088      	sub	sp, #32
 8011d9a:	af02      	add	r7, sp, #8
 8011d9c:	60f8      	str	r0, [r7, #12]
 8011d9e:	60b9      	str	r1, [r7, #8]
 8011da0:	607a      	str	r2, [r7, #4]
 8011da2:	603b      	str	r3, [r7, #0]
  *out_width = ComputeOutSize(padding, in_width, filter_width, stride_width,
 8011da4:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8011da8:	6a3b      	ldr	r3, [r7, #32]
 8011daa:	9300      	str	r3, [sp, #0]
 8011dac:	687b      	ldr	r3, [r7, #4]
 8011dae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8011db0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8011db2:	f7ff ffc3 	bl	8011d3c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011db6:	4602      	mov	r2, r0
 8011db8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dba:	601a      	str	r2, [r3, #0]
                              dilation_rate_width);
  *out_height = ComputeOutSize(padding, in_height, filter_height, stride_height,
 8011dbc:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8011dc0:	683b      	ldr	r3, [r7, #0]
 8011dc2:	9300      	str	r3, [sp, #0]
 8011dc4:	68bb      	ldr	r3, [r7, #8]
 8011dc6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8011dc8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8011dca:	f7ff ffb7 	bl	8011d3c <_ZN6tflite14ComputeOutSizeE13TfLitePaddingiiii>
 8011dce:	4602      	mov	r2, r0
 8011dd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dd2:	601a      	str	r2, [r3, #0]
                               dilation_rate_height);

  TfLitePaddingValues padding_values;
  int offset = 0;
 8011dd4:	2300      	movs	r3, #0
 8011dd6:	617b      	str	r3, [r7, #20]
  padding_values.height =
      ComputePaddingWithOffset(stride_height, dilation_rate_height, in_height,
 8011dd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	f107 0214 	add.w	r2, r7, #20
 8011de0:	9201      	str	r2, [sp, #4]
 8011de2:	9300      	str	r3, [sp, #0]
 8011de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011de6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011de8:	6839      	ldr	r1, [r7, #0]
 8011dea:	68b8      	ldr	r0, [r7, #8]
 8011dec:	f7ff ff77 	bl	8011cde <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011df0:	4602      	mov	r2, r0
  padding_values.height =
 8011df2:	68fb      	ldr	r3, [r7, #12]
 8011df4:	605a      	str	r2, [r3, #4]
                               filter_height, *out_height, &offset);
  padding_values.height_offset = offset;
 8011df6:	697a      	ldr	r2, [r7, #20]
 8011df8:	68fb      	ldr	r3, [r7, #12]
 8011dfa:	60da      	str	r2, [r3, #12]
  padding_values.width =
      ComputePaddingWithOffset(stride_width, dilation_rate_width, in_width,
 8011dfc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011dfe:	681b      	ldr	r3, [r3, #0]
 8011e00:	f107 0214 	add.w	r2, r7, #20
 8011e04:	9201      	str	r2, [sp, #4]
 8011e06:	9300      	str	r3, [sp, #0]
 8011e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011e0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8011e0c:	6a39      	ldr	r1, [r7, #32]
 8011e0e:	6878      	ldr	r0, [r7, #4]
 8011e10:	f7ff ff65 	bl	8011cde <_ZN6tflite24ComputePaddingWithOffsetEiiiiiPi>
 8011e14:	4602      	mov	r2, r0
  padding_values.width =
 8011e16:	68fb      	ldr	r3, [r7, #12]
 8011e18:	601a      	str	r2, [r3, #0]
                               filter_width, *out_width, &offset);
  padding_values.width_offset = offset;
 8011e1a:	697a      	ldr	r2, [r7, #20]
 8011e1c:	68fb      	ldr	r3, [r7, #12]
 8011e1e:	609a      	str	r2, [r3, #8]
  return padding_values;
 8011e20:	bf00      	nop
}
 8011e22:	68f8      	ldr	r0, [r7, #12]
 8011e24:	3718      	adds	r7, #24
 8011e26:	46bd      	mov	sp, r7
 8011e28:	bd80      	pop	{r7, pc}

08011e2a <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>:
  // uint8_t these would be 0 and 255.
  int32_t output_activation_min;
  int32_t output_activation_max;
};

inline PaddingType RuntimePaddingType(TfLitePadding padding) {
 8011e2a:	b480      	push	{r7}
 8011e2c:	b083      	sub	sp, #12
 8011e2e:	af00      	add	r7, sp, #0
 8011e30:	4603      	mov	r3, r0
 8011e32:	71fb      	strb	r3, [r7, #7]
  switch (padding) {
 8011e34:	79fb      	ldrb	r3, [r7, #7]
 8011e36:	2b01      	cmp	r3, #1
 8011e38:	d002      	beq.n	8011e40 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x16>
 8011e3a:	2b02      	cmp	r3, #2
 8011e3c:	d002      	beq.n	8011e44 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1a>
 8011e3e:	e003      	b.n	8011e48 <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x1e>
    case TfLitePadding::kTfLitePaddingSame:
      return PaddingType::kSame;
 8011e40:	2301      	movs	r3, #1
 8011e42:	e002      	b.n	8011e4a <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingValid:
      return PaddingType::kValid;
 8011e44:	2302      	movs	r3, #2
 8011e46:	e000      	b.n	8011e4a <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding+0x20>
    case TfLitePadding::kTfLitePaddingUnknown:
    default:
      return PaddingType::kNone;
 8011e48:	2300      	movs	r3, #0
  }
}
 8011e4a:	4618      	mov	r0, r3
 8011e4c:	370c      	adds	r7, #12
 8011e4e:	46bd      	mov	sp, r7
 8011e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e54:	4770      	bx	lr
	...

08011e58 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>:

TfLiteStatus CalculateOpData(TfLiteContext* context, TfLiteNode* node,
                             const TfLiteConvParams* params, int width,
                             int height, int filter_width, int filter_height,
                             int out_width, int out_height,
                             const TfLiteType data_type, OpData* data) {
 8011e58:	b5f0      	push	{r4, r5, r6, r7, lr}
 8011e5a:	b09d      	sub	sp, #116	; 0x74
 8011e5c:	af0a      	add	r7, sp, #40	; 0x28
 8011e5e:	6278      	str	r0, [r7, #36]	; 0x24
 8011e60:	6239      	str	r1, [r7, #32]
 8011e62:	61fa      	str	r2, [r7, #28]
 8011e64:	61bb      	str	r3, [r7, #24]
  bool has_bias = node->inputs->size == 3;
 8011e66:	6a3b      	ldr	r3, [r7, #32]
 8011e68:	681b      	ldr	r3, [r3, #0]
 8011e6a:	681b      	ldr	r3, [r3, #0]
 8011e6c:	2b03      	cmp	r3, #3
 8011e6e:	bf0c      	ite	eq
 8011e70:	2301      	moveq	r3, #1
 8011e72:	2300      	movne	r3, #0
 8011e74:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
  // Check number of inputs/outputs
  TF_LITE_ENSURE(context, has_bias || node->inputs->size == 2);
 8011e78:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8011e7c:	f083 0301 	eor.w	r3, r3, #1
 8011e80:	b2db      	uxtb	r3, r3
 8011e82:	2b00      	cmp	r3, #0
 8011e84:	d010      	beq.n	8011ea8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x50>
 8011e86:	6a3b      	ldr	r3, [r7, #32]
 8011e88:	681b      	ldr	r3, [r3, #0]
 8011e8a:	681b      	ldr	r3, [r3, #0]
 8011e8c:	2b02      	cmp	r3, #2
 8011e8e:	d00b      	beq.n	8011ea8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x50>
 8011e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e92:	695c      	ldr	r4, [r3, #20]
 8011e94:	4b4e      	ldr	r3, [pc, #312]	; (8011fd0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x178>)
 8011e96:	9300      	str	r3, [sp, #0]
 8011e98:	f240 2323 	movw	r3, #547	; 0x223
 8011e9c:	4a4d      	ldr	r2, [pc, #308]	; (8011fd4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 8011e9e:	494e      	ldr	r1, [pc, #312]	; (8011fd8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x180>)
 8011ea0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ea2:	47a0      	blx	r4
 8011ea4:	2301      	movs	r3, #1
 8011ea6:	e08f      	b.n	8011fc8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
  TF_LITE_ENSURE_EQ(context, node->outputs->size, 1);
 8011ea8:	6a3b      	ldr	r3, [r7, #32]
 8011eaa:	685b      	ldr	r3, [r3, #4]
 8011eac:	681b      	ldr	r3, [r3, #0]
 8011eae:	2b01      	cmp	r3, #1
 8011eb0:	d013      	beq.n	8011eda <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x82>
 8011eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011eb4:	695c      	ldr	r4, [r3, #20]
 8011eb6:	6a3b      	ldr	r3, [r7, #32]
 8011eb8:	685b      	ldr	r3, [r3, #4]
 8011eba:	681b      	ldr	r3, [r3, #0]
 8011ebc:	2201      	movs	r2, #1
 8011ebe:	9203      	str	r2, [sp, #12]
 8011ec0:	9302      	str	r3, [sp, #8]
 8011ec2:	4b46      	ldr	r3, [pc, #280]	; (8011fdc <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x184>)
 8011ec4:	9301      	str	r3, [sp, #4]
 8011ec6:	4b46      	ldr	r3, [pc, #280]	; (8011fe0 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x188>)
 8011ec8:	9300      	str	r3, [sp, #0]
 8011eca:	f44f 7309 	mov.w	r3, #548	; 0x224
 8011ece:	4a41      	ldr	r2, [pc, #260]	; (8011fd4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x17c>)
 8011ed0:	4944      	ldr	r1, [pc, #272]	; (8011fe4 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x18c>)
 8011ed2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011ed4:	47a0      	blx	r4
 8011ed6:	2301      	movs	r3, #1
 8011ed8:	e076      	b.n	8011fc8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>

  // Matching GetWindowedOutputSize in TensorFlow.
  auto padding = params->padding;
 8011eda:	69fb      	ldr	r3, [r7, #28]
 8011edc:	781b      	ldrb	r3, [r3, #0]
 8011ede:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8011ee2:	69fb      	ldr	r3, [r7, #28]
 8011ee4:	6899      	ldr	r1, [r3, #8]
 8011ee6:	69fb      	ldr	r3, [r7, #28]
 8011ee8:	685c      	ldr	r4, [r3, #4]
      params->dilation_height_factor, params->dilation_width_factor, height,
 8011eea:	69fb      	ldr	r3, [r7, #28]
 8011eec:	695d      	ldr	r5, [r3, #20]
 8011eee:	69fb      	ldr	r3, [r7, #28]
 8011ef0:	691b      	ldr	r3, [r3, #16]
      width, filter_height, filter_width, padding, &out_height, &out_width);
 8011ef2:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011ef4:	f107 0008 	add.w	r0, r7, #8
 8011ef8:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8011efc:	9207      	str	r2, [sp, #28]
 8011efe:	f107 0270 	add.w	r2, r7, #112	; 0x70
 8011f02:	9206      	str	r2, [sp, #24]
 8011f04:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8011f08:	9205      	str	r2, [sp, #20]
 8011f0a:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8011f0c:	9204      	str	r2, [sp, #16]
 8011f0e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8011f10:	9203      	str	r2, [sp, #12]
 8011f12:	69ba      	ldr	r2, [r7, #24]
 8011f14:	9202      	str	r2, [sp, #8]
 8011f16:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8011f18:	9201      	str	r2, [sp, #4]
 8011f1a:	9300      	str	r3, [sp, #0]
 8011f1c:	462b      	mov	r3, r5
 8011f1e:	4622      	mov	r2, r4
 8011f20:	f7ff ff39 	bl	8011d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 8011f24:	4634      	mov	r4, r6
 8011f26:	f107 0308 	add.w	r3, r7, #8
 8011f2a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011f2c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  // Note that quantized inference requires that all tensors have their
  // parameters set. This is usually done during quantized training.
  if (data_type != kTfLiteFloat32) {
 8011f30:	f897 3074 	ldrb.w	r3, [r7, #116]	; 0x74
 8011f34:	2b01      	cmp	r3, #1
 8011f36:	d046      	beq.n	8011fc6 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x16e>
    const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8011f38:	2200      	movs	r2, #0
 8011f3a:	6a39      	ldr	r1, [r7, #32]
 8011f3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f3e:	f7fd f9b8 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011f42:	6438      	str	r0, [r7, #64]	; 0x40
    const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8011f44:	2201      	movs	r2, #1
 8011f46:	6a39      	ldr	r1, [r7, #32]
 8011f48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f4a:	f7fd f9b2 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8011f4e:	63f8      	str	r0, [r7, #60]	; 0x3c
    const TfLiteTensor* bias =
        GetOptionalInputTensor(context, node, kBiasTensor);
 8011f50:	2202      	movs	r2, #2
 8011f52:	6a39      	ldr	r1, [r7, #32]
 8011f54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f56:	f7ff fe94 	bl	8011c82 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8011f5a:	63b8      	str	r0, [r7, #56]	; 0x38
    TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8011f5c:	2200      	movs	r2, #0
 8011f5e:	6a39      	ldr	r1, [r7, #32]
 8011f60:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011f62:	f7fd f9bc 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8011f66:	6378      	str	r0, [r7, #52]	; 0x34
    int output_channels = filter->dims->data[kConvQuantizedDimension];
 8011f68:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011f6a:	689b      	ldr	r3, [r3, #8]
 8011f6c:	685b      	ldr	r3, [r3, #4]
 8011f6e:	633b      	str	r3, [r7, #48]	; 0x30

    TF_LITE_ENSURE_STATUS(tflite::PopulateConvolutionQuantizationParams(
 8011f70:	69fb      	ldr	r3, [r7, #28]
 8011f72:	330c      	adds	r3, #12
 8011f74:	607b      	str	r3, [r7, #4]
 8011f76:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8011f78:	3210      	adds	r2, #16
 8011f7a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8011f7c:	3114      	adds	r1, #20
 8011f7e:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8011f80:	3020      	adds	r0, #32
 8011f82:	6fbc      	ldr	r4, [r7, #120]	; 0x78
 8011f84:	3424      	adds	r4, #36	; 0x24
 8011f86:	6fbd      	ldr	r5, [r7, #120]	; 0x78
 8011f88:	69ad      	ldr	r5, [r5, #24]
 8011f8a:	6fbe      	ldr	r6, [r7, #120]	; 0x78
 8011f8c:	69f6      	ldr	r6, [r6, #28]
 8011f8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8011f90:	9308      	str	r3, [sp, #32]
 8011f92:	9607      	str	r6, [sp, #28]
 8011f94:	9506      	str	r5, [sp, #24]
 8011f96:	9405      	str	r4, [sp, #20]
 8011f98:	9004      	str	r0, [sp, #16]
 8011f9a:	9103      	str	r1, [sp, #12]
 8011f9c:	9202      	str	r2, [sp, #8]
 8011f9e:	687b      	ldr	r3, [r7, #4]
 8011fa0:	9301      	str	r3, [sp, #4]
 8011fa2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011fa4:	9300      	str	r3, [sp, #0]
 8011fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011fa8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011faa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8011fac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8011fae:	f7fc fdb5 	bl	800eb1c <_ZN6tflite37PopulateConvolutionQuantizationParamsEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_RK21TfLiteFusedActivationPlPiS9_S9_S9_SA_i>
 8011fb2:	4603      	mov	r3, r0
 8011fb4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8011fb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d002      	beq.n	8011fc6 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x16e>
 8011fc0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8011fc4:	e000      	b.n	8011fc8 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE+0x170>
        &data->output_activation_min, &data->output_activation_max,
        data->per_channel_output_multiplier,
        reinterpret_cast<int*>(data->per_channel_output_shift),
        output_channels));
  }
  return kTfLiteOk;
 8011fc6:	2300      	movs	r3, #0
}
 8011fc8:	4618      	mov	r0, r3
 8011fca:	374c      	adds	r7, #76	; 0x4c
 8011fcc:	46bd      	mov	sp, r7
 8011fce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8011fd0:	0801e570 	.word	0x0801e570
 8011fd4:	0801e508 	.word	0x0801e508
 8011fd8:	0801e558 	.word	0x0801e558
 8011fdc:	0801e5b0 	.word	0x0801e5b0
 8011fe0:	0801e5b4 	.word	0x0801e5b4
 8011fe4:	0801e594 	.word	0x0801e594

08011fe8 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj>:

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8011fe8:	b580      	push	{r7, lr}
 8011fea:	b086      	sub	sp, #24
 8011fec:	af00      	add	r7, sp, #0
 8011fee:	60f8      	str	r0, [r7, #12]
 8011ff0:	60b9      	str	r1, [r7, #8]
 8011ff2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8011ff4:	68fb      	ldr	r3, [r7, #12]
 8011ff6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011ff8:	2b00      	cmp	r3, #0
 8011ffa:	d101      	bne.n	8012000 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x18>
 8011ffc:	f008 ffd8 	bl	801afb0 <abort>
  void* data = nullptr;
 8012000:	2300      	movs	r3, #0
 8012002:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 8012004:	68fb      	ldr	r3, [r7, #12]
 8012006:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012008:	f107 0214 	add.w	r2, r7, #20
 801200c:	2128      	movs	r1, #40	; 0x28
 801200e:	68f8      	ldr	r0, [r7, #12]
 8012010:	4798      	blx	r3
 8012012:	4603      	mov	r3, r0
 8012014:	2b01      	cmp	r3, #1
 8012016:	bf0c      	ite	eq
 8012018:	2301      	moveq	r3, #1
 801201a:	2300      	movne	r3, #0
 801201c:	b2db      	uxtb	r3, r3
 801201e:	2b00      	cmp	r3, #0
 8012020:	d001      	beq.n	8012026 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 8012022:	2300      	movs	r3, #0
 8012024:	e000      	b.n	8012028 <_ZN6tflite3ops5micro4conv4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 8012026:	697b      	ldr	r3, [r7, #20]
}
 8012028:	4618      	mov	r0, r3
 801202a:	3718      	adds	r7, #24
 801202c:	46bd      	mov	sp, r7
 801202e:	bd80      	pop	{r7, pc}

08012030 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8012030:	b590      	push	{r4, r7, lr}
 8012032:	b099      	sub	sp, #100	; 0x64
 8012034:	af08      	add	r7, sp, #32
 8012036:	6078      	str	r0, [r7, #4]
 8012038:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 801203a:	683b      	ldr	r3, [r7, #0]
 801203c:	691b      	ldr	r3, [r3, #16]
 801203e:	2b00      	cmp	r3, #0
 8012040:	d101      	bne.n	8012046 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012042:	f008 ffb5 	bl	801afb0 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8012046:	683b      	ldr	r3, [r7, #0]
 8012048:	695b      	ldr	r3, [r3, #20]
 801204a:	2b00      	cmp	r3, #0
 801204c:	d101      	bne.n	8012052 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 801204e:	f008 ffaf 	bl	801afb0 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8012052:	683b      	ldr	r3, [r7, #0]
 8012054:	691b      	ldr	r3, [r3, #16]
 8012056:	63fb      	str	r3, [r7, #60]	; 0x3c
  const auto params = static_cast<const TfLiteConvParams*>(node->builtin_data);
 8012058:	683b      	ldr	r3, [r7, #0]
 801205a:	695b      	ldr	r3, [r3, #20]
 801205c:	63bb      	str	r3, [r7, #56]	; 0x38

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801205e:	2200      	movs	r2, #0
 8012060:	6839      	ldr	r1, [r7, #0]
 8012062:	6878      	ldr	r0, [r7, #4]
 8012064:	f7fd f93b 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012068:	6378      	str	r0, [r7, #52]	; 0x34
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 801206a:	2200      	movs	r2, #0
 801206c:	6839      	ldr	r1, [r7, #0]
 801206e:	6878      	ldr	r0, [r7, #4]
 8012070:	f7fd f91f 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012074:	6338      	str	r0, [r7, #48]	; 0x30
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8012076:	2201      	movs	r2, #1
 8012078:	6839      	ldr	r1, [r7, #0]
 801207a:	6878      	ldr	r0, [r7, #4]
 801207c:	f7fd f919 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012080:	62f8      	str	r0, [r7, #44]	; 0x2c

  int input_width = input->dims->data[2];
 8012082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012084:	689b      	ldr	r3, [r3, #8]
 8012086:	68db      	ldr	r3, [r3, #12]
 8012088:	62bb      	str	r3, [r7, #40]	; 0x28
  int input_height = input->dims->data[1];
 801208a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801208c:	689b      	ldr	r3, [r3, #8]
 801208e:	689b      	ldr	r3, [r3, #8]
 8012090:	627b      	str	r3, [r7, #36]	; 0x24
  int filter_width = filter->dims->data[2];
 8012092:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012094:	689b      	ldr	r3, [r3, #8]
 8012096:	68db      	ldr	r3, [r3, #12]
 8012098:	623b      	str	r3, [r7, #32]
  int filter_height = filter->dims->data[1];
 801209a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801209c:	689b      	ldr	r3, [r3, #8]
 801209e:	689b      	ldr	r3, [r3, #8]
 80120a0:	61fb      	str	r3, [r7, #28]
  int output_width = output->dims->data[2];
 80120a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120a4:	689b      	ldr	r3, [r3, #8]
 80120a6:	68db      	ldr	r3, [r3, #12]
 80120a8:	61bb      	str	r3, [r7, #24]
  int output_height = output->dims->data[1];
 80120aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ac:	689b      	ldr	r3, [r3, #8]
 80120ae:	689b      	ldr	r3, [r3, #8]
 80120b0:	617b      	str	r3, [r7, #20]

  // Dynimically allocate per-channel quantization parameters.
  const int num_channels = filter->dims->data[kConvQuantizedDimension];
 80120b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80120b4:	689b      	ldr	r3, [r3, #8]
 80120b6:	685b      	ldr	r3, [r3, #4]
 80120b8:	613b      	str	r3, [r7, #16]
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 80120ba:	687b      	ldr	r3, [r7, #4]
 80120bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120be:	693a      	ldr	r2, [r7, #16]
 80120c0:	0091      	lsls	r1, r2, #2
 80120c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120c4:	3218      	adds	r2, #24
 80120c6:	6878      	ldr	r0, [r7, #4]
 80120c8:	4798      	blx	r3
 80120ca:	4603      	mov	r3, r0
 80120cc:	73fb      	strb	r3, [r7, #15]
 80120ce:	7bfb      	ldrb	r3, [r7, #15]
 80120d0:	2b00      	cmp	r3, #0
 80120d2:	d001      	beq.n	80120d8 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xa8>
 80120d4:	7bfb      	ldrb	r3, [r7, #15]
 80120d6:	e0ad      	b.n	8012234 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_multiplier)));
  TF_LITE_ENSURE_STATUS(context->AllocatePersistentBuffer(
 80120d8:	687b      	ldr	r3, [r7, #4]
 80120da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80120dc:	693a      	ldr	r2, [r7, #16]
 80120de:	0091      	lsls	r1, r2, #2
 80120e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80120e2:	321c      	adds	r2, #28
 80120e4:	6878      	ldr	r0, [r7, #4]
 80120e6:	4798      	blx	r3
 80120e8:	4603      	mov	r3, r0
 80120ea:	73bb      	strb	r3, [r7, #14]
 80120ec:	7bbb      	ldrb	r3, [r7, #14]
 80120ee:	2b00      	cmp	r3, #0
 80120f0:	d001      	beq.n	80120f6 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
 80120f2:	7bbb      	ldrb	r3, [r7, #14]
 80120f4:	e09e      	b.n	8012234 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
      context, num_channels * sizeof(int32_t),
      reinterpret_cast<void**>(&data->per_channel_output_shift)));

  // All per-channel quantized tensors need valid zero point and scale arrays.
  if (input->type == kTfLiteInt8) {
 80120f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80120f8:	781b      	ldrb	r3, [r3, #0]
 80120fa:	2b09      	cmp	r3, #9
 80120fc:	f040 8083 	bne.w	8012206 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
    TF_LITE_ENSURE_EQ(context, filter->quantization.type,
 8012100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012102:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012106:	2b01      	cmp	r3, #1
 8012108:	d014      	beq.n	8012134 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x104>
 801210a:	687b      	ldr	r3, [r7, #4]
 801210c:	695c      	ldr	r4, [r3, #20]
 801210e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012110:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012114:	461a      	mov	r2, r3
 8012116:	2301      	movs	r3, #1
 8012118:	9303      	str	r3, [sp, #12]
 801211a:	9202      	str	r2, [sp, #8]
 801211c:	4b47      	ldr	r3, [pc, #284]	; (801223c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x20c>)
 801211e:	9301      	str	r3, [sp, #4]
 8012120:	4b47      	ldr	r3, [pc, #284]	; (8012240 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x210>)
 8012122:	9300      	str	r3, [sp, #0]
 8012124:	f240 2369 	movw	r3, #617	; 0x269
 8012128:	4a46      	ldr	r2, [pc, #280]	; (8012244 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 801212a:	4947      	ldr	r1, [pc, #284]	; (8012248 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 801212c:	6878      	ldr	r0, [r7, #4]
 801212e:	47a0      	blx	r4
 8012130:	2301      	movs	r3, #1
 8012132:	e07f      	b.n	8012234 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                      kTfLiteAffineQuantization);

    const auto* affine_quantization =
 8012134:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012136:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012138:	60bb      	str	r3, [r7, #8]
        static_cast<TfLiteAffineQuantization*>(filter->quantization.params);
    TF_LITE_ENSURE(context, affine_quantization);
 801213a:	68bb      	ldr	r3, [r7, #8]
 801213c:	2b00      	cmp	r3, #0
 801213e:	d10b      	bne.n	8012158 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x128>
 8012140:	687b      	ldr	r3, [r7, #4]
 8012142:	695c      	ldr	r4, [r3, #20]
 8012144:	4b41      	ldr	r3, [pc, #260]	; (801224c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x21c>)
 8012146:	9300      	str	r3, [sp, #0]
 8012148:	f240 236e 	movw	r3, #622	; 0x26e
 801214c:	4a3d      	ldr	r2, [pc, #244]	; (8012244 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 801214e:	4940      	ldr	r1, [pc, #256]	; (8012250 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8012150:	6878      	ldr	r0, [r7, #4]
 8012152:	47a0      	blx	r4
 8012154:	2301      	movs	r3, #1
 8012156:	e06d      	b.n	8012234 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
    TF_LITE_ENSURE(context, affine_quantization->scale);
 8012158:	68bb      	ldr	r3, [r7, #8]
 801215a:	681b      	ldr	r3, [r3, #0]
 801215c:	2b00      	cmp	r3, #0
 801215e:	d10b      	bne.n	8012178 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x148>
 8012160:	687b      	ldr	r3, [r7, #4]
 8012162:	695c      	ldr	r4, [r3, #20]
 8012164:	4b3b      	ldr	r3, [pc, #236]	; (8012254 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x224>)
 8012166:	9300      	str	r3, [sp, #0]
 8012168:	f240 236f 	movw	r3, #623	; 0x26f
 801216c:	4a35      	ldr	r2, [pc, #212]	; (8012244 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 801216e:	4938      	ldr	r1, [pc, #224]	; (8012250 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8012170:	6878      	ldr	r0, [r7, #4]
 8012172:	47a0      	blx	r4
 8012174:	2301      	movs	r3, #1
 8012176:	e05d      	b.n	8012234 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
    TF_LITE_ENSURE(context, affine_quantization->zero_point);
 8012178:	68bb      	ldr	r3, [r7, #8]
 801217a:	685b      	ldr	r3, [r3, #4]
 801217c:	2b00      	cmp	r3, #0
 801217e:	d10b      	bne.n	8012198 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x168>
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	695c      	ldr	r4, [r3, #20]
 8012184:	4b34      	ldr	r3, [pc, #208]	; (8012258 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x228>)
 8012186:	9300      	str	r3, [sp, #0]
 8012188:	f44f 731c 	mov.w	r3, #624	; 0x270
 801218c:	4a2d      	ldr	r2, [pc, #180]	; (8012244 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 801218e:	4930      	ldr	r1, [pc, #192]	; (8012250 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 8012190:	6878      	ldr	r0, [r7, #4]
 8012192:	47a0      	blx	r4
 8012194:	2301      	movs	r3, #1
 8012196:	e04d      	b.n	8012234 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>

    TF_LITE_ENSURE(context,
 8012198:	68bb      	ldr	r3, [r7, #8]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	681b      	ldr	r3, [r3, #0]
 801219e:	2b01      	cmp	r3, #1
 80121a0:	d013      	beq.n	80121ca <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
 80121a2:	68bb      	ldr	r3, [r7, #8]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	681a      	ldr	r2, [r3, #0]
 80121a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80121aa:	689b      	ldr	r3, [r3, #8]
 80121ac:	685b      	ldr	r3, [r3, #4]
 80121ae:	429a      	cmp	r2, r3
 80121b0:	d00b      	beq.n	80121ca <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x19a>
 80121b2:	687b      	ldr	r3, [r7, #4]
 80121b4:	695c      	ldr	r4, [r3, #20]
 80121b6:	4b29      	ldr	r3, [pc, #164]	; (801225c <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x22c>)
 80121b8:	9300      	str	r3, [sp, #0]
 80121ba:	f240 2372 	movw	r3, #626	; 0x272
 80121be:	4a21      	ldr	r2, [pc, #132]	; (8012244 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80121c0:	4923      	ldr	r1, [pc, #140]	; (8012250 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x220>)
 80121c2:	6878      	ldr	r0, [r7, #4]
 80121c4:	47a0      	blx	r4
 80121c6:	2301      	movs	r3, #1
 80121c8:	e034      	b.n	8012234 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                   affine_quantization->scale->size == 1 ||
                       affine_quantization->scale->size ==
                           filter->dims->data[kConvQuantizedDimension]);
    TF_LITE_ENSURE_EQ(context, affine_quantization->scale->size,
 80121ca:	68bb      	ldr	r3, [r7, #8]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	681a      	ldr	r2, [r3, #0]
 80121d0:	68bb      	ldr	r3, [r7, #8]
 80121d2:	685b      	ldr	r3, [r3, #4]
 80121d4:	681b      	ldr	r3, [r3, #0]
 80121d6:	429a      	cmp	r2, r3
 80121d8:	d015      	beq.n	8012206 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x1d6>
 80121da:	687b      	ldr	r3, [r7, #4]
 80121dc:	695c      	ldr	r4, [r3, #20]
 80121de:	68bb      	ldr	r3, [r7, #8]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	68ba      	ldr	r2, [r7, #8]
 80121e6:	6852      	ldr	r2, [r2, #4]
 80121e8:	6812      	ldr	r2, [r2, #0]
 80121ea:	9203      	str	r2, [sp, #12]
 80121ec:	9302      	str	r3, [sp, #8]
 80121ee:	4b1c      	ldr	r3, [pc, #112]	; (8012260 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x230>)
 80121f0:	9301      	str	r3, [sp, #4]
 80121f2:	4b1c      	ldr	r3, [pc, #112]	; (8012264 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x234>)
 80121f4:	9300      	str	r3, [sp, #0]
 80121f6:	f240 2376 	movw	r3, #630	; 0x276
 80121fa:	4a12      	ldr	r2, [pc, #72]	; (8012244 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x214>)
 80121fc:	4912      	ldr	r1, [pc, #72]	; (8012248 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x218>)
 80121fe:	6878      	ldr	r0, [r7, #4]
 8012200:	47a0      	blx	r4
 8012202:	2301      	movs	r3, #1
 8012204:	e016      	b.n	8012234 <_ZN6tflite3ops5micro4conv7PrepareEP13TfLiteContextP10TfLiteNode+0x204>
                      affine_quantization->zero_point->size);
  }

  return CalculateOpData(context, node, params, input_width, input_height,
                         filter_width, filter_height, output_width,
                         output_height, input->type, data);
 8012206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012208:	781b      	ldrb	r3, [r3, #0]
  return CalculateOpData(context, node, params, input_width, input_height,
 801220a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801220c:	9206      	str	r2, [sp, #24]
 801220e:	9305      	str	r3, [sp, #20]
 8012210:	697b      	ldr	r3, [r7, #20]
 8012212:	9304      	str	r3, [sp, #16]
 8012214:	69bb      	ldr	r3, [r7, #24]
 8012216:	9303      	str	r3, [sp, #12]
 8012218:	69fb      	ldr	r3, [r7, #28]
 801221a:	9302      	str	r3, [sp, #8]
 801221c:	6a3b      	ldr	r3, [r7, #32]
 801221e:	9301      	str	r3, [sp, #4]
 8012220:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012222:	9300      	str	r3, [sp, #0]
 8012224:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012226:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012228:	6839      	ldr	r1, [r7, #0]
 801222a:	6878      	ldr	r0, [r7, #4]
 801222c:	f7ff fe14 	bl	8011e58 <_ZN6tflite3ops5micro4conv15CalculateOpDataEP13TfLiteContextP10TfLiteNodePK16TfLiteConvParamsiiiiii10TfLiteTypePNS2_6OpDataE>
 8012230:	4603      	mov	r3, r0
                         output_height, input->type, data);
 8012232:	bf00      	nop
}  // namespace conv
 8012234:	4618      	mov	r0, r3
 8012236:	3744      	adds	r7, #68	; 0x44
 8012238:	46bd      	mov	sp, r7
 801223a:	bd90      	pop	{r4, r7, pc}
 801223c:	0801e5c8 	.word	0x0801e5c8
 8012240:	0801e5e4 	.word	0x0801e5e4
 8012244:	0801e508 	.word	0x0801e508
 8012248:	0801e594 	.word	0x0801e594
 801224c:	0801e600 	.word	0x0801e600
 8012250:	0801e558 	.word	0x0801e558
 8012254:	0801e614 	.word	0x0801e614
 8012258:	0801e630 	.word	0x0801e630
 801225c:	0801e650 	.word	0x0801e650
 8012260:	0801e6cc 	.word	0x0801e6cc
 8012264:	0801e6f4 	.word	0x0801e6f4

08012268 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                   TfLiteConvParams* params, const OpData& data,
                   const TfLiteTensor* input, const TfLiteTensor* filter,
                   const TfLiteTensor* bias, TfLiteTensor* im2col,
                   TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 8012268:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801226c:	b0be      	sub	sp, #248	; 0xf8
 801226e:	af08      	add	r7, sp, #32
 8012270:	6178      	str	r0, [r7, #20]
 8012272:	6139      	str	r1, [r7, #16]
 8012274:	60fa      	str	r2, [r7, #12]
 8012276:	60bb      	str	r3, [r7, #8]
  const int32_t input_offset = -input->params.zero_point;
 8012278:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 801227c:	691b      	ldr	r3, [r3, #16]
 801227e:	425b      	negs	r3, r3
 8012280:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  const int32_t filter_offset = -filter->params.zero_point;
 8012284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012288:	691b      	ldr	r3, [r3, #16]
 801228a:	425b      	negs	r3, r3
 801228c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  const int32_t output_offset = output->params.zero_point;
 8012290:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8012294:	691b      	ldr	r3, [r3, #16]
 8012296:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc

  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	781b      	ldrb	r3, [r3, #0]
 801229e:	4618      	mov	r0, r3
 80122a0:	f7ff fdc3 	bl	8011e2a <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 80122a4:	4603      	mov	r3, r0
 80122a6:	773b      	strb	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 80122a8:	68bb      	ldr	r3, [r7, #8]
 80122aa:	681b      	ldr	r3, [r3, #0]
 80122ac:	b21b      	sxth	r3, r3
 80122ae:	83fb      	strh	r3, [r7, #30]
  op_params.padding_values.height = data.padding.height;
 80122b0:	68bb      	ldr	r3, [r7, #8]
 80122b2:	685b      	ldr	r3, [r3, #4]
 80122b4:	b21b      	sxth	r3, r3
 80122b6:	843b      	strh	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80122b8:	68fb      	ldr	r3, [r7, #12]
 80122ba:	685b      	ldr	r3, [r3, #4]
 80122bc:	b21b      	sxth	r3, r3
 80122be:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.stride_height = params->stride_height;
 80122c0:	68fb      	ldr	r3, [r7, #12]
 80122c2:	689b      	ldr	r3, [r3, #8]
 80122c4:	b21b      	sxth	r3, r3
 80122c6:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 80122c8:	68fb      	ldr	r3, [r7, #12]
 80122ca:	691b      	ldr	r3, [r3, #16]
 80122cc:	b21b      	sxth	r3, r3
 80122ce:	857b      	strh	r3, [r7, #42]	; 0x2a
  op_params.dilation_height_factor = params->dilation_height_factor;
 80122d0:	68fb      	ldr	r3, [r7, #12]
 80122d2:	695b      	ldr	r3, [r3, #20]
 80122d4:	b21b      	sxth	r3, r3
 80122d6:	85bb      	strh	r3, [r7, #44]	; 0x2c
  op_params.input_offset = input_offset;
 80122d8:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80122dc:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.weights_offset = filter_offset;
 80122de:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80122e2:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.output_offset = output_offset;
 80122e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80122e8:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.output_multiplier = data.output_multiplier;
 80122ea:	68bb      	ldr	r3, [r7, #8]
 80122ec:	691b      	ldr	r3, [r3, #16]
 80122ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  op_params.output_shift = -data.output_shift;
 80122f0:	68bb      	ldr	r3, [r7, #8]
 80122f2:	695b      	ldr	r3, [r3, #20]
 80122f4:	425b      	negs	r3, r3
 80122f6:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_min = data.output_activation_min;
 80122f8:	68bb      	ldr	r3, [r7, #8]
 80122fa:	6a1b      	ldr	r3, [r3, #32]
 80122fc:	647b      	str	r3, [r7, #68]	; 0x44
  op_params.quantized_activation_max = data.output_activation_max;
 80122fe:	68bb      	ldr	r3, [r7, #8]
 8012300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012302:	64bb      	str	r3, [r7, #72]	; 0x48
  reference_ops::Conv(op_params, GetTensorShape(input),
 8012304:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8012308:	f8d7 10f0 	ldr.w	r1, [r7, #240]	; 0xf0
 801230c:	4618      	mov	r0, r3
 801230e:	f7fd f914 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012312:	f8d7 00f0 	ldr.w	r0, [r7, #240]	; 0xf0
 8012316:	f7fc fff8 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801231a:	4680      	mov	r8, r0
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 801231c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8012320:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 8012324:	4618      	mov	r0, r3
 8012326:	f7fd f908 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801232a:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 801232e:	f7fc ffec 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8012332:	4604      	mov	r4, r0
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 8012334:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8012338:	f8d7 10f8 	ldr.w	r1, [r7, #248]	; 0xf8
 801233c:	4618      	mov	r0, r3
 801233e:	f7fd f8fc 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8012342:	f8d7 00f8 	ldr.w	r0, [r7, #248]	; 0xf8
 8012346:	f7fe ff66 	bl	8011216 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 801234a:	4605      	mov	r5, r0
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 801234c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8012350:	f8d7 1104 	ldr.w	r1, [r7, #260]	; 0x104
 8012354:	4618      	mov	r0, r3
 8012356:	f7fd f8f0 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801235a:	f8d7 0104 	ldr.w	r0, [r7, #260]	; 0x104
 801235e:	f7fc ffe5 	bl	800f32c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8012362:	4606      	mov	r6, r0
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 8012364:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012368:	f8d7 10fc 	ldr.w	r1, [r7, #252]	; 0xfc
 801236c:	4618      	mov	r0, r3
 801236e:	f7fd f8e4 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8012372:	f8d7 00fc 	ldr.w	r0, [r7, #252]	; 0xfc
 8012376:	f7fc ffd9 	bl	800f32c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 801237a:	6078      	str	r0, [r7, #4]
 801237c:	f107 026c 	add.w	r2, r7, #108	; 0x6c
 8012380:	f107 0154 	add.w	r1, r7, #84	; 0x54
 8012384:	f107 001c 	add.w	r0, r7, #28
 8012388:	2300      	movs	r3, #0
 801238a:	9307      	str	r3, [sp, #28]
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	9306      	str	r3, [sp, #24]
 8012390:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8012394:	9305      	str	r3, [sp, #20]
 8012396:	9604      	str	r6, [sp, #16]
 8012398:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 801239c:	9303      	str	r3, [sp, #12]
 801239e:	9502      	str	r5, [sp, #8]
 80123a0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123a4:	9301      	str	r3, [sp, #4]
 80123a6:	9400      	str	r4, [sp, #0]
 80123a8:	4613      	mov	r3, r2
 80123aa:	4642      	mov	r2, r8
 80123ac:	f7ff f912 	bl	80115d4 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_PhS6_SB_Pv>
                      GetTensorData<uint8_t>(output), GetTensorShape(im2col),
 80123b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80123b4:	4618      	mov	r0, r3
 80123b6:	f7fc ffeb 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<int32_t>(bias), GetTensorShape(output),
 80123ba:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80123be:	4618      	mov	r0, r3
 80123c0:	f7fc ffe6 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(filter), GetTensorShape(bias),
 80123c4:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80123c8:	4618      	mov	r0, r3
 80123ca:	f7fc ffe1 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(input), GetTensorShape(filter),
 80123ce:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80123d2:	4618      	mov	r0, r3
 80123d4:	f7fc ffdc 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80123d8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80123dc:	4618      	mov	r0, r3
 80123de:	f7fc ffd7 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<uint8_t>(im2col), nullptr);
}
 80123e2:	bf00      	nop
 80123e4:	37d8      	adds	r7, #216	; 0xd8
 80123e6:	46bd      	mov	sp, r7
 80123e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080123ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>:
void EvalQuantizedPerChannel(TfLiteContext* context, TfLiteNode* node,
                             TfLiteConvParams* params, const OpData& data,
                             const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             TfLiteTensor* im2col) {
 80123ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80123ee:	b0b5      	sub	sp, #212	; 0xd4
 80123f0:	af08      	add	r7, sp, #32
 80123f2:	6178      	str	r0, [r7, #20]
 80123f4:	6139      	str	r1, [r7, #16]
 80123f6:	60fa      	str	r2, [r7, #12]
 80123f8:	60bb      	str	r3, [r7, #8]
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.input_offset = -input->params.zero_point;
 80123fa:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80123fe:	691b      	ldr	r3, [r3, #16]
 8012400:	425b      	negs	r3, r3
 8012402:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.output_offset = output->params.zero_point;
 8012404:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8012408:	691b      	ldr	r3, [r3, #16]
 801240a:	637b      	str	r3, [r7, #52]	; 0x34
  op_params.stride_height = params->stride_height;
 801240c:	68fb      	ldr	r3, [r7, #12]
 801240e:	689b      	ldr	r3, [r3, #8]
 8012410:	b21b      	sxth	r3, r3
 8012412:	84bb      	strh	r3, [r7, #36]	; 0x24
  op_params.stride_width = params->stride_width;
 8012414:	68fb      	ldr	r3, [r7, #12]
 8012416:	685b      	ldr	r3, [r3, #4]
 8012418:	b21b      	sxth	r3, r3
 801241a:	847b      	strh	r3, [r7, #34]	; 0x22
  op_params.dilation_height_factor = params->dilation_height_factor;
 801241c:	68fb      	ldr	r3, [r7, #12]
 801241e:	695b      	ldr	r3, [r3, #20]
 8012420:	b21b      	sxth	r3, r3
 8012422:	853b      	strh	r3, [r7, #40]	; 0x28
  op_params.dilation_width_factor = params->dilation_width_factor;
 8012424:	68fb      	ldr	r3, [r7, #12]
 8012426:	691b      	ldr	r3, [r3, #16]
 8012428:	b21b      	sxth	r3, r3
 801242a:	84fb      	strh	r3, [r7, #38]	; 0x26
  op_params.padding_values.height = data.padding.height;
 801242c:	68bb      	ldr	r3, [r7, #8]
 801242e:	685b      	ldr	r3, [r3, #4]
 8012430:	b21b      	sxth	r3, r3
 8012432:	83bb      	strh	r3, [r7, #28]
  op_params.padding_values.width = data.padding.width;
 8012434:	68bb      	ldr	r3, [r7, #8]
 8012436:	681b      	ldr	r3, [r3, #0]
 8012438:	b21b      	sxth	r3, r3
 801243a:	837b      	strh	r3, [r7, #26]
  op_params.quantized_activation_min = data.output_activation_min;
 801243c:	68bb      	ldr	r3, [r7, #8]
 801243e:	6a1b      	ldr	r3, [r3, #32]
 8012440:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.quantized_activation_max = data.output_activation_max;
 8012442:	68bb      	ldr	r3, [r7, #8]
 8012444:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012446:	647b      	str	r3, [r7, #68]	; 0x44

  reference_integer_ops::ConvPerChannel(
      op_params, data.per_channel_output_multiplier,
 8012448:	68bb      	ldr	r3, [r7, #8]
 801244a:	699c      	ldr	r4, [r3, #24]
      data.per_channel_output_shift, GetTensorShape(input),
 801244c:	68bb      	ldr	r3, [r7, #8]
 801244e:	69dd      	ldr	r5, [r3, #28]
 8012450:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012454:	f8d7 10c8 	ldr.w	r1, [r7, #200]	; 0xc8
 8012458:	4618      	mov	r0, r3
 801245a:	f7fd f86e 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 801245e:	f8d7 00c8 	ldr.w	r0, [r7, #200]	; 0xc8
 8012462:	f7fd f8aa 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8012466:	4606      	mov	r6, r0
      GetTensorData<int8>(input), GetTensorShape(filter),
 8012468:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801246c:	f8d7 10cc 	ldr.w	r1, [r7, #204]	; 0xcc
 8012470:	4618      	mov	r0, r3
 8012472:	f7fd f862 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 8012476:	f8d7 00cc 	ldr.w	r0, [r7, #204]	; 0xcc
 801247a:	f7fd f89e 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 801247e:	6078      	str	r0, [r7, #4]
      GetTensorData<int8>(filter), GetTensorShape(bias),
 8012480:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012484:	f8d7 10d0 	ldr.w	r1, [r7, #208]	; 0xd0
 8012488:	4618      	mov	r0, r3
 801248a:	f7fd f856 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 801248e:	f8d7 00d0 	ldr.w	r0, [r7, #208]	; 0xd0
 8012492:	f7fe fec0 	bl	8011216 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8012496:	6038      	str	r0, [r7, #0]
      GetTensorData<int32>(bias), GetTensorShape(output),
 8012498:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801249c:	f8d7 10d4 	ldr.w	r1, [r7, #212]	; 0xd4
 80124a0:	4618      	mov	r0, r3
 80124a2:	f7fd f84a 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::ConvPerChannel(
 80124a6:	f8d7 00d4 	ldr.w	r0, [r7, #212]	; 0xd4
 80124aa:	f7fd f897 	bl	800f5dc <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80124ae:	4603      	mov	r3, r0
 80124b0:	f107 0250 	add.w	r2, r7, #80	; 0x50
 80124b4:	f107 0018 	add.w	r0, r7, #24
 80124b8:	9306      	str	r3, [sp, #24]
 80124ba:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80124be:	9305      	str	r3, [sp, #20]
 80124c0:	683b      	ldr	r3, [r7, #0]
 80124c2:	9304      	str	r3, [sp, #16]
 80124c4:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80124c8:	9303      	str	r3, [sp, #12]
 80124ca:	687b      	ldr	r3, [r7, #4]
 80124cc:	9302      	str	r3, [sp, #8]
 80124ce:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80124d2:	9301      	str	r3, [sp, #4]
 80124d4:	9600      	str	r6, [sp, #0]
 80124d6:	4613      	mov	r3, r2
 80124d8:	462a      	mov	r2, r5
 80124da:	4621      	mov	r1, r4
 80124dc:	f7ff fa21 	bl	8011922 <_ZN6tflite21reference_integer_ops14ConvPerChannelERKNS_10ConvParamsEPKlS5_RKNS_12RuntimeShapeEPKaS8_SA_S8_S5_S8_Pa>
      GetTensorData<int32>(bias), GetTensorShape(output),
 80124e0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80124e4:	4618      	mov	r0, r3
 80124e6:	f7fc ff53 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(filter), GetTensorShape(bias),
 80124ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80124ee:	4618      	mov	r0, r3
 80124f0:	f7fc ff4e 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(input), GetTensorShape(filter),
 80124f4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80124f8:	4618      	mov	r0, r3
 80124fa:	f7fc ff49 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      data.per_channel_output_shift, GetTensorShape(input),
 80124fe:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8012502:	4618      	mov	r0, r3
 8012504:	f7fc ff44 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<int8>(output));
}
 8012508:	bf00      	nop
 801250a:	37b4      	adds	r7, #180	; 0xb4
 801250c:	46bd      	mov	sp, r7
 801250e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08012510 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>:

void EvalFloat(TfLiteContext* context, TfLiteNode* node,
               TfLiteConvParams* params, const OpData& data,
               const TfLiteTensor* input, const TfLiteTensor* filter,
               const TfLiteTensor* bias, TfLiteTensor* im2col,
               TfLiteTensor* hwcn_weights, TfLiteTensor* output) {
 8012510:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012514:	b0ba      	sub	sp, #232	; 0xe8
 8012516:	af08      	add	r7, sp, #32
 8012518:	60f8      	str	r0, [r7, #12]
 801251a:	60b9      	str	r1, [r7, #8]
 801251c:	607a      	str	r2, [r7, #4]
 801251e:	603b      	str	r3, [r7, #0]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(params->activation, &output_activation_min,
 8012520:	687b      	ldr	r3, [r7, #4]
 8012522:	7b1b      	ldrb	r3, [r3, #12]
 8012524:	f107 0248 	add.w	r2, r7, #72	; 0x48
 8012528:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 801252c:	4618      	mov	r0, r3
 801252e:	f7fe fd63 	bl	8010ff8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  // TODO(b/154032858): Investigate removing extra copies.
  ConvParams op_params;
  op_params.padding_type = RuntimePaddingType(params->padding);
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	781b      	ldrb	r3, [r3, #0]
 8012536:	4618      	mov	r0, r3
 8012538:	f7ff fc77 	bl	8011e2a <_ZN6tflite3ops5micro4conv18RuntimePaddingTypeE13TfLitePadding>
 801253c:	4603      	mov	r3, r0
 801253e:	743b      	strb	r3, [r7, #16]
  op_params.padding_values.width = data.padding.width;
 8012540:	683b      	ldr	r3, [r7, #0]
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	b21b      	sxth	r3, r3
 8012546:	827b      	strh	r3, [r7, #18]
  op_params.padding_values.height = data.padding.height;
 8012548:	683b      	ldr	r3, [r7, #0]
 801254a:	685b      	ldr	r3, [r3, #4]
 801254c:	b21b      	sxth	r3, r3
 801254e:	82bb      	strh	r3, [r7, #20]
  op_params.stride_width = params->stride_width;
 8012550:	687b      	ldr	r3, [r7, #4]
 8012552:	685b      	ldr	r3, [r3, #4]
 8012554:	b21b      	sxth	r3, r3
 8012556:	837b      	strh	r3, [r7, #26]
  op_params.stride_height = params->stride_height;
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	689b      	ldr	r3, [r3, #8]
 801255c:	b21b      	sxth	r3, r3
 801255e:	83bb      	strh	r3, [r7, #28]
  op_params.dilation_width_factor = params->dilation_width_factor;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	691b      	ldr	r3, [r3, #16]
 8012564:	b21b      	sxth	r3, r3
 8012566:	83fb      	strh	r3, [r7, #30]
  op_params.dilation_height_factor = params->dilation_height_factor;
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	695b      	ldr	r3, [r3, #20]
 801256c:	b21b      	sxth	r3, r3
 801256e:	843b      	strh	r3, [r7, #32]
  op_params.float_activation_min = output_activation_min;
 8012570:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012572:	643b      	str	r3, [r7, #64]	; 0x40
  op_params.float_activation_max = output_activation_max;
 8012574:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012576:	647b      	str	r3, [r7, #68]	; 0x44

  reference_ops::Conv(op_params, GetTensorShape(input),
 8012578:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801257c:	f8d7 10e0 	ldr.w	r1, [r7, #224]	; 0xe0
 8012580:	4618      	mov	r0, r3
 8012582:	f7fc ffda 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8012586:	f8d7 00e0 	ldr.w	r0, [r7, #224]	; 0xe0
 801258a:	f7fc fff4 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801258e:	4680      	mov	r8, r0
                      GetTensorData<float>(input), GetTensorShape(filter),
 8012590:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012594:	f8d7 10e4 	ldr.w	r1, [r7, #228]	; 0xe4
 8012598:	4618      	mov	r0, r3
 801259a:	f7fc ffce 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 801259e:	f8d7 00e4 	ldr.w	r0, [r7, #228]	; 0xe4
 80125a2:	f7fc ffe8 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80125a6:	4604      	mov	r4, r0
                      GetTensorData<float>(filter), GetTensorShape(bias),
 80125a8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80125ac:	f8d7 10e8 	ldr.w	r1, [r7, #232]	; 0xe8
 80125b0:	4618      	mov	r0, r3
 80125b2:	f7fc ffc2 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80125b6:	f8d7 00e8 	ldr.w	r0, [r7, #232]	; 0xe8
 80125ba:	f7fc ffdc 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 80125be:	4605      	mov	r5, r0
                      GetTensorData<float>(bias), GetTensorShape(output),
 80125c0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80125c4:	f8d7 10f4 	ldr.w	r1, [r7, #244]	; 0xf4
 80125c8:	4618      	mov	r0, r3
 80125ca:	f7fc ffb6 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80125ce:	f8d7 00f4 	ldr.w	r0, [r7, #244]	; 0xf4
 80125d2:	f7fc ffe1 	bl	800f598 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 80125d6:	4606      	mov	r6, r0
                      GetTensorData<float>(output), GetTensorShape(im2col),
 80125d8:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80125dc:	f8d7 10ec 	ldr.w	r1, [r7, #236]	; 0xec
 80125e0:	4618      	mov	r0, r3
 80125e2:	f7fc ffaa 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::Conv(op_params, GetTensorShape(input),
 80125e6:	f8d7 00ec 	ldr.w	r0, [r7, #236]	; 0xec
 80125ea:	f7fc ffd5 	bl	800f598 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 80125ee:	4603      	mov	r3, r0
 80125f0:	f107 0268 	add.w	r2, r7, #104	; 0x68
 80125f4:	f107 0150 	add.w	r1, r7, #80	; 0x50
 80125f8:	f107 0010 	add.w	r0, r7, #16
 80125fc:	9306      	str	r3, [sp, #24]
 80125fe:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012602:	9305      	str	r3, [sp, #20]
 8012604:	9604      	str	r6, [sp, #16]
 8012606:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801260a:	9303      	str	r3, [sp, #12]
 801260c:	9502      	str	r5, [sp, #8]
 801260e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012612:	9301      	str	r3, [sp, #4]
 8012614:	9400      	str	r4, [sp, #0]
 8012616:	4613      	mov	r3, r2
 8012618:	4642      	mov	r2, r8
 801261a:	f7fe fe69 	bl	80112f0 <_ZN6tflite13reference_ops4ConvERKNS_10ConvParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_PfS6_S9_>
                      GetTensorData<float>(output), GetTensorShape(im2col),
 801261e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8012622:	4618      	mov	r0, r3
 8012624:	f7fc feb4 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(bias), GetTensorShape(output),
 8012628:	f107 0398 	add.w	r3, r7, #152	; 0x98
 801262c:	4618      	mov	r0, r3
 801262e:	f7fc feaf 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(filter), GetTensorShape(bias),
 8012632:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8012636:	4618      	mov	r0, r3
 8012638:	f7fc feaa 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(input), GetTensorShape(filter),
 801263c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8012640:	4618      	mov	r0, r3
 8012642:	f7fc fea5 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::Conv(op_params, GetTensorShape(input),
 8012646:	f107 0350 	add.w	r3, r7, #80	; 0x50
 801264a:	4618      	mov	r0, r3
 801264c:	f7fc fea0 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                      GetTensorData<float>(im2col));
}
 8012650:	bf00      	nop
 8012652:	37c8      	adds	r7, #200	; 0xc8
 8012654:	46bd      	mov	sp, r7
 8012656:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0801265c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 801265c:	b590      	push	{r4, r7, lr}
 801265e:	b08f      	sub	sp, #60	; 0x3c
 8012660:	af06      	add	r7, sp, #24
 8012662:	6078      	str	r0, [r7, #4]
 8012664:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLiteConvParams*>(node->builtin_data);
 8012666:	683b      	ldr	r3, [r7, #0]
 8012668:	695b      	ldr	r3, [r3, #20]
 801266a:	61fb      	str	r3, [r7, #28]

  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 801266c:	2200      	movs	r2, #0
 801266e:	6839      	ldr	r1, [r7, #0]
 8012670:	6878      	ldr	r0, [r7, #4]
 8012672:	f7fc fe34 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012676:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012678:	2200      	movs	r2, #0
 801267a:	6839      	ldr	r1, [r7, #0]
 801267c:	6878      	ldr	r0, [r7, #4]
 801267e:	f7fc fe18 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012682:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kFilterTensor);
 8012684:	2201      	movs	r2, #1
 8012686:	6839      	ldr	r1, [r7, #0]
 8012688:	6878      	ldr	r0, [r7, #4]
 801268a:	f7fc fe12 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 801268e:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8012690:	2202      	movs	r2, #2
 8012692:	6839      	ldr	r1, [r7, #0]
 8012694:	6878      	ldr	r0, [r7, #4]
 8012696:	f7ff faf4 	bl	8011c82 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 801269a:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 801269c:	683b      	ldr	r3, [r7, #0]
 801269e:	691b      	ldr	r3, [r3, #16]
 80126a0:	2b00      	cmp	r3, #0
 80126a2:	d101      	bne.n	80126a8 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x4c>
 80126a4:	f008 fc84 	bl	801afb0 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 80126a8:	683b      	ldr	r3, [r7, #0]
 80126aa:	691b      	ldr	r3, [r3, #16]
 80126ac:	60bb      	str	r3, [r7, #8]

  switch (input->type) {  // Already know in/out types are same.
 80126ae:	697b      	ldr	r3, [r7, #20]
 80126b0:	781b      	ldrb	r3, [r3, #0]
 80126b2:	2b09      	cmp	r3, #9
 80126b4:	d019      	beq.n	80126ea <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x8e>
 80126b6:	2b09      	cmp	r3, #9
 80126b8:	dc3b      	bgt.n	8012732 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6>
 80126ba:	2b01      	cmp	r3, #1
 80126bc:	d002      	beq.n	80126c4 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x68>
 80126be:	2b03      	cmp	r3, #3
 80126c0:	d024      	beq.n	801270c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xb0>
 80126c2:	e036      	b.n	8012732 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xd6>
    case kTfLiteFloat32:
      EvalFloat(context, node, params, data, input, filter, bias, nullptr,
 80126c4:	69bb      	ldr	r3, [r7, #24]
 80126c6:	9305      	str	r3, [sp, #20]
 80126c8:	2300      	movs	r3, #0
 80126ca:	9304      	str	r3, [sp, #16]
 80126cc:	2300      	movs	r3, #0
 80126ce:	9303      	str	r3, [sp, #12]
 80126d0:	68fb      	ldr	r3, [r7, #12]
 80126d2:	9302      	str	r3, [sp, #8]
 80126d4:	693b      	ldr	r3, [r7, #16]
 80126d6:	9301      	str	r3, [sp, #4]
 80126d8:	697b      	ldr	r3, [r7, #20]
 80126da:	9300      	str	r3, [sp, #0]
 80126dc:	68bb      	ldr	r3, [r7, #8]
 80126de:	69fa      	ldr	r2, [r7, #28]
 80126e0:	6839      	ldr	r1, [r7, #0]
 80126e2:	6878      	ldr	r0, [r7, #4]
 80126e4:	f7ff ff14 	bl	8012510 <_ZN6tflite3ops5micro4conv9EvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                nullptr, output);
      break;
 80126e8:	e032      	b.n	8012750 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    case kTfLiteInt8:
      EvalQuantizedPerChannel(context, node, params, data, input, filter, bias,
 80126ea:	2300      	movs	r3, #0
 80126ec:	9304      	str	r3, [sp, #16]
 80126ee:	69bb      	ldr	r3, [r7, #24]
 80126f0:	9303      	str	r3, [sp, #12]
 80126f2:	68fb      	ldr	r3, [r7, #12]
 80126f4:	9302      	str	r3, [sp, #8]
 80126f6:	693b      	ldr	r3, [r7, #16]
 80126f8:	9301      	str	r3, [sp, #4]
 80126fa:	697b      	ldr	r3, [r7, #20]
 80126fc:	9300      	str	r3, [sp, #0]
 80126fe:	68bb      	ldr	r3, [r7, #8]
 8012700:	69fa      	ldr	r2, [r7, #28]
 8012702:	6839      	ldr	r1, [r7, #0]
 8012704:	6878      	ldr	r0, [r7, #4]
 8012706:	f7ff fe71 	bl	80123ec <_ZN6tflite3ops5micro4conv23EvalQuantizedPerChannelEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_>
                              output, nullptr);
      break;
 801270a:	e021      	b.n	8012750 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    case kTfLiteUInt8:
      EvalQuantized(context, node, params, data, input, filter, bias, nullptr,
 801270c:	69bb      	ldr	r3, [r7, #24]
 801270e:	9305      	str	r3, [sp, #20]
 8012710:	2300      	movs	r3, #0
 8012712:	9304      	str	r3, [sp, #16]
 8012714:	2300      	movs	r3, #0
 8012716:	9303      	str	r3, [sp, #12]
 8012718:	68fb      	ldr	r3, [r7, #12]
 801271a:	9302      	str	r3, [sp, #8]
 801271c:	693b      	ldr	r3, [r7, #16]
 801271e:	9301      	str	r3, [sp, #4]
 8012720:	697b      	ldr	r3, [r7, #20]
 8012722:	9300      	str	r3, [sp, #0]
 8012724:	68bb      	ldr	r3, [r7, #8]
 8012726:	69fa      	ldr	r2, [r7, #28]
 8012728:	6839      	ldr	r1, [r7, #0]
 801272a:	6878      	ldr	r0, [r7, #4]
 801272c:	f7ff fd9c 	bl	8012268 <_ZN6tflite3ops5micro4conv13EvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLiteConvParamsRKNS2_6OpDataEPK12TfLiteTensorSE_SE_PSC_SF_SF_>
                    nullptr, output);
      break;
 8012730:	e00e      	b.n	8012750 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf4>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	695c      	ldr	r4, [r3, #20]
 8012736:	697b      	ldr	r3, [r7, #20]
 8012738:	781b      	ldrb	r3, [r3, #0]
 801273a:	4618      	mov	r0, r3
 801273c:	f7fb fed4 	bl	800e4e8 <TfLiteTypeGetName>
 8012740:	4602      	mov	r2, r0
 8012742:	697b      	ldr	r3, [r7, #20]
 8012744:	781b      	ldrb	r3, [r3, #0]
 8012746:	4905      	ldr	r1, [pc, #20]	; (801275c <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0x100>)
 8012748:	6878      	ldr	r0, [r7, #4]
 801274a:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801274c:	2301      	movs	r3, #1
 801274e:	e000      	b.n	8012752 <_ZN6tflite3ops5micro4conv4EvalEP13TfLiteContextP10TfLiteNode+0xf6>
  }
  return kTfLiteOk;
 8012750:	2300      	movs	r3, #0
}
 8012752:	4618      	mov	r0, r3
 8012754:	3724      	adds	r7, #36	; 0x24
 8012756:	46bd      	mov	sp, r7
 8012758:	bd90      	pop	{r4, r7, pc}
 801275a:	bf00      	nop
 801275c:	0801e718 	.word	0x0801e718

08012760 <_ZN6tflite3ops5micro16Register_CONV_2DEv>:

}  // namespace conv

TfLiteRegistration* Register_CONV_2D() {
 8012760:	b480      	push	{r7}
 8012762:	af00      	add	r7, sp, #0
                                 /*invoke=*/conv::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8012764:	4b02      	ldr	r3, [pc, #8]	; (8012770 <_ZN6tflite3ops5micro16Register_CONV_2DEv+0x10>)
}
 8012766:	4618      	mov	r0, r3
 8012768:	46bd      	mov	sp, r7
 801276a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801276e:	4770      	bx	lr
 8012770:	20000084 	.word	0x20000084

08012774 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>:
inline int FlatSizeSkipDim(const RuntimeShape& shape, int skip_dim) {
 8012774:	b580      	push	{r7, lr}
 8012776:	b086      	sub	sp, #24
 8012778:	af00      	add	r7, sp, #0
 801277a:	6078      	str	r0, [r7, #4]
 801277c:	6039      	str	r1, [r7, #0]
  const int dims_count = shape.DimensionsCount();
 801277e:	6878      	ldr	r0, [r7, #4]
 8012780:	f7fc fe1c 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012784:	60f8      	str	r0, [r7, #12]
  TFLITE_DCHECK(skip_dim >= 0 && skip_dim < dims_count);
 8012786:	683b      	ldr	r3, [r7, #0]
 8012788:	2b00      	cmp	r3, #0
 801278a:	db03      	blt.n	8012794 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x20>
 801278c:	683a      	ldr	r2, [r7, #0]
 801278e:	68fb      	ldr	r3, [r7, #12]
 8012790:	429a      	cmp	r2, r3
 8012792:	db01      	blt.n	8012798 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x24>
 8012794:	f008 fc0c 	bl	801afb0 <abort>
  const auto* dims_data = shape.DimsData();
 8012798:	6878      	ldr	r0, [r7, #4]
 801279a:	f7fc fe53 	bl	800f444 <_ZNK6tflite12RuntimeShape8DimsDataEv>
 801279e:	60b8      	str	r0, [r7, #8]
  int flat_size = 1;
 80127a0:	2301      	movs	r3, #1
 80127a2:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80127a4:	2300      	movs	r3, #0
 80127a6:	613b      	str	r3, [r7, #16]
 80127a8:	693a      	ldr	r2, [r7, #16]
 80127aa:	68fb      	ldr	r3, [r7, #12]
 80127ac:	429a      	cmp	r2, r3
 80127ae:	da12      	bge.n	80127d6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x62>
    flat_size *= (i == skip_dim) ? 1 : dims_data[i];
 80127b0:	693a      	ldr	r2, [r7, #16]
 80127b2:	683b      	ldr	r3, [r7, #0]
 80127b4:	429a      	cmp	r2, r3
 80127b6:	d005      	beq.n	80127c4 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x50>
 80127b8:	693b      	ldr	r3, [r7, #16]
 80127ba:	009b      	lsls	r3, r3, #2
 80127bc:	68ba      	ldr	r2, [r7, #8]
 80127be:	4413      	add	r3, r2
 80127c0:	681b      	ldr	r3, [r3, #0]
 80127c2:	e000      	b.n	80127c6 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x52>
 80127c4:	2301      	movs	r3, #1
 80127c6:	697a      	ldr	r2, [r7, #20]
 80127c8:	fb03 f302 	mul.w	r3, r3, r2
 80127cc:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < dims_count; ++i) {
 80127ce:	693b      	ldr	r3, [r7, #16]
 80127d0:	3301      	adds	r3, #1
 80127d2:	613b      	str	r3, [r7, #16]
 80127d4:	e7e8      	b.n	80127a8 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi+0x34>
  return flat_size;
 80127d6:	697b      	ldr	r3, [r7, #20]
}
 80127d8:	4618      	mov	r0, r3
 80127da:	3718      	adds	r7, #24
 80127dc:	46bd      	mov	sp, r7
 80127de:	bd80      	pop	{r7, pc}

080127e0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const float* input_data, const RuntimeShape& weights_shape,
    const float* weights_data, const RuntimeShape& bias_shape,
    const float* bias_data, const RuntimeShape& output_shape,
    float* output_data) {
 80127e0:	b590      	push	{r4, r7, lr}
 80127e2:	b091      	sub	sp, #68	; 0x44
 80127e4:	af00      	add	r7, sp, #0
 80127e6:	60f8      	str	r0, [r7, #12]
 80127e8:	60b9      	str	r1, [r7, #8]
 80127ea:	607a      	str	r2, [r7, #4]
 80127ec:	603b      	str	r3, [r7, #0]
  const float output_activation_min = params.float_activation_min;
 80127ee:	68fb      	ldr	r3, [r7, #12]
 80127f0:	69db      	ldr	r3, [r3, #28]
 80127f2:	62bb      	str	r3, [r7, #40]	; 0x28
  const float output_activation_max = params.float_activation_max;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	6a1b      	ldr	r3, [r3, #32]
 80127f8:	627b      	str	r3, [r7, #36]	; 0x24
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dims_count = output_shape.DimensionsCount();
 80127fa:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 80127fc:	f7fc fdde 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012800:	6238      	str	r0, [r7, #32]
  const int weights_dims_count = weights_shape.DimensionsCount();
 8012802:	6838      	ldr	r0, [r7, #0]
 8012804:	f7fc fdda 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012808:	61f8      	str	r0, [r7, #28]
  const int batches = FlatSizeSkipDim(output_shape, output_dims_count - 1);
 801280a:	6a3b      	ldr	r3, [r7, #32]
 801280c:	3b01      	subs	r3, #1
 801280e:	4619      	mov	r1, r3
 8012810:	6df8      	ldr	r0, [r7, #92]	; 0x5c
 8012812:	f7ff ffaf 	bl	8012774 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8012816:	61b8      	str	r0, [r7, #24]
  const int output_depth = MatchingDim(weights_shape, weights_dims_count - 2,
 8012818:	69fb      	ldr	r3, [r7, #28]
 801281a:	1e99      	subs	r1, r3, #2
 801281c:	6a3b      	ldr	r3, [r7, #32]
 801281e:	3b01      	subs	r3, #1
 8012820:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012822:	6838      	ldr	r0, [r7, #0]
 8012824:	f7fe fd22 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012828:	6178      	str	r0, [r7, #20]
                                       output_shape, output_dims_count - 1);
  const int accum_depth = weights_shape.Dims(weights_dims_count - 1);
 801282a:	69fb      	ldr	r3, [r7, #28]
 801282c:	3b01      	subs	r3, #1
 801282e:	4619      	mov	r1, r3
 8012830:	6838      	ldr	r0, [r7, #0]
 8012832:	f7fc fdcf 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012836:	6138      	str	r0, [r7, #16]
  for (int b = 0; b < batches; ++b) {
 8012838:	2300      	movs	r3, #0
 801283a:	63fb      	str	r3, [r7, #60]	; 0x3c
 801283c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801283e:	69bb      	ldr	r3, [r7, #24]
 8012840:	429a      	cmp	r2, r3
 8012842:	da5f      	bge.n	8012904 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x124>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012844:	2300      	movs	r3, #0
 8012846:	63bb      	str	r3, [r7, #56]	; 0x38
 8012848:	6bba      	ldr	r2, [r7, #56]	; 0x38
 801284a:	697b      	ldr	r3, [r7, #20]
 801284c:	429a      	cmp	r2, r3
 801284e:	da55      	bge.n	80128fc <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x11c>
      float total = 0.f;
 8012850:	f04f 0300 	mov.w	r3, #0
 8012854:	637b      	str	r3, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 8012856:	2300      	movs	r3, #0
 8012858:	633b      	str	r3, [r7, #48]	; 0x30
 801285a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801285c:	693b      	ldr	r3, [r7, #16]
 801285e:	429a      	cmp	r2, r3
 8012860:	da21      	bge.n	80128a6 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xc6>
        total += input_data[b * accum_depth + d] *
 8012862:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012864:	693a      	ldr	r2, [r7, #16]
 8012866:	fb02 f203 	mul.w	r2, r2, r3
 801286a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801286c:	4413      	add	r3, r2
 801286e:	009b      	lsls	r3, r3, #2
 8012870:	687a      	ldr	r2, [r7, #4]
 8012872:	4413      	add	r3, r2
 8012874:	ed93 7a00 	vldr	s14, [r3]
                 weights_data[out_c * accum_depth + d];
 8012878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801287a:	693a      	ldr	r2, [r7, #16]
 801287c:	fb02 f203 	mul.w	r2, r2, r3
 8012880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012882:	4413      	add	r3, r2
 8012884:	009b      	lsls	r3, r3, #2
 8012886:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012888:	4413      	add	r3, r2
 801288a:	edd3 7a00 	vldr	s15, [r3]
        total += input_data[b * accum_depth + d] *
 801288e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012892:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 8012896:	ee77 7a27 	vadd.f32	s15, s14, s15
 801289a:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
      for (int d = 0; d < accum_depth; ++d) {
 801289e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80128a0:	3301      	adds	r3, #1
 80128a2:	633b      	str	r3, [r7, #48]	; 0x30
 80128a4:	e7d9      	b.n	801285a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x7a>
      }
      float bias_value = 0.0f;
 80128a6:	f04f 0300 	mov.w	r3, #0
 80128aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      if (bias_data) {
 80128ac:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80128ae:	2b00      	cmp	r3, #0
 80128b0:	d005      	beq.n	80128be <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0xde>
        bias_value = bias_data[out_c];
 80128b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128b4:	009b      	lsls	r3, r3, #2
 80128b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80128b8:	4413      	add	r3, r2
 80128ba:	681b      	ldr	r3, [r3, #0]
 80128bc:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      output_data[out_c + output_depth * b] = ActivationFunctionWithMinMax(
 80128be:	ed97 7a0d 	vldr	s14, [r7, #52]	; 0x34
 80128c2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80128c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80128ca:	697b      	ldr	r3, [r7, #20]
 80128cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80128ce:	fb02 f203 	mul.w	r2, r2, r3
 80128d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128d4:	4413      	add	r3, r2
 80128d6:	009b      	lsls	r3, r3, #2
 80128d8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80128da:	18d4      	adds	r4, r2, r3
 80128dc:	ed97 1a09 	vldr	s2, [r7, #36]	; 0x24
 80128e0:	edd7 0a0a 	vldr	s1, [r7, #40]	; 0x28
 80128e4:	eeb0 0a67 	vmov.f32	s0, s15
 80128e8:	f7fd f867 	bl	800f9ba <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 80128ec:	eef0 7a40 	vmov.f32	s15, s0
 80128f0:	edc4 7a00 	vstr	s15, [r4]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80128f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80128f6:	3301      	adds	r3, #1
 80128f8:	63bb      	str	r3, [r7, #56]	; 0x38
 80128fa:	e7a5      	b.n	8012848 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x68>
  for (int b = 0; b < batches; ++b) {
 80128fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80128fe:	3301      	adds	r3, #1
 8012900:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012902:	e79b      	b.n	801283c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf+0x5c>
          total + bias_value, output_activation_min, output_activation_max);
    }
  }
}
 8012904:	bf00      	nop
 8012906:	3744      	adds	r7, #68	; 0x44
 8012908:	46bd      	mov	sp, r7
 801290a:	bd90      	pop	{r4, r7, pc}

0801290c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    uint8* output_data) {
 801290c:	b580      	push	{r7, lr}
 801290e:	b096      	sub	sp, #88	; 0x58
 8012910:	af00      	add	r7, sp, #0
 8012912:	60f8      	str	r0, [r7, #12]
 8012914:	60b9      	str	r1, [r7, #8]
 8012916:	607a      	str	r2, [r7, #4]
 8012918:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	685b      	ldr	r3, [r3, #4]
 8012924:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 8012926:	68fb      	ldr	r3, [r7, #12]
 8012928:	689b      	ldr	r3, [r3, #8]
 801292a:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 801292c:	68fb      	ldr	r3, [r7, #12]
 801292e:	68db      	ldr	r3, [r3, #12]
 8012930:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	691b      	ldr	r3, [r3, #16]
 8012936:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8012938:	68fb      	ldr	r3, [r7, #12]
 801293a:	695b      	ldr	r3, [r3, #20]
 801293c:	61bb      	str	r3, [r7, #24]
  const int32 output_activation_max = params.quantized_activation_max;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	699b      	ldr	r3, [r3, #24]
 8012942:	617b      	str	r3, [r7, #20]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8012944:	6838      	ldr	r0, [r7, #0]
 8012946:	f7fc fd39 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801294a:	4603      	mov	r3, r0
 801294c:	2b01      	cmp	r3, #1
 801294e:	dc01      	bgt.n	8012954 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x48>
 8012950:	f008 fb2e 	bl	801afb0 <abort>
  TFLITE_DCHECK_GE(output_shape.DimensionsCount(), 1);
 8012954:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012956:	f7fc fd31 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801295a:	4603      	mov	r3, r0
 801295c:	2b00      	cmp	r3, #0
 801295e:	dc01      	bgt.n	8012964 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x58>
 8012960:	f008 fb26 	bl	801afb0 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8012964:	69ba      	ldr	r2, [r7, #24]
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	429a      	cmp	r2, r3
 801296a:	dd01      	ble.n	8012970 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x64>
 801296c:	f008 fb20 	bl	801afb0 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8012970:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012972:	f7fc fd23 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012976:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8012978:	6838      	ldr	r0, [r7, #0]
 801297a:	f7fc fd1f 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 801297e:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8012980:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012982:	3b01      	subs	r3, #1
 8012984:	4619      	mov	r1, r3
 8012986:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012988:	f7ff fef4 	bl	8012774 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801298c:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 801298e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012990:	1e99      	subs	r1, r3, #2
 8012992:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012994:	3b01      	subs	r3, #1
 8012996:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8012998:	6838      	ldr	r0, [r7, #0]
 801299a:	f7fe fc67 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 801299e:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 80129a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80129a2:	3b01      	subs	r3, #1
 80129a4:	4619      	mov	r1, r3
 80129a6:	6838      	ldr	r0, [r7, #0]
 80129a8:	f7fc fd14 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80129ac:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 80129ae:	2300      	movs	r3, #0
 80129b0:	657b      	str	r3, [r7, #84]	; 0x54
 80129b2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80129b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80129b6:	429a      	cmp	r2, r3
 80129b8:	da73      	bge.n	8012aa2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x196>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 80129ba:	2300      	movs	r3, #0
 80129bc:	653b      	str	r3, [r7, #80]	; 0x50
 80129be:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80129c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80129c2:	429a      	cmp	r2, r3
 80129c4:	da69      	bge.n	8012a9a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x18e>
      int32 acc = 0;
 80129c6:	2300      	movs	r3, #0
 80129c8:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 80129ca:	2300      	movs	r3, #0
 80129cc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80129ce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80129d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80129d2:	429a      	cmp	r2, r3
 80129d4:	da24      	bge.n	8012a20 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x114>
        int32 input_val = input_data[b * accum_depth + d];
 80129d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80129d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129da:	fb02 f203 	mul.w	r2, r2, r3
 80129de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129e0:	4413      	add	r3, r2
 80129e2:	461a      	mov	r2, r3
 80129e4:	687b      	ldr	r3, [r7, #4]
 80129e6:	4413      	add	r3, r2
 80129e8:	781b      	ldrb	r3, [r3, #0]
 80129ea:	623b      	str	r3, [r7, #32]
        int32 filter_val = filter_data[out_c * accum_depth + d];
 80129ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80129ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80129f0:	fb02 f203 	mul.w	r2, r2, r3
 80129f4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80129f6:	4413      	add	r3, r2
 80129f8:	461a      	mov	r2, r3
 80129fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80129fc:	4413      	add	r3, r2
 80129fe:	781b      	ldrb	r3, [r3, #0]
 8012a00:	61fb      	str	r3, [r7, #28]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8012a02:	69fa      	ldr	r2, [r7, #28]
 8012a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012a06:	4413      	add	r3, r2
 8012a08:	6a39      	ldr	r1, [r7, #32]
 8012a0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012a0c:	440a      	add	r2, r1
 8012a0e:	fb02 f203 	mul.w	r2, r2, r3
 8012a12:	693b      	ldr	r3, [r7, #16]
 8012a14:	4413      	add	r3, r2
 8012a16:	613b      	str	r3, [r7, #16]
      for (int d = 0; d < accum_depth; ++d) {
 8012a18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012a1a:	3301      	adds	r3, #1
 8012a1c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012a1e:	e7d6      	b.n	80129ce <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xc2>
      }
      if (bias_data) {
 8012a20:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d007      	beq.n	8012a36 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0x12a>
        acc += bias_data[out_c];
 8012a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a28:	009b      	lsls	r3, r3, #2
 8012a2a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012a2c:	4413      	add	r3, r2
 8012a2e:	681a      	ldr	r2, [r3, #0]
 8012a30:	693b      	ldr	r3, [r7, #16]
 8012a32:	4413      	add	r3, r2
 8012a34:	613b      	str	r3, [r7, #16]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8012a36:	693b      	ldr	r3, [r7, #16]
 8012a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012a3a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012a3c:	4618      	mov	r0, r3
 8012a3e:	f7fe fc33 	bl	80112a8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012a42:	4603      	mov	r3, r0
 8012a44:	613b      	str	r3, [r7, #16]
      acc += output_offset;
 8012a46:	693a      	ldr	r2, [r7, #16]
 8012a48:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012a4a:	4413      	add	r3, r2
 8012a4c:	613b      	str	r3, [r7, #16]
      acc = std::max(acc, output_activation_min);
 8012a4e:	f107 0218 	add.w	r2, r7, #24
 8012a52:	f107 0310 	add.w	r3, r7, #16
 8012a56:	4611      	mov	r1, r2
 8012a58:	4618      	mov	r0, r3
 8012a5a:	f7fc fc02 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8012a5e:	4603      	mov	r3, r0
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	613b      	str	r3, [r7, #16]
      acc = std::min(acc, output_activation_max);
 8012a64:	f107 0214 	add.w	r2, r7, #20
 8012a68:	f107 0310 	add.w	r3, r7, #16
 8012a6c:	4611      	mov	r1, r2
 8012a6e:	4618      	mov	r0, r3
 8012a70:	f7fc fc0b 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 8012a74:	4603      	mov	r3, r0
 8012a76:	681b      	ldr	r3, [r3, #0]
 8012a78:	613b      	str	r3, [r7, #16]
      output_data[out_c + output_depth * b] = static_cast<uint8>(acc);
 8012a7a:	6939      	ldr	r1, [r7, #16]
 8012a7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012a7e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012a80:	fb02 f203 	mul.w	r2, r2, r3
 8012a84:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a86:	4413      	add	r3, r2
 8012a88:	461a      	mov	r2, r3
 8012a8a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012a8c:	4413      	add	r3, r2
 8012a8e:	b2ca      	uxtb	r2, r1
 8012a90:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012a92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012a94:	3301      	adds	r3, #1
 8012a96:	653b      	str	r3, [r7, #80]	; 0x50
 8012a98:	e791      	b.n	80129be <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xb2>
  for (int b = 0; b < batches; ++b) {
 8012a9a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012a9c:	3301      	adds	r3, #1
 8012a9e:	657b      	str	r3, [r7, #84]	; 0x54
 8012aa0:	e787      	b.n	80129b2 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph+0xa6>
    }
  }
}
 8012aa2:	bf00      	nop
 8012aa4:	3758      	adds	r7, #88	; 0x58
 8012aa6:	46bd      	mov	sp, r7
 8012aa8:	bd80      	pop	{r7, pc}

08012aaa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const uint8* input_data, const RuntimeShape& filter_shape,
    const uint8* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int16* output_data) {
 8012aaa:	b580      	push	{r7, lr}
 8012aac:	b098      	sub	sp, #96	; 0x60
 8012aae:	af00      	add	r7, sp, #0
 8012ab0:	60f8      	str	r0, [r7, #12]
 8012ab2:	60b9      	str	r1, [r7, #8]
 8012ab4:	607a      	str	r2, [r7, #4]
 8012ab6:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8012ab8:	68fb      	ldr	r3, [r7, #12]
 8012aba:	681b      	ldr	r3, [r3, #0]
 8012abc:	653b      	str	r3, [r7, #80]	; 0x50
  const int32 filter_offset = params.weights_offset;
 8012abe:	68fb      	ldr	r3, [r7, #12]
 8012ac0:	685b      	ldr	r3, [r3, #4]
 8012ac2:	64fb      	str	r3, [r7, #76]	; 0x4c
  const int32 output_offset = params.output_offset;
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	689b      	ldr	r3, [r3, #8]
 8012ac8:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 output_multiplier = params.output_multiplier;
 8012aca:	68fb      	ldr	r3, [r7, #12]
 8012acc:	68db      	ldr	r3, [r3, #12]
 8012ace:	647b      	str	r3, [r7, #68]	; 0x44
  const int output_shift = params.output_shift;
 8012ad0:	68fb      	ldr	r3, [r7, #12]
 8012ad2:	691b      	ldr	r3, [r3, #16]
 8012ad4:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_activation_min = params.quantized_activation_min;
 8012ad6:	68fb      	ldr	r3, [r7, #12]
 8012ad8:	695b      	ldr	r3, [r3, #20]
 8012ada:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int32 output_activation_max = params.quantized_activation_max;
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	699b      	ldr	r3, [r3, #24]
 8012ae0:	63bb      	str	r3, [r7, #56]	; 0x38

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8012ae2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012ae4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012ae6:	429a      	cmp	r2, r3
 8012ae8:	dd01      	ble.n	8012aee <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x44>
 8012aea:	f008 fa61 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(output_offset, 0);
 8012aee:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012af0:	2b00      	cmp	r3, #0
 8012af2:	d001      	beq.n	8012af8 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x4e>
 8012af4:	f008 fa5c 	bl	801afb0 <abort>
  // TODO(benoitjacob): This really should be:
  //     const int batches = ArraySize(output_dims, 1);
  // but the current --variable_batch hack consists in overwriting the 3rd
  // dimension with the runtime batch size, as we don't keep track for each
  // array of which dimension is the batch dimension in it.
  const int output_dim_count = output_shape.DimensionsCount();
 8012af8:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012afa:	f7fc fc5f 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012afe:	6378      	str	r0, [r7, #52]	; 0x34
  const int filter_dim_count = filter_shape.DimensionsCount();
 8012b00:	6838      	ldr	r0, [r7, #0]
 8012b02:	f7fc fc5b 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012b06:	6338      	str	r0, [r7, #48]	; 0x30
  const int batches = FlatSizeSkipDim(output_shape, output_dim_count - 1);
 8012b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	4619      	mov	r1, r3
 8012b0e:	6f78      	ldr	r0, [r7, #116]	; 0x74
 8012b10:	f7ff fe30 	bl	8012774 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 8012b14:	62f8      	str	r0, [r7, #44]	; 0x2c
  const int output_depth = MatchingDim(filter_shape, filter_dim_count - 2,
 8012b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b18:	1e99      	subs	r1, r3, #2
 8012b1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012b1c:	3b01      	subs	r3, #1
 8012b1e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8012b20:	6838      	ldr	r0, [r7, #0]
 8012b22:	f7fe fba3 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8012b26:	62b8      	str	r0, [r7, #40]	; 0x28
                                       output_shape, output_dim_count - 1);
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8012b28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012b2a:	3b01      	subs	r3, #1
 8012b2c:	4619      	mov	r1, r3
 8012b2e:	6838      	ldr	r0, [r7, #0]
 8012b30:	f7fc fc50 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012b34:	6278      	str	r0, [r7, #36]	; 0x24
  for (int b = 0; b < batches; ++b) {
 8012b36:	2300      	movs	r3, #0
 8012b38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012b3a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012b3e:	429a      	cmp	r2, r3
 8012b40:	da7c      	bge.n	8012c3c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x192>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012b42:	2300      	movs	r3, #0
 8012b44:	65bb      	str	r3, [r7, #88]	; 0x58
 8012b46:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8012b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012b4a:	429a      	cmp	r2, r3
 8012b4c:	da72      	bge.n	8012c34 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x18a>
      // Internal accumulation.
      // Initialize accumulator with the bias-value.
      int32 accum = bias_data[out_c];
 8012b4e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012b50:	009b      	lsls	r3, r3, #2
 8012b52:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8012b54:	4413      	add	r3, r2
 8012b56:	681b      	ldr	r3, [r3, #0]
 8012b58:	617b      	str	r3, [r7, #20]
      // Accumulation loop.
      for (int d = 0; d < accum_depth; ++d) {
 8012b5a:	2300      	movs	r3, #0
 8012b5c:	657b      	str	r3, [r7, #84]	; 0x54
 8012b5e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b62:	429a      	cmp	r2, r3
 8012b64:	da2c      	bge.n	8012bc0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x116>
        int16 input_val = input_data[b * accum_depth + d] + input_offset;
 8012b66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012b68:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b6a:	fb02 f203 	mul.w	r2, r2, r3
 8012b6e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b70:	4413      	add	r3, r2
 8012b72:	461a      	mov	r2, r3
 8012b74:	687b      	ldr	r3, [r7, #4]
 8012b76:	4413      	add	r3, r2
 8012b78:	781b      	ldrb	r3, [r3, #0]
 8012b7a:	b29a      	uxth	r2, r3
 8012b7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012b7e:	b29b      	uxth	r3, r3
 8012b80:	4413      	add	r3, r2
 8012b82:	b29b      	uxth	r3, r3
 8012b84:	847b      	strh	r3, [r7, #34]	; 0x22
        int16 filter_val = filter_data[out_c * accum_depth + d] + filter_offset;
 8012b86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012b88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b8a:	fb02 f203 	mul.w	r2, r2, r3
 8012b8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012b90:	4413      	add	r3, r2
 8012b92:	461a      	mov	r2, r3
 8012b94:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012b96:	4413      	add	r3, r2
 8012b98:	781b      	ldrb	r3, [r3, #0]
 8012b9a:	b29a      	uxth	r2, r3
 8012b9c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012b9e:	b29b      	uxth	r3, r3
 8012ba0:	4413      	add	r3, r2
 8012ba2:	b29b      	uxth	r3, r3
 8012ba4:	843b      	strh	r3, [r7, #32]
        accum += filter_val * input_val;
 8012ba6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8012baa:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	; 0x22
 8012bae:	fb02 f203 	mul.w	r2, r2, r3
 8012bb2:	697b      	ldr	r3, [r7, #20]
 8012bb4:	4413      	add	r3, r2
 8012bb6:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8012bb8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012bba:	3301      	adds	r3, #1
 8012bbc:	657b      	str	r3, [r7, #84]	; 0x54
 8012bbe:	e7ce      	b.n	8012b5e <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0xb4>
      // Down-scale the final int32 accumulator to the scale used by our
      // (16-bit, typically 3 integer bits) fixed-point format. The quantized
      // multiplier and shift here have been pre-computed offline
      // (e.g. by toco).
      accum =
          MultiplyByQuantizedMultiplier(accum, output_multiplier, output_shift);
 8012bc0:	697b      	ldr	r3, [r7, #20]
 8012bc2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8012bc4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8012bc6:	4618      	mov	r0, r3
 8012bc8:	f7fe fb6e 	bl	80112a8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012bcc:	4603      	mov	r3, r0
      accum =
 8012bce:	617b      	str	r3, [r7, #20]
      // Saturate, cast to int16, and store to output array.
      accum = std::max(accum, output_activation_min - output_offset);
 8012bd0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012bd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bd4:	1ad3      	subs	r3, r2, r3
 8012bd6:	61bb      	str	r3, [r7, #24]
 8012bd8:	f107 0218 	add.w	r2, r7, #24
 8012bdc:	f107 0314 	add.w	r3, r7, #20
 8012be0:	4611      	mov	r1, r2
 8012be2:	4618      	mov	r0, r3
 8012be4:	f7fc fb3d 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8012be8:	4603      	mov	r3, r0
 8012bea:	681b      	ldr	r3, [r3, #0]
 8012bec:	617b      	str	r3, [r7, #20]
      accum = std::min(accum, output_activation_max - output_offset);
 8012bee:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012bf0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012bf2:	1ad3      	subs	r3, r2, r3
 8012bf4:	61fb      	str	r3, [r7, #28]
 8012bf6:	f107 021c 	add.w	r2, r7, #28
 8012bfa:	f107 0314 	add.w	r3, r7, #20
 8012bfe:	4611      	mov	r1, r2
 8012c00:	4618      	mov	r0, r3
 8012c02:	f7fc fb42 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 8012c06:	4603      	mov	r3, r0
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	617b      	str	r3, [r7, #20]
      accum += output_offset;
 8012c0c:	697a      	ldr	r2, [r7, #20]
 8012c0e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c10:	4413      	add	r3, r2
 8012c12:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = accum;
 8012c14:	6979      	ldr	r1, [r7, #20]
 8012c16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8012c1a:	fb02 f203 	mul.w	r2, r2, r3
 8012c1e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c20:	4413      	add	r3, r2
 8012c22:	005b      	lsls	r3, r3, #1
 8012c24:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8012c26:	4413      	add	r3, r2
 8012c28:	b20a      	sxth	r2, r1
 8012c2a:	801a      	strh	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012c2c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8012c2e:	3301      	adds	r3, #1
 8012c30:	65bb      	str	r3, [r7, #88]	; 0x58
 8012c32:	e788      	b.n	8012b46 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x9c>
  for (int b = 0; b < batches; ++b) {
 8012c34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8012c36:	3301      	adds	r3, #1
 8012c38:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012c3a:	e77e      	b.n	8012b3a <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps+0x90>
    }
  }
}
 8012c3c:	bf00      	nop
 8012c3e:	3760      	adds	r7, #96	; 0x60
 8012c40:	46bd      	mov	sp, r7
 8012c42:	bd80      	pop	{r7, pc}

08012c44 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>:
inline void FullyConnected(
    const FullyConnectedParams& params, const RuntimeShape& input_shape,
    const int8_t* input_data, const RuntimeShape& filter_shape,
    const int8_t* filter_data, const RuntimeShape& bias_shape,
    const int32* bias_data, const RuntimeShape& output_shape,
    int8_t* output_data) {
 8012c44:	b580      	push	{r7, lr}
 8012c46:	b096      	sub	sp, #88	; 0x58
 8012c48:	af00      	add	r7, sp, #0
 8012c4a:	60f8      	str	r0, [r7, #12]
 8012c4c:	60b9      	str	r1, [r7, #8]
 8012c4e:	607a      	str	r2, [r7, #4]
 8012c50:	603b      	str	r3, [r7, #0]
  const int32 input_offset = params.input_offset;
 8012c52:	68fb      	ldr	r3, [r7, #12]
 8012c54:	681b      	ldr	r3, [r3, #0]
 8012c56:	64bb      	str	r3, [r7, #72]	; 0x48
  const int32 filter_offset = params.weights_offset;
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	685b      	ldr	r3, [r3, #4]
 8012c5c:	647b      	str	r3, [r7, #68]	; 0x44
  const int32 output_offset = params.output_offset;
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	689b      	ldr	r3, [r3, #8]
 8012c62:	643b      	str	r3, [r7, #64]	; 0x40
  const int32 output_multiplier = params.output_multiplier;
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	68db      	ldr	r3, [r3, #12]
 8012c68:	63fb      	str	r3, [r7, #60]	; 0x3c
  const int output_shift = params.output_shift;
 8012c6a:	68fb      	ldr	r3, [r7, #12]
 8012c6c:	691b      	ldr	r3, [r3, #16]
 8012c6e:	63bb      	str	r3, [r7, #56]	; 0x38
  const int32 output_activation_min = params.quantized_activation_min;
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	695b      	ldr	r3, [r3, #20]
 8012c74:	61fb      	str	r3, [r7, #28]
  const int32 output_activation_max = params.quantized_activation_max;
 8012c76:	68fb      	ldr	r3, [r7, #12]
 8012c78:	699b      	ldr	r3, [r3, #24]
 8012c7a:	61bb      	str	r3, [r7, #24]
  TFLITE_DCHECK_GE(filter_shape.DimensionsCount(), 2);
 8012c7c:	6838      	ldr	r0, [r7, #0]
 8012c7e:	f7fc fb9d 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012c82:	4603      	mov	r3, r0
 8012c84:	2b01      	cmp	r3, #1
 8012c86:	dc01      	bgt.n	8012c8c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x48>
 8012c88:	f008 f992 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 2);
 8012c8c:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012c8e:	f7fc fb95 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012c92:	4603      	mov	r3, r0
 8012c94:	2b02      	cmp	r3, #2
 8012c96:	d001      	beq.n	8012c9c <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x58>
 8012c98:	f008 f98a 	bl	801afb0 <abort>

  TFLITE_DCHECK_LE(output_activation_min, output_activation_max);
 8012c9c:	69fa      	ldr	r2, [r7, #28]
 8012c9e:	69bb      	ldr	r3, [r7, #24]
 8012ca0:	429a      	cmp	r2, r3
 8012ca2:	dd01      	ble.n	8012ca8 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x64>
 8012ca4:	f008 f984 	bl	801afb0 <abort>
  const int filter_dim_count = filter_shape.DimensionsCount();
 8012ca8:	6838      	ldr	r0, [r7, #0]
 8012caa:	f7fc fb87 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8012cae:	6378      	str	r0, [r7, #52]	; 0x34
  const int batches = output_shape.Dims(0);
 8012cb0:	2100      	movs	r1, #0
 8012cb2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012cb4:	f7fc fb8e 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012cb8:	6338      	str	r0, [r7, #48]	; 0x30
  const int output_depth = output_shape.Dims(1);
 8012cba:	2101      	movs	r1, #1
 8012cbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8012cbe:	f7fc fb89 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012cc2:	62f8      	str	r0, [r7, #44]	; 0x2c
  TFLITE_DCHECK_LE(output_depth, filter_shape.Dims(filter_dim_count - 2));
 8012cc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cc6:	3b02      	subs	r3, #2
 8012cc8:	4619      	mov	r1, r3
 8012cca:	6838      	ldr	r0, [r7, #0]
 8012ccc:	f7fc fb82 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012cd0:	4602      	mov	r2, r0
 8012cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cd4:	4293      	cmp	r3, r2
 8012cd6:	dd01      	ble.n	8012cdc <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x98>
 8012cd8:	f008 f96a 	bl	801afb0 <abort>
  const int accum_depth = filter_shape.Dims(filter_dim_count - 1);
 8012cdc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012cde:	3b01      	subs	r3, #1
 8012ce0:	4619      	mov	r1, r3
 8012ce2:	6838      	ldr	r0, [r7, #0]
 8012ce4:	f7fc fb76 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8012ce8:	62b8      	str	r0, [r7, #40]	; 0x28
  for (int b = 0; b < batches; ++b) {
 8012cea:	2300      	movs	r3, #0
 8012cec:	657b      	str	r3, [r7, #84]	; 0x54
 8012cee:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012cf0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012cf2:	429a      	cmp	r2, r3
 8012cf4:	da75      	bge.n	8012de2 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x19e>
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012cf6:	2300      	movs	r3, #0
 8012cf8:	653b      	str	r3, [r7, #80]	; 0x50
 8012cfa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8012cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012cfe:	429a      	cmp	r2, r3
 8012d00:	da6b      	bge.n	8012dda <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x196>
      int32 acc = 0;
 8012d02:	2300      	movs	r3, #0
 8012d04:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8012d06:	2300      	movs	r3, #0
 8012d08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8012d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	da26      	bge.n	8012d60 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x11c>
        int32 input_val = input_data[b * accum_depth + d];
 8012d12:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012d14:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d16:	fb02 f203 	mul.w	r2, r2, r3
 8012d1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d1c:	4413      	add	r3, r2
 8012d1e:	461a      	mov	r2, r3
 8012d20:	687b      	ldr	r3, [r7, #4]
 8012d22:	4413      	add	r3, r2
 8012d24:	f993 3000 	ldrsb.w	r3, [r3]
 8012d28:	627b      	str	r3, [r7, #36]	; 0x24
        int32 filter_val = filter_data[out_c * accum_depth + d];
 8012d2a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d2c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012d2e:	fb02 f203 	mul.w	r2, r2, r3
 8012d32:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d34:	4413      	add	r3, r2
 8012d36:	461a      	mov	r2, r3
 8012d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8012d3a:	4413      	add	r3, r2
 8012d3c:	f993 3000 	ldrsb.w	r3, [r3]
 8012d40:	623b      	str	r3, [r7, #32]
        acc += (filter_val + filter_offset) * (input_val + input_offset);
 8012d42:	6a3a      	ldr	r2, [r7, #32]
 8012d44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012d46:	4413      	add	r3, r2
 8012d48:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8012d4a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012d4c:	440a      	add	r2, r1
 8012d4e:	fb02 f203 	mul.w	r2, r2, r3
 8012d52:	697b      	ldr	r3, [r7, #20]
 8012d54:	4413      	add	r3, r2
 8012d56:	617b      	str	r3, [r7, #20]
      for (int d = 0; d < accum_depth; ++d) {
 8012d58:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8012d5a:	3301      	adds	r3, #1
 8012d5c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012d5e:	e7d4      	b.n	8012d0a <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xc6>
      }
      if (bias_data) {
 8012d60:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d007      	beq.n	8012d76 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0x132>
        acc += bias_data[out_c];
 8012d66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012d68:	009b      	lsls	r3, r3, #2
 8012d6a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8012d6c:	4413      	add	r3, r2
 8012d6e:	681a      	ldr	r2, [r3, #0]
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	4413      	add	r3, r2
 8012d74:	617b      	str	r3, [r7, #20]
      }
      acc = MultiplyByQuantizedMultiplier(acc, output_multiplier, output_shift);
 8012d76:	697b      	ldr	r3, [r7, #20]
 8012d78:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012d7a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8012d7c:	4618      	mov	r0, r3
 8012d7e:	f7fe fa93 	bl	80112a8 <_ZN6tflite29MultiplyByQuantizedMultiplierElli>
 8012d82:	4603      	mov	r3, r0
 8012d84:	617b      	str	r3, [r7, #20]
      acc += output_offset;
 8012d86:	697a      	ldr	r2, [r7, #20]
 8012d88:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8012d8a:	4413      	add	r3, r2
 8012d8c:	617b      	str	r3, [r7, #20]
      acc = std::max(acc, output_activation_min);
 8012d8e:	f107 021c 	add.w	r2, r7, #28
 8012d92:	f107 0314 	add.w	r3, r7, #20
 8012d96:	4611      	mov	r1, r2
 8012d98:	4618      	mov	r0, r3
 8012d9a:	f7fc fa62 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8012d9e:	4603      	mov	r3, r0
 8012da0:	681b      	ldr	r3, [r3, #0]
 8012da2:	617b      	str	r3, [r7, #20]
      acc = std::min(acc, output_activation_max);
 8012da4:	f107 0218 	add.w	r2, r7, #24
 8012da8:	f107 0314 	add.w	r3, r7, #20
 8012dac:	4611      	mov	r1, r2
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7fc fa6b 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 8012db4:	4603      	mov	r3, r0
 8012db6:	681b      	ldr	r3, [r3, #0]
 8012db8:	617b      	str	r3, [r7, #20]
      output_data[out_c + output_depth * b] = static_cast<int8_t>(acc);
 8012dba:	6979      	ldr	r1, [r7, #20]
 8012dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012dbe:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8012dc0:	fb02 f203 	mul.w	r2, r2, r3
 8012dc4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dc6:	4413      	add	r3, r2
 8012dc8:	461a      	mov	r2, r3
 8012dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8012dcc:	4413      	add	r3, r2
 8012dce:	b24a      	sxtb	r2, r1
 8012dd0:	701a      	strb	r2, [r3, #0]
    for (int out_c = 0; out_c < output_depth; ++out_c) {
 8012dd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012dd4:	3301      	adds	r3, #1
 8012dd6:	653b      	str	r3, [r7, #80]	; 0x50
 8012dd8:	e78f      	b.n	8012cfa <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xb6>
  for (int b = 0; b < batches; ++b) {
 8012dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012ddc:	3301      	adds	r3, #1
 8012dde:	657b      	str	r3, [r7, #84]	; 0x54
 8012de0:	e785      	b.n	8012cee <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa+0xaa>
    }
  }
}
 8012de2:	bf00      	nop
 8012de4:	3758      	adds	r7, #88	; 0x58
 8012de6:	46bd      	mov	sp, r7
 8012de8:	bd80      	pop	{r7, pc}

08012dea <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>:
TfLiteStatus CalculateOpData(TfLiteContext* context,
                             TfLiteFusedActivation activation,
                             TfLiteType data_type, const TfLiteTensor* input,
                             const TfLiteTensor* filter,
                             const TfLiteTensor* bias, TfLiteTensor* output,
                             OpData* data) {
 8012dea:	b580      	push	{r7, lr}
 8012dec:	b08c      	sub	sp, #48	; 0x30
 8012dee:	af02      	add	r7, sp, #8
 8012df0:	60f8      	str	r0, [r7, #12]
 8012df2:	607b      	str	r3, [r7, #4]
 8012df4:	460b      	mov	r3, r1
 8012df6:	72fb      	strb	r3, [r7, #11]
 8012df8:	4613      	mov	r3, r2
 8012dfa:	72bb      	strb	r3, [r7, #10]
  TfLiteStatus status = kTfLiteOk;
 8012dfc:	2300      	movs	r3, #0
 8012dfe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  if (data_type != kTfLiteFloat32) {
 8012e02:	7abb      	ldrb	r3, [r7, #10]
 8012e04:	2b01      	cmp	r3, #1
 8012e06:	d041      	beq.n	8012e8c <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
    double real_multiplier = 0.0;
 8012e08:	f04f 0200 	mov.w	r2, #0
 8012e0c:	f04f 0300 	mov.w	r3, #0
 8012e10:	e9c7 2306 	strd	r2, r3, [r7, #24]
    TF_LITE_ENSURE_STATUS(GetQuantizedConvolutionMultipler(
 8012e14:	f107 0318 	add.w	r3, r7, #24
 8012e18:	9301      	str	r3, [sp, #4]
 8012e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8012e1c:	9300      	str	r3, [sp, #0]
 8012e1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8012e20:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8012e22:	6879      	ldr	r1, [r7, #4]
 8012e24:	68f8      	ldr	r0, [r7, #12]
 8012e26:	f7fc f813 	bl	800ee50 <_ZN6tflite32GetQuantizedConvolutionMultiplerEP13TfLiteContextPK12TfLiteTensorS4_S4_PS2_Pd>
 8012e2a:	4603      	mov	r3, r0
 8012e2c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8012e30:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e34:	2b00      	cmp	r3, #0
 8012e36:	d002      	beq.n	8012e3e <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0x54>
 8012e38:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8012e3c:	e028      	b.n	8012e90 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, input, filter, bias, output, &real_multiplier));
    int exponent;
    QuantizeMultiplier(real_multiplier, &data->output_multiplier, &exponent);
 8012e3e:	ed97 7b06 	vldr	d7, [r7, #24]
 8012e42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e44:	f107 0214 	add.w	r2, r7, #20
 8012e48:	4611      	mov	r1, r2
 8012e4a:	4618      	mov	r0, r3
 8012e4c:	eeb0 0a47 	vmov.f32	s0, s14
 8012e50:	eef0 0a67 	vmov.f32	s1, s15
 8012e54:	f7fb fbb0 	bl	800e5b8 <_ZN6tflite18QuantizeMultiplierEdPlPi>
    data->output_shift = -exponent;
 8012e58:	697b      	ldr	r3, [r7, #20]
 8012e5a:	425a      	negs	r2, r3
 8012e5c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e5e:	605a      	str	r2, [r3, #4]
    TF_LITE_ENSURE_STATUS(CalculateActivationRangeQuantized(
 8012e60:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e62:	f103 0208 	add.w	r2, r3, #8
 8012e66:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8012e68:	330c      	adds	r3, #12
 8012e6a:	7af9      	ldrb	r1, [r7, #11]
 8012e6c:	9300      	str	r3, [sp, #0]
 8012e6e:	4613      	mov	r3, r2
 8012e70:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012e72:	68f8      	ldr	r0, [r7, #12]
 8012e74:	f7fc f976 	bl	800f164 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
 8012e78:	4603      	mov	r3, r0
 8012e7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8012e7e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012e82:	2b00      	cmp	r3, #0
 8012e84:	d002      	beq.n	8012e8c <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa2>
 8012e86:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8012e8a:	e001      	b.n	8012e90 <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE+0xa6>
        context, activation, output, &data->output_activation_min,
        &data->output_activation_max));
  }
  return status;
 8012e8c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	3728      	adds	r7, #40	; 0x28
 8012e94:	46bd      	mov	sp, r7
 8012e96:	bd80      	pop	{r7, pc}

08012e98 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj>:

}  // namespace

void* Init(TfLiteContext* context, const char* buffer, size_t length) {
 8012e98:	b580      	push	{r7, lr}
 8012e9a:	b086      	sub	sp, #24
 8012e9c:	af00      	add	r7, sp, #0
 8012e9e:	60f8      	str	r0, [r7, #12]
 8012ea0:	60b9      	str	r1, [r7, #8]
 8012ea2:	607a      	str	r2, [r7, #4]
  TFLITE_DCHECK(context->AllocatePersistentBuffer != nullptr);
 8012ea4:	68fb      	ldr	r3, [r7, #12]
 8012ea6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012ea8:	2b00      	cmp	r3, #0
 8012eaa:	d101      	bne.n	8012eb0 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x18>
 8012eac:	f008 f880 	bl	801afb0 <abort>
  void* data = nullptr;
 8012eb0:	2300      	movs	r3, #0
 8012eb2:	617b      	str	r3, [r7, #20]
  if (context->AllocatePersistentBuffer(context, sizeof(OpData), &data) ==
 8012eb4:	68fb      	ldr	r3, [r7, #12]
 8012eb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8012eb8:	f107 0214 	add.w	r2, r7, #20
 8012ebc:	2114      	movs	r1, #20
 8012ebe:	68f8      	ldr	r0, [r7, #12]
 8012ec0:	4798      	blx	r3
 8012ec2:	4603      	mov	r3, r0
 8012ec4:	2b01      	cmp	r3, #1
 8012ec6:	bf0c      	ite	eq
 8012ec8:	2301      	moveq	r3, #1
 8012eca:	2300      	movne	r3, #0
 8012ecc:	b2db      	uxtb	r3, r3
 8012ece:	2b00      	cmp	r3, #0
 8012ed0:	d001      	beq.n	8012ed6 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x3e>
      kTfLiteError) {
    return nullptr;
 8012ed2:	2300      	movs	r3, #0
 8012ed4:	e000      	b.n	8012ed8 <_ZN6tflite3ops5micro15fully_connected4InitEP13TfLiteContextPKcj+0x40>
  }
  return data;
 8012ed6:	697b      	ldr	r3, [r7, #20]
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3718      	adds	r7, #24
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}

08012ee0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8012ee0:	b5b0      	push	{r4, r5, r7, lr}
 8012ee2:	b08c      	sub	sp, #48	; 0x30
 8012ee4:	af04      	add	r7, sp, #16
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->user_data != nullptr);
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	691b      	ldr	r3, [r3, #16]
 8012eee:	2b00      	cmp	r3, #0
 8012ef0:	d101      	bne.n	8012ef6 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x16>
 8012ef2:	f008 f85d 	bl	801afb0 <abort>
  TFLITE_DCHECK(node->builtin_data != nullptr);
 8012ef6:	683b      	ldr	r3, [r7, #0]
 8012ef8:	695b      	ldr	r3, [r3, #20]
 8012efa:	2b00      	cmp	r3, #0
 8012efc:	d101      	bne.n	8012f02 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0x22>
 8012efe:	f008 f857 	bl	801afb0 <abort>

  OpData* data = static_cast<OpData*>(node->user_data);
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	691b      	ldr	r3, [r3, #16]
 8012f06:	61fb      	str	r3, [r7, #28]
  const auto params =
 8012f08:	683b      	ldr	r3, [r7, #0]
 8012f0a:	695b      	ldr	r3, [r3, #20]
 8012f0c:	61bb      	str	r3, [r7, #24]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8012f0e:	2200      	movs	r2, #0
 8012f10:	6839      	ldr	r1, [r7, #0]
 8012f12:	6878      	ldr	r0, [r7, #4]
 8012f14:	f7fc f9cd 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012f18:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 8012f1a:	2201      	movs	r2, #1
 8012f1c:	6839      	ldr	r1, [r7, #0]
 8012f1e:	6878      	ldr	r0, [r7, #4]
 8012f20:	f7fc f9c7 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8012f24:	6138      	str	r0, [r7, #16]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 8012f26:	2202      	movs	r2, #2
 8012f28:	6839      	ldr	r1, [r7, #0]
 8012f2a:	6878      	ldr	r0, [r7, #4]
 8012f2c:	f7fe fea9 	bl	8011c82 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 8012f30:	60f8      	str	r0, [r7, #12]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8012f32:	2200      	movs	r2, #0
 8012f34:	6839      	ldr	r1, [r7, #0]
 8012f36:	6878      	ldr	r0, [r7, #4]
 8012f38:	f7fc f9d1 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8012f3c:	60b8      	str	r0, [r7, #8]

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8012f3e:	697b      	ldr	r3, [r7, #20]
 8012f40:	781a      	ldrb	r2, [r3, #0]
 8012f42:	68bb      	ldr	r3, [r7, #8]
 8012f44:	781b      	ldrb	r3, [r3, #0]
 8012f46:	429a      	cmp	r2, r3
 8012f48:	d01b      	beq.n	8012f82 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xa2>
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	695c      	ldr	r4, [r3, #20]
 8012f4e:	697b      	ldr	r3, [r7, #20]
 8012f50:	781b      	ldrb	r3, [r3, #0]
 8012f52:	4618      	mov	r0, r3
 8012f54:	f7fb fac8 	bl	800e4e8 <TfLiteTypeGetName>
 8012f58:	4605      	mov	r5, r0
 8012f5a:	68bb      	ldr	r3, [r7, #8]
 8012f5c:	781b      	ldrb	r3, [r3, #0]
 8012f5e:	4618      	mov	r0, r3
 8012f60:	f7fb fac2 	bl	800e4e8 <TfLiteTypeGetName>
 8012f64:	4603      	mov	r3, r0
 8012f66:	9303      	str	r3, [sp, #12]
 8012f68:	9502      	str	r5, [sp, #8]
 8012f6a:	4b17      	ldr	r3, [pc, #92]	; (8012fc8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8012f6c:	9301      	str	r3, [sp, #4]
 8012f6e:	4b17      	ldr	r3, [pc, #92]	; (8012fcc <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8012f70:	9300      	str	r3, [sp, #0]
 8012f72:	f44f 73b8 	mov.w	r3, #368	; 0x170
 8012f76:	4a16      	ldr	r2, [pc, #88]	; (8012fd0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf0>)
 8012f78:	4916      	ldr	r1, [pc, #88]	; (8012fd4 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf4>)
 8012f7a:	6878      	ldr	r0, [r7, #4]
 8012f7c:	47a0      	blx	r4
 8012f7e:	2301      	movs	r3, #1
 8012f80:	e01e      	b.n	8012fc0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
  TF_LITE_ENSURE_MSG(context, input->type == filter->type,
 8012f82:	697b      	ldr	r3, [r7, #20]
 8012f84:	781a      	ldrb	r2, [r3, #0]
 8012f86:	693b      	ldr	r3, [r7, #16]
 8012f88:	781b      	ldrb	r3, [r3, #0]
 8012f8a:	429a      	cmp	r2, r3
 8012f8c:	d006      	beq.n	8012f9c <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xbc>
 8012f8e:	687b      	ldr	r3, [r7, #4]
 8012f90:	695b      	ldr	r3, [r3, #20]
 8012f92:	4911      	ldr	r1, [pc, #68]	; (8012fd8 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xf8>)
 8012f94:	6878      	ldr	r0, [r7, #4]
 8012f96:	4798      	blx	r3
 8012f98:	2301      	movs	r3, #1
 8012f9a:	e011      	b.n	8012fc0 <_ZN6tflite3ops5micro15fully_connected7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>
                     "Hybrid models are not supported on TFLite Micro.");

  return CalculateOpData(context, params->activation, input->type, input,
 8012f9c:	69bb      	ldr	r3, [r7, #24]
 8012f9e:	7819      	ldrb	r1, [r3, #0]
 8012fa0:	697b      	ldr	r3, [r7, #20]
 8012fa2:	781a      	ldrb	r2, [r3, #0]
 8012fa4:	69fb      	ldr	r3, [r7, #28]
 8012fa6:	9303      	str	r3, [sp, #12]
 8012fa8:	68bb      	ldr	r3, [r7, #8]
 8012faa:	9302      	str	r3, [sp, #8]
 8012fac:	68fb      	ldr	r3, [r7, #12]
 8012fae:	9301      	str	r3, [sp, #4]
 8012fb0:	693b      	ldr	r3, [r7, #16]
 8012fb2:	9300      	str	r3, [sp, #0]
 8012fb4:	697b      	ldr	r3, [r7, #20]
 8012fb6:	6878      	ldr	r0, [r7, #4]
 8012fb8:	f7ff ff17 	bl	8012dea <_ZN6tflite3ops5micro15fully_connected12_GLOBAL__N_115CalculateOpDataEP13TfLiteContext21TfLiteFusedActivation10TfLiteTypePK12TfLiteTensorSA_SA_PS8_PNS3_6OpDataE>
 8012fbc:	4603      	mov	r3, r0
                         filter, bias, output, data);
 8012fbe:	bf00      	nop
}
 8012fc0:	4618      	mov	r0, r3
 8012fc2:	3720      	adds	r7, #32
 8012fc4:	46bd      	mov	sp, r7
 8012fc6:	bdb0      	pop	{r4, r5, r7, pc}
 8012fc8:	0801e8b4 	.word	0x0801e8b4
 8012fcc:	0801e8c4 	.word	0x0801e8c4
 8012fd0:	0801e83c 	.word	0x0801e83c
 8012fd4:	0801e898 	.word	0x0801e898
 8012fd8:	0801e8d0 	.word	0x0801e8d0

08012fdc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantizedInt8(TfLiteContext* context, TfLiteNode* node,
                               const OpData& data, const TfLiteTensor* input,
                               const TfLiteTensor* filter,
                               const TfLiteTensor* bias, TfLiteTensor* output) {
 8012fdc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012fde:	b0ad      	sub	sp, #180	; 0xb4
 8012fe0:	af06      	add	r7, sp, #24
 8012fe2:	60f8      	str	r0, [r7, #12]
 8012fe4:	60b9      	str	r1, [r7, #8]
 8012fe6:	607a      	str	r2, [r7, #4]
 8012fe8:	603b      	str	r3, [r7, #0]
  tflite::FullyConnectedParams op_params;
  op_params.input_offset = -input->params.zero_point;
 8012fea:	683b      	ldr	r3, [r7, #0]
 8012fec:	691b      	ldr	r3, [r3, #16]
 8012fee:	425b      	negs	r3, r3
 8012ff0:	613b      	str	r3, [r7, #16]
  op_params.weights_offset = -filter->params.zero_point;
 8012ff2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8012ff6:	691b      	ldr	r3, [r3, #16]
 8012ff8:	425b      	negs	r3, r3
 8012ffa:	617b      	str	r3, [r7, #20]
  op_params.output_offset = output->params.zero_point;
 8012ffc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8013000:	691b      	ldr	r3, [r3, #16]
 8013002:	61bb      	str	r3, [r7, #24]
  op_params.output_multiplier = data.output_multiplier;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	681b      	ldr	r3, [r3, #0]
 8013008:	61fb      	str	r3, [r7, #28]
  // TODO(b/138810107): Figure out whether output shift should be inverted
  op_params.output_shift = -data.output_shift;
 801300a:	687b      	ldr	r3, [r7, #4]
 801300c:	685b      	ldr	r3, [r3, #4]
 801300e:	425b      	negs	r3, r3
 8013010:	623b      	str	r3, [r7, #32]
  op_params.quantized_activation_min = data.output_activation_min;
 8013012:	687b      	ldr	r3, [r7, #4]
 8013014:	689b      	ldr	r3, [r3, #8]
 8013016:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_max = data.output_activation_max;
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	68db      	ldr	r3, [r3, #12]
 801301c:	62bb      	str	r3, [r7, #40]	; 0x28

  reference_integer_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 801301e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8013022:	6839      	ldr	r1, [r7, #0]
 8013024:	4618      	mov	r0, r3
 8013026:	f7fc fa88 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 801302a:	6838      	ldr	r0, [r7, #0]
 801302c:	f7fc fac5 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8013030:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 8013032:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8013036:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 801303a:	4618      	mov	r0, r3
 801303c:	f7fc fa7d 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013040:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8013044:	f7fc fab9 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8013048:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 801304a:	f107 0368 	add.w	r3, r7, #104	; 0x68
 801304e:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8013052:	4618      	mov	r0, r3
 8013054:	f7fc fa71 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013058:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 801305c:	f7fe f8db 	bl	8011216 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8013060:	4605      	mov	r5, r0
      GetTensorShape(output), GetTensorData<int8_t>(output));
 8013062:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8013066:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801306a:	4618      	mov	r0, r3
 801306c:	f7fc fa65 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_integer_ops::FullyConnected(
 8013070:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8013074:	f7fc fab2 	bl	800f5dc <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 8013078:	4603      	mov	r3, r0
 801307a:	f107 0250 	add.w	r2, r7, #80	; 0x50
 801307e:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8013082:	f107 0010 	add.w	r0, r7, #16
 8013086:	9304      	str	r3, [sp, #16]
 8013088:	f107 0380 	add.w	r3, r7, #128	; 0x80
 801308c:	9303      	str	r3, [sp, #12]
 801308e:	9502      	str	r5, [sp, #8]
 8013090:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8013094:	9301      	str	r3, [sp, #4]
 8013096:	9400      	str	r4, [sp, #0]
 8013098:	4613      	mov	r3, r2
 801309a:	4632      	mov	r2, r6
 801309c:	f7ff fdd2 	bl	8012c44 <_ZN6tflite21reference_integer_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKaS6_S8_S6_PKlS6_Pa>
      GetTensorShape(output), GetTensorData<int8_t>(output));
 80130a0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80130a4:	4618      	mov	r0, r3
 80130a6:	f7fc f973 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(bias), GetTensorData<int32_t>(bias),
 80130aa:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80130ae:	4618      	mov	r0, r3
 80130b0:	f7fc f96e 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<int8_t>(filter),
 80130b4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80130b8:	4618      	mov	r0, r3
 80130ba:	f7fc f969 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 80130be:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80130c2:	4618      	mov	r0, r3
 80130c4:	f7fc f964 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  return kTfLiteOk;
 80130c8:	2300      	movs	r3, #0
}
 80130ca:	4618      	mov	r0, r3
 80130cc:	379c      	adds	r7, #156	; 0x9c
 80130ce:	46bd      	mov	sp, r7
 80130d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080130d4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>:

TfLiteStatus EvalQuantized(TfLiteContext* context, TfLiteNode* node,
                           const OpData& data, const TfLiteTensor* input,
                           const TfLiteTensor* filter, const TfLiteTensor* bias,
                           TfLiteTensor* output) {
 80130d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80130d6:	b0c9      	sub	sp, #292	; 0x124
 80130d8:	af06      	add	r7, sp, #24
 80130da:	60f8      	str	r0, [r7, #12]
 80130dc:	f107 0008 	add.w	r0, r7, #8
 80130e0:	6001      	str	r1, [r0, #0]
 80130e2:	1d39      	adds	r1, r7, #4
 80130e4:	600a      	str	r2, [r1, #0]
 80130e6:	463a      	mov	r2, r7
 80130e8:	6013      	str	r3, [r2, #0]
  const int32_t input_offset = -input->params.zero_point;
 80130ea:	463b      	mov	r3, r7
 80130ec:	681b      	ldr	r3, [r3, #0]
 80130ee:	691b      	ldr	r3, [r3, #16]
 80130f0:	425b      	negs	r3, r3
 80130f2:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
  const int32_t filter_offset = -filter->params.zero_point;
 80130f6:	f8d7 3120 	ldr.w	r3, [r7, #288]	; 0x120
 80130fa:	691b      	ldr	r3, [r3, #16]
 80130fc:	425b      	negs	r3, r3
 80130fe:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
  const int32_t output_offset = output->params.zero_point;
 8013102:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013106:	691b      	ldr	r3, [r3, #16]
 8013108:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc

  tflite::FullyConnectedParams op_params;
  op_params.input_offset = input_offset;
 801310c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8013110:	617b      	str	r3, [r7, #20]
  op_params.weights_offset = filter_offset;
 8013112:	f8d7 3100 	ldr.w	r3, [r7, #256]	; 0x100
 8013116:	61bb      	str	r3, [r7, #24]
  op_params.output_offset = output_offset;
 8013118:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801311c:	61fb      	str	r3, [r7, #28]
  op_params.output_multiplier = data.output_multiplier;
 801311e:	1d3b      	adds	r3, r7, #4
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	681b      	ldr	r3, [r3, #0]
 8013124:	623b      	str	r3, [r7, #32]
  // Legacy ops used mixed left and right shifts. Now all are +ve-means-left.
  op_params.output_shift = -data.output_shift;
 8013126:	1d3b      	adds	r3, r7, #4
 8013128:	681b      	ldr	r3, [r3, #0]
 801312a:	685b      	ldr	r3, [r3, #4]
 801312c:	425b      	negs	r3, r3
 801312e:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.quantized_activation_min = data.output_activation_min;
 8013130:	1d3b      	adds	r3, r7, #4
 8013132:	681b      	ldr	r3, [r3, #0]
 8013134:	689b      	ldr	r3, [r3, #8]
 8013136:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.quantized_activation_max = data.output_activation_max;
 8013138:	1d3b      	adds	r3, r7, #4
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	68db      	ldr	r3, [r3, #12]
 801313e:	62fb      	str	r3, [r7, #44]	; 0x2c
  reference_ops::FullyConnected(                                       \
      op_params, GetTensorShape(input), GetTensorData<uint8_t>(input), \
      GetTensorShape(filter), GetTensorData<uint8_t>(filter),          \
      GetTensorShape(bias), GetTensorData<int32_t>(bias),              \
      GetTensorShape(output), GetTensorData<output_data_type>(output))
  switch (output->type) {
 8013140:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8013144:	781b      	ldrb	r3, [r3, #0]
 8013146:	2b03      	cmp	r3, #3
 8013148:	d002      	beq.n	8013150 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x7c>
 801314a:	2b07      	cmp	r3, #7
 801314c:	d058      	beq.n	8013200 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x12c>
 801314e:	e0af      	b.n	80132b0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1dc>
    case kTfLiteUInt8:
      TF_LITE_FULLY_CONNECTED(uint8_t);
 8013150:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8013154:	463b      	mov	r3, r7
 8013156:	6819      	ldr	r1, [r3, #0]
 8013158:	4610      	mov	r0, r2
 801315a:	f7fc f9ee 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801315e:	463b      	mov	r3, r7
 8013160:	6818      	ldr	r0, [r3, #0]
 8013162:	f7fc f8d2 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013166:	4606      	mov	r6, r0
 8013168:	f107 0354 	add.w	r3, r7, #84	; 0x54
 801316c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013170:	4618      	mov	r0, r3
 8013172:	f7fc f9e2 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013176:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 801317a:	f7fc f8c6 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801317e:	4604      	mov	r4, r0
 8013180:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8013184:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013188:	4618      	mov	r0, r3
 801318a:	f7fc f9d6 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801318e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8013192:	f7fe f840 	bl	8011216 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8013196:	4605      	mov	r5, r0
 8013198:	f107 0384 	add.w	r3, r7, #132	; 0x84
 801319c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 80131a0:	4618      	mov	r0, r3
 80131a2:	f7fc f9ca 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 80131a6:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 80131aa:	f7fc f8bf 	bl	800f32c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80131ae:	4603      	mov	r3, r0
 80131b0:	f107 0254 	add.w	r2, r7, #84	; 0x54
 80131b4:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80131b8:	f107 0014 	add.w	r0, r7, #20
 80131bc:	9304      	str	r3, [sp, #16]
 80131be:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80131c2:	9303      	str	r3, [sp, #12]
 80131c4:	9502      	str	r5, [sp, #8]
 80131c6:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80131ca:	9301      	str	r3, [sp, #4]
 80131cc:	9400      	str	r4, [sp, #0]
 80131ce:	4613      	mov	r3, r2
 80131d0:	4632      	mov	r2, r6
 80131d2:	f7ff fb9b 	bl	801290c <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ph>
 80131d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80131da:	4618      	mov	r0, r3
 80131dc:	f7fc f8d8 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 80131e0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80131e4:	4618      	mov	r0, r3
 80131e6:	f7fc f8d3 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 80131ea:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80131ee:	4618      	mov	r0, r3
 80131f0:	f7fc f8ce 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 80131f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80131f8:	4618      	mov	r0, r3
 80131fa:	f7fc f8c9 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80131fe:	e068      	b.n	80132d2 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    case kTfLiteInt16:
      TF_LITE_FULLY_CONNECTED(int16_t);
 8013200:	f107 029c 	add.w	r2, r7, #156	; 0x9c
 8013204:	463b      	mov	r3, r7
 8013206:	6819      	ldr	r1, [r3, #0]
 8013208:	4610      	mov	r0, r2
 801320a:	f7fc f996 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801320e:	463b      	mov	r3, r7
 8013210:	6818      	ldr	r0, [r3, #0]
 8013212:	f7fc f87a 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 8013216:	4606      	mov	r6, r0
 8013218:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801321c:	f8d7 1120 	ldr.w	r1, [r7, #288]	; 0x120
 8013220:	4618      	mov	r0, r3
 8013222:	f7fc f98a 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013226:	f8d7 0120 	ldr.w	r0, [r7, #288]	; 0x120
 801322a:	f7fc f86e 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801322e:	4604      	mov	r4, r0
 8013230:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013234:	f8d7 1124 	ldr.w	r1, [r7, #292]	; 0x124
 8013238:	4618      	mov	r0, r3
 801323a:	f7fc f97e 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801323e:	f8d7 0124 	ldr.w	r0, [r7, #292]	; 0x124
 8013242:	f7fd ffe8 	bl	8011216 <_ZN6tflite13GetTensorDataIlEEPKT_PK12TfLiteTensor>
 8013246:	4605      	mov	r5, r0
 8013248:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801324c:	f8d7 1128 	ldr.w	r1, [r7, #296]	; 0x128
 8013250:	4618      	mov	r0, r3
 8013252:	f7fc f972 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 8013256:	f8d7 0128 	ldr.w	r0, [r7, #296]	; 0x128
 801325a:	f000 f935 	bl	80134c8 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 801325e:	4603      	mov	r3, r0
 8013260:	f107 02b4 	add.w	r2, r7, #180	; 0xb4
 8013264:	f107 019c 	add.w	r1, r7, #156	; 0x9c
 8013268:	f107 0014 	add.w	r0, r7, #20
 801326c:	9304      	str	r3, [sp, #16]
 801326e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8013272:	9303      	str	r3, [sp, #12]
 8013274:	9502      	str	r5, [sp, #8]
 8013276:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 801327a:	9301      	str	r3, [sp, #4]
 801327c:	9400      	str	r4, [sp, #0]
 801327e:	4613      	mov	r3, r2
 8013280:	4632      	mov	r2, r6
 8013282:	f7ff fc12 	bl	8012aaa <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKhS6_S8_S6_PKlS6_Ps>
 8013286:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 801328a:	4618      	mov	r0, r3
 801328c:	f7fc f880 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8013290:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8013294:	4618      	mov	r0, r3
 8013296:	f7fc f87b 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 801329a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 801329e:	4618      	mov	r0, r3
 80132a0:	f7fc f876 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 80132a4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80132a8:	4618      	mov	r0, r3
 80132aa:	f7fc f871 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      break;
 80132ae:	e010      	b.n	80132d2 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x1fe>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 80132b0:	68fb      	ldr	r3, [r7, #12]
 80132b2:	695c      	ldr	r4, [r3, #20]
 80132b4:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132b8:	781b      	ldrb	r3, [r3, #0]
 80132ba:	4618      	mov	r0, r3
 80132bc:	f7fb f914 	bl	800e4e8 <TfLiteTypeGetName>
 80132c0:	4602      	mov	r2, r0
 80132c2:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80132c6:	781b      	ldrb	r3, [r3, #0]
 80132c8:	4905      	ldr	r1, [pc, #20]	; (80132e0 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x20c>)
 80132ca:	68f8      	ldr	r0, [r7, #12]
 80132cc:	47a0      	blx	r4
                         TfLiteTypeGetName(output->type), output->type);
      return kTfLiteError;
 80132ce:	2301      	movs	r3, #1
 80132d0:	e000      	b.n	80132d4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_+0x200>
  }

  return kTfLiteOk;
 80132d2:	2300      	movs	r3, #0
}
 80132d4:	4618      	mov	r0, r3
 80132d6:	f507 7786 	add.w	r7, r7, #268	; 0x10c
 80132da:	46bd      	mov	sp, r7
 80132dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80132de:	bf00      	nop
 80132e0:	0801e95c 	.word	0x0801e95c

080132e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>:

TfLiteStatus EvalFloat(TfLiteContext* context, TfLiteNode* node,
                       TfLiteFusedActivation activation,
                       const TfLiteTensor* input, const TfLiteTensor* filter,
                       const TfLiteTensor* bias, TfLiteTensor* output) {
 80132e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80132e6:	b0af      	sub	sp, #188	; 0xbc
 80132e8:	af06      	add	r7, sp, #24
 80132ea:	60f8      	str	r0, [r7, #12]
 80132ec:	60b9      	str	r1, [r7, #8]
 80132ee:	603b      	str	r3, [r7, #0]
 80132f0:	4613      	mov	r3, r2
 80132f2:	71fb      	strb	r3, [r7, #7]
  float output_activation_min, output_activation_max;
  CalculateActivationRange(activation, &output_activation_min,
 80132f4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80132f8:	f107 013c 	add.w	r1, r7, #60	; 0x3c
 80132fc:	79fb      	ldrb	r3, [r7, #7]
 80132fe:	4618      	mov	r0, r3
 8013300:	f7fd fe7a 	bl	8010ff8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &output_activation_max);
  tflite::FullyConnectedParams op_params;
  op_params.float_activation_min = output_activation_min;
 8013304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8013306:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.float_activation_max = output_activation_max;
 8013308:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801330a:	633b      	str	r3, [r7, #48]	; 0x30
  tflite::reference_ops::FullyConnected(
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 801330c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8013310:	6839      	ldr	r1, [r7, #0]
 8013312:	4618      	mov	r0, r3
 8013314:	f7fc f911 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013318:	6838      	ldr	r0, [r7, #0]
 801331a:	f7fc f92c 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801331e:	4606      	mov	r6, r0
      GetTensorShape(filter), GetTensorData<float>(filter),
 8013320:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8013324:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8013328:	4618      	mov	r0, r3
 801332a:	f7fc f906 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801332e:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8013332:	f7fc f920 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8013336:	4604      	mov	r4, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8013338:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801333c:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8013340:	4618      	mov	r0, r3
 8013342:	f7fc f8fa 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 8013346:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801334a:	f7fc f914 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 801334e:	4605      	mov	r5, r0
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 8013350:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013354:	f8d7 10c0 	ldr.w	r1, [r7, #192]	; 0xc0
 8013358:	4618      	mov	r0, r3
 801335a:	f7fc f8ee 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::FullyConnected(
 801335e:	f8d7 00c0 	ldr.w	r0, [r7, #192]	; 0xc0
 8013362:	f7fc f919 	bl	800f598 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 8013366:	4603      	mov	r3, r0
 8013368:	f107 0258 	add.w	r2, r7, #88	; 0x58
 801336c:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8013370:	f107 0010 	add.w	r0, r7, #16
 8013374:	9304      	str	r3, [sp, #16]
 8013376:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801337a:	9303      	str	r3, [sp, #12]
 801337c:	9502      	str	r5, [sp, #8]
 801337e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8013382:	9301      	str	r3, [sp, #4]
 8013384:	9400      	str	r4, [sp, #0]
 8013386:	4613      	mov	r3, r2
 8013388:	4632      	mov	r2, r6
 801338a:	f7ff fa29 	bl	80127e0 <_ZN6tflite13reference_ops14FullyConnectedERKNS_20FullyConnectedParamsERKNS_12RuntimeShapeEPKfS6_S8_S6_S8_S6_Pf>
      GetTensorShape(bias), GetTensorData<float>(bias), GetTensorShape(output),
 801338e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8013392:	4618      	mov	r0, r3
 8013394:	f7fb fffc 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
 8013398:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801339c:	4618      	mov	r0, r3
 801339e:	f7fb fff7 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorShape(filter), GetTensorData<float>(filter),
 80133a2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80133a6:	4618      	mov	r0, r3
 80133a8:	f7fb fff2 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      op_params, GetTensorShape(input), GetTensorData<float>(input),
 80133ac:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80133b0:	4618      	mov	r0, r3
 80133b2:	f7fb ffed 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      GetTensorData<float>(output));
  return kTfLiteOk;
 80133b6:	2300      	movs	r3, #0
}
 80133b8:	4618      	mov	r0, r3
 80133ba:	37a4      	adds	r7, #164	; 0xa4
 80133bc:	46bd      	mov	sp, r7
 80133be:	bdf0      	pop	{r4, r5, r6, r7, pc}

080133c0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 80133c0:	b590      	push	{r4, r7, lr}
 80133c2:	b08d      	sub	sp, #52	; 0x34
 80133c4:	af04      	add	r7, sp, #16
 80133c6:	6078      	str	r0, [r7, #4]
 80133c8:	6039      	str	r1, [r7, #0]
  TFLITE_DCHECK(node->builtin_data != nullptr);
 80133ca:	683b      	ldr	r3, [r7, #0]
 80133cc:	695b      	ldr	r3, [r3, #20]
 80133ce:	2b00      	cmp	r3, #0
 80133d0:	d101      	bne.n	80133d6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x16>
 80133d2:	f007 fded 	bl	801afb0 <abort>
  const auto* params =
 80133d6:	683b      	ldr	r3, [r7, #0]
 80133d8:	695b      	ldr	r3, [r3, #20]
 80133da:	61fb      	str	r3, [r7, #28]
      static_cast<const TfLiteFullyConnectedParams*>(node->builtin_data);

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80133dc:	2200      	movs	r2, #0
 80133de:	6839      	ldr	r1, [r7, #0]
 80133e0:	6878      	ldr	r0, [r7, #4]
 80133e2:	f7fb ff66 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80133e6:	61b8      	str	r0, [r7, #24]
  const TfLiteTensor* filter = GetInput(context, node, kWeightsTensor);
 80133e8:	2201      	movs	r2, #1
 80133ea:	6839      	ldr	r1, [r7, #0]
 80133ec:	6878      	ldr	r0, [r7, #4]
 80133ee:	f7fb ff60 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80133f2:	6178      	str	r0, [r7, #20]
  const TfLiteTensor* bias = GetOptionalInputTensor(context, node, kBiasTensor);
 80133f4:	2202      	movs	r2, #2
 80133f6:	6839      	ldr	r1, [r7, #0]
 80133f8:	6878      	ldr	r0, [r7, #4]
 80133fa:	f7fe fc42 	bl	8011c82 <_ZN6tflite22GetOptionalInputTensorEP13TfLiteContextPK10TfLiteNodei>
 80133fe:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8013400:	2200      	movs	r2, #0
 8013402:	6839      	ldr	r1, [r7, #0]
 8013404:	6878      	ldr	r0, [r7, #4]
 8013406:	f7fb ff6a 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 801340a:	60f8      	str	r0, [r7, #12]

  TFLITE_DCHECK(node->user_data != nullptr);
 801340c:	683b      	ldr	r3, [r7, #0]
 801340e:	691b      	ldr	r3, [r3, #16]
 8013410:	2b00      	cmp	r3, #0
 8013412:	d101      	bne.n	8013418 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x58>
 8013414:	f007 fdcc 	bl	801afb0 <abort>
  const OpData& data = *(static_cast<const OpData*>(node->user_data));
 8013418:	683b      	ldr	r3, [r7, #0]
 801341a:	691b      	ldr	r3, [r3, #16]
 801341c:	60bb      	str	r3, [r7, #8]

  // Checks in Prepare ensure input, output and filter types are all the same.
  switch (input->type) {
 801341e:	69bb      	ldr	r3, [r7, #24]
 8013420:	781b      	ldrb	r3, [r3, #0]
 8013422:	2b09      	cmp	r3, #9
 8013424:	d015      	beq.n	8013452 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x92>
 8013426:	2b09      	cmp	r3, #9
 8013428:	dc2f      	bgt.n	801348a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
 801342a:	2b01      	cmp	r3, #1
 801342c:	d002      	beq.n	8013434 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0x74>
 801342e:	2b03      	cmp	r3, #3
 8013430:	d01d      	beq.n	801346e <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xae>
 8013432:	e02a      	b.n	801348a <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xca>
    case kTfLiteFloat32:
      return EvalFloat(context, node, params->activation, input, filter, bias,
 8013434:	69fb      	ldr	r3, [r7, #28]
 8013436:	781a      	ldrb	r2, [r3, #0]
 8013438:	68fb      	ldr	r3, [r7, #12]
 801343a:	9302      	str	r3, [sp, #8]
 801343c:	693b      	ldr	r3, [r7, #16]
 801343e:	9301      	str	r3, [sp, #4]
 8013440:	697b      	ldr	r3, [r7, #20]
 8013442:	9300      	str	r3, [sp, #0]
 8013444:	69bb      	ldr	r3, [r7, #24]
 8013446:	6839      	ldr	r1, [r7, #0]
 8013448:	6878      	ldr	r0, [r7, #4]
 801344a:	f7ff ff4b 	bl	80132e4 <_ZN6tflite3ops5micro15fully_connected9EvalFloatEP13TfLiteContextP10TfLiteNode21TfLiteFusedActivationPK12TfLiteTensorSA_SA_PS8_>
 801344e:	4603      	mov	r3, r0
                       output);
 8013450:	e029      	b.n	80134a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>
    case kTfLiteInt8:
      return EvalQuantizedInt8(context, node, data, input, filter, bias,
 8013452:	68fb      	ldr	r3, [r7, #12]
 8013454:	9302      	str	r3, [sp, #8]
 8013456:	693b      	ldr	r3, [r7, #16]
 8013458:	9301      	str	r3, [sp, #4]
 801345a:	697b      	ldr	r3, [r7, #20]
 801345c:	9300      	str	r3, [sp, #0]
 801345e:	69bb      	ldr	r3, [r7, #24]
 8013460:	68ba      	ldr	r2, [r7, #8]
 8013462:	6839      	ldr	r1, [r7, #0]
 8013464:	6878      	ldr	r0, [r7, #4]
 8013466:	f7ff fdb9 	bl	8012fdc <_ZN6tflite3ops5micro15fully_connected17EvalQuantizedInt8EP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 801346a:	4603      	mov	r3, r0
                               output);
 801346c:	e01b      	b.n	80134a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    case kTfLiteUInt8:
      return EvalQuantized(context, node, data, input, filter, bias, output);
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	9302      	str	r3, [sp, #8]
 8013472:	693b      	ldr	r3, [r7, #16]
 8013474:	9301      	str	r3, [sp, #4]
 8013476:	697b      	ldr	r3, [r7, #20]
 8013478:	9300      	str	r3, [sp, #0]
 801347a:	69bb      	ldr	r3, [r7, #24]
 801347c:	68ba      	ldr	r2, [r7, #8]
 801347e:	6839      	ldr	r1, [r7, #0]
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f7ff fe27 	bl	80130d4 <_ZN6tflite3ops5micro15fully_connected13EvalQuantizedEP13TfLiteContextP10TfLiteNodeRKNS2_12_GLOBAL__N_16OpDataEPK12TfLiteTensorSD_SD_PSB_>
 8013486:	4603      	mov	r3, r0
 8013488:	e00d      	b.n	80134a6 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xe6>

    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 801348a:	687b      	ldr	r3, [r7, #4]
 801348c:	695c      	ldr	r4, [r3, #20]
 801348e:	69bb      	ldr	r3, [r7, #24]
 8013490:	781b      	ldrb	r3, [r3, #0]
 8013492:	4618      	mov	r0, r3
 8013494:	f7fb f828 	bl	800e4e8 <TfLiteTypeGetName>
 8013498:	4602      	mov	r2, r0
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	781b      	ldrb	r3, [r3, #0]
 801349e:	4904      	ldr	r1, [pc, #16]	; (80134b0 <_ZN6tflite3ops5micro15fully_connected4EvalEP13TfLiteContextP10TfLiteNode+0xf0>)
 80134a0:	6878      	ldr	r0, [r7, #4]
 80134a2:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 80134a4:	2301      	movs	r3, #1
  }
  return kTfLiteOk;
}
 80134a6:	4618      	mov	r0, r3
 80134a8:	3724      	adds	r7, #36	; 0x24
 80134aa:	46bd      	mov	sp, r7
 80134ac:	bd90      	pop	{r4, r7, pc}
 80134ae:	bf00      	nop
 80134b0:	0801e95c 	.word	0x0801e95c

080134b4 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>:

}  // namespace fully_connected

TfLiteRegistration* Register_FULLY_CONNECTED() {
 80134b4:	b480      	push	{r7}
 80134b6:	af00      	add	r7, sp, #0
                                 /*invoke=*/fully_connected::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 80134b8:	4b02      	ldr	r3, [pc, #8]	; (80134c4 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv+0x10>)
}
 80134ba:	4618      	mov	r0, r3
 80134bc:	46bd      	mov	sp, r7
 80134be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134c2:	4770      	bx	lr
 80134c4:	200000a4 	.word	0x200000a4

080134c8 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>:
inline T* GetTensorData(TfLiteTensor* tensor) {
 80134c8:	b480      	push	{r7}
 80134ca:	b083      	sub	sp, #12
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  return tensor != nullptr ? reinterpret_cast<T*>(tensor->data.raw) : nullptr;
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d002      	beq.n	80134dc <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x14>
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	685b      	ldr	r3, [r3, #4]
 80134da:	e000      	b.n	80134de <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor+0x16>
 80134dc:	2300      	movs	r3, #0
}
 80134de:	4618      	mov	r0, r3
 80134e0:	370c      	adds	r7, #12
 80134e2:	46bd      	mov	sp, r7
 80134e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80134e8:	4770      	bx	lr

080134ea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>:
                                   const RuntimeShape& check_shape_0) {
 80134ea:	b590      	push	{r4, r7, lr}
 80134ec:	b087      	sub	sp, #28
 80134ee:	af00      	add	r7, sp, #0
 80134f0:	60f8      	str	r0, [r7, #12]
 80134f2:	60b9      	str	r1, [r7, #8]
 80134f4:	607a      	str	r2, [r7, #4]
  const int dims_count = shape.DimensionsCount();
 80134f6:	68f8      	ldr	r0, [r7, #12]
 80134f8:	f7fb ff60 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80134fc:	6138      	str	r0, [r7, #16]
  for (int i = 0; i < dims_count; ++i) {
 80134fe:	2300      	movs	r3, #0
 8013500:	617b      	str	r3, [r7, #20]
 8013502:	697a      	ldr	r2, [r7, #20]
 8013504:	693b      	ldr	r3, [r7, #16]
 8013506:	429a      	cmp	r2, r3
 8013508:	da15      	bge.n	8013536 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x4c>
    if (i != skip_dim) {
 801350a:	697a      	ldr	r2, [r7, #20]
 801350c:	68bb      	ldr	r3, [r7, #8]
 801350e:	429a      	cmp	r2, r3
 8013510:	d00d      	beq.n	801352e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
      TFLITE_DCHECK_EQ(shape.Dims(i), check_shape_0.Dims(i));
 8013512:	6979      	ldr	r1, [r7, #20]
 8013514:	68f8      	ldr	r0, [r7, #12]
 8013516:	f7fb ff5d 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801351a:	4604      	mov	r4, r0
 801351c:	6979      	ldr	r1, [r7, #20]
 801351e:	6878      	ldr	r0, [r7, #4]
 8013520:	f7fb ff58 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013524:	4603      	mov	r3, r0
 8013526:	429c      	cmp	r4, r3
 8013528:	d001      	beq.n	801352e <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x44>
 801352a:	f007 fd41 	bl	801afb0 <abort>
  for (int i = 0; i < dims_count; ++i) {
 801352e:	697b      	ldr	r3, [r7, #20]
 8013530:	3301      	adds	r3, #1
 8013532:	617b      	str	r3, [r7, #20]
 8013534:	e7e5      	b.n	8013502 <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_+0x18>
  return FlatSizeSkipDim(shape, skip_dim);
 8013536:	68b9      	ldr	r1, [r7, #8]
 8013538:	68f8      	ldr	r0, [r7, #12]
 801353a:	f7ff f91b 	bl	8012774 <_ZN6tflite15FlatSizeSkipDimERKNS_12RuntimeShapeEi>
 801353e:	4603      	mov	r3, r0
}
 8013540:	4618      	mov	r0, r3
 8013542:	371c      	adds	r7, #28
 8013544:	46bd      	mov	sp, r7
 8013546:	bd90      	pop	{r4, r7, pc}

08013548 <_ZN6tflite17CountLeadingZerosImEEiT_>:
int CountLeadingZeros(T integer_input) {
 8013548:	b480      	push	{r7}
 801354a:	b083      	sub	sp, #12
 801354c:	af00      	add	r7, sp, #0
 801354e:	6078      	str	r0, [r7, #4]
  return integer_input ? __builtin_clz(integer_input)
 8013550:	687b      	ldr	r3, [r7, #4]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d003      	beq.n	801355e <_ZN6tflite17CountLeadingZerosImEEiT_+0x16>
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	fab3 f383 	clz	r3, r3
                       : std::numeric_limits<T>::digits;
 801355c:	e000      	b.n	8013560 <_ZN6tflite17CountLeadingZerosImEEiT_+0x18>
  return integer_input ? __builtin_clz(integer_input)
 801355e:	2320      	movs	r3, #32
}
 8013560:	4618      	mov	r0, r3
 8013562:	370c      	adds	r7, #12
 8013564:	46bd      	mov	sp, r7
 8013566:	f85d 7b04 	ldr.w	r7, [sp], #4
 801356a:	4770      	bx	lr

0801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>:
                 min_bound),
        max_bound)));
  }

  RawType raw() const { return i_; }
  RawType& raw() { return i_; }
 801356c:	b480      	push	{r7}
 801356e:	b083      	sub	sp, #12
 8013570:	af00      	add	r7, sp, #0
 8013572:	6078      	str	r0, [r7, #4]
 8013574:	687b      	ldr	r3, [r7, #4]
 8013576:	4618      	mov	r0, r3
 8013578:	370c      	adds	r7, #12
 801357a:	46bd      	mov	sp, r7
 801357c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013580:	4770      	bx	lr

08013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8013582:	b590      	push	{r4, r7, lr}
 8013584:	b085      	sub	sp, #20
 8013586:	af00      	add	r7, sp, #0
 8013588:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 801358a:	f107 030c 	add.w	r3, r7, #12
 801358e:	4618      	mov	r0, r3
 8013590:	f7ff ffec 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013594:	4604      	mov	r4, r0
 8013596:	6878      	ldr	r0, [r7, #4]
 8013598:	f7fd fd96 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801359c:	4603      	mov	r3, r0
 801359e:	6023      	str	r3, [r4, #0]
    return retval;
 80135a0:	68fb      	ldr	r3, [r7, #12]
  }
 80135a2:	4618      	mov	r0, r3
 80135a4:	3714      	adds	r7, #20
 80135a6:	46bd      	mov	sp, r7
 80135a8:	bd90      	pop	{r4, r7, pc}

080135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>:
// fixed-point value, regardless of the actual Scalar type. This allows
// writing generic code that applies just as well to the 32-bit and 16-bit
// cases. In the 16-bit case, the raw integer value is internally
// rounding-shifted by 16 bits to the right.
template <typename FixedPointType>
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80135aa:	b580      	push	{r7, lr}
 80135ac:	b082      	sub	sp, #8
 80135ae:	af00      	add	r7, sp, #0
 80135b0:	6078      	str	r0, [r7, #4]
    std::int32_t int32_value) {
  typedef typename FixedPointType::ScalarRawType ScalarRawType;
  static constexpr int ScalarTypeBits = 8 * sizeof(ScalarRawType);
  return static_cast<ScalarRawType>(
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80135b2:	2100      	movs	r1, #0
 80135b4:	6878      	ldr	r0, [r7, #4]
 80135b6:	f7fd fc37 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80135ba:	4603      	mov	r3, r0
}
 80135bc:	4618      	mov	r0, r3
 80135be:	3708      	adds	r7, #8
 80135c0:	46bd      	mov	sp, r7
 80135c2:	bd80      	pop	{r7, pc}

080135c4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80135c4:	b580      	push	{r7, lr}
 80135c6:	b082      	sub	sp, #8
 80135c8:	af00      	add	r7, sp, #0
 80135ca:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80135cc:	6878      	ldr	r0, [r7, #4]
 80135ce:	f000 f813 	bl	80135f8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>
 80135d2:	4603      	mov	r3, r0
}
 80135d4:	4618      	mov	r0, r3
 80135d6:	3708      	adds	r7, #8
 80135d8:	46bd      	mov	sp, r7
 80135da:	bd80      	pop	{r7, pc}

080135dc <_ZN8gemmlowp3SubIlEET_S1_S1_>:
tIntegerType Sub(tIntegerType a, tIntegerType b) {
 80135dc:	b480      	push	{r7}
 80135de:	b083      	sub	sp, #12
 80135e0:	af00      	add	r7, sp, #0
 80135e2:	6078      	str	r0, [r7, #4]
 80135e4:	6039      	str	r1, [r7, #0]
  return a - b;
 80135e6:	687a      	ldr	r2, [r7, #4]
 80135e8:	683b      	ldr	r3, [r7, #0]
 80135ea:	1ad3      	subs	r3, r2, r3
}
 80135ec:	4618      	mov	r0, r3
 80135ee:	370c      	adds	r7, #12
 80135f0:	46bd      	mov	sp, r7
 80135f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135f6:	4770      	bx	lr

080135f8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin1ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80135f8:	b580      	push	{r7, lr}
 80135fa:	b082      	sub	sp, #8
 80135fc:	af00      	add	r7, sp, #0
 80135fe:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013600:	2101      	movs	r1, #1
 8013602:	6878      	ldr	r0, [r7, #4]
 8013604:	f7fd fc10 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013608:	4603      	mov	r3, r0
  }
 801360a:	4618      	mov	r0, r3
 801360c:	3708      	adds	r7, #8
 801360e:	46bd      	mov	sp, r7
 8013610:	bd80      	pop	{r7, pc}

08013612 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>:
tIntegerType ShiftLeft(tIntegerType a, int offset) {
 8013612:	b480      	push	{r7}
 8013614:	b089      	sub	sp, #36	; 0x24
 8013616:	af00      	add	r7, sp, #0
 8013618:	6078      	str	r0, [r7, #4]
 801361a:	6039      	str	r1, [r7, #0]
  const std::int64_t wide_a = static_cast<std::int64_t>(a);
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	461a      	mov	r2, r3
 8013620:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013624:	e9c7 2306 	strd	r2, r3, [r7, #24]
  const std::int64_t wide_shifted = wide_a * (1 << offset);
 8013628:	2201      	movs	r2, #1
 801362a:	683b      	ldr	r3, [r7, #0]
 801362c:	fa02 f303 	lsl.w	r3, r2, r3
 8013630:	461a      	mov	r2, r3
 8013632:	ea4f 73e2 	mov.w	r3, r2, asr #31
 8013636:	69f9      	ldr	r1, [r7, #28]
 8013638:	fb02 f001 	mul.w	r0, r2, r1
 801363c:	69b9      	ldr	r1, [r7, #24]
 801363e:	fb03 f101 	mul.w	r1, r3, r1
 8013642:	4401      	add	r1, r0
 8013644:	69b8      	ldr	r0, [r7, #24]
 8013646:	fba0 2302 	umull	r2, r3, r0, r2
 801364a:	4419      	add	r1, r3
 801364c:	460b      	mov	r3, r1
 801364e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8013652:	e9c7 2304 	strd	r2, r3, [r7, #16]
  const auto min = std::numeric_limits<tIntegerType>::min();
 8013656:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 801365a:	60fb      	str	r3, [r7, #12]
  const auto max = std::numeric_limits<tIntegerType>::max();
 801365c:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8013660:	60bb      	str	r3, [r7, #8]
             ? min
 8013662:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013666:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 801366a:	f173 33ff 	sbcs.w	r3, r3, #4294967295
 801366e:	db0e      	blt.n	801368e <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x7c>
             : wide_shifted > max ? max
 8013670:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8013674:	f06f 4000 	mvn.w	r0, #2147483648	; 0x80000000
 8013678:	f04f 0100 	mov.w	r1, #0
 801367c:	4290      	cmp	r0, r2
 801367e:	eb71 0303 	sbcs.w	r3, r1, r3
 8013682:	db01      	blt.n	8013688 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x76>
 8013684:	693b      	ldr	r3, [r7, #16]
                                  : static_cast<tIntegerType>(wide_shifted);
 8013686:	e004      	b.n	8013692 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             : wide_shifted > max ? max
 8013688:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
                                  : static_cast<tIntegerType>(wide_shifted);
 801368c:	e001      	b.n	8013692 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i+0x80>
             ? min
 801368e:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
}
 8013692:	4618      	mov	r0, r3
 8013694:	3724      	adds	r7, #36	; 0x24
 8013696:	46bd      	mov	sp, r7
 8013698:	f85d 7b04 	ldr.w	r7, [sp], #4
 801369c:	4770      	bx	lr

0801369e <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>:
tIntegerType SelectUsingMask(tIntegerType if_mask, tIntegerType then_val,
 801369e:	b590      	push	{r4, r7, lr}
 80136a0:	b085      	sub	sp, #20
 80136a2:	af00      	add	r7, sp, #0
 80136a4:	60f8      	str	r0, [r7, #12]
 80136a6:	60b9      	str	r1, [r7, #8]
 80136a8:	607a      	str	r2, [r7, #4]
  return BitXor(BitAnd(if_mask, then_val), BitAnd(BitNot(if_mask), else_val));
 80136aa:	68b9      	ldr	r1, [r7, #8]
 80136ac:	68f8      	ldr	r0, [r7, #12]
 80136ae:	f7fd fd16 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80136b2:	4604      	mov	r4, r0
 80136b4:	68f8      	ldr	r0, [r7, #12]
 80136b6:	f7fd fda2 	bl	80111fe <_ZN8gemmlowp6BitNotIlEET_S1_>
 80136ba:	4603      	mov	r3, r0
 80136bc:	6879      	ldr	r1, [r7, #4]
 80136be:	4618      	mov	r0, r3
 80136c0:	f7fd fd0d 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 80136c4:	4603      	mov	r3, r0
 80136c6:	4619      	mov	r1, r3
 80136c8:	4620      	mov	r0, r4
 80136ca:	f000 f805 	bl	80136d8 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>
 80136ce:	4603      	mov	r3, r0
}
 80136d0:	4618      	mov	r0, r3
 80136d2:	3714      	adds	r7, #20
 80136d4:	46bd      	mov	sp, r7
 80136d6:	bd90      	pop	{r4, r7, pc}

080136d8 <_ZN8gemmlowp6BitXorIlEET_S1_S1_>:
tIntegerType BitXor(tIntegerType a, tIntegerType b) {
 80136d8:	b480      	push	{r7}
 80136da:	b083      	sub	sp, #12
 80136dc:	af00      	add	r7, sp, #0
 80136de:	6078      	str	r0, [r7, #4]
 80136e0:	6039      	str	r1, [r7, #0]
  return a ^ b;
 80136e2:	687a      	ldr	r2, [r7, #4]
 80136e4:	683b      	ldr	r3, [r7, #0]
 80136e6:	4053      	eors	r3, r2
}
 80136e8:	4618      	mov	r0, r3
 80136ea:	370c      	adds	r7, #12
 80136ec:	46bd      	mov	sp, r7
 80136ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136f2:	4770      	bx	lr

080136f4 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>:
inline std::int32_t RoundingHalfSum(std::int32_t a, std::int32_t b) {
 80136f4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80136f8:	b08b      	sub	sp, #44	; 0x2c
 80136fa:	af00      	add	r7, sp, #0
 80136fc:	6078      	str	r0, [r7, #4]
 80136fe:	6039      	str	r1, [r7, #0]
  std::int64_t a64 = a;
 8013700:	6879      	ldr	r1, [r7, #4]
 8013702:	4608      	mov	r0, r1
 8013704:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8013708:	e9c7 0108 	strd	r0, r1, [r7, #32]
  std::int64_t b64 = b;
 801370c:	6839      	ldr	r1, [r7, #0]
 801370e:	4608      	mov	r0, r1
 8013710:	ea4f 71e0 	mov.w	r1, r0, asr #31
 8013714:	e9c7 0106 	strd	r0, r1, [r7, #24]
  std::int64_t sum = a64 + b64;
 8013718:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 801371c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8013720:	eb18 0a00 	adds.w	sl, r8, r0
 8013724:	eb49 0b01 	adc.w	fp, r9, r1
 8013728:	e9c7 ab04 	strd	sl, fp, [r7, #16]
  std::int64_t sign = sum >= 0 ? 1 : -1;
 801372c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8013730:	2800      	cmp	r0, #0
 8013732:	f171 0100 	sbcs.w	r1, r1, #0
 8013736:	db04      	blt.n	8013742 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x4e>
 8013738:	f04f 0001 	mov.w	r0, #1
 801373c:	f04f 0100 	mov.w	r1, #0
 8013740:	e003      	b.n	801374a <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_+0x56>
 8013742:	f04f 30ff 	mov.w	r0, #4294967295
 8013746:	f04f 31ff 	mov.w	r1, #4294967295
 801374a:	e9c7 0102 	strd	r0, r1, [r7, #8]
  return static_cast<std::int32_t>((sum + sign) / 2);
 801374e:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8013752:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8013756:	eb18 0400 	adds.w	r4, r8, r0
 801375a:	eb49 0501 	adc.w	r5, r9, r1
 801375e:	0fe9      	lsrs	r1, r5, #31
 8013760:	4608      	mov	r0, r1
 8013762:	f04f 0100 	mov.w	r1, #0
 8013766:	1902      	adds	r2, r0, r4
 8013768:	eb41 0305 	adc.w	r3, r1, r5
 801376c:	f04f 0000 	mov.w	r0, #0
 8013770:	f04f 0100 	mov.w	r1, #0
 8013774:	0850      	lsrs	r0, r2, #1
 8013776:	ea40 70c3 	orr.w	r0, r0, r3, lsl #31
 801377a:	1059      	asrs	r1, r3, #1
 801377c:	4602      	mov	r2, r0
 801377e:	460b      	mov	r3, r1
 8013780:	4613      	mov	r3, r2
}
 8013782:	4618      	mov	r0, r3
 8013784:	372c      	adds	r7, #44	; 0x2c
 8013786:	46bd      	mov	sp, r7
 8013788:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801378c:	4770      	bx	lr

0801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 801378e:	b580      	push	{r7, lr}
 8013790:	b084      	sub	sp, #16
 8013792:	af00      	add	r7, sp, #0
 8013794:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013796:	f107 030c 	add.w	r3, r7, #12
 801379a:	4618      	mov	r0, r3
 801379c:	f7ff fee6 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80137a0:	4602      	mov	r2, r0
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	6013      	str	r3, [r2, #0]
    return retval;
 80137a6:	68fb      	ldr	r3, [r7, #12]
  }
 80137a8:	4618      	mov	r0, r3
 80137aa:	3710      	adds	r7, #16
 80137ac:	46bd      	mov	sp, r7
 80137ae:	bd80      	pop	{r7, pc}

080137b0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>:

// Implementation of logistic function.

// Returns 1 / (1 + x) for x in (0, 1).
template <typename tRawType>
FixedPoint<tRawType, 0> one_over_one_plus_x_for_x_in_0_1(
 80137b0:	b580      	push	{r7, lr}
 80137b2:	b08a      	sub	sp, #40	; 0x28
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
    FixedPoint<tRawType, 0> a) {
  typedef FixedPoint<tRawType, 0> F0;
  typedef FixedPoint<tRawType, 2> F2;
  F0 half_denominator = RoundingHalfSum(a, F0::One());
 80137b8:	f000 f85a 	bl	8013870 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 80137bc:	4603      	mov	r3, r0
 80137be:	4619      	mov	r1, r3
 80137c0:	6878      	ldr	r0, [r7, #4]
 80137c2:	f000 f860 	bl	8013886 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 80137c6:	4603      	mov	r3, r0
 80137c8:	623b      	str	r3, [r7, #32]
  // Newton-Raphson division
  // https://en.wikipedia.org/wiki/Division_algorithm#Newton.E2.80.93Raphson_division
  // Refer to that page for the logic behind the 48/17 and 32/17 constants.
  const F2 constant_48_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, 1515870810, 48.0 / 17.0);
 80137ca:	f04f 305a 	mov.w	r0, #1515870810	; 0x5a5a5a5a
 80137ce:	f000 f88c 	bl	80138ea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80137d2:	4603      	mov	r3, r0
 80137d4:	4618      	mov	r0, r3
 80137d6:	f000 f874 	bl	80138c2 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80137da:	4603      	mov	r3, r0
 80137dc:	61fb      	str	r3, [r7, #28]
  const F2 constant_neg_32_over_17 =
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F2, -1010580540, -32.0 / 17.0);
 80137de:	4823      	ldr	r0, [pc, #140]	; (801386c <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 80137e0:	f000 f883 	bl	80138ea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>
 80137e4:	4603      	mov	r3, r0
 80137e6:	4618      	mov	r0, r3
 80137e8:	f000 f86b 	bl	80138c2 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 80137ec:	4603      	mov	r3, r0
 80137ee:	61bb      	str	r3, [r7, #24]
  F2 x = constant_48_over_17 + half_denominator * constant_neg_32_over_17;
 80137f0:	69b9      	ldr	r1, [r7, #24]
 80137f2:	6a38      	ldr	r0, [r7, #32]
 80137f4:	f000 f886 	bl	8013904 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80137f8:	4603      	mov	r3, r0
 80137fa:	4619      	mov	r1, r3
 80137fc:	69f8      	ldr	r0, [r7, #28]
 80137fe:	f000 f8a3 	bl	8013948 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013802:	4603      	mov	r3, r0
 8013804:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 8013806:	2300      	movs	r3, #0
 8013808:	627b      	str	r3, [r7, #36]	; 0x24
 801380a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801380c:	2b02      	cmp	r3, #2
 801380e:	dc21      	bgt.n	8013854 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0xa4>
    F2 half_denominator_times_x = half_denominator * x;
 8013810:	6979      	ldr	r1, [r7, #20]
 8013812:	6a38      	ldr	r0, [r7, #32]
 8013814:	f000 f876 	bl	8013904 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013818:	4603      	mov	r3, r0
 801381a:	613b      	str	r3, [r7, #16]
    F2 one_minus_half_denominator_times_x =
        F2::One() - half_denominator_times_x;
 801381c:	f000 f8b2 	bl	8013984 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>
 8013820:	4603      	mov	r3, r0
 8013822:	6939      	ldr	r1, [r7, #16]
 8013824:	4618      	mov	r0, r3
 8013826:	f000 f8b6 	bl	8013996 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801382a:	4603      	mov	r3, r0
 801382c:	60fb      	str	r3, [r7, #12]
    x = x + Rescale<2>(x * one_minus_half_denominator_times_x);
 801382e:	68f9      	ldr	r1, [r7, #12]
 8013830:	6978      	ldr	r0, [r7, #20]
 8013832:	f000 f8ce 	bl	80139d2 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013836:	4603      	mov	r3, r0
 8013838:	4618      	mov	r0, r3
 801383a:	f000 f8ec 	bl	8013a16 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801383e:	4603      	mov	r3, r0
 8013840:	4619      	mov	r1, r3
 8013842:	6978      	ldr	r0, [r7, #20]
 8013844:	f000 f880 	bl	8013948 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013848:	4603      	mov	r3, r0
 801384a:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < 3; i++) {
 801384c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801384e:	3301      	adds	r3, #1
 8013850:	627b      	str	r3, [r7, #36]	; 0x24
 8013852:	e7da      	b.n	801380a <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_+0x5a>
  }
  return Rescale<0>(ExactMulByPot<-1>(x));
 8013854:	6978      	ldr	r0, [r7, #20]
 8013856:	f000 f8f8 	bl	8013a4a <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>
 801385a:	4603      	mov	r3, r0
 801385c:	4618      	mov	r0, r3
 801385e:	f000 f90a 	bl	8013a76 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8013862:	4603      	mov	r3, r0
}
 8013864:	4618      	mov	r0, r3
 8013866:	3728      	adds	r7, #40	; 0x28
 8013868:	46bd      	mov	sp, r7
 801386a:	bd80      	pop	{r7, pc}
 801386c:	c3c3c3c4 	.word	0xc3c3c3c4

08013870 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>:
  static FixedPoint One() {
 8013870:	b580      	push	{r7, lr}
 8013872:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8013874:	f000 f945 	bl	8013b02 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>
 8013878:	4603      	mov	r3, r0
 801387a:	4618      	mov	r0, r3
 801387c:	f7ff fe81 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013880:	4603      	mov	r3, r0
  }
 8013882:	4618      	mov	r0, r3
 8013884:	bd80      	pop	{r7, pc}

08013886 <_ZN8gemmlowp15RoundingHalfSumIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(RoundingHalfSum, RoundingHalfSum)
 8013886:	b590      	push	{r4, r7, lr}
 8013888:	b083      	sub	sp, #12
 801388a:	af00      	add	r7, sp, #0
 801388c:	6078      	str	r0, [r7, #4]
 801388e:	6039      	str	r1, [r7, #0]
 8013890:	1d3b      	adds	r3, r7, #4
 8013892:	4618      	mov	r0, r3
 8013894:	f7ff fe6a 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013898:	4603      	mov	r3, r0
 801389a:	681c      	ldr	r4, [r3, #0]
 801389c:	463b      	mov	r3, r7
 801389e:	4618      	mov	r0, r3
 80138a0:	f7ff fe64 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80138a4:	4603      	mov	r3, r0
 80138a6:	681b      	ldr	r3, [r3, #0]
 80138a8:	4619      	mov	r1, r3
 80138aa:	4620      	mov	r0, r4
 80138ac:	f7ff ff22 	bl	80136f4 <_ZN8gemmlowp15RoundingHalfSumIlEET_S1_S1_>
 80138b0:	4603      	mov	r3, r0
 80138b2:	4618      	mov	r0, r3
 80138b4:	f7ff ff6b 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80138b8:	4603      	mov	r3, r0
 80138ba:	4618      	mov	r0, r3
 80138bc:	370c      	adds	r7, #12
 80138be:	46bd      	mov	sp, r7
 80138c0:	bd90      	pop	{r4, r7, pc}

080138c2 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 80138c2:	b590      	push	{r4, r7, lr}
 80138c4:	b085      	sub	sp, #20
 80138c6:	af00      	add	r7, sp, #0
 80138c8:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 80138ca:	f107 030c 	add.w	r3, r7, #12
 80138ce:	4618      	mov	r0, r3
 80138d0:	f000 f91e 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80138d4:	4604      	mov	r4, r0
 80138d6:	6878      	ldr	r0, [r7, #4]
 80138d8:	f7fd fbf6 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 80138dc:	4603      	mov	r3, r0
 80138de:	6023      	str	r3, [r4, #0]
    return retval;
 80138e0:	68fb      	ldr	r3, [r7, #12]
  }
 80138e2:	4618      	mov	r0, r3
 80138e4:	3714      	adds	r7, #20
 80138e6:	46bd      	mov	sp, r7
 80138e8:	bd90      	pop	{r4, r7, pc}

080138ea <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi2EEEEENT_13ScalarRawTypeEl>:
inline typename FixedPointType::ScalarRawType RescaleConstantInitializer(
 80138ea:	b580      	push	{r7, lr}
 80138ec:	b082      	sub	sp, #8
 80138ee:	af00      	add	r7, sp, #0
 80138f0:	6078      	str	r0, [r7, #4]
      RoundingDivideByPOT<std::int32_t>(int32_value, 32 - ScalarTypeBits));
 80138f2:	2100      	movs	r1, #0
 80138f4:	6878      	ldr	r0, [r7, #4]
 80138f6:	f7fd fa97 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80138fa:	4603      	mov	r3, r0
}
 80138fc:	4618      	mov	r0, r3
 80138fe:	3708      	adds	r7, #8
 8013900:	46bd      	mov	sp, r7
 8013902:	bd80      	pop	{r7, pc}

08013904 <_ZN8gemmlowpmlIlLi0ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013904:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013906:	b085      	sub	sp, #20
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
 801390c:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 801390e:	1d3b      	adds	r3, r7, #4
 8013910:	4618      	mov	r0, r3
 8013912:	f7ff fe2b 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013916:	4603      	mov	r3, r0
 8013918:	681d      	ldr	r5, [r3, #0]
 801391a:	463b      	mov	r3, r7
 801391c:	4618      	mov	r0, r3
 801391e:	f000 f8f7 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013922:	4603      	mov	r3, r0
 8013924:	681e      	ldr	r6, [r3, #0]
 8013926:	f107 030c 	add.w	r3, r7, #12
 801392a:	4618      	mov	r0, r3
 801392c:	f000 f8f0 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013930:	4604      	mov	r4, r0
 8013932:	4631      	mov	r1, r6
 8013934:	4628      	mov	r0, r5
 8013936:	f7fb fe85 	bl	800f644 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 801393a:	4603      	mov	r3, r0
 801393c:	6023      	str	r3, [r4, #0]
  return c;
 801393e:	68fb      	ldr	r3, [r7, #12]
}
 8013940:	4618      	mov	r0, r3
 8013942:	3714      	adds	r7, #20
 8013944:	46bd      	mov	sp, r7
 8013946:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013948 <_ZN8gemmlowpplIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013948:	b590      	push	{r4, r7, lr}
 801394a:	b083      	sub	sp, #12
 801394c:	af00      	add	r7, sp, #0
 801394e:	6078      	str	r0, [r7, #4]
 8013950:	6039      	str	r1, [r7, #0]
 8013952:	1d3b      	adds	r3, r7, #4
 8013954:	4618      	mov	r0, r3
 8013956:	f000 f8db 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 801395a:	4603      	mov	r3, r0
 801395c:	681c      	ldr	r4, [r3, #0]
 801395e:	463b      	mov	r3, r7
 8013960:	4618      	mov	r0, r3
 8013962:	f000 f8d5 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013966:	4603      	mov	r3, r0
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	4619      	mov	r1, r3
 801396c:	4620      	mov	r0, r4
 801396e:	f7fd fbe7 	bl	8011140 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013972:	4603      	mov	r3, r0
 8013974:	4618      	mov	r0, r3
 8013976:	f000 f8d6 	bl	8013b26 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 801397a:	4603      	mov	r3, r0
 801397c:	4618      	mov	r0, r3
 801397e:	370c      	adds	r7, #12
 8013980:	46bd      	mov	sp, r7
 8013982:	bd90      	pop	{r4, r7, pc}

08013984 <_ZN8gemmlowp10FixedPointIlLi2EE3OneEv>:
  static FixedPoint One() {
 8013984:	b580      	push	{r7, lr}
 8013986:	af00      	add	r7, sp, #0
    return FromScalarRaw(
 8013988:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 801398c:	f7ff ff99 	bl	80138c2 <_ZN8gemmlowp10FixedPointIlLi2EE13FromScalarRawEl>
 8013990:	4603      	mov	r3, r0
  }
 8013992:	4618      	mov	r0, r3
 8013994:	bd80      	pop	{r7, pc}

08013996 <_ZN8gemmlowpmiIlLi2EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8013996:	b590      	push	{r4, r7, lr}
 8013998:	b083      	sub	sp, #12
 801399a:	af00      	add	r7, sp, #0
 801399c:	6078      	str	r0, [r7, #4]
 801399e:	6039      	str	r1, [r7, #0]
 80139a0:	1d3b      	adds	r3, r7, #4
 80139a2:	4618      	mov	r0, r3
 80139a4:	f000 f8b4 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80139a8:	4603      	mov	r3, r0
 80139aa:	681c      	ldr	r4, [r3, #0]
 80139ac:	463b      	mov	r3, r7
 80139ae:	4618      	mov	r0, r3
 80139b0:	f000 f8ae 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80139b4:	4603      	mov	r3, r0
 80139b6:	681b      	ldr	r3, [r3, #0]
 80139b8:	4619      	mov	r1, r3
 80139ba:	4620      	mov	r0, r4
 80139bc:	f7ff fe0e 	bl	80135dc <_ZN8gemmlowp3SubIlEET_S1_S1_>
 80139c0:	4603      	mov	r3, r0
 80139c2:	4618      	mov	r0, r3
 80139c4:	f000 f8af 	bl	8013b26 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>
 80139c8:	4603      	mov	r3, r0
 80139ca:	4618      	mov	r0, r3
 80139cc:	370c      	adds	r7, #12
 80139ce:	46bd      	mov	sp, r7
 80139d0:	bd90      	pop	{r4, r7, pc}

080139d2 <_ZN8gemmlowpmlIlLi2ELi2EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 80139d2:	b5f0      	push	{r4, r5, r6, r7, lr}
 80139d4:	b085      	sub	sp, #20
 80139d6:	af00      	add	r7, sp, #0
 80139d8:	6078      	str	r0, [r7, #4]
 80139da:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 80139dc:	1d3b      	adds	r3, r7, #4
 80139de:	4618      	mov	r0, r3
 80139e0:	f000 f896 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80139e4:	4603      	mov	r3, r0
 80139e6:	681d      	ldr	r5, [r3, #0]
 80139e8:	463b      	mov	r3, r7
 80139ea:	4618      	mov	r0, r3
 80139ec:	f000 f890 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 80139f0:	4603      	mov	r3, r0
 80139f2:	681e      	ldr	r6, [r3, #0]
 80139f4:	f107 030c 	add.w	r3, r7, #12
 80139f8:	4618      	mov	r0, r3
 80139fa:	f000 f856 	bl	8013aaa <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 80139fe:	4604      	mov	r4, r0
 8013a00:	4631      	mov	r1, r6
 8013a02:	4628      	mov	r0, r5
 8013a04:	f7fb fe1e 	bl	800f644 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013a08:	4603      	mov	r3, r0
 8013a0a:	6023      	str	r3, [r4, #0]
  return c;
 8013a0c:	68fb      	ldr	r3, [r7, #12]
}
 8013a0e:	4618      	mov	r0, r3
 8013a10:	3714      	adds	r7, #20
 8013a12:	46bd      	mov	sp, r7
 8013a14:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a16 <_ZN8gemmlowp7RescaleILi2ElLi4EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013a16:	b5b0      	push	{r4, r5, r7, lr}
 8013a18:	b084      	sub	sp, #16
 8013a1a:	af00      	add	r7, sp, #0
 8013a1c:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013a1e:	1d3b      	adds	r3, r7, #4
 8013a20:	4618      	mov	r0, r3
 8013a22:	f000 f842 	bl	8013aaa <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>
 8013a26:	4603      	mov	r3, r0
 8013a28:	681d      	ldr	r5, [r3, #0]
 8013a2a:	f107 030c 	add.w	r3, r7, #12
 8013a2e:	4618      	mov	r0, r3
 8013a30:	f000 f86e 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013a34:	4604      	mov	r4, r0
 8013a36:	4628      	mov	r0, r5
 8013a38:	f000 f886 	bl	8013b48 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>
 8013a3c:	4603      	mov	r3, r0
 8013a3e:	6023      	str	r3, [r4, #0]
  return result;
 8013a40:	68fb      	ldr	r3, [r7, #12]
}
 8013a42:	4618      	mov	r0, r3
 8013a44:	3710      	adds	r7, #16
 8013a46:	46bd      	mov	sp, r7
 8013a48:	bdb0      	pop	{r4, r5, r7, pc}

08013a4a <_ZN8gemmlowp13ExactMulByPotILin1ElLi2EEENS_10FixedPointIT0_XplT_T1_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tExponent + tIntegerBits> ExactMulByPot(
 8013a4a:	b590      	push	{r4, r7, lr}
 8013a4c:	b085      	sub	sp, #20
 8013a4e:	af00      	add	r7, sp, #0
 8013a50:	6078      	str	r0, [r7, #4]
  c.raw() = a.raw();
 8013a52:	1d3b      	adds	r3, r7, #4
 8013a54:	4618      	mov	r0, r3
 8013a56:	f000 f85b 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013a5a:	4604      	mov	r4, r0
 8013a5c:	f107 030c 	add.w	r3, r7, #12
 8013a60:	4618      	mov	r0, r3
 8013a62:	f000 f87d 	bl	8013b60 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013a66:	4602      	mov	r2, r0
 8013a68:	6823      	ldr	r3, [r4, #0]
 8013a6a:	6013      	str	r3, [r2, #0]
  return c;
 8013a6c:	68fb      	ldr	r3, [r7, #12]
}
 8013a6e:	4618      	mov	r0, r3
 8013a70:	3714      	adds	r7, #20
 8013a72:	46bd      	mov	sp, r7
 8013a74:	bd90      	pop	{r4, r7, pc}

08013a76 <_ZN8gemmlowp7RescaleILi0ElLi1EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8013a76:	b5b0      	push	{r4, r5, r7, lr}
 8013a78:	b084      	sub	sp, #16
 8013a7a:	af00      	add	r7, sp, #0
 8013a7c:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8013a7e:	1d3b      	adds	r3, r7, #4
 8013a80:	4618      	mov	r0, r3
 8013a82:	f000 f86d 	bl	8013b60 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>
 8013a86:	4603      	mov	r3, r0
 8013a88:	681d      	ldr	r5, [r3, #0]
 8013a8a:	f107 030c 	add.w	r3, r7, #12
 8013a8e:	4618      	mov	r0, r3
 8013a90:	f7ff fd6c 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013a94:	4604      	mov	r4, r0
 8013a96:	4628      	mov	r0, r5
 8013a98:	f000 f86d 	bl	8013b76 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>
 8013a9c:	4603      	mov	r3, r0
 8013a9e:	6023      	str	r3, [r4, #0]
  return result;
 8013aa0:	68fb      	ldr	r3, [r7, #12]
}
 8013aa2:	4618      	mov	r0, r3
 8013aa4:	3710      	adds	r7, #16
 8013aa6:	46bd      	mov	sp, r7
 8013aa8:	bdb0      	pop	{r4, r5, r7, pc}

08013aaa <_ZN8gemmlowp10FixedPointIlLi4EE3rawEv>:
  RawType& raw() { return i_; }
 8013aaa:	b480      	push	{r7}
 8013aac:	b083      	sub	sp, #12
 8013aae:	af00      	add	r7, sp, #0
 8013ab0:	6078      	str	r0, [r7, #4]
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	4618      	mov	r0, r3
 8013ab6:	370c      	adds	r7, #12
 8013ab8:	46bd      	mov	sp, r7
 8013aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013abe:	4770      	bx	lr

08013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>:
FixedPoint<tRawType, tIntegerBits> SelectUsingMask(
 8013ac0:	b590      	push	{r4, r7, lr}
 8013ac2:	b085      	sub	sp, #20
 8013ac4:	af00      	add	r7, sp, #0
 8013ac6:	60f8      	str	r0, [r7, #12]
 8013ac8:	60b9      	str	r1, [r7, #8]
 8013aca:	607a      	str	r2, [r7, #4]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8013acc:	f107 0308 	add.w	r3, r7, #8
 8013ad0:	4618      	mov	r0, r3
 8013ad2:	f7ff fd4b 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013ad6:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013ad8:	681c      	ldr	r4, [r3, #0]
      SelectUsingMask(if_mask, then_val.raw(), else_val.raw()));
 8013ada:	1d3b      	adds	r3, r7, #4
 8013adc:	4618      	mov	r0, r3
 8013ade:	f7ff fd45 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013ae2:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013ae4:	681b      	ldr	r3, [r3, #0]
 8013ae6:	461a      	mov	r2, r3
 8013ae8:	4621      	mov	r1, r4
 8013aea:	68f8      	ldr	r0, [r7, #12]
 8013aec:	f7ff fdd7 	bl	801369e <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013af0:	4603      	mov	r3, r0
 8013af2:	4618      	mov	r0, r3
 8013af4:	f7ff fe4b 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013af8:	4603      	mov	r3, r0
}
 8013afa:	4618      	mov	r0, r3
 8013afc:	3714      	adds	r7, #20
 8013afe:	46bd      	mov	sp, r7
 8013b00:	bd90      	pop	{r4, r7, pc}

08013b02 <_ZN8gemmlowp10FixedPointIlLi0EE12ScalarRawMaxEv>:
  static const ScalarRawType ScalarRawMax() {
 8013b02:	b580      	push	{r7, lr}
 8013b04:	af00      	add	r7, sp, #0
    return std::numeric_limits<ScalarRawType>::max();
 8013b06:	f7fa fd4d 	bl	800e5a4 <_ZNSt14numeric_limitsIlE3maxEv>
 8013b0a:	4603      	mov	r3, r0
  }
 8013b0c:	4618      	mov	r0, r3
 8013b0e:	bd80      	pop	{r7, pc}

08013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>:
  RawType& raw() { return i_; }
 8013b10:	b480      	push	{r7}
 8013b12:	b083      	sub	sp, #12
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	6078      	str	r0, [r7, #4]
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	4618      	mov	r0, r3
 8013b1c:	370c      	adds	r7, #12
 8013b1e:	46bd      	mov	sp, r7
 8013b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b24:	4770      	bx	lr

08013b26 <_ZN8gemmlowp10FixedPointIlLi2EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8013b26:	b580      	push	{r7, lr}
 8013b28:	b084      	sub	sp, #16
 8013b2a:	af00      	add	r7, sp, #0
 8013b2c:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8013b2e:	f107 030c 	add.w	r3, r7, #12
 8013b32:	4618      	mov	r0, r3
 8013b34:	f7ff ffec 	bl	8013b10 <_ZN8gemmlowp10FixedPointIlLi2EE3rawEv>
 8013b38:	4602      	mov	r2, r0
 8013b3a:	687b      	ldr	r3, [r7, #4]
 8013b3c:	6013      	str	r3, [r2, #0]
    return retval;
 8013b3e:	68fb      	ldr	r3, [r7, #12]
  }
 8013b40:	4618      	mov	r0, r3
 8013b42:	3710      	adds	r7, #16
 8013b44:	46bd      	mov	sp, r7
 8013b46:	bd80      	pop	{r7, pc}

08013b48 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013b48:	b580      	push	{r7, lr}
 8013b4a:	b082      	sub	sp, #8
 8013b4c:	af00      	add	r7, sp, #0
 8013b4e:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013b50:	6878      	ldr	r0, [r7, #4]
 8013b52:	f000 f82f 	bl	8013bb4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>
 8013b56:	4603      	mov	r3, r0
}
 8013b58:	4618      	mov	r0, r3
 8013b5a:	3708      	adds	r7, #8
 8013b5c:	46bd      	mov	sp, r7
 8013b5e:	bd80      	pop	{r7, pc}

08013b60 <_ZN8gemmlowp10FixedPointIlLi1EE3rawEv>:
  RawType& raw() { return i_; }
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
 8013b68:	687b      	ldr	r3, [r7, #4]
 8013b6a:	4618      	mov	r0, r3
 8013b6c:	370c      	adds	r7, #12
 8013b6e:	46bd      	mov	sp, r7
 8013b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b74:	4770      	bx	lr

08013b76 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi1ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013b76:	b580      	push	{r7, lr}
 8013b78:	b082      	sub	sp, #8
 8013b7a:	af00      	add	r7, sp, #0
 8013b7c:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013b7e:	6878      	ldr	r0, [r7, #4]
 8013b80:	f000 f85a 	bl	8013c38 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>
 8013b84:	4603      	mov	r3, r0
}
 8013b86:	4618      	mov	r0, r3
 8013b88:	3708      	adds	r7, #8
 8013b8a:	46bd      	mov	sp, r7
 8013b8c:	bd80      	pop	{r7, pc}

08013b8e <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>:
tIntegerType MaskIfZero(tIntegerType a) {
 8013b8e:	b580      	push	{r7, lr}
 8013b90:	b082      	sub	sp, #8
 8013b92:	af00      	add	r7, sp, #0
 8013b94:	6078      	str	r0, [r7, #4]
  return MaskIfNonZero<tIntegerType>(!a);
 8013b96:	687b      	ldr	r3, [r7, #4]
 8013b98:	2b00      	cmp	r3, #0
 8013b9a:	bf0c      	ite	eq
 8013b9c:	2301      	moveq	r3, #1
 8013b9e:	2300      	movne	r3, #0
 8013ba0:	b2db      	uxtb	r3, r3
 8013ba2:	4618      	mov	r0, r3
 8013ba4:	f7fd fb1a 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8013ba8:	4603      	mov	r3, r0
}
 8013baa:	4618      	mov	r0, r3
 8013bac:	3708      	adds	r7, #8
 8013bae:	46bd      	mov	sp, r7
 8013bb0:	bd80      	pop	{r7, pc}
	...

08013bb4 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013bb4:	b580      	push	{r7, lr}
 8013bb6:	b08a      	sub	sp, #40	; 0x28
 8013bb8:	af00      	add	r7, sp, #0
 8013bba:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013bbc:	f7fb fd1f 	bl	800f5fe <_ZNSt14numeric_limitsIlE3minEv>
 8013bc0:	4603      	mov	r3, r0
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	f7fd fa80 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013bc8:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013bca:	f7fa fceb 	bl	800e5a4 <_ZNSt14numeric_limitsIlE3maxEv>
 8013bce:	4603      	mov	r3, r0
 8013bd0:	4618      	mov	r0, r3
 8013bd2:	f7fd fa79 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013bd6:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013bd8:	2320      	movs	r3, #32
 8013bda:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013bdc:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8013be0:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013be2:	f06f 4060 	mvn.w	r0, #3758096384	; 0xe0000000
 8013be6:	f7fd fa6f 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013bea:	4603      	mov	r3, r0
 8013bec:	4619      	mov	r1, r3
 8013bee:	6878      	ldr	r0, [r7, #4]
 8013bf0:	f7fd fab4 	bl	801115c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013bf4:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013bf6:	480f      	ldr	r0, [pc, #60]	; (8013c34 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi2ElLi1EE4evalEl+0x80>)
 8013bf8:	f7fd fa66 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013bfc:	4603      	mov	r3, r0
 8013bfe:	4619      	mov	r1, r3
 8013c00:	6878      	ldr	r0, [r7, #4]
 8013c02:	f7fd fa89 	bl	8011118 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013c06:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013c08:	2102      	movs	r1, #2
 8013c0a:	6878      	ldr	r0, [r7, #4]
 8013c0c:	f7ff fd01 	bl	8013612 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013c10:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013c12:	68fa      	ldr	r2, [r7, #12]
 8013c14:	6a39      	ldr	r1, [r7, #32]
 8013c16:	6978      	ldr	r0, [r7, #20]
 8013c18:	f7ff fd41 	bl	801369e <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013c1c:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013c1e:	68fa      	ldr	r2, [r7, #12]
 8013c20:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013c22:	6938      	ldr	r0, [r7, #16]
 8013c24:	f7ff fd3b 	bl	801369e <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013c28:	60f8      	str	r0, [r7, #12]
    return result;
 8013c2a:	68fb      	ldr	r3, [r7, #12]
  }
 8013c2c:	4618      	mov	r0, r3
 8013c2e:	3728      	adds	r7, #40	; 0x28
 8013c30:	46bd      	mov	sp, r7
 8013c32:	bd80      	pop	{r7, pc}
 8013c34:	e0000001 	.word	0xe0000001

08013c38 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013c38:	b580      	push	{r7, lr}
 8013c3a:	b08a      	sub	sp, #40	; 0x28
 8013c3c:	af00      	add	r7, sp, #0
 8013c3e:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8013c40:	f7fb fcdd 	bl	800f5fe <_ZNSt14numeric_limitsIlE3minEv>
 8013c44:	4603      	mov	r3, r0
 8013c46:	4618      	mov	r0, r3
 8013c48:	f7fd fa3e 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c4c:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8013c4e:	f7fa fca9 	bl	800e5a4 <_ZNSt14numeric_limitsIlE3maxEv>
 8013c52:	4603      	mov	r3, r0
 8013c54:	4618      	mov	r0, r3
 8013c56:	f7fd fa37 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c5a:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8013c5c:	2320      	movs	r3, #32
 8013c5e:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8013c60:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8013c64:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 8013c66:	f06f 4040 	mvn.w	r0, #3221225472	; 0xc0000000
 8013c6a:	f7fd fa2d 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c6e:	4603      	mov	r3, r0
 8013c70:	4619      	mov	r1, r3
 8013c72:	6878      	ldr	r0, [r7, #4]
 8013c74:	f7fd fa72 	bl	801115c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 8013c78:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 8013c7a:	480f      	ldr	r0, [pc, #60]	; (8013cb8 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi1ElLi1EE4evalEl+0x80>)
 8013c7c:	f7fd fa24 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8013c80:	4603      	mov	r3, r0
 8013c82:	4619      	mov	r1, r3
 8013c84:	6878      	ldr	r0, [r7, #4]
 8013c86:	f7fd fa47 	bl	8011118 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 8013c8a:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8013c8c:	2101      	movs	r1, #1
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7ff fcbf 	bl	8013612 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8013c94:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 8013c96:	68fa      	ldr	r2, [r7, #12]
 8013c98:	6a39      	ldr	r1, [r7, #32]
 8013c9a:	6978      	ldr	r0, [r7, #20]
 8013c9c:	f7ff fcff 	bl	801369e <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013ca0:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8013ca2:	68fa      	ldr	r2, [r7, #12]
 8013ca4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013ca6:	6938      	ldr	r0, [r7, #16]
 8013ca8:	f7ff fcf9 	bl	801369e <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8013cac:	60f8      	str	r0, [r7, #12]
    return result;
 8013cae:	68fb      	ldr	r3, [r7, #12]
  }
 8013cb0:	4618      	mov	r0, r3
 8013cb2:	3728      	adds	r7, #40	; 0x28
 8013cb4:	46bd      	mov	sp, r7
 8013cb6:	bd80      	pop	{r7, pc}
 8013cb8:	c0000001 	.word	0xc0000001

08013cbc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>:
FixedPoint<tRawType, 0> exp_on_interval_between_negative_one_quarter_and_0_excl(
 8013cbc:	b580      	push	{r7, lr}
 8013cbe:	b08a      	sub	sp, #40	; 0x28
 8013cc0:	af00      	add	r7, sp, #0
 8013cc2:	6078      	str	r0, [r7, #4]
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 1895147668, std::exp(-1.0 / 8.0));
 8013cc4:	482c      	ldr	r0, [pc, #176]	; (8013d78 <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xbc>)
 8013cc6:	f7ff fc70 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8013cca:	4603      	mov	r3, r0
 8013ccc:	4618      	mov	r0, r3
 8013cce:	f7ff fc58 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013cd2:	4603      	mov	r3, r0
 8013cd4:	627b      	str	r3, [r7, #36]	; 0x24
      GEMMLOWP_CHECKED_FIXEDPOINT_CONSTANT(F, 715827883, 1.0 / 3.0);
 8013cd6:	4829      	ldr	r0, [pc, #164]	; (8013d7c <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_+0xc0>)
 8013cd8:	f7ff fc67 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8013cdc:	4603      	mov	r3, r0
 8013cde:	4618      	mov	r0, r3
 8013ce0:	f7ff fc4f 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013ce4:	4603      	mov	r3, r0
 8013ce6:	623b      	str	r3, [r7, #32]
  F x = a + F::template ConstantPOT<-3>();
 8013ce8:	f000 f86c 	bl	8013dc4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>
 8013cec:	4603      	mov	r3, r0
 8013cee:	4619      	mov	r1, r3
 8013cf0:	6878      	ldr	r0, [r7, #4]
 8013cf2:	f000 f870 	bl	8013dd6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013cf6:	4603      	mov	r3, r0
 8013cf8:	61fb      	str	r3, [r7, #28]
  F x2 = x * x;
 8013cfa:	69f9      	ldr	r1, [r7, #28]
 8013cfc:	69f8      	ldr	r0, [r7, #28]
 8013cfe:	f000 f83f 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d02:	4603      	mov	r3, r0
 8013d04:	61bb      	str	r3, [r7, #24]
  F x3 = x2 * x;
 8013d06:	69f9      	ldr	r1, [r7, #28]
 8013d08:	69b8      	ldr	r0, [r7, #24]
 8013d0a:	f000 f839 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d0e:	4603      	mov	r3, r0
 8013d10:	617b      	str	r3, [r7, #20]
  F x4 = x2 * x2;
 8013d12:	69b9      	ldr	r1, [r7, #24]
 8013d14:	69b8      	ldr	r0, [r7, #24]
 8013d16:	f000 f833 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d1a:	4603      	mov	r3, r0
 8013d1c:	613b      	str	r3, [r7, #16]
  F x4_over_4 = SaturatingRoundingMultiplyByPOT<-2>(x4);
 8013d1e:	6938      	ldr	r0, [r7, #16]
 8013d20:	f000 f877 	bl	8013e12 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8013d24:	4603      	mov	r3, r0
 8013d26:	60fb      	str	r3, [r7, #12]
      SaturatingRoundingMultiplyByPOT<-1>(
 8013d28:	6979      	ldr	r1, [r7, #20]
 8013d2a:	68f8      	ldr	r0, [r7, #12]
 8013d2c:	f000 f853 	bl	8013dd6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d30:	4603      	mov	r3, r0
 8013d32:	6a39      	ldr	r1, [r7, #32]
 8013d34:	4618      	mov	r0, r3
 8013d36:	f000 f823 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d3a:	4603      	mov	r3, r0
 8013d3c:	69b9      	ldr	r1, [r7, #24]
 8013d3e:	4618      	mov	r0, r3
 8013d40:	f000 f849 	bl	8013dd6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d44:	4603      	mov	r3, r0
 8013d46:	4618      	mov	r0, r3
 8013d48:	f000 f879 	bl	8013e3e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>
 8013d4c:	4603      	mov	r3, r0
 8013d4e:	60bb      	str	r3, [r7, #8]
  return AddSaturatingIf16Bit(
 8013d50:	68b9      	ldr	r1, [r7, #8]
 8013d52:	69f8      	ldr	r0, [r7, #28]
 8013d54:	f000 f83f 	bl	8013dd6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d58:	4603      	mov	r3, r0
 8013d5a:	4619      	mov	r1, r3
 8013d5c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d5e:	f000 f80f 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8013d62:	4603      	mov	r3, r0
 8013d64:	4619      	mov	r1, r3
 8013d66:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013d68:	f000 f87f 	bl	8013e6a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8013d6c:	4603      	mov	r3, r0
}
 8013d6e:	4618      	mov	r0, r3
 8013d70:	3728      	adds	r7, #40	; 0x28
 8013d72:	46bd      	mov	sp, r7
 8013d74:	bd80      	pop	{r7, pc}
 8013d76:	bf00      	nop
 8013d78:	70f5a894 	.word	0x70f5a894
 8013d7c:	2aaaaaab 	.word	0x2aaaaaab

08013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBits_a + tIntegerBits_b> operator*(
 8013d80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013d82:	b085      	sub	sp, #20
 8013d84:	af00      	add	r7, sp, #0
 8013d86:	6078      	str	r0, [r7, #4]
 8013d88:	6039      	str	r1, [r7, #0]
  c.raw() = SaturatingRoundingDoublingHighMul(a.raw(), b.raw());
 8013d8a:	1d3b      	adds	r3, r7, #4
 8013d8c:	4618      	mov	r0, r3
 8013d8e:	f7ff fbed 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013d92:	4603      	mov	r3, r0
 8013d94:	681d      	ldr	r5, [r3, #0]
 8013d96:	463b      	mov	r3, r7
 8013d98:	4618      	mov	r0, r3
 8013d9a:	f7ff fbe7 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013d9e:	4603      	mov	r3, r0
 8013da0:	681e      	ldr	r6, [r3, #0]
 8013da2:	f107 030c 	add.w	r3, r7, #12
 8013da6:	4618      	mov	r0, r3
 8013da8:	f7ff fbe0 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013dac:	4604      	mov	r4, r0
 8013dae:	4631      	mov	r1, r6
 8013db0:	4628      	mov	r0, r5
 8013db2:	f7fb fc47 	bl	800f644 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8013db6:	4603      	mov	r3, r0
 8013db8:	6023      	str	r3, [r4, #0]
  return c;
 8013dba:	68fb      	ldr	r3, [r7, #12]
}
 8013dbc:	4618      	mov	r0, r3
 8013dbe:	3714      	adds	r7, #20
 8013dc0:	46bd      	mov	sp, r7
 8013dc2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013dc4 <_ZN8gemmlowp10FixedPointIlLi0EE11ConstantPOTILin3EEES1_v>:
  static FixedPoint ConstantPOT() {
 8013dc4:	b580      	push	{r7, lr}
 8013dc6:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8013dc8:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8013dcc:	f7ff fbd9 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8013dd0:	4603      	mov	r3, r0
  }
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	bd80      	pop	{r7, pc}

08013dd6 <_ZN8gemmlowpplIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8013dd6:	b590      	push	{r4, r7, lr}
 8013dd8:	b083      	sub	sp, #12
 8013dda:	af00      	add	r7, sp, #0
 8013ddc:	6078      	str	r0, [r7, #4]
 8013dde:	6039      	str	r1, [r7, #0]
 8013de0:	1d3b      	adds	r3, r7, #4
 8013de2:	4618      	mov	r0, r3
 8013de4:	f7ff fbc2 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013de8:	4603      	mov	r3, r0
 8013dea:	681c      	ldr	r4, [r3, #0]
 8013dec:	463b      	mov	r3, r7
 8013dee:	4618      	mov	r0, r3
 8013df0:	f7ff fbbc 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013df4:	4603      	mov	r3, r0
 8013df6:	681b      	ldr	r3, [r3, #0]
 8013df8:	4619      	mov	r1, r3
 8013dfa:	4620      	mov	r0, r4
 8013dfc:	f7fd f9a0 	bl	8011140 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013e00:	4603      	mov	r3, r0
 8013e02:	4618      	mov	r0, r3
 8013e04:	f7ff fcc3 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013e08:	4603      	mov	r3, r0
 8013e0a:	4618      	mov	r0, r3
 8013e0c:	370c      	adds	r7, #12
 8013e0e:	46bd      	mov	sp, r7
 8013e10:	bd90      	pop	{r4, r7, pc}

08013e12 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8013e12:	b580      	push	{r7, lr}
 8013e14:	b082      	sub	sp, #8
 8013e16:	af00      	add	r7, sp, #0
 8013e18:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8013e1a:	1d3b      	adds	r3, r7, #4
 8013e1c:	4618      	mov	r0, r3
 8013e1e:	f7ff fba5 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e22:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	4618      	mov	r0, r3
 8013e28:	f000 f83d 	bl	8013ea6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>
 8013e2c:	4603      	mov	r3, r0
 8013e2e:	4618      	mov	r0, r3
 8013e30:	f7ff fcad 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013e34:	4603      	mov	r3, r0
}
 8013e36:	4618      	mov	r0, r3
 8013e38:	3708      	adds	r7, #8
 8013e3a:	46bd      	mov	sp, r7
 8013e3c:	bd80      	pop	{r7, pc}

08013e3e <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElLi0EEENS_10FixedPointIT0_XT1_EEES3_>:
FixedPoint<tRawType, tIntegerBits> SaturatingRoundingMultiplyByPOT(
 8013e3e:	b580      	push	{r7, lr}
 8013e40:	b082      	sub	sp, #8
 8013e42:	af00      	add	r7, sp, #0
 8013e44:	6078      	str	r0, [r7, #4]
      SaturatingRoundingMultiplyByPOT<tExponent>(a.raw()));
 8013e46:	1d3b      	adds	r3, r7, #4
 8013e48:	4618      	mov	r0, r3
 8013e4a:	f7ff fb8f 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e4e:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013e50:	681b      	ldr	r3, [r3, #0]
 8013e52:	4618      	mov	r0, r3
 8013e54:	f7ff fbb6 	bl	80135c4 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin1ElEET0_S1_>
 8013e58:	4603      	mov	r3, r0
 8013e5a:	4618      	mov	r0, r3
 8013e5c:	f7ff fc97 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013e60:	4603      	mov	r3, r0
}
 8013e62:	4618      	mov	r0, r3
 8013e64:	3708      	adds	r7, #8
 8013e66:	46bd      	mov	sp, r7
 8013e68:	bd80      	pop	{r7, pc}

08013e6a <_ZN8gemmlowp20AddSaturatingIf16BitIlLi0EEENS_10FixedPointIT_XT0_EEES3_S3_>:
FixedPoint<tRawType, tIntegerBits> AddSaturatingIf16Bit(
 8013e6a:	b590      	push	{r4, r7, lr}
 8013e6c:	b083      	sub	sp, #12
 8013e6e:	af00      	add	r7, sp, #0
 8013e70:	6078      	str	r0, [r7, #4]
 8013e72:	6039      	str	r1, [r7, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8013e74:	1d3b      	adds	r3, r7, #4
 8013e76:	4618      	mov	r0, r3
 8013e78:	f7ff fb78 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e7c:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013e7e:	681c      	ldr	r4, [r3, #0]
      AddSaturatingIf16Bit(a.raw(), b.raw()));
 8013e80:	463b      	mov	r3, r7
 8013e82:	4618      	mov	r0, r3
 8013e84:	f7ff fb72 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8013e88:	4603      	mov	r3, r0
  return FixedPoint<tRawType, tIntegerBits>::FromRaw(
 8013e8a:	681b      	ldr	r3, [r3, #0]
 8013e8c:	4619      	mov	r1, r3
 8013e8e:	4620      	mov	r0, r4
 8013e90:	f000 f815 	bl	8013ebe <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>
 8013e94:	4603      	mov	r3, r0
 8013e96:	4618      	mov	r0, r3
 8013e98:	f7ff fc79 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8013e9c:	4603      	mov	r3, r0
}
 8013e9e:	4618      	mov	r0, r3
 8013ea0:	370c      	adds	r7, #12
 8013ea2:	46bd      	mov	sp, r7
 8013ea4:	bd90      	pop	{r4, r7, pc}

08013ea6 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin2ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 8013ea6:	b580      	push	{r7, lr}
 8013ea8:	b082      	sub	sp, #8
 8013eaa:	af00      	add	r7, sp, #0
 8013eac:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 8013eae:	6878      	ldr	r0, [r7, #4]
 8013eb0:	f000 f813 	bl	8013eda <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>
 8013eb4:	4603      	mov	r3, r0
}
 8013eb6:	4618      	mov	r0, r3
 8013eb8:	3708      	adds	r7, #8
 8013eba:	46bd      	mov	sp, r7
 8013ebc:	bd80      	pop	{r7, pc}

08013ebe <_ZN8gemmlowp20AddSaturatingIf16BitIlEET_S1_S1_>:
IntegerType AddSaturatingIf16Bit(IntegerType a, IntegerType b) {
 8013ebe:	b580      	push	{r7, lr}
 8013ec0:	b082      	sub	sp, #8
 8013ec2:	af00      	add	r7, sp, #0
 8013ec4:	6078      	str	r0, [r7, #4]
 8013ec6:	6039      	str	r1, [r7, #0]
  return AddSaturatingIf16BitImpl<IntegerType, sizeof(ScalarType) == 2>::Run(a,
 8013ec8:	6839      	ldr	r1, [r7, #0]
 8013eca:	6878      	ldr	r0, [r7, #4]
 8013ecc:	f000 f812 	bl	8013ef4 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>
 8013ed0:	4603      	mov	r3, r0
}
 8013ed2:	4618      	mov	r0, r3
 8013ed4:	3708      	adds	r7, #8
 8013ed6:	46bd      	mov	sp, r7
 8013ed8:	bd80      	pop	{r7, pc}

08013eda <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin2ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 8013eda:	b580      	push	{r7, lr}
 8013edc:	b082      	sub	sp, #8
 8013ede:	af00      	add	r7, sp, #0
 8013ee0:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 8013ee2:	2102      	movs	r1, #2
 8013ee4:	6878      	ldr	r0, [r7, #4]
 8013ee6:	f7fc ff9f 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8013eea:	4603      	mov	r3, r0
  }
 8013eec:	4618      	mov	r0, r3
 8013eee:	3708      	adds	r7, #8
 8013ef0:	46bd      	mov	sp, r7
 8013ef2:	bd80      	pop	{r7, pc}

08013ef4 <_ZN8gemmlowp24AddSaturatingIf16BitImplIlLb0EE3RunEll>:
  static IntegerType Run(IntegerType a, IntegerType b) { return Add(a, b); }
 8013ef4:	b580      	push	{r7, lr}
 8013ef6:	b082      	sub	sp, #8
 8013ef8:	af00      	add	r7, sp, #0
 8013efa:	6078      	str	r0, [r7, #4]
 8013efc:	6039      	str	r1, [r7, #0]
 8013efe:	6839      	ldr	r1, [r7, #0]
 8013f00:	6878      	ldr	r0, [r7, #4]
 8013f02:	f7fd f91d 	bl	8011140 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8013f06:	4603      	mov	r3, r0
 8013f08:	4618      	mov	r0, r3
 8013f0a:	3708      	adds	r7, #8
 8013f0c:	46bd      	mov	sp, r7
 8013f0e:	bd80      	pop	{r7, pc}

08013f10 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const float* input_data, const RuntimeShape& output_shape,
                    float* output_data) {
 8013f10:	b590      	push	{r4, r7, lr}
 8013f12:	ed2d 8b04 	vpush	{d8-d9}
 8013f16:	b0a5      	sub	sp, #148	; 0x94
 8013f18:	af02      	add	r7, sp, #8
 8013f1a:	60f8      	str	r0, [r7, #12]
 8013f1c:	60b9      	str	r1, [r7, #8]
 8013f1e:	607a      	str	r2, [r7, #4]
 8013f20:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 8013f22:	68b8      	ldr	r0, [r7, #8]
 8013f24:	f7fb fa4a 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013f28:	4603      	mov	r3, r0
 8013f2a:	2b04      	cmp	r3, #4
 8013f2c:	d001      	beq.n	8013f32 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x22>
 8013f2e:	f007 f83f 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 8013f32:	6838      	ldr	r0, [r7, #0]
 8013f34:	f7fb fa42 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8013f38:	4603      	mov	r3, r0
 8013f3a:	2b04      	cmp	r3, #4
 8013f3c:	d001      	beq.n	8013f42 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x32>
 8013f3e:	f007 f837 	bl	801afb0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 8013f42:	2300      	movs	r3, #0
 8013f44:	683a      	ldr	r2, [r7, #0]
 8013f46:	2100      	movs	r1, #0
 8013f48:	68b8      	ldr	r0, [r7, #8]
 8013f4a:	f7fd f98f 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013f4e:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 8013f50:	2303      	movs	r3, #3
 8013f52:	683a      	ldr	r2, [r7, #0]
 8013f54:	2103      	movs	r1, #3
 8013f56:	68b8      	ldr	r0, [r7, #8]
 8013f58:	f7fd f988 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8013f5c:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8013f5e:	2101      	movs	r1, #1
 8013f60:	68b8      	ldr	r0, [r7, #8]
 8013f62:	f7fb fa37 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013f66:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8013f68:	2102      	movs	r1, #2
 8013f6a:	68b8      	ldr	r0, [r7, #8]
 8013f6c:	f7fb fa32 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013f70:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 8013f72:	2101      	movs	r1, #1
 8013f74:	6838      	ldr	r0, [r7, #0]
 8013f76:	f7fb fa2d 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013f7a:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8013f7c:	2102      	movs	r1, #2
 8013f7e:	6838      	ldr	r0, [r7, #0]
 8013f80:	f7fb fa28 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8013f84:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8013f86:	68fb      	ldr	r3, [r7, #12]
 8013f88:	68db      	ldr	r3, [r3, #12]
 8013f8a:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8013f8c:	68fb      	ldr	r3, [r7, #12]
 8013f8e:	691b      	ldr	r3, [r3, #16]
 8013f90:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 8013f92:	2300      	movs	r3, #0
 8013f94:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8013f98:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8013f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8013f9e:	429a      	cmp	r2, r3
 8013fa0:	f280 80d4 	bge.w	801414c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x23c>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8013fa4:	2300      	movs	r3, #0
 8013fa6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8013faa:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8013fae:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8013fb0:	429a      	cmp	r2, r3
 8013fb2:	f280 80c5 	bge.w	8014140 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x230>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8013fb6:	2300      	movs	r3, #0
 8013fb8:	67fb      	str	r3, [r7, #124]	; 0x7c
 8013fba:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8013fbc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8013fbe:	429a      	cmp	r2, r3
 8013fc0:	f280 80b8 	bge.w	8014134 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x224>
        for (int channel = 0; channel < depth; ++channel) {
 8013fc4:	2300      	movs	r3, #0
 8013fc6:	67bb      	str	r3, [r7, #120]	; 0x78
 8013fc8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8013fca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8013fcc:	429a      	cmp	r2, r3
 8013fce:	f280 80ad 	bge.w	801412c <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x21c>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 8013fd2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8013fd4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8013fd6:	fb02 f303 	mul.w	r3, r2, r3
 8013fda:	68fa      	ldr	r2, [r7, #12]
 8013fdc:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 8013fe0:	1a9b      	subs	r3, r3, r2
 8013fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8013fe4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8013fe8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8013fea:	fb02 f303 	mul.w	r3, r2, r3
 8013fee:	68fa      	ldr	r2, [r7, #12]
 8013ff0:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8013ff4:	1a9b      	subs	r3, r3, r2
 8013ff6:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8013ff8:	2300      	movs	r3, #0
 8013ffa:	61bb      	str	r3, [r7, #24]
 8013ffc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013ffe:	425b      	negs	r3, r3
 8014000:	61fb      	str	r3, [r7, #28]
 8014002:	f107 021c 	add.w	r2, r7, #28
 8014006:	f107 0318 	add.w	r3, r7, #24
 801400a:	4611      	mov	r1, r2
 801400c:	4618      	mov	r0, r3
 801400e:	f7fb f914 	bl	800f23a <_ZSt3maxIiERKT_S2_S2_>
 8014012:	4603      	mov	r3, r0
 8014014:	681b      	ldr	r3, [r3, #0]
 8014016:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8014018:	68fb      	ldr	r3, [r7, #12]
 801401a:	f103 0018 	add.w	r0, r3, #24
 801401e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8014020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8014022:	1ad3      	subs	r3, r2, r3
 8014024:	623b      	str	r3, [r7, #32]
 8014026:	f107 0320 	add.w	r3, r7, #32
 801402a:	4619      	mov	r1, r3
 801402c:	f000 fcba 	bl	80149a4 <_ZSt3minIiERKT_S2_S2_>
 8014030:	4603      	mov	r3, r0
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8014036:	2300      	movs	r3, #0
 8014038:	627b      	str	r3, [r7, #36]	; 0x24
 801403a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801403c:	425b      	negs	r3, r3
 801403e:	62bb      	str	r3, [r7, #40]	; 0x28
 8014040:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8014044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8014048:	4611      	mov	r1, r2
 801404a:	4618      	mov	r0, r3
 801404c:	f7fb f8f5 	bl	800f23a <_ZSt3maxIiERKT_S2_S2_>
 8014050:	4603      	mov	r3, r0
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8014056:	68fb      	ldr	r3, [r7, #12]
 8014058:	f103 0014 	add.w	r0, r3, #20
 801405c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 801405e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014060:	1ad3      	subs	r3, r2, r3
 8014062:	62fb      	str	r3, [r7, #44]	; 0x2c
 8014064:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8014068:	4619      	mov	r1, r3
 801406a:	f000 fc9b 	bl	80149a4 <_ZSt3minIiERKT_S2_S2_>
 801406e:	4603      	mov	r3, r0
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	63bb      	str	r3, [r7, #56]	; 0x38
          float max = std::numeric_limits<float>::lowest();
 8014074:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8014078:	617b      	str	r3, [r7, #20]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 801407a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801407c:	677b      	str	r3, [r7, #116]	; 0x74
 801407e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014080:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8014082:	429a      	cmp	r2, r3
 8014084:	da2b      	bge.n	80140de <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1ce>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8014086:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014088:	673b      	str	r3, [r7, #112]	; 0x70
 801408a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 801408c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801408e:	429a      	cmp	r2, r3
 8014090:	da21      	bge.n	80140d6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x1c6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 8014092:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8014094:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014096:	4413      	add	r3, r2
 8014098:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 801409a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 801409c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801409e:	4413      	add	r3, r2
 80140a0:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 80140a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80140a4:	9300      	str	r3, [sp, #0]
 80140a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80140a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80140aa:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80140ae:	68b8      	ldr	r0, [r7, #8]
 80140b0:	f7fb fc08 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80140b4:	4603      	mov	r3, r0
 80140b6:	009b      	lsls	r3, r3, #2
 80140b8:	687a      	ldr	r2, [r7, #4]
 80140ba:	441a      	add	r2, r3
 80140bc:	f107 0314 	add.w	r3, r7, #20
 80140c0:	4611      	mov	r1, r2
 80140c2:	4618      	mov	r0, r3
 80140c4:	f7fa fc40 	bl	800e948 <_ZSt3maxIfERKT_S2_S2_>
 80140c8:	4603      	mov	r3, r0
              max = std::max(
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	617b      	str	r3, [r7, #20]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80140ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80140d0:	3301      	adds	r3, #1
 80140d2:	673b      	str	r3, [r7, #112]	; 0x70
 80140d4:	e7d9      	b.n	801408a <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x17a>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80140d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80140d8:	3301      	adds	r3, #1
 80140da:	677b      	str	r3, [r7, #116]	; 0x74
 80140dc:	e7cf      	b.n	801407e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x16e>
            }
          }
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 80140de:	ed97 8a05 	vldr	s16, [r7, #20]
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	edd3 8a09 	vldr	s17, [r3, #36]	; 0x24
                                           params.float_activation_max);
 80140e8:	68fb      	ldr	r3, [r7, #12]
 80140ea:	ed93 9a0a 	vldr	s18, [r3, #40]	; 0x28
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 80140ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80140f0:	9300      	str	r3, [sp, #0]
 80140f2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80140f4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80140f8:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80140fc:	6838      	ldr	r0, [r7, #0]
 80140fe:	f7fb fbe1 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014102:	4603      	mov	r3, r0
 8014104:	009b      	lsls	r3, r3, #2
 8014106:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 801410a:	18d4      	adds	r4, r2, r3
              ActivationFunctionWithMinMax(max, params.float_activation_min,
 801410c:	eeb0 1a49 	vmov.f32	s2, s18
 8014110:	eef0 0a68 	vmov.f32	s1, s17
 8014114:	eeb0 0a48 	vmov.f32	s0, s16
 8014118:	f7fb fc4f 	bl	800f9ba <_ZN6tflite28ActivationFunctionWithMinMaxEfff>
 801411c:	eef0 7a40 	vmov.f32	s15, s0
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8014120:	edc4 7a00 	vstr	s15, [r4]
        for (int channel = 0; channel < depth; ++channel) {
 8014124:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014126:	3301      	adds	r3, #1
 8014128:	67bb      	str	r3, [r7, #120]	; 0x78
 801412a:	e74d      	b.n	8013fc8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xb8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 801412c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801412e:	3301      	adds	r3, #1
 8014130:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014132:	e742      	b.n	8013fba <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xaa>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014134:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014138:	3301      	adds	r3, #1
 801413a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801413e:	e734      	b.n	8013faa <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x9a>
  for (int batch = 0; batch < batches; ++batch) {
 8014140:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014144:	3301      	adds	r3, #1
 8014146:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 801414a:	e725      	b.n	8013f98 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x88>
        }
      }
    }
  }
}
 801414c:	bf00      	nop
 801414e:	378c      	adds	r7, #140	; 0x8c
 8014150:	46bd      	mov	sp, r7
 8014152:	ecbd 8b04 	vpop	{d8-d9}
 8014156:	bd90      	pop	{r4, r7, pc}

08014158 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>:

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const uint8* input_data, const RuntimeShape& output_shape,
                    uint8* output_data) {
 8014158:	b580      	push	{r7, lr}
 801415a:	b0a4      	sub	sp, #144	; 0x90
 801415c:	af02      	add	r7, sp, #8
 801415e:	60f8      	str	r0, [r7, #12]
 8014160:	60b9      	str	r1, [r7, #8]
 8014162:	607a      	str	r2, [r7, #4]
 8014164:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 8014166:	68fb      	ldr	r3, [r7, #12]
 8014168:	69da      	ldr	r2, [r3, #28]
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	6a1b      	ldr	r3, [r3, #32]
 801416e:	429a      	cmp	r2, r3
 8014170:	dd01      	ble.n	8014176 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e>
 8014172:	f006 ff1d 	bl	801afb0 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min, 0);
 8014176:	68fb      	ldr	r3, [r7, #12]
 8014178:	69db      	ldr	r3, [r3, #28]
 801417a:	2b00      	cmp	r3, #0
 801417c:	da01      	bge.n	8014182 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x2a>
 801417e:	f006 ff17 	bl	801afb0 <abort>
  TFLITE_DCHECK_LE(params.quantized_activation_max, 255);
 8014182:	68fb      	ldr	r3, [r7, #12]
 8014184:	6a1b      	ldr	r3, [r3, #32]
 8014186:	2bff      	cmp	r3, #255	; 0xff
 8014188:	dd01      	ble.n	801418e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x36>
 801418a:	f006 ff11 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801418e:	68b8      	ldr	r0, [r7, #8]
 8014190:	f7fb f914 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014194:	4603      	mov	r3, r0
 8014196:	2b04      	cmp	r3, #4
 8014198:	d001      	beq.n	801419e <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x46>
 801419a:	f006 ff09 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801419e:	6838      	ldr	r0, [r7, #0]
 80141a0:	f7fb f90c 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80141a4:	4603      	mov	r3, r0
 80141a6:	2b04      	cmp	r3, #4
 80141a8:	d001      	beq.n	80141ae <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x56>
 80141aa:	f006 ff01 	bl	801afb0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 80141ae:	2300      	movs	r3, #0
 80141b0:	683a      	ldr	r2, [r7, #0]
 80141b2:	2100      	movs	r1, #0
 80141b4:	68b8      	ldr	r0, [r7, #8]
 80141b6:	f7fd f859 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80141ba:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 80141bc:	2303      	movs	r3, #3
 80141be:	683a      	ldr	r2, [r7, #0]
 80141c0:	2103      	movs	r1, #3
 80141c2:	68b8      	ldr	r0, [r7, #8]
 80141c4:	f7fd f852 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80141c8:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 80141ca:	2101      	movs	r1, #1
 80141cc:	68b8      	ldr	r0, [r7, #8]
 80141ce:	f7fb f901 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80141d2:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 80141d4:	2102      	movs	r1, #2
 80141d6:	68b8      	ldr	r0, [r7, #8]
 80141d8:	f7fb f8fc 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80141dc:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 80141de:	2101      	movs	r1, #1
 80141e0:	6838      	ldr	r0, [r7, #0]
 80141e2:	f7fb f8f7 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80141e6:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 80141e8:	2102      	movs	r1, #2
 80141ea:	6838      	ldr	r0, [r7, #0]
 80141ec:	f7fb f8f2 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 80141f0:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 80141f2:	68fb      	ldr	r3, [r7, #12]
 80141f4:	68db      	ldr	r3, [r3, #12]
 80141f6:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 80141f8:	68fb      	ldr	r3, [r7, #12]
 80141fa:	691b      	ldr	r3, [r3, #16]
 80141fc:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 80141fe:	2300      	movs	r3, #0
 8014200:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014204:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014208:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801420a:	429a      	cmp	r2, r3
 801420c:	f280 80e1 	bge.w	80143d2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x27a>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014210:	2300      	movs	r3, #0
 8014212:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8014216:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 801421a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801421c:	429a      	cmp	r2, r3
 801421e:	f280 80d2 	bge.w	80143c6 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x26e>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014222:	2300      	movs	r3, #0
 8014224:	67fb      	str	r3, [r7, #124]	; 0x7c
 8014226:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8014228:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801422a:	429a      	cmp	r2, r3
 801422c:	f280 80c5 	bge.w	80143ba <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x262>
        for (int channel = 0; channel < depth; ++channel) {
 8014230:	2300      	movs	r3, #0
 8014232:	67bb      	str	r3, [r7, #120]	; 0x78
 8014234:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8014236:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8014238:	429a      	cmp	r2, r3
 801423a:	f280 80ba 	bge.w	80143b2 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x25a>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 801423e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014240:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8014242:	fb02 f303 	mul.w	r3, r2, r3
 8014246:	68fa      	ldr	r2, [r7, #12]
 8014248:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 801424c:	1a9b      	subs	r3, r3, r2
 801424e:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 8014250:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014254:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8014256:	fb02 f303 	mul.w	r3, r2, r3
 801425a:	68fa      	ldr	r2, [r7, #12]
 801425c:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 8014260:	1a9b      	subs	r3, r3, r2
 8014262:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 8014264:	2300      	movs	r3, #0
 8014266:	617b      	str	r3, [r7, #20]
 8014268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801426a:	425b      	negs	r3, r3
 801426c:	61bb      	str	r3, [r7, #24]
 801426e:	f107 0218 	add.w	r2, r7, #24
 8014272:	f107 0314 	add.w	r3, r7, #20
 8014276:	4611      	mov	r1, r2
 8014278:	4618      	mov	r0, r3
 801427a:	f7fa ffde 	bl	800f23a <_ZSt3maxIiERKT_S2_S2_>
 801427e:	4603      	mov	r3, r0
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8014284:	68fb      	ldr	r3, [r7, #12]
 8014286:	f103 0018 	add.w	r0, r3, #24
 801428a:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801428c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801428e:	1ad3      	subs	r3, r2, r3
 8014290:	61fb      	str	r3, [r7, #28]
 8014292:	f107 031c 	add.w	r3, r7, #28
 8014296:	4619      	mov	r1, r3
 8014298:	f000 fb84 	bl	80149a4 <_ZSt3minIiERKT_S2_S2_>
 801429c:	4603      	mov	r3, r0
 801429e:	681b      	ldr	r3, [r3, #0]
 80142a0:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 80142a2:	2300      	movs	r3, #0
 80142a4:	623b      	str	r3, [r7, #32]
 80142a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142a8:	425b      	negs	r3, r3
 80142aa:	627b      	str	r3, [r7, #36]	; 0x24
 80142ac:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80142b0:	f107 0320 	add.w	r3, r7, #32
 80142b4:	4611      	mov	r1, r2
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7fa ffbf 	bl	800f23a <_ZSt3maxIiERKT_S2_S2_>
 80142bc:	4603      	mov	r3, r0
 80142be:	681b      	ldr	r3, [r3, #0]
 80142c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 80142c2:	68fb      	ldr	r3, [r7, #12]
 80142c4:	f103 0014 	add.w	r0, r3, #20
 80142c8:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 80142ca:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80142cc:	1ad3      	subs	r3, r2, r3
 80142ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80142d0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80142d4:	4619      	mov	r1, r3
 80142d6:	f000 fb65 	bl	80149a4 <_ZSt3minIiERKT_S2_S2_>
 80142da:	4603      	mov	r3, r0
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	63bb      	str	r3, [r7, #56]	; 0x38
          uint8 max = 0;
 80142e0:	2300      	movs	r3, #0
 80142e2:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80142e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80142e6:	677b      	str	r3, [r7, #116]	; 0x74
 80142e8:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80142ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80142ec:	429a      	cmp	r2, r3
 80142ee:	da2b      	bge.n	8014348 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1f0>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80142f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80142f2:	673b      	str	r3, [r7, #112]	; 0x70
 80142f4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80142f6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80142f8:	429a      	cmp	r2, r3
 80142fa:	da21      	bge.n	8014340 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x1e8>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 80142fc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80142fe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8014300:	4413      	add	r3, r2
 8014302:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8014304:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014306:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014308:	4413      	add	r3, r2
 801430a:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 801430c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801430e:	9300      	str	r3, [sp, #0]
 8014310:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014312:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014314:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8014318:	68b8      	ldr	r0, [r7, #8]
 801431a:	f7fb fad3 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801431e:	4603      	mov	r3, r0
 8014320:	461a      	mov	r2, r3
 8014322:	687b      	ldr	r3, [r7, #4]
 8014324:	441a      	add	r2, r3
 8014326:	f107 0313 	add.w	r3, r7, #19
 801432a:	4611      	mov	r1, r2
 801432c:	4618      	mov	r0, r3
 801432e:	f000 fb4d 	bl	80149cc <_ZSt3maxIhERKT_S2_S2_>
 8014332:	4603      	mov	r3, r0
              max = std::max(
 8014334:	781b      	ldrb	r3, [r3, #0]
 8014336:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 8014338:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801433a:	3301      	adds	r3, #1
 801433c:	673b      	str	r3, [r7, #112]	; 0x70
 801433e:	e7d9      	b.n	80142f4 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x19c>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8014340:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014342:	3301      	adds	r3, #1
 8014344:	677b      	str	r3, [r7, #116]	; 0x74
 8014346:	e7cf      	b.n	80142e8 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0x190>
            }
          }
          max = std::max<uint8>(max, params.quantized_activation_min);
 8014348:	68fb      	ldr	r3, [r7, #12]
 801434a:	69db      	ldr	r3, [r3, #28]
 801434c:	b2db      	uxtb	r3, r3
 801434e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8014352:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 8014356:	f107 0313 	add.w	r3, r7, #19
 801435a:	4611      	mov	r1, r2
 801435c:	4618      	mov	r0, r3
 801435e:	f000 fb35 	bl	80149cc <_ZSt3maxIhERKT_S2_S2_>
 8014362:	4603      	mov	r3, r0
 8014364:	781b      	ldrb	r3, [r3, #0]
 8014366:	74fb      	strb	r3, [r7, #19]
          max = std::min<uint8>(max, params.quantized_activation_max);
 8014368:	68fb      	ldr	r3, [r7, #12]
 801436a:	6a1b      	ldr	r3, [r3, #32]
 801436c:	b2db      	uxtb	r3, r3
 801436e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014372:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8014376:	f107 0313 	add.w	r3, r7, #19
 801437a:	4611      	mov	r1, r2
 801437c:	4618      	mov	r0, r3
 801437e:	f000 fb39 	bl	80149f4 <_ZSt3minIhERKT_S2_S2_>
 8014382:	4603      	mov	r3, r0
 8014384:	781b      	ldrb	r3, [r3, #0]
 8014386:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 8014388:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801438a:	9300      	str	r3, [sp, #0]
 801438c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801438e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014392:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 8014396:	6838      	ldr	r0, [r7, #0]
 8014398:	f7fb fa94 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 801439c:	4603      	mov	r3, r0
 801439e:	461a      	mov	r2, r3
 80143a0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80143a4:	4413      	add	r3, r2
 80143a6:	7cfa      	ldrb	r2, [r7, #19]
 80143a8:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 80143aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80143ac:	3301      	adds	r3, #1
 80143ae:	67bb      	str	r3, [r7, #120]	; 0x78
 80143b0:	e740      	b.n	8014234 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xdc>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80143b2:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80143b4:	3301      	adds	r3, #1
 80143b6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80143b8:	e735      	b.n	8014226 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xce>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 80143ba:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80143be:	3301      	adds	r3, #1
 80143c0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80143c4:	e727      	b.n	8014216 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xbe>
  for (int batch = 0; batch < batches; ++batch) {
 80143c6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80143ca:	3301      	adds	r3, #1
 80143cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80143d0:	e718      	b.n	8014204 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph+0xac>
              static_cast<uint8>(max);
        }
      }
    }
  }
}
 80143d2:	bf00      	nop
 80143d4:	3788      	adds	r7, #136	; 0x88
 80143d6:	46bd      	mov	sp, r7
 80143d8:	bd80      	pop	{r7, pc}

080143da <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>:
  }
}

inline void MaxPool(const PoolParams& params, const RuntimeShape& input_shape,
                    const int8* input_data, const RuntimeShape& output_shape,
                    int8* output_data) {
 80143da:	b590      	push	{r4, r7, lr}
 80143dc:	b0a5      	sub	sp, #148	; 0x94
 80143de:	af02      	add	r7, sp, #8
 80143e0:	60f8      	str	r0, [r7, #12]
 80143e2:	60b9      	str	r1, [r7, #8]
 80143e4:	607a      	str	r2, [r7, #4]
 80143e6:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK_LE(params.quantized_activation_min,
 80143e8:	68fb      	ldr	r3, [r7, #12]
 80143ea:	69da      	ldr	r2, [r3, #28]
 80143ec:	68fb      	ldr	r3, [r7, #12]
 80143ee:	6a1b      	ldr	r3, [r3, #32]
 80143f0:	429a      	cmp	r2, r3
 80143f2:	dd01      	ble.n	80143f8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1e>
 80143f4:	f006 fddc 	bl	801afb0 <abort>
                   params.quantized_activation_max);
  TFLITE_DCHECK_GE(params.quantized_activation_min,
 80143f8:	68fb      	ldr	r3, [r7, #12]
 80143fa:	69dc      	ldr	r4, [r3, #28]
 80143fc:	f7fa fae1 	bl	800e9c2 <_ZNSt14numeric_limitsIaE3minEv>
 8014400:	4603      	mov	r3, r0
 8014402:	429c      	cmp	r4, r3
 8014404:	da01      	bge.n	801440a <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x30>
 8014406:	f006 fdd3 	bl	801afb0 <abort>
                   std::numeric_limits<int8_t>::min());
  TFLITE_DCHECK_LE(params.quantized_activation_max,
 801440a:	68fb      	ldr	r3, [r7, #12]
 801440c:	6a1c      	ldr	r4, [r3, #32]
 801440e:	f7fa fae1 	bl	800e9d4 <_ZNSt14numeric_limitsIaE3maxEv>
 8014412:	4603      	mov	r3, r0
 8014414:	429c      	cmp	r4, r3
 8014416:	dd01      	ble.n	801441c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x42>
 8014418:	f006 fdca 	bl	801afb0 <abort>
                   std::numeric_limits<int8_t>::max());
  TFLITE_DCHECK_EQ(input_shape.DimensionsCount(), 4);
 801441c:	68b8      	ldr	r0, [r7, #8]
 801441e:	f7fa ffcd 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014422:	4603      	mov	r3, r0
 8014424:	2b04      	cmp	r3, #4
 8014426:	d001      	beq.n	801442c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x52>
 8014428:	f006 fdc2 	bl	801afb0 <abort>
  TFLITE_DCHECK_EQ(output_shape.DimensionsCount(), 4);
 801442c:	6838      	ldr	r0, [r7, #0]
 801442e:	f7fa ffc5 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014432:	4603      	mov	r3, r0
 8014434:	2b04      	cmp	r3, #4
 8014436:	d001      	beq.n	801443c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x62>
 8014438:	f006 fdba 	bl	801afb0 <abort>
  const int batches = MatchingDim(input_shape, 0, output_shape, 0);
 801443c:	2300      	movs	r3, #0
 801443e:	683a      	ldr	r2, [r7, #0]
 8014440:	2100      	movs	r1, #0
 8014442:	68b8      	ldr	r0, [r7, #8]
 8014444:	f7fc ff12 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014448:	66f8      	str	r0, [r7, #108]	; 0x6c
  const int depth = MatchingDim(input_shape, 3, output_shape, 3);
 801444a:	2303      	movs	r3, #3
 801444c:	683a      	ldr	r2, [r7, #0]
 801444e:	2103      	movs	r1, #3
 8014450:	68b8      	ldr	r0, [r7, #8]
 8014452:	f7fc ff0b 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014456:	66b8      	str	r0, [r7, #104]	; 0x68
  const int input_height = input_shape.Dims(1);
 8014458:	2101      	movs	r1, #1
 801445a:	68b8      	ldr	r0, [r7, #8]
 801445c:	f7fa ffba 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014460:	6678      	str	r0, [r7, #100]	; 0x64
  const int input_width = input_shape.Dims(2);
 8014462:	2102      	movs	r1, #2
 8014464:	68b8      	ldr	r0, [r7, #8]
 8014466:	f7fa ffb5 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801446a:	6638      	str	r0, [r7, #96]	; 0x60
  const int output_height = output_shape.Dims(1);
 801446c:	2101      	movs	r1, #1
 801446e:	6838      	ldr	r0, [r7, #0]
 8014470:	f7fa ffb0 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 8014474:	65f8      	str	r0, [r7, #92]	; 0x5c
  const int output_width = output_shape.Dims(2);
 8014476:	2102      	movs	r1, #2
 8014478:	6838      	ldr	r0, [r7, #0]
 801447a:	f7fa ffab 	bl	800f3d4 <_ZNK6tflite12RuntimeShape4DimsEi>
 801447e:	65b8      	str	r0, [r7, #88]	; 0x58
  const int stride_height = params.stride_height;
 8014480:	68fb      	ldr	r3, [r7, #12]
 8014482:	68db      	ldr	r3, [r3, #12]
 8014484:	657b      	str	r3, [r7, #84]	; 0x54
  const int stride_width = params.stride_width;
 8014486:	68fb      	ldr	r3, [r7, #12]
 8014488:	691b      	ldr	r3, [r3, #16]
 801448a:	653b      	str	r3, [r7, #80]	; 0x50
  for (int batch = 0; batch < batches; ++batch) {
 801448c:	2300      	movs	r3, #0
 801448e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014492:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8014496:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8014498:	429a      	cmp	r2, r3
 801449a:	f280 80e5 	bge.w	8014668 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x28e>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 801449e:	2300      	movs	r3, #0
 80144a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80144a4:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80144a8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80144aa:	429a      	cmp	r2, r3
 80144ac:	f280 80d6 	bge.w	801465c <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x282>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 80144b0:	2300      	movs	r3, #0
 80144b2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80144b4:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80144b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80144b8:	429a      	cmp	r2, r3
 80144ba:	f280 80c9 	bge.w	8014650 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x276>
        for (int channel = 0; channel < depth; ++channel) {
 80144be:	2300      	movs	r3, #0
 80144c0:	67bb      	str	r3, [r7, #120]	; 0x78
 80144c2:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80144c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80144c6:	429a      	cmp	r2, r3
 80144c8:	f280 80be 	bge.w	8014648 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x26e>
          const int in_x_origin =
              (out_x * stride_width) - params.padding_values.width;
 80144cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80144ce:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80144d0:	fb02 f303 	mul.w	r3, r2, r3
 80144d4:	68fa      	ldr	r2, [r7, #12]
 80144d6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
          const int in_x_origin =
 80144da:	1a9b      	subs	r3, r3, r2
 80144dc:	64fb      	str	r3, [r7, #76]	; 0x4c
          const int in_y_origin =
              (out_y * stride_height) - params.padding_values.height;
 80144de:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80144e2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80144e4:	fb02 f303 	mul.w	r3, r2, r3
 80144e8:	68fa      	ldr	r2, [r7, #12]
 80144ea:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
          const int in_y_origin =
 80144ee:	1a9b      	subs	r3, r3, r2
 80144f0:	64bb      	str	r3, [r7, #72]	; 0x48
          // Compute the boundaries of the filter region clamped so as to
          // ensure that the filter window fits in the input array.
          const int filter_x_start = std::max(0, -in_x_origin);
 80144f2:	2300      	movs	r3, #0
 80144f4:	617b      	str	r3, [r7, #20]
 80144f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80144f8:	425b      	negs	r3, r3
 80144fa:	61bb      	str	r3, [r7, #24]
 80144fc:	f107 0218 	add.w	r2, r7, #24
 8014500:	f107 0314 	add.w	r3, r7, #20
 8014504:	4611      	mov	r1, r2
 8014506:	4618      	mov	r0, r3
 8014508:	f7fa fe97 	bl	800f23a <_ZSt3maxIiERKT_S2_S2_>
 801450c:	4603      	mov	r3, r0
 801450e:	681b      	ldr	r3, [r3, #0]
 8014510:	647b      	str	r3, [r7, #68]	; 0x44
          const int filter_x_end =
              std::min(params.filter_width, input_width - in_x_origin);
 8014512:	68fb      	ldr	r3, [r7, #12]
 8014514:	f103 0018 	add.w	r0, r3, #24
 8014518:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801451a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 801451c:	1ad3      	subs	r3, r2, r3
 801451e:	61fb      	str	r3, [r7, #28]
 8014520:	f107 031c 	add.w	r3, r7, #28
 8014524:	4619      	mov	r1, r3
 8014526:	f000 fa3d 	bl	80149a4 <_ZSt3minIiERKT_S2_S2_>
 801452a:	4603      	mov	r3, r0
 801452c:	681b      	ldr	r3, [r3, #0]
 801452e:	643b      	str	r3, [r7, #64]	; 0x40
          const int filter_y_start = std::max(0, -in_y_origin);
 8014530:	2300      	movs	r3, #0
 8014532:	623b      	str	r3, [r7, #32]
 8014534:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8014536:	425b      	negs	r3, r3
 8014538:	627b      	str	r3, [r7, #36]	; 0x24
 801453a:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801453e:	f107 0320 	add.w	r3, r7, #32
 8014542:	4611      	mov	r1, r2
 8014544:	4618      	mov	r0, r3
 8014546:	f7fa fe78 	bl	800f23a <_ZSt3maxIiERKT_S2_S2_>
 801454a:	4603      	mov	r3, r0
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	63fb      	str	r3, [r7, #60]	; 0x3c
          const int filter_y_end =
              std::min(params.filter_height, input_height - in_y_origin);
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	f103 0014 	add.w	r0, r3, #20
 8014556:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8014558:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801455a:	1ad3      	subs	r3, r2, r3
 801455c:	62bb      	str	r3, [r7, #40]	; 0x28
 801455e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8014562:	4619      	mov	r1, r3
 8014564:	f000 fa1e 	bl	80149a4 <_ZSt3minIiERKT_S2_S2_>
 8014568:	4603      	mov	r3, r0
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	63bb      	str	r3, [r7, #56]	; 0x38
          int8_t max = std::numeric_limits<int8_t>::lowest();
 801456e:	2380      	movs	r3, #128	; 0x80
 8014570:	74fb      	strb	r3, [r7, #19]
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 8014572:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8014574:	677b      	str	r3, [r7, #116]	; 0x74
 8014576:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8014578:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801457a:	429a      	cmp	r2, r3
 801457c:	da2c      	bge.n	80145d8 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1fe>
               ++filter_y) {
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 801457e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014580:	673b      	str	r3, [r7, #112]	; 0x70
 8014582:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8014584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8014586:	429a      	cmp	r2, r3
 8014588:	da22      	bge.n	80145d0 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1f6>
                 ++filter_x) {
              const int in_x = in_x_origin + filter_x;
 801458a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 801458c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 801458e:	4413      	add	r3, r2
 8014590:	637b      	str	r3, [r7, #52]	; 0x34
              const int in_y = in_y_origin + filter_y;
 8014592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014594:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8014596:	4413      	add	r3, r2
 8014598:	633b      	str	r3, [r7, #48]	; 0x30
              max = std::max(
                  max,
                  input_data[Offset(input_shape, batch, in_y, in_x, channel)]);
 801459a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801459c:	9300      	str	r3, [sp, #0]
 801459e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80145a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80145a2:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 80145a6:	68b8      	ldr	r0, [r7, #8]
 80145a8:	f7fb f98c 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 80145ac:	4603      	mov	r3, r0
 80145ae:	461a      	mov	r2, r3
 80145b0:	687b      	ldr	r3, [r7, #4]
 80145b2:	441a      	add	r2, r3
 80145b4:	f107 0313 	add.w	r3, r7, #19
 80145b8:	4611      	mov	r1, r2
 80145ba:	4618      	mov	r0, r3
 80145bc:	f000 fa2e 	bl	8014a1c <_ZSt3maxIaERKT_S2_S2_>
 80145c0:	4603      	mov	r3, r0
              max = std::max(
 80145c2:	f993 3000 	ldrsb.w	r3, [r3]
 80145c6:	74fb      	strb	r3, [r7, #19]
            for (int filter_x = filter_x_start; filter_x < filter_x_end;
 80145c8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80145ca:	3301      	adds	r3, #1
 80145cc:	673b      	str	r3, [r7, #112]	; 0x70
 80145ce:	e7d8      	b.n	8014582 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x1a8>
          for (int filter_y = filter_y_start; filter_y < filter_y_end;
 80145d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80145d2:	3301      	adds	r3, #1
 80145d4:	677b      	str	r3, [r7, #116]	; 0x74
 80145d6:	e7ce      	b.n	8014576 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0x19c>
            }
          }
          max = std::max<int8_t>(max, params.quantized_activation_min);
 80145d8:	68fb      	ldr	r3, [r7, #12]
 80145da:	69db      	ldr	r3, [r3, #28]
 80145dc:	b25b      	sxtb	r3, r3
 80145de:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 80145e2:	f107 022e 	add.w	r2, r7, #46	; 0x2e
 80145e6:	f107 0313 	add.w	r3, r7, #19
 80145ea:	4611      	mov	r1, r2
 80145ec:	4618      	mov	r0, r3
 80145ee:	f000 fa15 	bl	8014a1c <_ZSt3maxIaERKT_S2_S2_>
 80145f2:	4603      	mov	r3, r0
 80145f4:	f993 3000 	ldrsb.w	r3, [r3]
 80145f8:	74fb      	strb	r3, [r7, #19]
          max = std::min<int8_t>(max, params.quantized_activation_max);
 80145fa:	68fb      	ldr	r3, [r7, #12]
 80145fc:	6a1b      	ldr	r3, [r3, #32]
 80145fe:	b25b      	sxtb	r3, r3
 8014600:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8014604:	f107 022f 	add.w	r2, r7, #47	; 0x2f
 8014608:	f107 0313 	add.w	r3, r7, #19
 801460c:	4611      	mov	r1, r2
 801460e:	4618      	mov	r0, r3
 8014610:	f000 fa1a 	bl	8014a48 <_ZSt3minIaERKT_S2_S2_>
 8014614:	4603      	mov	r3, r0
 8014616:	f993 3000 	ldrsb.w	r3, [r3]
 801461a:	74fb      	strb	r3, [r7, #19]
          output_data[Offset(output_shape, batch, out_y, out_x, channel)] =
 801461c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 801461e:	9300      	str	r3, [sp, #0]
 8014620:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8014622:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8014626:	f8d7 1084 	ldr.w	r1, [r7, #132]	; 0x84
 801462a:	6838      	ldr	r0, [r7, #0]
 801462c:	f7fb f94a 	bl	800f8c4 <_ZN6tflite6OffsetERKNS_12RuntimeShapeEiiii>
 8014630:	4603      	mov	r3, r0
 8014632:	461a      	mov	r2, r3
 8014634:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8014638:	4413      	add	r3, r2
 801463a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 801463e:	701a      	strb	r2, [r3, #0]
        for (int channel = 0; channel < depth; ++channel) {
 8014640:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8014642:	3301      	adds	r3, #1
 8014644:	67bb      	str	r3, [r7, #120]	; 0x78
 8014646:	e73c      	b.n	80144c2 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xe8>
      for (int out_x = 0; out_x < output_width; ++out_x) {
 8014648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 801464a:	3301      	adds	r3, #1
 801464c:	67fb      	str	r3, [r7, #124]	; 0x7c
 801464e:	e731      	b.n	80144b4 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xda>
    for (int out_y = 0; out_y < output_height; ++out_y) {
 8014650:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8014654:	3301      	adds	r3, #1
 8014656:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 801465a:	e723      	b.n	80144a4 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xca>
  for (int batch = 0; batch < batches; ++batch) {
 801465c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8014660:	3301      	adds	r3, #1
 8014662:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8014666:	e714      	b.n	8014492 <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa+0xb8>
              static_cast<int8_t>(max);
        }
      }
    }
  }
}
 8014668:	bf00      	nop
 801466a:	378c      	adds	r7, #140	; 0x8c
 801466c:	46bd      	mov	sp, r7
 801466e:	bd90      	pop	{r4, r7, pc}

08014670 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>:
};

TfLiteStatus CalculateOpData(const TfLiteContext* context,
                             const TfLitePoolParams* params,
                             const TfLiteTensor* input,
                             const TfLiteTensor* output, OpData* data) {
 8014670:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014672:	b097      	sub	sp, #92	; 0x5c
 8014674:	af08      	add	r7, sp, #32
 8014676:	6278      	str	r0, [r7, #36]	; 0x24
 8014678:	6239      	str	r1, [r7, #32]
 801467a:	61fa      	str	r2, [r7, #28]
 801467c:	61bb      	str	r3, [r7, #24]
  // input: batch, height, width, channel
  int height = SizeOfDimension(input, 1);
 801467e:	2101      	movs	r1, #1
 8014680:	69f8      	ldr	r0, [r7, #28]
 8014682:	f7fa f9df 	bl	800ea44 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8014686:	6378      	str	r0, [r7, #52]	; 0x34
  int width = SizeOfDimension(input, 2);
 8014688:	2102      	movs	r1, #2
 801468a:	69f8      	ldr	r0, [r7, #28]
 801468c:	f7fa f9da 	bl	800ea44 <_ZN6tflite15SizeOfDimensionEPK12TfLiteTensori>
 8014690:	6338      	str	r0, [r7, #48]	; 0x30

  int out_height, out_width;

  data->padding = ComputePaddingHeightWidth(
      params->stride_height, params->stride_width,
 8014692:	6a3b      	ldr	r3, [r7, #32]
 8014694:	689d      	ldr	r5, [r3, #8]
 8014696:	6a3b      	ldr	r3, [r7, #32]
 8014698:	685e      	ldr	r6, [r3, #4]
      /*dilation_rate_height=*/1,
      /*dilation_rate_width=*/1, height, width, params->filter_height,
 801469a:	6a3b      	ldr	r3, [r7, #32]
 801469c:	691b      	ldr	r3, [r3, #16]
      params->filter_width, params->padding, &out_height, &out_width);
 801469e:	6a3a      	ldr	r2, [r7, #32]
 80146a0:	68d2      	ldr	r2, [r2, #12]
 80146a2:	6a39      	ldr	r1, [r7, #32]
 80146a4:	7809      	ldrb	r1, [r1, #0]
 80146a6:	6d38      	ldr	r0, [r7, #80]	; 0x50
 80146a8:	6078      	str	r0, [r7, #4]
 80146aa:	f107 0408 	add.w	r4, r7, #8
 80146ae:	f107 0028 	add.w	r0, r7, #40	; 0x28
 80146b2:	9007      	str	r0, [sp, #28]
 80146b4:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 80146b8:	9006      	str	r0, [sp, #24]
 80146ba:	9105      	str	r1, [sp, #20]
 80146bc:	9204      	str	r2, [sp, #16]
 80146be:	9303      	str	r3, [sp, #12]
 80146c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80146c2:	9302      	str	r3, [sp, #8]
 80146c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80146c6:	9301      	str	r3, [sp, #4]
 80146c8:	2301      	movs	r3, #1
 80146ca:	9300      	str	r3, [sp, #0]
 80146cc:	2301      	movs	r3, #1
 80146ce:	4632      	mov	r2, r6
 80146d0:	4629      	mov	r1, r5
 80146d2:	4620      	mov	r0, r4
 80146d4:	f7fd fb5f 	bl	8011d96 <_ZN6tflite25ComputePaddingHeightWidthEiiiiiiii13TfLitePaddingPiS1_>
 80146d8:	687c      	ldr	r4, [r7, #4]
 80146da:	f107 0308 	add.w	r3, r7, #8
 80146de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80146e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  return kTfLiteOk;
 80146e4:	2300      	movs	r3, #0
}
 80146e6:	4618      	mov	r0, r3
 80146e8:	373c      	adds	r7, #60	; 0x3c
 80146ea:	46bd      	mov	sp, r7
 80146ec:	bdf0      	pop	{r4, r5, r6, r7, pc}

080146ee <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:
  }
}

void MaxEvalFloat(TfLiteContext* context, TfLiteNode* node,
                  TfLitePoolParams* params, OpData* data,
                  const TfLiteTensor* input, TfLiteTensor* output) {
 80146ee:	b590      	push	{r4, r7, lr}
 80146f0:	b0a1      	sub	sp, #132	; 0x84
 80146f2:	af02      	add	r7, sp, #8
 80146f4:	60f8      	str	r0, [r7, #12]
 80146f6:	60b9      	str	r1, [r7, #8]
 80146f8:	607a      	str	r2, [r7, #4]
 80146fa:	603b      	str	r3, [r7, #0]
  float activation_min, activation_max;
  CalculateActivationRange(params->activation, &activation_min,
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	7d1b      	ldrb	r3, [r3, #20]
 8014700:	f107 0240 	add.w	r2, r7, #64	; 0x40
 8014704:	f107 0144 	add.w	r1, r7, #68	; 0x44
 8014708:	4618      	mov	r0, r3
 801470a:	f7fc fc75 	bl	8010ff8 <_ZN6tflite24CalculateActivationRangeIfEEv21TfLiteFusedActivationPT_S3_>
                           &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	689b      	ldr	r3, [r3, #8]
 8014712:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	685b      	ldr	r3, [r3, #4]
 8014718:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 801471a:	687b      	ldr	r3, [r7, #4]
 801471c:	691b      	ldr	r3, [r3, #16]
 801471e:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	68db      	ldr	r3, [r3, #12]
 8014724:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 8014726:	683b      	ldr	r3, [r7, #0]
 8014728:	685b      	ldr	r3, [r3, #4]
 801472a:	b21b      	sxth	r3, r3
 801472c:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 801472e:	683b      	ldr	r3, [r7, #0]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	b21b      	sxth	r3, r3
 8014734:	82fb      	strh	r3, [r7, #22]
  op_params.float_activation_min = activation_min;
 8014736:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014738:	63bb      	str	r3, [r7, #56]	; 0x38
  op_params.float_activation_max = activation_max;
 801473a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801473c:	63fb      	str	r3, [r7, #60]	; 0x3c
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 801473e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014742:	f8d7 1088 	ldr.w	r1, [r7, #136]	; 0x88
 8014746:	4618      	mov	r0, r3
 8014748:	f7fa fef7 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
 801474c:	f8d7 0088 	ldr.w	r0, [r7, #136]	; 0x88
 8014750:	f7fa ff11 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8014754:	4604      	mov	r4, r0
                         GetTensorData<float>(input), GetTensorShape(output),
 8014756:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801475a:	f8d7 108c 	ldr.w	r1, [r7, #140]	; 0x8c
 801475e:	4618      	mov	r0, r3
 8014760:	f7fa feeb 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 8014764:	f8d7 008c 	ldr.w	r0, [r7, #140]	; 0x8c
 8014768:	f7fa ff16 	bl	800f598 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801476c:	4602      	mov	r2, r0
 801476e:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014772:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8014776:	f107 0014 	add.w	r0, r7, #20
 801477a:	9200      	str	r2, [sp, #0]
 801477c:	4622      	mov	r2, r4
 801477e:	f7ff fbc7 	bl	8013f10 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKfS6_Pf>
                         GetTensorData<float>(input), GetTensorShape(output),
 8014782:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014786:	4618      	mov	r0, r3
 8014788:	f7fa fe02 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  reference_ops::MaxPool(op_params, GetTensorShape(input),
 801478c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8014790:	4618      	mov	r0, r3
 8014792:	f7fa fdfd 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
                         GetTensorData<float>(output));
}
 8014796:	bf00      	nop
 8014798:	377c      	adds	r7, #124	; 0x7c
 801479a:	46bd      	mov	sp, r7
 801479c:	bd90      	pop	{r4, r7, pc}

0801479e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>:

void MaxEvalQuantized(TfLiteContext* context, TfLiteNode* node,
                      TfLitePoolParams* params, OpData* data,
                      const TfLiteTensor* input, TfLiteTensor* output) {
 801479e:	b590      	push	{r4, r7, lr}
 80147a0:	b0ad      	sub	sp, #180	; 0xb4
 80147a2:	af02      	add	r7, sp, #8
 80147a4:	60f8      	str	r0, [r7, #12]
 80147a6:	60b9      	str	r1, [r7, #8]
 80147a8:	607a      	str	r2, [r7, #4]
 80147aa:	603b      	str	r3, [r7, #0]
  TFLITE_DCHECK(input->type == kTfLiteUInt8 || input->type == kTfLiteInt8);
 80147ac:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80147b0:	781b      	ldrb	r3, [r3, #0]
 80147b2:	2b03      	cmp	r3, #3
 80147b4:	d006      	beq.n	80147c4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 80147b6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80147ba:	781b      	ldrb	r3, [r3, #0]
 80147bc:	2b09      	cmp	r3, #9
 80147be:	d001      	beq.n	80147c4 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x26>
 80147c0:	f006 fbf6 	bl	801afb0 <abort>

  int32_t activation_min, activation_max;
  (void)CalculateActivationRangeQuantized(context, params->activation, output,
 80147c4:	687b      	ldr	r3, [r7, #4]
 80147c6:	7d19      	ldrb	r1, [r3, #20]
 80147c8:	f107 0244 	add.w	r2, r7, #68	; 0x44
 80147cc:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80147d0:	9300      	str	r3, [sp, #0]
 80147d2:	4613      	mov	r3, r2
 80147d4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	; 0xbc
 80147d8:	68f8      	ldr	r0, [r7, #12]
 80147da:	f7fa fcc3 	bl	800f164 <_ZN6tflite33CalculateActivationRangeQuantizedEP13TfLiteContext21TfLiteFusedActivationP12TfLiteTensorPlS5_>
                                          &activation_min, &activation_max);

  tflite::PoolParams op_params;
  op_params.stride_height = params->stride_height;
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	689b      	ldr	r3, [r3, #8]
 80147e2:	623b      	str	r3, [r7, #32]
  op_params.stride_width = params->stride_width;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	685b      	ldr	r3, [r3, #4]
 80147e8:	627b      	str	r3, [r7, #36]	; 0x24
  op_params.filter_height = params->filter_height;
 80147ea:	687b      	ldr	r3, [r7, #4]
 80147ec:	691b      	ldr	r3, [r3, #16]
 80147ee:	62bb      	str	r3, [r7, #40]	; 0x28
  op_params.filter_width = params->filter_width;
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	68db      	ldr	r3, [r3, #12]
 80147f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  op_params.padding_values.height = data->padding.height;
 80147f6:	683b      	ldr	r3, [r7, #0]
 80147f8:	685b      	ldr	r3, [r3, #4]
 80147fa:	b21b      	sxth	r3, r3
 80147fc:	833b      	strh	r3, [r7, #24]
  op_params.padding_values.width = data->padding.width;
 80147fe:	683b      	ldr	r3, [r7, #0]
 8014800:	681b      	ldr	r3, [r3, #0]
 8014802:	b21b      	sxth	r3, r3
 8014804:	82fb      	strh	r3, [r7, #22]
  op_params.quantized_activation_min = activation_min;
 8014806:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8014808:	633b      	str	r3, [r7, #48]	; 0x30
  op_params.quantized_activation_max = activation_max;
 801480a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 801480c:	637b      	str	r3, [r7, #52]	; 0x34

  if (input->type == kTfLiteUInt8) {
 801480e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8014812:	781b      	ldrb	r3, [r3, #0]
 8014814:	2b03      	cmp	r3, #3
 8014816:	d12c      	bne.n	8014872 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0xd4>
    reference_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8014818:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801481c:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 8014820:	4618      	mov	r0, r3
 8014822:	f7fa fe8a 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 8014826:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 801482a:	f7fa fd6e 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 801482e:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 8014830:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014834:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8014838:	4618      	mov	r0, r3
 801483a:	f7fa fe7e 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_ops::MaxPool(
 801483e:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 8014842:	f7fa fd73 	bl	800f32c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 8014846:	4602      	mov	r2, r0
 8014848:	f107 0360 	add.w	r3, r7, #96	; 0x60
 801484c:	f107 0148 	add.w	r1, r7, #72	; 0x48
 8014850:	f107 0014 	add.w	r0, r7, #20
 8014854:	9200      	str	r2, [sp, #0]
 8014856:	4622      	mov	r2, r4
 8014858:	f7ff fc7e 	bl	8014158 <_ZN6tflite13reference_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKhS6_Ph>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 801485c:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8014860:	4618      	mov	r0, r3
 8014862:	f7fa fd95 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<uint8_t>(input),
 8014866:	f107 0348 	add.w	r3, r7, #72	; 0x48
 801486a:	4618      	mov	r0, r3
 801486c:	f7fa fd90 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
  } else {
    reference_integer_ops::MaxPool(
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
        GetTensorShape(output), GetTensorData<int8_t>(output));
  }
}
 8014870:	e02b      	b.n	80148ca <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_+0x12c>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 8014872:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8014876:	f8d7 10b8 	ldr.w	r1, [r7, #184]	; 0xb8
 801487a:	4618      	mov	r0, r3
 801487c:	f7fa fe5d 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 8014880:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8014884:	f7fa fe99 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8014888:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<int8_t>(output));
 801488a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 801488e:	f8d7 10bc 	ldr.w	r1, [r7, #188]	; 0xbc
 8014892:	4618      	mov	r0, r3
 8014894:	f7fa fe51 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    reference_integer_ops::MaxPool(
 8014898:	f8d7 00bc 	ldr.w	r0, [r7, #188]	; 0xbc
 801489c:	f7fa fe9e 	bl	800f5dc <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 80148a0:	4602      	mov	r2, r0
 80148a2:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80148a6:	f107 0178 	add.w	r1, r7, #120	; 0x78
 80148aa:	f107 0014 	add.w	r0, r7, #20
 80148ae:	9200      	str	r2, [sp, #0]
 80148b0:	4622      	mov	r2, r4
 80148b2:	f7ff fd92 	bl	80143da <_ZN6tflite21reference_integer_ops7MaxPoolERKNS_10PoolParamsERKNS_12RuntimeShapeEPKaS6_Pa>
        GetTensorShape(output), GetTensorData<int8_t>(output));
 80148b6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 80148ba:	4618      	mov	r0, r3
 80148bc:	f7fa fd68 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
        op_params, GetTensorShape(input), GetTensorData<int8_t>(input),
 80148c0:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80148c4:	4618      	mov	r0, r3
 80148c6:	f7fa fd63 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
}
 80148ca:	bf00      	nop
 80148cc:	37ac      	adds	r7, #172	; 0xac
 80148ce:	46bd      	mov	sp, r7
 80148d0:	bd90      	pop	{r4, r7, pc}
	...

080148d4 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode>:
      return kTfLiteError;
  }
  return kTfLiteOk;
}

TfLiteStatus MaxEval(TfLiteContext* context, TfLiteNode* node) {
 80148d4:	b590      	push	{r4, r7, lr}
 80148d6:	b08d      	sub	sp, #52	; 0x34
 80148d8:	af02      	add	r7, sp, #8
 80148da:	6078      	str	r0, [r7, #4]
 80148dc:	6039      	str	r1, [r7, #0]
  auto* params = reinterpret_cast<TfLitePoolParams*>(node->builtin_data);
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	695b      	ldr	r3, [r3, #20]
 80148e2:	627b      	str	r3, [r7, #36]	; 0x24
  OpData data;

  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 80148e4:	2200      	movs	r2, #0
 80148e6:	6839      	ldr	r1, [r7, #0]
 80148e8:	6878      	ldr	r0, [r7, #4]
 80148ea:	f7fa fce2 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80148ee:	6238      	str	r0, [r7, #32]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 80148f0:	2200      	movs	r2, #0
 80148f2:	6839      	ldr	r1, [r7, #0]
 80148f4:	6878      	ldr	r0, [r7, #4]
 80148f6:	f7fa fcf2 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80148fa:	61f8      	str	r0, [r7, #28]

  TF_LITE_ENSURE_STATUS(CalculateOpData(context, params, input, output, &data));
 80148fc:	f107 0308 	add.w	r3, r7, #8
 8014900:	9300      	str	r3, [sp, #0]
 8014902:	69fb      	ldr	r3, [r7, #28]
 8014904:	6a3a      	ldr	r2, [r7, #32]
 8014906:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8014908:	6878      	ldr	r0, [r7, #4]
 801490a:	f7ff feb1 	bl	8014670 <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_115CalculateOpDataEPK13TfLiteContextPK16TfLitePoolParamsPK12TfLiteTensorSC_PNS3_6OpDataE>
 801490e:	4603      	mov	r3, r0
 8014910:	76fb      	strb	r3, [r7, #27]
 8014912:	7efb      	ldrb	r3, [r7, #27]
 8014914:	2b00      	cmp	r3, #0
 8014916:	d001      	beq.n	801491c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x48>
 8014918:	7efb      	ldrb	r3, [r7, #27]
 801491a:	e033      	b.n	8014984 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>

  switch (input->type) {
 801491c:	6a3b      	ldr	r3, [r7, #32]
 801491e:	781b      	ldrb	r3, [r3, #0]
 8014920:	2b09      	cmp	r3, #9
 8014922:	d013      	beq.n	801494c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
 8014924:	2b09      	cmp	r3, #9
 8014926:	dc1e      	bgt.n	8014966 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
 8014928:	2b01      	cmp	r3, #1
 801492a:	d002      	beq.n	8014932 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x5e>
 801492c:	2b03      	cmp	r3, #3
 801492e:	d00d      	beq.n	801494c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x78>
 8014930:	e019      	b.n	8014966 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0x92>
    case kTfLiteFloat32:
      MaxEvalFloat(context, node, params, &data, input, output);
 8014932:	f107 0208 	add.w	r2, r7, #8
 8014936:	69fb      	ldr	r3, [r7, #28]
 8014938:	9301      	str	r3, [sp, #4]
 801493a:	6a3b      	ldr	r3, [r7, #32]
 801493c:	9300      	str	r3, [sp, #0]
 801493e:	4613      	mov	r3, r2
 8014940:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014942:	6839      	ldr	r1, [r7, #0]
 8014944:	6878      	ldr	r0, [r7, #4]
 8014946:	f7ff fed2 	bl	80146ee <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_112MaxEvalFloatEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 801494a:	e01a      	b.n	8014982 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    case kTfLiteUInt8:
    case kTfLiteInt8:
      MaxEvalQuantized(context, node, params, &data, input, output);
 801494c:	f107 0208 	add.w	r2, r7, #8
 8014950:	69fb      	ldr	r3, [r7, #28]
 8014952:	9301      	str	r3, [sp, #4]
 8014954:	6a3b      	ldr	r3, [r7, #32]
 8014956:	9300      	str	r3, [sp, #0]
 8014958:	4613      	mov	r3, r2
 801495a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801495c:	6839      	ldr	r1, [r7, #0]
 801495e:	6878      	ldr	r0, [r7, #4]
 8014960:	f7ff ff1d 	bl	801479e <_ZN6tflite3ops5micro7pooling12_GLOBAL__N_116MaxEvalQuantizedEP13TfLiteContextP10TfLiteNodeP16TfLitePoolParamsPNS3_6OpDataEPK12TfLiteTensorPSC_>
      break;
 8014964:	e00d      	b.n	8014982 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xae>
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s not currently supported.",
 8014966:	687b      	ldr	r3, [r7, #4]
 8014968:	695c      	ldr	r4, [r3, #20]
 801496a:	6a3b      	ldr	r3, [r7, #32]
 801496c:	781b      	ldrb	r3, [r3, #0]
 801496e:	4618      	mov	r0, r3
 8014970:	f7f9 fdba 	bl	800e4e8 <TfLiteTypeGetName>
 8014974:	4603      	mov	r3, r0
 8014976:	461a      	mov	r2, r3
 8014978:	4904      	ldr	r1, [pc, #16]	; (801498c <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb8>)
 801497a:	6878      	ldr	r0, [r7, #4]
 801497c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type));
      return kTfLiteError;
 801497e:	2301      	movs	r3, #1
 8014980:	e000      	b.n	8014984 <_ZN6tflite3ops5micro7pooling7MaxEvalEP13TfLiteContextP10TfLiteNode+0xb0>
  }
  return kTfLiteOk;
 8014982:	2300      	movs	r3, #0
}
 8014984:	4618      	mov	r0, r3
 8014986:	372c      	adds	r7, #44	; 0x2c
 8014988:	46bd      	mov	sp, r7
 801498a:	bd90      	pop	{r4, r7, pc}
 801498c:	0801eaac 	.word	0x0801eaac

08014990 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>:
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
}

TfLiteRegistration* Register_MAX_POOL_2D() {
 8014990:	b480      	push	{r7}
 8014992:	af00      	add	r7, sp, #0
                                 /*invoke=*/pooling::MaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8014994:	4b02      	ldr	r3, [pc, #8]	; (80149a0 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv+0x10>)
}
 8014996:	4618      	mov	r0, r3
 8014998:	46bd      	mov	sp, r7
 801499a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801499e:	4770      	bx	lr
 80149a0:	200000c4 	.word	0x200000c4

080149a4 <_ZSt3minIiERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80149a4:	b480      	push	{r7}
 80149a6:	b083      	sub	sp, #12
 80149a8:	af00      	add	r7, sp, #0
 80149aa:	6078      	str	r0, [r7, #4]
 80149ac:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80149ae:	683b      	ldr	r3, [r7, #0]
 80149b0:	681a      	ldr	r2, [r3, #0]
 80149b2:	687b      	ldr	r3, [r7, #4]
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	429a      	cmp	r2, r3
 80149b8:	da01      	bge.n	80149be <_ZSt3minIiERKT_S2_S2_+0x1a>
	return __b;
 80149ba:	683b      	ldr	r3, [r7, #0]
 80149bc:	e000      	b.n	80149c0 <_ZSt3minIiERKT_S2_S2_+0x1c>
      return __a;
 80149be:	687b      	ldr	r3, [r7, #4]
    }
 80149c0:	4618      	mov	r0, r3
 80149c2:	370c      	adds	r7, #12
 80149c4:	46bd      	mov	sp, r7
 80149c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ca:	4770      	bx	lr

080149cc <_ZSt3maxIhERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 80149cc:	b480      	push	{r7}
 80149ce:	b083      	sub	sp, #12
 80149d0:	af00      	add	r7, sp, #0
 80149d2:	6078      	str	r0, [r7, #4]
 80149d4:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	781a      	ldrb	r2, [r3, #0]
 80149da:	683b      	ldr	r3, [r7, #0]
 80149dc:	781b      	ldrb	r3, [r3, #0]
 80149de:	429a      	cmp	r2, r3
 80149e0:	d201      	bcs.n	80149e6 <_ZSt3maxIhERKT_S2_S2_+0x1a>
	return __b;
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	e000      	b.n	80149e8 <_ZSt3maxIhERKT_S2_S2_+0x1c>
      return __a;
 80149e6:	687b      	ldr	r3, [r7, #4]
    }
 80149e8:	4618      	mov	r0, r3
 80149ea:	370c      	adds	r7, #12
 80149ec:	46bd      	mov	sp, r7
 80149ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f2:	4770      	bx	lr

080149f4 <_ZSt3minIhERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 80149f4:	b480      	push	{r7}
 80149f6:	b083      	sub	sp, #12
 80149f8:	af00      	add	r7, sp, #0
 80149fa:	6078      	str	r0, [r7, #4]
 80149fc:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 80149fe:	683b      	ldr	r3, [r7, #0]
 8014a00:	781a      	ldrb	r2, [r3, #0]
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	781b      	ldrb	r3, [r3, #0]
 8014a06:	429a      	cmp	r2, r3
 8014a08:	d201      	bcs.n	8014a0e <_ZSt3minIhERKT_S2_S2_+0x1a>
	return __b;
 8014a0a:	683b      	ldr	r3, [r7, #0]
 8014a0c:	e000      	b.n	8014a10 <_ZSt3minIhERKT_S2_S2_+0x1c>
      return __a;
 8014a0e:	687b      	ldr	r3, [r7, #4]
    }
 8014a10:	4618      	mov	r0, r3
 8014a12:	370c      	adds	r7, #12
 8014a14:	46bd      	mov	sp, r7
 8014a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1a:	4770      	bx	lr

08014a1c <_ZSt3maxIaERKT_S2_S2_>:
    max(const _Tp& __a, const _Tp& __b)
 8014a1c:	b480      	push	{r7}
 8014a1e:	b083      	sub	sp, #12
 8014a20:	af00      	add	r7, sp, #0
 8014a22:	6078      	str	r0, [r7, #4]
 8014a24:	6039      	str	r1, [r7, #0]
      if (__a < __b)
 8014a26:	687b      	ldr	r3, [r7, #4]
 8014a28:	f993 2000 	ldrsb.w	r2, [r3]
 8014a2c:	683b      	ldr	r3, [r7, #0]
 8014a2e:	f993 3000 	ldrsb.w	r3, [r3]
 8014a32:	429a      	cmp	r2, r3
 8014a34:	da01      	bge.n	8014a3a <_ZSt3maxIaERKT_S2_S2_+0x1e>
	return __b;
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	e000      	b.n	8014a3c <_ZSt3maxIaERKT_S2_S2_+0x20>
      return __a;
 8014a3a:	687b      	ldr	r3, [r7, #4]
    }
 8014a3c:	4618      	mov	r0, r3
 8014a3e:	370c      	adds	r7, #12
 8014a40:	46bd      	mov	sp, r7
 8014a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a46:	4770      	bx	lr

08014a48 <_ZSt3minIaERKT_S2_S2_>:
    min(const _Tp& __a, const _Tp& __b)
 8014a48:	b480      	push	{r7}
 8014a4a:	b083      	sub	sp, #12
 8014a4c:	af00      	add	r7, sp, #0
 8014a4e:	6078      	str	r0, [r7, #4]
 8014a50:	6039      	str	r1, [r7, #0]
      if (__b < __a)
 8014a52:	683b      	ldr	r3, [r7, #0]
 8014a54:	f993 2000 	ldrsb.w	r2, [r3]
 8014a58:	687b      	ldr	r3, [r7, #4]
 8014a5a:	f993 3000 	ldrsb.w	r3, [r3]
 8014a5e:	429a      	cmp	r2, r3
 8014a60:	da01      	bge.n	8014a66 <_ZSt3minIaERKT_S2_S2_+0x1e>
	return __b;
 8014a62:	683b      	ldr	r3, [r7, #0]
 8014a64:	e000      	b.n	8014a68 <_ZSt3minIaERKT_S2_S2_+0x20>
      return __a;
 8014a66:	687b      	ldr	r3, [r7, #4]
    }
 8014a68:	4618      	mov	r0, r3
 8014a6a:	370c      	adds	r7, #12
 8014a6c:	46bd      	mov	sp, r7
 8014a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a72:	4770      	bx	lr

08014a74 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>:
namespace reshape {

constexpr int kInputTensor = 0;
constexpr int kOutputTensor = 0;

TfLiteStatus ReshapeOutput(TfLiteContext* context, TfLiteNode* node) {
 8014a74:	b5b0      	push	{r4, r5, r7, lr}
 8014a76:	b08e      	sub	sp, #56	; 0x38
 8014a78:	af04      	add	r7, sp, #16
 8014a7a:	6078      	str	r0, [r7, #4]
 8014a7c:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8014a7e:	2200      	movs	r2, #0
 8014a80:	6839      	ldr	r1, [r7, #0]
 8014a82:	6878      	ldr	r0, [r7, #4]
 8014a84:	f7fa fc15 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014a88:	61b8      	str	r0, [r7, #24]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8014a8a:	2200      	movs	r2, #0
 8014a8c:	6839      	ldr	r1, [r7, #0]
 8014a8e:	6878      	ldr	r0, [r7, #4]
 8014a90:	f7fa fc25 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014a94:	6178      	str	r0, [r7, #20]
  // Tensorflow's Reshape allows one of the shape components to have the
  // special -1 value, meaning it will be calculated automatically based on the
  // input. Here we calculate what that dimension should be so that the number
  // of output elements in the same as the number of input elements.
  int num_input_elements = NumElements(input);
 8014a96:	69b8      	ldr	r0, [r7, #24]
 8014a98:	f7fa f81b 	bl	800ead2 <_ZN6tflite11NumElementsEPK12TfLiteTensor>
 8014a9c:	4602      	mov	r2, r0
 8014a9e:	460b      	mov	r3, r1
 8014aa0:	4613      	mov	r3, r2
 8014aa2:	613b      	str	r3, [r7, #16]
  TfLiteIntArray* output_shape = output->dims;
 8014aa4:	697b      	ldr	r3, [r7, #20]
 8014aa6:	689b      	ldr	r3, [r3, #8]
 8014aa8:	60fb      	str	r3, [r7, #12]

  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8014aaa:	6838      	ldr	r0, [r7, #0]
 8014aac:	f7fc fbc4 	bl	8011238 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014ab0:	4603      	mov	r3, r0
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8014ab2:	2b01      	cmp	r3, #1
 8014ab4:	d109      	bne.n	8014aca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8014ab6:	68fb      	ldr	r3, [r7, #12]
 8014ab8:	681b      	ldr	r3, [r3, #0]
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8014aba:	2b01      	cmp	r3, #1
 8014abc:	d105      	bne.n	8014aca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
      output_shape->size == 1 && output_shape->data[0] == 0) {
 8014abe:	68fb      	ldr	r3, [r7, #12]
 8014ac0:	685b      	ldr	r3, [r3, #4]
 8014ac2:	2b00      	cmp	r3, #0
 8014ac4:	d101      	bne.n	8014aca <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x56>
 8014ac6:	2301      	movs	r3, #1
 8014ac8:	e000      	b.n	8014acc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x58>
 8014aca:	2300      	movs	r3, #0
  if (NumInputs(node) == 1 &&  // Legacy scalar supported with params.
 8014acc:	2b00      	cmp	r3, #0
 8014ace:	d002      	beq.n	8014ad6 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x62>
    // Legacy tflite models use a shape parameter of [0] to indicate scalars,
    // so adjust accordingly. TODO(b/111614235): Allow zero-sized buffers during
    // toco conversion.
    output_shape->size = 0;
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	2200      	movs	r2, #0
 8014ad4:	601a      	str	r2, [r3, #0]
  }

  int num_output_elements = 1;
 8014ad6:	2301      	movs	r3, #1
 8014ad8:	627b      	str	r3, [r7, #36]	; 0x24
  int stretch_dim = -1;
 8014ada:	f04f 33ff 	mov.w	r3, #4294967295
 8014ade:	623b      	str	r3, [r7, #32]
  for (int i = 0; i < output_shape->size; ++i) {
 8014ae0:	2300      	movs	r3, #0
 8014ae2:	61fb      	str	r3, [r7, #28]
 8014ae4:	68fb      	ldr	r3, [r7, #12]
 8014ae6:	681b      	ldr	r3, [r3, #0]
 8014ae8:	69fa      	ldr	r2, [r7, #28]
 8014aea:	429a      	cmp	r2, r3
 8014aec:	da2b      	bge.n	8014b46 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xd2>
    int value = output_shape->data[i];
 8014aee:	68fa      	ldr	r2, [r7, #12]
 8014af0:	69fb      	ldr	r3, [r7, #28]
 8014af2:	009b      	lsls	r3, r3, #2
 8014af4:	4413      	add	r3, r2
 8014af6:	685b      	ldr	r3, [r3, #4]
 8014af8:	60bb      	str	r3, [r7, #8]
    if (value == -1) {
 8014afa:	68bb      	ldr	r3, [r7, #8]
 8014afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b00:	d118      	bne.n	8014b34 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xc0>
      TF_LITE_ENSURE_EQ(context, stretch_dim, -1);
 8014b02:	6a3b      	ldr	r3, [r7, #32]
 8014b04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b08:	d011      	beq.n	8014b2e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xba>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	695c      	ldr	r4, [r3, #20]
 8014b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8014b12:	9303      	str	r3, [sp, #12]
 8014b14:	6a3b      	ldr	r3, [r7, #32]
 8014b16:	9302      	str	r3, [sp, #8]
 8014b18:	4b33      	ldr	r3, [pc, #204]	; (8014be8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x174>)
 8014b1a:	9301      	str	r3, [sp, #4]
 8014b1c:	4b33      	ldr	r3, [pc, #204]	; (8014bec <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x178>)
 8014b1e:	9300      	str	r3, [sp, #0]
 8014b20:	2335      	movs	r3, #53	; 0x35
 8014b22:	4a33      	ldr	r2, [pc, #204]	; (8014bf0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8014b24:	4933      	ldr	r1, [pc, #204]	; (8014bf4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 8014b26:	6878      	ldr	r0, [r7, #4]
 8014b28:	47a0      	blx	r4
 8014b2a:	2301      	movs	r3, #1
 8014b2c:	e058      	b.n	8014be0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
      stretch_dim = i;
 8014b2e:	69fb      	ldr	r3, [r7, #28]
 8014b30:	623b      	str	r3, [r7, #32]
 8014b32:	e004      	b.n	8014b3e <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xca>
    } else {
      num_output_elements *= value;
 8014b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b36:	68ba      	ldr	r2, [r7, #8]
 8014b38:	fb02 f303 	mul.w	r3, r2, r3
 8014b3c:	627b      	str	r3, [r7, #36]	; 0x24
  for (int i = 0; i < output_shape->size; ++i) {
 8014b3e:	69fb      	ldr	r3, [r7, #28]
 8014b40:	3301      	adds	r3, #1
 8014b42:	61fb      	str	r3, [r7, #28]
 8014b44:	e7ce      	b.n	8014ae4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x70>
    }
  }
  if (stretch_dim != -1) {
 8014b46:	6a3b      	ldr	r3, [r7, #32]
 8014b48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8014b4c:	d011      	beq.n	8014b72 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0xfe>
    output_shape->data[stretch_dim] = num_input_elements / num_output_elements;
 8014b4e:	693a      	ldr	r2, [r7, #16]
 8014b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b52:	fb92 f2f3 	sdiv	r2, r2, r3
 8014b56:	68f9      	ldr	r1, [r7, #12]
 8014b58:	6a3b      	ldr	r3, [r7, #32]
 8014b5a:	009b      	lsls	r3, r3, #2
 8014b5c:	440b      	add	r3, r1
 8014b5e:	605a      	str	r2, [r3, #4]
    num_output_elements *= output_shape->data[stretch_dim];
 8014b60:	68fa      	ldr	r2, [r7, #12]
 8014b62:	6a3b      	ldr	r3, [r7, #32]
 8014b64:	009b      	lsls	r3, r3, #2
 8014b66:	4413      	add	r3, r2
 8014b68:	685a      	ldr	r2, [r3, #4]
 8014b6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014b6c:	fb02 f303 	mul.w	r3, r2, r3
 8014b70:	627b      	str	r3, [r7, #36]	; 0x24
  }

  TF_LITE_ENSURE_TYPES_EQ(context, input->type, output->type);
 8014b72:	69bb      	ldr	r3, [r7, #24]
 8014b74:	781a      	ldrb	r2, [r3, #0]
 8014b76:	697b      	ldr	r3, [r7, #20]
 8014b78:	781b      	ldrb	r3, [r3, #0]
 8014b7a:	429a      	cmp	r2, r3
 8014b7c:	d01a      	beq.n	8014bb4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x140>
 8014b7e:	687b      	ldr	r3, [r7, #4]
 8014b80:	695c      	ldr	r4, [r3, #20]
 8014b82:	69bb      	ldr	r3, [r7, #24]
 8014b84:	781b      	ldrb	r3, [r3, #0]
 8014b86:	4618      	mov	r0, r3
 8014b88:	f7f9 fcae 	bl	800e4e8 <TfLiteTypeGetName>
 8014b8c:	4605      	mov	r5, r0
 8014b8e:	697b      	ldr	r3, [r7, #20]
 8014b90:	781b      	ldrb	r3, [r3, #0]
 8014b92:	4618      	mov	r0, r3
 8014b94:	f7f9 fca8 	bl	800e4e8 <TfLiteTypeGetName>
 8014b98:	4603      	mov	r3, r0
 8014b9a:	9303      	str	r3, [sp, #12]
 8014b9c:	9502      	str	r5, [sp, #8]
 8014b9e:	4b16      	ldr	r3, [pc, #88]	; (8014bf8 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x184>)
 8014ba0:	9301      	str	r3, [sp, #4]
 8014ba2:	4b16      	ldr	r3, [pc, #88]	; (8014bfc <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x188>)
 8014ba4:	9300      	str	r3, [sp, #0]
 8014ba6:	2340      	movs	r3, #64	; 0x40
 8014ba8:	4a11      	ldr	r2, [pc, #68]	; (8014bf0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8014baa:	4915      	ldr	r1, [pc, #84]	; (8014c00 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x18c>)
 8014bac:	6878      	ldr	r0, [r7, #4]
 8014bae:	47a0      	blx	r4
 8014bb0:	2301      	movs	r3, #1
 8014bb2:	e015      	b.n	8014be0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  TF_LITE_ENSURE_EQ(context, num_input_elements, num_output_elements);
 8014bb4:	693a      	ldr	r2, [r7, #16]
 8014bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bb8:	429a      	cmp	r2, r3
 8014bba:	d010      	beq.n	8014bde <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16a>
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	695c      	ldr	r4, [r3, #20]
 8014bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014bc2:	9303      	str	r3, [sp, #12]
 8014bc4:	693b      	ldr	r3, [r7, #16]
 8014bc6:	9302      	str	r3, [sp, #8]
 8014bc8:	4b0e      	ldr	r3, [pc, #56]	; (8014c04 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x190>)
 8014bca:	9301      	str	r3, [sp, #4]
 8014bcc:	4b0e      	ldr	r3, [pc, #56]	; (8014c08 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x194>)
 8014bce:	9300      	str	r3, [sp, #0]
 8014bd0:	2341      	movs	r3, #65	; 0x41
 8014bd2:	4a07      	ldr	r2, [pc, #28]	; (8014bf0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x17c>)
 8014bd4:	4907      	ldr	r1, [pc, #28]	; (8014bf4 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x180>)
 8014bd6:	6878      	ldr	r0, [r7, #4]
 8014bd8:	47a0      	blx	r4
 8014bda:	2301      	movs	r3, #1
 8014bdc:	e000      	b.n	8014be0 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode+0x16c>
  return kTfLiteOk;
 8014bde:	2300      	movs	r3, #0
}
 8014be0:	4618      	mov	r0, r3
 8014be2:	3728      	adds	r7, #40	; 0x28
 8014be4:	46bd      	mov	sp, r7
 8014be6:	bdb0      	pop	{r4, r5, r7, pc}
 8014be8:	0801eb40 	.word	0x0801eb40
 8014bec:	0801eb44 	.word	0x0801eb44
 8014bf0:	0801ead0 	.word	0x0801ead0
 8014bf4:	0801eb24 	.word	0x0801eb24
 8014bf8:	0801eb6c 	.word	0x0801eb6c
 8014bfc:	0801eb7c 	.word	0x0801eb7c
 8014c00:	0801eb50 	.word	0x0801eb50
 8014c04:	0801eb88 	.word	0x0801eb88
 8014c08:	0801eb9c 	.word	0x0801eb9c

08014c0c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Prepare(TfLiteContext* context, TfLiteNode* node) {
 8014c0c:	b590      	push	{r4, r7, lr}
 8014c0e:	b087      	sub	sp, #28
 8014c10:	af04      	add	r7, sp, #16
 8014c12:	6078      	str	r0, [r7, #4]
 8014c14:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE(context, NumInputs(node) == 1 || NumInputs(node) == 2);
 8014c16:	6838      	ldr	r0, [r7, #0]
 8014c18:	f7fc fb0e 	bl	8011238 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014c1c:	4603      	mov	r3, r0
 8014c1e:	2b01      	cmp	r3, #1
 8014c20:	d007      	beq.n	8014c32 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8014c22:	6838      	ldr	r0, [r7, #0]
 8014c24:	f7fc fb08 	bl	8011238 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8014c28:	4603      	mov	r3, r0
 8014c2a:	2b02      	cmp	r3, #2
 8014c2c:	d001      	beq.n	8014c32 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x26>
 8014c2e:	2301      	movs	r3, #1
 8014c30:	e000      	b.n	8014c34 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x28>
 8014c32:	2300      	movs	r3, #0
 8014c34:	2b00      	cmp	r3, #0
 8014c36:	d00a      	beq.n	8014c4e <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x42>
 8014c38:	687b      	ldr	r3, [r7, #4]
 8014c3a:	695c      	ldr	r4, [r3, #20]
 8014c3c:	4b27      	ldr	r3, [pc, #156]	; (8014cdc <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8014c3e:	9300      	str	r3, [sp, #0]
 8014c40:	2346      	movs	r3, #70	; 0x46
 8014c42:	4a27      	ldr	r2, [pc, #156]	; (8014ce0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8014c44:	4927      	ldr	r1, [pc, #156]	; (8014ce4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 8014c46:	6878      	ldr	r0, [r7, #4]
 8014c48:	47a0      	blx	r4
 8014c4a:	2301      	movs	r3, #1
 8014c4c:	e041      	b.n	8014cd2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 8014c4e:	6838      	ldr	r0, [r7, #0]
 8014c50:	f7fc faff 	bl	8011252 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8014c54:	4603      	mov	r3, r0
 8014c56:	2b01      	cmp	r3, #1
 8014c58:	bf14      	ite	ne
 8014c5a:	2301      	movne	r3, #1
 8014c5c:	2300      	moveq	r3, #0
 8014c5e:	b2db      	uxtb	r3, r3
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d013      	beq.n	8014c8c <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0x80>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	695c      	ldr	r4, [r3, #20]
 8014c68:	6838      	ldr	r0, [r7, #0]
 8014c6a:	f7fc faf2 	bl	8011252 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8014c6e:	4603      	mov	r3, r0
 8014c70:	2201      	movs	r2, #1
 8014c72:	9203      	str	r2, [sp, #12]
 8014c74:	9302      	str	r3, [sp, #8]
 8014c76:	4b1c      	ldr	r3, [pc, #112]	; (8014ce8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 8014c78:	9301      	str	r3, [sp, #4]
 8014c7a:	4b1c      	ldr	r3, [pc, #112]	; (8014cec <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 8014c7c:	9300      	str	r3, [sp, #0]
 8014c7e:	2347      	movs	r3, #71	; 0x47
 8014c80:	4a17      	ldr	r2, [pc, #92]	; (8014ce0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8014c82:	491b      	ldr	r1, [pc, #108]	; (8014cf0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8014c84:	6878      	ldr	r0, [r7, #4]
 8014c86:	47a0      	blx	r4
 8014c88:	2301      	movs	r3, #1
 8014c8a:	e022      	b.n	8014cd2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  TF_LITE_ENSURE_EQ(context, ReshapeOutput(context, node), kTfLiteOk);
 8014c8c:	6839      	ldr	r1, [r7, #0]
 8014c8e:	6878      	ldr	r0, [r7, #4]
 8014c90:	f7ff fef0 	bl	8014a74 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8014c94:	4603      	mov	r3, r0
 8014c96:	2b00      	cmp	r3, #0
 8014c98:	bf14      	ite	ne
 8014c9a:	2301      	movne	r3, #1
 8014c9c:	2300      	moveq	r3, #0
 8014c9e:	b2db      	uxtb	r3, r3
 8014ca0:	2b00      	cmp	r3, #0
 8014ca2:	d015      	beq.n	8014cd0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc4>
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	695c      	ldr	r4, [r3, #20]
 8014ca8:	6839      	ldr	r1, [r7, #0]
 8014caa:	6878      	ldr	r0, [r7, #4]
 8014cac:	f7ff fee2 	bl	8014a74 <_ZN6tflite3ops5micro7reshape13ReshapeOutputEP13TfLiteContextP10TfLiteNode>
 8014cb0:	4603      	mov	r3, r0
 8014cb2:	461a      	mov	r2, r3
 8014cb4:	2300      	movs	r3, #0
 8014cb6:	9303      	str	r3, [sp, #12]
 8014cb8:	9202      	str	r2, [sp, #8]
 8014cba:	4b0e      	ldr	r3, [pc, #56]	; (8014cf4 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe8>)
 8014cbc:	9301      	str	r3, [sp, #4]
 8014cbe:	4b0e      	ldr	r3, [pc, #56]	; (8014cf8 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xec>)
 8014cc0:	9300      	str	r3, [sp, #0]
 8014cc2:	2348      	movs	r3, #72	; 0x48
 8014cc4:	4a06      	ldr	r2, [pc, #24]	; (8014ce0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8014cc6:	490a      	ldr	r1, [pc, #40]	; (8014cf0 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xe4>)
 8014cc8:	6878      	ldr	r0, [r7, #4]
 8014cca:	47a0      	blx	r4
 8014ccc:	2301      	movs	r3, #1
 8014cce:	e000      	b.n	8014cd2 <_ZN6tflite3ops5micro7reshape7PrepareEP13TfLiteContextP10TfLiteNode+0xc6>
  return kTfLiteOk;
 8014cd0:	2300      	movs	r3, #0
}
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	370c      	adds	r7, #12
 8014cd6:	46bd      	mov	sp, r7
 8014cd8:	bd90      	pop	{r4, r7, pc}
 8014cda:	bf00      	nop
 8014cdc:	0801ebc8 	.word	0x0801ebc8
 8014ce0:	0801ead0 	.word	0x0801ead0
 8014ce4:	0801ebb0 	.word	0x0801ebb0
 8014ce8:	0801ebf8 	.word	0x0801ebf8
 8014cec:	0801ebfc 	.word	0x0801ebfc
 8014cf0:	0801eb24 	.word	0x0801eb24
 8014cf4:	0801ec10 	.word	0x0801ec10
 8014cf8:	0801ec1c 	.word	0x0801ec1c

08014cfc <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus Eval(TfLiteContext* context, TfLiteNode* node) {
 8014cfc:	b580      	push	{r7, lr}
 8014cfe:	b086      	sub	sp, #24
 8014d00:	af00      	add	r7, sp, #0
 8014d02:	6078      	str	r0, [r7, #4]
 8014d04:	6039      	str	r1, [r7, #0]
  const TfLiteTensor* input = GetInput(context, node, kInputTensor);
 8014d06:	2200      	movs	r2, #0
 8014d08:	6839      	ldr	r1, [r7, #0]
 8014d0a:	6878      	ldr	r0, [r7, #4]
 8014d0c:	f7fa fad1 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 8014d10:	6138      	str	r0, [r7, #16]
  TfLiteTensor* output = GetOutput(context, node, kOutputTensor);
 8014d12:	2200      	movs	r2, #0
 8014d14:	6839      	ldr	r1, [r7, #0]
 8014d16:	6878      	ldr	r0, [r7, #4]
 8014d18:	f7fa fae1 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 8014d1c:	60f8      	str	r0, [r7, #12]

  // Do nothing for in-place reshape.
  if (input->data.raw != output->data.raw) {
 8014d1e:	693b      	ldr	r3, [r7, #16]
 8014d20:	685a      	ldr	r2, [r3, #4]
 8014d22:	68fb      	ldr	r3, [r7, #12]
 8014d24:	685b      	ldr	r3, [r3, #4]
 8014d26:	429a      	cmp	r2, r3
 8014d28:	d014      	beq.n	8014d54 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
    // Otherwise perform reshape with copy.
    for (size_t i = 0; i < input->bytes; ++i) {
 8014d2a:	2300      	movs	r3, #0
 8014d2c:	617b      	str	r3, [r7, #20]
 8014d2e:	693b      	ldr	r3, [r7, #16]
 8014d30:	699b      	ldr	r3, [r3, #24]
 8014d32:	697a      	ldr	r2, [r7, #20]
 8014d34:	429a      	cmp	r2, r3
 8014d36:	d20d      	bcs.n	8014d54 <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x58>
      output->data.raw[i] = input->data.raw[i];
 8014d38:	693b      	ldr	r3, [r7, #16]
 8014d3a:	685a      	ldr	r2, [r3, #4]
 8014d3c:	697b      	ldr	r3, [r7, #20]
 8014d3e:	441a      	add	r2, r3
 8014d40:	68fb      	ldr	r3, [r7, #12]
 8014d42:	6859      	ldr	r1, [r3, #4]
 8014d44:	697b      	ldr	r3, [r7, #20]
 8014d46:	440b      	add	r3, r1
 8014d48:	7812      	ldrb	r2, [r2, #0]
 8014d4a:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < input->bytes; ++i) {
 8014d4c:	697b      	ldr	r3, [r7, #20]
 8014d4e:	3301      	adds	r3, #1
 8014d50:	617b      	str	r3, [r7, #20]
 8014d52:	e7ec      	b.n	8014d2e <_ZN6tflite3ops5micro7reshape4EvalEP13TfLiteContextP10TfLiteNode+0x32>
    }
  }
  return kTfLiteOk;
 8014d54:	2300      	movs	r3, #0
}
 8014d56:	4618      	mov	r0, r3
 8014d58:	3718      	adds	r7, #24
 8014d5a:	46bd      	mov	sp, r7
 8014d5c:	bd80      	pop	{r7, pc}
	...

08014d60 <_ZN6tflite3ops5micro16Register_RESHAPEEv>:

}  // namespace reshape

TfLiteRegistration* Register_RESHAPE() {
 8014d60:	b480      	push	{r7}
 8014d62:	af00      	add	r7, sp, #0
                                 /*invoke=*/reshape::Eval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8014d64:	4b02      	ldr	r3, [pc, #8]	; (8014d70 <_ZN6tflite3ops5micro16Register_RESHAPEEv+0x10>)
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	46bd      	mov	sp, r7
 8014d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014d6e:	4770      	bx	lr
 8014d70:	200000e4 	.word	0x200000e4

08014d74 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>:
    int32 x, int32 quantized_multiplier, int left_shift) {
 8014d74:	b580      	push	{r7, lr}
 8014d76:	b084      	sub	sp, #16
 8014d78:	af00      	add	r7, sp, #0
 8014d7a:	60f8      	str	r0, [r7, #12]
 8014d7c:	60b9      	str	r1, [r7, #8]
 8014d7e:	607a      	str	r2, [r7, #4]
  return SaturatingRoundingDoublingHighMul(x * (1 << left_shift),
 8014d80:	68fa      	ldr	r2, [r7, #12]
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	fa02 f303 	lsl.w	r3, r2, r3
 8014d88:	68b9      	ldr	r1, [r7, #8]
 8014d8a:	4618      	mov	r0, r3
 8014d8c:	f7fa fc5a 	bl	800f644 <_ZN8gemmlowp33SaturatingRoundingDoublingHighMulIlEET_S1_S1_>
 8014d90:	4603      	mov	r3, r0
}
 8014d92:	4618      	mov	r0, r3
 8014d94:	3710      	adds	r7, #16
 8014d96:	46bd      	mov	sp, r7
 8014d98:	bd80      	pop	{r7, pc}

08014d9a <_ZN6tflite13GetReciprocalEliPi>:
                           int* num_bits_over_unit) {
 8014d9a:	b580      	push	{r7, lr}
 8014d9c:	b088      	sub	sp, #32
 8014d9e:	af00      	add	r7, sp, #0
 8014da0:	60f8      	str	r0, [r7, #12]
 8014da2:	60b9      	str	r1, [r7, #8]
 8014da4:	607a      	str	r2, [r7, #4]
  int headroom_plus_one = CountLeadingZeros(static_cast<uint32>(x));
 8014da6:	68fb      	ldr	r3, [r7, #12]
 8014da8:	4618      	mov	r0, r3
 8014daa:	f7fe fbcd 	bl	8013548 <_ZN6tflite17CountLeadingZerosImEEiT_>
 8014dae:	61f8      	str	r0, [r7, #28]
  *num_bits_over_unit = x_integer_digits - headroom_plus_one;
 8014db0:	68ba      	ldr	r2, [r7, #8]
 8014db2:	69fb      	ldr	r3, [r7, #28]
 8014db4:	1ad2      	subs	r2, r2, r3
 8014db6:	687b      	ldr	r3, [r7, #4]
 8014db8:	601a      	str	r2, [r3, #0]
      static_cast<int32>((static_cast<uint32>(x) << headroom_plus_one) -
 8014dba:	68fa      	ldr	r2, [r7, #12]
 8014dbc:	69fb      	ldr	r3, [r7, #28]
 8014dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8014dc2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
  const int32 shifted_sum_minus_one =
 8014dc6:	61bb      	str	r3, [r7, #24]
          gemmlowp::FixedPoint<int32, 0>::FromRaw(shifted_sum_minus_one));
 8014dc8:	69b8      	ldr	r0, [r7, #24]
 8014dca:	f7fe fce0 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8014dce:	4603      	mov	r3, r0
 8014dd0:	4618      	mov	r0, r3
 8014dd2:	f7fe fced 	bl	80137b0 <_ZN8gemmlowp32one_over_one_plus_x_for_x_in_0_1IlEENS_10FixedPointIT_Li0EEES3_>
 8014dd6:	4603      	mov	r3, r0
 8014dd8:	617b      	str	r3, [r7, #20]
  return shifted_scale.raw();
 8014dda:	f107 0314 	add.w	r3, r7, #20
 8014dde:	4618      	mov	r0, r3
 8014de0:	f7fe fbc4 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8014de4:	4603      	mov	r3, r0
 8014de6:	681b      	ldr	r3, [r3, #0]
}
 8014de8:	4618      	mov	r0, r3
 8014dea:	3720      	adds	r7, #32
 8014dec:	46bd      	mov	sp, r7
 8014dee:	bd80      	pop	{r7, pc}

08014df0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>:
namespace tflite {
namespace reference_ops {

inline void Softmax(const SoftmaxParams& params,
                    const RuntimeShape& input_shape, const float* input_data,
                    const RuntimeShape& output_shape, float* output_data) {
 8014df0:	b580      	push	{r7, lr}
 8014df2:	ed2d 8b02 	vpush	{d8}
 8014df6:	b08e      	sub	sp, #56	; 0x38
 8014df8:	af00      	add	r7, sp, #0
 8014dfa:	60f8      	str	r0, [r7, #12]
 8014dfc:	60b9      	str	r1, [r7, #8]
 8014dfe:	607a      	str	r2, [r7, #4]
 8014e00:	603b      	str	r3, [r7, #0]
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8014e02:	68b8      	ldr	r0, [r7, #8]
 8014e04:	f7fa fada 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8014e08:	4603      	mov	r3, r0
 8014e0a:	3b01      	subs	r3, #1
 8014e0c:	623b      	str	r3, [r7, #32]
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 8014e0e:	683a      	ldr	r2, [r7, #0]
 8014e10:	6a39      	ldr	r1, [r7, #32]
 8014e12:	68b8      	ldr	r0, [r7, #8]
 8014e14:	f7fe fb69 	bl	80134ea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8014e18:	61f8      	str	r0, [r7, #28]
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8014e1a:	6a3b      	ldr	r3, [r7, #32]
 8014e1c:	683a      	ldr	r2, [r7, #0]
 8014e1e:	6a39      	ldr	r1, [r7, #32]
 8014e20:	68b8      	ldr	r0, [r7, #8]
 8014e22:	f7fc fa23 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8014e26:	61b8      	str	r0, [r7, #24]

  for (int i = 0; i < outer_size; ++i) {
 8014e28:	2300      	movs	r3, #0
 8014e2a:	637b      	str	r3, [r7, #52]	; 0x34
 8014e2c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8014e2e:	69fb      	ldr	r3, [r7, #28]
 8014e30:	429a      	cmp	r2, r3
 8014e32:	f280 808f 	bge.w	8014f54 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x164>
    // Find max element value which we'll use to ensure numerical stability
    // taking advantage of the following equality:
    // exp(x[i])/sum(exp(x[i])) == exp(x[i]+C)/sum(exp(x[i]+C))
    float max = std::numeric_limits<float>::lowest();
 8014e36:	f46f 0300 	mvn.w	r3, #8388608	; 0x800000
 8014e3a:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8014e3c:	2300      	movs	r3, #0
 8014e3e:	633b      	str	r3, [r7, #48]	; 0x30
 8014e40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8014e42:	69bb      	ldr	r3, [r7, #24]
 8014e44:	429a      	cmp	r2, r3
 8014e46:	da15      	bge.n	8014e74 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x84>
      max = std::max(max, input_data[i * depth + c]);
 8014e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e4a:	69ba      	ldr	r2, [r7, #24]
 8014e4c:	fb02 f203 	mul.w	r2, r2, r3
 8014e50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e52:	4413      	add	r3, r2
 8014e54:	009b      	lsls	r3, r3, #2
 8014e56:	687a      	ldr	r2, [r7, #4]
 8014e58:	441a      	add	r2, r3
 8014e5a:	f107 0314 	add.w	r3, r7, #20
 8014e5e:	4611      	mov	r1, r2
 8014e60:	4618      	mov	r0, r3
 8014e62:	f7f9 fd71 	bl	800e948 <_ZSt3maxIfERKT_S2_S2_>
 8014e66:	4603      	mov	r3, r0
 8014e68:	681b      	ldr	r3, [r3, #0]
 8014e6a:	617b      	str	r3, [r7, #20]
    for (int c = 0; c < depth; ++c) {
 8014e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8014e6e:	3301      	adds	r3, #1
 8014e70:	633b      	str	r3, [r7, #48]	; 0x30
 8014e72:	e7e5      	b.n	8014e40 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x50>
    }

    // Compute sum.
    float sum = 0.f;
 8014e74:	f04f 0300 	mov.w	r3, #0
 8014e78:	62fb      	str	r3, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8014e7a:	2300      	movs	r3, #0
 8014e7c:	62bb      	str	r3, [r7, #40]	; 0x28
 8014e7e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014e80:	69bb      	ldr	r3, [r7, #24]
 8014e82:	429a      	cmp	r2, r3
 8014e84:	da29      	bge.n	8014eda <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xea>
      sum += std::exp((input_data[i * depth + c] - max) *
 8014e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014e88:	69ba      	ldr	r2, [r7, #24]
 8014e8a:	fb02 f203 	mul.w	r2, r2, r3
 8014e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e90:	4413      	add	r3, r2
 8014e92:	009b      	lsls	r3, r3, #2
 8014e94:	687a      	ldr	r2, [r7, #4]
 8014e96:	4413      	add	r3, r2
 8014e98:	ed93 7a00 	vldr	s14, [r3]
 8014e9c:	edd7 7a05 	vldr	s15, [r7, #20]
 8014ea0:	ee37 8a67 	vsub.f32	s16, s14, s15
                      static_cast<float>(params.beta));
 8014ea4:	68fb      	ldr	r3, [r7, #12]
 8014ea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014eaa:	4610      	mov	r0, r2
 8014eac:	4619      	mov	r1, r3
 8014eae:	f7eb febb 	bl	8000c28 <__aeabi_d2f>
 8014eb2:	ee07 0a90 	vmov	s15, r0
      sum += std::exp((input_data[i * depth + c] - max) *
 8014eb6:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014eba:	eeb0 0a67 	vmov.f32	s0, s15
 8014ebe:	f7ec f8d1 	bl	8001064 <_ZSt3expf>
 8014ec2:	eeb0 7a40 	vmov.f32	s14, s0
 8014ec6:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8014eca:	ee77 7a87 	vadd.f32	s15, s15, s14
 8014ece:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
    for (int c = 0; c < depth; ++c) {
 8014ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ed4:	3301      	adds	r3, #1
 8014ed6:	62bb      	str	r3, [r7, #40]	; 0x28
 8014ed8:	e7d1      	b.n	8014e7e <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x8e>
    }

    // Compute result.
    for (int c = 0; c < depth; ++c) {
 8014eda:	2300      	movs	r3, #0
 8014edc:	627b      	str	r3, [r7, #36]	; 0x24
 8014ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8014ee0:	69bb      	ldr	r3, [r7, #24]
 8014ee2:	429a      	cmp	r2, r3
 8014ee4:	da32      	bge.n	8014f4c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x15c>
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8014ee6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014ee8:	69ba      	ldr	r2, [r7, #24]
 8014eea:	fb02 f203 	mul.w	r2, r2, r3
 8014eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014ef0:	4413      	add	r3, r2
 8014ef2:	009b      	lsls	r3, r3, #2
 8014ef4:	687a      	ldr	r2, [r7, #4]
 8014ef6:	4413      	add	r3, r2
 8014ef8:	ed93 7a00 	vldr	s14, [r3]
 8014efc:	edd7 7a05 	vldr	s15, [r7, #20]
 8014f00:	ee37 8a67 	vsub.f32	s16, s14, s15
                                            static_cast<float>(params.beta)) /
 8014f04:	68fb      	ldr	r3, [r7, #12]
 8014f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8014f0a:	4610      	mov	r0, r2
 8014f0c:	4619      	mov	r1, r3
 8014f0e:	f7eb fe8b 	bl	8000c28 <__aeabi_d2f>
 8014f12:	ee07 0a90 	vmov	s15, r0
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8014f16:	ee68 7a27 	vmul.f32	s15, s16, s15
 8014f1a:	eeb0 0a67 	vmov.f32	s0, s15
 8014f1e:	f7ec f8a1 	bl	8001064 <_ZSt3expf>
 8014f22:	eef0 6a40 	vmov.f32	s13, s0
 8014f26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f28:	69ba      	ldr	r2, [r7, #24]
 8014f2a:	fb02 f203 	mul.w	r2, r2, r3
 8014f2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f30:	4413      	add	r3, r2
 8014f32:	009b      	lsls	r3, r3, #2
 8014f34:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8014f36:	4413      	add	r3, r2
                                            static_cast<float>(params.beta)) /
 8014f38:	ed97 7a0b 	vldr	s14, [r7, #44]	; 0x2c
 8014f3c:	eec6 7a87 	vdiv.f32	s15, s13, s14
      output_data[i * depth + c] = std::exp((input_data[i * depth + c] - max) *
 8014f40:	edc3 7a00 	vstr	s15, [r3]
    for (int c = 0; c < depth; ++c) {
 8014f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014f46:	3301      	adds	r3, #1
 8014f48:	627b      	str	r3, [r7, #36]	; 0x24
 8014f4a:	e7c8      	b.n	8014ede <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0xee>
  for (int i = 0; i < outer_size; ++i) {
 8014f4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8014f4e:	3301      	adds	r3, #1
 8014f50:	637b      	str	r3, [r7, #52]	; 0x34
 8014f52:	e76b      	b.n	8014e2c <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf+0x3c>
                                   sum;
    }
  }
}
 8014f54:	bf00      	nop
 8014f56:	3738      	adds	r7, #56	; 0x38
 8014f58:	46bd      	mov	sp, r7
 8014f5a:	ecbd 8b02 	vpop	{d8}
 8014f5e:	bd80      	pop	{r7, pc}

08014f60 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>:

TfLiteStatus CalculateSoftmaxParams(TfLiteContext* context,
                                    const TfLiteTensor* input,
                                    TfLiteTensor* output,
                                    const TfLiteSoftmaxParams* params,
                                    SoftmaxParams* op_data) {
 8014f60:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014f64:	b08a      	sub	sp, #40	; 0x28
 8014f66:	af04      	add	r7, sp, #16
 8014f68:	60f8      	str	r0, [r7, #12]
 8014f6a:	60b9      	str	r1, [r7, #8]
 8014f6c:	607a      	str	r2, [r7, #4]
 8014f6e:	603b      	str	r3, [r7, #0]
  if (input->type == kTfLiteUInt8 || input->type == kTfLiteInt8) {
 8014f70:	68bb      	ldr	r3, [r7, #8]
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	2b03      	cmp	r3, #3
 8014f76:	d004      	beq.n	8014f82 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x22>
 8014f78:	68bb      	ldr	r3, [r7, #8]
 8014f7a:	781b      	ldrb	r3, [r3, #0]
 8014f7c:	2b09      	cmp	r3, #9
 8014f7e:	f040 80ef 	bne.w	8015160 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x200>
    if (input->type == kTfLiteUInt8) {
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	781b      	ldrb	r3, [r3, #0]
 8014f86:	2b03      	cmp	r3, #3
 8014f88:	d133      	bne.n	8014ff2 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x92>
      TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteUInt8);
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	781b      	ldrb	r3, [r3, #0]
 8014f8e:	2b03      	cmp	r3, #3
 8014f90:	d018      	beq.n	8014fc4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x64>
 8014f92:	68fb      	ldr	r3, [r7, #12]
 8014f94:	695c      	ldr	r4, [r3, #20]
 8014f96:	687b      	ldr	r3, [r7, #4]
 8014f98:	781b      	ldrb	r3, [r3, #0]
 8014f9a:	4618      	mov	r0, r3
 8014f9c:	f7f9 faa4 	bl	800e4e8 <TfLiteTypeGetName>
 8014fa0:	4605      	mov	r5, r0
 8014fa2:	2003      	movs	r0, #3
 8014fa4:	f7f9 faa0 	bl	800e4e8 <TfLiteTypeGetName>
 8014fa8:	4603      	mov	r3, r0
 8014faa:	9303      	str	r3, [sp, #12]
 8014fac:	9502      	str	r5, [sp, #8]
 8014fae:	4b91      	ldr	r3, [pc, #580]	; (80151f4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x294>)
 8014fb0:	9301      	str	r3, [sp, #4]
 8014fb2:	4b91      	ldr	r3, [pc, #580]	; (80151f8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 8014fb4:	9300      	str	r3, [sp, #0]
 8014fb6:	23c2      	movs	r3, #194	; 0xc2
 8014fb8:	4a90      	ldr	r2, [pc, #576]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8014fba:	4991      	ldr	r1, [pc, #580]	; (8015200 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8014fbc:	68f8      	ldr	r0, [r7, #12]
 8014fbe:	47a0      	blx	r4
 8014fc0:	2301      	movs	r3, #1
 8014fc2:	e112      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      TF_LITE_ENSURE_EQ(context, output->params.zero_point, 0);
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	691b      	ldr	r3, [r3, #16]
 8014fc8:	2b00      	cmp	r3, #0
 8014fca:	f000 8094 	beq.w	80150f6 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 8014fce:	68fb      	ldr	r3, [r7, #12]
 8014fd0:	695c      	ldr	r4, [r3, #20]
 8014fd2:	687b      	ldr	r3, [r7, #4]
 8014fd4:	691b      	ldr	r3, [r3, #16]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	9203      	str	r2, [sp, #12]
 8014fda:	9302      	str	r3, [sp, #8]
 8014fdc:	4b89      	ldr	r3, [pc, #548]	; (8015204 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a4>)
 8014fde:	9301      	str	r3, [sp, #4]
 8014fe0:	4b89      	ldr	r3, [pc, #548]	; (8015208 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8014fe2:	9300      	str	r3, [sp, #0]
 8014fe4:	23c3      	movs	r3, #195	; 0xc3
 8014fe6:	4a85      	ldr	r2, [pc, #532]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8014fe8:	4988      	ldr	r1, [pc, #544]	; (801520c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 8014fea:	68f8      	ldr	r0, [r7, #12]
 8014fec:	47a0      	blx	r4
 8014fee:	2301      	movs	r3, #1
 8014ff0:	e0fb      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    } else {
      TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteInt8);
 8014ff2:	68bb      	ldr	r3, [r7, #8]
 8014ff4:	781b      	ldrb	r3, [r3, #0]
 8014ff6:	2b09      	cmp	r3, #9
 8014ff8:	d018      	beq.n	801502c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0xcc>
 8014ffa:	68fb      	ldr	r3, [r7, #12]
 8014ffc:	695c      	ldr	r4, [r3, #20]
 8014ffe:	68bb      	ldr	r3, [r7, #8]
 8015000:	781b      	ldrb	r3, [r3, #0]
 8015002:	4618      	mov	r0, r3
 8015004:	f7f9 fa70 	bl	800e4e8 <TfLiteTypeGetName>
 8015008:	4605      	mov	r5, r0
 801500a:	2009      	movs	r0, #9
 801500c:	f7f9 fa6c 	bl	800e4e8 <TfLiteTypeGetName>
 8015010:	4603      	mov	r3, r0
 8015012:	9303      	str	r3, [sp, #12]
 8015014:	9502      	str	r5, [sp, #8]
 8015016:	4b7e      	ldr	r3, [pc, #504]	; (8015210 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 8015018:	9301      	str	r3, [sp, #4]
 801501a:	4b7e      	ldr	r3, [pc, #504]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 801501c:	9300      	str	r3, [sp, #0]
 801501e:	23c5      	movs	r3, #197	; 0xc5
 8015020:	4a76      	ldr	r2, [pc, #472]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8015022:	4977      	ldr	r1, [pc, #476]	; (8015200 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8015024:	68f8      	ldr	r0, [r7, #12]
 8015026:	47a0      	blx	r4
 8015028:	2301      	movs	r3, #1
 801502a:	e0de      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
      if (output->type == kTfLiteInt16) {
 801502c:	687b      	ldr	r3, [r7, #4]
 801502e:	781b      	ldrb	r3, [r3, #0]
 8015030:	2b07      	cmp	r3, #7
 8015032:	d116      	bne.n	8015062 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x102>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -32768);
 8015034:	687b      	ldr	r3, [r7, #4]
 8015036:	691b      	ldr	r3, [r3, #16]
 8015038:	f513 4f00 	cmn.w	r3, #32768	; 0x8000
 801503c:	d05b      	beq.n	80150f6 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 801503e:	68fb      	ldr	r3, [r7, #12]
 8015040:	695c      	ldr	r4, [r3, #20]
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	691b      	ldr	r3, [r3, #16]
 8015046:	4a74      	ldr	r2, [pc, #464]	; (8015218 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b8>)
 8015048:	9203      	str	r2, [sp, #12]
 801504a:	9302      	str	r3, [sp, #8]
 801504c:	4b73      	ldr	r3, [pc, #460]	; (801521c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2bc>)
 801504e:	9301      	str	r3, [sp, #4]
 8015050:	4b6d      	ldr	r3, [pc, #436]	; (8015208 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 8015052:	9300      	str	r3, [sp, #0]
 8015054:	23c7      	movs	r3, #199	; 0xc7
 8015056:	4a69      	ldr	r2, [pc, #420]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8015058:	496c      	ldr	r1, [pc, #432]	; (801520c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 801505a:	68f8      	ldr	r0, [r7, #12]
 801505c:	47a0      	blx	r4
 801505e:	2301      	movs	r3, #1
 8015060:	e0c3      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        // NOTE: Current int16 softmax output does not require symmetric scaling
        // - so no need to verify scale here.
      } else {
        TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteInt8);
 8015062:	687b      	ldr	r3, [r7, #4]
 8015064:	781b      	ldrb	r3, [r3, #0]
 8015066:	2b09      	cmp	r3, #9
 8015068:	d018      	beq.n	801509c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x13c>
 801506a:	68fb      	ldr	r3, [r7, #12]
 801506c:	695c      	ldr	r4, [r3, #20]
 801506e:	687b      	ldr	r3, [r7, #4]
 8015070:	781b      	ldrb	r3, [r3, #0]
 8015072:	4618      	mov	r0, r3
 8015074:	f7f9 fa38 	bl	800e4e8 <TfLiteTypeGetName>
 8015078:	4605      	mov	r5, r0
 801507a:	2009      	movs	r0, #9
 801507c:	f7f9 fa34 	bl	800e4e8 <TfLiteTypeGetName>
 8015080:	4603      	mov	r3, r0
 8015082:	9303      	str	r3, [sp, #12]
 8015084:	9502      	str	r5, [sp, #8]
 8015086:	4b62      	ldr	r3, [pc, #392]	; (8015210 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b0>)
 8015088:	9301      	str	r3, [sp, #4]
 801508a:	4b5b      	ldr	r3, [pc, #364]	; (80151f8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 801508c:	9300      	str	r3, [sp, #0]
 801508e:	23cb      	movs	r3, #203	; 0xcb
 8015090:	4a5a      	ldr	r2, [pc, #360]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8015092:	495b      	ldr	r1, [pc, #364]	; (8015200 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8015094:	68f8      	ldr	r0, [r7, #12]
 8015096:	47a0      	blx	r4
 8015098:	2301      	movs	r3, #1
 801509a:	e0a6      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE_EQ(context, output->params.zero_point, -128);
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	691b      	ldr	r3, [r3, #16]
 80150a0:	f113 0f80 	cmn.w	r3, #128	; 0x80
 80150a4:	d012      	beq.n	80150cc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x16c>
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	695c      	ldr	r4, [r3, #20]
 80150aa:	687b      	ldr	r3, [r7, #4]
 80150ac:	691b      	ldr	r3, [r3, #16]
 80150ae:	f06f 027f 	mvn.w	r2, #127	; 0x7f
 80150b2:	9203      	str	r2, [sp, #12]
 80150b4:	9302      	str	r3, [sp, #8]
 80150b6:	4b5a      	ldr	r3, [pc, #360]	; (8015220 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c0>)
 80150b8:	9301      	str	r3, [sp, #4]
 80150ba:	4b53      	ldr	r3, [pc, #332]	; (8015208 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a8>)
 80150bc:	9300      	str	r3, [sp, #0]
 80150be:	23cc      	movs	r3, #204	; 0xcc
 80150c0:	4a4e      	ldr	r2, [pc, #312]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80150c2:	4952      	ldr	r1, [pc, #328]	; (801520c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2ac>)
 80150c4:	68f8      	ldr	r0, [r7, #12]
 80150c6:	47a0      	blx	r4
 80150c8:	2301      	movs	r3, #1
 80150ca:	e08e      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
        TF_LITE_ENSURE(context, output->params.scale == 1.f / 256);
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	edd3 7a03 	vldr	s15, [r3, #12]
 80150d2:	ed9f 7a54 	vldr	s14, [pc, #336]	; 8015224 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c4>
 80150d6:	eef4 7a47 	vcmp.f32	s15, s14
 80150da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80150de:	d00a      	beq.n	80150f6 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x196>
 80150e0:	68fb      	ldr	r3, [r7, #12]
 80150e2:	695c      	ldr	r4, [r3, #20]
 80150e4:	4b50      	ldr	r3, [pc, #320]	; (8015228 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2c8>)
 80150e6:	9300      	str	r3, [sp, #0]
 80150e8:	23cd      	movs	r3, #205	; 0xcd
 80150ea:	4a44      	ldr	r2, [pc, #272]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80150ec:	494f      	ldr	r1, [pc, #316]	; (801522c <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2cc>)
 80150ee:	68f8      	ldr	r0, [r7, #12]
 80150f0:	47a0      	blx	r4
 80150f2:	2301      	movs	r3, #1
 80150f4:	e079      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>

    static const int kScaledDiffIntegerBits = 5;

    int input_left_shift;
    tflite::PreprocessSoftmaxScaling(
        static_cast<double>(params->beta),
 80150f6:	683b      	ldr	r3, [r7, #0]
 80150f8:	681b      	ldr	r3, [r3, #0]
    tflite::PreprocessSoftmaxScaling(
 80150fa:	4618      	mov	r0, r3
 80150fc:	f7eb fa44 	bl	8000588 <__aeabi_f2d>
 8015100:	4680      	mov	r8, r0
 8015102:	4689      	mov	r9, r1
        static_cast<double>(input->params.scale), kScaledDiffIntegerBits,
 8015104:	68bb      	ldr	r3, [r7, #8]
 8015106:	68db      	ldr	r3, [r3, #12]
    tflite::PreprocessSoftmaxScaling(
 8015108:	4618      	mov	r0, r3
 801510a:	f7eb fa3d 	bl	8000588 <__aeabi_f2d>
 801510e:	4682      	mov	sl, r0
 8015110:	468b      	mov	fp, r1
 8015112:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015114:	3308      	adds	r3, #8
 8015116:	f107 0214 	add.w	r2, r7, #20
 801511a:	4619      	mov	r1, r3
 801511c:	2005      	movs	r0, #5
 801511e:	ec4b ab11 	vmov	d1, sl, fp
 8015122:	ec49 8b10 	vmov	d0, r8, r9
 8015126:	f7f9 fb47 	bl	800e7b8 <_ZN6tflite24PreprocessSoftmaxScalingEddiPlPi>
        &op_data->input_multiplier, &input_left_shift);
    op_data->input_left_shift = input_left_shift;
 801512a:	697a      	ldr	r2, [r7, #20]
 801512c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801512e:	60da      	str	r2, [r3, #12]
    op_data->diff_min =
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
                                            op_data->input_left_shift);
 8015130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8015132:	68db      	ldr	r3, [r3, #12]
        -1.0 * tflite::CalculateInputRadius(kScaledDiffIntegerBits,
 8015134:	221f      	movs	r2, #31
 8015136:	4619      	mov	r1, r3
 8015138:	2005      	movs	r0, #5
 801513a:	f7f9 fb85 	bl	800e848 <_ZN6tflite20CalculateInputRadiusEiii>
 801513e:	4603      	mov	r3, r0
 8015140:	4618      	mov	r0, r3
 8015142:	f7eb fa0f 	bl	8000564 <__aeabi_i2d>
 8015146:	4602      	mov	r2, r0
 8015148:	460b      	mov	r3, r1
 801514a:	4614      	mov	r4, r2
 801514c:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
    op_data->diff_min =
 8015150:	4620      	mov	r0, r4
 8015152:	4629      	mov	r1, r5
 8015154:	f7eb fd20 	bl	8000b98 <__aeabi_d2iz>
 8015158:	4602      	mov	r2, r0
 801515a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801515c:	619a      	str	r2, [r3, #24]
                                            op_data->input_left_shift);
 801515e:	e043      	b.n	80151e8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x288>
  } else {
    TF_LITE_ENSURE_TYPES_EQ(context, input->type, kTfLiteFloat32);
 8015160:	68bb      	ldr	r3, [r7, #8]
 8015162:	781b      	ldrb	r3, [r3, #0]
 8015164:	2b01      	cmp	r3, #1
 8015166:	d018      	beq.n	801519a <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x23a>
 8015168:	68fb      	ldr	r3, [r7, #12]
 801516a:	695c      	ldr	r4, [r3, #20]
 801516c:	68bb      	ldr	r3, [r7, #8]
 801516e:	781b      	ldrb	r3, [r3, #0]
 8015170:	4618      	mov	r0, r3
 8015172:	f7f9 f9b9 	bl	800e4e8 <TfLiteTypeGetName>
 8015176:	4605      	mov	r5, r0
 8015178:	2001      	movs	r0, #1
 801517a:	f7f9 f9b5 	bl	800e4e8 <TfLiteTypeGetName>
 801517e:	4603      	mov	r3, r0
 8015180:	9303      	str	r3, [sp, #12]
 8015182:	9502      	str	r5, [sp, #8]
 8015184:	4b2a      	ldr	r3, [pc, #168]	; (8015230 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 8015186:	9301      	str	r3, [sp, #4]
 8015188:	4b22      	ldr	r3, [pc, #136]	; (8015214 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2b4>)
 801518a:	9300      	str	r3, [sp, #0]
 801518c:	23dd      	movs	r3, #221	; 0xdd
 801518e:	4a1b      	ldr	r2, [pc, #108]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 8015190:	491b      	ldr	r1, [pc, #108]	; (8015200 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 8015192:	68f8      	ldr	r0, [r7, #12]
 8015194:	47a0      	blx	r4
 8015196:	2301      	movs	r3, #1
 8015198:	e027      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    TF_LITE_ENSURE_TYPES_EQ(context, output->type, kTfLiteFloat32);
 801519a:	687b      	ldr	r3, [r7, #4]
 801519c:	781b      	ldrb	r3, [r3, #0]
 801519e:	2b01      	cmp	r3, #1
 80151a0:	d018      	beq.n	80151d4 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x274>
 80151a2:	68fb      	ldr	r3, [r7, #12]
 80151a4:	695c      	ldr	r4, [r3, #20]
 80151a6:	687b      	ldr	r3, [r7, #4]
 80151a8:	781b      	ldrb	r3, [r3, #0]
 80151aa:	4618      	mov	r0, r3
 80151ac:	f7f9 f99c 	bl	800e4e8 <TfLiteTypeGetName>
 80151b0:	4605      	mov	r5, r0
 80151b2:	2001      	movs	r0, #1
 80151b4:	f7f9 f998 	bl	800e4e8 <TfLiteTypeGetName>
 80151b8:	4603      	mov	r3, r0
 80151ba:	9303      	str	r3, [sp, #12]
 80151bc:	9502      	str	r5, [sp, #8]
 80151be:	4b1c      	ldr	r3, [pc, #112]	; (8015230 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2d0>)
 80151c0:	9301      	str	r3, [sp, #4]
 80151c2:	4b0d      	ldr	r3, [pc, #52]	; (80151f8 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x298>)
 80151c4:	9300      	str	r3, [sp, #0]
 80151c6:	23de      	movs	r3, #222	; 0xde
 80151c8:	4a0c      	ldr	r2, [pc, #48]	; (80151fc <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x29c>)
 80151ca:	490d      	ldr	r1, [pc, #52]	; (8015200 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x2a0>)
 80151cc:	68f8      	ldr	r0, [r7, #12]
 80151ce:	47a0      	blx	r4
 80151d0:	2301      	movs	r3, #1
 80151d2:	e00a      	b.n	80151ea <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE+0x28a>
    op_data->beta = static_cast<double>(params->beta);
 80151d4:	683b      	ldr	r3, [r7, #0]
 80151d6:	681b      	ldr	r3, [r3, #0]
 80151d8:	4618      	mov	r0, r3
 80151da:	f7eb f9d5 	bl	8000588 <__aeabi_f2d>
 80151de:	4602      	mov	r2, r0
 80151e0:	460b      	mov	r3, r1
 80151e2:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80151e4:	e9c1 2300 	strd	r2, r3, [r1]
  }
  return kTfLiteOk;
 80151e8:	2300      	movs	r3, #0
}
 80151ea:	4618      	mov	r0, r3
 80151ec:	3718      	adds	r7, #24
 80151ee:	46bd      	mov	sp, r7
 80151f0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80151f4:	0801ecac 	.word	0x0801ecac
 80151f8:	0801ecbc 	.word	0x0801ecbc
 80151fc:	0801ec3c 	.word	0x0801ec3c
 8015200:	0801ec90 	.word	0x0801ec90
 8015204:	0801ece8 	.word	0x0801ece8
 8015208:	0801ecec 	.word	0x0801ecec
 801520c:	0801eccc 	.word	0x0801eccc
 8015210:	0801ed08 	.word	0x0801ed08
 8015214:	0801ed14 	.word	0x0801ed14
 8015218:	ffff8000 	.word	0xffff8000
 801521c:	0801ed20 	.word	0x0801ed20
 8015220:	0801ed28 	.word	0x0801ed28
 8015224:	3b800000 	.word	0x3b800000
 8015228:	0801ed48 	.word	0x0801ed48
 801522c:	0801ed30 	.word	0x0801ed30
 8015230:	0801ed6c 	.word	0x0801ed6c

08015234 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode>:

}  // namespace

TfLiteStatus SoftmaxPrepare(TfLiteContext* context, TfLiteNode* node) {
 8015234:	b590      	push	{r4, r7, lr}
 8015236:	b089      	sub	sp, #36	; 0x24
 8015238:	af04      	add	r7, sp, #16
 801523a:	6078      	str	r0, [r7, #4]
 801523c:	6039      	str	r1, [r7, #0]
  TF_LITE_ENSURE_EQ(context, NumInputs(node), 1);
 801523e:	6838      	ldr	r0, [r7, #0]
 8015240:	f7fb fffa 	bl	8011238 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 8015244:	4603      	mov	r3, r0
 8015246:	2b01      	cmp	r3, #1
 8015248:	bf14      	ite	ne
 801524a:	2301      	movne	r3, #1
 801524c:	2300      	moveq	r3, #0
 801524e:	b2db      	uxtb	r3, r3
 8015250:	2b00      	cmp	r3, #0
 8015252:	d013      	beq.n	801527c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x48>
 8015254:	687b      	ldr	r3, [r7, #4]
 8015256:	695c      	ldr	r4, [r3, #20]
 8015258:	6838      	ldr	r0, [r7, #0]
 801525a:	f7fb ffed 	bl	8011238 <_ZN6tflite9NumInputsEPK10TfLiteNode>
 801525e:	4603      	mov	r3, r0
 8015260:	2201      	movs	r2, #1
 8015262:	9203      	str	r2, [sp, #12]
 8015264:	9302      	str	r3, [sp, #8]
 8015266:	4b25      	ldr	r3, [pc, #148]	; (80152fc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 8015268:	9301      	str	r3, [sp, #4]
 801526a:	4b25      	ldr	r3, [pc, #148]	; (8015300 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xcc>)
 801526c:	9300      	str	r3, [sp, #0]
 801526e:	23e7      	movs	r3, #231	; 0xe7
 8015270:	4a24      	ldr	r2, [pc, #144]	; (8015304 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 8015272:	4925      	ldr	r1, [pc, #148]	; (8015308 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 8015274:	6878      	ldr	r0, [r7, #4]
 8015276:	47a0      	blx	r4
 8015278:	2301      	movs	r3, #1
 801527a:	e03b      	b.n	80152f4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  TF_LITE_ENSURE_EQ(context, NumOutputs(node), 1);
 801527c:	6838      	ldr	r0, [r7, #0]
 801527e:	f7fb ffe8 	bl	8011252 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 8015282:	4603      	mov	r3, r0
 8015284:	2b01      	cmp	r3, #1
 8015286:	bf14      	ite	ne
 8015288:	2301      	movne	r3, #1
 801528a:	2300      	moveq	r3, #0
 801528c:	b2db      	uxtb	r3, r3
 801528e:	2b00      	cmp	r3, #0
 8015290:	d013      	beq.n	80152ba <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0x86>
 8015292:	687b      	ldr	r3, [r7, #4]
 8015294:	695c      	ldr	r4, [r3, #20]
 8015296:	6838      	ldr	r0, [r7, #0]
 8015298:	f7fb ffdb 	bl	8011252 <_ZN6tflite10NumOutputsEPK10TfLiteNode>
 801529c:	4603      	mov	r3, r0
 801529e:	2201      	movs	r2, #1
 80152a0:	9203      	str	r2, [sp, #12]
 80152a2:	9302      	str	r3, [sp, #8]
 80152a4:	4b15      	ldr	r3, [pc, #84]	; (80152fc <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc8>)
 80152a6:	9301      	str	r3, [sp, #4]
 80152a8:	4b18      	ldr	r3, [pc, #96]	; (801530c <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd8>)
 80152aa:	9300      	str	r3, [sp, #0]
 80152ac:	23e8      	movs	r3, #232	; 0xe8
 80152ae:	4a15      	ldr	r2, [pc, #84]	; (8015304 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 80152b0:	4915      	ldr	r1, [pc, #84]	; (8015308 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd4>)
 80152b2:	6878      	ldr	r0, [r7, #4]
 80152b4:	47a0      	blx	r4
 80152b6:	2301      	movs	r3, #1
 80152b8:	e01c      	b.n	80152f4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>
  const TfLiteTensor* input = GetInput(context, node, 0);
 80152ba:	2200      	movs	r2, #0
 80152bc:	6839      	ldr	r1, [r7, #0]
 80152be:	6878      	ldr	r0, [r7, #4]
 80152c0:	f7f9 fff7 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80152c4:	60f8      	str	r0, [r7, #12]
  TF_LITE_ENSURE(context, NumDimensions(input) >= 1);
 80152c6:	68f8      	ldr	r0, [r7, #12]
 80152c8:	f7f9 fbaf 	bl	800ea2a <_ZN6tflite13NumDimensionsEPK12TfLiteTensor>
 80152cc:	4603      	mov	r3, r0
 80152ce:	2b00      	cmp	r3, #0
 80152d0:	bfd4      	ite	le
 80152d2:	2301      	movle	r3, #1
 80152d4:	2300      	movgt	r3, #0
 80152d6:	b2db      	uxtb	r3, r3
 80152d8:	2b00      	cmp	r3, #0
 80152da:	d00a      	beq.n	80152f2 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xbe>
 80152dc:	687b      	ldr	r3, [r7, #4]
 80152de:	695c      	ldr	r4, [r3, #20]
 80152e0:	4b0b      	ldr	r3, [pc, #44]	; (8015310 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xdc>)
 80152e2:	9300      	str	r3, [sp, #0]
 80152e4:	23ea      	movs	r3, #234	; 0xea
 80152e6:	4a07      	ldr	r2, [pc, #28]	; (8015304 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xd0>)
 80152e8:	490a      	ldr	r1, [pc, #40]	; (8015314 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xe0>)
 80152ea:	6878      	ldr	r0, [r7, #4]
 80152ec:	47a0      	blx	r4
 80152ee:	2301      	movs	r3, #1
 80152f0:	e000      	b.n	80152f4 <_ZN6tflite3ops5micro11activations14SoftmaxPrepareEP13TfLiteContextP10TfLiteNode+0xc0>

  return kTfLiteOk;
 80152f2:	2300      	movs	r3, #0
}
 80152f4:	4618      	mov	r0, r3
 80152f6:	3714      	adds	r7, #20
 80152f8:	46bd      	mov	sp, r7
 80152fa:	bd90      	pop	{r4, r7, pc}
 80152fc:	0801ed7c 	.word	0x0801ed7c
 8015300:	0801ed80 	.word	0x0801ed80
 8015304:	0801ec3c 	.word	0x0801ec3c
 8015308:	0801eccc 	.word	0x0801eccc
 801530c:	0801ed90 	.word	0x0801ed90
 8015310:	0801eda4 	.word	0x0801eda4
 8015314:	0801ed30 	.word	0x0801ed30

08015318 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

// Takes a tensor and performs softmax along the last dimension.
void SoftmaxFloat(const TfLiteTensor* input, TfLiteTensor* output,
                  const SoftmaxParams& op_data) {
 8015318:	b590      	push	{r4, r7, lr}
 801531a:	b093      	sub	sp, #76	; 0x4c
 801531c:	af02      	add	r7, sp, #8
 801531e:	60f8      	str	r0, [r7, #12]
 8015320:	60b9      	str	r1, [r7, #8]
 8015322:	607a      	str	r2, [r7, #4]
  tflite::reference_ops::Softmax(
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8015324:	f107 0310 	add.w	r3, r7, #16
 8015328:	68f9      	ldr	r1, [r7, #12]
 801532a:	4618      	mov	r0, r3
 801532c:	f7fa f905 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8015330:	68f8      	ldr	r0, [r7, #12]
 8015332:	f7fa f920 	bl	800f576 <_ZN6tflite13GetTensorDataIfEEPKT_PK12TfLiteTensor>
 8015336:	4604      	mov	r4, r0
      GetTensorShape(output), GetTensorData<float>(output));
 8015338:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801533c:	68b9      	ldr	r1, [r7, #8]
 801533e:	4618      	mov	r0, r3
 8015340:	f7fa f8fb 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
  tflite::reference_ops::Softmax(
 8015344:	68b8      	ldr	r0, [r7, #8]
 8015346:	f7fa f927 	bl	800f598 <_ZN6tflite13GetTensorDataIfEEPT_P12TfLiteTensor>
 801534a:	4602      	mov	r2, r0
 801534c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015350:	f107 0110 	add.w	r1, r7, #16
 8015354:	9200      	str	r2, [sp, #0]
 8015356:	4622      	mov	r2, r4
 8015358:	6878      	ldr	r0, [r7, #4]
 801535a:	f7ff fd49 	bl	8014df0 <_ZN6tflite13reference_ops7SoftmaxERKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKfS6_Pf>
      GetTensorShape(output), GetTensorData<float>(output));
 801535e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015362:	4618      	mov	r0, r3
 8015364:	f7fa f814 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      op_data, GetTensorShape(input), GetTensorData<float>(input),
 8015368:	f107 0310 	add.w	r3, r7, #16
 801536c:	4618      	mov	r0, r3
 801536e:	f7fa f80f 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015372:	bf00      	nop
 8015374:	3744      	adds	r7, #68	; 0x44
 8015376:	46bd      	mov	sp, r7
 8015378:	bd90      	pop	{r4, r7, pc}

0801537a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>:

void SoftmaxQuantized(const TfLiteTensor* input, TfLiteTensor* output,
                      const SoftmaxParams& op_data) {
 801537a:	b590      	push	{r4, r7, lr}
 801537c:	b0ab      	sub	sp, #172	; 0xac
 801537e:	af02      	add	r7, sp, #8
 8015380:	60f8      	str	r0, [r7, #12]
 8015382:	60b9      	str	r1, [r7, #8]
 8015384:	607a      	str	r2, [r7, #4]
  if (input->type == kTfLiteUInt8) {
 8015386:	68fb      	ldr	r3, [r7, #12]
 8015388:	781b      	ldrb	r3, [r3, #0]
 801538a:	2b03      	cmp	r3, #3
 801538c:	d127      	bne.n	80153de <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x64>
    tflite::reference_ops::Softmax(
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 801538e:	f107 0310 	add.w	r3, r7, #16
 8015392:	68f9      	ldr	r1, [r7, #12]
 8015394:	4618      	mov	r0, r3
 8015396:	f7fa f8d0 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 801539a:	68f8      	ldr	r0, [r7, #12]
 801539c:	f7f9 ffb5 	bl	800f30a <_ZN6tflite13GetTensorDataIhEEPKT_PK12TfLiteTensor>
 80153a0:	4604      	mov	r4, r0
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 80153a2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80153a6:	68b9      	ldr	r1, [r7, #8]
 80153a8:	4618      	mov	r0, r3
 80153aa:	f7fa f8c6 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
    tflite::reference_ops::Softmax(
 80153ae:	68b8      	ldr	r0, [r7, #8]
 80153b0:	f7f9 ffbc 	bl	800f32c <_ZN6tflite13GetTensorDataIhEEPT_P12TfLiteTensor>
 80153b4:	4602      	mov	r2, r0
 80153b6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80153ba:	f107 0110 	add.w	r1, r7, #16
 80153be:	9200      	str	r2, [sp, #0]
 80153c0:	4622      	mov	r2, r4
 80153c2:	6878      	ldr	r0, [r7, #4]
 80153c4:	f000 f8c4 	bl	8015550 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
        GetTensorShape(output), GetTensorData<uint8_t>(output));
 80153c8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80153cc:	4618      	mov	r0, r3
 80153ce:	f7f9 ffdf 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
        op_data, GetTensorShape(input), GetTensorData<uint8_t>(input),
 80153d2:	f107 0310 	add.w	r3, r7, #16
 80153d6:	4618      	mov	r0, r3
 80153d8:	f7f9 ffda 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
      tflite::reference_ops::Softmax(
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
          GetTensorShape(output), GetTensorData<int8_t>(output));
    }
  }
}
 80153dc:	e052      	b.n	8015484 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
    if (output->type == kTfLiteInt16) {
 80153de:	68bb      	ldr	r3, [r7, #8]
 80153e0:	781b      	ldrb	r3, [r3, #0]
 80153e2:	2b07      	cmp	r3, #7
 80153e4:	d127      	bne.n	8015436 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0xbc>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 80153e6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80153ea:	68f9      	ldr	r1, [r7, #12]
 80153ec:	4618      	mov	r0, r3
 80153ee:	f7fa f8a4 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 80153f2:	68f8      	ldr	r0, [r7, #12]
 80153f4:	f7fa f8e1 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 80153f8:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int16_t>(output));
 80153fa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80153fe:	68b9      	ldr	r1, [r7, #8]
 8015400:	4618      	mov	r0, r3
 8015402:	f7fa f89a 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8015406:	68b8      	ldr	r0, [r7, #8]
 8015408:	f7fe f85e 	bl	80134c8 <_ZN6tflite13GetTensorDataIsEEPT_P12TfLiteTensor>
 801540c:	4602      	mov	r2, r0
 801540e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015412:	f107 0140 	add.w	r1, r7, #64	; 0x40
 8015416:	9200      	str	r2, [sp, #0]
 8015418:	4622      	mov	r2, r4
 801541a:	6878      	ldr	r0, [r7, #4]
 801541c:	f000 f9b3 	bl	8015786 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int16_t>(output));
 8015420:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8015424:	4618      	mov	r0, r3
 8015426:	f7f9 ffb3 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801542a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 801542e:	4618      	mov	r0, r3
 8015430:	f7f9 ffae 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015434:	e026      	b.n	8015484 <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE+0x10a>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 8015436:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801543a:	68f9      	ldr	r1, [r7, #12]
 801543c:	4618      	mov	r0, r3
 801543e:	f7fa f87c 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8015442:	68f8      	ldr	r0, [r7, #12]
 8015444:	f7fa f8b9 	bl	800f5ba <_ZN6tflite13GetTensorDataIaEEPKT_PK12TfLiteTensor>
 8015448:	4604      	mov	r4, r0
          GetTensorShape(output), GetTensorData<int8_t>(output));
 801544a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 801544e:	68b9      	ldr	r1, [r7, #8]
 8015450:	4618      	mov	r0, r3
 8015452:	f7fa f872 	bl	800f53a <_ZN6tflite14GetTensorShapeEPK12TfLiteTensor>
      tflite::reference_ops::Softmax(
 8015456:	68b8      	ldr	r0, [r7, #8]
 8015458:	f7fa f8c0 	bl	800f5dc <_ZN6tflite13GetTensorDataIaEEPT_P12TfLiteTensor>
 801545c:	4602      	mov	r2, r0
 801545e:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015462:	f107 0170 	add.w	r1, r7, #112	; 0x70
 8015466:	9200      	str	r2, [sp, #0]
 8015468:	4622      	mov	r2, r4
 801546a:	6878      	ldr	r0, [r7, #4]
 801546c:	f000 faa9 	bl	80159c2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>
          GetTensorShape(output), GetTensorData<int8_t>(output));
 8015470:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8015474:	4618      	mov	r0, r3
 8015476:	f7f9 ff8b 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
          op_data, GetTensorShape(input), GetTensorData<int8_t>(input),
 801547a:	f107 0370 	add.w	r3, r7, #112	; 0x70
 801547e:	4618      	mov	r0, r3
 8015480:	f7f9 ff86 	bl	800f390 <_ZN6tflite12RuntimeShapeD1Ev>
}
 8015484:	bf00      	nop
 8015486:	37a4      	adds	r7, #164	; 0xa4
 8015488:	46bd      	mov	sp, r7
 801548a:	bd90      	pop	{r4, r7, pc}

0801548c <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode>:

TfLiteStatus SoftmaxEval(TfLiteContext* context, TfLiteNode* node) {
 801548c:	b590      	push	{r4, r7, lr}
 801548e:	b097      	sub	sp, #92	; 0x5c
 8015490:	af02      	add	r7, sp, #8
 8015492:	6078      	str	r0, [r7, #4]
 8015494:	6039      	str	r1, [r7, #0]
  auto* params = static_cast<TfLiteSoftmaxParams*>(node->builtin_data);
 8015496:	683b      	ldr	r3, [r7, #0]
 8015498:	695b      	ldr	r3, [r3, #20]
 801549a:	64fb      	str	r3, [r7, #76]	; 0x4c

  const TfLiteTensor* input = GetInput(context, node, 0);
 801549c:	2200      	movs	r2, #0
 801549e:	6839      	ldr	r1, [r7, #0]
 80154a0:	6878      	ldr	r0, [r7, #4]
 80154a2:	f7f9 ff06 	bl	800f2b2 <_ZN6tflite8GetInputEPK13TfLiteContextPK10TfLiteNodei>
 80154a6:	64b8      	str	r0, [r7, #72]	; 0x48
  TfLiteTensor* output = GetOutput(context, node, 0);
 80154a8:	2200      	movs	r2, #0
 80154aa:	6839      	ldr	r1, [r7, #0]
 80154ac:	6878      	ldr	r0, [r7, #4]
 80154ae:	f7f9 ff16 	bl	800f2de <_ZN6tflite9GetOutputEP13TfLiteContextPK10TfLiteNodei>
 80154b2:	6478      	str	r0, [r7, #68]	; 0x44

  SoftmaxParams op_data;
  TF_LITE_ENSURE_STATUS(
 80154b4:	f107 0308 	add.w	r3, r7, #8
 80154b8:	9300      	str	r3, [sp, #0]
 80154ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80154bc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80154be:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80154c0:	6878      	ldr	r0, [r7, #4]
 80154c2:	f7ff fd4d 	bl	8014f60 <_ZN6tflite3ops5micro11activations12_GLOBAL__N_122CalculateSoftmaxParamsEP13TfLiteContextPK12TfLiteTensorPS6_PK19TfLiteSoftmaxParamsPNS_13SoftmaxParamsE>
 80154c6:	4603      	mov	r3, r0
 80154c8:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80154cc:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80154d0:	2b00      	cmp	r3, #0
 80154d2:	d002      	beq.n	80154da <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x4e>
 80154d4:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80154d8:	e02a      	b.n	8015530 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
      CalculateSoftmaxParams(context, input, output, params, &op_data));

  switch (input->type) {
 80154da:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80154dc:	781b      	ldrb	r3, [r3, #0]
 80154de:	2b09      	cmp	r3, #9
 80154e0:	d00f      	beq.n	8015502 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 80154e2:	2b09      	cmp	r3, #9
 80154e4:	dc16      	bgt.n	8015514 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
 80154e6:	2b01      	cmp	r3, #1
 80154e8:	d002      	beq.n	80154f0 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x64>
 80154ea:	2b03      	cmp	r3, #3
 80154ec:	d009      	beq.n	8015502 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x76>
 80154ee:	e011      	b.n	8015514 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0x88>
    case kTfLiteFloat32: {
      SoftmaxFloat(input, output, op_data);
 80154f0:	f107 0308 	add.w	r3, r7, #8
 80154f4:	461a      	mov	r2, r3
 80154f6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80154f8:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80154fa:	f7ff ff0d 	bl	8015318 <_ZN6tflite3ops5micro11activations12SoftmaxFloatEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 80154fe:	2300      	movs	r3, #0
 8015500:	e016      	b.n	8015530 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    case kTfLiteInt8:
    case kTfLiteUInt8: {
      SoftmaxQuantized(input, output, op_data);
 8015502:	f107 0308 	add.w	r3, r7, #8
 8015506:	461a      	mov	r2, r3
 8015508:	6c79      	ldr	r1, [r7, #68]	; 0x44
 801550a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801550c:	f7ff ff35 	bl	801537a <_ZN6tflite3ops5micro11activations16SoftmaxQuantizedEPK12TfLiteTensorPS3_RKNS_13SoftmaxParamsE>
      return kTfLiteOk;
 8015510:	2300      	movs	r3, #0
 8015512:	e00d      	b.n	8015530 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xa4>
    }
    default:
      TF_LITE_KERNEL_LOG(context, "Type %s (%d) not supported.",
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	695c      	ldr	r4, [r3, #20]
 8015518:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 801551a:	781b      	ldrb	r3, [r3, #0]
 801551c:	4618      	mov	r0, r3
 801551e:	f7f8 ffe3 	bl	800e4e8 <TfLiteTypeGetName>
 8015522:	4602      	mov	r2, r0
 8015524:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8015526:	781b      	ldrb	r3, [r3, #0]
 8015528:	4903      	ldr	r1, [pc, #12]	; (8015538 <_ZN6tflite3ops5micro11activations11SoftmaxEvalEP13TfLiteContextP10TfLiteNode+0xac>)
 801552a:	6878      	ldr	r0, [r7, #4]
 801552c:	47a0      	blx	r4
                         TfLiteTypeGetName(input->type), input->type);
      return kTfLiteError;
 801552e:	2301      	movs	r3, #1
  }
}
 8015530:	4618      	mov	r0, r3
 8015532:	3754      	adds	r7, #84	; 0x54
 8015534:	46bd      	mov	sp, r7
 8015536:	bd90      	pop	{r4, r7, pc}
 8015538:	0801edc0 	.word	0x0801edc0

0801553c <_ZN6tflite3ops5micro16Register_SOFTMAXEv>:
}  // namespace activations

TfLiteRegistration* Register_SOFTMAX() {
 801553c:	b480      	push	{r7}
 801553e:	af00      	add	r7, sp, #0
                                 /*invoke=*/activations::SoftmaxEval,
                                 /*profiling_string=*/nullptr,
                                 /*builtin_code=*/0,
                                 /*custom_name=*/nullptr,
                                 /*version=*/0};
  return &r;
 8015540:	4b02      	ldr	r3, [pc, #8]	; (801554c <_ZN6tflite3ops5micro16Register_SOFTMAXEv+0x10>)
}
 8015542:	4618      	mov	r0, r3
 8015544:	46bd      	mov	sp, r7
 8015546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801554a:	4770      	bx	lr
 801554c:	20000104 	.word	0x20000104

08015550 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:

// Quantized softmax with int8/uint8 input and int8/uint8/int16 output.
template <typename InputT, typename OutputT>
inline void Softmax(const SoftmaxParams& params,
 8015550:	b590      	push	{r4, r7, lr}
 8015552:	b09f      	sub	sp, #124	; 0x7c
 8015554:	af00      	add	r7, sp, #0
 8015556:	60f8      	str	r0, [r7, #12]
 8015558:	60b9      	str	r1, [r7, #8]
 801555a:	607a      	str	r2, [r7, #4]
 801555c:	603b      	str	r3, [r7, #0]
                    const RuntimeShape& input_shape, const InputT* input_data,
                    const RuntimeShape& output_shape, OutputT* output_data) {
  const int32 input_beta_multiplier = params.input_multiplier;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	689b      	ldr	r3, [r3, #8]
 8015562:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	68db      	ldr	r3, [r3, #12]
 8015568:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 801556a:	68fb      	ldr	r3, [r7, #12]
 801556c:	699b      	ldr	r3, [r3, #24]
 801556e:	65fb      	str	r3, [r7, #92]	; 0x5c
  using FixedPointScaledDiff =
      gemmlowp::FixedPoint<int32, kScaledDiffIntegerBits>;
  using FixedPointAccum = gemmlowp::FixedPoint<int32, kAccumulationIntegerBits>;
  using FixedPoint0 = gemmlowp::FixedPoint<int32, 0>;

  const int trailing_dim = input_shape.DimensionsCount() - 1;
 8015570:	68b8      	ldr	r0, [r7, #8]
 8015572:	f7f9 ff23 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 8015576:	4603      	mov	r3, r0
 8015578:	3b01      	subs	r3, #1
 801557a:	65bb      	str	r3, [r7, #88]	; 0x58
  const int outer_size =
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 801557c:	683a      	ldr	r2, [r7, #0]
 801557e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015580:	68b8      	ldr	r0, [r7, #8]
 8015582:	f7fd ffb2 	bl	80134ea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 8015586:	6578      	str	r0, [r7, #84]	; 0x54
  const int depth =
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 8015588:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 801558a:	683a      	ldr	r2, [r7, #0]
 801558c:	6db9      	ldr	r1, [r7, #88]	; 0x58
 801558e:	68b8      	ldr	r0, [r7, #8]
 8015590:	f7fb fe6c 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015594:	6538      	str	r0, [r7, #80]	; 0x50

  for (int i = 0; i < outer_size; ++i) {
 8015596:	2300      	movs	r3, #0
 8015598:	677b      	str	r3, [r7, #116]	; 0x74
 801559a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 801559c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801559e:	429a      	cmp	r2, r3
 80155a0:	f280 80ed 	bge.w	801577e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22e>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80155a4:	2300      	movs	r3, #0
 80155a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80155aa:	2300      	movs	r3, #0
 80155ac:	673b      	str	r3, [r7, #112]	; 0x70
 80155ae:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80155b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155b2:	429a      	cmp	r2, r3
 80155b4:	da16      	bge.n	80155e4 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x94>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80155b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80155b8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155ba:	fb02 f203 	mul.w	r2, r2, r3
 80155be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80155c0:	4413      	add	r3, r2
 80155c2:	461a      	mov	r2, r3
 80155c4:	687b      	ldr	r3, [r7, #4]
 80155c6:	441a      	add	r2, r3
 80155c8:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 80155cc:	4611      	mov	r1, r2
 80155ce:	4618      	mov	r0, r3
 80155d0:	f7ff f9fc 	bl	80149cc <_ZSt3maxIhERKT_S2_S2_>
 80155d4:	4603      	mov	r3, r0
 80155d6:	781b      	ldrb	r3, [r3, #0]
 80155d8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80155dc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80155de:	3301      	adds	r3, #1
 80155e0:	673b      	str	r3, [r7, #112]	; 0x70
 80155e2:	e7e4      	b.n	80155ae <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    }

    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 80155e4:	f000 fb0b 	bl	8015bfe <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 80155e8:	4603      	mov	r3, r0
 80155ea:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 80155ec:	2300      	movs	r3, #0
 80155ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80155f0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80155f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80155f4:	429a      	cmp	r2, r3
 80155f6:	da2f      	bge.n	8015658 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x108>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80155f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80155fa:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80155fc:	fb02 f203 	mul.w	r2, r2, r3
 8015600:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015602:	4413      	add	r3, r2
 8015604:	461a      	mov	r2, r3
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	4413      	add	r3, r2
 801560a:	781b      	ldrb	r3, [r3, #0]
 801560c:	461a      	mov	r2, r3
 801560e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8015612:	1ad3      	subs	r3, r2, r3
 8015614:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015616:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015618:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 801561a:	429a      	cmp	r2, r3
 801561c:	db18      	blt.n	8015650 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x100>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 801561e:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015620:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015622:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015624:	f7ff fba6 	bl	8014d74 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015628:	64b8      	str	r0, [r7, #72]	; 0x48
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 801562a:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 801562c:	f000 faef 	bl	8015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015630:	4603      	mov	r3, r0
 8015632:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8015634:	69f8      	ldr	r0, [r7, #28]
 8015636:	f000 fb19 	bl	8015c6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 801563a:	4603      	mov	r3, r0
 801563c:	4618      	mov	r0, r3
 801563e:	f000 fc5d 	bl	8015efc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015642:	4603      	mov	r3, r0
 8015644:	4619      	mov	r1, r3
 8015646:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015648:	f000 faf2 	bl	8015c30 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 801564c:	4603      	mov	r3, r0
 801564e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015650:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015652:	3301      	adds	r3, #1
 8015654:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015656:	e7cb      	b.n	80155f0 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa0>
      }
    }

    int num_bits_over_unit;
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015658:	f107 0328 	add.w	r3, r7, #40	; 0x28
 801565c:	4618      	mov	r0, r3
 801565e:	f000 fc67 	bl	8015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015662:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	f107 0224 	add.w	r2, r7, #36	; 0x24
 801566a:	210c      	movs	r1, #12
 801566c:	4618      	mov	r0, r3
 801566e:	f7ff fb94 	bl	8014d9a <_ZN6tflite13GetReciprocalEliPi>
 8015672:	4603      	mov	r3, r0
 8015674:	4618      	mov	r0, r3
 8015676:	f7fe f88a 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 801567a:	4603      	mov	r3, r0
 801567c:	623b      	str	r3, [r7, #32]

    for (int c = 0; c < depth; ++c) {
 801567e:	2300      	movs	r3, #0
 8015680:	66bb      	str	r3, [r7, #104]	; 0x68
 8015682:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015684:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015686:	429a      	cmp	r2, r3
 8015688:	da75      	bge.n	8015776 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x226>
      int32 input_diff =
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 801568a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801568c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801568e:	fb02 f203 	mul.w	r2, r2, r3
 8015692:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015694:	4413      	add	r3, r2
 8015696:	461a      	mov	r2, r3
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	4413      	add	r3, r2
 801569c:	781b      	ldrb	r3, [r3, #0]
 801569e:	461a      	mov	r2, r3
 80156a0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80156a4:	1ad3      	subs	r3, r2, r3
 80156a6:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80156a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80156aa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80156ac:	429a      	cmp	r2, r3
 80156ae:	db50      	blt.n	8015752 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x202>
        const int32 input_diff_rescaled =
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80156b0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80156b2:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80156b4:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80156b6:	f7ff fb5d 	bl	8014d74 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80156ba:	6438      	str	r0, [r7, #64]	; 0x40
                input_diff, input_beta_multiplier, input_beta_left_shift);
        const FixedPointScaledDiff scaled_diff_f8 =
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80156bc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80156be:	f000 faa6 	bl	8015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80156c2:	4603      	mov	r3, r0
 80156c4:	61bb      	str	r3, [r7, #24]

        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 80156c6:	69b8      	ldr	r0, [r7, #24]
 80156c8:	f000 fad0 	bl	8015c6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 80156cc:	4603      	mov	r3, r0
 80156ce:	617b      	str	r3, [r7, #20]
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
            (shifted_scale * exp_in_0).raw(),
 80156d0:	6979      	ldr	r1, [r7, #20]
 80156d2:	6a38      	ldr	r0, [r7, #32]
 80156d4:	f7fe fb54 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 80156d8:	4603      	mov	r3, r0
 80156da:	633b      	str	r3, [r7, #48]	; 0x30
 80156dc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80156e0:	4618      	mov	r0, r3
 80156e2:	f7fd ff43 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 80156e6:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 80156e8:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 80156ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80156ec:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 80156ee:	4611      	mov	r1, r2
 80156f0:	4618      	mov	r0, r3
 80156f2:	f7fb fb99 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80156f6:	63f8      	str	r0, [r7, #60]	; 0x3c

        const int32 shifted_output =
            unsat_output +
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 80156f8:	f7f9 f974 	bl	800e9e4 <_ZNSt14numeric_limitsIhE3minEv>
 80156fc:	4603      	mov	r3, r0
 80156fe:	461a      	mov	r2, r3
            unsat_output +
 8015700:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015702:	4413      	add	r3, r2
        const int32 shifted_output =
 8015704:	613b      	str	r3, [r7, #16]

        output_data[i * depth + c] = static_cast<OutputT>(std::max(
            std::min(shifted_output,
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8015706:	f7f9 f975 	bl	800e9f4 <_ZNSt14numeric_limitsIhE3maxEv>
 801570a:	4603      	mov	r3, r0
 801570c:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 801570e:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015712:	f107 0310 	add.w	r3, r7, #16
 8015716:	4611      	mov	r1, r2
 8015718:	4618      	mov	r0, r3
 801571a:	f7f9 fdb6 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 801571e:	4604      	mov	r4, r0
 8015720:	f7f9 f960 	bl	800e9e4 <_ZNSt14numeric_limitsIhE3minEv>
 8015724:	4603      	mov	r3, r0
 8015726:	63bb      	str	r3, [r7, #56]	; 0x38
 8015728:	f107 0338 	add.w	r3, r7, #56	; 0x38
 801572c:	4619      	mov	r1, r3
 801572e:	4620      	mov	r0, r4
 8015730:	f7f9 fd97 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8015734:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015736:	6819      	ldr	r1, [r3, #0]
 8015738:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 801573a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 801573c:	fb02 f203 	mul.w	r2, r2, r3
 8015740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015742:	4413      	add	r3, r2
 8015744:	461a      	mov	r2, r3
 8015746:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 801574a:	4413      	add	r3, r2
 801574c:	b2ca      	uxtb	r2, r1
 801574e:	701a      	strb	r2, [r3, #0]
 8015750:	e00d      	b.n	801576e <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x21e>
      } else {
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8015752:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015754:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015756:	fb02 f203 	mul.w	r2, r2, r3
 801575a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801575c:	4413      	add	r3, r2
 801575e:	461a      	mov	r2, r3
 8015760:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015764:	189c      	adds	r4, r3, r2
 8015766:	f7f9 f93d 	bl	800e9e4 <_ZNSt14numeric_limitsIhE3minEv>
 801576a:	4603      	mov	r3, r0
 801576c:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 801576e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015770:	3301      	adds	r3, #1
 8015772:	66bb      	str	r3, [r7, #104]	; 0x68
 8015774:	e785      	b.n	8015682 <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x132>
  for (int i = 0; i < outer_size; ++i) {
 8015776:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015778:	3301      	adds	r3, #1
 801577a:	677b      	str	r3, [r7, #116]	; 0x74
 801577c:	e70d      	b.n	801559a <_ZN6tflite13reference_ops7SoftmaxIhhEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
      }
    }
  }
}
 801577e:	bf00      	nop
 8015780:	377c      	adds	r7, #124	; 0x7c
 8015782:	46bd      	mov	sp, r7
 8015784:	bd90      	pop	{r4, r7, pc}

08015786 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 8015786:	b590      	push	{r4, r7, lr}
 8015788:	b09f      	sub	sp, #124	; 0x7c
 801578a:	af00      	add	r7, sp, #0
 801578c:	60f8      	str	r0, [r7, #12]
 801578e:	60b9      	str	r1, [r7, #8]
 8015790:	607a      	str	r2, [r7, #4]
 8015792:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 8015794:	68fb      	ldr	r3, [r7, #12]
 8015796:	689b      	ldr	r3, [r3, #8]
 8015798:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 801579a:	68fb      	ldr	r3, [r7, #12]
 801579c:	68db      	ldr	r3, [r3, #12]
 801579e:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	699b      	ldr	r3, [r3, #24]
 80157a4:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80157a6:	68b8      	ldr	r0, [r7, #8]
 80157a8:	f7f9 fe08 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80157ac:	4603      	mov	r3, r0
 80157ae:	3b01      	subs	r3, #1
 80157b0:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80157b2:	683a      	ldr	r2, [r7, #0]
 80157b4:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80157b6:	68b8      	ldr	r0, [r7, #8]
 80157b8:	f7fd fe97 	bl	80134ea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80157bc:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80157be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80157c0:	683a      	ldr	r2, [r7, #0]
 80157c2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80157c4:	68b8      	ldr	r0, [r7, #8]
 80157c6:	f7fb fd51 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 80157ca:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 80157cc:	2300      	movs	r3, #0
 80157ce:	677b      	str	r3, [r7, #116]	; 0x74
 80157d0:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80157d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80157d4:	429a      	cmp	r2, r3
 80157d6:	f280 80f0 	bge.w	80159ba <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 80157da:	2380      	movs	r3, #128	; 0x80
 80157dc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 80157e0:	2300      	movs	r3, #0
 80157e2:	673b      	str	r3, [r7, #112]	; 0x70
 80157e4:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80157e6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80157e8:	429a      	cmp	r2, r3
 80157ea:	da17      	bge.n	801581c <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 80157ec:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80157ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80157f0:	fb02 f203 	mul.w	r2, r2, r3
 80157f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80157f6:	4413      	add	r3, r2
 80157f8:	461a      	mov	r2, r3
 80157fa:	687b      	ldr	r3, [r7, #4]
 80157fc:	441a      	add	r2, r3
 80157fe:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8015802:	4611      	mov	r1, r2
 8015804:	4618      	mov	r0, r3
 8015806:	f7ff f909 	bl	8014a1c <_ZSt3maxIaERKT_S2_S2_>
 801580a:	4603      	mov	r3, r0
 801580c:	f993 3000 	ldrsb.w	r3, [r3]
 8015810:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015814:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015816:	3301      	adds	r3, #1
 8015818:	673b      	str	r3, [r7, #112]	; 0x70
 801581a:	e7e3      	b.n	80157e4 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 801581c:	f000 f9ef 	bl	8015bfe <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015820:	4603      	mov	r3, r0
 8015822:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015824:	2300      	movs	r3, #0
 8015826:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015828:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 801582a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801582c:	429a      	cmp	r2, r3
 801582e:	da30      	bge.n	8015892 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015830:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015832:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015834:	fb02 f203 	mul.w	r2, r2, r3
 8015838:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801583a:	4413      	add	r3, r2
 801583c:	461a      	mov	r2, r3
 801583e:	687b      	ldr	r3, [r7, #4]
 8015840:	4413      	add	r3, r2
 8015842:	f993 3000 	ldrsb.w	r3, [r3]
 8015846:	461a      	mov	r2, r3
 8015848:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 801584c:	1ad3      	subs	r3, r2, r3
 801584e:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015850:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015852:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015854:	429a      	cmp	r2, r3
 8015856:	db18      	blt.n	801588a <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015858:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 801585a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 801585c:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 801585e:	f7ff fa89 	bl	8014d74 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015862:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015864:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015866:	f000 f9d2 	bl	8015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801586a:	4603      	mov	r3, r0
 801586c:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 801586e:	69f8      	ldr	r0, [r7, #28]
 8015870:	f000 f9fc 	bl	8015c6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015874:	4603      	mov	r3, r0
 8015876:	4618      	mov	r0, r3
 8015878:	f000 fb40 	bl	8015efc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 801587c:	4603      	mov	r3, r0
 801587e:	4619      	mov	r1, r3
 8015880:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015882:	f000 f9d5 	bl	8015c30 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015886:	4603      	mov	r3, r0
 8015888:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 801588a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 801588c:	3301      	adds	r3, #1
 801588e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015890:	e7ca      	b.n	8015828 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015892:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015896:	4618      	mov	r0, r3
 8015898:	f000 fb4a 	bl	8015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 801589c:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 801589e:	681b      	ldr	r3, [r3, #0]
 80158a0:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80158a4:	210c      	movs	r1, #12
 80158a6:	4618      	mov	r0, r3
 80158a8:	f7ff fa77 	bl	8014d9a <_ZN6tflite13GetReciprocalEliPi>
 80158ac:	4603      	mov	r3, r0
 80158ae:	4618      	mov	r0, r3
 80158b0:	f7fd ff6d 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 80158b4:	4603      	mov	r3, r0
 80158b6:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 80158b8:	2300      	movs	r3, #0
 80158ba:	66bb      	str	r3, [r7, #104]	; 0x68
 80158bc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80158be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80158c0:	429a      	cmp	r2, r3
 80158c2:	da76      	bge.n	80159b2 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 80158c4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80158c6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80158c8:	fb02 f203 	mul.w	r2, r2, r3
 80158cc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80158ce:	4413      	add	r3, r2
 80158d0:	461a      	mov	r2, r3
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	4413      	add	r3, r2
 80158d6:	f993 3000 	ldrsb.w	r3, [r3]
 80158da:	461a      	mov	r2, r3
 80158dc:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 80158e0:	1ad3      	subs	r3, r2, r3
 80158e2:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 80158e4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80158e6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80158e8:	429a      	cmp	r2, r3
 80158ea:	db50      	blt.n	801598e <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 80158ec:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80158ee:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80158f0:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80158f2:	f7ff fa3f 	bl	8014d74 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 80158f6:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 80158f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80158fa:	f000 f988 	bl	8015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 80158fe:	4603      	mov	r3, r0
 8015900:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015902:	69b8      	ldr	r0, [r7, #24]
 8015904:	f000 f9b2 	bl	8015c6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015908:	4603      	mov	r3, r0
 801590a:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 801590c:	6979      	ldr	r1, [r7, #20]
 801590e:	6a38      	ldr	r0, [r7, #32]
 8015910:	f7fe fa36 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015914:	4603      	mov	r3, r0
 8015916:	633b      	str	r3, [r7, #48]	; 0x30
 8015918:	f107 0330 	add.w	r3, r7, #48	; 0x30
 801591c:	4618      	mov	r0, r3
 801591e:	f7fd fe25 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015922:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015924:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015926:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015928:	320f      	adds	r2, #15
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 801592a:	4611      	mov	r1, r2
 801592c:	4618      	mov	r0, r3
 801592e:	f7fb fa7b 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015932:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8015934:	f7f9 f866 	bl	800ea04 <_ZNSt14numeric_limitsIsE3minEv>
 8015938:	4603      	mov	r3, r0
 801593a:	461a      	mov	r2, r3
            unsat_output +
 801593c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801593e:	4413      	add	r3, r2
        const int32 shifted_output =
 8015940:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8015942:	f7f9 f869 	bl	800ea18 <_ZNSt14numeric_limitsIsE3maxEv>
 8015946:	4603      	mov	r3, r0
 8015948:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 801594a:	f107 0234 	add.w	r2, r7, #52	; 0x34
 801594e:	f107 0310 	add.w	r3, r7, #16
 8015952:	4611      	mov	r1, r2
 8015954:	4618      	mov	r0, r3
 8015956:	f7f9 fc98 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 801595a:	4604      	mov	r4, r0
 801595c:	f7f9 f852 	bl	800ea04 <_ZNSt14numeric_limitsIsE3minEv>
 8015960:	4603      	mov	r3, r0
 8015962:	63bb      	str	r3, [r7, #56]	; 0x38
 8015964:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015968:	4619      	mov	r1, r3
 801596a:	4620      	mov	r0, r4
 801596c:	f7f9 fc79 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8015970:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015972:	6819      	ldr	r1, [r3, #0]
 8015974:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015976:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015978:	fb02 f203 	mul.w	r2, r2, r3
 801597c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 801597e:	4413      	add	r3, r2
 8015980:	005b      	lsls	r3, r3, #1
 8015982:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8015986:	4413      	add	r3, r2
 8015988:	b20a      	sxth	r2, r1
 801598a:	801a      	strh	r2, [r3, #0]
 801598c:	e00d      	b.n	80159aa <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 801598e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015990:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015992:	fb02 f203 	mul.w	r2, r2, r3
 8015996:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015998:	4413      	add	r3, r2
 801599a:	005b      	lsls	r3, r3, #1
 801599c:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80159a0:	18d4      	adds	r4, r2, r3
 80159a2:	f7f9 f82f 	bl	800ea04 <_ZNSt14numeric_limitsIsE3minEv>
 80159a6:	4603      	mov	r3, r0
 80159a8:	8023      	strh	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 80159aa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80159ac:	3301      	adds	r3, #1
 80159ae:	66bb      	str	r3, [r7, #104]	; 0x68
 80159b0:	e784      	b.n	80158bc <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 80159b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80159b4:	3301      	adds	r3, #1
 80159b6:	677b      	str	r3, [r7, #116]	; 0x74
 80159b8:	e70a      	b.n	80157d0 <_ZN6tflite13reference_ops7SoftmaxIasEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 80159ba:	bf00      	nop
 80159bc:	377c      	adds	r7, #124	; 0x7c
 80159be:	46bd      	mov	sp, r7
 80159c0:	bd90      	pop	{r4, r7, pc}

080159c2 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_>:
inline void Softmax(const SoftmaxParams& params,
 80159c2:	b590      	push	{r4, r7, lr}
 80159c4:	b09f      	sub	sp, #124	; 0x7c
 80159c6:	af00      	add	r7, sp, #0
 80159c8:	60f8      	str	r0, [r7, #12]
 80159ca:	60b9      	str	r1, [r7, #8]
 80159cc:	607a      	str	r2, [r7, #4]
 80159ce:	603b      	str	r3, [r7, #0]
  const int32 input_beta_multiplier = params.input_multiplier;
 80159d0:	68fb      	ldr	r3, [r7, #12]
 80159d2:	689b      	ldr	r3, [r3, #8]
 80159d4:	667b      	str	r3, [r7, #100]	; 0x64
  const int32 input_beta_left_shift = params.input_left_shift;
 80159d6:	68fb      	ldr	r3, [r7, #12]
 80159d8:	68db      	ldr	r3, [r3, #12]
 80159da:	663b      	str	r3, [r7, #96]	; 0x60
  const int diff_min = params.diff_min;
 80159dc:	68fb      	ldr	r3, [r7, #12]
 80159de:	699b      	ldr	r3, [r3, #24]
 80159e0:	65fb      	str	r3, [r7, #92]	; 0x5c
  const int trailing_dim = input_shape.DimensionsCount() - 1;
 80159e2:	68b8      	ldr	r0, [r7, #8]
 80159e4:	f7f9 fcea 	bl	800f3bc <_ZNK6tflite12RuntimeShape15DimensionsCountEv>
 80159e8:	4603      	mov	r3, r0
 80159ea:	3b01      	subs	r3, #1
 80159ec:	65bb      	str	r3, [r7, #88]	; 0x58
      MatchingFlatSizeSkipDim(input_shape, trailing_dim, output_shape);
 80159ee:	683a      	ldr	r2, [r7, #0]
 80159f0:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80159f2:	68b8      	ldr	r0, [r7, #8]
 80159f4:	f7fd fd79 	bl	80134ea <_ZN6tflite23MatchingFlatSizeSkipDimERKNS_12RuntimeShapeEiS2_>
 80159f8:	6578      	str	r0, [r7, #84]	; 0x54
      MatchingDim(input_shape, trailing_dim, output_shape, trailing_dim);
 80159fa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80159fc:	683a      	ldr	r2, [r7, #0]
 80159fe:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8015a00:	68b8      	ldr	r0, [r7, #8]
 8015a02:	f7fb fc33 	bl	801126c <_ZN6tflite11MatchingDimERKNS_12RuntimeShapeEiS2_i>
 8015a06:	6538      	str	r0, [r7, #80]	; 0x50
  for (int i = 0; i < outer_size; ++i) {
 8015a08:	2300      	movs	r3, #0
 8015a0a:	677b      	str	r3, [r7, #116]	; 0x74
 8015a0c:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8015a0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8015a10:	429a      	cmp	r2, r3
 8015a12:	f280 80f0 	bge.w	8015bf6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x234>
    InputT max_in_row = std::numeric_limits<InputT>::min();
 8015a16:	2380      	movs	r3, #128	; 0x80
 8015a18:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015a1c:	2300      	movs	r3, #0
 8015a1e:	673b      	str	r3, [r7, #112]	; 0x70
 8015a20:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8015a22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a24:	429a      	cmp	r2, r3
 8015a26:	da17      	bge.n	8015a58 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x96>
      max_in_row = std::max(max_in_row, input_data[i * depth + c]);
 8015a28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a2a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a2c:	fb02 f203 	mul.w	r2, r2, r3
 8015a30:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a32:	4413      	add	r3, r2
 8015a34:	461a      	mov	r2, r3
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	441a      	add	r2, r3
 8015a3a:	f107 032f 	add.w	r3, r7, #47	; 0x2f
 8015a3e:	4611      	mov	r1, r2
 8015a40:	4618      	mov	r0, r3
 8015a42:	f7fe ffeb 	bl	8014a1c <_ZSt3maxIaERKT_S2_S2_>
 8015a46:	4603      	mov	r3, r0
 8015a48:	f993 3000 	ldrsb.w	r3, [r3]
 8015a4c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    for (int c = 0; c < depth; ++c) {
 8015a50:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8015a52:	3301      	adds	r3, #1
 8015a54:	673b      	str	r3, [r7, #112]	; 0x70
 8015a56:	e7e3      	b.n	8015a20 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x5e>
    FixedPointAccum sum_of_exps = FixedPointAccum::Zero();
 8015a58:	f000 f8d1 	bl	8015bfe <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>
 8015a5c:	4603      	mov	r3, r0
 8015a5e:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015a60:	2300      	movs	r3, #0
 8015a62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015a64:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8015a66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015a68:	429a      	cmp	r2, r3
 8015a6a:	da30      	bge.n	8015ace <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x10c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015a6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015a6e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015a70:	fb02 f203 	mul.w	r2, r2, r3
 8015a74:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015a76:	4413      	add	r3, r2
 8015a78:	461a      	mov	r2, r3
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	4413      	add	r3, r2
 8015a7e:	f993 3000 	ldrsb.w	r3, [r3]
 8015a82:	461a      	mov	r2, r3
 8015a84:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8015a88:	1ad3      	subs	r3, r2, r3
 8015a8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      if (input_diff >= diff_min) {
 8015a8c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8015a8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015a90:	429a      	cmp	r2, r3
 8015a92:	db18      	blt.n	8015ac6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x104>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015a94:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015a96:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015a98:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8015a9a:	f7ff f96b 	bl	8014d74 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015a9e:	64b8      	str	r0, [r7, #72]	; 0x48
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015aa0:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8015aa2:	f000 f8b4 	bl	8015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015aa6:	4603      	mov	r3, r0
 8015aa8:	61fb      	str	r3, [r7, #28]
        sum_of_exps = sum_of_exps + gemmlowp::Rescale<kAccumulationIntegerBits>(
 8015aaa:	69f8      	ldr	r0, [r7, #28]
 8015aac:	f000 f8de 	bl	8015c6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015ab0:	4603      	mov	r3, r0
 8015ab2:	4618      	mov	r0, r3
 8015ab4:	f000 fa22 	bl	8015efc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015ab8:	4603      	mov	r3, r0
 8015aba:	4619      	mov	r1, r3
 8015abc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015abe:	f000 f8b7 	bl	8015c30 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ac2:	4603      	mov	r3, r0
 8015ac4:	62bb      	str	r3, [r7, #40]	; 0x28
    for (int c = 0; c < depth; ++c) {
 8015ac6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8015ac8:	3301      	adds	r3, #1
 8015aca:	66fb      	str	r3, [r7, #108]	; 0x6c
 8015acc:	e7ca      	b.n	8015a64 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0xa2>
        sum_of_exps.raw(), kAccumulationIntegerBits, &num_bits_over_unit));
 8015ace:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8015ad2:	4618      	mov	r0, r3
 8015ad4:	f000 fa2c 	bl	8015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015ad8:	4603      	mov	r3, r0
    FixedPoint0 shifted_scale = FixedPoint0::FromRaw(GetReciprocal(
 8015ada:	681b      	ldr	r3, [r3, #0]
 8015adc:	f107 0224 	add.w	r2, r7, #36	; 0x24
 8015ae0:	210c      	movs	r1, #12
 8015ae2:	4618      	mov	r0, r3
 8015ae4:	f7ff f959 	bl	8014d9a <_ZN6tflite13GetReciprocalEliPi>
 8015ae8:	4603      	mov	r3, r0
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7fd fe4f 	bl	801378e <_ZN8gemmlowp10FixedPointIlLi0EE7FromRawEl>
 8015af0:	4603      	mov	r3, r0
 8015af2:	623b      	str	r3, [r7, #32]
    for (int c = 0; c < depth; ++c) {
 8015af4:	2300      	movs	r3, #0
 8015af6:	66bb      	str	r3, [r7, #104]	; 0x68
 8015af8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8015afa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8015afc:	429a      	cmp	r2, r3
 8015afe:	da76      	bge.n	8015bee <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x22c>
          static_cast<int32>(input_data[i * depth + c]) - max_in_row;
 8015b00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015b02:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015b04:	fb02 f203 	mul.w	r2, r2, r3
 8015b08:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015b0a:	4413      	add	r3, r2
 8015b0c:	461a      	mov	r2, r3
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	4413      	add	r3, r2
 8015b12:	f993 3000 	ldrsb.w	r3, [r3]
 8015b16:	461a      	mov	r2, r3
 8015b18:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
      int32 input_diff =
 8015b1c:	1ad3      	subs	r3, r2, r3
 8015b1e:	647b      	str	r3, [r7, #68]	; 0x44
      if (input_diff >= diff_min) {
 8015b20:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8015b22:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8015b24:	429a      	cmp	r2, r3
 8015b26:	db50      	blt.n	8015bca <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x208>
            MultiplyByQuantizedMultiplierGreaterThanOne(
 8015b28:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8015b2a:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8015b2c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8015b2e:	f7ff f921 	bl	8014d74 <_ZN6tflite43MultiplyByQuantizedMultiplierGreaterThanOneElli>
 8015b32:	6438      	str	r0, [r7, #64]	; 0x40
            FixedPointScaledDiff::FromRaw(input_diff_rescaled);
 8015b34:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8015b36:	f000 f86a 	bl	8015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	61bb      	str	r3, [r7, #24]
        FixedPoint0 exp_in_0 = exp_on_negative_values(scaled_diff_f8);
 8015b3e:	69b8      	ldr	r0, [r7, #24]
 8015b40:	f000 f894 	bl	8015c6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>
 8015b44:	4603      	mov	r3, r0
 8015b46:	617b      	str	r3, [r7, #20]
            (shifted_scale * exp_in_0).raw(),
 8015b48:	6979      	ldr	r1, [r7, #20]
 8015b4a:	6a38      	ldr	r0, [r7, #32]
 8015b4c:	f7fe f918 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015b50:	4603      	mov	r3, r0
 8015b52:	633b      	str	r3, [r7, #48]	; 0x30
 8015b54:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8015b58:	4618      	mov	r0, r3
 8015b5a:	f7fd fd07 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015b5e:	4603      	mov	r3, r0
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015b60:	681b      	ldr	r3, [r3, #0]
            num_bits_over_unit + 31 - (sizeof(OutputT) * 8));
 8015b62:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015b64:	3217      	adds	r2, #23
        int32 unsat_output = gemmlowp::RoundingDivideByPOT(
 8015b66:	4611      	mov	r1, r2
 8015b68:	4618      	mov	r0, r3
 8015b6a:	f7fb f95d 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 8015b6e:	63f8      	str	r0, [r7, #60]	; 0x3c
            static_cast<int32>(std::numeric_limits<OutputT>::min());
 8015b70:	f7f8 ff27 	bl	800e9c2 <_ZNSt14numeric_limitsIaE3minEv>
 8015b74:	4603      	mov	r3, r0
 8015b76:	461a      	mov	r2, r3
            unsat_output +
 8015b78:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8015b7a:	4413      	add	r3, r2
        const int32 shifted_output =
 8015b7c:	613b      	str	r3, [r7, #16]
                     static_cast<int32>(std::numeric_limits<OutputT>::max())),
 8015b7e:	f7f8 ff29 	bl	800e9d4 <_ZNSt14numeric_limitsIaE3maxEv>
 8015b82:	4603      	mov	r3, r0
 8015b84:	637b      	str	r3, [r7, #52]	; 0x34
            static_cast<int32>(std::numeric_limits<OutputT>::min())));
 8015b86:	f107 0234 	add.w	r2, r7, #52	; 0x34
 8015b8a:	f107 0310 	add.w	r3, r7, #16
 8015b8e:	4611      	mov	r1, r2
 8015b90:	4618      	mov	r0, r3
 8015b92:	f7f9 fb7a 	bl	800f28a <_ZSt3minIlERKT_S2_S2_>
 8015b96:	4604      	mov	r4, r0
 8015b98:	f7f8 ff13 	bl	800e9c2 <_ZNSt14numeric_limitsIaE3minEv>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	63bb      	str	r3, [r7, #56]	; 0x38
 8015ba0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015ba4:	4619      	mov	r1, r3
 8015ba6:	4620      	mov	r0, r4
 8015ba8:	f7f9 fb5b 	bl	800f262 <_ZSt3maxIlERKT_S2_S2_>
 8015bac:	4603      	mov	r3, r0
        output_data[i * depth + c] = static_cast<OutputT>(std::max(
 8015bae:	6819      	ldr	r1, [r3, #0]
 8015bb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015bb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015bb4:	fb02 f203 	mul.w	r2, r2, r3
 8015bb8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bba:	4413      	add	r3, r2
 8015bbc:	461a      	mov	r2, r3
 8015bbe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015bc2:	4413      	add	r3, r2
 8015bc4:	b24a      	sxtb	r2, r1
 8015bc6:	701a      	strb	r2, [r3, #0]
 8015bc8:	e00d      	b.n	8015be6 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x224>
        output_data[i * depth + c] = std::numeric_limits<OutputT>::min();
 8015bca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015bcc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8015bce:	fb02 f203 	mul.w	r2, r2, r3
 8015bd2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015bd4:	4413      	add	r3, r2
 8015bd6:	461a      	mov	r2, r3
 8015bd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8015bdc:	189c      	adds	r4, r3, r2
 8015bde:	f7f8 fef0 	bl	800e9c2 <_ZNSt14numeric_limitsIaE3minEv>
 8015be2:	4603      	mov	r3, r0
 8015be4:	7023      	strb	r3, [r4, #0]
    for (int c = 0; c < depth; ++c) {
 8015be6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8015be8:	3301      	adds	r3, #1
 8015bea:	66bb      	str	r3, [r7, #104]	; 0x68
 8015bec:	e784      	b.n	8015af8 <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x136>
  for (int i = 0; i < outer_size; ++i) {
 8015bee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8015bf0:	3301      	adds	r3, #1
 8015bf2:	677b      	str	r3, [r7, #116]	; 0x74
 8015bf4:	e70a      	b.n	8015a0c <_ZN6tflite13reference_ops7SoftmaxIaaEEvRKNS_13SoftmaxParamsERKNS_12RuntimeShapeEPKT_S7_PT0_+0x4a>
}
 8015bf6:	bf00      	nop
 8015bf8:	377c      	adds	r7, #124	; 0x7c
 8015bfa:	46bd      	mov	sp, r7
 8015bfc:	bd90      	pop	{r4, r7, pc}

08015bfe <_ZN8gemmlowp10FixedPointIlLi12EE4ZeroEv>:
  static FixedPoint Zero() { return FromScalarRaw(0); }
 8015bfe:	b580      	push	{r7, lr}
 8015c00:	af00      	add	r7, sp, #0
 8015c02:	2000      	movs	r0, #0
 8015c04:	f000 f99f 	bl	8015f46 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>
 8015c08:	4603      	mov	r3, r0
 8015c0a:	4618      	mov	r0, r3
 8015c0c:	bd80      	pop	{r7, pc}

08015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015c0e:	b580      	push	{r7, lr}
 8015c10:	b084      	sub	sp, #16
 8015c12:	af00      	add	r7, sp, #0
 8015c14:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015c16:	f107 030c 	add.w	r3, r7, #12
 8015c1a:	4618      	mov	r0, r3
 8015c1c:	f000 f9a7 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015c20:	4602      	mov	r2, r0
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	6013      	str	r3, [r2, #0]
    return retval;
 8015c26:	68fb      	ldr	r3, [r7, #12]
  }
 8015c28:	4618      	mov	r0, r3
 8015c2a:	3710      	adds	r7, #16
 8015c2c:	46bd      	mov	sp, r7
 8015c2e:	bd80      	pop	{r7, pc}

08015c30 <_ZN8gemmlowpplIlLi12EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator+, Add)
 8015c30:	b590      	push	{r4, r7, lr}
 8015c32:	b083      	sub	sp, #12
 8015c34:	af00      	add	r7, sp, #0
 8015c36:	6078      	str	r0, [r7, #4]
 8015c38:	6039      	str	r1, [r7, #0]
 8015c3a:	1d3b      	adds	r3, r7, #4
 8015c3c:	4618      	mov	r0, r3
 8015c3e:	f000 f977 	bl	8015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015c42:	4603      	mov	r3, r0
 8015c44:	681c      	ldr	r4, [r3, #0]
 8015c46:	463b      	mov	r3, r7
 8015c48:	4618      	mov	r0, r3
 8015c4a:	f000 f971 	bl	8015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015c4e:	4603      	mov	r3, r0
 8015c50:	681b      	ldr	r3, [r3, #0]
 8015c52:	4619      	mov	r1, r3
 8015c54:	4620      	mov	r0, r4
 8015c56:	f7fb fa73 	bl	8011140 <_ZN8gemmlowp3AddIlEET_S1_S1_>
 8015c5a:	4603      	mov	r3, r0
 8015c5c:	4618      	mov	r0, r3
 8015c5e:	f000 f991 	bl	8015f84 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>
 8015c62:	4603      	mov	r3, r0
 8015c64:	4618      	mov	r0, r3
 8015c66:	370c      	adds	r7, #12
 8015c68:	46bd      	mov	sp, r7
 8015c6a:	bd90      	pop	{r4, r7, pc}

08015c6c <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE>:
FixedPoint<tRawType, 0> exp_on_negative_values(
 8015c6c:	b590      	push	{r4, r7, lr}
 8015c6e:	b091      	sub	sp, #68	; 0x44
 8015c70:	af00      	add	r7, sp, #0
 8015c72:	6078      	str	r0, [r7, #4]
  const InputF kOneQuarter = InputF::template ConstantPOT<-2>();
 8015c74:	f000 f997 	bl	8015fa6 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>
 8015c78:	4603      	mov	r3, r0
 8015c7a:	637b      	str	r3, [r7, #52]	; 0x34
  InputF mask = kOneQuarter - InputF::FromScalarRaw(1);
 8015c7c:	2001      	movs	r0, #1
 8015c7e:	f000 f99b 	bl	8015fb8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8015c82:	4603      	mov	r3, r0
 8015c84:	4619      	mov	r1, r3
 8015c86:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8015c88:	f000 f9aa 	bl	8015fe0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015c8c:	4603      	mov	r3, r0
 8015c8e:	633b      	str	r3, [r7, #48]	; 0x30
  InputF a_mod_quarter_minus_one_quarter = (a & mask) - kOneQuarter;
 8015c90:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8015c92:	6878      	ldr	r0, [r7, #4]
 8015c94:	f000 f9c2 	bl	801601c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015c98:	4603      	mov	r3, r0
 8015c9a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8015c9c:	4618      	mov	r0, r3
 8015c9e:	f000 f99f 	bl	8015fe0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015ca2:	4603      	mov	r3, r0
 8015ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  ResultF result = exp_on_interval_between_negative_one_quarter_and_0_excl(
 8015ca6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015ca8:	f000 f9d6 	bl	8016058 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>
 8015cac:	4603      	mov	r3, r0
 8015cae:	4618      	mov	r0, r3
 8015cb0:	f7fe f804 	bl	8013cbc <_ZN8gemmlowp55exp_on_interval_between_negative_one_quarter_and_0_exclIlEENS_10FixedPointIT_Li0EEES3_>
 8015cb4:	4603      	mov	r3, r0
 8015cb6:	62bb      	str	r3, [r7, #40]	; 0x28
  tRawType remainder = (a_mod_quarter_minus_one_quarter - a).raw();
 8015cb8:	6879      	ldr	r1, [r7, #4]
 8015cba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8015cbc:	f000 f990 	bl	8015fe0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>
 8015cc0:	4603      	mov	r3, r0
 8015cc2:	63bb      	str	r3, [r7, #56]	; 0x38
 8015cc4:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8015cc8:	4618      	mov	r0, r3
 8015cca:	f000 f950 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015cce:	4603      	mov	r3, r0
 8015cd0:	681b      	ldr	r3, [r3, #0]
 8015cd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  GEMMLOWP_EXP_BARREL_SHIFTER(-2, 1672461947);
 8015cd4:	4883      	ldr	r0, [pc, #524]	; (8015ee4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x278>)
 8015cd6:	f7fd fc68 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015cda:	4603      	mov	r3, r0
 8015cdc:	4618      	mov	r0, r3
 8015cde:	f7fd fc50 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015ce2:	4603      	mov	r3, r0
 8015ce4:	627b      	str	r3, [r7, #36]	; 0x24
 8015ce6:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8015cea:	f7fb f9ed 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015cee:	4603      	mov	r3, r0
 8015cf0:	4619      	mov	r1, r3
 8015cf2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015cf4:	f7fb f9f3 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015cf8:	4603      	mov	r3, r0
 8015cfa:	4618      	mov	r0, r3
 8015cfc:	f7fb fa6e 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015d00:	4604      	mov	r4, r0
 8015d02:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d06:	f7fe f83b 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d0a:	4603      	mov	r3, r0
 8015d0c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d0e:	4619      	mov	r1, r3
 8015d10:	4620      	mov	r0, r4
 8015d12:	f7fd fed5 	bl	8013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015d16:	4603      	mov	r3, r0
 8015d18:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(-1, 1302514674);
 8015d1a:	4873      	ldr	r0, [pc, #460]	; (8015ee8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x27c>)
 8015d1c:	f7fd fc45 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015d20:	4603      	mov	r3, r0
 8015d22:	4618      	mov	r0, r3
 8015d24:	f7fd fc2d 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015d28:	4603      	mov	r3, r0
 8015d2a:	623b      	str	r3, [r7, #32]
 8015d2c:	f04f 7000 	mov.w	r0, #33554432	; 0x2000000
 8015d30:	f7fb f9ca 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015d34:	4603      	mov	r3, r0
 8015d36:	4619      	mov	r1, r3
 8015d38:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d3a:	f7fb f9d0 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015d3e:	4603      	mov	r3, r0
 8015d40:	4618      	mov	r0, r3
 8015d42:	f7fb fa4b 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015d46:	4604      	mov	r4, r0
 8015d48:	6a39      	ldr	r1, [r7, #32]
 8015d4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d4c:	f7fe f818 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d50:	4603      	mov	r3, r0
 8015d52:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d54:	4619      	mov	r1, r3
 8015d56:	4620      	mov	r0, r4
 8015d58:	f7fd feb2 	bl	8013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015d5c:	4603      	mov	r3, r0
 8015d5e:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+0, 790015084);
 8015d60:	4862      	ldr	r0, [pc, #392]	; (8015eec <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x280>)
 8015d62:	f7fd fc22 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015d66:	4603      	mov	r3, r0
 8015d68:	4618      	mov	r0, r3
 8015d6a:	f7fd fc0a 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015d6e:	4603      	mov	r3, r0
 8015d70:	61fb      	str	r3, [r7, #28]
 8015d72:	f04f 6080 	mov.w	r0, #67108864	; 0x4000000
 8015d76:	f7fb f9a7 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015d7a:	4603      	mov	r3, r0
 8015d7c:	4619      	mov	r1, r3
 8015d7e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015d80:	f7fb f9ad 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015d84:	4603      	mov	r3, r0
 8015d86:	4618      	mov	r0, r3
 8015d88:	f7fb fa28 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015d8c:	4604      	mov	r4, r0
 8015d8e:	69f9      	ldr	r1, [r7, #28]
 8015d90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015d92:	f7fd fff5 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015d96:	4603      	mov	r3, r0
 8015d98:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015d9a:	4619      	mov	r1, r3
 8015d9c:	4620      	mov	r0, r4
 8015d9e:	f7fd fe8f 	bl	8013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015da2:	4603      	mov	r3, r0
 8015da4:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+1, 290630308);
 8015da6:	4852      	ldr	r0, [pc, #328]	; (8015ef0 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x284>)
 8015da8:	f7fd fbff 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015dac:	4603      	mov	r3, r0
 8015dae:	4618      	mov	r0, r3
 8015db0:	f7fd fbe7 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015db4:	4603      	mov	r3, r0
 8015db6:	61bb      	str	r3, [r7, #24]
 8015db8:	f04f 6000 	mov.w	r0, #134217728	; 0x8000000
 8015dbc:	f7fb f984 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	4619      	mov	r1, r3
 8015dc4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015dc6:	f7fb f98a 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015dca:	4603      	mov	r3, r0
 8015dcc:	4618      	mov	r0, r3
 8015dce:	f7fb fa05 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015dd2:	4604      	mov	r4, r0
 8015dd4:	69b9      	ldr	r1, [r7, #24]
 8015dd6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015dd8:	f7fd ffd2 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015ddc:	4603      	mov	r3, r0
 8015dde:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015de0:	4619      	mov	r1, r3
 8015de2:	4620      	mov	r0, r4
 8015de4:	f7fd fe6c 	bl	8013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015de8:	4603      	mov	r3, r0
 8015dea:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+2, 39332535);
 8015dec:	4841      	ldr	r0, [pc, #260]	; (8015ef4 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x288>)
 8015dee:	f7fd fbdc 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015df2:	4603      	mov	r3, r0
 8015df4:	4618      	mov	r0, r3
 8015df6:	f7fd fbc4 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015dfa:	4603      	mov	r3, r0
 8015dfc:	617b      	str	r3, [r7, #20]
 8015dfe:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8015e02:	f7fb f961 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015e06:	4603      	mov	r3, r0
 8015e08:	4619      	mov	r1, r3
 8015e0a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e0c:	f7fb f967 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015e10:	4603      	mov	r3, r0
 8015e12:	4618      	mov	r0, r3
 8015e14:	f7fb f9e2 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015e18:	4604      	mov	r4, r0
 8015e1a:	6979      	ldr	r1, [r7, #20]
 8015e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e1e:	f7fd ffaf 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015e22:	4603      	mov	r3, r0
 8015e24:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e26:	4619      	mov	r1, r3
 8015e28:	4620      	mov	r0, r4
 8015e2a:	f7fd fe49 	bl	8013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015e2e:	4603      	mov	r3, r0
 8015e30:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+3, 720401);
 8015e32:	4831      	ldr	r0, [pc, #196]	; (8015ef8 <_ZN8gemmlowp22exp_on_negative_valuesIlLi5EEENS_10FixedPointIT_Li0EEENS1_IS2_XT0_EEE+0x28c>)
 8015e34:	f7fd fbb9 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015e38:	4603      	mov	r3, r0
 8015e3a:	4618      	mov	r0, r3
 8015e3c:	f7fd fba1 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015e40:	4603      	mov	r3, r0
 8015e42:	613b      	str	r3, [r7, #16]
 8015e44:	f04f 5000 	mov.w	r0, #536870912	; 0x20000000
 8015e48:	f7fb f93e 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015e4c:	4603      	mov	r3, r0
 8015e4e:	4619      	mov	r1, r3
 8015e50:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e52:	f7fb f944 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015e56:	4603      	mov	r3, r0
 8015e58:	4618      	mov	r0, r3
 8015e5a:	f7fb f9bf 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015e5e:	4604      	mov	r4, r0
 8015e60:	6939      	ldr	r1, [r7, #16]
 8015e62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015e64:	f7fd ff8c 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015e68:	4603      	mov	r3, r0
 8015e6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015e6c:	4619      	mov	r1, r3
 8015e6e:	4620      	mov	r0, r4
 8015e70:	f7fd fe26 	bl	8013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015e74:	4603      	mov	r3, r0
 8015e76:	62bb      	str	r3, [r7, #40]	; 0x28
  GEMMLOWP_EXP_BARREL_SHIFTER(+4, 242);
 8015e78:	20f2      	movs	r0, #242	; 0xf2
 8015e7a:	f7fd fb96 	bl	80135aa <_ZN8gemmlowp26RescaleConstantInitializerINS_10FixedPointIlLi0EEEEENT_13ScalarRawTypeEl>
 8015e7e:	4603      	mov	r3, r0
 8015e80:	4618      	mov	r0, r3
 8015e82:	f7fd fb7e 	bl	8013582 <_ZN8gemmlowp10FixedPointIlLi0EE13FromScalarRawEl>
 8015e86:	4603      	mov	r3, r0
 8015e88:	60fb      	str	r3, [r7, #12]
 8015e8a:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8015e8e:	f7fb f91b 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015e92:	4603      	mov	r3, r0
 8015e94:	4619      	mov	r1, r3
 8015e96:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8015e98:	f7fb f921 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8015e9c:	4603      	mov	r3, r0
 8015e9e:	4618      	mov	r0, r3
 8015ea0:	f7fb f99c 	bl	80111dc <_ZN8gemmlowp13MaskIfNonZeroIlEET_S1_>
 8015ea4:	4604      	mov	r4, r0
 8015ea6:	68f9      	ldr	r1, [r7, #12]
 8015ea8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8015eaa:	f7fd ff69 	bl	8013d80 <_ZN8gemmlowpmlIlLi0ELi0EEENS_10FixedPointIT_XplT0_T1_EEENS1_IS2_XT0_EEENS1_IS2_XT1_EEE>
 8015eae:	4603      	mov	r3, r0
 8015eb0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015eb2:	4619      	mov	r1, r3
 8015eb4:	4620      	mov	r0, r4
 8015eb6:	f7fd fe03 	bl	8013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015eba:	4603      	mov	r3, r0
 8015ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  result = SelectUsingMask(MaskIfZero(a), ResultF::One(), result);
 8015ebe:	6878      	ldr	r0, [r7, #4]
 8015ec0:	f000 f8e4 	bl	801608c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>
 8015ec4:	4604      	mov	r4, r0
 8015ec6:	f7fd fcd3 	bl	8013870 <_ZN8gemmlowp10FixedPointIlLi0EE3OneEv>
 8015eca:	4603      	mov	r3, r0
 8015ecc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8015ece:	4619      	mov	r1, r3
 8015ed0:	4620      	mov	r0, r4
 8015ed2:	f7fd fdf5 	bl	8013ac0 <_ZN8gemmlowp15SelectUsingMaskIlLi0EEENS_10FixedPointIT_XT0_EEES2_S3_S3_>
 8015ed6:	4603      	mov	r3, r0
 8015ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8015eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8015edc:	4618      	mov	r0, r3
 8015ede:	3744      	adds	r7, #68	; 0x44
 8015ee0:	46bd      	mov	sp, r7
 8015ee2:	bd90      	pop	{r4, r7, pc}
 8015ee4:	63afbe7b 	.word	0x63afbe7b
 8015ee8:	4da2cbf2 	.word	0x4da2cbf2
 8015eec:	2f16ac6c 	.word	0x2f16ac6c
 8015ef0:	1152aaa4 	.word	0x1152aaa4
 8015ef4:	02582ab7 	.word	0x02582ab7
 8015ef8:	000afe11 	.word	0x000afe11

08015efc <_ZN8gemmlowp7RescaleILi12ElLi0EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8015efc:	b5b0      	push	{r4, r5, r7, lr}
 8015efe:	b084      	sub	sp, #16
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8015f04:	1d3b      	adds	r3, r7, #4
 8015f06:	4618      	mov	r0, r3
 8015f08:	f7fd fb30 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8015f0c:	4603      	mov	r3, r0
 8015f0e:	681d      	ldr	r5, [r3, #0]
 8015f10:	f107 030c 	add.w	r3, r7, #12
 8015f14:	4618      	mov	r0, r3
 8015f16:	f000 f80b 	bl	8015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015f1a:	4604      	mov	r4, r0
 8015f1c:	4628      	mov	r0, r5
 8015f1e:	f000 f8c7 	bl	80160b0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>
 8015f22:	4603      	mov	r3, r0
 8015f24:	6023      	str	r3, [r4, #0]
  return result;
 8015f26:	68fb      	ldr	r3, [r7, #12]
}
 8015f28:	4618      	mov	r0, r3
 8015f2a:	3710      	adds	r7, #16
 8015f2c:	46bd      	mov	sp, r7
 8015f2e:	bdb0      	pop	{r4, r5, r7, pc}

08015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>:
  RawType& raw() { return i_; }
 8015f30:	b480      	push	{r7}
 8015f32:	b083      	sub	sp, #12
 8015f34:	af00      	add	r7, sp, #0
 8015f36:	6078      	str	r0, [r7, #4]
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	4618      	mov	r0, r3
 8015f3c:	370c      	adds	r7, #12
 8015f3e:	46bd      	mov	sp, r7
 8015f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f44:	4770      	bx	lr

08015f46 <_ZN8gemmlowp10FixedPointIlLi12EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015f46:	b590      	push	{r4, r7, lr}
 8015f48:	b085      	sub	sp, #20
 8015f4a:	af00      	add	r7, sp, #0
 8015f4c:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015f4e:	f107 030c 	add.w	r3, r7, #12
 8015f52:	4618      	mov	r0, r3
 8015f54:	f7ff ffec 	bl	8015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015f58:	4604      	mov	r4, r0
 8015f5a:	6878      	ldr	r0, [r7, #4]
 8015f5c:	f7fb f8b4 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015f60:	4603      	mov	r3, r0
 8015f62:	6023      	str	r3, [r4, #0]
    return retval;
 8015f64:	68fb      	ldr	r3, [r7, #12]
  }
 8015f66:	4618      	mov	r0, r3
 8015f68:	3714      	adds	r7, #20
 8015f6a:	46bd      	mov	sp, r7
 8015f6c:	bd90      	pop	{r4, r7, pc}

08015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>:
  RawType& raw() { return i_; }
 8015f6e:	b480      	push	{r7}
 8015f70:	b083      	sub	sp, #12
 8015f72:	af00      	add	r7, sp, #0
 8015f74:	6078      	str	r0, [r7, #4]
 8015f76:	687b      	ldr	r3, [r7, #4]
 8015f78:	4618      	mov	r0, r3
 8015f7a:	370c      	adds	r7, #12
 8015f7c:	46bd      	mov	sp, r7
 8015f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f82:	4770      	bx	lr

08015f84 <_ZN8gemmlowp10FixedPointIlLi12EE7FromRawEl>:
  static FixedPoint FromRaw(RawType x) {
 8015f84:	b580      	push	{r7, lr}
 8015f86:	b084      	sub	sp, #16
 8015f88:	af00      	add	r7, sp, #0
 8015f8a:	6078      	str	r0, [r7, #4]
    retval.raw() = x;
 8015f8c:	f107 030c 	add.w	r3, r7, #12
 8015f90:	4618      	mov	r0, r3
 8015f92:	f7ff ffcd 	bl	8015f30 <_ZN8gemmlowp10FixedPointIlLi12EE3rawEv>
 8015f96:	4602      	mov	r2, r0
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	6013      	str	r3, [r2, #0]
    return retval;
 8015f9c:	68fb      	ldr	r3, [r7, #12]
  }
 8015f9e:	4618      	mov	r0, r3
 8015fa0:	3710      	adds	r7, #16
 8015fa2:	46bd      	mov	sp, r7
 8015fa4:	bd80      	pop	{r7, pc}

08015fa6 <_ZN8gemmlowp10FixedPointIlLi5EE11ConstantPOTILin2EEES1_v>:
  static FixedPoint ConstantPOT() {
 8015fa6:	b580      	push	{r7, lr}
 8015fa8:	af00      	add	r7, sp, #0
    return FromScalarRaw(ScalarRawType(1) << kOffset);
 8015faa:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8015fae:	f000 f803 	bl	8015fb8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>
 8015fb2:	4603      	mov	r3, r0
  }
 8015fb4:	4618      	mov	r0, r3
 8015fb6:	bd80      	pop	{r7, pc}

08015fb8 <_ZN8gemmlowp10FixedPointIlLi5EE13FromScalarRawEl>:
  static FixedPoint FromScalarRaw(ScalarRawType x) {
 8015fb8:	b590      	push	{r4, r7, lr}
 8015fba:	b085      	sub	sp, #20
 8015fbc:	af00      	add	r7, sp, #0
 8015fbe:	6078      	str	r0, [r7, #4]
    retval.raw() = Dup<RawType>(x);
 8015fc0:	f107 030c 	add.w	r3, r7, #12
 8015fc4:	4618      	mov	r0, r3
 8015fc6:	f7ff ffd2 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015fca:	4604      	mov	r4, r0
 8015fcc:	6878      	ldr	r0, [r7, #4]
 8015fce:	f7fb f87b 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8015fd2:	4603      	mov	r3, r0
 8015fd4:	6023      	str	r3, [r4, #0]
    return retval;
 8015fd6:	68fb      	ldr	r3, [r7, #12]
  }
 8015fd8:	4618      	mov	r0, r3
 8015fda:	3714      	adds	r7, #20
 8015fdc:	46bd      	mov	sp, r7
 8015fde:	bd90      	pop	{r4, r7, pc}

08015fe0 <_ZN8gemmlowpmiIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator-, Sub)
 8015fe0:	b590      	push	{r4, r7, lr}
 8015fe2:	b083      	sub	sp, #12
 8015fe4:	af00      	add	r7, sp, #0
 8015fe6:	6078      	str	r0, [r7, #4]
 8015fe8:	6039      	str	r1, [r7, #0]
 8015fea:	1d3b      	adds	r3, r7, #4
 8015fec:	4618      	mov	r0, r3
 8015fee:	f7ff ffbe 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015ff2:	4603      	mov	r3, r0
 8015ff4:	681c      	ldr	r4, [r3, #0]
 8015ff6:	463b      	mov	r3, r7
 8015ff8:	4618      	mov	r0, r3
 8015ffa:	f7ff ffb8 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8015ffe:	4603      	mov	r3, r0
 8016000:	681b      	ldr	r3, [r3, #0]
 8016002:	4619      	mov	r1, r3
 8016004:	4620      	mov	r0, r4
 8016006:	f7fd fae9 	bl	80135dc <_ZN8gemmlowp3SubIlEET_S1_S1_>
 801600a:	4603      	mov	r3, r0
 801600c:	4618      	mov	r0, r3
 801600e:	f7ff fdfe 	bl	8015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 8016012:	4603      	mov	r3, r0
 8016014:	4618      	mov	r0, r3
 8016016:	370c      	adds	r7, #12
 8016018:	46bd      	mov	sp, r7
 801601a:	bd90      	pop	{r4, r7, pc}

0801601c <_ZN8gemmlowpanIlLi5EEENS_10FixedPointIT_XT0_EEES3_S3_>:
MAKE_FIXEDPOINT_BINARY_FUNC(operator&, BitAnd)
 801601c:	b590      	push	{r4, r7, lr}
 801601e:	b083      	sub	sp, #12
 8016020:	af00      	add	r7, sp, #0
 8016022:	6078      	str	r0, [r7, #4]
 8016024:	6039      	str	r1, [r7, #0]
 8016026:	1d3b      	adds	r3, r7, #4
 8016028:	4618      	mov	r0, r3
 801602a:	f7ff ffa0 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801602e:	4603      	mov	r3, r0
 8016030:	681c      	ldr	r4, [r3, #0]
 8016032:	463b      	mov	r3, r7
 8016034:	4618      	mov	r0, r3
 8016036:	f7ff ff9a 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801603a:	4603      	mov	r3, r0
 801603c:	681b      	ldr	r3, [r3, #0]
 801603e:	4619      	mov	r1, r3
 8016040:	4620      	mov	r0, r4
 8016042:	f7fb f84c 	bl	80110de <_ZN8gemmlowp6BitAndIlEET_S1_S1_>
 8016046:	4603      	mov	r3, r0
 8016048:	4618      	mov	r0, r3
 801604a:	f7ff fde0 	bl	8015c0e <_ZN8gemmlowp10FixedPointIlLi5EE7FromRawEl>
 801604e:	4603      	mov	r3, r0
 8016050:	4618      	mov	r0, r3
 8016052:	370c      	adds	r7, #12
 8016054:	46bd      	mov	sp, r7
 8016056:	bd90      	pop	{r4, r7, pc}

08016058 <_ZN8gemmlowp7RescaleILi0ElLi5EEENS_10FixedPointIT0_XT_EEENS1_IS2_XT1_EEE>:
FixedPoint<tRawType, tIntegerBitsDst> Rescale(
 8016058:	b5b0      	push	{r4, r5, r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
  result.raw() = SaturatingRoundingMultiplyByPOT<kExponent>(x.raw());
 8016060:	1d3b      	adds	r3, r7, #4
 8016062:	4618      	mov	r0, r3
 8016064:	f7ff ff83 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 8016068:	4603      	mov	r3, r0
 801606a:	681d      	ldr	r5, [r3, #0]
 801606c:	f107 030c 	add.w	r3, r7, #12
 8016070:	4618      	mov	r0, r3
 8016072:	f7fd fa7b 	bl	801356c <_ZN8gemmlowp10FixedPointIlLi0EE3rawEv>
 8016076:	4604      	mov	r4, r0
 8016078:	4628      	mov	r0, r5
 801607a:	f000 f825 	bl	80160c8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>
 801607e:	4603      	mov	r3, r0
 8016080:	6023      	str	r3, [r4, #0]
  return result;
 8016082:	68fb      	ldr	r3, [r7, #12]
}
 8016084:	4618      	mov	r0, r3
 8016086:	3710      	adds	r7, #16
 8016088:	46bd      	mov	sp, r7
 801608a:	bdb0      	pop	{r4, r5, r7, pc}

0801608c <_ZN8gemmlowp10MaskIfZeroIlLi5EEET_NS_10FixedPointIS1_XT0_EEE>:
MAKE_FIXEDPOINT_UNARY_FUNC_RETURNING_RAW(MaskIfZero)
 801608c:	b580      	push	{r7, lr}
 801608e:	b082      	sub	sp, #8
 8016090:	af00      	add	r7, sp, #0
 8016092:	6078      	str	r0, [r7, #4]
 8016094:	1d3b      	adds	r3, r7, #4
 8016096:	4618      	mov	r0, r3
 8016098:	f7ff ff69 	bl	8015f6e <_ZN8gemmlowp10FixedPointIlLi5EE3rawEv>
 801609c:	4603      	mov	r3, r0
 801609e:	681b      	ldr	r3, [r3, #0]
 80160a0:	4618      	mov	r0, r3
 80160a2:	f7fd fd74 	bl	8013b8e <_ZN8gemmlowp10MaskIfZeroIlEET_S1_>
 80160a6:	4603      	mov	r3, r0
 80160a8:	4618      	mov	r0, r3
 80160aa:	3708      	adds	r7, #8
 80160ac:	46bd      	mov	sp, r7
 80160ae:	bd80      	pop	{r7, pc}

080160b0 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILin12ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80160b0:	b580      	push	{r7, lr}
 80160b2:	b082      	sub	sp, #8
 80160b4:	af00      	add	r7, sp, #0
 80160b6:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80160b8:	6878      	ldr	r0, [r7, #4]
 80160ba:	f000 f811 	bl	80160e0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>
 80160be:	4603      	mov	r3, r0
}
 80160c0:	4618      	mov	r0, r3
 80160c2:	3708      	adds	r7, #8
 80160c4:	46bd      	mov	sp, r7
 80160c6:	bd80      	pop	{r7, pc}

080160c8 <_ZN8gemmlowp31SaturatingRoundingMultiplyByPOTILi5ElEET0_S1_>:
IntegerType SaturatingRoundingMultiplyByPOT(IntegerType x) {
 80160c8:	b580      	push	{r7, lr}
 80160ca:	b082      	sub	sp, #8
 80160cc:	af00      	add	r7, sp, #0
 80160ce:	6078      	str	r0, [r7, #4]
  return ImplSaturatingRoundingMultiplyByPOT<Exponent, IntegerType>::eval(x);
 80160d0:	6878      	ldr	r0, [r7, #4]
 80160d2:	f000 f813 	bl	80160fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>
 80160d6:	4603      	mov	r3, r0
}
 80160d8:	4618      	mov	r0, r3
 80160da:	3708      	adds	r7, #8
 80160dc:	46bd      	mov	sp, r7
 80160de:	bd80      	pop	{r7, pc}

080160e0 <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILin12ElLin1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80160e0:	b580      	push	{r7, lr}
 80160e2:	b082      	sub	sp, #8
 80160e4:	af00      	add	r7, sp, #0
 80160e6:	6078      	str	r0, [r7, #4]
    return RoundingDivideByPOT<IntegerType>(x, -Exponent);
 80160e8:	210c      	movs	r1, #12
 80160ea:	6878      	ldr	r0, [r7, #4]
 80160ec:	f7fa fe9c 	bl	8010e28 <_ZN8gemmlowp19RoundingDivideByPOTIlEET_S1_i>
 80160f0:	4603      	mov	r3, r0
  }
 80160f2:	4618      	mov	r0, r3
 80160f4:	3708      	adds	r7, #8
 80160f6:	46bd      	mov	sp, r7
 80160f8:	bd80      	pop	{r7, pc}
	...

080160fc <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl>:
  static IntegerType eval(IntegerType x) {
 80160fc:	b580      	push	{r7, lr}
 80160fe:	b08a      	sub	sp, #40	; 0x28
 8016100:	af00      	add	r7, sp, #0
 8016102:	6078      	str	r0, [r7, #4]
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::min());
 8016104:	f7f9 fa7b 	bl	800f5fe <_ZNSt14numeric_limitsIlE3minEv>
 8016108:	4603      	mov	r3, r0
 801610a:	4618      	mov	r0, r3
 801610c:	f7fa ffdc 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016110:	6278      	str	r0, [r7, #36]	; 0x24
        Dup<IntegerType>(std::numeric_limits<ScalarIntegerType>::max());
 8016112:	f7f8 fa47 	bl	800e5a4 <_ZNSt14numeric_limitsIlE3maxEv>
 8016116:	4603      	mov	r3, r0
 8016118:	4618      	mov	r0, r3
 801611a:	f7fa ffd5 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 801611e:	6238      	str	r0, [r7, #32]
    const int ScalarIntegerTypeBits = 8 * sizeof(ScalarIntegerType);
 8016120:	2320      	movs	r3, #32
 8016122:	61fb      	str	r3, [r7, #28]
    const std::int32_t threshold =
 8016124:	f06f 437c 	mvn.w	r3, #4227858432	; 0xfc000000
 8016128:	61bb      	str	r3, [r7, #24]
        MaskIfGreaterThan(x, Dup<IntegerType>(threshold));
 801612a:	f06f 407c 	mvn.w	r0, #4227858432	; 0xfc000000
 801612e:	f7fa ffcb 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016132:	4603      	mov	r3, r0
 8016134:	4619      	mov	r1, r3
 8016136:	6878      	ldr	r0, [r7, #4]
 8016138:	f7fb f810 	bl	801115c <_ZN8gemmlowp17MaskIfGreaterThanIlEET_S1_S1_>
 801613c:	6178      	str	r0, [r7, #20]
        MaskIfLessThan(x, Dup<IntegerType>(-threshold));
 801613e:	480f      	ldr	r0, [pc, #60]	; (801617c <_ZN8gemmlowp35ImplSaturatingRoundingMultiplyByPOTILi5ElLi1EE4evalEl+0x80>)
 8016140:	f7fa ffc2 	bl	80110c8 <_ZN8gemmlowp3DupIlEET_NS_23FixedPointRawTypeTraitsIS1_E13ScalarRawTypeE>
 8016144:	4603      	mov	r3, r0
 8016146:	4619      	mov	r1, r3
 8016148:	6878      	ldr	r0, [r7, #4]
 801614a:	f7fa ffe5 	bl	8011118 <_ZN8gemmlowp14MaskIfLessThanIlEET_S1_S1_>
 801614e:	6138      	str	r0, [r7, #16]
    IntegerType result = ShiftLeft(x, Exponent);
 8016150:	2105      	movs	r1, #5
 8016152:	6878      	ldr	r0, [r7, #4]
 8016154:	f7fd fa5d 	bl	8013612 <_ZN8gemmlowp9ShiftLeftIlEET_S1_i>
 8016158:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(positive_mask, max, result);
 801615a:	68fa      	ldr	r2, [r7, #12]
 801615c:	6a39      	ldr	r1, [r7, #32]
 801615e:	6978      	ldr	r0, [r7, #20]
 8016160:	f7fd fa9d 	bl	801369e <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8016164:	60f8      	str	r0, [r7, #12]
    result = SelectUsingMask(negative_mask, min, result);
 8016166:	68fa      	ldr	r2, [r7, #12]
 8016168:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801616a:	6938      	ldr	r0, [r7, #16]
 801616c:	f7fd fa97 	bl	801369e <_ZN8gemmlowp15SelectUsingMaskIlEET_S1_S1_S1_>
 8016170:	60f8      	str	r0, [r7, #12]
    return result;
 8016172:	68fb      	ldr	r3, [r7, #12]
  }
 8016174:	4618      	mov	r0, r3
 8016176:	3728      	adds	r7, #40	; 0x28
 8016178:	46bd      	mov	sp, r7
 801617a:	bd80      	pop	{r7, pc}
 801617c:	fc000001 	.word	0xfc000001

08016180 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 8016180:	b580      	push	{r7, lr}
 8016182:	b082      	sub	sp, #8
 8016184:	af00      	add	r7, sp, #0
 8016186:	6078      	str	r0, [r7, #4]
 8016188:	6878      	ldr	r0, [r7, #4]
 801618a:	f000 fb97 	bl	80168bc <_ZNSaIPvED1Ev>
 801618e:	687b      	ldr	r3, [r7, #4]
 8016190:	4618      	mov	r0, r3
 8016192:	3708      	adds	r7, #8
 8016194:	46bd      	mov	sp, r7
 8016196:	bd80      	pop	{r7, pc}

08016198 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>:
      _Vector_base() = default;
 8016198:	b580      	push	{r7, lr}
 801619a:	b082      	sub	sp, #8
 801619c:	af00      	add	r7, sp, #0
 801619e:	6078      	str	r0, [r7, #4]
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	4618      	mov	r0, r3
 80161a4:	f000 fb7a 	bl	801689c <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>
 80161a8:	687b      	ldr	r3, [r7, #4]
 80161aa:	4618      	mov	r0, r3
 80161ac:	3708      	adds	r7, #8
 80161ae:	46bd      	mov	sp, r7
 80161b0:	bd80      	pop	{r7, pc}

080161b2 <_ZNSt6vectorIPvSaIS0_EEC1Ev>:
      vector() = default;
 80161b2:	b580      	push	{r7, lr}
 80161b4:	b082      	sub	sp, #8
 80161b6:	af00      	add	r7, sp, #0
 80161b8:	6078      	str	r0, [r7, #4]
 80161ba:	687b      	ldr	r3, [r7, #4]
 80161bc:	4618      	mov	r0, r3
 80161be:	f7ff ffeb 	bl	8016198 <_ZNSt12_Vector_baseIPvSaIS0_EEC1Ev>
 80161c2:	687b      	ldr	r3, [r7, #4]
 80161c4:	4618      	mov	r0, r3
 80161c6:	3708      	adds	r7, #8
 80161c8:	46bd      	mov	sp, r7
 80161ca:	bd80      	pop	{r7, pc}

080161cc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>:
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
 80161cc:	b580      	push	{r7, lr}
 80161ce:	b084      	sub	sp, #16
 80161d0:	af00      	add	r7, sp, #0
 80161d2:	60f8      	str	r0, [r7, #12]
 80161d4:	60b9      	str	r1, [r7, #8]
 80161d6:	607a      	str	r2, [r7, #4]
  if (current_location - bytes < tensor_boundary) {
 80161d8:	4b18      	ldr	r3, [pc, #96]	; (801623c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 80161da:	681a      	ldr	r2, [r3, #0]
 80161dc:	68bb      	ldr	r3, [r7, #8]
 80161de:	425b      	negs	r3, r3
 80161e0:	441a      	add	r2, r3
 80161e2:	4b17      	ldr	r3, [pc, #92]	; (8016240 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x74>)
 80161e4:	681b      	ldr	r3, [r3, #0]
 80161e6:	429a      	cmp	r2, r3
 80161e8:	d217      	bcs.n	801621a <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x4e>
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
 80161ea:	68b8      	ldr	r0, [r7, #8]
 80161ec:	f004 ffd6 	bl	801b19c <malloc>
 80161f0:	4603      	mov	r3, r0
 80161f2:	461a      	mov	r2, r3
 80161f4:	687b      	ldr	r3, [r7, #4]
 80161f6:	601a      	str	r2, [r3, #0]
    if (*ptr == NULL) {
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	681b      	ldr	r3, [r3, #0]
 80161fc:	2b00      	cmp	r3, #0
 80161fe:	d106      	bne.n	801620e <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x42>
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
 8016200:	68bb      	ldr	r3, [r7, #8]
 8016202:	4619      	mov	r1, r3
 8016204:	480f      	ldr	r0, [pc, #60]	; (8016244 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x78>)
 8016206:	f005 fbbf 	bl	801b988 <iprintf>
      return kTfLiteError;
 801620a:	2301      	movs	r3, #1
 801620c:	e011      	b.n	8016232 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
    }
    overflow_buffers.push_back(*ptr);
 801620e:	6879      	ldr	r1, [r7, #4]
 8016210:	480d      	ldr	r0, [pc, #52]	; (8016248 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x7c>)
 8016212:	f000 fb78 	bl	8016906 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>
    return kTfLiteOk;
 8016216:	2300      	movs	r3, #0
 8016218:	e00b      	b.n	8016232 <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x66>
  }

  current_location -= bytes;
 801621a:	4b08      	ldr	r3, [pc, #32]	; (801623c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 801621c:	681a      	ldr	r2, [r3, #0]
 801621e:	68bb      	ldr	r3, [r7, #8]
 8016220:	425b      	negs	r3, r3
 8016222:	4413      	add	r3, r2
 8016224:	4a05      	ldr	r2, [pc, #20]	; (801623c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 8016226:	6013      	str	r3, [r2, #0]

  *ptr = current_location;
 8016228:	4b04      	ldr	r3, [pc, #16]	; (801623c <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv+0x70>)
 801622a:	681a      	ldr	r2, [r3, #0]
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	601a      	str	r2, [r3, #0]
  return kTfLiteOk;
 8016230:	2300      	movs	r3, #0
}
 8016232:	4618      	mov	r0, r3
 8016234:	3710      	adds	r7, #16
 8016236:	46bd      	mov	sp, r7
 8016238:	bd80      	pop	{r7, pc}
 801623a:	bf00      	nop
 801623c:	20006b80 	.word	0x20006b80
 8016240:	20006b7c 	.word	0x20006b7c
 8016244:	0801eee4 	.word	0x0801eee4
 8016248:	20007a08 	.word	0x20007a08

0801624c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>:
      struct _Vector_impl
 801624c:	b580      	push	{r7, lr}
 801624e:	b082      	sub	sp, #8
 8016250:	af00      	add	r7, sp, #0
 8016252:	6078      	str	r0, [r7, #4]
 8016254:	6878      	ldr	r0, [r7, #4]
 8016256:	f000 fb8b 	bl	8016970 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 801625a:	687b      	ldr	r3, [r7, #4]
 801625c:	4618      	mov	r0, r3
 801625e:	3708      	adds	r7, #8
 8016260:	46bd      	mov	sp, r7
 8016262:	bd80      	pop	{r7, pc}

08016264 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>:
      _Vector_base() = default;
 8016264:	b580      	push	{r7, lr}
 8016266:	b082      	sub	sp, #8
 8016268:	af00      	add	r7, sp, #0
 801626a:	6078      	str	r0, [r7, #4]
 801626c:	687b      	ldr	r3, [r7, #4]
 801626e:	4618      	mov	r0, r3
 8016270:	f000 fb6e 	bl	8016950 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>
 8016274:	687b      	ldr	r3, [r7, #4]
 8016276:	4618      	mov	r0, r3
 8016278:	3708      	adds	r7, #8
 801627a:	46bd      	mov	sp, r7
 801627c:	bd80      	pop	{r7, pc}

0801627e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>:
      vector() = default;
 801627e:	b580      	push	{r7, lr}
 8016280:	b082      	sub	sp, #8
 8016282:	af00      	add	r7, sp, #0
 8016284:	6078      	str	r0, [r7, #4]
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	4618      	mov	r0, r3
 801628a:	f7ff ffeb 	bl	8016264 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC2Ev>
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	4618      	mov	r0, r3
 8016292:	3708      	adds	r7, #8
 8016294:	46bd      	mov	sp, r7
 8016296:	bd80      	pop	{r7, pc}

08016298 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi>:
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
 8016298:	b580      	push	{r7, lr}
 801629a:	b088      	sub	sp, #32
 801629c:	af00      	add	r7, sp, #0
 801629e:	60f8      	str	r0, [r7, #12]
 80162a0:	60b9      	str	r1, [r7, #8]
 80162a2:	607a      	str	r2, [r7, #4]
  scratch_buffer_t b;
  b.bytes = bytes;
 80162a4:	68bb      	ldr	r3, [r7, #8]
 80162a6:	617b      	str	r3, [r7, #20]

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
 80162a8:	6979      	ldr	r1, [r7, #20]
 80162aa:	f107 0314 	add.w	r3, r7, #20
 80162ae:	3304      	adds	r3, #4
 80162b0:	461a      	mov	r2, r3
 80162b2:	68f8      	ldr	r0, [r7, #12]
 80162b4:	f7ff ff8a 	bl	80161cc <_ZN12_GLOBAL__N_1L24AllocatePersistentBufferEP13TfLiteContextjPPv>
 80162b8:	4603      	mov	r3, r0
 80162ba:	77fb      	strb	r3, [r7, #31]
  if (s != kTfLiteOk) {
 80162bc:	7ffb      	ldrb	r3, [r7, #31]
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d001      	beq.n	80162c6 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x2e>
    return s;
 80162c2:	7ffb      	ldrb	r3, [r7, #31]
 80162c4:	e00e      	b.n	80162e4 <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x4c>
  }

  scratch_buffers.push_back(b);
 80162c6:	f107 0314 	add.w	r3, r7, #20
 80162ca:	4619      	mov	r1, r3
 80162cc:	4807      	ldr	r0, [pc, #28]	; (80162ec <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 80162ce:	f000 fb74 	bl	80169ba <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>

  *buffer_idx = scratch_buffers.size() - 1;
 80162d2:	4806      	ldr	r0, [pc, #24]	; (80162ec <_ZN12_GLOBAL__N_1L27RequestScratchBufferInArenaEP13TfLiteContextjPi+0x54>)
 80162d4:	f000 fb97 	bl	8016a06 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 80162d8:	4603      	mov	r3, r0
 80162da:	3b01      	subs	r3, #1
 80162dc:	461a      	mov	r2, r3
 80162de:	687b      	ldr	r3, [r7, #4]
 80162e0:	601a      	str	r2, [r3, #0]

  return kTfLiteOk;
 80162e2:	2300      	movs	r3, #0
}
 80162e4:	4618      	mov	r0, r3
 80162e6:	3720      	adds	r7, #32
 80162e8:	46bd      	mov	sp, r7
 80162ea:	bd80      	pop	{r7, pc}
 80162ec:	20007a14 	.word	0x20007a14

080162f0 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti>:

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
 80162f0:	b580      	push	{r7, lr}
 80162f2:	b082      	sub	sp, #8
 80162f4:	af00      	add	r7, sp, #0
 80162f6:	6078      	str	r0, [r7, #4]
 80162f8:	6039      	str	r1, [r7, #0]
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
 80162fa:	480d      	ldr	r0, [pc, #52]	; (8016330 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 80162fc:	f000 fb83 	bl	8016a06 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8016300:	4603      	mov	r3, r0
 8016302:	461a      	mov	r2, r3
 8016304:	683b      	ldr	r3, [r7, #0]
 8016306:	4293      	cmp	r3, r2
 8016308:	bfac      	ite	ge
 801630a:	2301      	movge	r3, #1
 801630c:	2300      	movlt	r3, #0
 801630e:	b2db      	uxtb	r3, r3
 8016310:	2b00      	cmp	r3, #0
 8016312:	d001      	beq.n	8016318 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x28>
    return NULL;
 8016314:	2300      	movs	r3, #0
 8016316:	e006      	b.n	8016326 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x36>
  }
  return scratch_buffers[buffer_idx].ptr;
 8016318:	683b      	ldr	r3, [r7, #0]
 801631a:	4619      	mov	r1, r3
 801631c:	4804      	ldr	r0, [pc, #16]	; (8016330 <_ZN12_GLOBAL__N_1L16GetScratchBufferEP13TfLiteContexti+0x40>)
 801631e:	f000 fb82 	bl	8016a26 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>
 8016322:	4603      	mov	r3, r0
 8016324:	685b      	ldr	r3, [r3, #4]
}
 8016326:	4618      	mov	r0, r3
 8016328:	3708      	adds	r7, #8
 801632a:	46bd      	mov	sp, r7
 801632c:	bd80      	pop	{r7, pc}
 801632e:	bf00      	nop
 8016330:	20007a14 	.word	0x20007a14

08016334 <_Z18trained_model_initPFPvjjE>:
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
 8016334:	b5b0      	push	{r4, r5, r7, lr}
 8016336:	b08a      	sub	sp, #40	; 0x28
 8016338:	af00      	add	r7, sp, #0
 801633a:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	f44f 610f 	mov.w	r1, #2288	; 0x8f0
 8016342:	2010      	movs	r0, #16
 8016344:	4798      	blx	r3
 8016346:	4603      	mov	r3, r0
 8016348:	4a80      	ldr	r2, [pc, #512]	; (801654c <_Z18trained_model_initPFPvjjE+0x218>)
 801634a:	6013      	str	r3, [r2, #0]
  if (!tensor_arena) {
 801634c:	4b7f      	ldr	r3, [pc, #508]	; (801654c <_Z18trained_model_initPFPvjjE+0x218>)
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	2b00      	cmp	r3, #0
 8016352:	d104      	bne.n	801635e <_Z18trained_model_initPFPvjjE+0x2a>
    printf("ERR: failed to allocate tensor arena\n");
 8016354:	487e      	ldr	r0, [pc, #504]	; (8016550 <_Z18trained_model_initPFPvjjE+0x21c>)
 8016356:	f005 fb9d 	bl	801ba94 <puts>
    return kTfLiteError;
 801635a:	2301      	movs	r3, #1
 801635c:	e201      	b.n	8016762 <_Z18trained_model_initPFPvjjE+0x42e>
  }
#endif
  tensor_boundary = tensor_arena;
 801635e:	4b7b      	ldr	r3, [pc, #492]	; (801654c <_Z18trained_model_initPFPvjjE+0x218>)
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	4a7c      	ldr	r2, [pc, #496]	; (8016554 <_Z18trained_model_initPFPvjjE+0x220>)
 8016364:	6013      	str	r3, [r2, #0]
  current_location = tensor_arena + kTensorArenaSize;
 8016366:	4b79      	ldr	r3, [pc, #484]	; (801654c <_Z18trained_model_initPFPvjjE+0x218>)
 8016368:	681b      	ldr	r3, [r3, #0]
 801636a:	f503 630f 	add.w	r3, r3, #2288	; 0x8f0
 801636e:	4a7a      	ldr	r2, [pc, #488]	; (8016558 <_Z18trained_model_initPFPvjjE+0x224>)
 8016370:	6013      	str	r3, [r2, #0]
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
 8016372:	4b7a      	ldr	r3, [pc, #488]	; (801655c <_Z18trained_model_initPFPvjjE+0x228>)
 8016374:	4a7a      	ldr	r2, [pc, #488]	; (8016560 <_Z18trained_model_initPFPvjjE+0x22c>)
 8016376:	639a      	str	r2, [r3, #56]	; 0x38
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
 8016378:	4b78      	ldr	r3, [pc, #480]	; (801655c <_Z18trained_model_initPFPvjjE+0x228>)
 801637a:	4a7a      	ldr	r2, [pc, #488]	; (8016564 <_Z18trained_model_initPFPvjjE+0x230>)
 801637c:	641a      	str	r2, [r3, #64]	; 0x40
  ctx.GetScratchBuffer = &GetScratchBuffer;
 801637e:	4b77      	ldr	r3, [pc, #476]	; (801655c <_Z18trained_model_initPFPvjjE+0x228>)
 8016380:	4a79      	ldr	r2, [pc, #484]	; (8016568 <_Z18trained_model_initPFPvjjE+0x234>)
 8016382:	645a      	str	r2, [r3, #68]	; 0x44
  ctx.tensors = tflTensors;
 8016384:	4b75      	ldr	r3, [pc, #468]	; (801655c <_Z18trained_model_initPFPvjjE+0x228>)
 8016386:	4a79      	ldr	r2, [pc, #484]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 8016388:	609a      	str	r2, [r3, #8]
  ctx.tensors_size = 42;
 801638a:	4b74      	ldr	r3, [pc, #464]	; (801655c <_Z18trained_model_initPFPvjjE+0x228>)
 801638c:	222a      	movs	r2, #42	; 0x2a
 801638e:	601a      	str	r2, [r3, #0]
  for(size_t i = 0; i < 42; ++i) {
 8016390:	2300      	movs	r3, #0
 8016392:	627b      	str	r3, [r7, #36]	; 0x24
 8016394:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016396:	2b29      	cmp	r3, #41	; 0x29
 8016398:	f200 80cd 	bhi.w	8016536 <_Z18trained_model_initPFPvjjE+0x202>
    tflTensors[i].type = tensorData[i].type;
 801639c:	4974      	ldr	r1, [pc, #464]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 801639e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163a0:	4613      	mov	r3, r2
 80163a2:	005b      	lsls	r3, r3, #1
 80163a4:	4413      	add	r3, r2
 80163a6:	00db      	lsls	r3, r3, #3
 80163a8:	440b      	add	r3, r1
 80163aa:	3301      	adds	r3, #1
 80163ac:	7819      	ldrb	r1, [r3, #0]
 80163ae:	4a6f      	ldr	r2, [pc, #444]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80163b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163b2:	019b      	lsls	r3, r3, #6
 80163b4:	4413      	add	r3, r2
 80163b6:	460a      	mov	r2, r1
 80163b8:	701a      	strb	r2, [r3, #0]
    tflTensors[i].is_variable = 0;
 80163ba:	4a6c      	ldr	r2, [pc, #432]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80163bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163be:	019b      	lsls	r3, r3, #6
 80163c0:	4413      	add	r3, r2
 80163c2:	332d      	adds	r3, #45	; 0x2d
 80163c4:	2200      	movs	r2, #0
 80163c6:	701a      	strb	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
 80163c8:	4969      	ldr	r1, [pc, #420]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 80163ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163cc:	4613      	mov	r3, r2
 80163ce:	005b      	lsls	r3, r3, #1
 80163d0:	4413      	add	r3, r2
 80163d2:	00db      	lsls	r3, r3, #3
 80163d4:	440b      	add	r3, r1
 80163d6:	7819      	ldrb	r1, [r3, #0]
 80163d8:	4a64      	ldr	r2, [pc, #400]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80163da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163dc:	019b      	lsls	r3, r3, #6
 80163de:	4413      	add	r3, r2
 80163e0:	3314      	adds	r3, #20
 80163e2:	460a      	mov	r2, r1
 80163e4:	701a      	strb	r2, [r3, #0]
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
 80163e6:	4962      	ldr	r1, [pc, #392]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 80163e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80163ea:	4613      	mov	r3, r2
 80163ec:	005b      	lsls	r3, r3, #1
 80163ee:	4413      	add	r3, r2
 80163f0:	00db      	lsls	r3, r3, #3
 80163f2:	440b      	add	r3, r1
 80163f4:	330c      	adds	r3, #12
 80163f6:	681a      	ldr	r2, [r3, #0]
 80163f8:	495c      	ldr	r1, [pc, #368]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80163fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80163fc:	019b      	lsls	r3, r3, #6
 80163fe:	440b      	add	r3, r1
 8016400:	3318      	adds	r3, #24
 8016402:	601a      	str	r2, [r3, #0]
    tflTensors[i].dims = tensorData[i].dims;
 8016404:	495a      	ldr	r1, [pc, #360]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 8016406:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016408:	4613      	mov	r3, r2
 801640a:	005b      	lsls	r3, r3, #1
 801640c:	4413      	add	r3, r2
 801640e:	00db      	lsls	r3, r3, #3
 8016410:	440b      	add	r3, r1
 8016412:	3308      	adds	r3, #8
 8016414:	681a      	ldr	r2, [r3, #0]
 8016416:	4955      	ldr	r1, [pc, #340]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 8016418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801641a:	019b      	lsls	r3, r3, #6
 801641c:	440b      	add	r3, r1
 801641e:	3308      	adds	r3, #8
 8016420:	601a      	str	r2, [r3, #0]

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
 8016422:	4a52      	ldr	r2, [pc, #328]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 8016424:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016426:	019b      	lsls	r3, r3, #6
 8016428:	4413      	add	r3, r2
 801642a:	3314      	adds	r3, #20
 801642c:	781b      	ldrb	r3, [r3, #0]
 801642e:	2b02      	cmp	r3, #2
 8016430:	d115      	bne.n	801645e <_Z18trained_model_initPFPvjjE+0x12a>
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);
 8016432:	494f      	ldr	r1, [pc, #316]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 8016434:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016436:	4613      	mov	r3, r2
 8016438:	005b      	lsls	r3, r3, #1
 801643a:	4413      	add	r3, r2
 801643c:	00db      	lsls	r3, r3, #3
 801643e:	440b      	add	r3, r1
 8016440:	3304      	adds	r3, #4
 8016442:	681b      	ldr	r3, [r3, #0]
 8016444:	461a      	mov	r2, r3
 8016446:	4b41      	ldr	r3, [pc, #260]	; (801654c <_Z18trained_model_initPFPvjjE+0x218>)
 8016448:	681b      	ldr	r3, [r3, #0]
 801644a:	4413      	add	r3, r2
 801644c:	61bb      	str	r3, [r7, #24]

     tflTensors[i].data.data =  start;
 801644e:	4a47      	ldr	r2, [pc, #284]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 8016450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016452:	019b      	lsls	r3, r3, #6
 8016454:	4413      	add	r3, r2
 8016456:	3304      	adds	r3, #4
 8016458:	69ba      	ldr	r2, [r7, #24]
 801645a:	601a      	str	r2, [r3, #0]
 801645c:	e00e      	b.n	801647c <_Z18trained_model_initPFPvjjE+0x148>
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
 801645e:	4944      	ldr	r1, [pc, #272]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 8016460:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8016462:	4613      	mov	r3, r2
 8016464:	005b      	lsls	r3, r3, #1
 8016466:	4413      	add	r3, r2
 8016468:	00db      	lsls	r3, r3, #3
 801646a:	440b      	add	r3, r1
 801646c:	3304      	adds	r3, #4
 801646e:	681a      	ldr	r2, [r3, #0]
 8016470:	493e      	ldr	r1, [pc, #248]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 8016472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016474:	019b      	lsls	r3, r3, #6
 8016476:	440b      	add	r3, r1
 8016478:	3304      	adds	r3, #4
 801647a:	601a      	str	r2, [r3, #0]
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
 801647c:	4a3b      	ldr	r2, [pc, #236]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 801647e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016480:	019b      	lsls	r3, r3, #6
 8016482:	4413      	add	r3, r2
 8016484:	f103 0030 	add.w	r0, r3, #48	; 0x30
 8016488:	4939      	ldr	r1, [pc, #228]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 801648a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801648c:	4613      	mov	r3, r2
 801648e:	005b      	lsls	r3, r3, #1
 8016490:	4413      	add	r3, r2
 8016492:	00db      	lsls	r3, r3, #3
 8016494:	440b      	add	r3, r1
 8016496:	f103 0210 	add.w	r2, r3, #16
 801649a:	4603      	mov	r3, r0
 801649c:	e892 0003 	ldmia.w	r2, {r0, r1}
 80164a0:	e883 0003 	stmia.w	r3, {r0, r1}
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
 80164a4:	4a31      	ldr	r2, [pc, #196]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80164a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164a8:	019b      	lsls	r3, r3, #6
 80164aa:	4413      	add	r3, r2
 80164ac:	3330      	adds	r3, #48	; 0x30
 80164ae:	781b      	ldrb	r3, [r3, #0]
 80164b0:	2b01      	cmp	r3, #1
 80164b2:	d11b      	bne.n	80164ec <_Z18trained_model_initPFPvjjE+0x1b8>
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
 80164b4:	492e      	ldr	r1, [pc, #184]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 80164b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80164b8:	4613      	mov	r3, r2
 80164ba:	005b      	lsls	r3, r3, #1
 80164bc:	4413      	add	r3, r2
 80164be:	00db      	lsls	r3, r3, #3
 80164c0:	440b      	add	r3, r1
 80164c2:	3314      	adds	r3, #20
 80164c4:	681b      	ldr	r3, [r3, #0]
 80164c6:	617b      	str	r3, [r7, #20]
      tflTensors[i].params.scale = quant->scale->data[0];
 80164c8:	697b      	ldr	r3, [r7, #20]
 80164ca:	681b      	ldr	r3, [r3, #0]
 80164cc:	685a      	ldr	r2, [r3, #4]
 80164ce:	4927      	ldr	r1, [pc, #156]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80164d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164d2:	019b      	lsls	r3, r3, #6
 80164d4:	440b      	add	r3, r1
 80164d6:	330c      	adds	r3, #12
 80164d8:	601a      	str	r2, [r3, #0]
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
 80164da:	697b      	ldr	r3, [r7, #20]
 80164dc:	685b      	ldr	r3, [r3, #4]
 80164de:	685a      	ldr	r2, [r3, #4]
 80164e0:	4922      	ldr	r1, [pc, #136]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80164e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164e4:	019b      	lsls	r3, r3, #6
 80164e6:	440b      	add	r3, r1
 80164e8:	3310      	adds	r3, #16
 80164ea:	601a      	str	r2, [r3, #0]
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
 80164ec:	4a1f      	ldr	r2, [pc, #124]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80164ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80164f0:	019b      	lsls	r3, r3, #6
 80164f2:	4413      	add	r3, r2
 80164f4:	3314      	adds	r3, #20
 80164f6:	781b      	ldrb	r3, [r3, #0]
 80164f8:	2b02      	cmp	r3, #2
 80164fa:	d118      	bne.n	801652e <_Z18trained_model_initPFPvjjE+0x1fa>
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
 80164fc:	4a1b      	ldr	r2, [pc, #108]	; (801656c <_Z18trained_model_initPFPvjjE+0x238>)
 80164fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016500:	019b      	lsls	r3, r3, #6
 8016502:	4413      	add	r3, r2
 8016504:	3304      	adds	r3, #4
 8016506:	6819      	ldr	r1, [r3, #0]
 8016508:	4819      	ldr	r0, [pc, #100]	; (8016570 <_Z18trained_model_initPFPvjjE+0x23c>)
 801650a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801650c:	4613      	mov	r3, r2
 801650e:	005b      	lsls	r3, r3, #1
 8016510:	4413      	add	r3, r2
 8016512:	00db      	lsls	r3, r3, #3
 8016514:	4403      	add	r3, r0
 8016516:	330c      	adds	r3, #12
 8016518:	681b      	ldr	r3, [r3, #0]
 801651a:	440b      	add	r3, r1
 801651c:	613b      	str	r3, [r7, #16]
      if (data_end_ptr > tensor_boundary) {
 801651e:	4b0d      	ldr	r3, [pc, #52]	; (8016554 <_Z18trained_model_initPFPvjjE+0x220>)
 8016520:	681b      	ldr	r3, [r3, #0]
 8016522:	693a      	ldr	r2, [r7, #16]
 8016524:	429a      	cmp	r2, r3
 8016526:	d902      	bls.n	801652e <_Z18trained_model_initPFPvjjE+0x1fa>
        tensor_boundary = data_end_ptr;
 8016528:	4a0a      	ldr	r2, [pc, #40]	; (8016554 <_Z18trained_model_initPFPvjjE+0x220>)
 801652a:	693b      	ldr	r3, [r7, #16]
 801652c:	6013      	str	r3, [r2, #0]
  for(size_t i = 0; i < 42; ++i) {
 801652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016530:	3301      	adds	r3, #1
 8016532:	627b      	str	r3, [r7, #36]	; 0x24
 8016534:	e72e      	b.n	8016394 <_Z18trained_model_initPFPvjjE+0x60>
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
 8016536:	4b07      	ldr	r3, [pc, #28]	; (8016554 <_Z18trained_model_initPFPvjjE+0x220>)
 8016538:	681a      	ldr	r2, [r3, #0]
 801653a:	4b07      	ldr	r3, [pc, #28]	; (8016558 <_Z18trained_model_initPFPvjjE+0x224>)
 801653c:	681b      	ldr	r3, [r3, #0]
 801653e:	429a      	cmp	r2, r3
 8016540:	d91a      	bls.n	8016578 <_Z18trained_model_initPFPvjjE+0x244>
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
 8016542:	480c      	ldr	r0, [pc, #48]	; (8016574 <_Z18trained_model_initPFPvjjE+0x240>)
 8016544:	f005 faa6 	bl	801ba94 <puts>
    return kTfLiteError;
 8016548:	2301      	movs	r3, #1
 801654a:	e10a      	b.n	8016762 <_Z18trained_model_initPFPvjjE+0x42e>
 801654c:	20006b78 	.word	0x20006b78
 8016550:	0801ef1c 	.word	0x0801ef1c
 8016554:	20006b7c 	.word	0x20006b7c
 8016558:	20006b80 	.word	0x20006b80
 801655c:	20006b84 	.word	0x20006b84
 8016560:	080161cd 	.word	0x080161cd
 8016564:	08016299 	.word	0x08016299
 8016568:	080162f1 	.word	0x080162f1
 801656c:	20006bd4 	.word	0x20006bd4
 8016570:	20000124 	.word	0x20000124
 8016574:	0801ef44 	.word	0x0801ef44
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
 8016578:	f7fe fbf2 	bl	8014d60 <_ZN6tflite3ops5micro16Register_RESHAPEEv>
 801657c:	4603      	mov	r3, r0
 801657e:	4a7b      	ldr	r2, [pc, #492]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 8016580:	4614      	mov	r4, r2
 8016582:	461d      	mov	r5, r3
 8016584:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016586:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8016588:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801658c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
 8016590:	f7fc f8e6 	bl	8012760 <_ZN6tflite3ops5micro16Register_CONV_2DEv>
 8016594:	4602      	mov	r2, r0
 8016596:	4b75      	ldr	r3, [pc, #468]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 8016598:	f103 0420 	add.w	r4, r3, #32
 801659c:	4615      	mov	r5, r2
 801659e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165a0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165a2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165a6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
 80165aa:	f7fa fc33 	bl	8010e14 <_ZN6tflite3ops5micro12Register_ADDEv>
 80165ae:	4602      	mov	r2, r0
 80165b0:	4b6e      	ldr	r3, [pc, #440]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 80165b2:	f103 0440 	add.w	r4, r3, #64	; 0x40
 80165b6:	4615      	mov	r5, r2
 80165b8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165ba:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165bc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165c0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
 80165c4:	f7fe f9e4 	bl	8014990 <_ZN6tflite3ops5micro20Register_MAX_POOL_2DEv>
 80165c8:	4602      	mov	r2, r0
 80165ca:	4b68      	ldr	r3, [pc, #416]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 80165cc:	f103 0460 	add.w	r4, r3, #96	; 0x60
 80165d0:	4615      	mov	r5, r2
 80165d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165d6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165da:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
 80165de:	f7fc ff69 	bl	80134b4 <_ZN6tflite3ops5micro24Register_FULLY_CONNECTEDEv>
 80165e2:	4602      	mov	r2, r0
 80165e4:	4b61      	ldr	r3, [pc, #388]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 80165e6:	f103 0480 	add.w	r4, r3, #128	; 0x80
 80165ea:	4615      	mov	r5, r2
 80165ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80165ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80165f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80165f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();
 80165f8:	f7fe ffa0 	bl	801553c <_ZN6tflite3ops5micro16Register_SOFTMAXEv>
 80165fc:	4602      	mov	r2, r0
 80165fe:	4b5b      	ldr	r3, [pc, #364]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 8016600:	f103 04a0 	add.w	r4, r3, #160	; 0xa0
 8016604:	4615      	mov	r5, r2
 8016606:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8016608:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801660a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 801660e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

  for(size_t i = 0; i < 21; ++i) {
 8016612:	2300      	movs	r3, #0
 8016614:	623b      	str	r3, [r7, #32]
 8016616:	6a3b      	ldr	r3, [r7, #32]
 8016618:	2b14      	cmp	r3, #20
 801661a:	d86f      	bhi.n	80166fc <_Z18trained_model_initPFPvjjE+0x3c8>
    tflNodes[i].inputs = nodeData[i].inputs;
 801661c:	4a54      	ldr	r2, [pc, #336]	; (8016770 <_Z18trained_model_initPFPvjjE+0x43c>)
 801661e:	6a3b      	ldr	r3, [r7, #32]
 8016620:	011b      	lsls	r3, r3, #4
 8016622:	4413      	add	r3, r2
 8016624:	6819      	ldr	r1, [r3, #0]
 8016626:	4853      	ldr	r0, [pc, #332]	; (8016774 <_Z18trained_model_initPFPvjjE+0x440>)
 8016628:	6a3a      	ldr	r2, [r7, #32]
 801662a:	4613      	mov	r3, r2
 801662c:	00db      	lsls	r3, r3, #3
 801662e:	4413      	add	r3, r2
 8016630:	009b      	lsls	r3, r3, #2
 8016632:	4403      	add	r3, r0
 8016634:	6019      	str	r1, [r3, #0]
    tflNodes[i].outputs = nodeData[i].outputs;
 8016636:	4a4e      	ldr	r2, [pc, #312]	; (8016770 <_Z18trained_model_initPFPvjjE+0x43c>)
 8016638:	6a3b      	ldr	r3, [r7, #32]
 801663a:	011b      	lsls	r3, r3, #4
 801663c:	4413      	add	r3, r2
 801663e:	3304      	adds	r3, #4
 8016640:	6819      	ldr	r1, [r3, #0]
 8016642:	484c      	ldr	r0, [pc, #304]	; (8016774 <_Z18trained_model_initPFPvjjE+0x440>)
 8016644:	6a3a      	ldr	r2, [r7, #32]
 8016646:	4613      	mov	r3, r2
 8016648:	00db      	lsls	r3, r3, #3
 801664a:	4413      	add	r3, r2
 801664c:	009b      	lsls	r3, r3, #2
 801664e:	4403      	add	r3, r0
 8016650:	3304      	adds	r3, #4
 8016652:	6019      	str	r1, [r3, #0]
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
 8016654:	4a46      	ldr	r2, [pc, #280]	; (8016770 <_Z18trained_model_initPFPvjjE+0x43c>)
 8016656:	6a3b      	ldr	r3, [r7, #32]
 8016658:	011b      	lsls	r3, r3, #4
 801665a:	4413      	add	r3, r2
 801665c:	3308      	adds	r3, #8
 801665e:	6819      	ldr	r1, [r3, #0]
 8016660:	4844      	ldr	r0, [pc, #272]	; (8016774 <_Z18trained_model_initPFPvjjE+0x440>)
 8016662:	6a3a      	ldr	r2, [r7, #32]
 8016664:	4613      	mov	r3, r2
 8016666:	00db      	lsls	r3, r3, #3
 8016668:	4413      	add	r3, r2
 801666a:	009b      	lsls	r3, r3, #2
 801666c:	4403      	add	r3, r0
 801666e:	3314      	adds	r3, #20
 8016670:	6019      	str	r1, [r3, #0]
    tflNodes[i].custom_initial_data = nullptr;
 8016672:	4940      	ldr	r1, [pc, #256]	; (8016774 <_Z18trained_model_initPFPvjjE+0x440>)
 8016674:	6a3a      	ldr	r2, [r7, #32]
 8016676:	4613      	mov	r3, r2
 8016678:	00db      	lsls	r3, r3, #3
 801667a:	4413      	add	r3, r2
 801667c:	009b      	lsls	r3, r3, #2
 801667e:	440b      	add	r3, r1
 8016680:	3318      	adds	r3, #24
 8016682:	2200      	movs	r2, #0
 8016684:	601a      	str	r2, [r3, #0]
    tflNodes[i].custom_initial_data_size = 0;
 8016686:	493b      	ldr	r1, [pc, #236]	; (8016774 <_Z18trained_model_initPFPvjjE+0x440>)
 8016688:	6a3a      	ldr	r2, [r7, #32]
 801668a:	4613      	mov	r3, r2
 801668c:	00db      	lsls	r3, r3, #3
 801668e:	4413      	add	r3, r2
 8016690:	009b      	lsls	r3, r3, #2
 8016692:	440b      	add	r3, r1
 8016694:	331c      	adds	r3, #28
 8016696:	2200      	movs	r2, #0
 8016698:	601a      	str	r2, [r3, #0]
    if (registrations[nodeData[i].used_op_index].init) {
 801669a:	4a35      	ldr	r2, [pc, #212]	; (8016770 <_Z18trained_model_initPFPvjjE+0x43c>)
 801669c:	6a3b      	ldr	r3, [r7, #32]
 801669e:	011b      	lsls	r3, r3, #4
 80166a0:	4413      	add	r3, r2
 80166a2:	330c      	adds	r3, #12
 80166a4:	781b      	ldrb	r3, [r3, #0]
 80166a6:	4a31      	ldr	r2, [pc, #196]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 80166a8:	015b      	lsls	r3, r3, #5
 80166aa:	4413      	add	r3, r2
 80166ac:	681b      	ldr	r3, [r3, #0]
 80166ae:	2b00      	cmp	r3, #0
 80166b0:	d020      	beq.n	80166f4 <_Z18trained_model_initPFPvjjE+0x3c0>
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
 80166b2:	4a2f      	ldr	r2, [pc, #188]	; (8016770 <_Z18trained_model_initPFPvjjE+0x43c>)
 80166b4:	6a3b      	ldr	r3, [r7, #32]
 80166b6:	011b      	lsls	r3, r3, #4
 80166b8:	4413      	add	r3, r2
 80166ba:	330c      	adds	r3, #12
 80166bc:	781b      	ldrb	r3, [r3, #0]
 80166be:	4a2b      	ldr	r2, [pc, #172]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 80166c0:	015b      	lsls	r3, r3, #5
 80166c2:	4413      	add	r3, r2
 80166c4:	681c      	ldr	r4, [r3, #0]
 80166c6:	492b      	ldr	r1, [pc, #172]	; (8016774 <_Z18trained_model_initPFPvjjE+0x440>)
 80166c8:	6a3a      	ldr	r2, [r7, #32]
 80166ca:	4613      	mov	r3, r2
 80166cc:	00db      	lsls	r3, r3, #3
 80166ce:	4413      	add	r3, r2
 80166d0:	009b      	lsls	r3, r3, #2
 80166d2:	440b      	add	r3, r1
 80166d4:	3314      	adds	r3, #20
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	2200      	movs	r2, #0
 80166da:	4619      	mov	r1, r3
 80166dc:	4826      	ldr	r0, [pc, #152]	; (8016778 <_Z18trained_model_initPFPvjjE+0x444>)
 80166de:	47a0      	blx	r4
 80166e0:	4601      	mov	r1, r0
 80166e2:	4824      	ldr	r0, [pc, #144]	; (8016774 <_Z18trained_model_initPFPvjjE+0x440>)
 80166e4:	6a3a      	ldr	r2, [r7, #32]
 80166e6:	4613      	mov	r3, r2
 80166e8:	00db      	lsls	r3, r3, #3
 80166ea:	4413      	add	r3, r2
 80166ec:	009b      	lsls	r3, r3, #2
 80166ee:	4403      	add	r3, r0
 80166f0:	3310      	adds	r3, #16
 80166f2:	6019      	str	r1, [r3, #0]
  for(size_t i = 0; i < 21; ++i) {
 80166f4:	6a3b      	ldr	r3, [r7, #32]
 80166f6:	3301      	adds	r3, #1
 80166f8:	623b      	str	r3, [r7, #32]
 80166fa:	e78c      	b.n	8016616 <_Z18trained_model_initPFPvjjE+0x2e2>
    }
  }
  for(size_t i = 0; i < 21; ++i) {
 80166fc:	2300      	movs	r3, #0
 80166fe:	61fb      	str	r3, [r7, #28]
 8016700:	69fb      	ldr	r3, [r7, #28]
 8016702:	2b14      	cmp	r3, #20
 8016704:	d82c      	bhi.n	8016760 <_Z18trained_model_initPFPvjjE+0x42c>
    if (registrations[nodeData[i].used_op_index].prepare) {
 8016706:	4a1a      	ldr	r2, [pc, #104]	; (8016770 <_Z18trained_model_initPFPvjjE+0x43c>)
 8016708:	69fb      	ldr	r3, [r7, #28]
 801670a:	011b      	lsls	r3, r3, #4
 801670c:	4413      	add	r3, r2
 801670e:	330c      	adds	r3, #12
 8016710:	781b      	ldrb	r3, [r3, #0]
 8016712:	4a16      	ldr	r2, [pc, #88]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 8016714:	015b      	lsls	r3, r3, #5
 8016716:	4413      	add	r3, r2
 8016718:	3308      	adds	r3, #8
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	2b00      	cmp	r3, #0
 801671e:	d01b      	beq.n	8016758 <_Z18trained_model_initPFPvjjE+0x424>
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
 8016720:	4a13      	ldr	r2, [pc, #76]	; (8016770 <_Z18trained_model_initPFPvjjE+0x43c>)
 8016722:	69fb      	ldr	r3, [r7, #28]
 8016724:	011b      	lsls	r3, r3, #4
 8016726:	4413      	add	r3, r2
 8016728:	330c      	adds	r3, #12
 801672a:	781b      	ldrb	r3, [r3, #0]
 801672c:	4a0f      	ldr	r2, [pc, #60]	; (801676c <_Z18trained_model_initPFPvjjE+0x438>)
 801672e:	015b      	lsls	r3, r3, #5
 8016730:	4413      	add	r3, r2
 8016732:	3308      	adds	r3, #8
 8016734:	681c      	ldr	r4, [r3, #0]
 8016736:	69fa      	ldr	r2, [r7, #28]
 8016738:	4613      	mov	r3, r2
 801673a:	00db      	lsls	r3, r3, #3
 801673c:	4413      	add	r3, r2
 801673e:	009b      	lsls	r3, r3, #2
 8016740:	4a0c      	ldr	r2, [pc, #48]	; (8016774 <_Z18trained_model_initPFPvjjE+0x440>)
 8016742:	4413      	add	r3, r2
 8016744:	4619      	mov	r1, r3
 8016746:	480c      	ldr	r0, [pc, #48]	; (8016778 <_Z18trained_model_initPFPvjjE+0x444>)
 8016748:	47a0      	blx	r4
 801674a:	4603      	mov	r3, r0
 801674c:	73fb      	strb	r3, [r7, #15]
      if (status != kTfLiteOk) {
 801674e:	7bfb      	ldrb	r3, [r7, #15]
 8016750:	2b00      	cmp	r3, #0
 8016752:	d001      	beq.n	8016758 <_Z18trained_model_initPFPvjjE+0x424>
        return status;
 8016754:	7bfb      	ldrb	r3, [r7, #15]
 8016756:	e004      	b.n	8016762 <_Z18trained_model_initPFPvjjE+0x42e>
  for(size_t i = 0; i < 21; ++i) {
 8016758:	69fb      	ldr	r3, [r7, #28]
 801675a:	3301      	adds	r3, #1
 801675c:	61fb      	str	r3, [r7, #28]
 801675e:	e7cf      	b.n	8016700 <_Z18trained_model_initPFPvjjE+0x3cc>
      }
    }
  }
  return kTfLiteOk;
 8016760:	2300      	movs	r3, #0
}
 8016762:	4618      	mov	r0, r3
 8016764:	3728      	adds	r7, #40	; 0x28
 8016766:	46bd      	mov	sp, r7
 8016768:	bdb0      	pop	{r4, r5, r7, pc}
 801676a:	bf00      	nop
 801676c:	20007654 	.word	0x20007654
 8016770:	0803e750 	.word	0x0803e750
 8016774:	20007714 	.word	0x20007714
 8016778:	20006b84 	.word	0x20006b84

0801677c <_Z19trained_model_inputi>:

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
 801677c:	b480      	push	{r7}
 801677e:	b083      	sub	sp, #12
 8016780:	af00      	add	r7, sp, #0
 8016782:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[inTensorIndices[index]];
 8016784:	4b05      	ldr	r3, [pc, #20]	; (801679c <_Z19trained_model_inputi+0x20>)
 8016786:	689a      	ldr	r2, [r3, #8]
 8016788:	2300      	movs	r3, #0
 801678a:	019b      	lsls	r3, r3, #6
 801678c:	4413      	add	r3, r2
}
 801678e:	4618      	mov	r0, r3
 8016790:	370c      	adds	r7, #12
 8016792:	46bd      	mov	sp, r7
 8016794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016798:	4770      	bx	lr
 801679a:	bf00      	nop
 801679c:	20006b84 	.word	0x20006b84

080167a0 <_Z20trained_model_outputi>:

static const int outTensorIndices[] = {
  41, 
};
TfLiteTensor* trained_model_output(int index) {
 80167a0:	b480      	push	{r7}
 80167a2:	b083      	sub	sp, #12
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
  return &ctx.tensors[outTensorIndices[index]];
 80167a8:	4b05      	ldr	r3, [pc, #20]	; (80167c0 <_Z20trained_model_outputi+0x20>)
 80167aa:	689a      	ldr	r2, [r3, #8]
 80167ac:	2329      	movs	r3, #41	; 0x29
 80167ae:	019b      	lsls	r3, r3, #6
 80167b0:	4413      	add	r3, r2
}
 80167b2:	4618      	mov	r0, r3
 80167b4:	370c      	adds	r7, #12
 80167b6:	46bd      	mov	sp, r7
 80167b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80167bc:	4770      	bx	lr
 80167be:	bf00      	nop
 80167c0:	20006b84 	.word	0x20006b84

080167c4 <_Z20trained_model_invokev>:

TfLiteStatus trained_model_invoke() {
 80167c4:	b590      	push	{r4, r7, lr}
 80167c6:	b083      	sub	sp, #12
 80167c8:	af00      	add	r7, sp, #0
  for(size_t i = 0; i < 21; ++i) {
 80167ca:	2300      	movs	r3, #0
 80167cc:	607b      	str	r3, [r7, #4]
 80167ce:	687b      	ldr	r3, [r7, #4]
 80167d0:	2b14      	cmp	r3, #20
 80167d2:	d81f      	bhi.n	8016814 <_Z20trained_model_invokev+0x50>
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);
 80167d4:	4a12      	ldr	r2, [pc, #72]	; (8016820 <_Z20trained_model_invokev+0x5c>)
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	011b      	lsls	r3, r3, #4
 80167da:	4413      	add	r3, r2
 80167dc:	330c      	adds	r3, #12
 80167de:	781b      	ldrb	r3, [r3, #0]
 80167e0:	4a10      	ldr	r2, [pc, #64]	; (8016824 <_Z20trained_model_invokev+0x60>)
 80167e2:	015b      	lsls	r3, r3, #5
 80167e4:	4413      	add	r3, r2
 80167e6:	330c      	adds	r3, #12
 80167e8:	681c      	ldr	r4, [r3, #0]
 80167ea:	687a      	ldr	r2, [r7, #4]
 80167ec:	4613      	mov	r3, r2
 80167ee:	00db      	lsls	r3, r3, #3
 80167f0:	4413      	add	r3, r2
 80167f2:	009b      	lsls	r3, r3, #2
 80167f4:	4a0c      	ldr	r2, [pc, #48]	; (8016828 <_Z20trained_model_invokev+0x64>)
 80167f6:	4413      	add	r3, r2
 80167f8:	4619      	mov	r1, r3
 80167fa:	480c      	ldr	r0, [pc, #48]	; (801682c <_Z20trained_model_invokev+0x68>)
 80167fc:	47a0      	blx	r4
 80167fe:	4603      	mov	r3, r0
 8016800:	70fb      	strb	r3, [r7, #3]
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
 8016802:	78fb      	ldrb	r3, [r7, #3]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d001      	beq.n	801680c <_Z20trained_model_invokev+0x48>
      return status;
 8016808:	78fb      	ldrb	r3, [r7, #3]
 801680a:	e004      	b.n	8016816 <_Z20trained_model_invokev+0x52>
  for(size_t i = 0; i < 21; ++i) {
 801680c:	687b      	ldr	r3, [r7, #4]
 801680e:	3301      	adds	r3, #1
 8016810:	607b      	str	r3, [r7, #4]
 8016812:	e7dc      	b.n	80167ce <_Z20trained_model_invokev+0xa>
    }
  }
  return kTfLiteOk;
 8016814:	2300      	movs	r3, #0
}
 8016816:	4618      	mov	r0, r3
 8016818:	370c      	adds	r7, #12
 801681a:	46bd      	mov	sp, r7
 801681c:	bd90      	pop	{r4, r7, pc}
 801681e:	bf00      	nop
 8016820:	0803e750 	.word	0x0803e750
 8016824:	20007654 	.word	0x20007654
 8016828:	20007714 	.word	0x20007714
 801682c:	20006b84 	.word	0x20006b84

08016830 <_Z19trained_model_resetPFvPvE>:

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
 8016830:	b580      	push	{r7, lr}
 8016832:	b084      	sub	sp, #16
 8016834:	af00      	add	r7, sp, #0
 8016836:	6078      	str	r0, [r7, #4]
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
 8016838:	4b15      	ldr	r3, [pc, #84]	; (8016890 <_Z19trained_model_resetPFvPvE+0x60>)
 801683a:	681a      	ldr	r2, [r3, #0]
 801683c:	687b      	ldr	r3, [r7, #4]
 801683e:	4610      	mov	r0, r2
 8016840:	4798      	blx	r3
#endif
  scratch_buffers.clear();
 8016842:	4814      	ldr	r0, [pc, #80]	; (8016894 <_Z19trained_model_resetPFvPvE+0x64>)
 8016844:	f000 f8ff 	bl	8016a46 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8016848:	2300      	movs	r3, #0
 801684a:	60fb      	str	r3, [r7, #12]
 801684c:	4812      	ldr	r0, [pc, #72]	; (8016898 <_Z19trained_model_resetPFvPvE+0x68>)
 801684e:	f000 f908 	bl	8016a62 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 8016852:	4602      	mov	r2, r0
 8016854:	68fb      	ldr	r3, [r7, #12]
 8016856:	4293      	cmp	r3, r2
 8016858:	bf34      	ite	cc
 801685a:	2301      	movcc	r3, #1
 801685c:	2300      	movcs	r3, #0
 801685e:	b2db      	uxtb	r3, r3
 8016860:	2b00      	cmp	r3, #0
 8016862:	d00c      	beq.n	801687e <_Z19trained_model_resetPFvPvE+0x4e>
    free(overflow_buffers[ix]);
 8016864:	68f9      	ldr	r1, [r7, #12]
 8016866:	480c      	ldr	r0, [pc, #48]	; (8016898 <_Z19trained_model_resetPFvPvE+0x68>)
 8016868:	f000 f90b 	bl	8016a82 <_ZNSt6vectorIPvSaIS0_EEixEj>
 801686c:	4603      	mov	r3, r0
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	4618      	mov	r0, r3
 8016872:	f004 fc9b 	bl	801b1ac <free>
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
 8016876:	68fb      	ldr	r3, [r7, #12]
 8016878:	3301      	adds	r3, #1
 801687a:	60fb      	str	r3, [r7, #12]
 801687c:	e7e6      	b.n	801684c <_Z19trained_model_resetPFvPvE+0x1c>
  }
  overflow_buffers.clear();
 801687e:	4806      	ldr	r0, [pc, #24]	; (8016898 <_Z19trained_model_resetPFvPvE+0x68>)
 8016880:	f000 f90f 	bl	8016aa2 <_ZNSt6vectorIPvSaIS0_EE5clearEv>
  return kTfLiteOk;
 8016884:	2300      	movs	r3, #0
}
 8016886:	4618      	mov	r0, r3
 8016888:	3710      	adds	r7, #16
 801688a:	46bd      	mov	sp, r7
 801688c:	bd80      	pop	{r7, pc}
 801688e:	bf00      	nop
 8016890:	20006b78 	.word	0x20006b78
 8016894:	20007a14 	.word	0x20007a14
 8016898:	20007a08 	.word	0x20007a08

0801689c <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 801689c:	b580      	push	{r7, lr}
 801689e:	b082      	sub	sp, #8
 80168a0:	af00      	add	r7, sp, #0
 80168a2:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 80168a4:	6878      	ldr	r0, [r7, #4]
 80168a6:	f000 f90a 	bl	8016abe <_ZNSaIPvEC1Ev>
 80168aa:	687b      	ldr	r3, [r7, #4]
 80168ac:	4618      	mov	r0, r3
 80168ae:	f000 f912 	bl	8016ad6 <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>
	{ }
 80168b2:	687b      	ldr	r3, [r7, #4]
 80168b4:	4618      	mov	r0, r3
 80168b6:	3708      	adds	r7, #8
 80168b8:	46bd      	mov	sp, r7
 80168ba:	bd80      	pop	{r7, pc}

080168bc <_ZNSaIPvED1Ev>:
      ~allocator() _GLIBCXX_NOTHROW { }
 80168bc:	b580      	push	{r7, lr}
 80168be:	b082      	sub	sp, #8
 80168c0:	af00      	add	r7, sp, #0
 80168c2:	6078      	str	r0, [r7, #4]
 80168c4:	6878      	ldr	r0, [r7, #4]
 80168c6:	f000 f91a 	bl	8016afe <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>
 80168ca:	687b      	ldr	r3, [r7, #4]
 80168cc:	4618      	mov	r0, r3
 80168ce:	3708      	adds	r7, #8
 80168d0:	46bd      	mov	sp, r7
 80168d2:	bd80      	pop	{r7, pc}

080168d4 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 80168d4:	b580      	push	{r7, lr}
 80168d6:	b082      	sub	sp, #8
 80168d8:	af00      	add	r7, sp, #0
 80168da:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	689a      	ldr	r2, [r3, #8]
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	1ad3      	subs	r3, r2, r3
 80168ea:	109b      	asrs	r3, r3, #2
	_M_deallocate(_M_impl._M_start,
 80168ec:	461a      	mov	r2, r3
 80168ee:	6878      	ldr	r0, [r7, #4]
 80168f0:	f000 f910 	bl	8016b14 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      }
 80168f4:	687b      	ldr	r3, [r7, #4]
 80168f6:	4618      	mov	r0, r3
 80168f8:	f7ff fc42 	bl	8016180 <_ZNSt12_Vector_baseIPvSaIS0_EE12_Vector_implD1Ev>
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	4618      	mov	r0, r3
 8016900:	3708      	adds	r7, #8
 8016902:	46bd      	mov	sp, r7
 8016904:	bd80      	pop	{r7, pc}

08016906 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_>:
      push_back(const value_type& __x)
 8016906:	b580      	push	{r7, lr}
 8016908:	b082      	sub	sp, #8
 801690a:	af00      	add	r7, sp, #0
 801690c:	6078      	str	r0, [r7, #4]
 801690e:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 8016910:	687b      	ldr	r3, [r7, #4]
 8016912:	685a      	ldr	r2, [r3, #4]
 8016914:	687b      	ldr	r3, [r7, #4]
 8016916:	689b      	ldr	r3, [r3, #8]
 8016918:	429a      	cmp	r2, r3
 801691a:	d00c      	beq.n	8016936 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x30>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 801691c:	6878      	ldr	r0, [r7, #4]
 801691e:	687b      	ldr	r3, [r7, #4]
 8016920:	685b      	ldr	r3, [r3, #4]
 8016922:	683a      	ldr	r2, [r7, #0]
 8016924:	4619      	mov	r1, r3
 8016926:	f000 f908 	bl	8016b3a <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	685b      	ldr	r3, [r3, #4]
 801692e:	1d1a      	adds	r2, r3, #4
 8016930:	687b      	ldr	r3, [r7, #4]
 8016932:	605a      	str	r2, [r3, #4]
      }
 8016934:	e008      	b.n	8016948 <_ZNSt6vectorIPvSaIS0_EE9push_backERKS0_+0x42>
	  _M_realloc_insert(end(), __x);
 8016936:	6878      	ldr	r0, [r7, #4]
 8016938:	f000 f912 	bl	8016b60 <_ZNSt6vectorIPvSaIS0_EE3endEv>
 801693c:	4603      	mov	r3, r0
 801693e:	683a      	ldr	r2, [r7, #0]
 8016940:	4619      	mov	r1, r3
 8016942:	6878      	ldr	r0, [r7, #4]
 8016944:	f000 f934 	bl	8016bb0 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>
      }
 8016948:	bf00      	nop
 801694a:	3708      	adds	r7, #8
 801694c:	46bd      	mov	sp, r7
 801694e:	bd80      	pop	{r7, pc}

08016950 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implC1Ev>:
	_Vector_impl() _GLIBCXX_NOEXCEPT_IF(
 8016950:	b580      	push	{r7, lr}
 8016952:	b082      	sub	sp, #8
 8016954:	af00      	add	r7, sp, #0
 8016956:	6078      	str	r0, [r7, #4]
	: _Tp_alloc_type()
 8016958:	6878      	ldr	r0, [r7, #4]
 801695a:	f000 f9e5 	bl	8016d28 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 801695e:	687b      	ldr	r3, [r7, #4]
 8016960:	4618      	mov	r0, r3
 8016962:	f000 f9ed 	bl	8016d40 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>
	{ }
 8016966:	687b      	ldr	r3, [r7, #4]
 8016968:	4618      	mov	r0, r3
 801696a:	3708      	adds	r7, #8
 801696c:	46bd      	mov	sp, r7
 801696e:	bd80      	pop	{r7, pc}

08016970 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8016970:	b580      	push	{r7, lr}
 8016972:	b082      	sub	sp, #8
 8016974:	af00      	add	r7, sp, #0
 8016976:	6078      	str	r0, [r7, #4]
 8016978:	6878      	ldr	r0, [r7, #4]
 801697a:	f000 f9f5 	bl	8016d68 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	4618      	mov	r0, r3
 8016982:	3708      	adds	r7, #8
 8016984:	46bd      	mov	sp, r7
 8016986:	bd80      	pop	{r7, pc}

08016988 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>:
      ~_Vector_base() _GLIBCXX_NOEXCEPT
 8016988:	b580      	push	{r7, lr}
 801698a:	b082      	sub	sp, #8
 801698c:	af00      	add	r7, sp, #0
 801698e:	6078      	str	r0, [r7, #4]
	_M_deallocate(_M_impl._M_start,
 8016990:	687b      	ldr	r3, [r7, #4]
 8016992:	6819      	ldr	r1, [r3, #0]
		      _M_impl._M_end_of_storage - _M_impl._M_start);
 8016994:	687b      	ldr	r3, [r7, #4]
 8016996:	689a      	ldr	r2, [r3, #8]
 8016998:	687b      	ldr	r3, [r7, #4]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	1ad3      	subs	r3, r2, r3
 801699e:	10db      	asrs	r3, r3, #3
	_M_deallocate(_M_impl._M_start,
 80169a0:	461a      	mov	r2, r3
 80169a2:	6878      	ldr	r0, [r7, #4]
 80169a4:	f000 f9eb 	bl	8016d7e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      }
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	4618      	mov	r0, r3
 80169ac:	f7ff fc4e 	bl	801624c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_Vector_implD1Ev>
 80169b0:	687b      	ldr	r3, [r7, #4]
 80169b2:	4618      	mov	r0, r3
 80169b4:	3708      	adds	r7, #8
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}

080169ba <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_>:
      push_back(const value_type& __x)
 80169ba:	b580      	push	{r7, lr}
 80169bc:	b082      	sub	sp, #8
 80169be:	af00      	add	r7, sp, #0
 80169c0:	6078      	str	r0, [r7, #4]
 80169c2:	6039      	str	r1, [r7, #0]
	if (this->_M_impl._M_finish != this->_M_impl._M_end_of_storage)
 80169c4:	687b      	ldr	r3, [r7, #4]
 80169c6:	685a      	ldr	r2, [r3, #4]
 80169c8:	687b      	ldr	r3, [r7, #4]
 80169ca:	689b      	ldr	r3, [r3, #8]
 80169cc:	429a      	cmp	r2, r3
 80169ce:	d00d      	beq.n	80169ec <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x32>
	    _Alloc_traits::construct(this->_M_impl, this->_M_impl._M_finish,
 80169d0:	6878      	ldr	r0, [r7, #4]
 80169d2:	687b      	ldr	r3, [r7, #4]
 80169d4:	685b      	ldr	r3, [r3, #4]
 80169d6:	683a      	ldr	r2, [r7, #0]
 80169d8:	4619      	mov	r1, r3
 80169da:	f000 f9e3 	bl	8016da4 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	    ++this->_M_impl._M_finish;
 80169de:	687b      	ldr	r3, [r7, #4]
 80169e0:	685b      	ldr	r3, [r3, #4]
 80169e2:	f103 0208 	add.w	r2, r3, #8
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	605a      	str	r2, [r3, #4]
      }
 80169ea:	e008      	b.n	80169fe <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE9push_backERKS1_+0x44>
	  _M_realloc_insert(end(), __x);
 80169ec:	6878      	ldr	r0, [r7, #4]
 80169ee:	f000 f9ec 	bl	8016dca <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>
 80169f2:	4603      	mov	r3, r0
 80169f4:	683a      	ldr	r2, [r7, #0]
 80169f6:	4619      	mov	r1, r3
 80169f8:	6878      	ldr	r0, [r7, #4]
 80169fa:	f000 fa0d 	bl	8016e18 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>
      }
 80169fe:	bf00      	nop
 8016a00:	3708      	adds	r7, #8
 8016a02:	46bd      	mov	sp, r7
 8016a04:	bd80      	pop	{r7, pc}

08016a06 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016a06:	b480      	push	{r7}
 8016a08:	b083      	sub	sp, #12
 8016a0a:	af00      	add	r7, sp, #0
 8016a0c:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016a0e:	687b      	ldr	r3, [r7, #4]
 8016a10:	685a      	ldr	r2, [r3, #4]
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	1ad3      	subs	r3, r2, r3
 8016a18:	10db      	asrs	r3, r3, #3
 8016a1a:	4618      	mov	r0, r3
 8016a1c:	370c      	adds	r7, #12
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a24:	4770      	bx	lr

08016a26 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8016a26:	b480      	push	{r7}
 8016a28:	b083      	sub	sp, #12
 8016a2a:	af00      	add	r7, sp, #0
 8016a2c:	6078      	str	r0, [r7, #4]
 8016a2e:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	681a      	ldr	r2, [r3, #0]
 8016a34:	683b      	ldr	r3, [r7, #0]
 8016a36:	00db      	lsls	r3, r3, #3
 8016a38:	4413      	add	r3, r2
      }
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	370c      	adds	r7, #12
 8016a3e:	46bd      	mov	sp, r7
 8016a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a44:	4770      	bx	lr

08016a46 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8016a46:	b580      	push	{r7, lr}
 8016a48:	b082      	sub	sp, #8
 8016a4a:	af00      	add	r7, sp, #0
 8016a4c:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	681b      	ldr	r3, [r3, #0]
 8016a52:	4619      	mov	r1, r3
 8016a54:	6878      	ldr	r0, [r7, #4]
 8016a56:	f000 fa9b 	bl	8016f90 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>
 8016a5a:	bf00      	nop
 8016a5c:	3708      	adds	r7, #8
 8016a5e:	46bd      	mov	sp, r7
 8016a60:	bd80      	pop	{r7, pc}

08016a62 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>:
      size() const _GLIBCXX_NOEXCEPT
 8016a62:	b480      	push	{r7}
 8016a64:	b083      	sub	sp, #12
 8016a66:	af00      	add	r7, sp, #0
 8016a68:	6078      	str	r0, [r7, #4]
      { return size_type(this->_M_impl._M_finish - this->_M_impl._M_start); }
 8016a6a:	687b      	ldr	r3, [r7, #4]
 8016a6c:	685a      	ldr	r2, [r3, #4]
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	1ad3      	subs	r3, r2, r3
 8016a74:	109b      	asrs	r3, r3, #2
 8016a76:	4618      	mov	r0, r3
 8016a78:	370c      	adds	r7, #12
 8016a7a:	46bd      	mov	sp, r7
 8016a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016a80:	4770      	bx	lr

08016a82 <_ZNSt6vectorIPvSaIS0_EEixEj>:
      operator[](size_type __n) _GLIBCXX_NOEXCEPT
 8016a82:	b480      	push	{r7}
 8016a84:	b083      	sub	sp, #12
 8016a86:	af00      	add	r7, sp, #0
 8016a88:	6078      	str	r0, [r7, #4]
 8016a8a:	6039      	str	r1, [r7, #0]
	return *(this->_M_impl._M_start + __n);
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	681a      	ldr	r2, [r3, #0]
 8016a90:	683b      	ldr	r3, [r7, #0]
 8016a92:	009b      	lsls	r3, r3, #2
 8016a94:	4413      	add	r3, r2
      }
 8016a96:	4618      	mov	r0, r3
 8016a98:	370c      	adds	r7, #12
 8016a9a:	46bd      	mov	sp, r7
 8016a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016aa0:	4770      	bx	lr

08016aa2 <_ZNSt6vectorIPvSaIS0_EE5clearEv>:
      clear() _GLIBCXX_NOEXCEPT
 8016aa2:	b580      	push	{r7, lr}
 8016aa4:	b082      	sub	sp, #8
 8016aa6:	af00      	add	r7, sp, #0
 8016aa8:	6078      	str	r0, [r7, #4]
      { _M_erase_at_end(this->_M_impl._M_start); }
 8016aaa:	687b      	ldr	r3, [r7, #4]
 8016aac:	681b      	ldr	r3, [r3, #0]
 8016aae:	4619      	mov	r1, r3
 8016ab0:	6878      	ldr	r0, [r7, #4]
 8016ab2:	f000 fa8e 	bl	8016fd2 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>
 8016ab6:	bf00      	nop
 8016ab8:	3708      	adds	r7, #8
 8016aba:	46bd      	mov	sp, r7
 8016abc:	bd80      	pop	{r7, pc}

08016abe <_ZNSaIPvEC1Ev>:
      allocator() _GLIBCXX_NOTHROW { }
 8016abe:	b580      	push	{r7, lr}
 8016ac0:	b082      	sub	sp, #8
 8016ac2:	af00      	add	r7, sp, #0
 8016ac4:	6078      	str	r0, [r7, #4]
 8016ac6:	6878      	ldr	r0, [r7, #4]
 8016ac8:	f000 faa4 	bl	8017014 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	4618      	mov	r0, r3
 8016ad0:	3708      	adds	r7, #8
 8016ad2:	46bd      	mov	sp, r7
 8016ad4:	bd80      	pop	{r7, pc}

08016ad6 <_ZNSt12_Vector_baseIPvSaIS0_EE17_Vector_impl_dataC1Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8016ad6:	b480      	push	{r7}
 8016ad8:	b083      	sub	sp, #12
 8016ada:	af00      	add	r7, sp, #0
 8016adc:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016ade:	687b      	ldr	r3, [r7, #4]
 8016ae0:	2200      	movs	r2, #0
 8016ae2:	601a      	str	r2, [r3, #0]
 8016ae4:	687b      	ldr	r3, [r7, #4]
 8016ae6:	2200      	movs	r2, #0
 8016ae8:	605a      	str	r2, [r3, #4]
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	2200      	movs	r2, #0
 8016aee:	609a      	str	r2, [r3, #8]
	{ }
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	4618      	mov	r0, r3
 8016af4:	370c      	adds	r7, #12
 8016af6:	46bd      	mov	sp, r7
 8016af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016afc:	4770      	bx	lr

08016afe <_ZN9__gnu_cxx13new_allocatorIPvED1Ev>:
      ~new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8016afe:	b480      	push	{r7}
 8016b00:	b083      	sub	sp, #12
 8016b02:	af00      	add	r7, sp, #0
 8016b04:	6078      	str	r0, [r7, #4]
 8016b06:	687b      	ldr	r3, [r7, #4]
 8016b08:	4618      	mov	r0, r3
 8016b0a:	370c      	adds	r7, #12
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b12:	4770      	bx	lr

08016b14 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>:
      _M_deallocate(pointer __p, size_t __n)
 8016b14:	b580      	push	{r7, lr}
 8016b16:	b084      	sub	sp, #16
 8016b18:	af00      	add	r7, sp, #0
 8016b1a:	60f8      	str	r0, [r7, #12]
 8016b1c:	60b9      	str	r1, [r7, #8]
 8016b1e:	607a      	str	r2, [r7, #4]
	if (__p)
 8016b20:	68bb      	ldr	r3, [r7, #8]
 8016b22:	2b00      	cmp	r3, #0
 8016b24:	d005      	beq.n	8016b32 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8016b26:	68fb      	ldr	r3, [r7, #12]
 8016b28:	687a      	ldr	r2, [r7, #4]
 8016b2a:	68b9      	ldr	r1, [r7, #8]
 8016b2c:	4618      	mov	r0, r3
 8016b2e:	f000 fa7c 	bl	801702a <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>
      }
 8016b32:	bf00      	nop
 8016b34:	3710      	adds	r7, #16
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}

08016b3a <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8016b3a:	b580      	push	{r7, lr}
 8016b3c:	b084      	sub	sp, #16
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	60f8      	str	r0, [r7, #12]
 8016b42:	60b9      	str	r1, [r7, #8]
 8016b44:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8016b46:	6878      	ldr	r0, [r7, #4]
 8016b48:	f000 fa7e 	bl	8017048 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016b4c:	4603      	mov	r3, r0
 8016b4e:	461a      	mov	r2, r3
 8016b50:	68b9      	ldr	r1, [r7, #8]
 8016b52:	68f8      	ldr	r0, [r7, #12]
 8016b54:	f000 fa83 	bl	801705e <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>
 8016b58:	bf00      	nop
 8016b5a:	3710      	adds	r7, #16
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <_ZNSt6vectorIPvSaIS0_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b084      	sub	sp, #16
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	1d1a      	adds	r2, r3, #4
 8016b6c:	f107 030c 	add.w	r3, r7, #12
 8016b70:	4611      	mov	r1, r2
 8016b72:	4618      	mov	r0, r3
 8016b74:	f000 fa89 	bl	801708a <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	4618      	mov	r0, r3
 8016b7c:	3710      	adds	r7, #16
 8016b7e:	46bd      	mov	sp, r7
 8016b80:	bd80      	pop	{r7, pc}

08016b82 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8016b82:	b580      	push	{r7, lr}
 8016b84:	b082      	sub	sp, #8
 8016b86:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8016b88:	4618      	mov	r0, r3
 8016b8a:	f000 f805 	bl	8016b98 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8016b8e:	4603      	mov	r3, r0
      }
 8016b90:	4618      	mov	r0, r3
 8016b92:	3708      	adds	r7, #8
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <_ZNSt6vectorIPvSaIS0_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8016b98:	b480      	push	{r7}
 8016b9a:	b083      	sub	sp, #12
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8016ba0:	2301      	movs	r3, #1
      }
 8016ba2:	4618      	mov	r0, r3
 8016ba4:	370c      	adds	r7, #12
 8016ba6:	46bd      	mov	sp, r7
 8016ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016bac:	4770      	bx	lr
	...

08016bb0 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016bb0:	b5b0      	push	{r4, r5, r7, lr}
 8016bb2:	b08c      	sub	sp, #48	; 0x30
 8016bb4:	af00      	add	r7, sp, #0
 8016bb6:	60f8      	str	r0, [r7, #12]
 8016bb8:	60b9      	str	r1, [r7, #8]
 8016bba:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8016bbc:	4a59      	ldr	r2, [pc, #356]	; (8016d24 <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x174>)
 8016bbe:	2101      	movs	r1, #1
 8016bc0:	68f8      	ldr	r0, [r7, #12]
 8016bc2:	f000 fa72 	bl	80170aa <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>
 8016bc6:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8016bc8:	68fb      	ldr	r3, [r7, #12]
 8016bca:	681b      	ldr	r3, [r3, #0]
 8016bcc:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8016bce:	68fb      	ldr	r3, [r7, #12]
 8016bd0:	685b      	ldr	r3, [r3, #4]
 8016bd2:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8016bd4:	68f8      	ldr	r0, [r7, #12]
 8016bd6:	f000 faaf 	bl	8017138 <_ZNSt6vectorIPvSaIS0_EE5beginEv>
 8016bda:	4603      	mov	r3, r0
 8016bdc:	617b      	str	r3, [r7, #20]
 8016bde:	f107 0214 	add.w	r2, r7, #20
 8016be2:	f107 0308 	add.w	r3, r7, #8
 8016be6:	4611      	mov	r1, r2
 8016be8:	4618      	mov	r0, r3
 8016bea:	f000 fab5 	bl	8017158 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>
 8016bee:	4603      	mov	r3, r0
 8016bf0:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8016bf2:	68fb      	ldr	r3, [r7, #12]
 8016bf4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f000 fac3 	bl	8017182 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>
 8016bfc:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8016bfe:	69bb      	ldr	r3, [r7, #24]
 8016c00:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8016c02:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8016c04:	69fb      	ldr	r3, [r7, #28]
 8016c06:	009b      	lsls	r3, r3, #2
	  _Alloc_traits::construct(this->_M_impl,
 8016c08:	69ba      	ldr	r2, [r7, #24]
 8016c0a:	18d5      	adds	r5, r2, r3
 8016c0c:	6878      	ldr	r0, [r7, #4]
 8016c0e:	f000 fa1b 	bl	8017048 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8016c12:	4603      	mov	r3, r0
 8016c14:	461a      	mov	r2, r3
 8016c16:	4629      	mov	r1, r5
 8016c18:	4620      	mov	r0, r4
 8016c1a:	f7ff ff8e 	bl	8016b3a <_ZNSt16allocator_traitsISaIPvEE9constructIS0_JRKS0_EEEvRS1_PT_DpOT0_>
	  __new_finish = pointer();
 8016c1e:	2300      	movs	r3, #0
 8016c20:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8016c22:	f7ff ffae 	bl	8016b82 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8016c26:	4603      	mov	r3, r0
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d027      	beq.n	8016c7c <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016c2c:	f107 0308 	add.w	r3, r7, #8
 8016c30:	4618      	mov	r0, r3
 8016c32:	f000 face 	bl	80171d2 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016c36:	4603      	mov	r3, r0
 8016c38:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8016c3a:	68fb      	ldr	r3, [r7, #12]
 8016c3c:	4618      	mov	r0, r3
 8016c3e:	f000 fad3 	bl	80171e8 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016c42:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016c44:	69ba      	ldr	r2, [r7, #24]
 8016c46:	4621      	mov	r1, r4
 8016c48:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c4a:	f000 faae 	bl	80171aa <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8016c4e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016c50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016c52:	3304      	adds	r3, #4
 8016c54:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016c56:	f107 0308 	add.w	r3, r7, #8
 8016c5a:	4618      	mov	r0, r3
 8016c5c:	f000 fab9 	bl	80171d2 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016c60:	4603      	mov	r3, r0
 8016c62:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8016c64:	68fb      	ldr	r3, [r7, #12]
 8016c66:	4618      	mov	r0, r3
 8016c68:	f000 fabe 	bl	80171e8 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016c6c:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016c6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016c70:	6a39      	ldr	r1, [r7, #32]
 8016c72:	4620      	mov	r0, r4
 8016c74:	f000 fa99 	bl	80171aa <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>
 8016c78:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016c7a:	e026      	b.n	8016cca <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8016c7c:	f107 0308 	add.w	r3, r7, #8
 8016c80:	4618      	mov	r0, r3
 8016c82:	f000 faa6 	bl	80171d2 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016c86:	4603      	mov	r3, r0
 8016c88:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8016c8a:	68fb      	ldr	r3, [r7, #12]
 8016c8c:	4618      	mov	r0, r3
 8016c8e:	f000 faab 	bl	80171e8 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016c92:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8016c94:	69ba      	ldr	r2, [r7, #24]
 8016c96:	4621      	mov	r1, r4
 8016c98:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016c9a:	f000 fab0 	bl	80171fe <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8016c9e:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016ca0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016ca2:	3304      	adds	r3, #4
 8016ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8016ca6:	f107 0308 	add.w	r3, r7, #8
 8016caa:	4618      	mov	r0, r3
 8016cac:	f000 fa91 	bl	80171d2 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8016cb0:	4603      	mov	r3, r0
 8016cb2:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8016cb4:	68fb      	ldr	r3, [r7, #12]
 8016cb6:	4618      	mov	r0, r3
 8016cb8:	f000 fa96 	bl	80171e8 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016cbc:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8016cbe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016cc0:	6a39      	ldr	r1, [r7, #32]
 8016cc2:	4620      	mov	r0, r4
 8016cc4:	f000 fa9b 	bl	80171fe <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 8016cc8:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8016cca:	f7ff ff5a 	bl	8016b82 <_ZNSt6vectorIPvSaIS0_EE15_S_use_relocateEv>
 8016cce:	4603      	mov	r3, r0
 8016cd0:	f083 0301 	eor.w	r3, r3, #1
 8016cd4:	b2db      	uxtb	r3, r3
 8016cd6:	2b00      	cmp	r3, #0
 8016cd8:	d009      	beq.n	8016cee <_ZNSt6vectorIPvSaIS0_EE17_M_realloc_insertIJRKS0_EEEvN9__gnu_cxx17__normal_iteratorIPS0_S2_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8016cda:	68fb      	ldr	r3, [r7, #12]
 8016cdc:	4618      	mov	r0, r3
 8016cde:	f000 fa83 	bl	80171e8 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016ce2:	4603      	mov	r3, r0
 8016ce4:	461a      	mov	r2, r3
 8016ce6:	6a39      	ldr	r1, [r7, #32]
 8016ce8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016cea:	f000 faa1 	bl	8017230 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      _M_deallocate(__old_start,
 8016cee:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8016cf0:	68fb      	ldr	r3, [r7, #12]
 8016cf2:	689a      	ldr	r2, [r3, #8]
 8016cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016cf6:	1ad3      	subs	r3, r2, r3
 8016cf8:	109b      	asrs	r3, r3, #2
      _M_deallocate(__old_start,
 8016cfa:	461a      	mov	r2, r3
 8016cfc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016cfe:	f7ff ff09 	bl	8016b14 <_ZNSt12_Vector_baseIPvSaIS0_EE13_M_deallocateEPS0_j>
      this->_M_impl._M_start = __new_start;
 8016d02:	68fb      	ldr	r3, [r7, #12]
 8016d04:	69ba      	ldr	r2, [r7, #24]
 8016d06:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016d0c:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016d10:	009b      	lsls	r3, r3, #2
 8016d12:	69ba      	ldr	r2, [r7, #24]
 8016d14:	441a      	add	r2, r3
 8016d16:	68fb      	ldr	r3, [r7, #12]
 8016d18:	609a      	str	r2, [r3, #8]
    }
 8016d1a:	bf00      	nop
 8016d1c:	3730      	adds	r7, #48	; 0x30
 8016d1e:	46bd      	mov	sp, r7
 8016d20:	bdb0      	pop	{r4, r5, r7, pc}
 8016d22:	bf00      	nop
 8016d24:	0801ef98 	.word	0x0801ef98

08016d28 <_ZNSaIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
 8016d28:	b580      	push	{r7, lr}
 8016d2a:	b082      	sub	sp, #8
 8016d2c:	af00      	add	r7, sp, #0
 8016d2e:	6078      	str	r0, [r7, #4]
 8016d30:	6878      	ldr	r0, [r7, #4]
 8016d32:	f000 fa8b 	bl	801724c <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>
 8016d36:	687b      	ldr	r3, [r7, #4]
 8016d38:	4618      	mov	r0, r3
 8016d3a:	3708      	adds	r7, #8
 8016d3c:	46bd      	mov	sp, r7
 8016d3e:	bd80      	pop	{r7, pc}

08016d40 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_Vector_impl_dataC2Ev>:
	_Vector_impl_data() _GLIBCXX_NOEXCEPT
 8016d40:	b480      	push	{r7}
 8016d42:	b083      	sub	sp, #12
 8016d44:	af00      	add	r7, sp, #0
 8016d46:	6078      	str	r0, [r7, #4]
	: _M_start(), _M_finish(), _M_end_of_storage()
 8016d48:	687b      	ldr	r3, [r7, #4]
 8016d4a:	2200      	movs	r2, #0
 8016d4c:	601a      	str	r2, [r3, #0]
 8016d4e:	687b      	ldr	r3, [r7, #4]
 8016d50:	2200      	movs	r2, #0
 8016d52:	605a      	str	r2, [r3, #4]
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	2200      	movs	r2, #0
 8016d58:	609a      	str	r2, [r3, #8]
	{ }
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	4618      	mov	r0, r3
 8016d5e:	370c      	adds	r7, #12
 8016d60:	46bd      	mov	sp, r7
 8016d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d66:	4770      	bx	lr

08016d68 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEED2Ev>:
 8016d68:	b480      	push	{r7}
 8016d6a:	b083      	sub	sp, #12
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	6078      	str	r0, [r7, #4]
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	4618      	mov	r0, r3
 8016d74:	370c      	adds	r7, #12
 8016d76:	46bd      	mov	sp, r7
 8016d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d7c:	4770      	bx	lr

08016d7e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>:
      _M_deallocate(pointer __p, size_t __n)
 8016d7e:	b580      	push	{r7, lr}
 8016d80:	b084      	sub	sp, #16
 8016d82:	af00      	add	r7, sp, #0
 8016d84:	60f8      	str	r0, [r7, #12]
 8016d86:	60b9      	str	r1, [r7, #8]
 8016d88:	607a      	str	r2, [r7, #4]
	if (__p)
 8016d8a:	68bb      	ldr	r3, [r7, #8]
 8016d8c:	2b00      	cmp	r3, #0
 8016d8e:	d005      	beq.n	8016d9c <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j+0x1e>
	  _Tr::deallocate(_M_impl, __p, __n);
 8016d90:	68fb      	ldr	r3, [r7, #12]
 8016d92:	687a      	ldr	r2, [r7, #4]
 8016d94:	68b9      	ldr	r1, [r7, #8]
 8016d96:	4618      	mov	r0, r3
 8016d98:	f000 fa63 	bl	8017262 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>
      }
 8016d9c:	bf00      	nop
 8016d9e:	3710      	adds	r7, #16
 8016da0:	46bd      	mov	sp, r7
 8016da2:	bd80      	pop	{r7, pc}

08016da4 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>:
	construct(allocator_type& __a, _Up* __p, _Args&&... __args)
 8016da4:	b580      	push	{r7, lr}
 8016da6:	b084      	sub	sp, #16
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	60f8      	str	r0, [r7, #12]
 8016dac:	60b9      	str	r1, [r7, #8]
 8016dae:	607a      	str	r2, [r7, #4]
	{ __a.construct(__p, std::forward<_Args>(__args)...); }
 8016db0:	6878      	ldr	r0, [r7, #4]
 8016db2:	f000 fa65 	bl	8017280 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8016db6:	4603      	mov	r3, r0
 8016db8:	461a      	mov	r2, r3
 8016dba:	68b9      	ldr	r1, [r7, #8]
 8016dbc:	68f8      	ldr	r0, [r7, #12]
 8016dbe:	f000 fa6a 	bl	8017296 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>
 8016dc2:	bf00      	nop
 8016dc4:	3710      	adds	r7, #16
 8016dc6:	46bd      	mov	sp, r7
 8016dc8:	bd80      	pop	{r7, pc}

08016dca <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE3endEv>:
      end() _GLIBCXX_NOEXCEPT
 8016dca:	b580      	push	{r7, lr}
 8016dcc:	b084      	sub	sp, #16
 8016dce:	af00      	add	r7, sp, #0
 8016dd0:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_finish); }
 8016dd2:	687b      	ldr	r3, [r7, #4]
 8016dd4:	1d1a      	adds	r2, r3, #4
 8016dd6:	f107 030c 	add.w	r3, r7, #12
 8016dda:	4611      	mov	r1, r2
 8016ddc:	4618      	mov	r0, r3
 8016dde:	f000 fa73 	bl	80172c8 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 8016de2:	68fb      	ldr	r3, [r7, #12]
 8016de4:	4618      	mov	r0, r3
 8016de6:	3710      	adds	r7, #16
 8016de8:	46bd      	mov	sp, r7
 8016dea:	bd80      	pop	{r7, pc}

08016dec <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>:
      _S_use_relocate()
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b082      	sub	sp, #8
 8016df0:	af00      	add	r7, sp, #0
	return _S_nothrow_relocate(__is_move_insertable<_Tp_alloc_type>{});
 8016df2:	4618      	mov	r0, r3
 8016df4:	f000 f805 	bl	8016e02 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>
 8016df8:	4603      	mov	r3, r0
      }
 8016dfa:	4618      	mov	r0, r3
 8016dfc:	3708      	adds	r7, #8
 8016dfe:	46bd      	mov	sp, r7
 8016e00:	bd80      	pop	{r7, pc}

08016e02 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_S_nothrow_relocateESt17integral_constantIbLb1EE>:
      _S_nothrow_relocate(true_type)
 8016e02:	b480      	push	{r7}
 8016e04:	b083      	sub	sp, #12
 8016e06:	af00      	add	r7, sp, #0
 8016e08:	7138      	strb	r0, [r7, #4]
					  std::declval<_Tp_alloc_type&>()));
 8016e0a:	2301      	movs	r3, #1
      }
 8016e0c:	4618      	mov	r0, r3
 8016e0e:	370c      	adds	r7, #12
 8016e10:	46bd      	mov	sp, r7
 8016e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016e16:	4770      	bx	lr

08016e18 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_>:
      vector<_Tp, _Alloc>::
 8016e18:	b5b0      	push	{r4, r5, r7, lr}
 8016e1a:	b08c      	sub	sp, #48	; 0x30
 8016e1c:	af00      	add	r7, sp, #0
 8016e1e:	60f8      	str	r0, [r7, #12]
 8016e20:	60b9      	str	r1, [r7, #8]
 8016e22:	607a      	str	r2, [r7, #4]
      const size_type __len =
 8016e24:	4a59      	ldr	r2, [pc, #356]	; (8016f8c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x174>)
 8016e26:	2101      	movs	r1, #1
 8016e28:	68f8      	ldr	r0, [r7, #12]
 8016e2a:	f000 fa5d 	bl	80172e8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>
 8016e2e:	62b8      	str	r0, [r7, #40]	; 0x28
      pointer __old_start = this->_M_impl._M_start;
 8016e30:	68fb      	ldr	r3, [r7, #12]
 8016e32:	681b      	ldr	r3, [r3, #0]
 8016e34:	627b      	str	r3, [r7, #36]	; 0x24
      pointer __old_finish = this->_M_impl._M_finish;
 8016e36:	68fb      	ldr	r3, [r7, #12]
 8016e38:	685b      	ldr	r3, [r3, #4]
 8016e3a:	623b      	str	r3, [r7, #32]
      const size_type __elems_before = __position - begin();
 8016e3c:	68f8      	ldr	r0, [r7, #12]
 8016e3e:	f000 fa9a 	bl	8017376 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>
 8016e42:	4603      	mov	r3, r0
 8016e44:	617b      	str	r3, [r7, #20]
 8016e46:	f107 0214 	add.w	r2, r7, #20
 8016e4a:	f107 0308 	add.w	r3, r7, #8
 8016e4e:	4611      	mov	r1, r2
 8016e50:	4618      	mov	r0, r3
 8016e52:	f000 faa0 	bl	8017396 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>
 8016e56:	4603      	mov	r3, r0
 8016e58:	61fb      	str	r3, [r7, #28]
      pointer __new_start(this->_M_allocate(__len));
 8016e5a:	68fb      	ldr	r3, [r7, #12]
 8016e5c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8016e5e:	4618      	mov	r0, r3
 8016e60:	f000 faae 	bl	80173c0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>
 8016e64:	61b8      	str	r0, [r7, #24]
      pointer __new_finish(__new_start);
 8016e66:	69bb      	ldr	r3, [r7, #24]
 8016e68:	62fb      	str	r3, [r7, #44]	; 0x2c
	  _Alloc_traits::construct(this->_M_impl,
 8016e6a:	68fc      	ldr	r4, [r7, #12]
				   __new_start + __elems_before,
 8016e6c:	69fb      	ldr	r3, [r7, #28]
 8016e6e:	00db      	lsls	r3, r3, #3
	  _Alloc_traits::construct(this->_M_impl,
 8016e70:	69ba      	ldr	r2, [r7, #24]
 8016e72:	18d5      	adds	r5, r2, r3
 8016e74:	6878      	ldr	r0, [r7, #4]
 8016e76:	f000 fa03 	bl	8017280 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	461a      	mov	r2, r3
 8016e7e:	4629      	mov	r1, r5
 8016e80:	4620      	mov	r0, r4
 8016e82:	f7ff ff8f 	bl	8016da4 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE9constructIS1_JRKS1_EEEvRS2_PT_DpOT0_>
	  __new_finish = pointer();
 8016e86:	2300      	movs	r3, #0
 8016e88:	62fb      	str	r3, [r7, #44]	; 0x2c
	  if _GLIBCXX17_CONSTEXPR (_S_use_relocate())
 8016e8a:	f7ff ffaf 	bl	8016dec <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	2b00      	cmp	r3, #0
 8016e92:	d027      	beq.n	8016ee4 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0xcc>
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016e94:	f107 0308 	add.w	r3, r7, #8
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f000 fab9 	bl	8017410 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	681c      	ldr	r4, [r3, #0]
					 __new_start, _M_get_Tp_allocator());
 8016ea2:	68fb      	ldr	r3, [r7, #12]
 8016ea4:	4618      	mov	r0, r3
 8016ea6:	f000 fabe 	bl	8017426 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016eaa:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__old_start, __position.base(),
 8016eac:	69ba      	ldr	r2, [r7, #24]
 8016eae:	4621      	mov	r1, r4
 8016eb0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016eb2:	f000 fa99 	bl	80173e8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8016eb6:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016eba:	3308      	adds	r3, #8
 8016ebc:	62fb      	str	r3, [r7, #44]	; 0x2c
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016ebe:	f107 0308 	add.w	r3, r7, #8
 8016ec2:	4618      	mov	r0, r3
 8016ec4:	f000 faa4 	bl	8017410 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016ec8:	4603      	mov	r3, r0
 8016eca:	681c      	ldr	r4, [r3, #0]
					 __new_finish, _M_get_Tp_allocator());
 8016ecc:	68fb      	ldr	r3, [r7, #12]
 8016ece:	4618      	mov	r0, r3
 8016ed0:	f000 faa9 	bl	8017426 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016ed4:	4603      	mov	r3, r0
	      __new_finish = _S_relocate(__position.base(), __old_finish,
 8016ed6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016ed8:	6a39      	ldr	r1, [r7, #32]
 8016eda:	4620      	mov	r0, r4
 8016edc:	f000 fa84 	bl	80173e8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>
 8016ee0:	62f8      	str	r0, [r7, #44]	; 0x2c
 8016ee2:	e026      	b.n	8016f32 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x11a>
		(__old_start, __position.base(),
 8016ee4:	f107 0308 	add.w	r3, r7, #8
 8016ee8:	4618      	mov	r0, r3
 8016eea:	f000 fa91 	bl	8017410 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016eee:	4603      	mov	r3, r0
 8016ef0:	681c      	ldr	r4, [r3, #0]
		 __new_start, _M_get_Tp_allocator());
 8016ef2:	68fb      	ldr	r3, [r7, #12]
 8016ef4:	4618      	mov	r0, r3
 8016ef6:	f000 fa96 	bl	8017426 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016efa:	4603      	mov	r3, r0
		(__old_start, __position.base(),
 8016efc:	69ba      	ldr	r2, [r7, #24]
 8016efe:	4621      	mov	r1, r4
 8016f00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f02:	f000 fa9b 	bl	801743c <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8016f06:	62f8      	str	r0, [r7, #44]	; 0x2c
	      ++__new_finish;
 8016f08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016f0a:	3308      	adds	r3, #8
 8016f0c:	62fb      	str	r3, [r7, #44]	; 0x2c
		(__position.base(), __old_finish,
 8016f0e:	f107 0308 	add.w	r3, r7, #8
 8016f12:	4618      	mov	r0, r3
 8016f14:	f000 fa7c 	bl	8017410 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 8016f18:	4603      	mov	r3, r0
 8016f1a:	681c      	ldr	r4, [r3, #0]
		 __new_finish, _M_get_Tp_allocator());
 8016f1c:	68fb      	ldr	r3, [r7, #12]
 8016f1e:	4618      	mov	r0, r3
 8016f20:	f000 fa81 	bl	8017426 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016f24:	4603      	mov	r3, r0
		(__position.base(), __old_finish,
 8016f26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f28:	6a39      	ldr	r1, [r7, #32]
 8016f2a:	4620      	mov	r0, r4
 8016f2c:	f000 fa86 	bl	801743c <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 8016f30:	62f8      	str	r0, [r7, #44]	; 0x2c
      if _GLIBCXX17_CONSTEXPR (!_S_use_relocate())
 8016f32:	f7ff ff5b 	bl	8016dec <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_S_use_relocateEv>
 8016f36:	4603      	mov	r3, r0
 8016f38:	f083 0301 	eor.w	r3, r3, #1
 8016f3c:	b2db      	uxtb	r3, r3
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d009      	beq.n	8016f56 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE17_M_realloc_insertIJRKS1_EEEvN9__gnu_cxx17__normal_iteratorIPS1_S3_EEDpOT_+0x13e>
	std::_Destroy(__old_start, __old_finish, _M_get_Tp_allocator());
 8016f42:	68fb      	ldr	r3, [r7, #12]
 8016f44:	4618      	mov	r0, r3
 8016f46:	f000 fa6e 	bl	8017426 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016f4a:	4603      	mov	r3, r0
 8016f4c:	461a      	mov	r2, r3
 8016f4e:	6a39      	ldr	r1, [r7, #32]
 8016f50:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016f52:	f000 fa8c 	bl	801746e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      _M_deallocate(__old_start,
 8016f56:	68f8      	ldr	r0, [r7, #12]
		    this->_M_impl._M_end_of_storage - __old_start);
 8016f58:	68fb      	ldr	r3, [r7, #12]
 8016f5a:	689a      	ldr	r2, [r3, #8]
 8016f5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016f5e:	1ad3      	subs	r3, r2, r3
 8016f60:	10db      	asrs	r3, r3, #3
      _M_deallocate(__old_start,
 8016f62:	461a      	mov	r2, r3
 8016f64:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8016f66:	f7ff ff0a 	bl	8016d7e <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE13_M_deallocateEPS1_j>
      this->_M_impl._M_start = __new_start;
 8016f6a:	68fb      	ldr	r3, [r7, #12]
 8016f6c:	69ba      	ldr	r2, [r7, #24]
 8016f6e:	601a      	str	r2, [r3, #0]
      this->_M_impl._M_finish = __new_finish;
 8016f70:	68fb      	ldr	r3, [r7, #12]
 8016f72:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016f74:	605a      	str	r2, [r3, #4]
      this->_M_impl._M_end_of_storage = __new_start + __len;
 8016f76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016f78:	00db      	lsls	r3, r3, #3
 8016f7a:	69ba      	ldr	r2, [r7, #24]
 8016f7c:	441a      	add	r2, r3
 8016f7e:	68fb      	ldr	r3, [r7, #12]
 8016f80:	609a      	str	r2, [r3, #8]
    }
 8016f82:	bf00      	nop
 8016f84:	3730      	adds	r7, #48	; 0x30
 8016f86:	46bd      	mov	sp, r7
 8016f88:	bdb0      	pop	{r4, r5, r7, pc}
 8016f8a:	bf00      	nop
 8016f8c:	0801ef98 	.word	0x0801ef98

08016f90 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_>:
      // Internal erase functions follow.

      // Called by erase(q1,q2), clear(), resize(), _M_fill_assign,
      // _M_assign_aux.
      void
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8016f90:	b590      	push	{r4, r7, lr}
 8016f92:	b085      	sub	sp, #20
 8016f94:	af00      	add	r7, sp, #0
 8016f96:	6078      	str	r0, [r7, #4]
 8016f98:	6039      	str	r1, [r7, #0]
      {
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8016f9a:	687b      	ldr	r3, [r7, #4]
 8016f9c:	685a      	ldr	r2, [r3, #4]
 8016f9e:	683b      	ldr	r3, [r7, #0]
 8016fa0:	1ad3      	subs	r3, r2, r3
 8016fa2:	10db      	asrs	r3, r3, #3
 8016fa4:	60fb      	str	r3, [r7, #12]
 8016fa6:	68fb      	ldr	r3, [r7, #12]
 8016fa8:	2b00      	cmp	r3, #0
 8016faa:	d00e      	beq.n	8016fca <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE15_M_erase_at_endEPS1_+0x3a>
	  {
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8016fac:	687b      	ldr	r3, [r7, #4]
 8016fae:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8016fb0:	687b      	ldr	r3, [r7, #4]
 8016fb2:	4618      	mov	r0, r3
 8016fb4:	f000 fa37 	bl	8017426 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8016fb8:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8016fba:	461a      	mov	r2, r3
 8016fbc:	4621      	mov	r1, r4
 8016fbe:	6838      	ldr	r0, [r7, #0]
 8016fc0:	f000 fa55 	bl	801746e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8016fc4:	687b      	ldr	r3, [r7, #4]
 8016fc6:	683a      	ldr	r2, [r7, #0]
 8016fc8:	605a      	str	r2, [r3, #4]
	    _GLIBCXX_ASAN_ANNOTATE_SHRINK(__n);
	  }
      }
 8016fca:	bf00      	nop
 8016fcc:	3714      	adds	r7, #20
 8016fce:	46bd      	mov	sp, r7
 8016fd0:	bd90      	pop	{r4, r7, pc}

08016fd2 <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_>:
      _M_erase_at_end(pointer __pos) _GLIBCXX_NOEXCEPT
 8016fd2:	b590      	push	{r4, r7, lr}
 8016fd4:	b085      	sub	sp, #20
 8016fd6:	af00      	add	r7, sp, #0
 8016fd8:	6078      	str	r0, [r7, #4]
 8016fda:	6039      	str	r1, [r7, #0]
	if (size_type __n = this->_M_impl._M_finish - __pos)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	685a      	ldr	r2, [r3, #4]
 8016fe0:	683b      	ldr	r3, [r7, #0]
 8016fe2:	1ad3      	subs	r3, r2, r3
 8016fe4:	109b      	asrs	r3, r3, #2
 8016fe6:	60fb      	str	r3, [r7, #12]
 8016fe8:	68fb      	ldr	r3, [r7, #12]
 8016fea:	2b00      	cmp	r3, #0
 8016fec:	d00e      	beq.n	801700c <_ZNSt6vectorIPvSaIS0_EE15_M_erase_at_endEPS0_+0x3a>
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8016fee:	687b      	ldr	r3, [r7, #4]
 8016ff0:	685c      	ldr	r4, [r3, #4]
			  _M_get_Tp_allocator());
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	4618      	mov	r0, r3
 8016ff6:	f000 f8f7 	bl	80171e8 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8016ffa:	4603      	mov	r3, r0
	    std::_Destroy(__pos, this->_M_impl._M_finish,
 8016ffc:	461a      	mov	r2, r3
 8016ffe:	4621      	mov	r1, r4
 8017000:	6838      	ldr	r0, [r7, #0]
 8017002:	f000 f915 	bl	8017230 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
	    this->_M_impl._M_finish = __pos;
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	683a      	ldr	r2, [r7, #0]
 801700a:	605a      	str	r2, [r3, #4]
      }
 801700c:	bf00      	nop
 801700e:	3714      	adds	r7, #20
 8017010:	46bd      	mov	sp, r7
 8017012:	bd90      	pop	{r4, r7, pc}

08017014 <_ZN9__gnu_cxx13new_allocatorIPvEC1Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 8017014:	b480      	push	{r7}
 8017016:	b083      	sub	sp, #12
 8017018:	af00      	add	r7, sp, #0
 801701a:	6078      	str	r0, [r7, #4]
 801701c:	687b      	ldr	r3, [r7, #4]
 801701e:	4618      	mov	r0, r3
 8017020:	370c      	adds	r7, #12
 8017022:	46bd      	mov	sp, r7
 8017024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017028:	4770      	bx	lr

0801702a <_ZNSt16allocator_traitsISaIPvEE10deallocateERS1_PS0_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 801702a:	b580      	push	{r7, lr}
 801702c:	b084      	sub	sp, #16
 801702e:	af00      	add	r7, sp, #0
 8017030:	60f8      	str	r0, [r7, #12]
 8017032:	60b9      	str	r1, [r7, #8]
 8017034:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 8017036:	687a      	ldr	r2, [r7, #4]
 8017038:	68b9      	ldr	r1, [r7, #8]
 801703a:	68f8      	ldr	r0, [r7, #12]
 801703c:	f000 fa25 	bl	801748a <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>
 8017040:	bf00      	nop
 8017042:	3710      	adds	r7, #16
 8017044:	46bd      	mov	sp, r7
 8017046:	bd80      	pop	{r7, pc}

08017048 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017048:	b480      	push	{r7}
 801704a:	b083      	sub	sp, #12
 801704c:	af00      	add	r7, sp, #0
 801704e:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	4618      	mov	r0, r3
 8017054:	370c      	adds	r7, #12
 8017056:	46bd      	mov	sp, r7
 8017058:	f85d 7b04 	ldr.w	r7, [sp], #4
 801705c:	4770      	bx	lr

0801705e <_ZN9__gnu_cxx13new_allocatorIPvE9constructIS1_JRKS1_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 801705e:	b590      	push	{r4, r7, lr}
 8017060:	b085      	sub	sp, #20
 8017062:	af00      	add	r7, sp, #0
 8017064:	60f8      	str	r0, [r7, #12]
 8017066:	60b9      	str	r1, [r7, #8]
 8017068:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 801706a:	6878      	ldr	r0, [r7, #4]
 801706c:	f7ff ffec 	bl	8017048 <_ZSt7forwardIRKPvEOT_RNSt16remove_referenceIS3_E4typeE>
 8017070:	4603      	mov	r3, r0
 8017072:	681c      	ldr	r4, [r3, #0]
 8017074:	68bb      	ldr	r3, [r7, #8]
 8017076:	4619      	mov	r1, r3
 8017078:	2004      	movs	r0, #4
 801707a:	f7e9 ffd7 	bl	800102c <_ZnwjPv>
 801707e:	4603      	mov	r3, r0
 8017080:	601c      	str	r4, [r3, #0]
 8017082:	bf00      	nop
 8017084:	3714      	adds	r7, #20
 8017086:	46bd      	mov	sp, r7
 8017088:	bd90      	pop	{r4, r7, pc}

0801708a <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 801708a:	b480      	push	{r7}
 801708c:	b083      	sub	sp, #12
 801708e:	af00      	add	r7, sp, #0
 8017090:	6078      	str	r0, [r7, #4]
 8017092:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017094:	683b      	ldr	r3, [r7, #0]
 8017096:	681a      	ldr	r2, [r3, #0]
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	601a      	str	r2, [r3, #0]
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	4618      	mov	r0, r3
 80170a0:	370c      	adds	r7, #12
 80170a2:	46bd      	mov	sp, r7
 80170a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80170a8:	4770      	bx	lr

080170aa <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80170aa:	b590      	push	{r4, r7, lr}
 80170ac:	b087      	sub	sp, #28
 80170ae:	af00      	add	r7, sp, #0
 80170b0:	60f8      	str	r0, [r7, #12]
 80170b2:	60b9      	str	r1, [r7, #8]
 80170b4:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80170b6:	68f8      	ldr	r0, [r7, #12]
 80170b8:	f000 f9f4 	bl	80174a4 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 80170bc:	4604      	mov	r4, r0
 80170be:	68f8      	ldr	r0, [r7, #12]
 80170c0:	f7ff fccf 	bl	8016a62 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80170c4:	4603      	mov	r3, r0
 80170c6:	1ae2      	subs	r2, r4, r3
 80170c8:	68bb      	ldr	r3, [r7, #8]
 80170ca:	429a      	cmp	r2, r3
 80170cc:	bf34      	ite	cc
 80170ce:	2301      	movcc	r3, #1
 80170d0:	2300      	movcs	r3, #0
 80170d2:	b2db      	uxtb	r3, r3
 80170d4:	2b00      	cmp	r3, #0
 80170d6:	d002      	beq.n	80170de <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 80170d8:	6878      	ldr	r0, [r7, #4]
 80170da:	f000 fecb 	bl	8017e74 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 80170de:	68f8      	ldr	r0, [r7, #12]
 80170e0:	f7ff fcbf 	bl	8016a62 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80170e4:	4604      	mov	r4, r0
 80170e6:	68f8      	ldr	r0, [r7, #12]
 80170e8:	f7ff fcbb 	bl	8016a62 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 80170ec:	4603      	mov	r3, r0
 80170ee:	613b      	str	r3, [r7, #16]
 80170f0:	f107 0208 	add.w	r2, r7, #8
 80170f4:	f107 0310 	add.w	r3, r7, #16
 80170f8:	4611      	mov	r1, r2
 80170fa:	4618      	mov	r0, r3
 80170fc:	f7ee ff02 	bl	8005f04 <_ZSt3maxIjERKT_S2_S2_>
 8017100:	4603      	mov	r3, r0
 8017102:	681b      	ldr	r3, [r3, #0]
 8017104:	4423      	add	r3, r4
 8017106:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017108:	68f8      	ldr	r0, [r7, #12]
 801710a:	f7ff fcaa 	bl	8016a62 <_ZNKSt6vectorIPvSaIS0_EE4sizeEv>
 801710e:	4602      	mov	r2, r0
 8017110:	697b      	ldr	r3, [r7, #20]
 8017112:	4293      	cmp	r3, r2
 8017114:	d306      	bcc.n	8017124 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x7a>
 8017116:	68f8      	ldr	r0, [r7, #12]
 8017118:	f000 f9c4 	bl	80174a4 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801711c:	4602      	mov	r2, r0
 801711e:	697b      	ldr	r3, [r7, #20]
 8017120:	4293      	cmp	r3, r2
 8017122:	d904      	bls.n	801712e <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x84>
 8017124:	68f8      	ldr	r0, [r7, #12]
 8017126:	f000 f9bd 	bl	80174a4 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>
 801712a:	4603      	mov	r3, r0
 801712c:	e000      	b.n	8017130 <_ZNKSt6vectorIPvSaIS0_EE12_M_check_lenEjPKc+0x86>
 801712e:	697b      	ldr	r3, [r7, #20]
      }
 8017130:	4618      	mov	r0, r3
 8017132:	371c      	adds	r7, #28
 8017134:	46bd      	mov	sp, r7
 8017136:	bd90      	pop	{r4, r7, pc}

08017138 <_ZNSt6vectorIPvSaIS0_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017138:	b580      	push	{r7, lr}
 801713a:	b084      	sub	sp, #16
 801713c:	af00      	add	r7, sp, #0
 801713e:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 8017140:	687a      	ldr	r2, [r7, #4]
 8017142:	f107 030c 	add.w	r3, r7, #12
 8017146:	4611      	mov	r1, r2
 8017148:	4618      	mov	r0, r3
 801714a:	f7ff ff9e 	bl	801708a <_ZN9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEEC1ERKS2_>
 801714e:	68fb      	ldr	r3, [r7, #12]
 8017150:	4618      	mov	r0, r3
 8017152:	3710      	adds	r7, #16
 8017154:	46bd      	mov	sp, r7
 8017156:	bd80      	pop	{r7, pc}

08017158 <_ZN9__gnu_cxxmiIPPvSt6vectorIS1_SaIS1_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKS9_SC_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8017158:	b590      	push	{r4, r7, lr}
 801715a:	b083      	sub	sp, #12
 801715c:	af00      	add	r7, sp, #0
 801715e:	6078      	str	r0, [r7, #4]
 8017160:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 8017162:	6878      	ldr	r0, [r7, #4]
 8017164:	f000 f835 	bl	80171d2 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017168:	4603      	mov	r3, r0
 801716a:	681c      	ldr	r4, [r3, #0]
 801716c:	6838      	ldr	r0, [r7, #0]
 801716e:	f000 f830 	bl	80171d2 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>
 8017172:	4603      	mov	r3, r0
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	1ae3      	subs	r3, r4, r3
 8017178:	109b      	asrs	r3, r3, #2
 801717a:	4618      	mov	r0, r3
 801717c:	370c      	adds	r7, #12
 801717e:	46bd      	mov	sp, r7
 8017180:	bd90      	pop	{r4, r7, pc}

08017182 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 8017182:	b580      	push	{r7, lr}
 8017184:	b082      	sub	sp, #8
 8017186:	af00      	add	r7, sp, #0
 8017188:	6078      	str	r0, [r7, #4]
 801718a:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 801718c:	683b      	ldr	r3, [r7, #0]
 801718e:	2b00      	cmp	r3, #0
 8017190:	d006      	beq.n	80171a0 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x1e>
 8017192:	687b      	ldr	r3, [r7, #4]
 8017194:	6839      	ldr	r1, [r7, #0]
 8017196:	4618      	mov	r0, r3
 8017198:	f000 f995 	bl	80174c6 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>
 801719c:	4603      	mov	r3, r0
 801719e:	e000      	b.n	80171a2 <_ZNSt12_Vector_baseIPvSaIS0_EE11_M_allocateEj+0x20>
 80171a0:	2300      	movs	r3, #0
      }
 80171a2:	4618      	mov	r0, r3
 80171a4:	3708      	adds	r7, #8
 80171a6:	46bd      	mov	sp, r7
 80171a8:	bd80      	pop	{r7, pc}

080171aa <_ZNSt6vectorIPvSaIS0_EE11_S_relocateEPS0_S3_S3_RS1_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80171aa:	b590      	push	{r4, r7, lr}
 80171ac:	b089      	sub	sp, #36	; 0x24
 80171ae:	af02      	add	r7, sp, #8
 80171b0:	60f8      	str	r0, [r7, #12]
 80171b2:	60b9      	str	r1, [r7, #8]
 80171b4:	607a      	str	r2, [r7, #4]
 80171b6:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80171b8:	f88d 4000 	strb.w	r4, [sp]
 80171bc:	683b      	ldr	r3, [r7, #0]
 80171be:	687a      	ldr	r2, [r7, #4]
 80171c0:	68b9      	ldr	r1, [r7, #8]
 80171c2:	68f8      	ldr	r0, [r7, #12]
 80171c4:	f000 f98e 	bl	80174e4 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>
 80171c8:	4603      	mov	r3, r0
      }
 80171ca:	4618      	mov	r0, r3
 80171cc:	371c      	adds	r7, #28
 80171ce:	46bd      	mov	sp, r7
 80171d0:	bd90      	pop	{r4, r7, pc}

080171d2 <_ZNK9__gnu_cxx17__normal_iteratorIPPvSt6vectorIS1_SaIS1_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 80171d2:	b480      	push	{r7}
 80171d4:	b083      	sub	sp, #12
 80171d6:	af00      	add	r7, sp, #0
 80171d8:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 80171da:	687b      	ldr	r3, [r7, #4]
 80171dc:	4618      	mov	r0, r3
 80171de:	370c      	adds	r7, #12
 80171e0:	46bd      	mov	sp, r7
 80171e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171e6:	4770      	bx	lr

080171e8 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 80171e8:	b480      	push	{r7}
 80171ea:	b083      	sub	sp, #12
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	4618      	mov	r0, r3
 80171f4:	370c      	adds	r7, #12
 80171f6:	46bd      	mov	sp, r7
 80171f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80171fc:	4770      	bx	lr

080171fe <_ZSt34__uninitialized_move_if_noexcept_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 80171fe:	b590      	push	{r4, r7, lr}
 8017200:	b085      	sub	sp, #20
 8017202:	af00      	add	r7, sp, #0
 8017204:	60f8      	str	r0, [r7, #12]
 8017206:	60b9      	str	r1, [r7, #8]
 8017208:	607a      	str	r2, [r7, #4]
 801720a:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 801720c:	68f8      	ldr	r0, [r7, #12]
 801720e:	f000 f97b 	bl	8017508 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 8017212:	4604      	mov	r4, r0
 8017214:	68b8      	ldr	r0, [r7, #8]
 8017216:	f000 f977 	bl	8017508 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>
 801721a:	4601      	mov	r1, r0
 801721c:	683b      	ldr	r3, [r7, #0]
 801721e:	687a      	ldr	r2, [r7, #4]
 8017220:	4620      	mov	r0, r4
 8017222:	f000 f980 	bl	8017526 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>
 8017226:	4603      	mov	r3, r0
    }
 8017228:	4618      	mov	r0, r3
 801722a:	3714      	adds	r7, #20
 801722c:	46bd      	mov	sp, r7
 801722e:	bd90      	pop	{r4, r7, pc}

08017230 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 8017230:	b580      	push	{r7, lr}
 8017232:	b084      	sub	sp, #16
 8017234:	af00      	add	r7, sp, #0
 8017236:	60f8      	str	r0, [r7, #12]
 8017238:	60b9      	str	r1, [r7, #8]
 801723a:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 801723c:	68b9      	ldr	r1, [r7, #8]
 801723e:	68f8      	ldr	r0, [r7, #12]
 8017240:	f000 f982 	bl	8017548 <_ZSt8_DestroyIPPvEvT_S2_>
    }
 8017244:	bf00      	nop
 8017246:	3710      	adds	r7, #16
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}

0801724c <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEEC2Ev>:
      new_allocator() _GLIBCXX_USE_NOEXCEPT { }
 801724c:	b480      	push	{r7}
 801724e:	b083      	sub	sp, #12
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	4618      	mov	r0, r3
 8017258:	370c      	adds	r7, #12
 801725a:	46bd      	mov	sp, r7
 801725c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017260:	4770      	bx	lr

08017262 <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE10deallocateERS2_PS1_j>:
      deallocate(allocator_type& __a, pointer __p, size_type __n)
 8017262:	b580      	push	{r7, lr}
 8017264:	b084      	sub	sp, #16
 8017266:	af00      	add	r7, sp, #0
 8017268:	60f8      	str	r0, [r7, #12]
 801726a:	60b9      	str	r1, [r7, #8]
 801726c:	607a      	str	r2, [r7, #4]
      { __a.deallocate(__p, __n); }
 801726e:	687a      	ldr	r2, [r7, #4]
 8017270:	68b9      	ldr	r1, [r7, #8]
 8017272:	68f8      	ldr	r0, [r7, #12]
 8017274:	f000 f975 	bl	8017562 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>
 8017278:	bf00      	nop
 801727a:	3710      	adds	r7, #16
 801727c:	46bd      	mov	sp, r7
 801727e:	bd80      	pop	{r7, pc}

08017280 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>:
    forward(typename std::remove_reference<_Tp>::type& __t) noexcept
 8017280:	b480      	push	{r7}
 8017282:	b083      	sub	sp, #12
 8017284:	af00      	add	r7, sp, #0
 8017286:	6078      	str	r0, [r7, #4]
    { return static_cast<_Tp&&>(__t); }
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	4618      	mov	r0, r3
 801728c:	370c      	adds	r7, #12
 801728e:	46bd      	mov	sp, r7
 8017290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017294:	4770      	bx	lr

08017296 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE9constructIS2_JRKS2_EEEvPT_DpOT0_>:
	construct(_Up* __p, _Args&&... __args)
 8017296:	b590      	push	{r4, r7, lr}
 8017298:	b085      	sub	sp, #20
 801729a:	af00      	add	r7, sp, #0
 801729c:	60f8      	str	r0, [r7, #12]
 801729e:	60b9      	str	r1, [r7, #8]
 80172a0:	607a      	str	r2, [r7, #4]
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
 80172a2:	6878      	ldr	r0, [r7, #4]
 80172a4:	f7ff ffec 	bl	8017280 <_ZSt7forwardIRKN12_GLOBAL__N_116scratch_buffer_tEEOT_RNSt16remove_referenceIS4_E4typeE>
 80172a8:	4604      	mov	r4, r0
 80172aa:	68bb      	ldr	r3, [r7, #8]
 80172ac:	4619      	mov	r1, r3
 80172ae:	2008      	movs	r0, #8
 80172b0:	f7e9 febc 	bl	800102c <_ZnwjPv>
 80172b4:	4603      	mov	r3, r0
 80172b6:	4622      	mov	r2, r4
 80172b8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80172bc:	e883 0003 	stmia.w	r3, {r0, r1}
 80172c0:	bf00      	nop
 80172c2:	3714      	adds	r7, #20
 80172c4:	46bd      	mov	sp, r7
 80172c6:	bd90      	pop	{r4, r7, pc}

080172c8 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>:
      __normal_iterator(const _Iterator& __i) _GLIBCXX_NOEXCEPT
 80172c8:	b480      	push	{r7}
 80172ca:	b083      	sub	sp, #12
 80172cc:	af00      	add	r7, sp, #0
 80172ce:	6078      	str	r0, [r7, #4]
 80172d0:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 80172d2:	683b      	ldr	r3, [r7, #0]
 80172d4:	681a      	ldr	r2, [r3, #0]
 80172d6:	687b      	ldr	r3, [r7, #4]
 80172d8:	601a      	str	r2, [r3, #0]
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	4618      	mov	r0, r3
 80172de:	370c      	adds	r7, #12
 80172e0:	46bd      	mov	sp, r7
 80172e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80172e6:	4770      	bx	lr

080172e8 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc>:
      _M_check_len(size_type __n, const char* __s) const
 80172e8:	b590      	push	{r4, r7, lr}
 80172ea:	b087      	sub	sp, #28
 80172ec:	af00      	add	r7, sp, #0
 80172ee:	60f8      	str	r0, [r7, #12]
 80172f0:	60b9      	str	r1, [r7, #8]
 80172f2:	607a      	str	r2, [r7, #4]
	if (max_size() - size() < __n)
 80172f4:	68f8      	ldr	r0, [r7, #12]
 80172f6:	f000 f941 	bl	801757c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 80172fa:	4604      	mov	r4, r0
 80172fc:	68f8      	ldr	r0, [r7, #12]
 80172fe:	f7ff fb82 	bl	8016a06 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8017302:	4603      	mov	r3, r0
 8017304:	1ae2      	subs	r2, r4, r3
 8017306:	68bb      	ldr	r3, [r7, #8]
 8017308:	429a      	cmp	r2, r3
 801730a:	bf34      	ite	cc
 801730c:	2301      	movcc	r3, #1
 801730e:	2300      	movcs	r3, #0
 8017310:	b2db      	uxtb	r3, r3
 8017312:	2b00      	cmp	r3, #0
 8017314:	d002      	beq.n	801731c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x34>
	  __throw_length_error(__N(__s));
 8017316:	6878      	ldr	r0, [r7, #4]
 8017318:	f000 fdac 	bl	8017e74 <_ZSt20__throw_length_errorPKc>
	const size_type __len = size() + (std::max)(size(), __n);
 801731c:	68f8      	ldr	r0, [r7, #12]
 801731e:	f7ff fb72 	bl	8016a06 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 8017322:	4604      	mov	r4, r0
 8017324:	68f8      	ldr	r0, [r7, #12]
 8017326:	f7ff fb6e 	bl	8016a06 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801732a:	4603      	mov	r3, r0
 801732c:	613b      	str	r3, [r7, #16]
 801732e:	f107 0208 	add.w	r2, r7, #8
 8017332:	f107 0310 	add.w	r3, r7, #16
 8017336:	4611      	mov	r1, r2
 8017338:	4618      	mov	r0, r3
 801733a:	f7ee fde3 	bl	8005f04 <_ZSt3maxIjERKT_S2_S2_>
 801733e:	4603      	mov	r3, r0
 8017340:	681b      	ldr	r3, [r3, #0]
 8017342:	4423      	add	r3, r4
 8017344:	617b      	str	r3, [r7, #20]
	return (__len < size() || __len > max_size()) ? max_size() : __len;
 8017346:	68f8      	ldr	r0, [r7, #12]
 8017348:	f7ff fb5d 	bl	8016a06 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE4sizeEv>
 801734c:	4602      	mov	r2, r0
 801734e:	697b      	ldr	r3, [r7, #20]
 8017350:	4293      	cmp	r3, r2
 8017352:	d306      	bcc.n	8017362 <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x7a>
 8017354:	68f8      	ldr	r0, [r7, #12]
 8017356:	f000 f911 	bl	801757c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 801735a:	4602      	mov	r2, r0
 801735c:	697b      	ldr	r3, [r7, #20]
 801735e:	4293      	cmp	r3, r2
 8017360:	d904      	bls.n	801736c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x84>
 8017362:	68f8      	ldr	r0, [r7, #12]
 8017364:	f000 f90a 	bl	801757c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>
 8017368:	4603      	mov	r3, r0
 801736a:	e000      	b.n	801736e <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE12_M_check_lenEjPKc+0x86>
 801736c:	697b      	ldr	r3, [r7, #20]
      }
 801736e:	4618      	mov	r0, r3
 8017370:	371c      	adds	r7, #28
 8017372:	46bd      	mov	sp, r7
 8017374:	bd90      	pop	{r4, r7, pc}

08017376 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE5beginEv>:
      begin() _GLIBCXX_NOEXCEPT
 8017376:	b580      	push	{r7, lr}
 8017378:	b084      	sub	sp, #16
 801737a:	af00      	add	r7, sp, #0
 801737c:	6078      	str	r0, [r7, #4]
      { return iterator(this->_M_impl._M_start); }
 801737e:	687a      	ldr	r2, [r7, #4]
 8017380:	f107 030c 	add.w	r3, r7, #12
 8017384:	4611      	mov	r1, r2
 8017386:	4618      	mov	r0, r3
 8017388:	f7ff ff9e 	bl	80172c8 <_ZN9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEC1ERKS3_>
 801738c:	68fb      	ldr	r3, [r7, #12]
 801738e:	4618      	mov	r0, r3
 8017390:	3710      	adds	r7, #16
 8017392:	46bd      	mov	sp, r7
 8017394:	bd80      	pop	{r7, pc}

08017396 <_ZN9__gnu_cxxmiIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEEENS_17__normal_iteratorIT_T0_E15difference_typeERKSA_SD_>:
    operator-(const __normal_iterator<_Iterator, _Container>& __lhs,
 8017396:	b590      	push	{r4, r7, lr}
 8017398:	b083      	sub	sp, #12
 801739a:	af00      	add	r7, sp, #0
 801739c:	6078      	str	r0, [r7, #4]
 801739e:	6039      	str	r1, [r7, #0]
    { return __lhs.base() - __rhs.base(); }
 80173a0:	6878      	ldr	r0, [r7, #4]
 80173a2:	f000 f835 	bl	8017410 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80173a6:	4603      	mov	r3, r0
 80173a8:	681c      	ldr	r4, [r3, #0]
 80173aa:	6838      	ldr	r0, [r7, #0]
 80173ac:	f000 f830 	bl	8017410 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>
 80173b0:	4603      	mov	r3, r0
 80173b2:	681b      	ldr	r3, [r3, #0]
 80173b4:	1ae3      	subs	r3, r4, r3
 80173b6:	10db      	asrs	r3, r3, #3
 80173b8:	4618      	mov	r0, r3
 80173ba:	370c      	adds	r7, #12
 80173bc:	46bd      	mov	sp, r7
 80173be:	bd90      	pop	{r4, r7, pc}

080173c0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj>:
      _M_allocate(size_t __n)
 80173c0:	b580      	push	{r7, lr}
 80173c2:	b082      	sub	sp, #8
 80173c4:	af00      	add	r7, sp, #0
 80173c6:	6078      	str	r0, [r7, #4]
 80173c8:	6039      	str	r1, [r7, #0]
	return __n != 0 ? _Tr::allocate(_M_impl, __n) : pointer();
 80173ca:	683b      	ldr	r3, [r7, #0]
 80173cc:	2b00      	cmp	r3, #0
 80173ce:	d006      	beq.n	80173de <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x1e>
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	6839      	ldr	r1, [r7, #0]
 80173d4:	4618      	mov	r0, r3
 80173d6:	f000 f8e2 	bl	801759e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>
 80173da:	4603      	mov	r3, r0
 80173dc:	e000      	b.n	80173e0 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_M_allocateEj+0x20>
 80173de:	2300      	movs	r3, #0
      }
 80173e0:	4618      	mov	r0, r3
 80173e2:	3708      	adds	r7, #8
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bd80      	pop	{r7, pc}

080173e8 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_relocateEPS1_S4_S4_RS2_>:
      _S_relocate(pointer __first, pointer __last, pointer __result,
 80173e8:	b590      	push	{r4, r7, lr}
 80173ea:	b089      	sub	sp, #36	; 0x24
 80173ec:	af02      	add	r7, sp, #8
 80173ee:	60f8      	str	r0, [r7, #12]
 80173f0:	60b9      	str	r1, [r7, #8]
 80173f2:	607a      	str	r2, [r7, #4]
 80173f4:	603b      	str	r3, [r7, #0]
	return _S_do_relocate(__first, __last, __result, __alloc, __do_it{});
 80173f6:	f88d 4000 	strb.w	r4, [sp]
 80173fa:	683b      	ldr	r3, [r7, #0]
 80173fc:	687a      	ldr	r2, [r7, #4]
 80173fe:	68b9      	ldr	r1, [r7, #8]
 8017400:	68f8      	ldr	r0, [r7, #12]
 8017402:	f000 f8db 	bl	80175bc <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>
 8017406:	4603      	mov	r3, r0
      }
 8017408:	4618      	mov	r0, r3
 801740a:	371c      	adds	r7, #28
 801740c:	46bd      	mov	sp, r7
 801740e:	bd90      	pop	{r4, r7, pc}

08017410 <_ZNK9__gnu_cxx17__normal_iteratorIPN12_GLOBAL__N_116scratch_buffer_tESt6vectorIS2_SaIS2_EEE4baseEv>:
      base() const _GLIBCXX_NOEXCEPT
 8017410:	b480      	push	{r7}
 8017412:	b083      	sub	sp, #12
 8017414:	af00      	add	r7, sp, #0
 8017416:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	4618      	mov	r0, r3
 801741c:	370c      	adds	r7, #12
 801741e:	46bd      	mov	sp, r7
 8017420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017424:	4770      	bx	lr

08017426 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() _GLIBCXX_NOEXCEPT
 8017426:	b480      	push	{r7}
 8017428:	b083      	sub	sp, #12
 801742a:	af00      	add	r7, sp, #0
 801742c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	4618      	mov	r0, r3
 8017432:	370c      	adds	r7, #12
 8017434:	46bd      	mov	sp, r7
 8017436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801743a:	4770      	bx	lr

0801743c <_ZSt34__uninitialized_move_if_noexcept_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __uninitialized_move_if_noexcept_a(_InputIterator __first,
 801743c:	b590      	push	{r4, r7, lr}
 801743e:	b085      	sub	sp, #20
 8017440:	af00      	add	r7, sp, #0
 8017442:	60f8      	str	r0, [r7, #12]
 8017444:	60b9      	str	r1, [r7, #8]
 8017446:	607a      	str	r2, [r7, #4]
 8017448:	603b      	str	r3, [r7, #0]
	(_GLIBCXX_MAKE_MOVE_IF_NOEXCEPT_ITERATOR(__first),
 801744a:	68f8      	ldr	r0, [r7, #12]
 801744c:	f000 f8c8 	bl	80175e0 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8017450:	4604      	mov	r4, r0
 8017452:	68b8      	ldr	r0, [r7, #8]
 8017454:	f000 f8c4 	bl	80175e0 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>
 8017458:	4601      	mov	r1, r0
 801745a:	683b      	ldr	r3, [r7, #0]
 801745c:	687a      	ldr	r2, [r7, #4]
 801745e:	4620      	mov	r0, r4
 8017460:	f000 f8cd 	bl	80175fe <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>
 8017464:	4603      	mov	r3, r0
    }
 8017466:	4618      	mov	r0, r3
 8017468:	3714      	adds	r7, #20
 801746a:	46bd      	mov	sp, r7
 801746c:	bd90      	pop	{r4, r7, pc}

0801746e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last,
 801746e:	b580      	push	{r7, lr}
 8017470:	b084      	sub	sp, #16
 8017472:	af00      	add	r7, sp, #0
 8017474:	60f8      	str	r0, [r7, #12]
 8017476:	60b9      	str	r1, [r7, #8]
 8017478:	607a      	str	r2, [r7, #4]
      _Destroy(__first, __last);
 801747a:	68b9      	ldr	r1, [r7, #8]
 801747c:	68f8      	ldr	r0, [r7, #12]
 801747e:	f000 f8cf 	bl	8017620 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>
    }
 8017482:	bf00      	nop
 8017484:	3710      	adds	r7, #16
 8017486:	46bd      	mov	sp, r7
 8017488:	bd80      	pop	{r7, pc}

0801748a <_ZN9__gnu_cxx13new_allocatorIPvE10deallocateEPS1_j>:
      deallocate(pointer __p, size_type)
 801748a:	b580      	push	{r7, lr}
 801748c:	b084      	sub	sp, #16
 801748e:	af00      	add	r7, sp, #0
 8017490:	60f8      	str	r0, [r7, #12]
 8017492:	60b9      	str	r1, [r7, #8]
 8017494:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 8017496:	68b8      	ldr	r0, [r7, #8]
 8017498:	f000 fcbe 	bl	8017e18 <_ZdlPv>
      }
 801749c:	bf00      	nop
 801749e:	3710      	adds	r7, #16
 80174a0:	46bd      	mov	sp, r7
 80174a2:	bd80      	pop	{r7, pc}

080174a4 <_ZNKSt6vectorIPvSaIS0_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 80174a4:	b580      	push	{r7, lr}
 80174a6:	b082      	sub	sp, #8
 80174a8:	af00      	add	r7, sp, #0
 80174aa:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	4618      	mov	r0, r3
 80174b0:	f000 f8dd 	bl	801766e <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 80174b4:	4603      	mov	r3, r0
 80174b6:	4618      	mov	r0, r3
 80174b8:	f000 f8bf 	bl	801763a <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>
 80174bc:	4603      	mov	r3, r0
 80174be:	4618      	mov	r0, r3
 80174c0:	3708      	adds	r7, #8
 80174c2:	46bd      	mov	sp, r7
 80174c4:	bd80      	pop	{r7, pc}

080174c6 <_ZNSt16allocator_traitsISaIPvEE8allocateERS1_j>:
      allocate(allocator_type& __a, size_type __n)
 80174c6:	b580      	push	{r7, lr}
 80174c8:	b082      	sub	sp, #8
 80174ca:	af00      	add	r7, sp, #0
 80174cc:	6078      	str	r0, [r7, #4]
 80174ce:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80174d0:	2200      	movs	r2, #0
 80174d2:	6839      	ldr	r1, [r7, #0]
 80174d4:	6878      	ldr	r0, [r7, #4]
 80174d6:	f000 f8d5 	bl	8017684 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>
 80174da:	4603      	mov	r3, r0
 80174dc:	4618      	mov	r0, r3
 80174de:	3708      	adds	r7, #8
 80174e0:	46bd      	mov	sp, r7
 80174e2:	bd80      	pop	{r7, pc}

080174e4 <_ZNSt6vectorIPvSaIS0_EE14_S_do_relocateEPS0_S3_S3_RS1_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80174e4:	b580      	push	{r7, lr}
 80174e6:	b084      	sub	sp, #16
 80174e8:	af00      	add	r7, sp, #0
 80174ea:	60f8      	str	r0, [r7, #12]
 80174ec:	60b9      	str	r1, [r7, #8]
 80174ee:	607a      	str	r2, [r7, #4]
 80174f0:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80174f2:	683b      	ldr	r3, [r7, #0]
 80174f4:	687a      	ldr	r2, [r7, #4]
 80174f6:	68b9      	ldr	r1, [r7, #8]
 80174f8:	68f8      	ldr	r0, [r7, #12]
 80174fa:	f000 f8e1 	bl	80176c0 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>
 80174fe:	4603      	mov	r3, r0
      }
 8017500:	4618      	mov	r0, r3
 8017502:	3710      	adds	r7, #16
 8017504:	46bd      	mov	sp, r7
 8017506:	bd80      	pop	{r7, pc}

08017508 <_ZSt32__make_move_if_noexcept_iteratorIPvSt13move_iteratorIPS0_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 8017508:	b580      	push	{r7, lr}
 801750a:	b084      	sub	sp, #16
 801750c:	af00      	add	r7, sp, #0
 801750e:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 8017510:	f107 030c 	add.w	r3, r7, #12
 8017514:	6879      	ldr	r1, [r7, #4]
 8017516:	4618      	mov	r0, r3
 8017518:	f000 f8ef 	bl	80176fa <_ZNSt13move_iteratorIPPvEC1ES1_>
 801751c:	68fb      	ldr	r3, [r7, #12]
 801751e:	4618      	mov	r0, r3
 8017520:	3710      	adds	r7, #16
 8017522:	46bd      	mov	sp, r7
 8017524:	bd80      	pop	{r7, pc}

08017526 <_ZSt22__uninitialized_copy_aISt13move_iteratorIPPvES2_S1_ET0_T_S5_S4_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 8017526:	b580      	push	{r7, lr}
 8017528:	b084      	sub	sp, #16
 801752a:	af00      	add	r7, sp, #0
 801752c:	60f8      	str	r0, [r7, #12]
 801752e:	60b9      	str	r1, [r7, #8]
 8017530:	607a      	str	r2, [r7, #4]
 8017532:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 8017534:	687a      	ldr	r2, [r7, #4]
 8017536:	68b9      	ldr	r1, [r7, #8]
 8017538:	68f8      	ldr	r0, [r7, #12]
 801753a:	f000 f8ed 	bl	8017718 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 801753e:	4603      	mov	r3, r0
 8017540:	4618      	mov	r0, r3
 8017542:	3710      	adds	r7, #16
 8017544:	46bd      	mov	sp, r7
 8017546:	bd80      	pop	{r7, pc}

08017548 <_ZSt8_DestroyIPPvEvT_S2_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8017548:	b580      	push	{r7, lr}
 801754a:	b082      	sub	sp, #8
 801754c:	af00      	add	r7, sp, #0
 801754e:	6078      	str	r0, [r7, #4]
 8017550:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 8017552:	6839      	ldr	r1, [r7, #0]
 8017554:	6878      	ldr	r0, [r7, #4]
 8017556:	f000 f8f1 	bl	801773c <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>
    }
 801755a:	bf00      	nop
 801755c:	3708      	adds	r7, #8
 801755e:	46bd      	mov	sp, r7
 8017560:	bd80      	pop	{r7, pc}

08017562 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE10deallocateEPS2_j>:
      deallocate(pointer __p, size_type)
 8017562:	b580      	push	{r7, lr}
 8017564:	b084      	sub	sp, #16
 8017566:	af00      	add	r7, sp, #0
 8017568:	60f8      	str	r0, [r7, #12]
 801756a:	60b9      	str	r1, [r7, #8]
 801756c:	607a      	str	r2, [r7, #4]
	::operator delete(__p);
 801756e:	68b8      	ldr	r0, [r7, #8]
 8017570:	f000 fc52 	bl	8017e18 <_ZdlPv>
      }
 8017574:	bf00      	nop
 8017576:	3710      	adds	r7, #16
 8017578:	46bd      	mov	sp, r7
 801757a:	bd80      	pop	{r7, pc}

0801757c <_ZNKSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE8max_sizeEv>:
      max_size() const _GLIBCXX_NOEXCEPT
 801757c:	b580      	push	{r7, lr}
 801757e:	b082      	sub	sp, #8
 8017580:	af00      	add	r7, sp, #0
 8017582:	6078      	str	r0, [r7, #4]
      { return _S_max_size(_M_get_Tp_allocator()); }
 8017584:	687b      	ldr	r3, [r7, #4]
 8017586:	4618      	mov	r0, r3
 8017588:	f000 f8fd 	bl	8017786 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 801758c:	4603      	mov	r3, r0
 801758e:	4618      	mov	r0, r3
 8017590:	f000 f8df 	bl	8017752 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>
 8017594:	4603      	mov	r3, r0
 8017596:	4618      	mov	r0, r3
 8017598:	3708      	adds	r7, #8
 801759a:	46bd      	mov	sp, r7
 801759c:	bd80      	pop	{r7, pc}

0801759e <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8allocateERS2_j>:
      allocate(allocator_type& __a, size_type __n)
 801759e:	b580      	push	{r7, lr}
 80175a0:	b082      	sub	sp, #8
 80175a2:	af00      	add	r7, sp, #0
 80175a4:	6078      	str	r0, [r7, #4]
 80175a6:	6039      	str	r1, [r7, #0]
      { return __a.allocate(__n); }
 80175a8:	2200      	movs	r2, #0
 80175aa:	6839      	ldr	r1, [r7, #0]
 80175ac:	6878      	ldr	r0, [r7, #4]
 80175ae:	f000 f8f5 	bl	801779c <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>
 80175b2:	4603      	mov	r3, r0
 80175b4:	4618      	mov	r0, r3
 80175b6:	3708      	adds	r7, #8
 80175b8:	46bd      	mov	sp, r7
 80175ba:	bd80      	pop	{r7, pc}

080175bc <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE14_S_do_relocateEPS1_S4_S4_RS2_St17integral_constantIbLb1EE>:
      _S_do_relocate(pointer __first, pointer __last, pointer __result,
 80175bc:	b580      	push	{r7, lr}
 80175be:	b084      	sub	sp, #16
 80175c0:	af00      	add	r7, sp, #0
 80175c2:	60f8      	str	r0, [r7, #12]
 80175c4:	60b9      	str	r1, [r7, #8]
 80175c6:	607a      	str	r2, [r7, #4]
 80175c8:	603b      	str	r3, [r7, #0]
	return std::__relocate_a(__first, __last, __result, __alloc);
 80175ca:	683b      	ldr	r3, [r7, #0]
 80175cc:	687a      	ldr	r2, [r7, #4]
 80175ce:	68b9      	ldr	r1, [r7, #8]
 80175d0:	68f8      	ldr	r0, [r7, #12]
 80175d2:	f000 f901 	bl	80177d8 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>
 80175d6:	4603      	mov	r3, r0
      }
 80175d8:	4618      	mov	r0, r3
 80175da:	3710      	adds	r7, #16
 80175dc:	46bd      	mov	sp, r7
 80175de:	bd80      	pop	{r7, pc}

080175e0 <_ZSt32__make_move_if_noexcept_iteratorIN12_GLOBAL__N_116scratch_buffer_tESt13move_iteratorIPS1_EET0_PT_>:
    __make_move_if_noexcept_iterator(_Tp* __i)
 80175e0:	b580      	push	{r7, lr}
 80175e2:	b084      	sub	sp, #16
 80175e4:	af00      	add	r7, sp, #0
 80175e6:	6078      	str	r0, [r7, #4]
    { return _ReturnType(__i); }
 80175e8:	f107 030c 	add.w	r3, r7, #12
 80175ec:	6879      	ldr	r1, [r7, #4]
 80175ee:	4618      	mov	r0, r3
 80175f0:	f000 f90f 	bl	8017812 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>
 80175f4:	68fb      	ldr	r3, [r7, #12]
 80175f6:	4618      	mov	r0, r3
 80175f8:	3710      	adds	r7, #16
 80175fa:	46bd      	mov	sp, r7
 80175fc:	bd80      	pop	{r7, pc}

080175fe <_ZSt22__uninitialized_copy_aISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_S2_ET0_T_S6_S5_RSaIT1_E>:
    __uninitialized_copy_a(_InputIterator __first, _InputIterator __last,
 80175fe:	b580      	push	{r7, lr}
 8017600:	b084      	sub	sp, #16
 8017602:	af00      	add	r7, sp, #0
 8017604:	60f8      	str	r0, [r7, #12]
 8017606:	60b9      	str	r1, [r7, #8]
 8017608:	607a      	str	r2, [r7, #4]
 801760a:	603b      	str	r3, [r7, #0]
    { return std::uninitialized_copy(__first, __last, __result); }
 801760c:	687a      	ldr	r2, [r7, #4]
 801760e:	68b9      	ldr	r1, [r7, #8]
 8017610:	68f8      	ldr	r0, [r7, #12]
 8017612:	f000 f90d 	bl	8017830 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 8017616:	4603      	mov	r3, r0
 8017618:	4618      	mov	r0, r3
 801761a:	3710      	adds	r7, #16
 801761c:	46bd      	mov	sp, r7
 801761e:	bd80      	pop	{r7, pc}

08017620 <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tEEvT_S3_>:
    _Destroy(_ForwardIterator __first, _ForwardIterator __last)
 8017620:	b580      	push	{r7, lr}
 8017622:	b082      	sub	sp, #8
 8017624:	af00      	add	r7, sp, #0
 8017626:	6078      	str	r0, [r7, #4]
 8017628:	6039      	str	r1, [r7, #0]
	__destroy(__first, __last);
 801762a:	6839      	ldr	r1, [r7, #0]
 801762c:	6878      	ldr	r0, [r7, #4]
 801762e:	f000 f911 	bl	8017854 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>
    }
 8017632:	bf00      	nop
 8017634:	3708      	adds	r7, #8
 8017636:	46bd      	mov	sp, r7
 8017638:	bd80      	pop	{r7, pc}

0801763a <_ZNSt6vectorIPvSaIS0_EE11_S_max_sizeERKS1_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 801763a:	b580      	push	{r7, lr}
 801763c:	b084      	sub	sp, #16
 801763e:	af00      	add	r7, sp, #0
 8017640:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 8017642:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
 8017646:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8017648:	6878      	ldr	r0, [r7, #4]
 801764a:	f000 f90e 	bl	801786a <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>
 801764e:	4603      	mov	r3, r0
 8017650:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 8017652:	f107 0208 	add.w	r2, r7, #8
 8017656:	f107 030c 	add.w	r3, r7, #12
 801765a:	4611      	mov	r1, r2
 801765c:	4618      	mov	r0, r3
 801765e:	f7ee fe2b 	bl	80062b8 <_ZSt3minIjERKT_S2_S2_>
 8017662:	4603      	mov	r3, r0
 8017664:	681b      	ldr	r3, [r3, #0]
      }
 8017666:	4618      	mov	r0, r3
 8017668:	3710      	adds	r7, #16
 801766a:	46bd      	mov	sp, r7
 801766c:	bd80      	pop	{r7, pc}

0801766e <_ZNKSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 801766e:	b480      	push	{r7}
 8017670:	b083      	sub	sp, #12
 8017672:	af00      	add	r7, sp, #0
 8017674:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 8017676:	687b      	ldr	r3, [r7, #4]
 8017678:	4618      	mov	r0, r3
 801767a:	370c      	adds	r7, #12
 801767c:	46bd      	mov	sp, r7
 801767e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017682:	4770      	bx	lr

08017684 <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 8017684:	b580      	push	{r7, lr}
 8017686:	b084      	sub	sp, #16
 8017688:	af00      	add	r7, sp, #0
 801768a:	60f8      	str	r0, [r7, #12]
 801768c:	60b9      	str	r1, [r7, #8]
 801768e:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 8017690:	68f8      	ldr	r0, [r7, #12]
 8017692:	f000 f8f6 	bl	8017882 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 8017696:	4602      	mov	r2, r0
 8017698:	68bb      	ldr	r3, [r7, #8]
 801769a:	4293      	cmp	r3, r2
 801769c:	bf8c      	ite	hi
 801769e:	2301      	movhi	r3, #1
 80176a0:	2300      	movls	r3, #0
 80176a2:	b2db      	uxtb	r3, r3
 80176a4:	2b00      	cmp	r3, #0
 80176a6:	d001      	beq.n	80176ac <_ZN9__gnu_cxx13new_allocatorIPvE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80176a8:	f000 fbde 	bl	8017e68 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80176ac:	68bb      	ldr	r3, [r7, #8]
 80176ae:	009b      	lsls	r3, r3, #2
 80176b0:	4618      	mov	r0, r3
 80176b2:	f000 fbc6 	bl	8017e42 <_Znwj>
 80176b6:	4603      	mov	r3, r0
      }
 80176b8:	4618      	mov	r0, r3
 80176ba:	3710      	adds	r7, #16
 80176bc:	46bd      	mov	sp, r7
 80176be:	bd80      	pop	{r7, pc}

080176c0 <_ZSt12__relocate_aIPPvS1_SaIS0_EET0_T_S4_S3_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80176c0:	b5b0      	push	{r4, r5, r7, lr}
 80176c2:	b084      	sub	sp, #16
 80176c4:	af00      	add	r7, sp, #0
 80176c6:	60f8      	str	r0, [r7, #12]
 80176c8:	60b9      	str	r1, [r7, #8]
 80176ca:	607a      	str	r2, [r7, #4]
 80176cc:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80176ce:	68f8      	ldr	r0, [r7, #12]
 80176d0:	f000 f8e3 	bl	801789a <_ZSt12__niter_baseIPPvET_S2_>
 80176d4:	4604      	mov	r4, r0
 80176d6:	68b8      	ldr	r0, [r7, #8]
 80176d8:	f000 f8df 	bl	801789a <_ZSt12__niter_baseIPPvET_S2_>
 80176dc:	4605      	mov	r5, r0
 80176de:	6878      	ldr	r0, [r7, #4]
 80176e0:	f000 f8db 	bl	801789a <_ZSt12__niter_baseIPPvET_S2_>
 80176e4:	4602      	mov	r2, r0
 80176e6:	683b      	ldr	r3, [r7, #0]
 80176e8:	4629      	mov	r1, r5
 80176ea:	4620      	mov	r0, r4
 80176ec:	f000 f8e0 	bl	80178b0 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>
 80176f0:	4603      	mov	r3, r0
    }
 80176f2:	4618      	mov	r0, r3
 80176f4:	3710      	adds	r7, #16
 80176f6:	46bd      	mov	sp, r7
 80176f8:	bdb0      	pop	{r4, r5, r7, pc}

080176fa <_ZNSt13move_iteratorIPPvEC1ES1_>:
      move_iterator(iterator_type __i)
 80176fa:	b480      	push	{r7}
 80176fc:	b083      	sub	sp, #12
 80176fe:	af00      	add	r7, sp, #0
 8017700:	6078      	str	r0, [r7, #4]
 8017702:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 8017704:	687b      	ldr	r3, [r7, #4]
 8017706:	683a      	ldr	r2, [r7, #0]
 8017708:	601a      	str	r2, [r3, #0]
 801770a:	687b      	ldr	r3, [r7, #4]
 801770c:	4618      	mov	r0, r3
 801770e:	370c      	adds	r7, #12
 8017710:	46bd      	mov	sp, r7
 8017712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017716:	4770      	bx	lr

08017718 <_ZSt18uninitialized_copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017718:	b580      	push	{r7, lr}
 801771a:	b086      	sub	sp, #24
 801771c:	af00      	add	r7, sp, #0
 801771e:	60f8      	str	r0, [r7, #12]
 8017720:	60b9      	str	r1, [r7, #8]
 8017722:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 8017724:	2301      	movs	r3, #1
 8017726:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017728:	687a      	ldr	r2, [r7, #4]
 801772a:	68b9      	ldr	r1, [r7, #8]
 801772c:	68f8      	ldr	r0, [r7, #12]
 801772e:	f000 f8dd 	bl	80178ec <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>
 8017732:	4603      	mov	r3, r0
    }
 8017734:	4618      	mov	r0, r3
 8017736:	3718      	adds	r7, #24
 8017738:	46bd      	mov	sp, r7
 801773a:	bd80      	pop	{r7, pc}

0801773c <_ZNSt12_Destroy_auxILb1EE9__destroyIPPvEEvT_S4_>:
        __destroy(_ForwardIterator, _ForwardIterator) { }
 801773c:	b480      	push	{r7}
 801773e:	b083      	sub	sp, #12
 8017740:	af00      	add	r7, sp, #0
 8017742:	6078      	str	r0, [r7, #4]
 8017744:	6039      	str	r1, [r7, #0]
 8017746:	bf00      	nop
 8017748:	370c      	adds	r7, #12
 801774a:	46bd      	mov	sp, r7
 801774c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017750:	4770      	bx	lr

08017752 <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE11_S_max_sizeERKS2_>:
      _S_max_size(const _Tp_alloc_type& __a) _GLIBCXX_NOEXCEPT
 8017752:	b580      	push	{r7, lr}
 8017754:	b084      	sub	sp, #16
 8017756:	af00      	add	r7, sp, #0
 8017758:	6078      	str	r0, [r7, #4]
	const size_t __diffmax
 801775a:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
 801775e:	60fb      	str	r3, [r7, #12]
	const size_t __allocmax = _Alloc_traits::max_size(__a);
 8017760:	6878      	ldr	r0, [r7, #4]
 8017762:	f000 f8d3 	bl	801790c <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>
 8017766:	4603      	mov	r3, r0
 8017768:	60bb      	str	r3, [r7, #8]
	return (std::min)(__diffmax, __allocmax);
 801776a:	f107 0208 	add.w	r2, r7, #8
 801776e:	f107 030c 	add.w	r3, r7, #12
 8017772:	4611      	mov	r1, r2
 8017774:	4618      	mov	r0, r3
 8017776:	f7ee fd9f 	bl	80062b8 <_ZSt3minIjERKT_S2_S2_>
 801777a:	4603      	mov	r3, r0
 801777c:	681b      	ldr	r3, [r3, #0]
      }
 801777e:	4618      	mov	r0, r3
 8017780:	3710      	adds	r7, #16
 8017782:	46bd      	mov	sp, r7
 8017784:	bd80      	pop	{r7, pc}

08017786 <_ZNKSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>:
      _M_get_Tp_allocator() const _GLIBCXX_NOEXCEPT
 8017786:	b480      	push	{r7}
 8017788:	b083      	sub	sp, #12
 801778a:	af00      	add	r7, sp, #0
 801778c:	6078      	str	r0, [r7, #4]
      { return this->_M_impl; }
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	4618      	mov	r0, r3
 8017792:	370c      	adds	r7, #12
 8017794:	46bd      	mov	sp, r7
 8017796:	f85d 7b04 	ldr.w	r7, [sp], #4
 801779a:	4770      	bx	lr

0801779c <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv>:
      allocate(size_type __n, const void* = static_cast<const void*>(0))
 801779c:	b580      	push	{r7, lr}
 801779e:	b084      	sub	sp, #16
 80177a0:	af00      	add	r7, sp, #0
 80177a2:	60f8      	str	r0, [r7, #12]
 80177a4:	60b9      	str	r1, [r7, #8]
 80177a6:	607a      	str	r2, [r7, #4]
	if (__n > this->max_size())
 80177a8:	68f8      	ldr	r0, [r7, #12]
 80177aa:	f000 f8bb 	bl	8017924 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 80177ae:	4602      	mov	r2, r0
 80177b0:	68bb      	ldr	r3, [r7, #8]
 80177b2:	4293      	cmp	r3, r2
 80177b4:	bf8c      	ite	hi
 80177b6:	2301      	movhi	r3, #1
 80177b8:	2300      	movls	r3, #0
 80177ba:	b2db      	uxtb	r3, r3
 80177bc:	2b00      	cmp	r3, #0
 80177be:	d001      	beq.n	80177c4 <_ZN9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8allocateEjPKv+0x28>
	  std::__throw_bad_alloc();
 80177c0:	f000 fb52 	bl	8017e68 <_ZSt17__throw_bad_allocv>
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
 80177c4:	68bb      	ldr	r3, [r7, #8]
 80177c6:	00db      	lsls	r3, r3, #3
 80177c8:	4618      	mov	r0, r3
 80177ca:	f000 fb3a 	bl	8017e42 <_Znwj>
 80177ce:	4603      	mov	r3, r0
      }
 80177d0:	4618      	mov	r0, r3
 80177d2:	3710      	adds	r7, #16
 80177d4:	46bd      	mov	sp, r7
 80177d6:	bd80      	pop	{r7, pc}

080177d8 <_ZSt12__relocate_aIPN12_GLOBAL__N_116scratch_buffer_tES2_SaIS1_EET0_T_S5_S4_RT1_>:
    __relocate_a(_InputIterator __first, _InputIterator __last,
 80177d8:	b5b0      	push	{r4, r5, r7, lr}
 80177da:	b084      	sub	sp, #16
 80177dc:	af00      	add	r7, sp, #0
 80177de:	60f8      	str	r0, [r7, #12]
 80177e0:	60b9      	str	r1, [r7, #8]
 80177e2:	607a      	str	r2, [r7, #4]
 80177e4:	603b      	str	r3, [r7, #0]
      return __relocate_a_1(std::__niter_base(__first),
 80177e6:	68f8      	ldr	r0, [r7, #12]
 80177e8:	f000 f8a8 	bl	801793c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 80177ec:	4604      	mov	r4, r0
 80177ee:	68b8      	ldr	r0, [r7, #8]
 80177f0:	f000 f8a4 	bl	801793c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 80177f4:	4605      	mov	r5, r0
 80177f6:	6878      	ldr	r0, [r7, #4]
 80177f8:	f000 f8a0 	bl	801793c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 80177fc:	4602      	mov	r2, r0
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	4629      	mov	r1, r5
 8017802:	4620      	mov	r0, r4
 8017804:	f000 f8a5 	bl	8017952 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>
 8017808:	4603      	mov	r3, r0
    }
 801780a:	4618      	mov	r0, r3
 801780c:	3710      	adds	r7, #16
 801780e:	46bd      	mov	sp, r7
 8017810:	bdb0      	pop	{r4, r5, r7, pc}

08017812 <_ZNSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEEC1ES2_>:
      move_iterator(iterator_type __i)
 8017812:	b480      	push	{r7}
 8017814:	b083      	sub	sp, #12
 8017816:	af00      	add	r7, sp, #0
 8017818:	6078      	str	r0, [r7, #4]
 801781a:	6039      	str	r1, [r7, #0]
      : _M_current(__i) { }
 801781c:	687b      	ldr	r3, [r7, #4]
 801781e:	683a      	ldr	r2, [r7, #0]
 8017820:	601a      	str	r2, [r3, #0]
 8017822:	687b      	ldr	r3, [r7, #4]
 8017824:	4618      	mov	r0, r3
 8017826:	370c      	adds	r7, #12
 8017828:	46bd      	mov	sp, r7
 801782a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801782e:	4770      	bx	lr

08017830 <_ZSt18uninitialized_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    uninitialized_copy(_InputIterator __first, _InputIterator __last,
 8017830:	b580      	push	{r7, lr}
 8017832:	b086      	sub	sp, #24
 8017834:	af00      	add	r7, sp, #0
 8017836:	60f8      	str	r0, [r7, #12]
 8017838:	60b9      	str	r1, [r7, #8]
 801783a:	607a      	str	r2, [r7, #4]
      const bool __assignable = is_assignable<_RefType2, _RefType1>::value;
 801783c:	2301      	movs	r3, #1
 801783e:	75fb      	strb	r3, [r7, #23]
	__uninit_copy(__first, __last, __result);
 8017840:	687a      	ldr	r2, [r7, #4]
 8017842:	68b9      	ldr	r1, [r7, #8]
 8017844:	68f8      	ldr	r0, [r7, #12]
 8017846:	f000 f8a2 	bl	801798e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>
 801784a:	4603      	mov	r3, r0
    }
 801784c:	4618      	mov	r0, r3
 801784e:	3718      	adds	r7, #24
 8017850:	46bd      	mov	sp, r7
 8017852:	bd80      	pop	{r7, pc}

08017854 <_ZNSt12_Destroy_auxILb1EE9__destroyIPN12_GLOBAL__N_116scratch_buffer_tEEEvT_S5_>:
 8017854:	b480      	push	{r7}
 8017856:	b083      	sub	sp, #12
 8017858:	af00      	add	r7, sp, #0
 801785a:	6078      	str	r0, [r7, #4]
 801785c:	6039      	str	r1, [r7, #0]
 801785e:	bf00      	nop
 8017860:	370c      	adds	r7, #12
 8017862:	46bd      	mov	sp, r7
 8017864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017868:	4770      	bx	lr

0801786a <_ZNSt16allocator_traitsISaIPvEE8max_sizeERKS1_>:
      max_size(const allocator_type& __a) noexcept
 801786a:	b580      	push	{r7, lr}
 801786c:	b082      	sub	sp, #8
 801786e:	af00      	add	r7, sp, #0
 8017870:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8017872:	6878      	ldr	r0, [r7, #4]
 8017874:	f000 f805 	bl	8017882 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>
 8017878:	4603      	mov	r3, r0
 801787a:	4618      	mov	r0, r3
 801787c:	3708      	adds	r7, #8
 801787e:	46bd      	mov	sp, r7
 8017880:	bd80      	pop	{r7, pc}

08017882 <_ZNK9__gnu_cxx13new_allocatorIPvE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8017882:	b480      	push	{r7}
 8017884:	b083      	sub	sp, #12
 8017886:	af00      	add	r7, sp, #0
 8017888:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801788a:	f06f 4360 	mvn.w	r3, #3758096384	; 0xe0000000
      }
 801788e:	4618      	mov	r0, r3
 8017890:	370c      	adds	r7, #12
 8017892:	46bd      	mov	sp, r7
 8017894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017898:	4770      	bx	lr

0801789a <_ZSt12__niter_baseIPPvET_S2_>:
    __niter_base(_Iterator __it)
 801789a:	b480      	push	{r7}
 801789c:	b083      	sub	sp, #12
 801789e:	af00      	add	r7, sp, #0
 80178a0:	6078      	str	r0, [r7, #4]
    { return __it; }
 80178a2:	687b      	ldr	r3, [r7, #4]
 80178a4:	4618      	mov	r0, r3
 80178a6:	370c      	adds	r7, #12
 80178a8:	46bd      	mov	sp, r7
 80178aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80178ae:	4770      	bx	lr

080178b0 <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 80178b0:	b580      	push	{r7, lr}
 80178b2:	b086      	sub	sp, #24
 80178b4:	af00      	add	r7, sp, #0
 80178b6:	60f8      	str	r0, [r7, #12]
 80178b8:	60b9      	str	r1, [r7, #8]
 80178ba:	607a      	str	r2, [r7, #4]
 80178bc:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 80178be:	68ba      	ldr	r2, [r7, #8]
 80178c0:	68fb      	ldr	r3, [r7, #12]
 80178c2:	1ad3      	subs	r3, r2, r3
 80178c4:	109b      	asrs	r3, r3, #2
 80178c6:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 80178c8:	697b      	ldr	r3, [r7, #20]
 80178ca:	2b00      	cmp	r3, #0
 80178cc:	dd06      	ble.n	80178dc <_ZSt14__relocate_a_1IPvS0_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS3_E4typeES5_S5_S5_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 80178ce:	697b      	ldr	r3, [r7, #20]
 80178d0:	009b      	lsls	r3, r3, #2
 80178d2:	461a      	mov	r2, r3
 80178d4:	68f9      	ldr	r1, [r7, #12]
 80178d6:	6878      	ldr	r0, [r7, #4]
 80178d8:	f003 fc8c 	bl	801b1f4 <memmove>
      return __result + __count;
 80178dc:	697b      	ldr	r3, [r7, #20]
 80178de:	009b      	lsls	r3, r3, #2
 80178e0:	687a      	ldr	r2, [r7, #4]
 80178e2:	4413      	add	r3, r2
    }
 80178e4:	4618      	mov	r0, r3
 80178e6:	3718      	adds	r7, #24
 80178e8:	46bd      	mov	sp, r7
 80178ea:	bd80      	pop	{r7, pc}

080178ec <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPPvES4_EET0_T_S7_S6_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 80178ec:	b580      	push	{r7, lr}
 80178ee:	b084      	sub	sp, #16
 80178f0:	af00      	add	r7, sp, #0
 80178f2:	60f8      	str	r0, [r7, #12]
 80178f4:	60b9      	str	r1, [r7, #8]
 80178f6:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 80178f8:	687a      	ldr	r2, [r7, #4]
 80178fa:	68b9      	ldr	r1, [r7, #8]
 80178fc:	68f8      	ldr	r0, [r7, #12]
 80178fe:	f000 f856 	bl	80179ae <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>
 8017902:	4603      	mov	r3, r0
 8017904:	4618      	mov	r0, r3
 8017906:	3710      	adds	r7, #16
 8017908:	46bd      	mov	sp, r7
 801790a:	bd80      	pop	{r7, pc}

0801790c <_ZNSt16allocator_traitsISaIN12_GLOBAL__N_116scratch_buffer_tEEE8max_sizeERKS2_>:
      max_size(const allocator_type& __a) noexcept
 801790c:	b580      	push	{r7, lr}
 801790e:	b082      	sub	sp, #8
 8017910:	af00      	add	r7, sp, #0
 8017912:	6078      	str	r0, [r7, #4]
      { return __a.max_size(); }
 8017914:	6878      	ldr	r0, [r7, #4]
 8017916:	f000 f805 	bl	8017924 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>
 801791a:	4603      	mov	r3, r0
 801791c:	4618      	mov	r0, r3
 801791e:	3708      	adds	r7, #8
 8017920:	46bd      	mov	sp, r7
 8017922:	bd80      	pop	{r7, pc}

08017924 <_ZNK9__gnu_cxx13new_allocatorIN12_GLOBAL__N_116scratch_buffer_tEE8max_sizeEv>:
      max_size() const _GLIBCXX_USE_NOEXCEPT
 8017924:	b480      	push	{r7}
 8017926:	b083      	sub	sp, #12
 8017928:	af00      	add	r7, sp, #0
 801792a:	6078      	str	r0, [r7, #4]
	return size_t(__PTRDIFF_MAX__) / sizeof(_Tp);
 801792c:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
      }
 8017930:	4618      	mov	r0, r3
 8017932:	370c      	adds	r7, #12
 8017934:	46bd      	mov	sp, r7
 8017936:	f85d 7b04 	ldr.w	r7, [sp], #4
 801793a:	4770      	bx	lr

0801793c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __niter_base(_Iterator __it)
 801793c:	b480      	push	{r7}
 801793e:	b083      	sub	sp, #12
 8017940:	af00      	add	r7, sp, #0
 8017942:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017944:	687b      	ldr	r3, [r7, #4]
 8017946:	4618      	mov	r0, r3
 8017948:	370c      	adds	r7, #12
 801794a:	46bd      	mov	sp, r7
 801794c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017950:	4770      	bx	lr

08017952 <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E>:
    __relocate_a_1(_Tp* __first, _Tp* __last,
 8017952:	b580      	push	{r7, lr}
 8017954:	b086      	sub	sp, #24
 8017956:	af00      	add	r7, sp, #0
 8017958:	60f8      	str	r0, [r7, #12]
 801795a:	60b9      	str	r1, [r7, #8]
 801795c:	607a      	str	r2, [r7, #4]
 801795e:	603b      	str	r3, [r7, #0]
      ptrdiff_t __count = __last - __first;
 8017960:	68ba      	ldr	r2, [r7, #8]
 8017962:	68fb      	ldr	r3, [r7, #12]
 8017964:	1ad3      	subs	r3, r2, r3
 8017966:	10db      	asrs	r3, r3, #3
 8017968:	617b      	str	r3, [r7, #20]
      if (__count > 0)
 801796a:	697b      	ldr	r3, [r7, #20]
 801796c:	2b00      	cmp	r3, #0
 801796e:	dd06      	ble.n	801797e <_ZSt14__relocate_a_1IN12_GLOBAL__N_116scratch_buffer_tES1_ENSt9enable_ifIXsrSt24__is_bitwise_relocatableIT_vE5valueEPS4_E4typeES6_S6_S6_RSaIT0_E+0x2c>
	__builtin_memmove(__result, __first, __count * sizeof(_Tp));
 8017970:	697b      	ldr	r3, [r7, #20]
 8017972:	00db      	lsls	r3, r3, #3
 8017974:	461a      	mov	r2, r3
 8017976:	68f9      	ldr	r1, [r7, #12]
 8017978:	6878      	ldr	r0, [r7, #4]
 801797a:	f003 fc3b 	bl	801b1f4 <memmove>
      return __result + __count;
 801797e:	697b      	ldr	r3, [r7, #20]
 8017980:	00db      	lsls	r3, r3, #3
 8017982:	687a      	ldr	r2, [r7, #4]
 8017984:	4413      	add	r3, r2
    }
 8017986:	4618      	mov	r0, r3
 8017988:	3718      	adds	r7, #24
 801798a:	46bd      	mov	sp, r7
 801798c:	bd80      	pop	{r7, pc}

0801798e <_ZNSt20__uninitialized_copyILb1EE13__uninit_copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES5_EET0_T_S8_S7_>:
        __uninit_copy(_InputIterator __first, _InputIterator __last,
 801798e:	b580      	push	{r7, lr}
 8017990:	b084      	sub	sp, #16
 8017992:	af00      	add	r7, sp, #0
 8017994:	60f8      	str	r0, [r7, #12]
 8017996:	60b9      	str	r1, [r7, #8]
 8017998:	607a      	str	r2, [r7, #4]
        { return std::copy(__first, __last, __result); }
 801799a:	687a      	ldr	r2, [r7, #4]
 801799c:	68b9      	ldr	r1, [r7, #8]
 801799e:	68f8      	ldr	r0, [r7, #12]
 80179a0:	f000 f81d 	bl	80179de <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>
 80179a4:	4603      	mov	r3, r0
 80179a6:	4618      	mov	r0, r3
 80179a8:	3710      	adds	r7, #16
 80179aa:	46bd      	mov	sp, r7
 80179ac:	bd80      	pop	{r7, pc}

080179ae <_ZSt4copyISt13move_iteratorIPPvES2_ET0_T_S5_S4_>:
    copy(_II __first, _II __last, _OI __result)
 80179ae:	b590      	push	{r4, r7, lr}
 80179b0:	b085      	sub	sp, #20
 80179b2:	af00      	add	r7, sp, #0
 80179b4:	60f8      	str	r0, [r7, #12]
 80179b6:	60b9      	str	r1, [r7, #8]
 80179b8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80179ba:	68f8      	ldr	r0, [r7, #12]
 80179bc:	f000 f827 	bl	8017a0e <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80179c0:	4604      	mov	r4, r0
 80179c2:	68b8      	ldr	r0, [r7, #8]
 80179c4:	f000 f823 	bl	8017a0e <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80179c8:	4603      	mov	r3, r0
 80179ca:	687a      	ldr	r2, [r7, #4]
 80179cc:	4619      	mov	r1, r3
 80179ce:	4620      	mov	r0, r4
 80179d0:	f000 f82e 	bl	8017a30 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>
 80179d4:	4603      	mov	r3, r0
    }
 80179d6:	4618      	mov	r0, r3
 80179d8:	3714      	adds	r7, #20
 80179da:	46bd      	mov	sp, r7
 80179dc:	bd90      	pop	{r4, r7, pc}

080179de <_ZSt4copyISt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEES3_ET0_T_S6_S5_>:
    copy(_II __first, _II __last, _OI __result)
 80179de:	b590      	push	{r4, r7, lr}
 80179e0:	b085      	sub	sp, #20
 80179e2:	af00      	add	r7, sp, #0
 80179e4:	60f8      	str	r0, [r7, #12]
 80179e6:	60b9      	str	r1, [r7, #8]
 80179e8:	607a      	str	r2, [r7, #4]
	     (std::__miter_base(__first), std::__miter_base(__last), __result);
 80179ea:	68f8      	ldr	r0, [r7, #12]
 80179ec:	f000 f843 	bl	8017a76 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80179f0:	4604      	mov	r4, r0
 80179f2:	68b8      	ldr	r0, [r7, #8]
 80179f4:	f000 f83f 	bl	8017a76 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>
 80179f8:	4603      	mov	r3, r0
 80179fa:	687a      	ldr	r2, [r7, #4]
 80179fc:	4619      	mov	r1, r3
 80179fe:	4620      	mov	r0, r4
 8017a00:	f000 f84a 	bl	8017a98 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017a04:	4603      	mov	r3, r0
    }
 8017a06:	4618      	mov	r0, r3
 8017a08:	3714      	adds	r7, #20
 8017a0a:	46bd      	mov	sp, r7
 8017a0c:	bd90      	pop	{r4, r7, pc}

08017a0e <_ZSt12__miter_baseIPPvEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8017a0e:	b580      	push	{r7, lr}
 8017a10:	b082      	sub	sp, #8
 8017a12:	af00      	add	r7, sp, #0
 8017a14:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8017a16:	1d3b      	adds	r3, r7, #4
 8017a18:	4618      	mov	r0, r3
 8017a1a:	f000 f860 	bl	8017ade <_ZNKSt13move_iteratorIPPvE4baseEv>
 8017a1e:	4603      	mov	r3, r0
 8017a20:	4618      	mov	r0, r3
 8017a22:	f000 f868 	bl	8017af6 <_ZSt12__miter_baseIPPvET_S2_>
 8017a26:	4603      	mov	r3, r0
 8017a28:	4618      	mov	r0, r3
 8017a2a:	3708      	adds	r7, #8
 8017a2c:	46bd      	mov	sp, r7
 8017a2e:	bd80      	pop	{r7, pc}

08017a30 <_ZSt14__copy_move_a2ILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017a30:	b5b0      	push	{r4, r5, r7, lr}
 8017a32:	b084      	sub	sp, #16
 8017a34:	af00      	add	r7, sp, #0
 8017a36:	60f8      	str	r0, [r7, #12]
 8017a38:	60b9      	str	r1, [r7, #8]
 8017a3a:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017a3c:	68f8      	ldr	r0, [r7, #12]
 8017a3e:	f7ff ff2c 	bl	801789a <_ZSt12__niter_baseIPPvET_S2_>
 8017a42:	4604      	mov	r4, r0
 8017a44:	68b8      	ldr	r0, [r7, #8]
 8017a46:	f7ff ff28 	bl	801789a <_ZSt12__niter_baseIPPvET_S2_>
 8017a4a:	4605      	mov	r5, r0
 8017a4c:	687b      	ldr	r3, [r7, #4]
 8017a4e:	4618      	mov	r0, r3
 8017a50:	f7ff ff23 	bl	801789a <_ZSt12__niter_baseIPPvET_S2_>
 8017a54:	4603      	mov	r3, r0
 8017a56:	461a      	mov	r2, r3
 8017a58:	4629      	mov	r1, r5
 8017a5a:	4620      	mov	r0, r4
 8017a5c:	f000 f856 	bl	8017b0c <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>
 8017a60:	4602      	mov	r2, r0
 8017a62:	1d3b      	adds	r3, r7, #4
 8017a64:	4611      	mov	r1, r2
 8017a66:	4618      	mov	r0, r3
 8017a68:	f000 f862 	bl	8017b30 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>
 8017a6c:	4603      	mov	r3, r0
    }
 8017a6e:	4618      	mov	r0, r3
 8017a70:	3710      	adds	r7, #16
 8017a72:	46bd      	mov	sp, r7
 8017a74:	bdb0      	pop	{r4, r5, r7, pc}

08017a76 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEEDTcl12__miter_basecldtfp_4baseEEESt13move_iteratorIT_E>:
    __miter_base(move_iterator<_Iterator> __it)
 8017a76:	b580      	push	{r7, lr}
 8017a78:	b082      	sub	sp, #8
 8017a7a:	af00      	add	r7, sp, #0
 8017a7c:	6078      	str	r0, [r7, #4]
    { return __miter_base(__it.base()); }
 8017a7e:	1d3b      	adds	r3, r7, #4
 8017a80:	4618      	mov	r0, r3
 8017a82:	f000 f861 	bl	8017b48 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>
 8017a86:	4603      	mov	r3, r0
 8017a88:	4618      	mov	r0, r3
 8017a8a:	f000 f869 	bl	8017b60 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017a8e:	4603      	mov	r3, r0
 8017a90:	4618      	mov	r0, r3
 8017a92:	3708      	adds	r7, #8
 8017a94:	46bd      	mov	sp, r7
 8017a96:	bd80      	pop	{r7, pc}

08017a98 <_ZSt14__copy_move_a2ILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a2(_II __first, _II __last, _OI __result)
 8017a98:	b5b0      	push	{r4, r5, r7, lr}
 8017a9a:	b084      	sub	sp, #16
 8017a9c:	af00      	add	r7, sp, #0
 8017a9e:	60f8      	str	r0, [r7, #12]
 8017aa0:	60b9      	str	r1, [r7, #8]
 8017aa2:	607a      	str	r2, [r7, #4]
      return std::__niter_wrap(__result,
 8017aa4:	68f8      	ldr	r0, [r7, #12]
 8017aa6:	f7ff ff49 	bl	801793c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017aaa:	4604      	mov	r4, r0
 8017aac:	68b8      	ldr	r0, [r7, #8]
 8017aae:	f7ff ff45 	bl	801793c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017ab2:	4605      	mov	r5, r0
 8017ab4:	687b      	ldr	r3, [r7, #4]
 8017ab6:	4618      	mov	r0, r3
 8017ab8:	f7ff ff40 	bl	801793c <_ZSt12__niter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>
 8017abc:	4603      	mov	r3, r0
 8017abe:	461a      	mov	r2, r3
 8017ac0:	4629      	mov	r1, r5
 8017ac2:	4620      	mov	r0, r4
 8017ac4:	f000 f857 	bl	8017b76 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>
 8017ac8:	4602      	mov	r2, r0
 8017aca:	1d3b      	adds	r3, r7, #4
 8017acc:	4611      	mov	r1, r2
 8017ace:	4618      	mov	r0, r3
 8017ad0:	f000 f863 	bl	8017b9a <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>
 8017ad4:	4603      	mov	r3, r0
    }
 8017ad6:	4618      	mov	r0, r3
 8017ad8:	3710      	adds	r7, #16
 8017ada:	46bd      	mov	sp, r7
 8017adc:	bdb0      	pop	{r4, r5, r7, pc}

08017ade <_ZNKSt13move_iteratorIPPvE4baseEv>:
      base() const
 8017ade:	b480      	push	{r7}
 8017ae0:	b083      	sub	sp, #12
 8017ae2:	af00      	add	r7, sp, #0
 8017ae4:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017ae6:	687b      	ldr	r3, [r7, #4]
 8017ae8:	681b      	ldr	r3, [r3, #0]
 8017aea:	4618      	mov	r0, r3
 8017aec:	370c      	adds	r7, #12
 8017aee:	46bd      	mov	sp, r7
 8017af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017af4:	4770      	bx	lr

08017af6 <_ZSt12__miter_baseIPPvET_S2_>:
    __miter_base(_Iterator __it)
 8017af6:	b480      	push	{r7}
 8017af8:	b083      	sub	sp, #12
 8017afa:	af00      	add	r7, sp, #0
 8017afc:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017afe:	687b      	ldr	r3, [r7, #4]
 8017b00:	4618      	mov	r0, r3
 8017b02:	370c      	adds	r7, #12
 8017b04:	46bd      	mov	sp, r7
 8017b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b0a:	4770      	bx	lr

08017b0c <_ZSt13__copy_move_aILb1EPPvS1_ET1_T0_S3_S2_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017b0c:	b580      	push	{r7, lr}
 8017b0e:	b086      	sub	sp, #24
 8017b10:	af00      	add	r7, sp, #0
 8017b12:	60f8      	str	r0, [r7, #12]
 8017b14:	60b9      	str	r1, [r7, #8]
 8017b16:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8017b18:	2301      	movs	r3, #1
 8017b1a:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8017b1c:	687a      	ldr	r2, [r7, #4]
 8017b1e:	68b9      	ldr	r1, [r7, #8]
 8017b20:	68f8      	ldr	r0, [r7, #12]
 8017b22:	f000 f846 	bl	8017bb2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>
 8017b26:	4603      	mov	r3, r0
    }
 8017b28:	4618      	mov	r0, r3
 8017b2a:	3718      	adds	r7, #24
 8017b2c:	46bd      	mov	sp, r7
 8017b2e:	bd80      	pop	{r7, pc}

08017b30 <_ZSt12__niter_wrapIPPvET_RKS2_S2_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8017b30:	b480      	push	{r7}
 8017b32:	b083      	sub	sp, #12
 8017b34:	af00      	add	r7, sp, #0
 8017b36:	6078      	str	r0, [r7, #4]
 8017b38:	6039      	str	r1, [r7, #0]
    { return __res; }
 8017b3a:	683b      	ldr	r3, [r7, #0]
 8017b3c:	4618      	mov	r0, r3
 8017b3e:	370c      	adds	r7, #12
 8017b40:	46bd      	mov	sp, r7
 8017b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b46:	4770      	bx	lr

08017b48 <_ZNKSt13move_iteratorIPN12_GLOBAL__N_116scratch_buffer_tEE4baseEv>:
      base() const
 8017b48:	b480      	push	{r7}
 8017b4a:	b083      	sub	sp, #12
 8017b4c:	af00      	add	r7, sp, #0
 8017b4e:	6078      	str	r0, [r7, #4]
      { return _M_current; }
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	4618      	mov	r0, r3
 8017b56:	370c      	adds	r7, #12
 8017b58:	46bd      	mov	sp, r7
 8017b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b5e:	4770      	bx	lr

08017b60 <_ZSt12__miter_baseIPN12_GLOBAL__N_116scratch_buffer_tEET_S3_>:
    __miter_base(_Iterator __it)
 8017b60:	b480      	push	{r7}
 8017b62:	b083      	sub	sp, #12
 8017b64:	af00      	add	r7, sp, #0
 8017b66:	6078      	str	r0, [r7, #4]
    { return __it; }
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	4618      	mov	r0, r3
 8017b6c:	370c      	adds	r7, #12
 8017b6e:	46bd      	mov	sp, r7
 8017b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017b74:	4770      	bx	lr

08017b76 <_ZSt13__copy_move_aILb1EPN12_GLOBAL__N_116scratch_buffer_tES2_ET1_T0_S4_S3_>:
    __copy_move_a(_II __first, _II __last, _OI __result)
 8017b76:	b580      	push	{r7, lr}
 8017b78:	b086      	sub	sp, #24
 8017b7a:	af00      	add	r7, sp, #0
 8017b7c:	60f8      	str	r0, [r7, #12]
 8017b7e:	60b9      	str	r1, [r7, #8]
 8017b80:	607a      	str	r2, [r7, #4]
      const bool __simple = (__is_trivially_copyable(_ValueTypeI)
 8017b82:	2301      	movs	r3, #1
 8017b84:	75fb      	strb	r3, [r7, #23]
			      _Category>::__copy_m(__first, __last, __result);
 8017b86:	687a      	ldr	r2, [r7, #4]
 8017b88:	68b9      	ldr	r1, [r7, #8]
 8017b8a:	68f8      	ldr	r0, [r7, #12]
 8017b8c:	f000 f82e 	bl	8017bec <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>
 8017b90:	4603      	mov	r3, r0
    }
 8017b92:	4618      	mov	r0, r3
 8017b94:	3718      	adds	r7, #24
 8017b96:	46bd      	mov	sp, r7
 8017b98:	bd80      	pop	{r7, pc}

08017b9a <_ZSt12__niter_wrapIPN12_GLOBAL__N_116scratch_buffer_tEET_RKS3_S3_>:
    __niter_wrap(const _Iterator&, _Iterator __res)
 8017b9a:	b480      	push	{r7}
 8017b9c:	b083      	sub	sp, #12
 8017b9e:	af00      	add	r7, sp, #0
 8017ba0:	6078      	str	r0, [r7, #4]
 8017ba2:	6039      	str	r1, [r7, #0]
    { return __res; }
 8017ba4:	683b      	ldr	r3, [r7, #0]
 8017ba6:	4618      	mov	r0, r3
 8017ba8:	370c      	adds	r7, #12
 8017baa:	46bd      	mov	sp, r7
 8017bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017bb0:	4770      	bx	lr

08017bb2 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8017bb2:	b580      	push	{r7, lr}
 8017bb4:	b086      	sub	sp, #24
 8017bb6:	af00      	add	r7, sp, #0
 8017bb8:	60f8      	str	r0, [r7, #12]
 8017bba:	60b9      	str	r1, [r7, #8]
 8017bbc:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8017bbe:	68ba      	ldr	r2, [r7, #8]
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	1ad3      	subs	r3, r2, r3
 8017bc4:	109b      	asrs	r3, r3, #2
 8017bc6:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8017bc8:	697b      	ldr	r3, [r7, #20]
 8017bca:	2b00      	cmp	r3, #0
 8017bcc:	d006      	beq.n	8017bdc <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIPvEEPT_PKS4_S7_S5_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017bce:	697b      	ldr	r3, [r7, #20]
 8017bd0:	009b      	lsls	r3, r3, #2
 8017bd2:	461a      	mov	r2, r3
 8017bd4:	68f9      	ldr	r1, [r7, #12]
 8017bd6:	6878      	ldr	r0, [r7, #4]
 8017bd8:	f003 fb0c 	bl	801b1f4 <memmove>
	  return __result + _Num;
 8017bdc:	697b      	ldr	r3, [r7, #20]
 8017bde:	009b      	lsls	r3, r3, #2
 8017be0:	687a      	ldr	r2, [r7, #4]
 8017be2:	4413      	add	r3, r2
	}
 8017be4:	4618      	mov	r0, r3
 8017be6:	3718      	adds	r7, #24
 8017be8:	46bd      	mov	sp, r7
 8017bea:	bd80      	pop	{r7, pc}

08017bec <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_>:
	__copy_m(const _Tp* __first, const _Tp* __last, _Tp* __result)
 8017bec:	b580      	push	{r7, lr}
 8017bee:	b086      	sub	sp, #24
 8017bf0:	af00      	add	r7, sp, #0
 8017bf2:	60f8      	str	r0, [r7, #12]
 8017bf4:	60b9      	str	r1, [r7, #8]
 8017bf6:	607a      	str	r2, [r7, #4]
	  const ptrdiff_t _Num = __last - __first;
 8017bf8:	68ba      	ldr	r2, [r7, #8]
 8017bfa:	68fb      	ldr	r3, [r7, #12]
 8017bfc:	1ad3      	subs	r3, r2, r3
 8017bfe:	10db      	asrs	r3, r3, #3
 8017c00:	617b      	str	r3, [r7, #20]
	  if (_Num)
 8017c02:	697b      	ldr	r3, [r7, #20]
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d006      	beq.n	8017c16 <_ZNSt11__copy_moveILb1ELb1ESt26random_access_iterator_tagE8__copy_mIN12_GLOBAL__N_116scratch_buffer_tEEEPT_PKS5_S8_S6_+0x2a>
	    __builtin_memmove(__result, __first, sizeof(_Tp) * _Num);
 8017c08:	697b      	ldr	r3, [r7, #20]
 8017c0a:	00db      	lsls	r3, r3, #3
 8017c0c:	461a      	mov	r2, r3
 8017c0e:	68f9      	ldr	r1, [r7, #12]
 8017c10:	6878      	ldr	r0, [r7, #4]
 8017c12:	f003 faef 	bl	801b1f4 <memmove>
	  return __result + _Num;
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	00db      	lsls	r3, r3, #3
 8017c1a:	687a      	ldr	r2, [r7, #4]
 8017c1c:	4413      	add	r3, r2
	}
 8017c1e:	4618      	mov	r0, r3
 8017c20:	3718      	adds	r7, #24
 8017c22:	46bd      	mov	sp, r7
 8017c24:	bd80      	pop	{r7, pc}
	...

08017c28 <_Z41__static_initialization_and_destruction_0ii>:
 8017c28:	b580      	push	{r7, lr}
 8017c2a:	b082      	sub	sp, #8
 8017c2c:	af00      	add	r7, sp, #0
 8017c2e:	6078      	str	r0, [r7, #4]
 8017c30:	6039      	str	r1, [r7, #0]
 8017c32:	687b      	ldr	r3, [r7, #4]
 8017c34:	2b01      	cmp	r3, #1
 8017c36:	f040 808e 	bne.w	8017d56 <_Z41__static_initialization_and_destruction_0ii+0x12e>
 8017c3a:	683b      	ldr	r3, [r7, #0]
 8017c3c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017c40:	4293      	cmp	r3, r2
 8017c42:	f040 8088 	bne.w	8017d56 <_Z41__static_initialization_and_destruction_0ii+0x12e>
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
 8017c46:	4b4d      	ldr	r3, [pc, #308]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c48:	681b      	ldr	r3, [r3, #0]
 8017c4a:	f503 7324 	add.w	r3, r3, #656	; 0x290
};const NodeInfo_t nodeData[] = {
 8017c4e:	4a4c      	ldr	r2, [pc, #304]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c50:	6053      	str	r3, [r2, #4]
 8017c52:	4b4a      	ldr	r3, [pc, #296]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c54:	681b      	ldr	r3, [r3, #0]
 8017c56:	4a4a      	ldr	r2, [pc, #296]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c58:	f8c2 31fc 	str.w	r3, [r2, #508]	; 0x1fc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension22, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
 8017c5c:	4b47      	ldr	r3, [pc, #284]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c5e:	681b      	ldr	r3, [r3, #0]
 8017c60:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 8017c64:	4a46      	ldr	r2, [pc, #280]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c66:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
 8017c6a:	4b44      	ldr	r3, [pc, #272]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c6c:	681b      	ldr	r3, [r3, #0]
 8017c6e:	4a44      	ldr	r2, [pc, #272]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c70:	f8c2 322c 	str.w	r3, [r2, #556]	; 0x22c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension24, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
 8017c74:	4b41      	ldr	r3, [pc, #260]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c76:	681b      	ldr	r3, [r3, #0]
 8017c78:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 8017c7c:	4a40      	ldr	r2, [pc, #256]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c7e:	f8c2 3244 	str.w	r3, [r2, #580]	; 0x244
 8017c82:	4b3e      	ldr	r3, [pc, #248]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c84:	681b      	ldr	r3, [r3, #0]
 8017c86:	4a3e      	ldr	r2, [pc, #248]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c88:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension26, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
 8017c8c:	4b3b      	ldr	r3, [pc, #236]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c8e:	681b      	ldr	r3, [r3, #0]
 8017c90:	f503 7348 	add.w	r3, r3, #800	; 0x320
};const NodeInfo_t nodeData[] = {
 8017c94:	4a3a      	ldr	r2, [pc, #232]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017c96:	f8c2 3274 	str.w	r3, [r2, #628]	; 0x274
 8017c9a:	4b38      	ldr	r3, [pc, #224]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017c9c:	681b      	ldr	r3, [r3, #0]
 8017c9e:	4a38      	ldr	r2, [pc, #224]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017ca0:	f8c2 328c 	str.w	r3, [r2, #652]	; 0x28c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension28, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
 8017ca4:	4b35      	ldr	r3, [pc, #212]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017ca6:	681b      	ldr	r3, [r3, #0]
 8017ca8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8017cac:	4a34      	ldr	r2, [pc, #208]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cae:	f8c2 32a4 	str.w	r3, [r2, #676]	; 0x2a4
 8017cb2:	4b32      	ldr	r3, [pc, #200]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	4a32      	ldr	r2, [pc, #200]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cb8:	f8c2 32bc 	str.w	r3, [r2, #700]	; 0x2bc
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension30, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
 8017cbc:	4b2f      	ldr	r3, [pc, #188]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cbe:	681b      	ldr	r3, [r3, #0]
 8017cc0:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8017cc4:	4a2e      	ldr	r2, [pc, #184]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cc6:	f8c2 32d4 	str.w	r3, [r2, #724]	; 0x2d4
 8017cca:	4b2c      	ldr	r3, [pc, #176]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017ccc:	681b      	ldr	r3, [r3, #0]
 8017cce:	4a2c      	ldr	r2, [pc, #176]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cd0:	f8c2 32ec 	str.w	r3, [r2, #748]	; 0x2ec
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension32, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
 8017cd4:	4b29      	ldr	r3, [pc, #164]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cd6:	681b      	ldr	r3, [r3, #0]
 8017cd8:	f503 73c8 	add.w	r3, r3, #400	; 0x190
};const NodeInfo_t nodeData[] = {
 8017cdc:	4a28      	ldr	r2, [pc, #160]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cde:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
 8017ce2:	4b26      	ldr	r3, [pc, #152]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017ce4:	681b      	ldr	r3, [r3, #0]
 8017ce6:	4a26      	ldr	r2, [pc, #152]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017ce8:	f8c2 331c 	str.w	r3, [r2, #796]	; 0x31c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension34, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
 8017cec:	4b23      	ldr	r3, [pc, #140]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cee:	681b      	ldr	r3, [r3, #0]
 8017cf0:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
};const NodeInfo_t nodeData[] = {
 8017cf4:	4a22      	ldr	r2, [pc, #136]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017cf6:	f8c2 3334 	str.w	r3, [r2, #820]	; 0x334
 8017cfa:	4b20      	ldr	r3, [pc, #128]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	4a20      	ldr	r2, [pc, #128]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d00:	f8c2 334c 	str.w	r3, [r2, #844]	; 0x34c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension36, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
 8017d04:	4b1d      	ldr	r3, [pc, #116]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
};const NodeInfo_t nodeData[] = {
 8017d0c:	4a1c      	ldr	r2, [pc, #112]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d0e:	f8c2 3364 	str.w	r3, [r2, #868]	; 0x364
 8017d12:	4b1a      	ldr	r3, [pc, #104]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d14:	681b      	ldr	r3, [r3, #0]
 8017d16:	4a1a      	ldr	r2, [pc, #104]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d18:	f8c2 337c 	str.w	r3, [r2, #892]	; 0x37c
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension38, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
 8017d1c:	4b17      	ldr	r3, [pc, #92]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d1e:	681b      	ldr	r3, [r3, #0]
 8017d20:	f503 73d0 	add.w	r3, r3, #416	; 0x1a0
};const NodeInfo_t nodeData[] = {
 8017d24:	4a16      	ldr	r2, [pc, #88]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d26:	f8c2 3394 	str.w	r3, [r2, #916]	; 0x394
 8017d2a:	4b14      	ldr	r3, [pc, #80]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	4a14      	ldr	r2, [pc, #80]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d30:	f8c2 33ac 	str.w	r3, [r2, #940]	; 0x3ac
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension40, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
 8017d34:	4b11      	ldr	r3, [pc, #68]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d36:	681b      	ldr	r3, [r3, #0]
 8017d38:	33e0      	adds	r3, #224	; 0xe0
};const NodeInfo_t nodeData[] = {
 8017d3a:	4a11      	ldr	r2, [pc, #68]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d3c:	f8c2 33c4 	str.w	r3, [r2, #964]	; 0x3c4
 8017d40:	4b0e      	ldr	r3, [pc, #56]	; (8017d7c <_Z41__static_initialization_and_destruction_0ii+0x154>)
 8017d42:	681b      	ldr	r3, [r3, #0]
 8017d44:	4a0e      	ldr	r2, [pc, #56]	; (8017d80 <_Z41__static_initialization_and_destruction_0ii+0x158>)
 8017d46:	f8c2 33dc 	str.w	r3, [r2, #988]	; 0x3dc
static std::vector<void*> overflow_buffers;
 8017d4a:	480e      	ldr	r0, [pc, #56]	; (8017d84 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8017d4c:	f7fe fa31 	bl	80161b2 <_ZNSt6vectorIPvSaIS0_EEC1Ev>
static std::vector<scratch_buffer_t> scratch_buffers;
 8017d50:	480d      	ldr	r0, [pc, #52]	; (8017d88 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8017d52:	f7fe fa94 	bl	801627e <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EEC1Ev>
 8017d56:	687b      	ldr	r3, [r7, #4]
 8017d58:	2b00      	cmp	r3, #0
 8017d5a:	d10a      	bne.n	8017d72 <_Z41__static_initialization_and_destruction_0ii+0x14a>
 8017d5c:	683b      	ldr	r3, [r7, #0]
 8017d5e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017d62:	4293      	cmp	r3, r2
 8017d64:	d105      	bne.n	8017d72 <_Z41__static_initialization_and_destruction_0ii+0x14a>
 8017d66:	4808      	ldr	r0, [pc, #32]	; (8017d88 <_Z41__static_initialization_and_destruction_0ii+0x160>)
 8017d68:	f000 f810 	bl	8017d8c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>
static std::vector<void*> overflow_buffers;
 8017d6c:	4805      	ldr	r0, [pc, #20]	; (8017d84 <_Z41__static_initialization_and_destruction_0ii+0x15c>)
 8017d6e:	f000 f828 	bl	8017dc2 <_ZNSt6vectorIPvSaIS0_EED1Ev>
}
 8017d72:	bf00      	nop
 8017d74:	3708      	adds	r7, #8
 8017d76:	46bd      	mov	sp, r7
 8017d78:	bd80      	pop	{r7, pc}
 8017d7a:	bf00      	nop
 8017d7c:	20006b78 	.word	0x20006b78
 8017d80:	20000124 	.word	0x20000124
 8017d84:	20007a08 	.word	0x20007a08
 8017d88:	20007a14 	.word	0x20007a14

08017d8c <_ZNSt6vectorIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8017d8c:	b5b0      	push	{r4, r5, r7, lr}
 8017d8e:	b082      	sub	sp, #8
 8017d90:	af00      	add	r7, sp, #0
 8017d92:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	681c      	ldr	r4, [r3, #0]
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8017d9c:	687b      	ldr	r3, [r7, #4]
 8017d9e:	4618      	mov	r0, r3
 8017da0:	f7ff fb41 	bl	8017426 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EE19_M_get_Tp_allocatorEv>
 8017da4:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017da6:	461a      	mov	r2, r3
 8017da8:	4629      	mov	r1, r5
 8017daa:	4620      	mov	r0, r4
 8017dac:	f7ff fb5f 	bl	801746e <_ZSt8_DestroyIPN12_GLOBAL__N_116scratch_buffer_tES1_EvT_S3_RSaIT0_E>
      }
 8017db0:	687b      	ldr	r3, [r7, #4]
 8017db2:	4618      	mov	r0, r3
 8017db4:	f7fe fde8 	bl	8016988 <_ZNSt12_Vector_baseIN12_GLOBAL__N_116scratch_buffer_tESaIS1_EED2Ev>
 8017db8:	687b      	ldr	r3, [r7, #4]
 8017dba:	4618      	mov	r0, r3
 8017dbc:	3708      	adds	r7, #8
 8017dbe:	46bd      	mov	sp, r7
 8017dc0:	bdb0      	pop	{r4, r5, r7, pc}

08017dc2 <_ZNSt6vectorIPvSaIS0_EED1Ev>:
      ~vector() _GLIBCXX_NOEXCEPT
 8017dc2:	b5b0      	push	{r4, r5, r7, lr}
 8017dc4:	b082      	sub	sp, #8
 8017dc6:	af00      	add	r7, sp, #0
 8017dc8:	6078      	str	r0, [r7, #4]
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017dca:	687b      	ldr	r3, [r7, #4]
 8017dcc:	681c      	ldr	r4, [r3, #0]
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	685d      	ldr	r5, [r3, #4]
		      _M_get_Tp_allocator());
 8017dd2:	687b      	ldr	r3, [r7, #4]
 8017dd4:	4618      	mov	r0, r3
 8017dd6:	f7ff fa07 	bl	80171e8 <_ZNSt12_Vector_baseIPvSaIS0_EE19_M_get_Tp_allocatorEv>
 8017dda:	4603      	mov	r3, r0
	std::_Destroy(this->_M_impl._M_start, this->_M_impl._M_finish,
 8017ddc:	461a      	mov	r2, r3
 8017dde:	4629      	mov	r1, r5
 8017de0:	4620      	mov	r0, r4
 8017de2:	f7ff fa25 	bl	8017230 <_ZSt8_DestroyIPPvS0_EvT_S2_RSaIT0_E>
      }
 8017de6:	687b      	ldr	r3, [r7, #4]
 8017de8:	4618      	mov	r0, r3
 8017dea:	f7fe fd73 	bl	80168d4 <_ZNSt12_Vector_baseIPvSaIS0_EED1Ev>
 8017dee:	687b      	ldr	r3, [r7, #4]
 8017df0:	4618      	mov	r0, r3
 8017df2:	3708      	adds	r7, #8
 8017df4:	46bd      	mov	sp, r7
 8017df6:	bdb0      	pop	{r4, r5, r7, pc}

08017df8 <_GLOBAL__sub_I__Z18trained_model_initPFPvjjE>:
 8017df8:	b580      	push	{r7, lr}
 8017dfa:	af00      	add	r7, sp, #0
 8017dfc:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017e00:	2001      	movs	r0, #1
 8017e02:	f7ff ff11 	bl	8017c28 <_Z41__static_initialization_and_destruction_0ii>
 8017e06:	bd80      	pop	{r7, pc}

08017e08 <_GLOBAL__sub_D__Z18trained_model_initPFPvjjE>:
 8017e08:	b580      	push	{r7, lr}
 8017e0a:	af00      	add	r7, sp, #0
 8017e0c:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8017e10:	2000      	movs	r0, #0
 8017e12:	f7ff ff09 	bl	8017c28 <_Z41__static_initialization_and_destruction_0ii>
 8017e16:	bd80      	pop	{r7, pc}

08017e18 <_ZdlPv>:
 8017e18:	f003 b9c8 	b.w	801b1ac <free>

08017e1c <_ZdlPvj>:
 8017e1c:	f7ff bffc 	b.w	8017e18 <_ZdlPv>

08017e20 <_ZdaPv>:
 8017e20:	f7ff bffa 	b.w	8017e18 <_ZdlPv>

08017e24 <__cxa_guard_acquire>:
 8017e24:	6803      	ldr	r3, [r0, #0]
 8017e26:	07db      	lsls	r3, r3, #31
 8017e28:	d406      	bmi.n	8017e38 <__cxa_guard_acquire+0x14>
 8017e2a:	7843      	ldrb	r3, [r0, #1]
 8017e2c:	b103      	cbz	r3, 8017e30 <__cxa_guard_acquire+0xc>
 8017e2e:	deff      	udf	#255	; 0xff
 8017e30:	2301      	movs	r3, #1
 8017e32:	7043      	strb	r3, [r0, #1]
 8017e34:	4618      	mov	r0, r3
 8017e36:	4770      	bx	lr
 8017e38:	2000      	movs	r0, #0
 8017e3a:	4770      	bx	lr

08017e3c <__cxa_guard_release>:
 8017e3c:	2301      	movs	r3, #1
 8017e3e:	6003      	str	r3, [r0, #0]
 8017e40:	4770      	bx	lr

08017e42 <_Znwj>:
 8017e42:	2801      	cmp	r0, #1
 8017e44:	bf38      	it	cc
 8017e46:	2001      	movcc	r0, #1
 8017e48:	b510      	push	{r4, lr}
 8017e4a:	4604      	mov	r4, r0
 8017e4c:	4620      	mov	r0, r4
 8017e4e:	f003 f9a5 	bl	801b19c <malloc>
 8017e52:	b930      	cbnz	r0, 8017e62 <_Znwj+0x20>
 8017e54:	f000 f8c2 	bl	8017fdc <_ZSt15get_new_handlerv>
 8017e58:	b908      	cbnz	r0, 8017e5e <_Znwj+0x1c>
 8017e5a:	f003 f8a9 	bl	801afb0 <abort>
 8017e5e:	4780      	blx	r0
 8017e60:	e7f4      	b.n	8017e4c <_Znwj+0xa>
 8017e62:	bd10      	pop	{r4, pc}

08017e64 <_Znaj>:
 8017e64:	f7ff bfed 	b.w	8017e42 <_Znwj>

08017e68 <_ZSt17__throw_bad_allocv>:
 8017e68:	b508      	push	{r3, lr}
 8017e6a:	f003 f8a1 	bl	801afb0 <abort>

08017e6e <_ZSt19__throw_logic_errorPKc>:
 8017e6e:	b508      	push	{r3, lr}
 8017e70:	f003 f89e 	bl	801afb0 <abort>

08017e74 <_ZSt20__throw_length_errorPKc>:
 8017e74:	b508      	push	{r3, lr}
 8017e76:	f003 f89b 	bl	801afb0 <abort>

08017e7a <_ZSt24__throw_out_of_range_fmtPKcz>:
 8017e7a:	b40f      	push	{r0, r1, r2, r3}
 8017e7c:	b580      	push	{r7, lr}
 8017e7e:	b084      	sub	sp, #16
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	f107 0418 	add.w	r4, r7, #24
 8017e86:	f854 2b04 	ldr.w	r2, [r4], #4
 8017e8a:	607a      	str	r2, [r7, #4]
 8017e8c:	4610      	mov	r0, r2
 8017e8e:	f7e8 f9bf 	bl	8000210 <strlen>
 8017e92:	f200 2307 	addw	r3, r0, #519	; 0x207
 8017e96:	f023 0307 	bic.w	r3, r3, #7
 8017e9a:	ebad 0d03 	sub.w	sp, sp, r3
 8017e9e:	f500 7100 	add.w	r1, r0, #512	; 0x200
 8017ea2:	687a      	ldr	r2, [r7, #4]
 8017ea4:	60fc      	str	r4, [r7, #12]
 8017ea6:	4623      	mov	r3, r4
 8017ea8:	4668      	mov	r0, sp
 8017eaa:	f000 f855 	bl	8017f58 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>
 8017eae:	f003 f87f 	bl	801afb0 <abort>
	...

08017eb4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>:
 8017eb4:	b580      	push	{r7, lr}
 8017eb6:	b09c      	sub	sp, #112	; 0x70
 8017eb8:	4606      	mov	r6, r0
 8017eba:	af00      	add	r7, sp, #0
 8017ebc:	460c      	mov	r4, r1
 8017ebe:	1ba4      	subs	r4, r4, r6
 8017ec0:	490e      	ldr	r1, [pc, #56]	; (8017efc <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_+0x48>)
 8017ec2:	2269      	movs	r2, #105	; 0x69
 8017ec4:	1d38      	adds	r0, r7, #4
 8017ec6:	f003 f987 	bl	801b1d8 <memcpy>
 8017eca:	f104 0370 	add.w	r3, r4, #112	; 0x70
 8017ece:	f023 0307 	bic.w	r3, r3, #7
 8017ed2:	ebad 0d03 	sub.w	sp, sp, r3
 8017ed6:	466d      	mov	r5, sp
 8017ed8:	2268      	movs	r2, #104	; 0x68
 8017eda:	1d39      	adds	r1, r7, #4
 8017edc:	4628      	mov	r0, r5
 8017ede:	f003 f97b 	bl	801b1d8 <memcpy>
 8017ee2:	4622      	mov	r2, r4
 8017ee4:	4631      	mov	r1, r6
 8017ee6:	f105 0068 	add.w	r0, r5, #104	; 0x68
 8017eea:	442c      	add	r4, r5
 8017eec:	f003 f974 	bl	801b1d8 <memcpy>
 8017ef0:	2300      	movs	r3, #0
 8017ef2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8017ef6:	4628      	mov	r0, r5
 8017ef8:	f7ff ffb9 	bl	8017e6e <_ZSt19__throw_logic_errorPKc>
 8017efc:	0803e8a0 	.word	0x0803e8a0

08017f00 <_ZN9__gnu_cxx15__concat_size_tEPcjj>:
 8017f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f04:	af00      	add	r7, sp, #0
 8017f06:	b084      	sub	sp, #16
 8017f08:	466d      	mov	r5, sp
 8017f0a:	f105 040c 	add.w	r4, r5, #12
 8017f0e:	f8df 8044 	ldr.w	r8, [pc, #68]	; 8017f54 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x54>
 8017f12:	4623      	mov	r3, r4
 8017f14:	f04f 0c0a 	mov.w	ip, #10
 8017f18:	fbb2 f6fc 	udiv	r6, r2, ip
 8017f1c:	fb0c 2e16 	mls	lr, ip, r6, r2
 8017f20:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8017f24:	f803 ed01 	strb.w	lr, [r3, #-1]!
 8017f28:	4696      	mov	lr, r2
 8017f2a:	f1be 0f09 	cmp.w	lr, #9
 8017f2e:	4632      	mov	r2, r6
 8017f30:	d8f2      	bhi.n	8017f18 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x18>
 8017f32:	1ae4      	subs	r4, r4, r3
 8017f34:	428c      	cmp	r4, r1
 8017f36:	d809      	bhi.n	8017f4c <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x4c>
 8017f38:	f1c4 010c 	rsb	r1, r4, #12
 8017f3c:	4622      	mov	r2, r4
 8017f3e:	4429      	add	r1, r5
 8017f40:	f003 f94a 	bl	801b1d8 <memcpy>
 8017f44:	4620      	mov	r0, r4
 8017f46:	46bd      	mov	sp, r7
 8017f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017f4c:	f04f 34ff 	mov.w	r4, #4294967295
 8017f50:	e7f8      	b.n	8017f44 <_ZN9__gnu_cxx15__concat_size_tEPcjj+0x44>
 8017f52:	bf00      	nop
 8017f54:	0803e909 	.word	0x0803e909

08017f58 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list>:
 8017f58:	3901      	subs	r1, #1
 8017f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017f5e:	4607      	mov	r7, r0
 8017f60:	4615      	mov	r5, r2
 8017f62:	eb00 0801 	add.w	r8, r0, r1
 8017f66:	4604      	mov	r4, r0
 8017f68:	782a      	ldrb	r2, [r5, #0]
 8017f6a:	b362      	cbz	r2, 8017fc6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x6e>
 8017f6c:	4544      	cmp	r4, r8
 8017f6e:	d22e      	bcs.n	8017fce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8017f70:	2a25      	cmp	r2, #37	; 0x25
 8017f72:	d107      	bne.n	8017f84 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8017f74:	786a      	ldrb	r2, [r5, #1]
 8017f76:	2a73      	cmp	r2, #115	; 0x73
 8017f78:	d009      	beq.n	8017f8e <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x36>
 8017f7a:	2a7a      	cmp	r2, #122	; 0x7a
 8017f7c:	d012      	beq.n	8017fa4 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x4c>
 8017f7e:	2a25      	cmp	r2, #37	; 0x25
 8017f80:	d100      	bne.n	8017f84 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8017f82:	3501      	adds	r5, #1
 8017f84:	f815 2b01 	ldrb.w	r2, [r5], #1
 8017f88:	f804 2b01 	strb.w	r2, [r4], #1
 8017f8c:	e7ec      	b.n	8017f68 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8017f8e:	f853 2b04 	ldr.w	r2, [r3], #4
 8017f92:	3a01      	subs	r2, #1
 8017f94:	f812 1f01 	ldrb.w	r1, [r2, #1]!
 8017f98:	b1e9      	cbz	r1, 8017fd6 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x7e>
 8017f9a:	4544      	cmp	r4, r8
 8017f9c:	d017      	beq.n	8017fce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8017f9e:	f804 1b01 	strb.w	r1, [r4], #1
 8017fa2:	e7f7      	b.n	8017f94 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x3c>
 8017fa4:	78aa      	ldrb	r2, [r5, #2]
 8017fa6:	2a75      	cmp	r2, #117	; 0x75
 8017fa8:	d1ec      	bne.n	8017f84 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x2c>
 8017faa:	461e      	mov	r6, r3
 8017fac:	eba8 0104 	sub.w	r1, r8, r4
 8017fb0:	f856 2b04 	ldr.w	r2, [r6], #4
 8017fb4:	4620      	mov	r0, r4
 8017fb6:	f7ff ffa3 	bl	8017f00 <_ZN9__gnu_cxx15__concat_size_tEPcjj>
 8017fba:	2800      	cmp	r0, #0
 8017fbc:	dd07      	ble.n	8017fce <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x76>
 8017fbe:	4404      	add	r4, r0
 8017fc0:	3503      	adds	r5, #3
 8017fc2:	4633      	mov	r3, r6
 8017fc4:	e7d0      	b.n	8017f68 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
 8017fc6:	7022      	strb	r2, [r4, #0]
 8017fc8:	1be0      	subs	r0, r4, r7
 8017fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017fce:	4621      	mov	r1, r4
 8017fd0:	4638      	mov	r0, r7
 8017fd2:	f7ff ff6f 	bl	8017eb4 <_ZN9__gnu_cxx26__throw_insufficient_spaceEPKcS1_>
 8017fd6:	3502      	adds	r5, #2
 8017fd8:	e7c6      	b.n	8017f68 <_ZN9__gnu_cxx15__snprintf_liteEPcjPKcSt9__va_list+0x10>
	...

08017fdc <_ZSt15get_new_handlerv>:
 8017fdc:	4b02      	ldr	r3, [pc, #8]	; (8017fe8 <_ZSt15get_new_handlerv+0xc>)
 8017fde:	6818      	ldr	r0, [r3, #0]
 8017fe0:	f3bf 8f5b 	dmb	ish
 8017fe4:	4770      	bx	lr
 8017fe6:	bf00      	nop
 8017fe8:	20007a20 	.word	0x20007a20
 8017fec:	00000000 	.word	0x00000000

08017ff0 <cos>:
 8017ff0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017ff2:	ec53 2b10 	vmov	r2, r3, d0
 8017ff6:	4824      	ldr	r0, [pc, #144]	; (8018088 <cos+0x98>)
 8017ff8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8017ffc:	4281      	cmp	r1, r0
 8017ffe:	dc06      	bgt.n	801800e <cos+0x1e>
 8018000:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8018080 <cos+0x90>
 8018004:	f001 fe28 	bl	8019c58 <__kernel_cos>
 8018008:	ec51 0b10 	vmov	r0, r1, d0
 801800c:	e007      	b.n	801801e <cos+0x2e>
 801800e:	481f      	ldr	r0, [pc, #124]	; (801808c <cos+0x9c>)
 8018010:	4281      	cmp	r1, r0
 8018012:	dd09      	ble.n	8018028 <cos+0x38>
 8018014:	ee10 0a10 	vmov	r0, s0
 8018018:	4619      	mov	r1, r3
 801801a:	f7e8 f955 	bl	80002c8 <__aeabi_dsub>
 801801e:	ec41 0b10 	vmov	d0, r0, r1
 8018022:	b005      	add	sp, #20
 8018024:	f85d fb04 	ldr.w	pc, [sp], #4
 8018028:	4668      	mov	r0, sp
 801802a:	f001 f941 	bl	80192b0 <__ieee754_rem_pio2>
 801802e:	f000 0003 	and.w	r0, r0, #3
 8018032:	2801      	cmp	r0, #1
 8018034:	d007      	beq.n	8018046 <cos+0x56>
 8018036:	2802      	cmp	r0, #2
 8018038:	d012      	beq.n	8018060 <cos+0x70>
 801803a:	b9c0      	cbnz	r0, 801806e <cos+0x7e>
 801803c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018040:	ed9d 0b00 	vldr	d0, [sp]
 8018044:	e7de      	b.n	8018004 <cos+0x14>
 8018046:	ed9d 1b02 	vldr	d1, [sp, #8]
 801804a:	ed9d 0b00 	vldr	d0, [sp]
 801804e:	f002 fa0b 	bl	801a468 <__kernel_sin>
 8018052:	ec53 2b10 	vmov	r2, r3, d0
 8018056:	ee10 0a10 	vmov	r0, s0
 801805a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801805e:	e7de      	b.n	801801e <cos+0x2e>
 8018060:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018064:	ed9d 0b00 	vldr	d0, [sp]
 8018068:	f001 fdf6 	bl	8019c58 <__kernel_cos>
 801806c:	e7f1      	b.n	8018052 <cos+0x62>
 801806e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018072:	ed9d 0b00 	vldr	d0, [sp]
 8018076:	2001      	movs	r0, #1
 8018078:	f002 f9f6 	bl	801a468 <__kernel_sin>
 801807c:	e7c4      	b.n	8018008 <cos+0x18>
 801807e:	bf00      	nop
	...
 8018088:	3fe921fb 	.word	0x3fe921fb
 801808c:	7fefffff 	.word	0x7fefffff

08018090 <floor>:
 8018090:	ec51 0b10 	vmov	r0, r1, d0
 8018094:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018098:	f3c1 570a 	ubfx	r7, r1, #20, #11
 801809c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80180a0:	2e13      	cmp	r6, #19
 80180a2:	ee10 5a10 	vmov	r5, s0
 80180a6:	ee10 8a10 	vmov	r8, s0
 80180aa:	460c      	mov	r4, r1
 80180ac:	dc32      	bgt.n	8018114 <floor+0x84>
 80180ae:	2e00      	cmp	r6, #0
 80180b0:	da14      	bge.n	80180dc <floor+0x4c>
 80180b2:	a333      	add	r3, pc, #204	; (adr r3, 8018180 <floor+0xf0>)
 80180b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180b8:	f7e8 f908 	bl	80002cc <__adddf3>
 80180bc:	2200      	movs	r2, #0
 80180be:	2300      	movs	r3, #0
 80180c0:	f7e8 fd4a 	bl	8000b58 <__aeabi_dcmpgt>
 80180c4:	b138      	cbz	r0, 80180d6 <floor+0x46>
 80180c6:	2c00      	cmp	r4, #0
 80180c8:	da57      	bge.n	801817a <floor+0xea>
 80180ca:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80180ce:	431d      	orrs	r5, r3
 80180d0:	d001      	beq.n	80180d6 <floor+0x46>
 80180d2:	4c2d      	ldr	r4, [pc, #180]	; (8018188 <floor+0xf8>)
 80180d4:	2500      	movs	r5, #0
 80180d6:	4621      	mov	r1, r4
 80180d8:	4628      	mov	r0, r5
 80180da:	e025      	b.n	8018128 <floor+0x98>
 80180dc:	4f2b      	ldr	r7, [pc, #172]	; (801818c <floor+0xfc>)
 80180de:	4137      	asrs	r7, r6
 80180e0:	ea01 0307 	and.w	r3, r1, r7
 80180e4:	4303      	orrs	r3, r0
 80180e6:	d01f      	beq.n	8018128 <floor+0x98>
 80180e8:	a325      	add	r3, pc, #148	; (adr r3, 8018180 <floor+0xf0>)
 80180ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80180ee:	f7e8 f8ed 	bl	80002cc <__adddf3>
 80180f2:	2200      	movs	r2, #0
 80180f4:	2300      	movs	r3, #0
 80180f6:	f7e8 fd2f 	bl	8000b58 <__aeabi_dcmpgt>
 80180fa:	2800      	cmp	r0, #0
 80180fc:	d0eb      	beq.n	80180d6 <floor+0x46>
 80180fe:	2c00      	cmp	r4, #0
 8018100:	bfbe      	ittt	lt
 8018102:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8018106:	fa43 f606 	asrlt.w	r6, r3, r6
 801810a:	19a4      	addlt	r4, r4, r6
 801810c:	ea24 0407 	bic.w	r4, r4, r7
 8018110:	2500      	movs	r5, #0
 8018112:	e7e0      	b.n	80180d6 <floor+0x46>
 8018114:	2e33      	cmp	r6, #51	; 0x33
 8018116:	dd0b      	ble.n	8018130 <floor+0xa0>
 8018118:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801811c:	d104      	bne.n	8018128 <floor+0x98>
 801811e:	ee10 2a10 	vmov	r2, s0
 8018122:	460b      	mov	r3, r1
 8018124:	f7e8 f8d2 	bl	80002cc <__adddf3>
 8018128:	ec41 0b10 	vmov	d0, r0, r1
 801812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018130:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8018134:	f04f 33ff 	mov.w	r3, #4294967295
 8018138:	fa23 f707 	lsr.w	r7, r3, r7
 801813c:	4207      	tst	r7, r0
 801813e:	d0f3      	beq.n	8018128 <floor+0x98>
 8018140:	a30f      	add	r3, pc, #60	; (adr r3, 8018180 <floor+0xf0>)
 8018142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018146:	f7e8 f8c1 	bl	80002cc <__adddf3>
 801814a:	2200      	movs	r2, #0
 801814c:	2300      	movs	r3, #0
 801814e:	f7e8 fd03 	bl	8000b58 <__aeabi_dcmpgt>
 8018152:	2800      	cmp	r0, #0
 8018154:	d0bf      	beq.n	80180d6 <floor+0x46>
 8018156:	2c00      	cmp	r4, #0
 8018158:	da02      	bge.n	8018160 <floor+0xd0>
 801815a:	2e14      	cmp	r6, #20
 801815c:	d103      	bne.n	8018166 <floor+0xd6>
 801815e:	3401      	adds	r4, #1
 8018160:	ea25 0507 	bic.w	r5, r5, r7
 8018164:	e7b7      	b.n	80180d6 <floor+0x46>
 8018166:	2301      	movs	r3, #1
 8018168:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 801816c:	fa03 f606 	lsl.w	r6, r3, r6
 8018170:	4435      	add	r5, r6
 8018172:	4545      	cmp	r5, r8
 8018174:	bf38      	it	cc
 8018176:	18e4      	addcc	r4, r4, r3
 8018178:	e7f2      	b.n	8018160 <floor+0xd0>
 801817a:	2500      	movs	r5, #0
 801817c:	462c      	mov	r4, r5
 801817e:	e7aa      	b.n	80180d6 <floor+0x46>
 8018180:	8800759c 	.word	0x8800759c
 8018184:	7e37e43c 	.word	0x7e37e43c
 8018188:	bff00000 	.word	0xbff00000
 801818c:	000fffff 	.word	0x000fffff

08018190 <frexp>:
 8018190:	b570      	push	{r4, r5, r6, lr}
 8018192:	2100      	movs	r1, #0
 8018194:	ec55 4b10 	vmov	r4, r5, d0
 8018198:	6001      	str	r1, [r0, #0]
 801819a:	4916      	ldr	r1, [pc, #88]	; (80181f4 <frexp+0x64>)
 801819c:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80181a0:	428a      	cmp	r2, r1
 80181a2:	4606      	mov	r6, r0
 80181a4:	462b      	mov	r3, r5
 80181a6:	dc22      	bgt.n	80181ee <frexp+0x5e>
 80181a8:	ee10 1a10 	vmov	r1, s0
 80181ac:	4311      	orrs	r1, r2
 80181ae:	d01e      	beq.n	80181ee <frexp+0x5e>
 80181b0:	4911      	ldr	r1, [pc, #68]	; (80181f8 <frexp+0x68>)
 80181b2:	4029      	ands	r1, r5
 80181b4:	b969      	cbnz	r1, 80181d2 <frexp+0x42>
 80181b6:	4b11      	ldr	r3, [pc, #68]	; (80181fc <frexp+0x6c>)
 80181b8:	2200      	movs	r2, #0
 80181ba:	ee10 0a10 	vmov	r0, s0
 80181be:	4629      	mov	r1, r5
 80181c0:	f7e8 fa3a 	bl	8000638 <__aeabi_dmul>
 80181c4:	460b      	mov	r3, r1
 80181c6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80181ca:	f06f 0135 	mvn.w	r1, #53	; 0x35
 80181ce:	4604      	mov	r4, r0
 80181d0:	6031      	str	r1, [r6, #0]
 80181d2:	6831      	ldr	r1, [r6, #0]
 80181d4:	1512      	asrs	r2, r2, #20
 80181d6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80181da:	f2a2 32fe 	subw	r2, r2, #1022	; 0x3fe
 80181de:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80181e2:	440a      	add	r2, r1
 80181e4:	f043 557f 	orr.w	r5, r3, #1069547520	; 0x3fc00000
 80181e8:	6032      	str	r2, [r6, #0]
 80181ea:	f445 1500 	orr.w	r5, r5, #2097152	; 0x200000
 80181ee:	ec45 4b10 	vmov	d0, r4, r5
 80181f2:	bd70      	pop	{r4, r5, r6, pc}
 80181f4:	7fefffff 	.word	0x7fefffff
 80181f8:	7ff00000 	.word	0x7ff00000
 80181fc:	43500000 	.word	0x43500000

08018200 <round>:
 8018200:	ec51 0b10 	vmov	r0, r1, d0
 8018204:	b570      	push	{r4, r5, r6, lr}
 8018206:	f3c1 550a 	ubfx	r5, r1, #20, #11
 801820a:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 801820e:	2c13      	cmp	r4, #19
 8018210:	ee10 2a10 	vmov	r2, s0
 8018214:	460b      	mov	r3, r1
 8018216:	dc19      	bgt.n	801824c <round+0x4c>
 8018218:	2c00      	cmp	r4, #0
 801821a:	da09      	bge.n	8018230 <round+0x30>
 801821c:	3401      	adds	r4, #1
 801821e:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 8018222:	d103      	bne.n	801822c <round+0x2c>
 8018224:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8018228:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 801822c:	2100      	movs	r1, #0
 801822e:	e028      	b.n	8018282 <round+0x82>
 8018230:	4d15      	ldr	r5, [pc, #84]	; (8018288 <round+0x88>)
 8018232:	4125      	asrs	r5, r4
 8018234:	ea01 0605 	and.w	r6, r1, r5
 8018238:	4332      	orrs	r2, r6
 801823a:	d00e      	beq.n	801825a <round+0x5a>
 801823c:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8018240:	fa42 f404 	asr.w	r4, r2, r4
 8018244:	4423      	add	r3, r4
 8018246:	ea23 0305 	bic.w	r3, r3, r5
 801824a:	e7ef      	b.n	801822c <round+0x2c>
 801824c:	2c33      	cmp	r4, #51	; 0x33
 801824e:	dd07      	ble.n	8018260 <round+0x60>
 8018250:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8018254:	d101      	bne.n	801825a <round+0x5a>
 8018256:	f7e8 f839 	bl	80002cc <__adddf3>
 801825a:	ec41 0b10 	vmov	d0, r0, r1
 801825e:	bd70      	pop	{r4, r5, r6, pc}
 8018260:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 8018264:	f04f 35ff 	mov.w	r5, #4294967295
 8018268:	40f5      	lsrs	r5, r6
 801826a:	4228      	tst	r0, r5
 801826c:	d0f5      	beq.n	801825a <round+0x5a>
 801826e:	2101      	movs	r1, #1
 8018270:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 8018274:	fa01 f404 	lsl.w	r4, r1, r4
 8018278:	1912      	adds	r2, r2, r4
 801827a:	bf28      	it	cs
 801827c:	185b      	addcs	r3, r3, r1
 801827e:	ea22 0105 	bic.w	r1, r2, r5
 8018282:	4608      	mov	r0, r1
 8018284:	4619      	mov	r1, r3
 8018286:	e7e8      	b.n	801825a <round+0x5a>
 8018288:	000fffff 	.word	0x000fffff
 801828c:	00000000 	.word	0x00000000

08018290 <sin>:
 8018290:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8018292:	ec53 2b10 	vmov	r2, r3, d0
 8018296:	4826      	ldr	r0, [pc, #152]	; (8018330 <sin+0xa0>)
 8018298:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801829c:	4281      	cmp	r1, r0
 801829e:	dc07      	bgt.n	80182b0 <sin+0x20>
 80182a0:	ed9f 1b21 	vldr	d1, [pc, #132]	; 8018328 <sin+0x98>
 80182a4:	2000      	movs	r0, #0
 80182a6:	f002 f8df 	bl	801a468 <__kernel_sin>
 80182aa:	ec51 0b10 	vmov	r0, r1, d0
 80182ae:	e007      	b.n	80182c0 <sin+0x30>
 80182b0:	4820      	ldr	r0, [pc, #128]	; (8018334 <sin+0xa4>)
 80182b2:	4281      	cmp	r1, r0
 80182b4:	dd09      	ble.n	80182ca <sin+0x3a>
 80182b6:	ee10 0a10 	vmov	r0, s0
 80182ba:	4619      	mov	r1, r3
 80182bc:	f7e8 f804 	bl	80002c8 <__aeabi_dsub>
 80182c0:	ec41 0b10 	vmov	d0, r0, r1
 80182c4:	b005      	add	sp, #20
 80182c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80182ca:	4668      	mov	r0, sp
 80182cc:	f000 fff0 	bl	80192b0 <__ieee754_rem_pio2>
 80182d0:	f000 0003 	and.w	r0, r0, #3
 80182d4:	2801      	cmp	r0, #1
 80182d6:	d008      	beq.n	80182ea <sin+0x5a>
 80182d8:	2802      	cmp	r0, #2
 80182da:	d00d      	beq.n	80182f8 <sin+0x68>
 80182dc:	b9d0      	cbnz	r0, 8018314 <sin+0x84>
 80182de:	ed9d 1b02 	vldr	d1, [sp, #8]
 80182e2:	ed9d 0b00 	vldr	d0, [sp]
 80182e6:	2001      	movs	r0, #1
 80182e8:	e7dd      	b.n	80182a6 <sin+0x16>
 80182ea:	ed9d 1b02 	vldr	d1, [sp, #8]
 80182ee:	ed9d 0b00 	vldr	d0, [sp]
 80182f2:	f001 fcb1 	bl	8019c58 <__kernel_cos>
 80182f6:	e7d8      	b.n	80182aa <sin+0x1a>
 80182f8:	ed9d 1b02 	vldr	d1, [sp, #8]
 80182fc:	ed9d 0b00 	vldr	d0, [sp]
 8018300:	2001      	movs	r0, #1
 8018302:	f002 f8b1 	bl	801a468 <__kernel_sin>
 8018306:	ec53 2b10 	vmov	r2, r3, d0
 801830a:	ee10 0a10 	vmov	r0, s0
 801830e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8018312:	e7d5      	b.n	80182c0 <sin+0x30>
 8018314:	ed9d 1b02 	vldr	d1, [sp, #8]
 8018318:	ed9d 0b00 	vldr	d0, [sp]
 801831c:	f001 fc9c 	bl	8019c58 <__kernel_cos>
 8018320:	e7f1      	b.n	8018306 <sin+0x76>
 8018322:	bf00      	nop
 8018324:	f3af 8000 	nop.w
	...
 8018330:	3fe921fb 	.word	0x3fe921fb
 8018334:	7fefffff 	.word	0x7fefffff

08018338 <ceilf>:
 8018338:	ee10 3a10 	vmov	r3, s0
 801833c:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018340:	3a7f      	subs	r2, #127	; 0x7f
 8018342:	2a16      	cmp	r2, #22
 8018344:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8018348:	dc2a      	bgt.n	80183a0 <ceilf+0x68>
 801834a:	2a00      	cmp	r2, #0
 801834c:	da11      	bge.n	8018372 <ceilf+0x3a>
 801834e:	eddf 7a19 	vldr	s15, [pc, #100]	; 80183b4 <ceilf+0x7c>
 8018352:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018356:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801835a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801835e:	dd05      	ble.n	801836c <ceilf+0x34>
 8018360:	2b00      	cmp	r3, #0
 8018362:	db23      	blt.n	80183ac <ceilf+0x74>
 8018364:	2900      	cmp	r1, #0
 8018366:	bf18      	it	ne
 8018368:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 801836c:	ee00 3a10 	vmov	s0, r3
 8018370:	4770      	bx	lr
 8018372:	4911      	ldr	r1, [pc, #68]	; (80183b8 <ceilf+0x80>)
 8018374:	4111      	asrs	r1, r2
 8018376:	420b      	tst	r3, r1
 8018378:	d0fa      	beq.n	8018370 <ceilf+0x38>
 801837a:	eddf 7a0e 	vldr	s15, [pc, #56]	; 80183b4 <ceilf+0x7c>
 801837e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018382:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8018386:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801838a:	ddef      	ble.n	801836c <ceilf+0x34>
 801838c:	2b00      	cmp	r3, #0
 801838e:	bfc2      	ittt	gt
 8018390:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 8018394:	fa40 f202 	asrgt.w	r2, r0, r2
 8018398:	189b      	addgt	r3, r3, r2
 801839a:	ea23 0301 	bic.w	r3, r3, r1
 801839e:	e7e5      	b.n	801836c <ceilf+0x34>
 80183a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80183a4:	d3e4      	bcc.n	8018370 <ceilf+0x38>
 80183a6:	ee30 0a00 	vadd.f32	s0, s0, s0
 80183aa:	4770      	bx	lr
 80183ac:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80183b0:	e7dc      	b.n	801836c <ceilf+0x34>
 80183b2:	bf00      	nop
 80183b4:	7149f2ca 	.word	0x7149f2ca
 80183b8:	007fffff 	.word	0x007fffff

080183bc <cosf>:
 80183bc:	ee10 3a10 	vmov	r3, s0
 80183c0:	b507      	push	{r0, r1, r2, lr}
 80183c2:	4a1c      	ldr	r2, [pc, #112]	; (8018434 <cosf+0x78>)
 80183c4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80183c8:	4293      	cmp	r3, r2
 80183ca:	dc04      	bgt.n	80183d6 <cosf+0x1a>
 80183cc:	eddf 0a1a 	vldr	s1, [pc, #104]	; 8018438 <cosf+0x7c>
 80183d0:	f002 f908 	bl	801a5e4 <__kernel_cosf>
 80183d4:	e004      	b.n	80183e0 <cosf+0x24>
 80183d6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80183da:	db04      	blt.n	80183e6 <cosf+0x2a>
 80183dc:	ee30 0a40 	vsub.f32	s0, s0, s0
 80183e0:	b003      	add	sp, #12
 80183e2:	f85d fb04 	ldr.w	pc, [sp], #4
 80183e6:	4668      	mov	r0, sp
 80183e8:	f001 faf4 	bl	80199d4 <__ieee754_rem_pio2f>
 80183ec:	f000 0003 	and.w	r0, r0, #3
 80183f0:	2801      	cmp	r0, #1
 80183f2:	d007      	beq.n	8018404 <cosf+0x48>
 80183f4:	2802      	cmp	r0, #2
 80183f6:	d00e      	beq.n	8018416 <cosf+0x5a>
 80183f8:	b9a0      	cbnz	r0, 8018424 <cosf+0x68>
 80183fa:	eddd 0a01 	vldr	s1, [sp, #4]
 80183fe:	ed9d 0a00 	vldr	s0, [sp]
 8018402:	e7e5      	b.n	80183d0 <cosf+0x14>
 8018404:	eddd 0a01 	vldr	s1, [sp, #4]
 8018408:	ed9d 0a00 	vldr	s0, [sp]
 801840c:	f002 fbd4 	bl	801abb8 <__kernel_sinf>
 8018410:	eeb1 0a40 	vneg.f32	s0, s0
 8018414:	e7e4      	b.n	80183e0 <cosf+0x24>
 8018416:	eddd 0a01 	vldr	s1, [sp, #4]
 801841a:	ed9d 0a00 	vldr	s0, [sp]
 801841e:	f002 f8e1 	bl	801a5e4 <__kernel_cosf>
 8018422:	e7f5      	b.n	8018410 <cosf+0x54>
 8018424:	eddd 0a01 	vldr	s1, [sp, #4]
 8018428:	ed9d 0a00 	vldr	s0, [sp]
 801842c:	2001      	movs	r0, #1
 801842e:	f002 fbc3 	bl	801abb8 <__kernel_sinf>
 8018432:	e7d5      	b.n	80183e0 <cosf+0x24>
 8018434:	3f490fd8 	.word	0x3f490fd8
 8018438:	00000000 	.word	0x00000000

0801843c <floorf>:
 801843c:	ee10 3a10 	vmov	r3, s0
 8018440:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8018444:	3a7f      	subs	r2, #127	; 0x7f
 8018446:	2a16      	cmp	r2, #22
 8018448:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 801844c:	dc2a      	bgt.n	80184a4 <floorf+0x68>
 801844e:	2a00      	cmp	r2, #0
 8018450:	da11      	bge.n	8018476 <floorf+0x3a>
 8018452:	eddf 7a18 	vldr	s15, [pc, #96]	; 80184b4 <floorf+0x78>
 8018456:	ee30 0a27 	vadd.f32	s0, s0, s15
 801845a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801845e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018462:	dd05      	ble.n	8018470 <floorf+0x34>
 8018464:	2b00      	cmp	r3, #0
 8018466:	da23      	bge.n	80184b0 <floorf+0x74>
 8018468:	4a13      	ldr	r2, [pc, #76]	; (80184b8 <floorf+0x7c>)
 801846a:	2900      	cmp	r1, #0
 801846c:	bf18      	it	ne
 801846e:	4613      	movne	r3, r2
 8018470:	ee00 3a10 	vmov	s0, r3
 8018474:	4770      	bx	lr
 8018476:	4911      	ldr	r1, [pc, #68]	; (80184bc <floorf+0x80>)
 8018478:	4111      	asrs	r1, r2
 801847a:	420b      	tst	r3, r1
 801847c:	d0fa      	beq.n	8018474 <floorf+0x38>
 801847e:	eddf 7a0d 	vldr	s15, [pc, #52]	; 80184b4 <floorf+0x78>
 8018482:	ee30 0a27 	vadd.f32	s0, s0, s15
 8018486:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801848a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801848e:	ddef      	ble.n	8018470 <floorf+0x34>
 8018490:	2b00      	cmp	r3, #0
 8018492:	bfbe      	ittt	lt
 8018494:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 8018498:	fa40 f202 	asrlt.w	r2, r0, r2
 801849c:	189b      	addlt	r3, r3, r2
 801849e:	ea23 0301 	bic.w	r3, r3, r1
 80184a2:	e7e5      	b.n	8018470 <floorf+0x34>
 80184a4:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 80184a8:	d3e4      	bcc.n	8018474 <floorf+0x38>
 80184aa:	ee30 0a00 	vadd.f32	s0, s0, s0
 80184ae:	4770      	bx	lr
 80184b0:	2300      	movs	r3, #0
 80184b2:	e7dd      	b.n	8018470 <floorf+0x34>
 80184b4:	7149f2ca 	.word	0x7149f2ca
 80184b8:	bf800000 	.word	0xbf800000
 80184bc:	007fffff 	.word	0x007fffff

080184c0 <fmaf>:
 80184c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80184c2:	ee10 0a10 	vmov	r0, s0
 80184c6:	ee10 7a90 	vmov	r7, s1
 80184ca:	ee11 6a10 	vmov	r6, s2
 80184ce:	f7e8 f85b 	bl	8000588 <__aeabi_f2d>
 80184d2:	4604      	mov	r4, r0
 80184d4:	4638      	mov	r0, r7
 80184d6:	460d      	mov	r5, r1
 80184d8:	f7e8 f856 	bl	8000588 <__aeabi_f2d>
 80184dc:	4602      	mov	r2, r0
 80184de:	460b      	mov	r3, r1
 80184e0:	4620      	mov	r0, r4
 80184e2:	4629      	mov	r1, r5
 80184e4:	f7e8 f8a8 	bl	8000638 <__aeabi_dmul>
 80184e8:	4604      	mov	r4, r0
 80184ea:	4630      	mov	r0, r6
 80184ec:	460d      	mov	r5, r1
 80184ee:	f7e8 f84b 	bl	8000588 <__aeabi_f2d>
 80184f2:	4602      	mov	r2, r0
 80184f4:	460b      	mov	r3, r1
 80184f6:	4620      	mov	r0, r4
 80184f8:	4629      	mov	r1, r5
 80184fa:	f7e7 fee7 	bl	80002cc <__adddf3>
 80184fe:	f7e8 fb93 	bl	8000c28 <__aeabi_d2f>
 8018502:	ee00 0a10 	vmov	s0, r0
 8018506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08018508 <roundf>:
 8018508:	ee10 0a10 	vmov	r0, s0
 801850c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8018510:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8018514:	2a16      	cmp	r2, #22
 8018516:	dc15      	bgt.n	8018544 <roundf+0x3c>
 8018518:	2a00      	cmp	r2, #0
 801851a:	da08      	bge.n	801852e <roundf+0x26>
 801851c:	3201      	adds	r2, #1
 801851e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8018522:	d101      	bne.n	8018528 <roundf+0x20>
 8018524:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 8018528:	ee00 3a10 	vmov	s0, r3
 801852c:	4770      	bx	lr
 801852e:	4908      	ldr	r1, [pc, #32]	; (8018550 <roundf+0x48>)
 8018530:	4111      	asrs	r1, r2
 8018532:	4208      	tst	r0, r1
 8018534:	d0fa      	beq.n	801852c <roundf+0x24>
 8018536:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 801853a:	4113      	asrs	r3, r2
 801853c:	4403      	add	r3, r0
 801853e:	ea23 0301 	bic.w	r3, r3, r1
 8018542:	e7f1      	b.n	8018528 <roundf+0x20>
 8018544:	2a80      	cmp	r2, #128	; 0x80
 8018546:	d1f1      	bne.n	801852c <roundf+0x24>
 8018548:	ee30 0a00 	vadd.f32	s0, s0, s0
 801854c:	4770      	bx	lr
 801854e:	bf00      	nop
 8018550:	007fffff 	.word	0x007fffff

08018554 <sinf>:
 8018554:	ee10 3a10 	vmov	r3, s0
 8018558:	b507      	push	{r0, r1, r2, lr}
 801855a:	4a1d      	ldr	r2, [pc, #116]	; (80185d0 <sinf+0x7c>)
 801855c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8018560:	4293      	cmp	r3, r2
 8018562:	dc05      	bgt.n	8018570 <sinf+0x1c>
 8018564:	eddf 0a1b 	vldr	s1, [pc, #108]	; 80185d4 <sinf+0x80>
 8018568:	2000      	movs	r0, #0
 801856a:	f002 fb25 	bl	801abb8 <__kernel_sinf>
 801856e:	e004      	b.n	801857a <sinf+0x26>
 8018570:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8018574:	db04      	blt.n	8018580 <sinf+0x2c>
 8018576:	ee30 0a40 	vsub.f32	s0, s0, s0
 801857a:	b003      	add	sp, #12
 801857c:	f85d fb04 	ldr.w	pc, [sp], #4
 8018580:	4668      	mov	r0, sp
 8018582:	f001 fa27 	bl	80199d4 <__ieee754_rem_pio2f>
 8018586:	f000 0003 	and.w	r0, r0, #3
 801858a:	2801      	cmp	r0, #1
 801858c:	d008      	beq.n	80185a0 <sinf+0x4c>
 801858e:	2802      	cmp	r0, #2
 8018590:	d00d      	beq.n	80185ae <sinf+0x5a>
 8018592:	b9b0      	cbnz	r0, 80185c2 <sinf+0x6e>
 8018594:	eddd 0a01 	vldr	s1, [sp, #4]
 8018598:	ed9d 0a00 	vldr	s0, [sp]
 801859c:	2001      	movs	r0, #1
 801859e:	e7e4      	b.n	801856a <sinf+0x16>
 80185a0:	eddd 0a01 	vldr	s1, [sp, #4]
 80185a4:	ed9d 0a00 	vldr	s0, [sp]
 80185a8:	f002 f81c 	bl	801a5e4 <__kernel_cosf>
 80185ac:	e7e5      	b.n	801857a <sinf+0x26>
 80185ae:	eddd 0a01 	vldr	s1, [sp, #4]
 80185b2:	ed9d 0a00 	vldr	s0, [sp]
 80185b6:	2001      	movs	r0, #1
 80185b8:	f002 fafe 	bl	801abb8 <__kernel_sinf>
 80185bc:	eeb1 0a40 	vneg.f32	s0, s0
 80185c0:	e7db      	b.n	801857a <sinf+0x26>
 80185c2:	eddd 0a01 	vldr	s1, [sp, #4]
 80185c6:	ed9d 0a00 	vldr	s0, [sp]
 80185ca:	f002 f80b 	bl	801a5e4 <__kernel_cosf>
 80185ce:	e7f5      	b.n	80185bc <sinf+0x68>
 80185d0:	3f490fd8 	.word	0x3f490fd8
 80185d4:	00000000 	.word	0x00000000

080185d8 <pow>:
 80185d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80185dc:	ec59 8b10 	vmov	r8, r9, d0
 80185e0:	ec57 6b11 	vmov	r6, r7, d1
 80185e4:	f000 f940 	bl	8018868 <__ieee754_pow>
 80185e8:	4b4e      	ldr	r3, [pc, #312]	; (8018724 <pow+0x14c>)
 80185ea:	f993 3000 	ldrsb.w	r3, [r3]
 80185ee:	3301      	adds	r3, #1
 80185f0:	ec55 4b10 	vmov	r4, r5, d0
 80185f4:	d015      	beq.n	8018622 <pow+0x4a>
 80185f6:	4632      	mov	r2, r6
 80185f8:	463b      	mov	r3, r7
 80185fa:	4630      	mov	r0, r6
 80185fc:	4639      	mov	r1, r7
 80185fe:	f7e8 fab5 	bl	8000b6c <__aeabi_dcmpun>
 8018602:	b970      	cbnz	r0, 8018622 <pow+0x4a>
 8018604:	4642      	mov	r2, r8
 8018606:	464b      	mov	r3, r9
 8018608:	4640      	mov	r0, r8
 801860a:	4649      	mov	r1, r9
 801860c:	f7e8 faae 	bl	8000b6c <__aeabi_dcmpun>
 8018610:	2200      	movs	r2, #0
 8018612:	2300      	movs	r3, #0
 8018614:	b148      	cbz	r0, 801862a <pow+0x52>
 8018616:	4630      	mov	r0, r6
 8018618:	4639      	mov	r1, r7
 801861a:	f7e8 fa75 	bl	8000b08 <__aeabi_dcmpeq>
 801861e:	2800      	cmp	r0, #0
 8018620:	d17d      	bne.n	801871e <pow+0x146>
 8018622:	ec45 4b10 	vmov	d0, r4, r5
 8018626:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801862a:	4640      	mov	r0, r8
 801862c:	4649      	mov	r1, r9
 801862e:	f7e8 fa6b 	bl	8000b08 <__aeabi_dcmpeq>
 8018632:	b1e0      	cbz	r0, 801866e <pow+0x96>
 8018634:	2200      	movs	r2, #0
 8018636:	2300      	movs	r3, #0
 8018638:	4630      	mov	r0, r6
 801863a:	4639      	mov	r1, r7
 801863c:	f7e8 fa64 	bl	8000b08 <__aeabi_dcmpeq>
 8018640:	2800      	cmp	r0, #0
 8018642:	d16c      	bne.n	801871e <pow+0x146>
 8018644:	ec47 6b10 	vmov	d0, r6, r7
 8018648:	f002 fb07 	bl	801ac5a <finite>
 801864c:	2800      	cmp	r0, #0
 801864e:	d0e8      	beq.n	8018622 <pow+0x4a>
 8018650:	2200      	movs	r2, #0
 8018652:	2300      	movs	r3, #0
 8018654:	4630      	mov	r0, r6
 8018656:	4639      	mov	r1, r7
 8018658:	f7e8 fa60 	bl	8000b1c <__aeabi_dcmplt>
 801865c:	2800      	cmp	r0, #0
 801865e:	d0e0      	beq.n	8018622 <pow+0x4a>
 8018660:	f002 fcda 	bl	801b018 <__errno>
 8018664:	2321      	movs	r3, #33	; 0x21
 8018666:	6003      	str	r3, [r0, #0]
 8018668:	2400      	movs	r4, #0
 801866a:	4d2f      	ldr	r5, [pc, #188]	; (8018728 <pow+0x150>)
 801866c:	e7d9      	b.n	8018622 <pow+0x4a>
 801866e:	ec45 4b10 	vmov	d0, r4, r5
 8018672:	f002 faf2 	bl	801ac5a <finite>
 8018676:	bbb8      	cbnz	r0, 80186e8 <pow+0x110>
 8018678:	ec49 8b10 	vmov	d0, r8, r9
 801867c:	f002 faed 	bl	801ac5a <finite>
 8018680:	b390      	cbz	r0, 80186e8 <pow+0x110>
 8018682:	ec47 6b10 	vmov	d0, r6, r7
 8018686:	f002 fae8 	bl	801ac5a <finite>
 801868a:	b368      	cbz	r0, 80186e8 <pow+0x110>
 801868c:	4622      	mov	r2, r4
 801868e:	462b      	mov	r3, r5
 8018690:	4620      	mov	r0, r4
 8018692:	4629      	mov	r1, r5
 8018694:	f7e8 fa6a 	bl	8000b6c <__aeabi_dcmpun>
 8018698:	b160      	cbz	r0, 80186b4 <pow+0xdc>
 801869a:	f002 fcbd 	bl	801b018 <__errno>
 801869e:	2321      	movs	r3, #33	; 0x21
 80186a0:	6003      	str	r3, [r0, #0]
 80186a2:	2200      	movs	r2, #0
 80186a4:	2300      	movs	r3, #0
 80186a6:	4610      	mov	r0, r2
 80186a8:	4619      	mov	r1, r3
 80186aa:	f7e8 f8ef 	bl	800088c <__aeabi_ddiv>
 80186ae:	4604      	mov	r4, r0
 80186b0:	460d      	mov	r5, r1
 80186b2:	e7b6      	b.n	8018622 <pow+0x4a>
 80186b4:	f002 fcb0 	bl	801b018 <__errno>
 80186b8:	2322      	movs	r3, #34	; 0x22
 80186ba:	6003      	str	r3, [r0, #0]
 80186bc:	2200      	movs	r2, #0
 80186be:	2300      	movs	r3, #0
 80186c0:	4640      	mov	r0, r8
 80186c2:	4649      	mov	r1, r9
 80186c4:	f7e8 fa2a 	bl	8000b1c <__aeabi_dcmplt>
 80186c8:	2400      	movs	r4, #0
 80186ca:	b158      	cbz	r0, 80186e4 <pow+0x10c>
 80186cc:	ec47 6b10 	vmov	d0, r6, r7
 80186d0:	f002 fad6 	bl	801ac80 <rint>
 80186d4:	4632      	mov	r2, r6
 80186d6:	ec51 0b10 	vmov	r0, r1, d0
 80186da:	463b      	mov	r3, r7
 80186dc:	f7e8 fa14 	bl	8000b08 <__aeabi_dcmpeq>
 80186e0:	2800      	cmp	r0, #0
 80186e2:	d0c2      	beq.n	801866a <pow+0x92>
 80186e4:	4d11      	ldr	r5, [pc, #68]	; (801872c <pow+0x154>)
 80186e6:	e79c      	b.n	8018622 <pow+0x4a>
 80186e8:	2200      	movs	r2, #0
 80186ea:	2300      	movs	r3, #0
 80186ec:	4620      	mov	r0, r4
 80186ee:	4629      	mov	r1, r5
 80186f0:	f7e8 fa0a 	bl	8000b08 <__aeabi_dcmpeq>
 80186f4:	2800      	cmp	r0, #0
 80186f6:	d094      	beq.n	8018622 <pow+0x4a>
 80186f8:	ec49 8b10 	vmov	d0, r8, r9
 80186fc:	f002 faad 	bl	801ac5a <finite>
 8018700:	2800      	cmp	r0, #0
 8018702:	d08e      	beq.n	8018622 <pow+0x4a>
 8018704:	ec47 6b10 	vmov	d0, r6, r7
 8018708:	f002 faa7 	bl	801ac5a <finite>
 801870c:	2800      	cmp	r0, #0
 801870e:	d088      	beq.n	8018622 <pow+0x4a>
 8018710:	f002 fc82 	bl	801b018 <__errno>
 8018714:	2322      	movs	r3, #34	; 0x22
 8018716:	6003      	str	r3, [r0, #0]
 8018718:	2400      	movs	r4, #0
 801871a:	2500      	movs	r5, #0
 801871c:	e781      	b.n	8018622 <pow+0x4a>
 801871e:	4d04      	ldr	r5, [pc, #16]	; (8018730 <pow+0x158>)
 8018720:	2400      	movs	r4, #0
 8018722:	e77e      	b.n	8018622 <pow+0x4a>
 8018724:	20000514 	.word	0x20000514
 8018728:	fff00000 	.word	0xfff00000
 801872c:	7ff00000 	.word	0x7ff00000
 8018730:	3ff00000 	.word	0x3ff00000

08018734 <sqrt>:
 8018734:	b538      	push	{r3, r4, r5, lr}
 8018736:	ed2d 8b02 	vpush	{d8}
 801873a:	ec55 4b10 	vmov	r4, r5, d0
 801873e:	f000 ffc1 	bl	80196c4 <__ieee754_sqrt>
 8018742:	4b15      	ldr	r3, [pc, #84]	; (8018798 <sqrt+0x64>)
 8018744:	eeb0 8a40 	vmov.f32	s16, s0
 8018748:	eef0 8a60 	vmov.f32	s17, s1
 801874c:	f993 3000 	ldrsb.w	r3, [r3]
 8018750:	3301      	adds	r3, #1
 8018752:	d019      	beq.n	8018788 <sqrt+0x54>
 8018754:	4622      	mov	r2, r4
 8018756:	462b      	mov	r3, r5
 8018758:	4620      	mov	r0, r4
 801875a:	4629      	mov	r1, r5
 801875c:	f7e8 fa06 	bl	8000b6c <__aeabi_dcmpun>
 8018760:	b990      	cbnz	r0, 8018788 <sqrt+0x54>
 8018762:	2200      	movs	r2, #0
 8018764:	2300      	movs	r3, #0
 8018766:	4620      	mov	r0, r4
 8018768:	4629      	mov	r1, r5
 801876a:	f7e8 f9d7 	bl	8000b1c <__aeabi_dcmplt>
 801876e:	b158      	cbz	r0, 8018788 <sqrt+0x54>
 8018770:	f002 fc52 	bl	801b018 <__errno>
 8018774:	2321      	movs	r3, #33	; 0x21
 8018776:	6003      	str	r3, [r0, #0]
 8018778:	2200      	movs	r2, #0
 801877a:	2300      	movs	r3, #0
 801877c:	4610      	mov	r0, r2
 801877e:	4619      	mov	r1, r3
 8018780:	f7e8 f884 	bl	800088c <__aeabi_ddiv>
 8018784:	ec41 0b18 	vmov	d8, r0, r1
 8018788:	eeb0 0a48 	vmov.f32	s0, s16
 801878c:	eef0 0a68 	vmov.f32	s1, s17
 8018790:	ecbd 8b02 	vpop	{d8}
 8018794:	bd38      	pop	{r3, r4, r5, pc}
 8018796:	bf00      	nop
 8018798:	20000514 	.word	0x20000514

0801879c <expf>:
 801879c:	b508      	push	{r3, lr}
 801879e:	ed2d 8b02 	vpush	{d8}
 80187a2:	eef0 8a40 	vmov.f32	s17, s0
 80187a6:	f001 f841 	bl	801982c <__ieee754_expf>
 80187aa:	4b16      	ldr	r3, [pc, #88]	; (8018804 <expf+0x68>)
 80187ac:	f993 3000 	ldrsb.w	r3, [r3]
 80187b0:	3301      	adds	r3, #1
 80187b2:	eeb0 8a40 	vmov.f32	s16, s0
 80187b6:	d011      	beq.n	80187dc <expf+0x40>
 80187b8:	eeb0 0a68 	vmov.f32	s0, s17
 80187bc:	f002 fb79 	bl	801aeb2 <finitef>
 80187c0:	b160      	cbz	r0, 80187dc <expf+0x40>
 80187c2:	eddf 7a11 	vldr	s15, [pc, #68]	; 8018808 <expf+0x6c>
 80187c6:	eef4 8ae7 	vcmpe.f32	s17, s15
 80187ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187ce:	dd0a      	ble.n	80187e6 <expf+0x4a>
 80187d0:	f002 fc22 	bl	801b018 <__errno>
 80187d4:	ed9f 8a0d 	vldr	s16, [pc, #52]	; 801880c <expf+0x70>
 80187d8:	2322      	movs	r3, #34	; 0x22
 80187da:	6003      	str	r3, [r0, #0]
 80187dc:	eeb0 0a48 	vmov.f32	s0, s16
 80187e0:	ecbd 8b02 	vpop	{d8}
 80187e4:	bd08      	pop	{r3, pc}
 80187e6:	eddf 7a0a 	vldr	s15, [pc, #40]	; 8018810 <expf+0x74>
 80187ea:	eef4 8ae7 	vcmpe.f32	s17, s15
 80187ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80187f2:	d5f3      	bpl.n	80187dc <expf+0x40>
 80187f4:	f002 fc10 	bl	801b018 <__errno>
 80187f8:	2322      	movs	r3, #34	; 0x22
 80187fa:	ed9f 8a06 	vldr	s16, [pc, #24]	; 8018814 <expf+0x78>
 80187fe:	6003      	str	r3, [r0, #0]
 8018800:	e7ec      	b.n	80187dc <expf+0x40>
 8018802:	bf00      	nop
 8018804:	20000514 	.word	0x20000514
 8018808:	42b17180 	.word	0x42b17180
 801880c:	7f800000 	.word	0x7f800000
 8018810:	c2cff1b5 	.word	0xc2cff1b5
 8018814:	00000000 	.word	0x00000000

08018818 <sqrtf>:
 8018818:	b508      	push	{r3, lr}
 801881a:	ed2d 8b02 	vpush	{d8}
 801881e:	eeb0 8a40 	vmov.f32	s16, s0
 8018822:	f001 fa13 	bl	8019c4c <__ieee754_sqrtf>
 8018826:	4b0d      	ldr	r3, [pc, #52]	; (801885c <sqrtf+0x44>)
 8018828:	f993 3000 	ldrsb.w	r3, [r3]
 801882c:	3301      	adds	r3, #1
 801882e:	d011      	beq.n	8018854 <sqrtf+0x3c>
 8018830:	eeb4 8a48 	vcmp.f32	s16, s16
 8018834:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018838:	d60c      	bvs.n	8018854 <sqrtf+0x3c>
 801883a:	eddf 8a09 	vldr	s17, [pc, #36]	; 8018860 <sqrtf+0x48>
 801883e:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8018842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018846:	d505      	bpl.n	8018854 <sqrtf+0x3c>
 8018848:	f002 fbe6 	bl	801b018 <__errno>
 801884c:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8018850:	2321      	movs	r3, #33	; 0x21
 8018852:	6003      	str	r3, [r0, #0]
 8018854:	ecbd 8b02 	vpop	{d8}
 8018858:	bd08      	pop	{r3, pc}
 801885a:	bf00      	nop
 801885c:	20000514 	.word	0x20000514
	...

08018868 <__ieee754_pow>:
 8018868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801886c:	ed2d 8b06 	vpush	{d8-d10}
 8018870:	b08d      	sub	sp, #52	; 0x34
 8018872:	ed8d 1b02 	vstr	d1, [sp, #8]
 8018876:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 801887a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 801887e:	ea56 0100 	orrs.w	r1, r6, r0
 8018882:	ec53 2b10 	vmov	r2, r3, d0
 8018886:	f000 84d1 	beq.w	801922c <__ieee754_pow+0x9c4>
 801888a:	497f      	ldr	r1, [pc, #508]	; (8018a88 <__ieee754_pow+0x220>)
 801888c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8018890:	428c      	cmp	r4, r1
 8018892:	ee10 8a10 	vmov	r8, s0
 8018896:	4699      	mov	r9, r3
 8018898:	dc09      	bgt.n	80188ae <__ieee754_pow+0x46>
 801889a:	d103      	bne.n	80188a4 <__ieee754_pow+0x3c>
 801889c:	b97a      	cbnz	r2, 80188be <__ieee754_pow+0x56>
 801889e:	42a6      	cmp	r6, r4
 80188a0:	dd02      	ble.n	80188a8 <__ieee754_pow+0x40>
 80188a2:	e00c      	b.n	80188be <__ieee754_pow+0x56>
 80188a4:	428e      	cmp	r6, r1
 80188a6:	dc02      	bgt.n	80188ae <__ieee754_pow+0x46>
 80188a8:	428e      	cmp	r6, r1
 80188aa:	d110      	bne.n	80188ce <__ieee754_pow+0x66>
 80188ac:	b178      	cbz	r0, 80188ce <__ieee754_pow+0x66>
 80188ae:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80188b2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80188b6:	ea54 0308 	orrs.w	r3, r4, r8
 80188ba:	f000 84b7 	beq.w	801922c <__ieee754_pow+0x9c4>
 80188be:	4873      	ldr	r0, [pc, #460]	; (8018a8c <__ieee754_pow+0x224>)
 80188c0:	b00d      	add	sp, #52	; 0x34
 80188c2:	ecbd 8b06 	vpop	{d8-d10}
 80188c6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188ca:	f002 b9d1 	b.w	801ac70 <nan>
 80188ce:	f1b9 0f00 	cmp.w	r9, #0
 80188d2:	da36      	bge.n	8018942 <__ieee754_pow+0xda>
 80188d4:	496e      	ldr	r1, [pc, #440]	; (8018a90 <__ieee754_pow+0x228>)
 80188d6:	428e      	cmp	r6, r1
 80188d8:	dc51      	bgt.n	801897e <__ieee754_pow+0x116>
 80188da:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80188de:	428e      	cmp	r6, r1
 80188e0:	f340 84af 	ble.w	8019242 <__ieee754_pow+0x9da>
 80188e4:	1531      	asrs	r1, r6, #20
 80188e6:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80188ea:	2914      	cmp	r1, #20
 80188ec:	dd0f      	ble.n	801890e <__ieee754_pow+0xa6>
 80188ee:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80188f2:	fa20 fc01 	lsr.w	ip, r0, r1
 80188f6:	fa0c f101 	lsl.w	r1, ip, r1
 80188fa:	4281      	cmp	r1, r0
 80188fc:	f040 84a1 	bne.w	8019242 <__ieee754_pow+0x9da>
 8018900:	f00c 0c01 	and.w	ip, ip, #1
 8018904:	f1cc 0102 	rsb	r1, ip, #2
 8018908:	9100      	str	r1, [sp, #0]
 801890a:	b180      	cbz	r0, 801892e <__ieee754_pow+0xc6>
 801890c:	e059      	b.n	80189c2 <__ieee754_pow+0x15a>
 801890e:	2800      	cmp	r0, #0
 8018910:	d155      	bne.n	80189be <__ieee754_pow+0x156>
 8018912:	f1c1 0114 	rsb	r1, r1, #20
 8018916:	fa46 fc01 	asr.w	ip, r6, r1
 801891a:	fa0c f101 	lsl.w	r1, ip, r1
 801891e:	42b1      	cmp	r1, r6
 8018920:	f040 848c 	bne.w	801923c <__ieee754_pow+0x9d4>
 8018924:	f00c 0c01 	and.w	ip, ip, #1
 8018928:	f1cc 0102 	rsb	r1, ip, #2
 801892c:	9100      	str	r1, [sp, #0]
 801892e:	4959      	ldr	r1, [pc, #356]	; (8018a94 <__ieee754_pow+0x22c>)
 8018930:	428e      	cmp	r6, r1
 8018932:	d12d      	bne.n	8018990 <__ieee754_pow+0x128>
 8018934:	2f00      	cmp	r7, #0
 8018936:	da79      	bge.n	8018a2c <__ieee754_pow+0x1c4>
 8018938:	4956      	ldr	r1, [pc, #344]	; (8018a94 <__ieee754_pow+0x22c>)
 801893a:	2000      	movs	r0, #0
 801893c:	f7e7 ffa6 	bl	800088c <__aeabi_ddiv>
 8018940:	e016      	b.n	8018970 <__ieee754_pow+0x108>
 8018942:	2100      	movs	r1, #0
 8018944:	9100      	str	r1, [sp, #0]
 8018946:	2800      	cmp	r0, #0
 8018948:	d13b      	bne.n	80189c2 <__ieee754_pow+0x15a>
 801894a:	494f      	ldr	r1, [pc, #316]	; (8018a88 <__ieee754_pow+0x220>)
 801894c:	428e      	cmp	r6, r1
 801894e:	d1ee      	bne.n	801892e <__ieee754_pow+0xc6>
 8018950:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8018954:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8018958:	ea53 0308 	orrs.w	r3, r3, r8
 801895c:	f000 8466 	beq.w	801922c <__ieee754_pow+0x9c4>
 8018960:	4b4d      	ldr	r3, [pc, #308]	; (8018a98 <__ieee754_pow+0x230>)
 8018962:	429c      	cmp	r4, r3
 8018964:	dd0d      	ble.n	8018982 <__ieee754_pow+0x11a>
 8018966:	2f00      	cmp	r7, #0
 8018968:	f280 8464 	bge.w	8019234 <__ieee754_pow+0x9cc>
 801896c:	2000      	movs	r0, #0
 801896e:	2100      	movs	r1, #0
 8018970:	ec41 0b10 	vmov	d0, r0, r1
 8018974:	b00d      	add	sp, #52	; 0x34
 8018976:	ecbd 8b06 	vpop	{d8-d10}
 801897a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801897e:	2102      	movs	r1, #2
 8018980:	e7e0      	b.n	8018944 <__ieee754_pow+0xdc>
 8018982:	2f00      	cmp	r7, #0
 8018984:	daf2      	bge.n	801896c <__ieee754_pow+0x104>
 8018986:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 801898a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 801898e:	e7ef      	b.n	8018970 <__ieee754_pow+0x108>
 8018990:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8018994:	d104      	bne.n	80189a0 <__ieee754_pow+0x138>
 8018996:	4610      	mov	r0, r2
 8018998:	4619      	mov	r1, r3
 801899a:	f7e7 fe4d 	bl	8000638 <__aeabi_dmul>
 801899e:	e7e7      	b.n	8018970 <__ieee754_pow+0x108>
 80189a0:	493e      	ldr	r1, [pc, #248]	; (8018a9c <__ieee754_pow+0x234>)
 80189a2:	428f      	cmp	r7, r1
 80189a4:	d10d      	bne.n	80189c2 <__ieee754_pow+0x15a>
 80189a6:	f1b9 0f00 	cmp.w	r9, #0
 80189aa:	db0a      	blt.n	80189c2 <__ieee754_pow+0x15a>
 80189ac:	ec43 2b10 	vmov	d0, r2, r3
 80189b0:	b00d      	add	sp, #52	; 0x34
 80189b2:	ecbd 8b06 	vpop	{d8-d10}
 80189b6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189ba:	f000 be83 	b.w	80196c4 <__ieee754_sqrt>
 80189be:	2100      	movs	r1, #0
 80189c0:	9100      	str	r1, [sp, #0]
 80189c2:	ec43 2b10 	vmov	d0, r2, r3
 80189c6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80189ca:	f002 f93d 	bl	801ac48 <fabs>
 80189ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80189d2:	ec51 0b10 	vmov	r0, r1, d0
 80189d6:	f1b8 0f00 	cmp.w	r8, #0
 80189da:	d12a      	bne.n	8018a32 <__ieee754_pow+0x1ca>
 80189dc:	b12c      	cbz	r4, 80189ea <__ieee754_pow+0x182>
 80189de:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8018a94 <__ieee754_pow+0x22c>
 80189e2:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80189e6:	45e6      	cmp	lr, ip
 80189e8:	d123      	bne.n	8018a32 <__ieee754_pow+0x1ca>
 80189ea:	2f00      	cmp	r7, #0
 80189ec:	da05      	bge.n	80189fa <__ieee754_pow+0x192>
 80189ee:	4602      	mov	r2, r0
 80189f0:	460b      	mov	r3, r1
 80189f2:	2000      	movs	r0, #0
 80189f4:	4927      	ldr	r1, [pc, #156]	; (8018a94 <__ieee754_pow+0x22c>)
 80189f6:	f7e7 ff49 	bl	800088c <__aeabi_ddiv>
 80189fa:	f1b9 0f00 	cmp.w	r9, #0
 80189fe:	dab7      	bge.n	8018970 <__ieee754_pow+0x108>
 8018a00:	9b00      	ldr	r3, [sp, #0]
 8018a02:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8018a06:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8018a0a:	4323      	orrs	r3, r4
 8018a0c:	d108      	bne.n	8018a20 <__ieee754_pow+0x1b8>
 8018a0e:	4602      	mov	r2, r0
 8018a10:	460b      	mov	r3, r1
 8018a12:	4610      	mov	r0, r2
 8018a14:	4619      	mov	r1, r3
 8018a16:	f7e7 fc57 	bl	80002c8 <__aeabi_dsub>
 8018a1a:	4602      	mov	r2, r0
 8018a1c:	460b      	mov	r3, r1
 8018a1e:	e78d      	b.n	801893c <__ieee754_pow+0xd4>
 8018a20:	9b00      	ldr	r3, [sp, #0]
 8018a22:	2b01      	cmp	r3, #1
 8018a24:	d1a4      	bne.n	8018970 <__ieee754_pow+0x108>
 8018a26:	4602      	mov	r2, r0
 8018a28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8018a2c:	4610      	mov	r0, r2
 8018a2e:	4619      	mov	r1, r3
 8018a30:	e79e      	b.n	8018970 <__ieee754_pow+0x108>
 8018a32:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8018a36:	f10c 35ff 	add.w	r5, ip, #4294967295
 8018a3a:	950a      	str	r5, [sp, #40]	; 0x28
 8018a3c:	9d00      	ldr	r5, [sp, #0]
 8018a3e:	46ac      	mov	ip, r5
 8018a40:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8018a42:	ea5c 0505 	orrs.w	r5, ip, r5
 8018a46:	d0e4      	beq.n	8018a12 <__ieee754_pow+0x1aa>
 8018a48:	4b15      	ldr	r3, [pc, #84]	; (8018aa0 <__ieee754_pow+0x238>)
 8018a4a:	429e      	cmp	r6, r3
 8018a4c:	f340 80fc 	ble.w	8018c48 <__ieee754_pow+0x3e0>
 8018a50:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8018a54:	429e      	cmp	r6, r3
 8018a56:	4b10      	ldr	r3, [pc, #64]	; (8018a98 <__ieee754_pow+0x230>)
 8018a58:	dd07      	ble.n	8018a6a <__ieee754_pow+0x202>
 8018a5a:	429c      	cmp	r4, r3
 8018a5c:	dc0a      	bgt.n	8018a74 <__ieee754_pow+0x20c>
 8018a5e:	2f00      	cmp	r7, #0
 8018a60:	da84      	bge.n	801896c <__ieee754_pow+0x104>
 8018a62:	a307      	add	r3, pc, #28	; (adr r3, 8018a80 <__ieee754_pow+0x218>)
 8018a64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018a68:	e795      	b.n	8018996 <__ieee754_pow+0x12e>
 8018a6a:	429c      	cmp	r4, r3
 8018a6c:	dbf7      	blt.n	8018a5e <__ieee754_pow+0x1f6>
 8018a6e:	4b09      	ldr	r3, [pc, #36]	; (8018a94 <__ieee754_pow+0x22c>)
 8018a70:	429c      	cmp	r4, r3
 8018a72:	dd17      	ble.n	8018aa4 <__ieee754_pow+0x23c>
 8018a74:	2f00      	cmp	r7, #0
 8018a76:	dcf4      	bgt.n	8018a62 <__ieee754_pow+0x1fa>
 8018a78:	e778      	b.n	801896c <__ieee754_pow+0x104>
 8018a7a:	bf00      	nop
 8018a7c:	f3af 8000 	nop.w
 8018a80:	8800759c 	.word	0x8800759c
 8018a84:	7e37e43c 	.word	0x7e37e43c
 8018a88:	7ff00000 	.word	0x7ff00000
 8018a8c:	0803ef53 	.word	0x0803ef53
 8018a90:	433fffff 	.word	0x433fffff
 8018a94:	3ff00000 	.word	0x3ff00000
 8018a98:	3fefffff 	.word	0x3fefffff
 8018a9c:	3fe00000 	.word	0x3fe00000
 8018aa0:	41e00000 	.word	0x41e00000
 8018aa4:	4b64      	ldr	r3, [pc, #400]	; (8018c38 <__ieee754_pow+0x3d0>)
 8018aa6:	2200      	movs	r2, #0
 8018aa8:	f7e7 fc0e 	bl	80002c8 <__aeabi_dsub>
 8018aac:	a356      	add	r3, pc, #344	; (adr r3, 8018c08 <__ieee754_pow+0x3a0>)
 8018aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ab2:	4604      	mov	r4, r0
 8018ab4:	460d      	mov	r5, r1
 8018ab6:	f7e7 fdbf 	bl	8000638 <__aeabi_dmul>
 8018aba:	a355      	add	r3, pc, #340	; (adr r3, 8018c10 <__ieee754_pow+0x3a8>)
 8018abc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ac0:	4606      	mov	r6, r0
 8018ac2:	460f      	mov	r7, r1
 8018ac4:	4620      	mov	r0, r4
 8018ac6:	4629      	mov	r1, r5
 8018ac8:	f7e7 fdb6 	bl	8000638 <__aeabi_dmul>
 8018acc:	4b5b      	ldr	r3, [pc, #364]	; (8018c3c <__ieee754_pow+0x3d4>)
 8018ace:	4682      	mov	sl, r0
 8018ad0:	468b      	mov	fp, r1
 8018ad2:	2200      	movs	r2, #0
 8018ad4:	4620      	mov	r0, r4
 8018ad6:	4629      	mov	r1, r5
 8018ad8:	f7e7 fdae 	bl	8000638 <__aeabi_dmul>
 8018adc:	4602      	mov	r2, r0
 8018ade:	460b      	mov	r3, r1
 8018ae0:	a14d      	add	r1, pc, #308	; (adr r1, 8018c18 <__ieee754_pow+0x3b0>)
 8018ae2:	e9d1 0100 	ldrd	r0, r1, [r1]
 8018ae6:	f7e7 fbef 	bl	80002c8 <__aeabi_dsub>
 8018aea:	4622      	mov	r2, r4
 8018aec:	462b      	mov	r3, r5
 8018aee:	f7e7 fda3 	bl	8000638 <__aeabi_dmul>
 8018af2:	4602      	mov	r2, r0
 8018af4:	460b      	mov	r3, r1
 8018af6:	2000      	movs	r0, #0
 8018af8:	4951      	ldr	r1, [pc, #324]	; (8018c40 <__ieee754_pow+0x3d8>)
 8018afa:	f7e7 fbe5 	bl	80002c8 <__aeabi_dsub>
 8018afe:	4622      	mov	r2, r4
 8018b00:	4680      	mov	r8, r0
 8018b02:	4689      	mov	r9, r1
 8018b04:	462b      	mov	r3, r5
 8018b06:	4620      	mov	r0, r4
 8018b08:	4629      	mov	r1, r5
 8018b0a:	f7e7 fd95 	bl	8000638 <__aeabi_dmul>
 8018b0e:	4602      	mov	r2, r0
 8018b10:	460b      	mov	r3, r1
 8018b12:	4640      	mov	r0, r8
 8018b14:	4649      	mov	r1, r9
 8018b16:	f7e7 fd8f 	bl	8000638 <__aeabi_dmul>
 8018b1a:	a341      	add	r3, pc, #260	; (adr r3, 8018c20 <__ieee754_pow+0x3b8>)
 8018b1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018b20:	f7e7 fd8a 	bl	8000638 <__aeabi_dmul>
 8018b24:	4602      	mov	r2, r0
 8018b26:	460b      	mov	r3, r1
 8018b28:	4650      	mov	r0, sl
 8018b2a:	4659      	mov	r1, fp
 8018b2c:	f7e7 fbcc 	bl	80002c8 <__aeabi_dsub>
 8018b30:	4602      	mov	r2, r0
 8018b32:	460b      	mov	r3, r1
 8018b34:	4680      	mov	r8, r0
 8018b36:	4689      	mov	r9, r1
 8018b38:	4630      	mov	r0, r6
 8018b3a:	4639      	mov	r1, r7
 8018b3c:	f7e7 fbc6 	bl	80002cc <__adddf3>
 8018b40:	2400      	movs	r4, #0
 8018b42:	4632      	mov	r2, r6
 8018b44:	463b      	mov	r3, r7
 8018b46:	4620      	mov	r0, r4
 8018b48:	460d      	mov	r5, r1
 8018b4a:	f7e7 fbbd 	bl	80002c8 <__aeabi_dsub>
 8018b4e:	4602      	mov	r2, r0
 8018b50:	460b      	mov	r3, r1
 8018b52:	4640      	mov	r0, r8
 8018b54:	4649      	mov	r1, r9
 8018b56:	f7e7 fbb7 	bl	80002c8 <__aeabi_dsub>
 8018b5a:	9b00      	ldr	r3, [sp, #0]
 8018b5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8018b5e:	3b01      	subs	r3, #1
 8018b60:	4313      	orrs	r3, r2
 8018b62:	4682      	mov	sl, r0
 8018b64:	468b      	mov	fp, r1
 8018b66:	f040 81f1 	bne.w	8018f4c <__ieee754_pow+0x6e4>
 8018b6a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8018c28 <__ieee754_pow+0x3c0>
 8018b6e:	eeb0 8a47 	vmov.f32	s16, s14
 8018b72:	eef0 8a67 	vmov.f32	s17, s15
 8018b76:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8018b7a:	2600      	movs	r6, #0
 8018b7c:	4632      	mov	r2, r6
 8018b7e:	463b      	mov	r3, r7
 8018b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8018b84:	f7e7 fba0 	bl	80002c8 <__aeabi_dsub>
 8018b88:	4622      	mov	r2, r4
 8018b8a:	462b      	mov	r3, r5
 8018b8c:	f7e7 fd54 	bl	8000638 <__aeabi_dmul>
 8018b90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8018b94:	4680      	mov	r8, r0
 8018b96:	4689      	mov	r9, r1
 8018b98:	4650      	mov	r0, sl
 8018b9a:	4659      	mov	r1, fp
 8018b9c:	f7e7 fd4c 	bl	8000638 <__aeabi_dmul>
 8018ba0:	4602      	mov	r2, r0
 8018ba2:	460b      	mov	r3, r1
 8018ba4:	4640      	mov	r0, r8
 8018ba6:	4649      	mov	r1, r9
 8018ba8:	f7e7 fb90 	bl	80002cc <__adddf3>
 8018bac:	4632      	mov	r2, r6
 8018bae:	463b      	mov	r3, r7
 8018bb0:	4680      	mov	r8, r0
 8018bb2:	4689      	mov	r9, r1
 8018bb4:	4620      	mov	r0, r4
 8018bb6:	4629      	mov	r1, r5
 8018bb8:	f7e7 fd3e 	bl	8000638 <__aeabi_dmul>
 8018bbc:	460b      	mov	r3, r1
 8018bbe:	4604      	mov	r4, r0
 8018bc0:	460d      	mov	r5, r1
 8018bc2:	4602      	mov	r2, r0
 8018bc4:	4649      	mov	r1, r9
 8018bc6:	4640      	mov	r0, r8
 8018bc8:	f7e7 fb80 	bl	80002cc <__adddf3>
 8018bcc:	4b1d      	ldr	r3, [pc, #116]	; (8018c44 <__ieee754_pow+0x3dc>)
 8018bce:	4299      	cmp	r1, r3
 8018bd0:	ec45 4b19 	vmov	d9, r4, r5
 8018bd4:	4606      	mov	r6, r0
 8018bd6:	460f      	mov	r7, r1
 8018bd8:	468b      	mov	fp, r1
 8018bda:	f340 82fe 	ble.w	80191da <__ieee754_pow+0x972>
 8018bde:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8018be2:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8018be6:	4303      	orrs	r3, r0
 8018be8:	f000 81f0 	beq.w	8018fcc <__ieee754_pow+0x764>
 8018bec:	a310      	add	r3, pc, #64	; (adr r3, 8018c30 <__ieee754_pow+0x3c8>)
 8018bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018bf2:	ec51 0b18 	vmov	r0, r1, d8
 8018bf6:	f7e7 fd1f 	bl	8000638 <__aeabi_dmul>
 8018bfa:	a30d      	add	r3, pc, #52	; (adr r3, 8018c30 <__ieee754_pow+0x3c8>)
 8018bfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018c00:	e6cb      	b.n	801899a <__ieee754_pow+0x132>
 8018c02:	bf00      	nop
 8018c04:	f3af 8000 	nop.w
 8018c08:	60000000 	.word	0x60000000
 8018c0c:	3ff71547 	.word	0x3ff71547
 8018c10:	f85ddf44 	.word	0xf85ddf44
 8018c14:	3e54ae0b 	.word	0x3e54ae0b
 8018c18:	55555555 	.word	0x55555555
 8018c1c:	3fd55555 	.word	0x3fd55555
 8018c20:	652b82fe 	.word	0x652b82fe
 8018c24:	3ff71547 	.word	0x3ff71547
 8018c28:	00000000 	.word	0x00000000
 8018c2c:	bff00000 	.word	0xbff00000
 8018c30:	8800759c 	.word	0x8800759c
 8018c34:	7e37e43c 	.word	0x7e37e43c
 8018c38:	3ff00000 	.word	0x3ff00000
 8018c3c:	3fd00000 	.word	0x3fd00000
 8018c40:	3fe00000 	.word	0x3fe00000
 8018c44:	408fffff 	.word	0x408fffff
 8018c48:	4bd7      	ldr	r3, [pc, #860]	; (8018fa8 <__ieee754_pow+0x740>)
 8018c4a:	ea03 0309 	and.w	r3, r3, r9
 8018c4e:	2200      	movs	r2, #0
 8018c50:	b92b      	cbnz	r3, 8018c5e <__ieee754_pow+0x3f6>
 8018c52:	4bd6      	ldr	r3, [pc, #856]	; (8018fac <__ieee754_pow+0x744>)
 8018c54:	f7e7 fcf0 	bl	8000638 <__aeabi_dmul>
 8018c58:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8018c5c:	460c      	mov	r4, r1
 8018c5e:	1523      	asrs	r3, r4, #20
 8018c60:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8018c64:	4413      	add	r3, r2
 8018c66:	9309      	str	r3, [sp, #36]	; 0x24
 8018c68:	4bd1      	ldr	r3, [pc, #836]	; (8018fb0 <__ieee754_pow+0x748>)
 8018c6a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8018c6e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8018c72:	429c      	cmp	r4, r3
 8018c74:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8018c78:	dd08      	ble.n	8018c8c <__ieee754_pow+0x424>
 8018c7a:	4bce      	ldr	r3, [pc, #824]	; (8018fb4 <__ieee754_pow+0x74c>)
 8018c7c:	429c      	cmp	r4, r3
 8018c7e:	f340 8163 	ble.w	8018f48 <__ieee754_pow+0x6e0>
 8018c82:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018c84:	3301      	adds	r3, #1
 8018c86:	9309      	str	r3, [sp, #36]	; 0x24
 8018c88:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8018c8c:	2400      	movs	r4, #0
 8018c8e:	00e3      	lsls	r3, r4, #3
 8018c90:	930b      	str	r3, [sp, #44]	; 0x2c
 8018c92:	4bc9      	ldr	r3, [pc, #804]	; (8018fb8 <__ieee754_pow+0x750>)
 8018c94:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8018c98:	ed93 7b00 	vldr	d7, [r3]
 8018c9c:	4629      	mov	r1, r5
 8018c9e:	ec53 2b17 	vmov	r2, r3, d7
 8018ca2:	eeb0 8a47 	vmov.f32	s16, s14
 8018ca6:	eef0 8a67 	vmov.f32	s17, s15
 8018caa:	4682      	mov	sl, r0
 8018cac:	f7e7 fb0c 	bl	80002c8 <__aeabi_dsub>
 8018cb0:	4652      	mov	r2, sl
 8018cb2:	4606      	mov	r6, r0
 8018cb4:	460f      	mov	r7, r1
 8018cb6:	462b      	mov	r3, r5
 8018cb8:	ec51 0b18 	vmov	r0, r1, d8
 8018cbc:	f7e7 fb06 	bl	80002cc <__adddf3>
 8018cc0:	4602      	mov	r2, r0
 8018cc2:	460b      	mov	r3, r1
 8018cc4:	2000      	movs	r0, #0
 8018cc6:	49bd      	ldr	r1, [pc, #756]	; (8018fbc <__ieee754_pow+0x754>)
 8018cc8:	f7e7 fde0 	bl	800088c <__aeabi_ddiv>
 8018ccc:	ec41 0b19 	vmov	d9, r0, r1
 8018cd0:	4602      	mov	r2, r0
 8018cd2:	460b      	mov	r3, r1
 8018cd4:	4630      	mov	r0, r6
 8018cd6:	4639      	mov	r1, r7
 8018cd8:	f7e7 fcae 	bl	8000638 <__aeabi_dmul>
 8018cdc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8018ce0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018ce4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8018ce8:	2300      	movs	r3, #0
 8018cea:	9304      	str	r3, [sp, #16]
 8018cec:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8018cf0:	46ab      	mov	fp, r5
 8018cf2:	106d      	asrs	r5, r5, #1
 8018cf4:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8018cf8:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8018cfc:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8018d00:	2200      	movs	r2, #0
 8018d02:	4640      	mov	r0, r8
 8018d04:	4649      	mov	r1, r9
 8018d06:	4614      	mov	r4, r2
 8018d08:	461d      	mov	r5, r3
 8018d0a:	f7e7 fc95 	bl	8000638 <__aeabi_dmul>
 8018d0e:	4602      	mov	r2, r0
 8018d10:	460b      	mov	r3, r1
 8018d12:	4630      	mov	r0, r6
 8018d14:	4639      	mov	r1, r7
 8018d16:	f7e7 fad7 	bl	80002c8 <__aeabi_dsub>
 8018d1a:	ec53 2b18 	vmov	r2, r3, d8
 8018d1e:	4606      	mov	r6, r0
 8018d20:	460f      	mov	r7, r1
 8018d22:	4620      	mov	r0, r4
 8018d24:	4629      	mov	r1, r5
 8018d26:	f7e7 facf 	bl	80002c8 <__aeabi_dsub>
 8018d2a:	4602      	mov	r2, r0
 8018d2c:	460b      	mov	r3, r1
 8018d2e:	4650      	mov	r0, sl
 8018d30:	4659      	mov	r1, fp
 8018d32:	f7e7 fac9 	bl	80002c8 <__aeabi_dsub>
 8018d36:	4642      	mov	r2, r8
 8018d38:	464b      	mov	r3, r9
 8018d3a:	f7e7 fc7d 	bl	8000638 <__aeabi_dmul>
 8018d3e:	4602      	mov	r2, r0
 8018d40:	460b      	mov	r3, r1
 8018d42:	4630      	mov	r0, r6
 8018d44:	4639      	mov	r1, r7
 8018d46:	f7e7 fabf 	bl	80002c8 <__aeabi_dsub>
 8018d4a:	ec53 2b19 	vmov	r2, r3, d9
 8018d4e:	f7e7 fc73 	bl	8000638 <__aeabi_dmul>
 8018d52:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018d56:	ec41 0b18 	vmov	d8, r0, r1
 8018d5a:	4610      	mov	r0, r2
 8018d5c:	4619      	mov	r1, r3
 8018d5e:	f7e7 fc6b 	bl	8000638 <__aeabi_dmul>
 8018d62:	a37d      	add	r3, pc, #500	; (adr r3, 8018f58 <__ieee754_pow+0x6f0>)
 8018d64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d68:	4604      	mov	r4, r0
 8018d6a:	460d      	mov	r5, r1
 8018d6c:	f7e7 fc64 	bl	8000638 <__aeabi_dmul>
 8018d70:	a37b      	add	r3, pc, #492	; (adr r3, 8018f60 <__ieee754_pow+0x6f8>)
 8018d72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d76:	f7e7 faa9 	bl	80002cc <__adddf3>
 8018d7a:	4622      	mov	r2, r4
 8018d7c:	462b      	mov	r3, r5
 8018d7e:	f7e7 fc5b 	bl	8000638 <__aeabi_dmul>
 8018d82:	a379      	add	r3, pc, #484	; (adr r3, 8018f68 <__ieee754_pow+0x700>)
 8018d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d88:	f7e7 faa0 	bl	80002cc <__adddf3>
 8018d8c:	4622      	mov	r2, r4
 8018d8e:	462b      	mov	r3, r5
 8018d90:	f7e7 fc52 	bl	8000638 <__aeabi_dmul>
 8018d94:	a376      	add	r3, pc, #472	; (adr r3, 8018f70 <__ieee754_pow+0x708>)
 8018d96:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018d9a:	f7e7 fa97 	bl	80002cc <__adddf3>
 8018d9e:	4622      	mov	r2, r4
 8018da0:	462b      	mov	r3, r5
 8018da2:	f7e7 fc49 	bl	8000638 <__aeabi_dmul>
 8018da6:	a374      	add	r3, pc, #464	; (adr r3, 8018f78 <__ieee754_pow+0x710>)
 8018da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dac:	f7e7 fa8e 	bl	80002cc <__adddf3>
 8018db0:	4622      	mov	r2, r4
 8018db2:	462b      	mov	r3, r5
 8018db4:	f7e7 fc40 	bl	8000638 <__aeabi_dmul>
 8018db8:	a371      	add	r3, pc, #452	; (adr r3, 8018f80 <__ieee754_pow+0x718>)
 8018dba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018dbe:	f7e7 fa85 	bl	80002cc <__adddf3>
 8018dc2:	4622      	mov	r2, r4
 8018dc4:	4606      	mov	r6, r0
 8018dc6:	460f      	mov	r7, r1
 8018dc8:	462b      	mov	r3, r5
 8018dca:	4620      	mov	r0, r4
 8018dcc:	4629      	mov	r1, r5
 8018dce:	f7e7 fc33 	bl	8000638 <__aeabi_dmul>
 8018dd2:	4602      	mov	r2, r0
 8018dd4:	460b      	mov	r3, r1
 8018dd6:	4630      	mov	r0, r6
 8018dd8:	4639      	mov	r1, r7
 8018dda:	f7e7 fc2d 	bl	8000638 <__aeabi_dmul>
 8018dde:	4642      	mov	r2, r8
 8018de0:	4604      	mov	r4, r0
 8018de2:	460d      	mov	r5, r1
 8018de4:	464b      	mov	r3, r9
 8018de6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8018dea:	f7e7 fa6f 	bl	80002cc <__adddf3>
 8018dee:	ec53 2b18 	vmov	r2, r3, d8
 8018df2:	f7e7 fc21 	bl	8000638 <__aeabi_dmul>
 8018df6:	4622      	mov	r2, r4
 8018df8:	462b      	mov	r3, r5
 8018dfa:	f7e7 fa67 	bl	80002cc <__adddf3>
 8018dfe:	4642      	mov	r2, r8
 8018e00:	4682      	mov	sl, r0
 8018e02:	468b      	mov	fp, r1
 8018e04:	464b      	mov	r3, r9
 8018e06:	4640      	mov	r0, r8
 8018e08:	4649      	mov	r1, r9
 8018e0a:	f7e7 fc15 	bl	8000638 <__aeabi_dmul>
 8018e0e:	4b6c      	ldr	r3, [pc, #432]	; (8018fc0 <__ieee754_pow+0x758>)
 8018e10:	2200      	movs	r2, #0
 8018e12:	4606      	mov	r6, r0
 8018e14:	460f      	mov	r7, r1
 8018e16:	f7e7 fa59 	bl	80002cc <__adddf3>
 8018e1a:	4652      	mov	r2, sl
 8018e1c:	465b      	mov	r3, fp
 8018e1e:	f7e7 fa55 	bl	80002cc <__adddf3>
 8018e22:	9c04      	ldr	r4, [sp, #16]
 8018e24:	460d      	mov	r5, r1
 8018e26:	4622      	mov	r2, r4
 8018e28:	460b      	mov	r3, r1
 8018e2a:	4640      	mov	r0, r8
 8018e2c:	4649      	mov	r1, r9
 8018e2e:	f7e7 fc03 	bl	8000638 <__aeabi_dmul>
 8018e32:	4b63      	ldr	r3, [pc, #396]	; (8018fc0 <__ieee754_pow+0x758>)
 8018e34:	4680      	mov	r8, r0
 8018e36:	4689      	mov	r9, r1
 8018e38:	2200      	movs	r2, #0
 8018e3a:	4620      	mov	r0, r4
 8018e3c:	4629      	mov	r1, r5
 8018e3e:	f7e7 fa43 	bl	80002c8 <__aeabi_dsub>
 8018e42:	4632      	mov	r2, r6
 8018e44:	463b      	mov	r3, r7
 8018e46:	f7e7 fa3f 	bl	80002c8 <__aeabi_dsub>
 8018e4a:	4602      	mov	r2, r0
 8018e4c:	460b      	mov	r3, r1
 8018e4e:	4650      	mov	r0, sl
 8018e50:	4659      	mov	r1, fp
 8018e52:	f7e7 fa39 	bl	80002c8 <__aeabi_dsub>
 8018e56:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8018e5a:	f7e7 fbed 	bl	8000638 <__aeabi_dmul>
 8018e5e:	4622      	mov	r2, r4
 8018e60:	4606      	mov	r6, r0
 8018e62:	460f      	mov	r7, r1
 8018e64:	462b      	mov	r3, r5
 8018e66:	ec51 0b18 	vmov	r0, r1, d8
 8018e6a:	f7e7 fbe5 	bl	8000638 <__aeabi_dmul>
 8018e6e:	4602      	mov	r2, r0
 8018e70:	460b      	mov	r3, r1
 8018e72:	4630      	mov	r0, r6
 8018e74:	4639      	mov	r1, r7
 8018e76:	f7e7 fa29 	bl	80002cc <__adddf3>
 8018e7a:	4606      	mov	r6, r0
 8018e7c:	460f      	mov	r7, r1
 8018e7e:	4602      	mov	r2, r0
 8018e80:	460b      	mov	r3, r1
 8018e82:	4640      	mov	r0, r8
 8018e84:	4649      	mov	r1, r9
 8018e86:	f7e7 fa21 	bl	80002cc <__adddf3>
 8018e8a:	9c04      	ldr	r4, [sp, #16]
 8018e8c:	a33e      	add	r3, pc, #248	; (adr r3, 8018f88 <__ieee754_pow+0x720>)
 8018e8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018e92:	4620      	mov	r0, r4
 8018e94:	460d      	mov	r5, r1
 8018e96:	f7e7 fbcf 	bl	8000638 <__aeabi_dmul>
 8018e9a:	4642      	mov	r2, r8
 8018e9c:	ec41 0b18 	vmov	d8, r0, r1
 8018ea0:	464b      	mov	r3, r9
 8018ea2:	4620      	mov	r0, r4
 8018ea4:	4629      	mov	r1, r5
 8018ea6:	f7e7 fa0f 	bl	80002c8 <__aeabi_dsub>
 8018eaa:	4602      	mov	r2, r0
 8018eac:	460b      	mov	r3, r1
 8018eae:	4630      	mov	r0, r6
 8018eb0:	4639      	mov	r1, r7
 8018eb2:	f7e7 fa09 	bl	80002c8 <__aeabi_dsub>
 8018eb6:	a336      	add	r3, pc, #216	; (adr r3, 8018f90 <__ieee754_pow+0x728>)
 8018eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ebc:	f7e7 fbbc 	bl	8000638 <__aeabi_dmul>
 8018ec0:	a335      	add	r3, pc, #212	; (adr r3, 8018f98 <__ieee754_pow+0x730>)
 8018ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ec6:	4606      	mov	r6, r0
 8018ec8:	460f      	mov	r7, r1
 8018eca:	4620      	mov	r0, r4
 8018ecc:	4629      	mov	r1, r5
 8018ece:	f7e7 fbb3 	bl	8000638 <__aeabi_dmul>
 8018ed2:	4602      	mov	r2, r0
 8018ed4:	460b      	mov	r3, r1
 8018ed6:	4630      	mov	r0, r6
 8018ed8:	4639      	mov	r1, r7
 8018eda:	f7e7 f9f7 	bl	80002cc <__adddf3>
 8018ede:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ee0:	4b38      	ldr	r3, [pc, #224]	; (8018fc4 <__ieee754_pow+0x75c>)
 8018ee2:	4413      	add	r3, r2
 8018ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018ee8:	f7e7 f9f0 	bl	80002cc <__adddf3>
 8018eec:	4682      	mov	sl, r0
 8018eee:	9809      	ldr	r0, [sp, #36]	; 0x24
 8018ef0:	468b      	mov	fp, r1
 8018ef2:	f7e7 fb37 	bl	8000564 <__aeabi_i2d>
 8018ef6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8018ef8:	4b33      	ldr	r3, [pc, #204]	; (8018fc8 <__ieee754_pow+0x760>)
 8018efa:	4413      	add	r3, r2
 8018efc:	e9d3 8900 	ldrd	r8, r9, [r3]
 8018f00:	4606      	mov	r6, r0
 8018f02:	460f      	mov	r7, r1
 8018f04:	4652      	mov	r2, sl
 8018f06:	465b      	mov	r3, fp
 8018f08:	ec51 0b18 	vmov	r0, r1, d8
 8018f0c:	f7e7 f9de 	bl	80002cc <__adddf3>
 8018f10:	4642      	mov	r2, r8
 8018f12:	464b      	mov	r3, r9
 8018f14:	f7e7 f9da 	bl	80002cc <__adddf3>
 8018f18:	4632      	mov	r2, r6
 8018f1a:	463b      	mov	r3, r7
 8018f1c:	f7e7 f9d6 	bl	80002cc <__adddf3>
 8018f20:	9c04      	ldr	r4, [sp, #16]
 8018f22:	4632      	mov	r2, r6
 8018f24:	463b      	mov	r3, r7
 8018f26:	4620      	mov	r0, r4
 8018f28:	460d      	mov	r5, r1
 8018f2a:	f7e7 f9cd 	bl	80002c8 <__aeabi_dsub>
 8018f2e:	4642      	mov	r2, r8
 8018f30:	464b      	mov	r3, r9
 8018f32:	f7e7 f9c9 	bl	80002c8 <__aeabi_dsub>
 8018f36:	ec53 2b18 	vmov	r2, r3, d8
 8018f3a:	f7e7 f9c5 	bl	80002c8 <__aeabi_dsub>
 8018f3e:	4602      	mov	r2, r0
 8018f40:	460b      	mov	r3, r1
 8018f42:	4650      	mov	r0, sl
 8018f44:	4659      	mov	r1, fp
 8018f46:	e606      	b.n	8018b56 <__ieee754_pow+0x2ee>
 8018f48:	2401      	movs	r4, #1
 8018f4a:	e6a0      	b.n	8018c8e <__ieee754_pow+0x426>
 8018f4c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8018fa0 <__ieee754_pow+0x738>
 8018f50:	e60d      	b.n	8018b6e <__ieee754_pow+0x306>
 8018f52:	bf00      	nop
 8018f54:	f3af 8000 	nop.w
 8018f58:	4a454eef 	.word	0x4a454eef
 8018f5c:	3fca7e28 	.word	0x3fca7e28
 8018f60:	93c9db65 	.word	0x93c9db65
 8018f64:	3fcd864a 	.word	0x3fcd864a
 8018f68:	a91d4101 	.word	0xa91d4101
 8018f6c:	3fd17460 	.word	0x3fd17460
 8018f70:	518f264d 	.word	0x518f264d
 8018f74:	3fd55555 	.word	0x3fd55555
 8018f78:	db6fabff 	.word	0xdb6fabff
 8018f7c:	3fdb6db6 	.word	0x3fdb6db6
 8018f80:	33333303 	.word	0x33333303
 8018f84:	3fe33333 	.word	0x3fe33333
 8018f88:	e0000000 	.word	0xe0000000
 8018f8c:	3feec709 	.word	0x3feec709
 8018f90:	dc3a03fd 	.word	0xdc3a03fd
 8018f94:	3feec709 	.word	0x3feec709
 8018f98:	145b01f5 	.word	0x145b01f5
 8018f9c:	be3e2fe0 	.word	0xbe3e2fe0
 8018fa0:	00000000 	.word	0x00000000
 8018fa4:	3ff00000 	.word	0x3ff00000
 8018fa8:	7ff00000 	.word	0x7ff00000
 8018fac:	43400000 	.word	0x43400000
 8018fb0:	0003988e 	.word	0x0003988e
 8018fb4:	000bb679 	.word	0x000bb679
 8018fb8:	0803e918 	.word	0x0803e918
 8018fbc:	3ff00000 	.word	0x3ff00000
 8018fc0:	40080000 	.word	0x40080000
 8018fc4:	0803e938 	.word	0x0803e938
 8018fc8:	0803e928 	.word	0x0803e928
 8018fcc:	a3b5      	add	r3, pc, #724	; (adr r3, 80192a4 <__ieee754_pow+0xa3c>)
 8018fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8018fd2:	4640      	mov	r0, r8
 8018fd4:	4649      	mov	r1, r9
 8018fd6:	f7e7 f979 	bl	80002cc <__adddf3>
 8018fda:	4622      	mov	r2, r4
 8018fdc:	ec41 0b1a 	vmov	d10, r0, r1
 8018fe0:	462b      	mov	r3, r5
 8018fe2:	4630      	mov	r0, r6
 8018fe4:	4639      	mov	r1, r7
 8018fe6:	f7e7 f96f 	bl	80002c8 <__aeabi_dsub>
 8018fea:	4602      	mov	r2, r0
 8018fec:	460b      	mov	r3, r1
 8018fee:	ec51 0b1a 	vmov	r0, r1, d10
 8018ff2:	f7e7 fdb1 	bl	8000b58 <__aeabi_dcmpgt>
 8018ff6:	2800      	cmp	r0, #0
 8018ff8:	f47f adf8 	bne.w	8018bec <__ieee754_pow+0x384>
 8018ffc:	4aa4      	ldr	r2, [pc, #656]	; (8019290 <__ieee754_pow+0xa28>)
 8018ffe:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8019002:	4293      	cmp	r3, r2
 8019004:	f340 810b 	ble.w	801921e <__ieee754_pow+0x9b6>
 8019008:	151b      	asrs	r3, r3, #20
 801900a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801900e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8019012:	fa4a f303 	asr.w	r3, sl, r3
 8019016:	445b      	add	r3, fp
 8019018:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801901c:	4e9d      	ldr	r6, [pc, #628]	; (8019294 <__ieee754_pow+0xa2c>)
 801901e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8019022:	4116      	asrs	r6, r2
 8019024:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8019028:	2000      	movs	r0, #0
 801902a:	ea23 0106 	bic.w	r1, r3, r6
 801902e:	f1c2 0214 	rsb	r2, r2, #20
 8019032:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8019036:	fa4a fa02 	asr.w	sl, sl, r2
 801903a:	f1bb 0f00 	cmp.w	fp, #0
 801903e:	4602      	mov	r2, r0
 8019040:	460b      	mov	r3, r1
 8019042:	4620      	mov	r0, r4
 8019044:	4629      	mov	r1, r5
 8019046:	bfb8      	it	lt
 8019048:	f1ca 0a00 	rsblt	sl, sl, #0
 801904c:	f7e7 f93c 	bl	80002c8 <__aeabi_dsub>
 8019050:	ec41 0b19 	vmov	d9, r0, r1
 8019054:	4642      	mov	r2, r8
 8019056:	464b      	mov	r3, r9
 8019058:	ec51 0b19 	vmov	r0, r1, d9
 801905c:	f7e7 f936 	bl	80002cc <__adddf3>
 8019060:	2400      	movs	r4, #0
 8019062:	a379      	add	r3, pc, #484	; (adr r3, 8019248 <__ieee754_pow+0x9e0>)
 8019064:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019068:	4620      	mov	r0, r4
 801906a:	460d      	mov	r5, r1
 801906c:	f7e7 fae4 	bl	8000638 <__aeabi_dmul>
 8019070:	ec53 2b19 	vmov	r2, r3, d9
 8019074:	4606      	mov	r6, r0
 8019076:	460f      	mov	r7, r1
 8019078:	4620      	mov	r0, r4
 801907a:	4629      	mov	r1, r5
 801907c:	f7e7 f924 	bl	80002c8 <__aeabi_dsub>
 8019080:	4602      	mov	r2, r0
 8019082:	460b      	mov	r3, r1
 8019084:	4640      	mov	r0, r8
 8019086:	4649      	mov	r1, r9
 8019088:	f7e7 f91e 	bl	80002c8 <__aeabi_dsub>
 801908c:	a370      	add	r3, pc, #448	; (adr r3, 8019250 <__ieee754_pow+0x9e8>)
 801908e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019092:	f7e7 fad1 	bl	8000638 <__aeabi_dmul>
 8019096:	a370      	add	r3, pc, #448	; (adr r3, 8019258 <__ieee754_pow+0x9f0>)
 8019098:	e9d3 2300 	ldrd	r2, r3, [r3]
 801909c:	4680      	mov	r8, r0
 801909e:	4689      	mov	r9, r1
 80190a0:	4620      	mov	r0, r4
 80190a2:	4629      	mov	r1, r5
 80190a4:	f7e7 fac8 	bl	8000638 <__aeabi_dmul>
 80190a8:	4602      	mov	r2, r0
 80190aa:	460b      	mov	r3, r1
 80190ac:	4640      	mov	r0, r8
 80190ae:	4649      	mov	r1, r9
 80190b0:	f7e7 f90c 	bl	80002cc <__adddf3>
 80190b4:	4604      	mov	r4, r0
 80190b6:	460d      	mov	r5, r1
 80190b8:	4602      	mov	r2, r0
 80190ba:	460b      	mov	r3, r1
 80190bc:	4630      	mov	r0, r6
 80190be:	4639      	mov	r1, r7
 80190c0:	f7e7 f904 	bl	80002cc <__adddf3>
 80190c4:	4632      	mov	r2, r6
 80190c6:	463b      	mov	r3, r7
 80190c8:	4680      	mov	r8, r0
 80190ca:	4689      	mov	r9, r1
 80190cc:	f7e7 f8fc 	bl	80002c8 <__aeabi_dsub>
 80190d0:	4602      	mov	r2, r0
 80190d2:	460b      	mov	r3, r1
 80190d4:	4620      	mov	r0, r4
 80190d6:	4629      	mov	r1, r5
 80190d8:	f7e7 f8f6 	bl	80002c8 <__aeabi_dsub>
 80190dc:	4642      	mov	r2, r8
 80190de:	4606      	mov	r6, r0
 80190e0:	460f      	mov	r7, r1
 80190e2:	464b      	mov	r3, r9
 80190e4:	4640      	mov	r0, r8
 80190e6:	4649      	mov	r1, r9
 80190e8:	f7e7 faa6 	bl	8000638 <__aeabi_dmul>
 80190ec:	a35c      	add	r3, pc, #368	; (adr r3, 8019260 <__ieee754_pow+0x9f8>)
 80190ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80190f2:	4604      	mov	r4, r0
 80190f4:	460d      	mov	r5, r1
 80190f6:	f7e7 fa9f 	bl	8000638 <__aeabi_dmul>
 80190fa:	a35b      	add	r3, pc, #364	; (adr r3, 8019268 <__ieee754_pow+0xa00>)
 80190fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019100:	f7e7 f8e2 	bl	80002c8 <__aeabi_dsub>
 8019104:	4622      	mov	r2, r4
 8019106:	462b      	mov	r3, r5
 8019108:	f7e7 fa96 	bl	8000638 <__aeabi_dmul>
 801910c:	a358      	add	r3, pc, #352	; (adr r3, 8019270 <__ieee754_pow+0xa08>)
 801910e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019112:	f7e7 f8db 	bl	80002cc <__adddf3>
 8019116:	4622      	mov	r2, r4
 8019118:	462b      	mov	r3, r5
 801911a:	f7e7 fa8d 	bl	8000638 <__aeabi_dmul>
 801911e:	a356      	add	r3, pc, #344	; (adr r3, 8019278 <__ieee754_pow+0xa10>)
 8019120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019124:	f7e7 f8d0 	bl	80002c8 <__aeabi_dsub>
 8019128:	4622      	mov	r2, r4
 801912a:	462b      	mov	r3, r5
 801912c:	f7e7 fa84 	bl	8000638 <__aeabi_dmul>
 8019130:	a353      	add	r3, pc, #332	; (adr r3, 8019280 <__ieee754_pow+0xa18>)
 8019132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019136:	f7e7 f8c9 	bl	80002cc <__adddf3>
 801913a:	4622      	mov	r2, r4
 801913c:	462b      	mov	r3, r5
 801913e:	f7e7 fa7b 	bl	8000638 <__aeabi_dmul>
 8019142:	4602      	mov	r2, r0
 8019144:	460b      	mov	r3, r1
 8019146:	4640      	mov	r0, r8
 8019148:	4649      	mov	r1, r9
 801914a:	f7e7 f8bd 	bl	80002c8 <__aeabi_dsub>
 801914e:	4604      	mov	r4, r0
 8019150:	460d      	mov	r5, r1
 8019152:	4602      	mov	r2, r0
 8019154:	460b      	mov	r3, r1
 8019156:	4640      	mov	r0, r8
 8019158:	4649      	mov	r1, r9
 801915a:	f7e7 fa6d 	bl	8000638 <__aeabi_dmul>
 801915e:	2200      	movs	r2, #0
 8019160:	ec41 0b19 	vmov	d9, r0, r1
 8019164:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8019168:	4620      	mov	r0, r4
 801916a:	4629      	mov	r1, r5
 801916c:	f7e7 f8ac 	bl	80002c8 <__aeabi_dsub>
 8019170:	4602      	mov	r2, r0
 8019172:	460b      	mov	r3, r1
 8019174:	ec51 0b19 	vmov	r0, r1, d9
 8019178:	f7e7 fb88 	bl	800088c <__aeabi_ddiv>
 801917c:	4632      	mov	r2, r6
 801917e:	4604      	mov	r4, r0
 8019180:	460d      	mov	r5, r1
 8019182:	463b      	mov	r3, r7
 8019184:	4640      	mov	r0, r8
 8019186:	4649      	mov	r1, r9
 8019188:	f7e7 fa56 	bl	8000638 <__aeabi_dmul>
 801918c:	4632      	mov	r2, r6
 801918e:	463b      	mov	r3, r7
 8019190:	f7e7 f89c 	bl	80002cc <__adddf3>
 8019194:	4602      	mov	r2, r0
 8019196:	460b      	mov	r3, r1
 8019198:	4620      	mov	r0, r4
 801919a:	4629      	mov	r1, r5
 801919c:	f7e7 f894 	bl	80002c8 <__aeabi_dsub>
 80191a0:	4642      	mov	r2, r8
 80191a2:	464b      	mov	r3, r9
 80191a4:	f7e7 f890 	bl	80002c8 <__aeabi_dsub>
 80191a8:	460b      	mov	r3, r1
 80191aa:	4602      	mov	r2, r0
 80191ac:	493a      	ldr	r1, [pc, #232]	; (8019298 <__ieee754_pow+0xa30>)
 80191ae:	2000      	movs	r0, #0
 80191b0:	f7e7 f88a 	bl	80002c8 <__aeabi_dsub>
 80191b4:	e9cd 0100 	strd	r0, r1, [sp]
 80191b8:	9b01      	ldr	r3, [sp, #4]
 80191ba:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80191be:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80191c2:	da2f      	bge.n	8019224 <__ieee754_pow+0x9bc>
 80191c4:	4650      	mov	r0, sl
 80191c6:	ed9d 0b00 	vldr	d0, [sp]
 80191ca:	f001 fde5 	bl	801ad98 <scalbn>
 80191ce:	ec51 0b10 	vmov	r0, r1, d0
 80191d2:	ec53 2b18 	vmov	r2, r3, d8
 80191d6:	f7ff bbe0 	b.w	801899a <__ieee754_pow+0x132>
 80191da:	4b30      	ldr	r3, [pc, #192]	; (801929c <__ieee754_pow+0xa34>)
 80191dc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 80191e0:	429e      	cmp	r6, r3
 80191e2:	f77f af0b 	ble.w	8018ffc <__ieee754_pow+0x794>
 80191e6:	4b2e      	ldr	r3, [pc, #184]	; (80192a0 <__ieee754_pow+0xa38>)
 80191e8:	440b      	add	r3, r1
 80191ea:	4303      	orrs	r3, r0
 80191ec:	d00b      	beq.n	8019206 <__ieee754_pow+0x99e>
 80191ee:	a326      	add	r3, pc, #152	; (adr r3, 8019288 <__ieee754_pow+0xa20>)
 80191f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80191f4:	ec51 0b18 	vmov	r0, r1, d8
 80191f8:	f7e7 fa1e 	bl	8000638 <__aeabi_dmul>
 80191fc:	a322      	add	r3, pc, #136	; (adr r3, 8019288 <__ieee754_pow+0xa20>)
 80191fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019202:	f7ff bbca 	b.w	801899a <__ieee754_pow+0x132>
 8019206:	4622      	mov	r2, r4
 8019208:	462b      	mov	r3, r5
 801920a:	f7e7 f85d 	bl	80002c8 <__aeabi_dsub>
 801920e:	4642      	mov	r2, r8
 8019210:	464b      	mov	r3, r9
 8019212:	f7e7 fc97 	bl	8000b44 <__aeabi_dcmpge>
 8019216:	2800      	cmp	r0, #0
 8019218:	f43f aef0 	beq.w	8018ffc <__ieee754_pow+0x794>
 801921c:	e7e7      	b.n	80191ee <__ieee754_pow+0x986>
 801921e:	f04f 0a00 	mov.w	sl, #0
 8019222:	e717      	b.n	8019054 <__ieee754_pow+0x7ec>
 8019224:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019228:	4619      	mov	r1, r3
 801922a:	e7d2      	b.n	80191d2 <__ieee754_pow+0x96a>
 801922c:	491a      	ldr	r1, [pc, #104]	; (8019298 <__ieee754_pow+0xa30>)
 801922e:	2000      	movs	r0, #0
 8019230:	f7ff bb9e 	b.w	8018970 <__ieee754_pow+0x108>
 8019234:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019238:	f7ff bb9a 	b.w	8018970 <__ieee754_pow+0x108>
 801923c:	9000      	str	r0, [sp, #0]
 801923e:	f7ff bb76 	b.w	801892e <__ieee754_pow+0xc6>
 8019242:	2100      	movs	r1, #0
 8019244:	f7ff bb60 	b.w	8018908 <__ieee754_pow+0xa0>
 8019248:	00000000 	.word	0x00000000
 801924c:	3fe62e43 	.word	0x3fe62e43
 8019250:	fefa39ef 	.word	0xfefa39ef
 8019254:	3fe62e42 	.word	0x3fe62e42
 8019258:	0ca86c39 	.word	0x0ca86c39
 801925c:	be205c61 	.word	0xbe205c61
 8019260:	72bea4d0 	.word	0x72bea4d0
 8019264:	3e663769 	.word	0x3e663769
 8019268:	c5d26bf1 	.word	0xc5d26bf1
 801926c:	3ebbbd41 	.word	0x3ebbbd41
 8019270:	af25de2c 	.word	0xaf25de2c
 8019274:	3f11566a 	.word	0x3f11566a
 8019278:	16bebd93 	.word	0x16bebd93
 801927c:	3f66c16c 	.word	0x3f66c16c
 8019280:	5555553e 	.word	0x5555553e
 8019284:	3fc55555 	.word	0x3fc55555
 8019288:	c2f8f359 	.word	0xc2f8f359
 801928c:	01a56e1f 	.word	0x01a56e1f
 8019290:	3fe00000 	.word	0x3fe00000
 8019294:	000fffff 	.word	0x000fffff
 8019298:	3ff00000 	.word	0x3ff00000
 801929c:	4090cbff 	.word	0x4090cbff
 80192a0:	3f6f3400 	.word	0x3f6f3400
 80192a4:	652b82fe 	.word	0x652b82fe
 80192a8:	3c971547 	.word	0x3c971547
 80192ac:	00000000 	.word	0x00000000

080192b0 <__ieee754_rem_pio2>:
 80192b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80192b4:	ed2d 8b02 	vpush	{d8}
 80192b8:	ec55 4b10 	vmov	r4, r5, d0
 80192bc:	4bca      	ldr	r3, [pc, #808]	; (80195e8 <__ieee754_rem_pio2+0x338>)
 80192be:	b08b      	sub	sp, #44	; 0x2c
 80192c0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80192c4:	4598      	cmp	r8, r3
 80192c6:	4682      	mov	sl, r0
 80192c8:	9502      	str	r5, [sp, #8]
 80192ca:	dc08      	bgt.n	80192de <__ieee754_rem_pio2+0x2e>
 80192cc:	2200      	movs	r2, #0
 80192ce:	2300      	movs	r3, #0
 80192d0:	ed80 0b00 	vstr	d0, [r0]
 80192d4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80192d8:	f04f 0b00 	mov.w	fp, #0
 80192dc:	e028      	b.n	8019330 <__ieee754_rem_pio2+0x80>
 80192de:	4bc3      	ldr	r3, [pc, #780]	; (80195ec <__ieee754_rem_pio2+0x33c>)
 80192e0:	4598      	cmp	r8, r3
 80192e2:	dc78      	bgt.n	80193d6 <__ieee754_rem_pio2+0x126>
 80192e4:	9b02      	ldr	r3, [sp, #8]
 80192e6:	4ec2      	ldr	r6, [pc, #776]	; (80195f0 <__ieee754_rem_pio2+0x340>)
 80192e8:	2b00      	cmp	r3, #0
 80192ea:	ee10 0a10 	vmov	r0, s0
 80192ee:	a3b0      	add	r3, pc, #704	; (adr r3, 80195b0 <__ieee754_rem_pio2+0x300>)
 80192f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80192f4:	4629      	mov	r1, r5
 80192f6:	dd39      	ble.n	801936c <__ieee754_rem_pio2+0xbc>
 80192f8:	f7e6 ffe6 	bl	80002c8 <__aeabi_dsub>
 80192fc:	45b0      	cmp	r8, r6
 80192fe:	4604      	mov	r4, r0
 8019300:	460d      	mov	r5, r1
 8019302:	d01b      	beq.n	801933c <__ieee754_rem_pio2+0x8c>
 8019304:	a3ac      	add	r3, pc, #688	; (adr r3, 80195b8 <__ieee754_rem_pio2+0x308>)
 8019306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801930a:	f7e6 ffdd 	bl	80002c8 <__aeabi_dsub>
 801930e:	4602      	mov	r2, r0
 8019310:	460b      	mov	r3, r1
 8019312:	e9ca 2300 	strd	r2, r3, [sl]
 8019316:	4620      	mov	r0, r4
 8019318:	4629      	mov	r1, r5
 801931a:	f7e6 ffd5 	bl	80002c8 <__aeabi_dsub>
 801931e:	a3a6      	add	r3, pc, #664	; (adr r3, 80195b8 <__ieee754_rem_pio2+0x308>)
 8019320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019324:	f7e6 ffd0 	bl	80002c8 <__aeabi_dsub>
 8019328:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801932c:	f04f 0b01 	mov.w	fp, #1
 8019330:	4658      	mov	r0, fp
 8019332:	b00b      	add	sp, #44	; 0x2c
 8019334:	ecbd 8b02 	vpop	{d8}
 8019338:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801933c:	a3a0      	add	r3, pc, #640	; (adr r3, 80195c0 <__ieee754_rem_pio2+0x310>)
 801933e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019342:	f7e6 ffc1 	bl	80002c8 <__aeabi_dsub>
 8019346:	a3a0      	add	r3, pc, #640	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x318>)
 8019348:	e9d3 2300 	ldrd	r2, r3, [r3]
 801934c:	4604      	mov	r4, r0
 801934e:	460d      	mov	r5, r1
 8019350:	f7e6 ffba 	bl	80002c8 <__aeabi_dsub>
 8019354:	4602      	mov	r2, r0
 8019356:	460b      	mov	r3, r1
 8019358:	e9ca 2300 	strd	r2, r3, [sl]
 801935c:	4620      	mov	r0, r4
 801935e:	4629      	mov	r1, r5
 8019360:	f7e6 ffb2 	bl	80002c8 <__aeabi_dsub>
 8019364:	a398      	add	r3, pc, #608	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x318>)
 8019366:	e9d3 2300 	ldrd	r2, r3, [r3]
 801936a:	e7db      	b.n	8019324 <__ieee754_rem_pio2+0x74>
 801936c:	f7e6 ffae 	bl	80002cc <__adddf3>
 8019370:	45b0      	cmp	r8, r6
 8019372:	4604      	mov	r4, r0
 8019374:	460d      	mov	r5, r1
 8019376:	d016      	beq.n	80193a6 <__ieee754_rem_pio2+0xf6>
 8019378:	a38f      	add	r3, pc, #572	; (adr r3, 80195b8 <__ieee754_rem_pio2+0x308>)
 801937a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801937e:	f7e6 ffa5 	bl	80002cc <__adddf3>
 8019382:	4602      	mov	r2, r0
 8019384:	460b      	mov	r3, r1
 8019386:	e9ca 2300 	strd	r2, r3, [sl]
 801938a:	4620      	mov	r0, r4
 801938c:	4629      	mov	r1, r5
 801938e:	f7e6 ff9b 	bl	80002c8 <__aeabi_dsub>
 8019392:	a389      	add	r3, pc, #548	; (adr r3, 80195b8 <__ieee754_rem_pio2+0x308>)
 8019394:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019398:	f7e6 ff98 	bl	80002cc <__adddf3>
 801939c:	f04f 3bff 	mov.w	fp, #4294967295
 80193a0:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80193a4:	e7c4      	b.n	8019330 <__ieee754_rem_pio2+0x80>
 80193a6:	a386      	add	r3, pc, #536	; (adr r3, 80195c0 <__ieee754_rem_pio2+0x310>)
 80193a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193ac:	f7e6 ff8e 	bl	80002cc <__adddf3>
 80193b0:	a385      	add	r3, pc, #532	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x318>)
 80193b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193b6:	4604      	mov	r4, r0
 80193b8:	460d      	mov	r5, r1
 80193ba:	f7e6 ff87 	bl	80002cc <__adddf3>
 80193be:	4602      	mov	r2, r0
 80193c0:	460b      	mov	r3, r1
 80193c2:	e9ca 2300 	strd	r2, r3, [sl]
 80193c6:	4620      	mov	r0, r4
 80193c8:	4629      	mov	r1, r5
 80193ca:	f7e6 ff7d 	bl	80002c8 <__aeabi_dsub>
 80193ce:	a37e      	add	r3, pc, #504	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x318>)
 80193d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193d4:	e7e0      	b.n	8019398 <__ieee754_rem_pio2+0xe8>
 80193d6:	4b87      	ldr	r3, [pc, #540]	; (80195f4 <__ieee754_rem_pio2+0x344>)
 80193d8:	4598      	cmp	r8, r3
 80193da:	f300 80d9 	bgt.w	8019590 <__ieee754_rem_pio2+0x2e0>
 80193de:	f001 fc33 	bl	801ac48 <fabs>
 80193e2:	ec55 4b10 	vmov	r4, r5, d0
 80193e6:	ee10 0a10 	vmov	r0, s0
 80193ea:	a379      	add	r3, pc, #484	; (adr r3, 80195d0 <__ieee754_rem_pio2+0x320>)
 80193ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80193f0:	4629      	mov	r1, r5
 80193f2:	f7e7 f921 	bl	8000638 <__aeabi_dmul>
 80193f6:	4b80      	ldr	r3, [pc, #512]	; (80195f8 <__ieee754_rem_pio2+0x348>)
 80193f8:	2200      	movs	r2, #0
 80193fa:	f7e6 ff67 	bl	80002cc <__adddf3>
 80193fe:	f7e7 fbcb 	bl	8000b98 <__aeabi_d2iz>
 8019402:	4683      	mov	fp, r0
 8019404:	f7e7 f8ae 	bl	8000564 <__aeabi_i2d>
 8019408:	4602      	mov	r2, r0
 801940a:	460b      	mov	r3, r1
 801940c:	ec43 2b18 	vmov	d8, r2, r3
 8019410:	a367      	add	r3, pc, #412	; (adr r3, 80195b0 <__ieee754_rem_pio2+0x300>)
 8019412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019416:	f7e7 f90f 	bl	8000638 <__aeabi_dmul>
 801941a:	4602      	mov	r2, r0
 801941c:	460b      	mov	r3, r1
 801941e:	4620      	mov	r0, r4
 8019420:	4629      	mov	r1, r5
 8019422:	f7e6 ff51 	bl	80002c8 <__aeabi_dsub>
 8019426:	a364      	add	r3, pc, #400	; (adr r3, 80195b8 <__ieee754_rem_pio2+0x308>)
 8019428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801942c:	4606      	mov	r6, r0
 801942e:	460f      	mov	r7, r1
 8019430:	ec51 0b18 	vmov	r0, r1, d8
 8019434:	f7e7 f900 	bl	8000638 <__aeabi_dmul>
 8019438:	f1bb 0f1f 	cmp.w	fp, #31
 801943c:	4604      	mov	r4, r0
 801943e:	460d      	mov	r5, r1
 8019440:	dc0d      	bgt.n	801945e <__ieee754_rem_pio2+0x1ae>
 8019442:	4b6e      	ldr	r3, [pc, #440]	; (80195fc <__ieee754_rem_pio2+0x34c>)
 8019444:	f10b 32ff 	add.w	r2, fp, #4294967295
 8019448:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801944c:	4543      	cmp	r3, r8
 801944e:	d006      	beq.n	801945e <__ieee754_rem_pio2+0x1ae>
 8019450:	4622      	mov	r2, r4
 8019452:	462b      	mov	r3, r5
 8019454:	4630      	mov	r0, r6
 8019456:	4639      	mov	r1, r7
 8019458:	f7e6 ff36 	bl	80002c8 <__aeabi_dsub>
 801945c:	e00f      	b.n	801947e <__ieee754_rem_pio2+0x1ce>
 801945e:	462b      	mov	r3, r5
 8019460:	4622      	mov	r2, r4
 8019462:	4630      	mov	r0, r6
 8019464:	4639      	mov	r1, r7
 8019466:	f7e6 ff2f 	bl	80002c8 <__aeabi_dsub>
 801946a:	ea4f 5328 	mov.w	r3, r8, asr #20
 801946e:	9303      	str	r3, [sp, #12]
 8019470:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8019474:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8019478:	f1b8 0f10 	cmp.w	r8, #16
 801947c:	dc02      	bgt.n	8019484 <__ieee754_rem_pio2+0x1d4>
 801947e:	e9ca 0100 	strd	r0, r1, [sl]
 8019482:	e039      	b.n	80194f8 <__ieee754_rem_pio2+0x248>
 8019484:	a34e      	add	r3, pc, #312	; (adr r3, 80195c0 <__ieee754_rem_pio2+0x310>)
 8019486:	e9d3 2300 	ldrd	r2, r3, [r3]
 801948a:	ec51 0b18 	vmov	r0, r1, d8
 801948e:	f7e7 f8d3 	bl	8000638 <__aeabi_dmul>
 8019492:	4604      	mov	r4, r0
 8019494:	460d      	mov	r5, r1
 8019496:	4602      	mov	r2, r0
 8019498:	460b      	mov	r3, r1
 801949a:	4630      	mov	r0, r6
 801949c:	4639      	mov	r1, r7
 801949e:	f7e6 ff13 	bl	80002c8 <__aeabi_dsub>
 80194a2:	4602      	mov	r2, r0
 80194a4:	460b      	mov	r3, r1
 80194a6:	4680      	mov	r8, r0
 80194a8:	4689      	mov	r9, r1
 80194aa:	4630      	mov	r0, r6
 80194ac:	4639      	mov	r1, r7
 80194ae:	f7e6 ff0b 	bl	80002c8 <__aeabi_dsub>
 80194b2:	4622      	mov	r2, r4
 80194b4:	462b      	mov	r3, r5
 80194b6:	f7e6 ff07 	bl	80002c8 <__aeabi_dsub>
 80194ba:	a343      	add	r3, pc, #268	; (adr r3, 80195c8 <__ieee754_rem_pio2+0x318>)
 80194bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80194c0:	4604      	mov	r4, r0
 80194c2:	460d      	mov	r5, r1
 80194c4:	ec51 0b18 	vmov	r0, r1, d8
 80194c8:	f7e7 f8b6 	bl	8000638 <__aeabi_dmul>
 80194cc:	4622      	mov	r2, r4
 80194ce:	462b      	mov	r3, r5
 80194d0:	f7e6 fefa 	bl	80002c8 <__aeabi_dsub>
 80194d4:	4602      	mov	r2, r0
 80194d6:	460b      	mov	r3, r1
 80194d8:	4604      	mov	r4, r0
 80194da:	460d      	mov	r5, r1
 80194dc:	4640      	mov	r0, r8
 80194de:	4649      	mov	r1, r9
 80194e0:	f7e6 fef2 	bl	80002c8 <__aeabi_dsub>
 80194e4:	9a03      	ldr	r2, [sp, #12]
 80194e6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80194ea:	1ad3      	subs	r3, r2, r3
 80194ec:	2b31      	cmp	r3, #49	; 0x31
 80194ee:	dc24      	bgt.n	801953a <__ieee754_rem_pio2+0x28a>
 80194f0:	e9ca 0100 	strd	r0, r1, [sl]
 80194f4:	4646      	mov	r6, r8
 80194f6:	464f      	mov	r7, r9
 80194f8:	e9da 8900 	ldrd	r8, r9, [sl]
 80194fc:	4630      	mov	r0, r6
 80194fe:	4642      	mov	r2, r8
 8019500:	464b      	mov	r3, r9
 8019502:	4639      	mov	r1, r7
 8019504:	f7e6 fee0 	bl	80002c8 <__aeabi_dsub>
 8019508:	462b      	mov	r3, r5
 801950a:	4622      	mov	r2, r4
 801950c:	f7e6 fedc 	bl	80002c8 <__aeabi_dsub>
 8019510:	9b02      	ldr	r3, [sp, #8]
 8019512:	2b00      	cmp	r3, #0
 8019514:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8019518:	f6bf af0a 	bge.w	8019330 <__ieee754_rem_pio2+0x80>
 801951c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8019520:	f8ca 3004 	str.w	r3, [sl, #4]
 8019524:	f8ca 8000 	str.w	r8, [sl]
 8019528:	f8ca 0008 	str.w	r0, [sl, #8]
 801952c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8019530:	f8ca 300c 	str.w	r3, [sl, #12]
 8019534:	f1cb 0b00 	rsb	fp, fp, #0
 8019538:	e6fa      	b.n	8019330 <__ieee754_rem_pio2+0x80>
 801953a:	a327      	add	r3, pc, #156	; (adr r3, 80195d8 <__ieee754_rem_pio2+0x328>)
 801953c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019540:	ec51 0b18 	vmov	r0, r1, d8
 8019544:	f7e7 f878 	bl	8000638 <__aeabi_dmul>
 8019548:	4604      	mov	r4, r0
 801954a:	460d      	mov	r5, r1
 801954c:	4602      	mov	r2, r0
 801954e:	460b      	mov	r3, r1
 8019550:	4640      	mov	r0, r8
 8019552:	4649      	mov	r1, r9
 8019554:	f7e6 feb8 	bl	80002c8 <__aeabi_dsub>
 8019558:	4602      	mov	r2, r0
 801955a:	460b      	mov	r3, r1
 801955c:	4606      	mov	r6, r0
 801955e:	460f      	mov	r7, r1
 8019560:	4640      	mov	r0, r8
 8019562:	4649      	mov	r1, r9
 8019564:	f7e6 feb0 	bl	80002c8 <__aeabi_dsub>
 8019568:	4622      	mov	r2, r4
 801956a:	462b      	mov	r3, r5
 801956c:	f7e6 feac 	bl	80002c8 <__aeabi_dsub>
 8019570:	a31b      	add	r3, pc, #108	; (adr r3, 80195e0 <__ieee754_rem_pio2+0x330>)
 8019572:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019576:	4604      	mov	r4, r0
 8019578:	460d      	mov	r5, r1
 801957a:	ec51 0b18 	vmov	r0, r1, d8
 801957e:	f7e7 f85b 	bl	8000638 <__aeabi_dmul>
 8019582:	4622      	mov	r2, r4
 8019584:	462b      	mov	r3, r5
 8019586:	f7e6 fe9f 	bl	80002c8 <__aeabi_dsub>
 801958a:	4604      	mov	r4, r0
 801958c:	460d      	mov	r5, r1
 801958e:	e75f      	b.n	8019450 <__ieee754_rem_pio2+0x1a0>
 8019590:	4b1b      	ldr	r3, [pc, #108]	; (8019600 <__ieee754_rem_pio2+0x350>)
 8019592:	4598      	cmp	r8, r3
 8019594:	dd36      	ble.n	8019604 <__ieee754_rem_pio2+0x354>
 8019596:	ee10 2a10 	vmov	r2, s0
 801959a:	462b      	mov	r3, r5
 801959c:	4620      	mov	r0, r4
 801959e:	4629      	mov	r1, r5
 80195a0:	f7e6 fe92 	bl	80002c8 <__aeabi_dsub>
 80195a4:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80195a8:	e9ca 0100 	strd	r0, r1, [sl]
 80195ac:	e694      	b.n	80192d8 <__ieee754_rem_pio2+0x28>
 80195ae:	bf00      	nop
 80195b0:	54400000 	.word	0x54400000
 80195b4:	3ff921fb 	.word	0x3ff921fb
 80195b8:	1a626331 	.word	0x1a626331
 80195bc:	3dd0b461 	.word	0x3dd0b461
 80195c0:	1a600000 	.word	0x1a600000
 80195c4:	3dd0b461 	.word	0x3dd0b461
 80195c8:	2e037073 	.word	0x2e037073
 80195cc:	3ba3198a 	.word	0x3ba3198a
 80195d0:	6dc9c883 	.word	0x6dc9c883
 80195d4:	3fe45f30 	.word	0x3fe45f30
 80195d8:	2e000000 	.word	0x2e000000
 80195dc:	3ba3198a 	.word	0x3ba3198a
 80195e0:	252049c1 	.word	0x252049c1
 80195e4:	397b839a 	.word	0x397b839a
 80195e8:	3fe921fb 	.word	0x3fe921fb
 80195ec:	4002d97b 	.word	0x4002d97b
 80195f0:	3ff921fb 	.word	0x3ff921fb
 80195f4:	413921fb 	.word	0x413921fb
 80195f8:	3fe00000 	.word	0x3fe00000
 80195fc:	0803e948 	.word	0x0803e948
 8019600:	7fefffff 	.word	0x7fefffff
 8019604:	ea4f 5428 	mov.w	r4, r8, asr #20
 8019608:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801960c:	ee10 0a10 	vmov	r0, s0
 8019610:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8019614:	ee10 6a10 	vmov	r6, s0
 8019618:	460f      	mov	r7, r1
 801961a:	f7e7 fabd 	bl	8000b98 <__aeabi_d2iz>
 801961e:	f7e6 ffa1 	bl	8000564 <__aeabi_i2d>
 8019622:	4602      	mov	r2, r0
 8019624:	460b      	mov	r3, r1
 8019626:	4630      	mov	r0, r6
 8019628:	4639      	mov	r1, r7
 801962a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801962e:	f7e6 fe4b 	bl	80002c8 <__aeabi_dsub>
 8019632:	4b22      	ldr	r3, [pc, #136]	; (80196bc <__ieee754_rem_pio2+0x40c>)
 8019634:	2200      	movs	r2, #0
 8019636:	f7e6 ffff 	bl	8000638 <__aeabi_dmul>
 801963a:	460f      	mov	r7, r1
 801963c:	4606      	mov	r6, r0
 801963e:	f7e7 faab 	bl	8000b98 <__aeabi_d2iz>
 8019642:	f7e6 ff8f 	bl	8000564 <__aeabi_i2d>
 8019646:	4602      	mov	r2, r0
 8019648:	460b      	mov	r3, r1
 801964a:	4630      	mov	r0, r6
 801964c:	4639      	mov	r1, r7
 801964e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8019652:	f7e6 fe39 	bl	80002c8 <__aeabi_dsub>
 8019656:	4b19      	ldr	r3, [pc, #100]	; (80196bc <__ieee754_rem_pio2+0x40c>)
 8019658:	2200      	movs	r2, #0
 801965a:	f7e6 ffed 	bl	8000638 <__aeabi_dmul>
 801965e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8019662:	ad04      	add	r5, sp, #16
 8019664:	f04f 0803 	mov.w	r8, #3
 8019668:	46a9      	mov	r9, r5
 801966a:	2600      	movs	r6, #0
 801966c:	2700      	movs	r7, #0
 801966e:	4632      	mov	r2, r6
 8019670:	463b      	mov	r3, r7
 8019672:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8019676:	46c3      	mov	fp, r8
 8019678:	3d08      	subs	r5, #8
 801967a:	f108 38ff 	add.w	r8, r8, #4294967295
 801967e:	f7e7 fa43 	bl	8000b08 <__aeabi_dcmpeq>
 8019682:	2800      	cmp	r0, #0
 8019684:	d1f3      	bne.n	801966e <__ieee754_rem_pio2+0x3be>
 8019686:	4b0e      	ldr	r3, [pc, #56]	; (80196c0 <__ieee754_rem_pio2+0x410>)
 8019688:	9301      	str	r3, [sp, #4]
 801968a:	2302      	movs	r3, #2
 801968c:	9300      	str	r3, [sp, #0]
 801968e:	4622      	mov	r2, r4
 8019690:	465b      	mov	r3, fp
 8019692:	4651      	mov	r1, sl
 8019694:	4648      	mov	r0, r9
 8019696:	f000 fba7 	bl	8019de8 <__kernel_rem_pio2>
 801969a:	9b02      	ldr	r3, [sp, #8]
 801969c:	2b00      	cmp	r3, #0
 801969e:	4683      	mov	fp, r0
 80196a0:	f6bf ae46 	bge.w	8019330 <__ieee754_rem_pio2+0x80>
 80196a4:	f8da 3004 	ldr.w	r3, [sl, #4]
 80196a8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80196ac:	f8ca 3004 	str.w	r3, [sl, #4]
 80196b0:	f8da 300c 	ldr.w	r3, [sl, #12]
 80196b4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80196b8:	e73a      	b.n	8019530 <__ieee754_rem_pio2+0x280>
 80196ba:	bf00      	nop
 80196bc:	41700000 	.word	0x41700000
 80196c0:	0803e9c8 	.word	0x0803e9c8

080196c4 <__ieee754_sqrt>:
 80196c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196c8:	ec55 4b10 	vmov	r4, r5, d0
 80196cc:	4e56      	ldr	r6, [pc, #344]	; (8019828 <__ieee754_sqrt+0x164>)
 80196ce:	43ae      	bics	r6, r5
 80196d0:	ee10 0a10 	vmov	r0, s0
 80196d4:	ee10 3a10 	vmov	r3, s0
 80196d8:	4629      	mov	r1, r5
 80196da:	462a      	mov	r2, r5
 80196dc:	d110      	bne.n	8019700 <__ieee754_sqrt+0x3c>
 80196de:	ee10 2a10 	vmov	r2, s0
 80196e2:	462b      	mov	r3, r5
 80196e4:	f7e6 ffa8 	bl	8000638 <__aeabi_dmul>
 80196e8:	4602      	mov	r2, r0
 80196ea:	460b      	mov	r3, r1
 80196ec:	4620      	mov	r0, r4
 80196ee:	4629      	mov	r1, r5
 80196f0:	f7e6 fdec 	bl	80002cc <__adddf3>
 80196f4:	4604      	mov	r4, r0
 80196f6:	460d      	mov	r5, r1
 80196f8:	ec45 4b10 	vmov	d0, r4, r5
 80196fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019700:	2d00      	cmp	r5, #0
 8019702:	dc10      	bgt.n	8019726 <__ieee754_sqrt+0x62>
 8019704:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8019708:	4330      	orrs	r0, r6
 801970a:	d0f5      	beq.n	80196f8 <__ieee754_sqrt+0x34>
 801970c:	b15d      	cbz	r5, 8019726 <__ieee754_sqrt+0x62>
 801970e:	ee10 2a10 	vmov	r2, s0
 8019712:	462b      	mov	r3, r5
 8019714:	ee10 0a10 	vmov	r0, s0
 8019718:	f7e6 fdd6 	bl	80002c8 <__aeabi_dsub>
 801971c:	4602      	mov	r2, r0
 801971e:	460b      	mov	r3, r1
 8019720:	f7e7 f8b4 	bl	800088c <__aeabi_ddiv>
 8019724:	e7e6      	b.n	80196f4 <__ieee754_sqrt+0x30>
 8019726:	1509      	asrs	r1, r1, #20
 8019728:	d076      	beq.n	8019818 <__ieee754_sqrt+0x154>
 801972a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 801972e:	07ce      	lsls	r6, r1, #31
 8019730:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8019734:	bf5e      	ittt	pl
 8019736:	0fda      	lsrpl	r2, r3, #31
 8019738:	005b      	lslpl	r3, r3, #1
 801973a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 801973e:	0fda      	lsrs	r2, r3, #31
 8019740:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8019744:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8019748:	2000      	movs	r0, #0
 801974a:	106d      	asrs	r5, r5, #1
 801974c:	005b      	lsls	r3, r3, #1
 801974e:	f04f 0e16 	mov.w	lr, #22
 8019752:	4684      	mov	ip, r0
 8019754:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8019758:	eb0c 0401 	add.w	r4, ip, r1
 801975c:	4294      	cmp	r4, r2
 801975e:	bfde      	ittt	le
 8019760:	1b12      	suble	r2, r2, r4
 8019762:	eb04 0c01 	addle.w	ip, r4, r1
 8019766:	1840      	addle	r0, r0, r1
 8019768:	0052      	lsls	r2, r2, #1
 801976a:	f1be 0e01 	subs.w	lr, lr, #1
 801976e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8019772:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8019776:	ea4f 0343 	mov.w	r3, r3, lsl #1
 801977a:	d1ed      	bne.n	8019758 <__ieee754_sqrt+0x94>
 801977c:	4671      	mov	r1, lr
 801977e:	2720      	movs	r7, #32
 8019780:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8019784:	4562      	cmp	r2, ip
 8019786:	eb04 060e 	add.w	r6, r4, lr
 801978a:	dc02      	bgt.n	8019792 <__ieee754_sqrt+0xce>
 801978c:	d113      	bne.n	80197b6 <__ieee754_sqrt+0xf2>
 801978e:	429e      	cmp	r6, r3
 8019790:	d811      	bhi.n	80197b6 <__ieee754_sqrt+0xf2>
 8019792:	2e00      	cmp	r6, #0
 8019794:	eb06 0e04 	add.w	lr, r6, r4
 8019798:	da43      	bge.n	8019822 <__ieee754_sqrt+0x15e>
 801979a:	f1be 0f00 	cmp.w	lr, #0
 801979e:	db40      	blt.n	8019822 <__ieee754_sqrt+0x15e>
 80197a0:	f10c 0801 	add.w	r8, ip, #1
 80197a4:	eba2 020c 	sub.w	r2, r2, ip
 80197a8:	429e      	cmp	r6, r3
 80197aa:	bf88      	it	hi
 80197ac:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80197b0:	1b9b      	subs	r3, r3, r6
 80197b2:	4421      	add	r1, r4
 80197b4:	46c4      	mov	ip, r8
 80197b6:	0052      	lsls	r2, r2, #1
 80197b8:	3f01      	subs	r7, #1
 80197ba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80197be:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80197c2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80197c6:	d1dd      	bne.n	8019784 <__ieee754_sqrt+0xc0>
 80197c8:	4313      	orrs	r3, r2
 80197ca:	d006      	beq.n	80197da <__ieee754_sqrt+0x116>
 80197cc:	1c4c      	adds	r4, r1, #1
 80197ce:	bf13      	iteet	ne
 80197d0:	3101      	addne	r1, #1
 80197d2:	3001      	addeq	r0, #1
 80197d4:	4639      	moveq	r1, r7
 80197d6:	f021 0101 	bicne.w	r1, r1, #1
 80197da:	1043      	asrs	r3, r0, #1
 80197dc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80197e0:	0849      	lsrs	r1, r1, #1
 80197e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80197e6:	07c2      	lsls	r2, r0, #31
 80197e8:	bf48      	it	mi
 80197ea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80197ee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80197f2:	460c      	mov	r4, r1
 80197f4:	463d      	mov	r5, r7
 80197f6:	e77f      	b.n	80196f8 <__ieee754_sqrt+0x34>
 80197f8:	0ada      	lsrs	r2, r3, #11
 80197fa:	3815      	subs	r0, #21
 80197fc:	055b      	lsls	r3, r3, #21
 80197fe:	2a00      	cmp	r2, #0
 8019800:	d0fa      	beq.n	80197f8 <__ieee754_sqrt+0x134>
 8019802:	02d7      	lsls	r7, r2, #11
 8019804:	d50a      	bpl.n	801981c <__ieee754_sqrt+0x158>
 8019806:	f1c1 0420 	rsb	r4, r1, #32
 801980a:	fa23 f404 	lsr.w	r4, r3, r4
 801980e:	1e4d      	subs	r5, r1, #1
 8019810:	408b      	lsls	r3, r1
 8019812:	4322      	orrs	r2, r4
 8019814:	1b41      	subs	r1, r0, r5
 8019816:	e788      	b.n	801972a <__ieee754_sqrt+0x66>
 8019818:	4608      	mov	r0, r1
 801981a:	e7f0      	b.n	80197fe <__ieee754_sqrt+0x13a>
 801981c:	0052      	lsls	r2, r2, #1
 801981e:	3101      	adds	r1, #1
 8019820:	e7ef      	b.n	8019802 <__ieee754_sqrt+0x13e>
 8019822:	46e0      	mov	r8, ip
 8019824:	e7be      	b.n	80197a4 <__ieee754_sqrt+0xe0>
 8019826:	bf00      	nop
 8019828:	7ff00000 	.word	0x7ff00000

0801982c <__ieee754_expf>:
 801982c:	ee10 2a10 	vmov	r2, s0
 8019830:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8019834:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8019838:	d902      	bls.n	8019840 <__ieee754_expf+0x14>
 801983a:	ee30 0a00 	vadd.f32	s0, s0, s0
 801983e:	4770      	bx	lr
 8019840:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8019844:	d106      	bne.n	8019854 <__ieee754_expf+0x28>
 8019846:	eddf 7a51 	vldr	s15, [pc, #324]	; 801998c <__ieee754_expf+0x160>
 801984a:	2b00      	cmp	r3, #0
 801984c:	bf18      	it	ne
 801984e:	eeb0 0a67 	vmovne.f32	s0, s15
 8019852:	4770      	bx	lr
 8019854:	484e      	ldr	r0, [pc, #312]	; (8019990 <__ieee754_expf+0x164>)
 8019856:	4282      	cmp	r2, r0
 8019858:	dd04      	ble.n	8019864 <__ieee754_expf+0x38>
 801985a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8019994 <__ieee754_expf+0x168>
 801985e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8019862:	4770      	bx	lr
 8019864:	2a00      	cmp	r2, #0
 8019866:	da03      	bge.n	8019870 <__ieee754_expf+0x44>
 8019868:	4a4b      	ldr	r2, [pc, #300]	; (8019998 <__ieee754_expf+0x16c>)
 801986a:	4291      	cmp	r1, r2
 801986c:	f200 808a 	bhi.w	8019984 <__ieee754_expf+0x158>
 8019870:	4a4a      	ldr	r2, [pc, #296]	; (801999c <__ieee754_expf+0x170>)
 8019872:	4291      	cmp	r1, r2
 8019874:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8019878:	d954      	bls.n	8019924 <__ieee754_expf+0xf8>
 801987a:	4a49      	ldr	r2, [pc, #292]	; (80199a0 <__ieee754_expf+0x174>)
 801987c:	4291      	cmp	r1, r2
 801987e:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8019882:	d836      	bhi.n	80198f2 <__ieee754_expf+0xc6>
 8019884:	4947      	ldr	r1, [pc, #284]	; (80199a4 <__ieee754_expf+0x178>)
 8019886:	4411      	add	r1, r2
 8019888:	ed91 7a00 	vldr	s14, [r1]
 801988c:	4946      	ldr	r1, [pc, #280]	; (80199a8 <__ieee754_expf+0x17c>)
 801988e:	440a      	add	r2, r1
 8019890:	edd2 7a00 	vldr	s15, [r2]
 8019894:	ee30 7a47 	vsub.f32	s14, s0, s14
 8019898:	f1c3 0201 	rsb	r2, r3, #1
 801989c:	1ad2      	subs	r2, r2, r3
 801989e:	ee37 0a67 	vsub.f32	s0, s14, s15
 80198a2:	ee60 6a00 	vmul.f32	s13, s0, s0
 80198a6:	eddf 5a41 	vldr	s11, [pc, #260]	; 80199ac <__ieee754_expf+0x180>
 80198aa:	ed9f 5a41 	vldr	s10, [pc, #260]	; 80199b0 <__ieee754_expf+0x184>
 80198ae:	eea6 5aa5 	vfma.f32	s10, s13, s11
 80198b2:	eddf 5a40 	vldr	s11, [pc, #256]	; 80199b4 <__ieee754_expf+0x188>
 80198b6:	eee5 5a26 	vfma.f32	s11, s10, s13
 80198ba:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 80199b8 <__ieee754_expf+0x18c>
 80198be:	eea5 5aa6 	vfma.f32	s10, s11, s13
 80198c2:	eddf 5a3e 	vldr	s11, [pc, #248]	; 80199bc <__ieee754_expf+0x190>
 80198c6:	eee5 5a26 	vfma.f32	s11, s10, s13
 80198ca:	eeb0 5a40 	vmov.f32	s10, s0
 80198ce:	eea5 5ae6 	vfms.f32	s10, s11, s13
 80198d2:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 80198d6:	eef0 6a45 	vmov.f32	s13, s10
 80198da:	ee20 5a05 	vmul.f32	s10, s0, s10
 80198de:	bb92      	cbnz	r2, 8019946 <__ieee754_expf+0x11a>
 80198e0:	ee76 6ae5 	vsub.f32	s13, s13, s11
 80198e4:	eec5 7a26 	vdiv.f32	s15, s10, s13
 80198e8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 80198ec:	ee36 0a40 	vsub.f32	s0, s12, s0
 80198f0:	4770      	bx	lr
 80198f2:	4b33      	ldr	r3, [pc, #204]	; (80199c0 <__ieee754_expf+0x194>)
 80198f4:	ed9f 7a33 	vldr	s14, [pc, #204]	; 80199c4 <__ieee754_expf+0x198>
 80198f8:	4413      	add	r3, r2
 80198fa:	edd3 7a00 	vldr	s15, [r3]
 80198fe:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019902:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80199c8 <__ieee754_expf+0x19c>
 8019906:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801990a:	ee17 2a90 	vmov	r2, s15
 801990e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019912:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8019916:	eeb0 7a40 	vmov.f32	s14, s0
 801991a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 80199cc <__ieee754_expf+0x1a0>
 801991e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8019922:	e7bc      	b.n	801989e <__ieee754_expf+0x72>
 8019924:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8019928:	d20b      	bcs.n	8019942 <__ieee754_expf+0x116>
 801992a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8019994 <__ieee754_expf+0x168>
 801992e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8019932:	eef4 6ac6 	vcmpe.f32	s13, s12
 8019936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801993a:	dd02      	ble.n	8019942 <__ieee754_expf+0x116>
 801993c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8019940:	4770      	bx	lr
 8019942:	2200      	movs	r2, #0
 8019944:	e7ad      	b.n	80198a2 <__ieee754_expf+0x76>
 8019946:	ee75 6ae6 	vsub.f32	s13, s11, s13
 801994a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 801994e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8019952:	bfb8      	it	lt
 8019954:	3264      	addlt	r2, #100	; 0x64
 8019956:	ee77 7ac0 	vsub.f32	s15, s15, s0
 801995a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 801995e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8019962:	ee17 3a90 	vmov	r3, s15
 8019966:	bfab      	itete	ge
 8019968:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 801996c:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8019970:	ee00 3a10 	vmovge	s0, r3
 8019974:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 80199d0 <__ieee754_expf+0x1a4>
 8019978:	bfbc      	itt	lt
 801997a:	ee00 3a10 	vmovlt	s0, r3
 801997e:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8019982:	4770      	bx	lr
 8019984:	ed9f 0a01 	vldr	s0, [pc, #4]	; 801998c <__ieee754_expf+0x160>
 8019988:	4770      	bx	lr
 801998a:	bf00      	nop
 801998c:	00000000 	.word	0x00000000
 8019990:	42b17217 	.word	0x42b17217
 8019994:	7149f2ca 	.word	0x7149f2ca
 8019998:	42cff1b5 	.word	0x42cff1b5
 801999c:	3eb17218 	.word	0x3eb17218
 80199a0:	3f851591 	.word	0x3f851591
 80199a4:	0803ead8 	.word	0x0803ead8
 80199a8:	0803eae0 	.word	0x0803eae0
 80199ac:	3331bb4c 	.word	0x3331bb4c
 80199b0:	b5ddea0e 	.word	0xb5ddea0e
 80199b4:	388ab355 	.word	0x388ab355
 80199b8:	bb360b61 	.word	0xbb360b61
 80199bc:	3e2aaaab 	.word	0x3e2aaaab
 80199c0:	0803ead0 	.word	0x0803ead0
 80199c4:	3fb8aa3b 	.word	0x3fb8aa3b
 80199c8:	3f317180 	.word	0x3f317180
 80199cc:	3717f7d1 	.word	0x3717f7d1
 80199d0:	0d800000 	.word	0x0d800000

080199d4 <__ieee754_rem_pio2f>:
 80199d4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80199d6:	ee10 6a10 	vmov	r6, s0
 80199da:	4b8e      	ldr	r3, [pc, #568]	; (8019c14 <__ieee754_rem_pio2f+0x240>)
 80199dc:	f026 4500 	bic.w	r5, r6, #2147483648	; 0x80000000
 80199e0:	429d      	cmp	r5, r3
 80199e2:	b087      	sub	sp, #28
 80199e4:	eef0 7a40 	vmov.f32	s15, s0
 80199e8:	4604      	mov	r4, r0
 80199ea:	dc05      	bgt.n	80199f8 <__ieee754_rem_pio2f+0x24>
 80199ec:	2300      	movs	r3, #0
 80199ee:	ed80 0a00 	vstr	s0, [r0]
 80199f2:	6043      	str	r3, [r0, #4]
 80199f4:	2000      	movs	r0, #0
 80199f6:	e01a      	b.n	8019a2e <__ieee754_rem_pio2f+0x5a>
 80199f8:	4b87      	ldr	r3, [pc, #540]	; (8019c18 <__ieee754_rem_pio2f+0x244>)
 80199fa:	429d      	cmp	r5, r3
 80199fc:	dc46      	bgt.n	8019a8c <__ieee754_rem_pio2f+0xb8>
 80199fe:	2e00      	cmp	r6, #0
 8019a00:	ed9f 0a86 	vldr	s0, [pc, #536]	; 8019c1c <__ieee754_rem_pio2f+0x248>
 8019a04:	4b86      	ldr	r3, [pc, #536]	; (8019c20 <__ieee754_rem_pio2f+0x24c>)
 8019a06:	f025 050f 	bic.w	r5, r5, #15
 8019a0a:	dd1f      	ble.n	8019a4c <__ieee754_rem_pio2f+0x78>
 8019a0c:	429d      	cmp	r5, r3
 8019a0e:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a12:	d00e      	beq.n	8019a32 <__ieee754_rem_pio2f+0x5e>
 8019a14:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8019c24 <__ieee754_rem_pio2f+0x250>
 8019a18:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8019a1c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a20:	ed80 0a00 	vstr	s0, [r0]
 8019a24:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019a28:	2001      	movs	r0, #1
 8019a2a:	edc4 7a01 	vstr	s15, [r4, #4]
 8019a2e:	b007      	add	sp, #28
 8019a30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019a32:	ed9f 0a7d 	vldr	s0, [pc, #500]	; 8019c28 <__ieee754_rem_pio2f+0x254>
 8019a36:	ed9f 7a7d 	vldr	s14, [pc, #500]	; 8019c2c <__ieee754_rem_pio2f+0x258>
 8019a3a:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a3e:	ee77 6ac7 	vsub.f32	s13, s15, s14
 8019a42:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a46:	edc0 6a00 	vstr	s13, [r0]
 8019a4a:	e7eb      	b.n	8019a24 <__ieee754_rem_pio2f+0x50>
 8019a4c:	429d      	cmp	r5, r3
 8019a4e:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019a52:	d00e      	beq.n	8019a72 <__ieee754_rem_pio2f+0x9e>
 8019a54:	ed9f 7a73 	vldr	s14, [pc, #460]	; 8019c24 <__ieee754_rem_pio2f+0x250>
 8019a58:	ee37 0a87 	vadd.f32	s0, s15, s14
 8019a5c:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8019a60:	ed80 0a00 	vstr	s0, [r0]
 8019a64:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019a68:	f04f 30ff 	mov.w	r0, #4294967295
 8019a6c:	edc4 7a01 	vstr	s15, [r4, #4]
 8019a70:	e7dd      	b.n	8019a2e <__ieee754_rem_pio2f+0x5a>
 8019a72:	ed9f 0a6d 	vldr	s0, [pc, #436]	; 8019c28 <__ieee754_rem_pio2f+0x254>
 8019a76:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 8019c2c <__ieee754_rem_pio2f+0x258>
 8019a7a:	ee77 7a80 	vadd.f32	s15, s15, s0
 8019a7e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8019a82:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8019a86:	edc0 6a00 	vstr	s13, [r0]
 8019a8a:	e7eb      	b.n	8019a64 <__ieee754_rem_pio2f+0x90>
 8019a8c:	4b68      	ldr	r3, [pc, #416]	; (8019c30 <__ieee754_rem_pio2f+0x25c>)
 8019a8e:	429d      	cmp	r5, r3
 8019a90:	dc72      	bgt.n	8019b78 <__ieee754_rem_pio2f+0x1a4>
 8019a92:	f001 fa07 	bl	801aea4 <fabsf>
 8019a96:	ed9f 7a67 	vldr	s14, [pc, #412]	; 8019c34 <__ieee754_rem_pio2f+0x260>
 8019a9a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8019a9e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8019aa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8019aa6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8019aaa:	ee17 0a90 	vmov	r0, s15
 8019aae:	eddf 7a5b 	vldr	s15, [pc, #364]	; 8019c1c <__ieee754_rem_pio2f+0x248>
 8019ab2:	eea7 0a67 	vfms.f32	s0, s14, s15
 8019ab6:	281f      	cmp	r0, #31
 8019ab8:	eddf 7a5a 	vldr	s15, [pc, #360]	; 8019c24 <__ieee754_rem_pio2f+0x250>
 8019abc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8019ac0:	eeb1 6a47 	vneg.f32	s12, s14
 8019ac4:	ee70 6a67 	vsub.f32	s13, s0, s15
 8019ac8:	ee16 2a90 	vmov	r2, s13
 8019acc:	dc1c      	bgt.n	8019b08 <__ieee754_rem_pio2f+0x134>
 8019ace:	495a      	ldr	r1, [pc, #360]	; (8019c38 <__ieee754_rem_pio2f+0x264>)
 8019ad0:	1e47      	subs	r7, r0, #1
 8019ad2:	f025 03ff 	bic.w	r3, r5, #255	; 0xff
 8019ad6:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 8019ada:	428b      	cmp	r3, r1
 8019adc:	d014      	beq.n	8019b08 <__ieee754_rem_pio2f+0x134>
 8019ade:	6022      	str	r2, [r4, #0]
 8019ae0:	ed94 7a00 	vldr	s14, [r4]
 8019ae4:	ee30 0a47 	vsub.f32	s0, s0, s14
 8019ae8:	2e00      	cmp	r6, #0
 8019aea:	ee30 0a67 	vsub.f32	s0, s0, s15
 8019aee:	ed84 0a01 	vstr	s0, [r4, #4]
 8019af2:	da9c      	bge.n	8019a2e <__ieee754_rem_pio2f+0x5a>
 8019af4:	eeb1 7a47 	vneg.f32	s14, s14
 8019af8:	eeb1 0a40 	vneg.f32	s0, s0
 8019afc:	ed84 7a00 	vstr	s14, [r4]
 8019b00:	ed84 0a01 	vstr	s0, [r4, #4]
 8019b04:	4240      	negs	r0, r0
 8019b06:	e792      	b.n	8019a2e <__ieee754_rem_pio2f+0x5a>
 8019b08:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019b0c:	15eb      	asrs	r3, r5, #23
 8019b0e:	ebc1 55d5 	rsb	r5, r1, r5, lsr #23
 8019b12:	2d08      	cmp	r5, #8
 8019b14:	dde3      	ble.n	8019ade <__ieee754_rem_pio2f+0x10a>
 8019b16:	eddf 7a44 	vldr	s15, [pc, #272]	; 8019c28 <__ieee754_rem_pio2f+0x254>
 8019b1a:	eef0 6a40 	vmov.f32	s13, s0
 8019b1e:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019b22:	ee30 0a66 	vsub.f32	s0, s0, s13
 8019b26:	eea6 0a27 	vfma.f32	s0, s12, s15
 8019b2a:	eddf 7a40 	vldr	s15, [pc, #256]	; 8019c2c <__ieee754_rem_pio2f+0x258>
 8019b2e:	ee97 0a27 	vfnms.f32	s0, s14, s15
 8019b32:	ee76 5ac0 	vsub.f32	s11, s13, s0
 8019b36:	eef0 7a40 	vmov.f32	s15, s0
 8019b3a:	ee15 2a90 	vmov	r2, s11
 8019b3e:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8019b42:	1a5b      	subs	r3, r3, r1
 8019b44:	2b19      	cmp	r3, #25
 8019b46:	dc04      	bgt.n	8019b52 <__ieee754_rem_pio2f+0x17e>
 8019b48:	edc4 5a00 	vstr	s11, [r4]
 8019b4c:	eeb0 0a66 	vmov.f32	s0, s13
 8019b50:	e7c6      	b.n	8019ae0 <__ieee754_rem_pio2f+0x10c>
 8019b52:	eddf 5a3a 	vldr	s11, [pc, #232]	; 8019c3c <__ieee754_rem_pio2f+0x268>
 8019b56:	eeb0 0a66 	vmov.f32	s0, s13
 8019b5a:	eea6 0a25 	vfma.f32	s0, s12, s11
 8019b5e:	ee76 7ac0 	vsub.f32	s15, s13, s0
 8019b62:	eddf 6a37 	vldr	s13, [pc, #220]	; 8019c40 <__ieee754_rem_pio2f+0x26c>
 8019b66:	eee6 7a25 	vfma.f32	s15, s12, s11
 8019b6a:	eed7 7a26 	vfnms.f32	s15, s14, s13
 8019b6e:	ee30 7a67 	vsub.f32	s14, s0, s15
 8019b72:	ed84 7a00 	vstr	s14, [r4]
 8019b76:	e7b3      	b.n	8019ae0 <__ieee754_rem_pio2f+0x10c>
 8019b78:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8019b7c:	db06      	blt.n	8019b8c <__ieee754_rem_pio2f+0x1b8>
 8019b7e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8019b82:	edc0 7a01 	vstr	s15, [r0, #4]
 8019b86:	edc0 7a00 	vstr	s15, [r0]
 8019b8a:	e733      	b.n	80199f4 <__ieee754_rem_pio2f+0x20>
 8019b8c:	15ea      	asrs	r2, r5, #23
 8019b8e:	3a86      	subs	r2, #134	; 0x86
 8019b90:	eba5 53c2 	sub.w	r3, r5, r2, lsl #23
 8019b94:	ee07 3a90 	vmov	s15, r3
 8019b98:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019b9c:	eddf 6a29 	vldr	s13, [pc, #164]	; 8019c44 <__ieee754_rem_pio2f+0x270>
 8019ba0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019ba4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019ba8:	ed8d 7a03 	vstr	s14, [sp, #12]
 8019bac:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019bb0:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8019bb4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019bb8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8019bbc:	ed8d 7a04 	vstr	s14, [sp, #16]
 8019bc0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019bc4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8019bc8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bcc:	edcd 7a05 	vstr	s15, [sp, #20]
 8019bd0:	d11e      	bne.n	8019c10 <__ieee754_rem_pio2f+0x23c>
 8019bd2:	eeb5 7a40 	vcmp.f32	s14, #0.0
 8019bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019bda:	bf14      	ite	ne
 8019bdc:	2302      	movne	r3, #2
 8019bde:	2301      	moveq	r3, #1
 8019be0:	4919      	ldr	r1, [pc, #100]	; (8019c48 <__ieee754_rem_pio2f+0x274>)
 8019be2:	9101      	str	r1, [sp, #4]
 8019be4:	2102      	movs	r1, #2
 8019be6:	9100      	str	r1, [sp, #0]
 8019be8:	a803      	add	r0, sp, #12
 8019bea:	4621      	mov	r1, r4
 8019bec:	f000 fd5a 	bl	801a6a4 <__kernel_rem_pio2f>
 8019bf0:	2e00      	cmp	r6, #0
 8019bf2:	f6bf af1c 	bge.w	8019a2e <__ieee754_rem_pio2f+0x5a>
 8019bf6:	edd4 7a00 	vldr	s15, [r4]
 8019bfa:	eef1 7a67 	vneg.f32	s15, s15
 8019bfe:	edc4 7a00 	vstr	s15, [r4]
 8019c02:	edd4 7a01 	vldr	s15, [r4, #4]
 8019c06:	eef1 7a67 	vneg.f32	s15, s15
 8019c0a:	edc4 7a01 	vstr	s15, [r4, #4]
 8019c0e:	e779      	b.n	8019b04 <__ieee754_rem_pio2f+0x130>
 8019c10:	2303      	movs	r3, #3
 8019c12:	e7e5      	b.n	8019be0 <__ieee754_rem_pio2f+0x20c>
 8019c14:	3f490fd8 	.word	0x3f490fd8
 8019c18:	4016cbe3 	.word	0x4016cbe3
 8019c1c:	3fc90f80 	.word	0x3fc90f80
 8019c20:	3fc90fd0 	.word	0x3fc90fd0
 8019c24:	37354443 	.word	0x37354443
 8019c28:	37354400 	.word	0x37354400
 8019c2c:	2e85a308 	.word	0x2e85a308
 8019c30:	43490f80 	.word	0x43490f80
 8019c34:	3f22f984 	.word	0x3f22f984
 8019c38:	0803eae8 	.word	0x0803eae8
 8019c3c:	2e85a300 	.word	0x2e85a300
 8019c40:	248d3132 	.word	0x248d3132
 8019c44:	43800000 	.word	0x43800000
 8019c48:	0803eb68 	.word	0x0803eb68

08019c4c <__ieee754_sqrtf>:
 8019c4c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8019c50:	4770      	bx	lr
 8019c52:	0000      	movs	r0, r0
 8019c54:	0000      	movs	r0, r0
	...

08019c58 <__kernel_cos>:
 8019c58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c5c:	ec57 6b10 	vmov	r6, r7, d0
 8019c60:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8019c64:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8019c68:	ed8d 1b00 	vstr	d1, [sp]
 8019c6c:	da07      	bge.n	8019c7e <__kernel_cos+0x26>
 8019c6e:	ee10 0a10 	vmov	r0, s0
 8019c72:	4639      	mov	r1, r7
 8019c74:	f7e6 ff90 	bl	8000b98 <__aeabi_d2iz>
 8019c78:	2800      	cmp	r0, #0
 8019c7a:	f000 8088 	beq.w	8019d8e <__kernel_cos+0x136>
 8019c7e:	4632      	mov	r2, r6
 8019c80:	463b      	mov	r3, r7
 8019c82:	4630      	mov	r0, r6
 8019c84:	4639      	mov	r1, r7
 8019c86:	f7e6 fcd7 	bl	8000638 <__aeabi_dmul>
 8019c8a:	4b51      	ldr	r3, [pc, #324]	; (8019dd0 <__kernel_cos+0x178>)
 8019c8c:	2200      	movs	r2, #0
 8019c8e:	4604      	mov	r4, r0
 8019c90:	460d      	mov	r5, r1
 8019c92:	f7e6 fcd1 	bl	8000638 <__aeabi_dmul>
 8019c96:	a340      	add	r3, pc, #256	; (adr r3, 8019d98 <__kernel_cos+0x140>)
 8019c98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019c9c:	4682      	mov	sl, r0
 8019c9e:	468b      	mov	fp, r1
 8019ca0:	4620      	mov	r0, r4
 8019ca2:	4629      	mov	r1, r5
 8019ca4:	f7e6 fcc8 	bl	8000638 <__aeabi_dmul>
 8019ca8:	a33d      	add	r3, pc, #244	; (adr r3, 8019da0 <__kernel_cos+0x148>)
 8019caa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cae:	f7e6 fb0d 	bl	80002cc <__adddf3>
 8019cb2:	4622      	mov	r2, r4
 8019cb4:	462b      	mov	r3, r5
 8019cb6:	f7e6 fcbf 	bl	8000638 <__aeabi_dmul>
 8019cba:	a33b      	add	r3, pc, #236	; (adr r3, 8019da8 <__kernel_cos+0x150>)
 8019cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cc0:	f7e6 fb02 	bl	80002c8 <__aeabi_dsub>
 8019cc4:	4622      	mov	r2, r4
 8019cc6:	462b      	mov	r3, r5
 8019cc8:	f7e6 fcb6 	bl	8000638 <__aeabi_dmul>
 8019ccc:	a338      	add	r3, pc, #224	; (adr r3, 8019db0 <__kernel_cos+0x158>)
 8019cce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cd2:	f7e6 fafb 	bl	80002cc <__adddf3>
 8019cd6:	4622      	mov	r2, r4
 8019cd8:	462b      	mov	r3, r5
 8019cda:	f7e6 fcad 	bl	8000638 <__aeabi_dmul>
 8019cde:	a336      	add	r3, pc, #216	; (adr r3, 8019db8 <__kernel_cos+0x160>)
 8019ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019ce4:	f7e6 faf0 	bl	80002c8 <__aeabi_dsub>
 8019ce8:	4622      	mov	r2, r4
 8019cea:	462b      	mov	r3, r5
 8019cec:	f7e6 fca4 	bl	8000638 <__aeabi_dmul>
 8019cf0:	a333      	add	r3, pc, #204	; (adr r3, 8019dc0 <__kernel_cos+0x168>)
 8019cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8019cf6:	f7e6 fae9 	bl	80002cc <__adddf3>
 8019cfa:	4622      	mov	r2, r4
 8019cfc:	462b      	mov	r3, r5
 8019cfe:	f7e6 fc9b 	bl	8000638 <__aeabi_dmul>
 8019d02:	4622      	mov	r2, r4
 8019d04:	462b      	mov	r3, r5
 8019d06:	f7e6 fc97 	bl	8000638 <__aeabi_dmul>
 8019d0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8019d0e:	4604      	mov	r4, r0
 8019d10:	460d      	mov	r5, r1
 8019d12:	4630      	mov	r0, r6
 8019d14:	4639      	mov	r1, r7
 8019d16:	f7e6 fc8f 	bl	8000638 <__aeabi_dmul>
 8019d1a:	460b      	mov	r3, r1
 8019d1c:	4602      	mov	r2, r0
 8019d1e:	4629      	mov	r1, r5
 8019d20:	4620      	mov	r0, r4
 8019d22:	f7e6 fad1 	bl	80002c8 <__aeabi_dsub>
 8019d26:	4b2b      	ldr	r3, [pc, #172]	; (8019dd4 <__kernel_cos+0x17c>)
 8019d28:	4598      	cmp	r8, r3
 8019d2a:	4606      	mov	r6, r0
 8019d2c:	460f      	mov	r7, r1
 8019d2e:	dc10      	bgt.n	8019d52 <__kernel_cos+0xfa>
 8019d30:	4602      	mov	r2, r0
 8019d32:	460b      	mov	r3, r1
 8019d34:	4650      	mov	r0, sl
 8019d36:	4659      	mov	r1, fp
 8019d38:	f7e6 fac6 	bl	80002c8 <__aeabi_dsub>
 8019d3c:	460b      	mov	r3, r1
 8019d3e:	4926      	ldr	r1, [pc, #152]	; (8019dd8 <__kernel_cos+0x180>)
 8019d40:	4602      	mov	r2, r0
 8019d42:	2000      	movs	r0, #0
 8019d44:	f7e6 fac0 	bl	80002c8 <__aeabi_dsub>
 8019d48:	ec41 0b10 	vmov	d0, r0, r1
 8019d4c:	b003      	add	sp, #12
 8019d4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019d52:	4b22      	ldr	r3, [pc, #136]	; (8019ddc <__kernel_cos+0x184>)
 8019d54:	4920      	ldr	r1, [pc, #128]	; (8019dd8 <__kernel_cos+0x180>)
 8019d56:	4598      	cmp	r8, r3
 8019d58:	bfcc      	ite	gt
 8019d5a:	4d21      	ldrgt	r5, [pc, #132]	; (8019de0 <__kernel_cos+0x188>)
 8019d5c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8019d60:	2400      	movs	r4, #0
 8019d62:	4622      	mov	r2, r4
 8019d64:	462b      	mov	r3, r5
 8019d66:	2000      	movs	r0, #0
 8019d68:	f7e6 faae 	bl	80002c8 <__aeabi_dsub>
 8019d6c:	4622      	mov	r2, r4
 8019d6e:	4680      	mov	r8, r0
 8019d70:	4689      	mov	r9, r1
 8019d72:	462b      	mov	r3, r5
 8019d74:	4650      	mov	r0, sl
 8019d76:	4659      	mov	r1, fp
 8019d78:	f7e6 faa6 	bl	80002c8 <__aeabi_dsub>
 8019d7c:	4632      	mov	r2, r6
 8019d7e:	463b      	mov	r3, r7
 8019d80:	f7e6 faa2 	bl	80002c8 <__aeabi_dsub>
 8019d84:	4602      	mov	r2, r0
 8019d86:	460b      	mov	r3, r1
 8019d88:	4640      	mov	r0, r8
 8019d8a:	4649      	mov	r1, r9
 8019d8c:	e7da      	b.n	8019d44 <__kernel_cos+0xec>
 8019d8e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8019dc8 <__kernel_cos+0x170>
 8019d92:	e7db      	b.n	8019d4c <__kernel_cos+0xf4>
 8019d94:	f3af 8000 	nop.w
 8019d98:	be8838d4 	.word	0xbe8838d4
 8019d9c:	bda8fae9 	.word	0xbda8fae9
 8019da0:	bdb4b1c4 	.word	0xbdb4b1c4
 8019da4:	3e21ee9e 	.word	0x3e21ee9e
 8019da8:	809c52ad 	.word	0x809c52ad
 8019dac:	3e927e4f 	.word	0x3e927e4f
 8019db0:	19cb1590 	.word	0x19cb1590
 8019db4:	3efa01a0 	.word	0x3efa01a0
 8019db8:	16c15177 	.word	0x16c15177
 8019dbc:	3f56c16c 	.word	0x3f56c16c
 8019dc0:	5555554c 	.word	0x5555554c
 8019dc4:	3fa55555 	.word	0x3fa55555
 8019dc8:	00000000 	.word	0x00000000
 8019dcc:	3ff00000 	.word	0x3ff00000
 8019dd0:	3fe00000 	.word	0x3fe00000
 8019dd4:	3fd33332 	.word	0x3fd33332
 8019dd8:	3ff00000 	.word	0x3ff00000
 8019ddc:	3fe90000 	.word	0x3fe90000
 8019de0:	3fd20000 	.word	0x3fd20000
 8019de4:	00000000 	.word	0x00000000

08019de8 <__kernel_rem_pio2>:
 8019de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019dec:	ed2d 8b02 	vpush	{d8}
 8019df0:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 8019df4:	f112 0f14 	cmn.w	r2, #20
 8019df8:	9308      	str	r3, [sp, #32]
 8019dfa:	9101      	str	r1, [sp, #4]
 8019dfc:	4bc6      	ldr	r3, [pc, #792]	; (801a118 <__kernel_rem_pio2+0x330>)
 8019dfe:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8019e00:	9009      	str	r0, [sp, #36]	; 0x24
 8019e02:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8019e06:	9304      	str	r3, [sp, #16]
 8019e08:	9b08      	ldr	r3, [sp, #32]
 8019e0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8019e0e:	bfa8      	it	ge
 8019e10:	1ed4      	subge	r4, r2, #3
 8019e12:	9306      	str	r3, [sp, #24]
 8019e14:	bfb2      	itee	lt
 8019e16:	2400      	movlt	r4, #0
 8019e18:	2318      	movge	r3, #24
 8019e1a:	fb94 f4f3 	sdivge	r4, r4, r3
 8019e1e:	f06f 0317 	mvn.w	r3, #23
 8019e22:	fb04 3303 	mla	r3, r4, r3, r3
 8019e26:	eb03 0a02 	add.w	sl, r3, r2
 8019e2a:	9b04      	ldr	r3, [sp, #16]
 8019e2c:	9a06      	ldr	r2, [sp, #24]
 8019e2e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 801a108 <__kernel_rem_pio2+0x320>
 8019e32:	eb03 0802 	add.w	r8, r3, r2
 8019e36:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8019e38:	1aa7      	subs	r7, r4, r2
 8019e3a:	ae20      	add	r6, sp, #128	; 0x80
 8019e3c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8019e40:	2500      	movs	r5, #0
 8019e42:	4545      	cmp	r5, r8
 8019e44:	dd18      	ble.n	8019e78 <__kernel_rem_pio2+0x90>
 8019e46:	9b08      	ldr	r3, [sp, #32]
 8019e48:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8019e4c:	aa20      	add	r2, sp, #128	; 0x80
 8019e4e:	ed9f 8bae 	vldr	d8, [pc, #696]	; 801a108 <__kernel_rem_pio2+0x320>
 8019e52:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8019e56:	f1c3 0301 	rsb	r3, r3, #1
 8019e5a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8019e5e:	9307      	str	r3, [sp, #28]
 8019e60:	9b07      	ldr	r3, [sp, #28]
 8019e62:	9a04      	ldr	r2, [sp, #16]
 8019e64:	4443      	add	r3, r8
 8019e66:	429a      	cmp	r2, r3
 8019e68:	db2f      	blt.n	8019eca <__kernel_rem_pio2+0xe2>
 8019e6a:	ed8d 8b02 	vstr	d8, [sp, #8]
 8019e6e:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8019e72:	462f      	mov	r7, r5
 8019e74:	2600      	movs	r6, #0
 8019e76:	e01b      	b.n	8019eb0 <__kernel_rem_pio2+0xc8>
 8019e78:	42ef      	cmn	r7, r5
 8019e7a:	d407      	bmi.n	8019e8c <__kernel_rem_pio2+0xa4>
 8019e7c:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8019e80:	f7e6 fb70 	bl	8000564 <__aeabi_i2d>
 8019e84:	e8e6 0102 	strd	r0, r1, [r6], #8
 8019e88:	3501      	adds	r5, #1
 8019e8a:	e7da      	b.n	8019e42 <__kernel_rem_pio2+0x5a>
 8019e8c:	ec51 0b18 	vmov	r0, r1, d8
 8019e90:	e7f8      	b.n	8019e84 <__kernel_rem_pio2+0x9c>
 8019e92:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019e96:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8019e9a:	f7e6 fbcd 	bl	8000638 <__aeabi_dmul>
 8019e9e:	4602      	mov	r2, r0
 8019ea0:	460b      	mov	r3, r1
 8019ea2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8019ea6:	f7e6 fa11 	bl	80002cc <__adddf3>
 8019eaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8019eae:	3601      	adds	r6, #1
 8019eb0:	9b06      	ldr	r3, [sp, #24]
 8019eb2:	429e      	cmp	r6, r3
 8019eb4:	f1a7 0708 	sub.w	r7, r7, #8
 8019eb8:	ddeb      	ble.n	8019e92 <__kernel_rem_pio2+0xaa>
 8019eba:	ed9d 7b02 	vldr	d7, [sp, #8]
 8019ebe:	3508      	adds	r5, #8
 8019ec0:	ecab 7b02 	vstmia	fp!, {d7}
 8019ec4:	f108 0801 	add.w	r8, r8, #1
 8019ec8:	e7ca      	b.n	8019e60 <__kernel_rem_pio2+0x78>
 8019eca:	9b04      	ldr	r3, [sp, #16]
 8019ecc:	aa0c      	add	r2, sp, #48	; 0x30
 8019ece:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019ed2:	930b      	str	r3, [sp, #44]	; 0x2c
 8019ed4:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8019ed6:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8019eda:	9c04      	ldr	r4, [sp, #16]
 8019edc:	930a      	str	r3, [sp, #40]	; 0x28
 8019ede:	ab98      	add	r3, sp, #608	; 0x260
 8019ee0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8019ee4:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8019ee8:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8019eec:	f8cd b008 	str.w	fp, [sp, #8]
 8019ef0:	4625      	mov	r5, r4
 8019ef2:	2d00      	cmp	r5, #0
 8019ef4:	dc78      	bgt.n	8019fe8 <__kernel_rem_pio2+0x200>
 8019ef6:	ec47 6b10 	vmov	d0, r6, r7
 8019efa:	4650      	mov	r0, sl
 8019efc:	f000 ff4c 	bl	801ad98 <scalbn>
 8019f00:	ec57 6b10 	vmov	r6, r7, d0
 8019f04:	2200      	movs	r2, #0
 8019f06:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8019f0a:	ee10 0a10 	vmov	r0, s0
 8019f0e:	4639      	mov	r1, r7
 8019f10:	f7e6 fb92 	bl	8000638 <__aeabi_dmul>
 8019f14:	ec41 0b10 	vmov	d0, r0, r1
 8019f18:	f7fe f8ba 	bl	8018090 <floor>
 8019f1c:	4b7f      	ldr	r3, [pc, #508]	; (801a11c <__kernel_rem_pio2+0x334>)
 8019f1e:	ec51 0b10 	vmov	r0, r1, d0
 8019f22:	2200      	movs	r2, #0
 8019f24:	f7e6 fb88 	bl	8000638 <__aeabi_dmul>
 8019f28:	4602      	mov	r2, r0
 8019f2a:	460b      	mov	r3, r1
 8019f2c:	4630      	mov	r0, r6
 8019f2e:	4639      	mov	r1, r7
 8019f30:	f7e6 f9ca 	bl	80002c8 <__aeabi_dsub>
 8019f34:	460f      	mov	r7, r1
 8019f36:	4606      	mov	r6, r0
 8019f38:	f7e6 fe2e 	bl	8000b98 <__aeabi_d2iz>
 8019f3c:	9007      	str	r0, [sp, #28]
 8019f3e:	f7e6 fb11 	bl	8000564 <__aeabi_i2d>
 8019f42:	4602      	mov	r2, r0
 8019f44:	460b      	mov	r3, r1
 8019f46:	4630      	mov	r0, r6
 8019f48:	4639      	mov	r1, r7
 8019f4a:	f7e6 f9bd 	bl	80002c8 <__aeabi_dsub>
 8019f4e:	f1ba 0f00 	cmp.w	sl, #0
 8019f52:	4606      	mov	r6, r0
 8019f54:	460f      	mov	r7, r1
 8019f56:	dd70      	ble.n	801a03a <__kernel_rem_pio2+0x252>
 8019f58:	1e62      	subs	r2, r4, #1
 8019f5a:	ab0c      	add	r3, sp, #48	; 0x30
 8019f5c:	9d07      	ldr	r5, [sp, #28]
 8019f5e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8019f62:	f1ca 0118 	rsb	r1, sl, #24
 8019f66:	fa40 f301 	asr.w	r3, r0, r1
 8019f6a:	441d      	add	r5, r3
 8019f6c:	408b      	lsls	r3, r1
 8019f6e:	1ac0      	subs	r0, r0, r3
 8019f70:	ab0c      	add	r3, sp, #48	; 0x30
 8019f72:	9507      	str	r5, [sp, #28]
 8019f74:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8019f78:	f1ca 0317 	rsb	r3, sl, #23
 8019f7c:	fa40 f303 	asr.w	r3, r0, r3
 8019f80:	9302      	str	r3, [sp, #8]
 8019f82:	9b02      	ldr	r3, [sp, #8]
 8019f84:	2b00      	cmp	r3, #0
 8019f86:	dd66      	ble.n	801a056 <__kernel_rem_pio2+0x26e>
 8019f88:	9b07      	ldr	r3, [sp, #28]
 8019f8a:	2200      	movs	r2, #0
 8019f8c:	3301      	adds	r3, #1
 8019f8e:	9307      	str	r3, [sp, #28]
 8019f90:	4615      	mov	r5, r2
 8019f92:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8019f96:	4294      	cmp	r4, r2
 8019f98:	f300 8099 	bgt.w	801a0ce <__kernel_rem_pio2+0x2e6>
 8019f9c:	f1ba 0f00 	cmp.w	sl, #0
 8019fa0:	dd07      	ble.n	8019fb2 <__kernel_rem_pio2+0x1ca>
 8019fa2:	f1ba 0f01 	cmp.w	sl, #1
 8019fa6:	f000 80a5 	beq.w	801a0f4 <__kernel_rem_pio2+0x30c>
 8019faa:	f1ba 0f02 	cmp.w	sl, #2
 8019fae:	f000 80c1 	beq.w	801a134 <__kernel_rem_pio2+0x34c>
 8019fb2:	9b02      	ldr	r3, [sp, #8]
 8019fb4:	2b02      	cmp	r3, #2
 8019fb6:	d14e      	bne.n	801a056 <__kernel_rem_pio2+0x26e>
 8019fb8:	4632      	mov	r2, r6
 8019fba:	463b      	mov	r3, r7
 8019fbc:	4958      	ldr	r1, [pc, #352]	; (801a120 <__kernel_rem_pio2+0x338>)
 8019fbe:	2000      	movs	r0, #0
 8019fc0:	f7e6 f982 	bl	80002c8 <__aeabi_dsub>
 8019fc4:	4606      	mov	r6, r0
 8019fc6:	460f      	mov	r7, r1
 8019fc8:	2d00      	cmp	r5, #0
 8019fca:	d044      	beq.n	801a056 <__kernel_rem_pio2+0x26e>
 8019fcc:	4650      	mov	r0, sl
 8019fce:	ed9f 0b50 	vldr	d0, [pc, #320]	; 801a110 <__kernel_rem_pio2+0x328>
 8019fd2:	f000 fee1 	bl	801ad98 <scalbn>
 8019fd6:	4630      	mov	r0, r6
 8019fd8:	4639      	mov	r1, r7
 8019fda:	ec53 2b10 	vmov	r2, r3, d0
 8019fde:	f7e6 f973 	bl	80002c8 <__aeabi_dsub>
 8019fe2:	4606      	mov	r6, r0
 8019fe4:	460f      	mov	r7, r1
 8019fe6:	e036      	b.n	801a056 <__kernel_rem_pio2+0x26e>
 8019fe8:	4b4e      	ldr	r3, [pc, #312]	; (801a124 <__kernel_rem_pio2+0x33c>)
 8019fea:	2200      	movs	r2, #0
 8019fec:	4630      	mov	r0, r6
 8019fee:	4639      	mov	r1, r7
 8019ff0:	f7e6 fb22 	bl	8000638 <__aeabi_dmul>
 8019ff4:	f7e6 fdd0 	bl	8000b98 <__aeabi_d2iz>
 8019ff8:	f7e6 fab4 	bl	8000564 <__aeabi_i2d>
 8019ffc:	4b4a      	ldr	r3, [pc, #296]	; (801a128 <__kernel_rem_pio2+0x340>)
 8019ffe:	2200      	movs	r2, #0
 801a000:	4680      	mov	r8, r0
 801a002:	4689      	mov	r9, r1
 801a004:	f7e6 fb18 	bl	8000638 <__aeabi_dmul>
 801a008:	4602      	mov	r2, r0
 801a00a:	460b      	mov	r3, r1
 801a00c:	4630      	mov	r0, r6
 801a00e:	4639      	mov	r1, r7
 801a010:	f7e6 f95a 	bl	80002c8 <__aeabi_dsub>
 801a014:	f7e6 fdc0 	bl	8000b98 <__aeabi_d2iz>
 801a018:	9b02      	ldr	r3, [sp, #8]
 801a01a:	f843 0b04 	str.w	r0, [r3], #4
 801a01e:	3d01      	subs	r5, #1
 801a020:	9302      	str	r3, [sp, #8]
 801a022:	ab70      	add	r3, sp, #448	; 0x1c0
 801a024:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a028:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a02c:	4640      	mov	r0, r8
 801a02e:	4649      	mov	r1, r9
 801a030:	f7e6 f94c 	bl	80002cc <__adddf3>
 801a034:	4606      	mov	r6, r0
 801a036:	460f      	mov	r7, r1
 801a038:	e75b      	b.n	8019ef2 <__kernel_rem_pio2+0x10a>
 801a03a:	d105      	bne.n	801a048 <__kernel_rem_pio2+0x260>
 801a03c:	1e63      	subs	r3, r4, #1
 801a03e:	aa0c      	add	r2, sp, #48	; 0x30
 801a040:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a044:	15c3      	asrs	r3, r0, #23
 801a046:	e79b      	b.n	8019f80 <__kernel_rem_pio2+0x198>
 801a048:	4b38      	ldr	r3, [pc, #224]	; (801a12c <__kernel_rem_pio2+0x344>)
 801a04a:	2200      	movs	r2, #0
 801a04c:	f7e6 fd7a 	bl	8000b44 <__aeabi_dcmpge>
 801a050:	2800      	cmp	r0, #0
 801a052:	d139      	bne.n	801a0c8 <__kernel_rem_pio2+0x2e0>
 801a054:	9002      	str	r0, [sp, #8]
 801a056:	2200      	movs	r2, #0
 801a058:	2300      	movs	r3, #0
 801a05a:	4630      	mov	r0, r6
 801a05c:	4639      	mov	r1, r7
 801a05e:	f7e6 fd53 	bl	8000b08 <__aeabi_dcmpeq>
 801a062:	2800      	cmp	r0, #0
 801a064:	f000 80b4 	beq.w	801a1d0 <__kernel_rem_pio2+0x3e8>
 801a068:	f104 3bff 	add.w	fp, r4, #4294967295
 801a06c:	465b      	mov	r3, fp
 801a06e:	2200      	movs	r2, #0
 801a070:	9904      	ldr	r1, [sp, #16]
 801a072:	428b      	cmp	r3, r1
 801a074:	da65      	bge.n	801a142 <__kernel_rem_pio2+0x35a>
 801a076:	2a00      	cmp	r2, #0
 801a078:	d07b      	beq.n	801a172 <__kernel_rem_pio2+0x38a>
 801a07a:	ab0c      	add	r3, sp, #48	; 0x30
 801a07c:	f1aa 0a18 	sub.w	sl, sl, #24
 801a080:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 801a084:	2b00      	cmp	r3, #0
 801a086:	f000 80a0 	beq.w	801a1ca <__kernel_rem_pio2+0x3e2>
 801a08a:	ed9f 0b21 	vldr	d0, [pc, #132]	; 801a110 <__kernel_rem_pio2+0x328>
 801a08e:	4650      	mov	r0, sl
 801a090:	f000 fe82 	bl	801ad98 <scalbn>
 801a094:	4f23      	ldr	r7, [pc, #140]	; (801a124 <__kernel_rem_pio2+0x33c>)
 801a096:	ec55 4b10 	vmov	r4, r5, d0
 801a09a:	46d8      	mov	r8, fp
 801a09c:	2600      	movs	r6, #0
 801a09e:	f1b8 0f00 	cmp.w	r8, #0
 801a0a2:	f280 80cf 	bge.w	801a244 <__kernel_rem_pio2+0x45c>
 801a0a6:	ed9f 8b18 	vldr	d8, [pc, #96]	; 801a108 <__kernel_rem_pio2+0x320>
 801a0aa:	465f      	mov	r7, fp
 801a0ac:	f04f 0800 	mov.w	r8, #0
 801a0b0:	2f00      	cmp	r7, #0
 801a0b2:	f2c0 80fd 	blt.w	801a2b0 <__kernel_rem_pio2+0x4c8>
 801a0b6:	ab70      	add	r3, sp, #448	; 0x1c0
 801a0b8:	f8df a074 	ldr.w	sl, [pc, #116]	; 801a130 <__kernel_rem_pio2+0x348>
 801a0bc:	ec55 4b18 	vmov	r4, r5, d8
 801a0c0:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 801a0c4:	2600      	movs	r6, #0
 801a0c6:	e0e5      	b.n	801a294 <__kernel_rem_pio2+0x4ac>
 801a0c8:	2302      	movs	r3, #2
 801a0ca:	9302      	str	r3, [sp, #8]
 801a0cc:	e75c      	b.n	8019f88 <__kernel_rem_pio2+0x1a0>
 801a0ce:	f8db 3000 	ldr.w	r3, [fp]
 801a0d2:	b955      	cbnz	r5, 801a0ea <__kernel_rem_pio2+0x302>
 801a0d4:	b123      	cbz	r3, 801a0e0 <__kernel_rem_pio2+0x2f8>
 801a0d6:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801a0da:	f8cb 3000 	str.w	r3, [fp]
 801a0de:	2301      	movs	r3, #1
 801a0e0:	3201      	adds	r2, #1
 801a0e2:	f10b 0b04 	add.w	fp, fp, #4
 801a0e6:	461d      	mov	r5, r3
 801a0e8:	e755      	b.n	8019f96 <__kernel_rem_pio2+0x1ae>
 801a0ea:	1acb      	subs	r3, r1, r3
 801a0ec:	f8cb 3000 	str.w	r3, [fp]
 801a0f0:	462b      	mov	r3, r5
 801a0f2:	e7f5      	b.n	801a0e0 <__kernel_rem_pio2+0x2f8>
 801a0f4:	1e62      	subs	r2, r4, #1
 801a0f6:	ab0c      	add	r3, sp, #48	; 0x30
 801a0f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a0fc:	f3c3 0316 	ubfx	r3, r3, #0, #23
 801a100:	a90c      	add	r1, sp, #48	; 0x30
 801a102:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 801a106:	e754      	b.n	8019fb2 <__kernel_rem_pio2+0x1ca>
	...
 801a114:	3ff00000 	.word	0x3ff00000
 801a118:	0803eec0 	.word	0x0803eec0
 801a11c:	40200000 	.word	0x40200000
 801a120:	3ff00000 	.word	0x3ff00000
 801a124:	3e700000 	.word	0x3e700000
 801a128:	41700000 	.word	0x41700000
 801a12c:	3fe00000 	.word	0x3fe00000
 801a130:	0803ee80 	.word	0x0803ee80
 801a134:	1e62      	subs	r2, r4, #1
 801a136:	ab0c      	add	r3, sp, #48	; 0x30
 801a138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801a13c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 801a140:	e7de      	b.n	801a100 <__kernel_rem_pio2+0x318>
 801a142:	a90c      	add	r1, sp, #48	; 0x30
 801a144:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801a148:	3b01      	subs	r3, #1
 801a14a:	430a      	orrs	r2, r1
 801a14c:	e790      	b.n	801a070 <__kernel_rem_pio2+0x288>
 801a14e:	3301      	adds	r3, #1
 801a150:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 801a154:	2900      	cmp	r1, #0
 801a156:	d0fa      	beq.n	801a14e <__kernel_rem_pio2+0x366>
 801a158:	9a08      	ldr	r2, [sp, #32]
 801a15a:	18e3      	adds	r3, r4, r3
 801a15c:	18a6      	adds	r6, r4, r2
 801a15e:	aa20      	add	r2, sp, #128	; 0x80
 801a160:	1c65      	adds	r5, r4, #1
 801a162:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 801a166:	9302      	str	r3, [sp, #8]
 801a168:	9b02      	ldr	r3, [sp, #8]
 801a16a:	42ab      	cmp	r3, r5
 801a16c:	da04      	bge.n	801a178 <__kernel_rem_pio2+0x390>
 801a16e:	461c      	mov	r4, r3
 801a170:	e6b5      	b.n	8019ede <__kernel_rem_pio2+0xf6>
 801a172:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 801a174:	2301      	movs	r3, #1
 801a176:	e7eb      	b.n	801a150 <__kernel_rem_pio2+0x368>
 801a178:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 801a17a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 801a17e:	f7e6 f9f1 	bl	8000564 <__aeabi_i2d>
 801a182:	e8e6 0102 	strd	r0, r1, [r6], #8
 801a186:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801a188:	46b3      	mov	fp, r6
 801a18a:	461c      	mov	r4, r3
 801a18c:	2700      	movs	r7, #0
 801a18e:	f04f 0800 	mov.w	r8, #0
 801a192:	f04f 0900 	mov.w	r9, #0
 801a196:	9b06      	ldr	r3, [sp, #24]
 801a198:	429f      	cmp	r7, r3
 801a19a:	dd06      	ble.n	801a1aa <__kernel_rem_pio2+0x3c2>
 801a19c:	ab70      	add	r3, sp, #448	; 0x1c0
 801a19e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801a1a2:	e9c3 8900 	strd	r8, r9, [r3]
 801a1a6:	3501      	adds	r5, #1
 801a1a8:	e7de      	b.n	801a168 <__kernel_rem_pio2+0x380>
 801a1aa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 801a1ae:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 801a1b2:	f7e6 fa41 	bl	8000638 <__aeabi_dmul>
 801a1b6:	4602      	mov	r2, r0
 801a1b8:	460b      	mov	r3, r1
 801a1ba:	4640      	mov	r0, r8
 801a1bc:	4649      	mov	r1, r9
 801a1be:	f7e6 f885 	bl	80002cc <__adddf3>
 801a1c2:	3701      	adds	r7, #1
 801a1c4:	4680      	mov	r8, r0
 801a1c6:	4689      	mov	r9, r1
 801a1c8:	e7e5      	b.n	801a196 <__kernel_rem_pio2+0x3ae>
 801a1ca:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a1ce:	e754      	b.n	801a07a <__kernel_rem_pio2+0x292>
 801a1d0:	ec47 6b10 	vmov	d0, r6, r7
 801a1d4:	f1ca 0000 	rsb	r0, sl, #0
 801a1d8:	f000 fdde 	bl	801ad98 <scalbn>
 801a1dc:	ec57 6b10 	vmov	r6, r7, d0
 801a1e0:	4b9f      	ldr	r3, [pc, #636]	; (801a460 <__kernel_rem_pio2+0x678>)
 801a1e2:	ee10 0a10 	vmov	r0, s0
 801a1e6:	2200      	movs	r2, #0
 801a1e8:	4639      	mov	r1, r7
 801a1ea:	f7e6 fcab 	bl	8000b44 <__aeabi_dcmpge>
 801a1ee:	b300      	cbz	r0, 801a232 <__kernel_rem_pio2+0x44a>
 801a1f0:	4b9c      	ldr	r3, [pc, #624]	; (801a464 <__kernel_rem_pio2+0x67c>)
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	4630      	mov	r0, r6
 801a1f6:	4639      	mov	r1, r7
 801a1f8:	f7e6 fa1e 	bl	8000638 <__aeabi_dmul>
 801a1fc:	f7e6 fccc 	bl	8000b98 <__aeabi_d2iz>
 801a200:	4605      	mov	r5, r0
 801a202:	f7e6 f9af 	bl	8000564 <__aeabi_i2d>
 801a206:	4b96      	ldr	r3, [pc, #600]	; (801a460 <__kernel_rem_pio2+0x678>)
 801a208:	2200      	movs	r2, #0
 801a20a:	f7e6 fa15 	bl	8000638 <__aeabi_dmul>
 801a20e:	460b      	mov	r3, r1
 801a210:	4602      	mov	r2, r0
 801a212:	4639      	mov	r1, r7
 801a214:	4630      	mov	r0, r6
 801a216:	f7e6 f857 	bl	80002c8 <__aeabi_dsub>
 801a21a:	f7e6 fcbd 	bl	8000b98 <__aeabi_d2iz>
 801a21e:	f104 0b01 	add.w	fp, r4, #1
 801a222:	ab0c      	add	r3, sp, #48	; 0x30
 801a224:	f10a 0a18 	add.w	sl, sl, #24
 801a228:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a22c:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 801a230:	e72b      	b.n	801a08a <__kernel_rem_pio2+0x2a2>
 801a232:	4630      	mov	r0, r6
 801a234:	4639      	mov	r1, r7
 801a236:	f7e6 fcaf 	bl	8000b98 <__aeabi_d2iz>
 801a23a:	ab0c      	add	r3, sp, #48	; 0x30
 801a23c:	46a3      	mov	fp, r4
 801a23e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801a242:	e722      	b.n	801a08a <__kernel_rem_pio2+0x2a2>
 801a244:	ab70      	add	r3, sp, #448	; 0x1c0
 801a246:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 801a24a:	ab0c      	add	r3, sp, #48	; 0x30
 801a24c:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 801a250:	f7e6 f988 	bl	8000564 <__aeabi_i2d>
 801a254:	4622      	mov	r2, r4
 801a256:	462b      	mov	r3, r5
 801a258:	f7e6 f9ee 	bl	8000638 <__aeabi_dmul>
 801a25c:	4632      	mov	r2, r6
 801a25e:	e9c9 0100 	strd	r0, r1, [r9]
 801a262:	463b      	mov	r3, r7
 801a264:	4620      	mov	r0, r4
 801a266:	4629      	mov	r1, r5
 801a268:	f7e6 f9e6 	bl	8000638 <__aeabi_dmul>
 801a26c:	f108 38ff 	add.w	r8, r8, #4294967295
 801a270:	4604      	mov	r4, r0
 801a272:	460d      	mov	r5, r1
 801a274:	e713      	b.n	801a09e <__kernel_rem_pio2+0x2b6>
 801a276:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 801a27a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 801a27e:	f7e6 f9db 	bl	8000638 <__aeabi_dmul>
 801a282:	4602      	mov	r2, r0
 801a284:	460b      	mov	r3, r1
 801a286:	4620      	mov	r0, r4
 801a288:	4629      	mov	r1, r5
 801a28a:	f7e6 f81f 	bl	80002cc <__adddf3>
 801a28e:	3601      	adds	r6, #1
 801a290:	4604      	mov	r4, r0
 801a292:	460d      	mov	r5, r1
 801a294:	9b04      	ldr	r3, [sp, #16]
 801a296:	429e      	cmp	r6, r3
 801a298:	dc01      	bgt.n	801a29e <__kernel_rem_pio2+0x4b6>
 801a29a:	45b0      	cmp	r8, r6
 801a29c:	daeb      	bge.n	801a276 <__kernel_rem_pio2+0x48e>
 801a29e:	ab48      	add	r3, sp, #288	; 0x120
 801a2a0:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 801a2a4:	e9c3 4500 	strd	r4, r5, [r3]
 801a2a8:	3f01      	subs	r7, #1
 801a2aa:	f108 0801 	add.w	r8, r8, #1
 801a2ae:	e6ff      	b.n	801a0b0 <__kernel_rem_pio2+0x2c8>
 801a2b0:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a2b2:	2b02      	cmp	r3, #2
 801a2b4:	dc0b      	bgt.n	801a2ce <__kernel_rem_pio2+0x4e6>
 801a2b6:	2b00      	cmp	r3, #0
 801a2b8:	dc6e      	bgt.n	801a398 <__kernel_rem_pio2+0x5b0>
 801a2ba:	d045      	beq.n	801a348 <__kernel_rem_pio2+0x560>
 801a2bc:	9b07      	ldr	r3, [sp, #28]
 801a2be:	f003 0007 	and.w	r0, r3, #7
 801a2c2:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 801a2c6:	ecbd 8b02 	vpop	{d8}
 801a2ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a2ce:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 801a2d0:	2b03      	cmp	r3, #3
 801a2d2:	d1f3      	bne.n	801a2bc <__kernel_rem_pio2+0x4d4>
 801a2d4:	ab48      	add	r3, sp, #288	; 0x120
 801a2d6:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 801a2da:	46d0      	mov	r8, sl
 801a2dc:	46d9      	mov	r9, fp
 801a2de:	f1b9 0f00 	cmp.w	r9, #0
 801a2e2:	f1a8 0808 	sub.w	r8, r8, #8
 801a2e6:	dc64      	bgt.n	801a3b2 <__kernel_rem_pio2+0x5ca>
 801a2e8:	465c      	mov	r4, fp
 801a2ea:	2c01      	cmp	r4, #1
 801a2ec:	f1aa 0a08 	sub.w	sl, sl, #8
 801a2f0:	dc7e      	bgt.n	801a3f0 <__kernel_rem_pio2+0x608>
 801a2f2:	2000      	movs	r0, #0
 801a2f4:	2100      	movs	r1, #0
 801a2f6:	f1bb 0f01 	cmp.w	fp, #1
 801a2fa:	f300 8097 	bgt.w	801a42c <__kernel_rem_pio2+0x644>
 801a2fe:	9b02      	ldr	r3, [sp, #8]
 801a300:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 801a304:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 801a308:	2b00      	cmp	r3, #0
 801a30a:	f040 8099 	bne.w	801a440 <__kernel_rem_pio2+0x658>
 801a30e:	9b01      	ldr	r3, [sp, #4]
 801a310:	e9c3 5600 	strd	r5, r6, [r3]
 801a314:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801a318:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801a31c:	e7ce      	b.n	801a2bc <__kernel_rem_pio2+0x4d4>
 801a31e:	ab48      	add	r3, sp, #288	; 0x120
 801a320:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a324:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a328:	f7e5 ffd0 	bl	80002cc <__adddf3>
 801a32c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a330:	f1bb 0f00 	cmp.w	fp, #0
 801a334:	daf3      	bge.n	801a31e <__kernel_rem_pio2+0x536>
 801a336:	9b02      	ldr	r3, [sp, #8]
 801a338:	b113      	cbz	r3, 801a340 <__kernel_rem_pio2+0x558>
 801a33a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a33e:	4619      	mov	r1, r3
 801a340:	9b01      	ldr	r3, [sp, #4]
 801a342:	e9c3 0100 	strd	r0, r1, [r3]
 801a346:	e7b9      	b.n	801a2bc <__kernel_rem_pio2+0x4d4>
 801a348:	2000      	movs	r0, #0
 801a34a:	2100      	movs	r1, #0
 801a34c:	e7f0      	b.n	801a330 <__kernel_rem_pio2+0x548>
 801a34e:	ab48      	add	r3, sp, #288	; 0x120
 801a350:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801a354:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a358:	f7e5 ffb8 	bl	80002cc <__adddf3>
 801a35c:	3c01      	subs	r4, #1
 801a35e:	2c00      	cmp	r4, #0
 801a360:	daf5      	bge.n	801a34e <__kernel_rem_pio2+0x566>
 801a362:	9b02      	ldr	r3, [sp, #8]
 801a364:	b1e3      	cbz	r3, 801a3a0 <__kernel_rem_pio2+0x5b8>
 801a366:	4602      	mov	r2, r0
 801a368:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a36c:	9c01      	ldr	r4, [sp, #4]
 801a36e:	e9c4 2300 	strd	r2, r3, [r4]
 801a372:	4602      	mov	r2, r0
 801a374:	460b      	mov	r3, r1
 801a376:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 801a37a:	f7e5 ffa5 	bl	80002c8 <__aeabi_dsub>
 801a37e:	ad4a      	add	r5, sp, #296	; 0x128
 801a380:	2401      	movs	r4, #1
 801a382:	45a3      	cmp	fp, r4
 801a384:	da0f      	bge.n	801a3a6 <__kernel_rem_pio2+0x5be>
 801a386:	9b02      	ldr	r3, [sp, #8]
 801a388:	b113      	cbz	r3, 801a390 <__kernel_rem_pio2+0x5a8>
 801a38a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a38e:	4619      	mov	r1, r3
 801a390:	9b01      	ldr	r3, [sp, #4]
 801a392:	e9c3 0102 	strd	r0, r1, [r3, #8]
 801a396:	e791      	b.n	801a2bc <__kernel_rem_pio2+0x4d4>
 801a398:	465c      	mov	r4, fp
 801a39a:	2000      	movs	r0, #0
 801a39c:	2100      	movs	r1, #0
 801a39e:	e7de      	b.n	801a35e <__kernel_rem_pio2+0x576>
 801a3a0:	4602      	mov	r2, r0
 801a3a2:	460b      	mov	r3, r1
 801a3a4:	e7e2      	b.n	801a36c <__kernel_rem_pio2+0x584>
 801a3a6:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 801a3aa:	f7e5 ff8f 	bl	80002cc <__adddf3>
 801a3ae:	3401      	adds	r4, #1
 801a3b0:	e7e7      	b.n	801a382 <__kernel_rem_pio2+0x59a>
 801a3b2:	e9d8 4500 	ldrd	r4, r5, [r8]
 801a3b6:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 801a3ba:	4620      	mov	r0, r4
 801a3bc:	4632      	mov	r2, r6
 801a3be:	463b      	mov	r3, r7
 801a3c0:	4629      	mov	r1, r5
 801a3c2:	f7e5 ff83 	bl	80002cc <__adddf3>
 801a3c6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a3ca:	4602      	mov	r2, r0
 801a3cc:	460b      	mov	r3, r1
 801a3ce:	4620      	mov	r0, r4
 801a3d0:	4629      	mov	r1, r5
 801a3d2:	f7e5 ff79 	bl	80002c8 <__aeabi_dsub>
 801a3d6:	4632      	mov	r2, r6
 801a3d8:	463b      	mov	r3, r7
 801a3da:	f7e5 ff77 	bl	80002cc <__adddf3>
 801a3de:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a3e2:	e9c8 0102 	strd	r0, r1, [r8, #8]
 801a3e6:	ed88 7b00 	vstr	d7, [r8]
 801a3ea:	f109 39ff 	add.w	r9, r9, #4294967295
 801a3ee:	e776      	b.n	801a2de <__kernel_rem_pio2+0x4f6>
 801a3f0:	e9da 8900 	ldrd	r8, r9, [sl]
 801a3f4:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 801a3f8:	4640      	mov	r0, r8
 801a3fa:	4632      	mov	r2, r6
 801a3fc:	463b      	mov	r3, r7
 801a3fe:	4649      	mov	r1, r9
 801a400:	f7e5 ff64 	bl	80002cc <__adddf3>
 801a404:	e9cd 0104 	strd	r0, r1, [sp, #16]
 801a408:	4602      	mov	r2, r0
 801a40a:	460b      	mov	r3, r1
 801a40c:	4640      	mov	r0, r8
 801a40e:	4649      	mov	r1, r9
 801a410:	f7e5 ff5a 	bl	80002c8 <__aeabi_dsub>
 801a414:	4632      	mov	r2, r6
 801a416:	463b      	mov	r3, r7
 801a418:	f7e5 ff58 	bl	80002cc <__adddf3>
 801a41c:	ed9d 7b04 	vldr	d7, [sp, #16]
 801a420:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801a424:	ed8a 7b00 	vstr	d7, [sl]
 801a428:	3c01      	subs	r4, #1
 801a42a:	e75e      	b.n	801a2ea <__kernel_rem_pio2+0x502>
 801a42c:	ab48      	add	r3, sp, #288	; 0x120
 801a42e:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 801a432:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a436:	f7e5 ff49 	bl	80002cc <__adddf3>
 801a43a:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a43e:	e75a      	b.n	801a2f6 <__kernel_rem_pio2+0x50e>
 801a440:	9b01      	ldr	r3, [sp, #4]
 801a442:	9a01      	ldr	r2, [sp, #4]
 801a444:	601d      	str	r5, [r3, #0]
 801a446:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 801a44a:	605c      	str	r4, [r3, #4]
 801a44c:	609f      	str	r7, [r3, #8]
 801a44e:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 801a452:	60d3      	str	r3, [r2, #12]
 801a454:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801a458:	6110      	str	r0, [r2, #16]
 801a45a:	6153      	str	r3, [r2, #20]
 801a45c:	e72e      	b.n	801a2bc <__kernel_rem_pio2+0x4d4>
 801a45e:	bf00      	nop
 801a460:	41700000 	.word	0x41700000
 801a464:	3e700000 	.word	0x3e700000

0801a468 <__kernel_sin>:
 801a468:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a46c:	ed2d 8b04 	vpush	{d8-d9}
 801a470:	eeb0 8a41 	vmov.f32	s16, s2
 801a474:	eef0 8a61 	vmov.f32	s17, s3
 801a478:	ec55 4b10 	vmov	r4, r5, d0
 801a47c:	b083      	sub	sp, #12
 801a47e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801a482:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 801a486:	9001      	str	r0, [sp, #4]
 801a488:	da06      	bge.n	801a498 <__kernel_sin+0x30>
 801a48a:	ee10 0a10 	vmov	r0, s0
 801a48e:	4629      	mov	r1, r5
 801a490:	f7e6 fb82 	bl	8000b98 <__aeabi_d2iz>
 801a494:	2800      	cmp	r0, #0
 801a496:	d051      	beq.n	801a53c <__kernel_sin+0xd4>
 801a498:	4622      	mov	r2, r4
 801a49a:	462b      	mov	r3, r5
 801a49c:	4620      	mov	r0, r4
 801a49e:	4629      	mov	r1, r5
 801a4a0:	f7e6 f8ca 	bl	8000638 <__aeabi_dmul>
 801a4a4:	4682      	mov	sl, r0
 801a4a6:	468b      	mov	fp, r1
 801a4a8:	4602      	mov	r2, r0
 801a4aa:	460b      	mov	r3, r1
 801a4ac:	4620      	mov	r0, r4
 801a4ae:	4629      	mov	r1, r5
 801a4b0:	f7e6 f8c2 	bl	8000638 <__aeabi_dmul>
 801a4b4:	a341      	add	r3, pc, #260	; (adr r3, 801a5bc <__kernel_sin+0x154>)
 801a4b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4ba:	4680      	mov	r8, r0
 801a4bc:	4689      	mov	r9, r1
 801a4be:	4650      	mov	r0, sl
 801a4c0:	4659      	mov	r1, fp
 801a4c2:	f7e6 f8b9 	bl	8000638 <__aeabi_dmul>
 801a4c6:	a33f      	add	r3, pc, #252	; (adr r3, 801a5c4 <__kernel_sin+0x15c>)
 801a4c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4cc:	f7e5 fefc 	bl	80002c8 <__aeabi_dsub>
 801a4d0:	4652      	mov	r2, sl
 801a4d2:	465b      	mov	r3, fp
 801a4d4:	f7e6 f8b0 	bl	8000638 <__aeabi_dmul>
 801a4d8:	a33c      	add	r3, pc, #240	; (adr r3, 801a5cc <__kernel_sin+0x164>)
 801a4da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4de:	f7e5 fef5 	bl	80002cc <__adddf3>
 801a4e2:	4652      	mov	r2, sl
 801a4e4:	465b      	mov	r3, fp
 801a4e6:	f7e6 f8a7 	bl	8000638 <__aeabi_dmul>
 801a4ea:	a33a      	add	r3, pc, #232	; (adr r3, 801a5d4 <__kernel_sin+0x16c>)
 801a4ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a4f0:	f7e5 feea 	bl	80002c8 <__aeabi_dsub>
 801a4f4:	4652      	mov	r2, sl
 801a4f6:	465b      	mov	r3, fp
 801a4f8:	f7e6 f89e 	bl	8000638 <__aeabi_dmul>
 801a4fc:	a337      	add	r3, pc, #220	; (adr r3, 801a5dc <__kernel_sin+0x174>)
 801a4fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a502:	f7e5 fee3 	bl	80002cc <__adddf3>
 801a506:	9b01      	ldr	r3, [sp, #4]
 801a508:	4606      	mov	r6, r0
 801a50a:	460f      	mov	r7, r1
 801a50c:	b9eb      	cbnz	r3, 801a54a <__kernel_sin+0xe2>
 801a50e:	4602      	mov	r2, r0
 801a510:	460b      	mov	r3, r1
 801a512:	4650      	mov	r0, sl
 801a514:	4659      	mov	r1, fp
 801a516:	f7e6 f88f 	bl	8000638 <__aeabi_dmul>
 801a51a:	a325      	add	r3, pc, #148	; (adr r3, 801a5b0 <__kernel_sin+0x148>)
 801a51c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a520:	f7e5 fed2 	bl	80002c8 <__aeabi_dsub>
 801a524:	4642      	mov	r2, r8
 801a526:	464b      	mov	r3, r9
 801a528:	f7e6 f886 	bl	8000638 <__aeabi_dmul>
 801a52c:	4602      	mov	r2, r0
 801a52e:	460b      	mov	r3, r1
 801a530:	4620      	mov	r0, r4
 801a532:	4629      	mov	r1, r5
 801a534:	f7e5 feca 	bl	80002cc <__adddf3>
 801a538:	4604      	mov	r4, r0
 801a53a:	460d      	mov	r5, r1
 801a53c:	ec45 4b10 	vmov	d0, r4, r5
 801a540:	b003      	add	sp, #12
 801a542:	ecbd 8b04 	vpop	{d8-d9}
 801a546:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a54a:	4b1b      	ldr	r3, [pc, #108]	; (801a5b8 <__kernel_sin+0x150>)
 801a54c:	ec51 0b18 	vmov	r0, r1, d8
 801a550:	2200      	movs	r2, #0
 801a552:	f7e6 f871 	bl	8000638 <__aeabi_dmul>
 801a556:	4632      	mov	r2, r6
 801a558:	ec41 0b19 	vmov	d9, r0, r1
 801a55c:	463b      	mov	r3, r7
 801a55e:	4640      	mov	r0, r8
 801a560:	4649      	mov	r1, r9
 801a562:	f7e6 f869 	bl	8000638 <__aeabi_dmul>
 801a566:	4602      	mov	r2, r0
 801a568:	460b      	mov	r3, r1
 801a56a:	ec51 0b19 	vmov	r0, r1, d9
 801a56e:	f7e5 feab 	bl	80002c8 <__aeabi_dsub>
 801a572:	4652      	mov	r2, sl
 801a574:	465b      	mov	r3, fp
 801a576:	f7e6 f85f 	bl	8000638 <__aeabi_dmul>
 801a57a:	ec53 2b18 	vmov	r2, r3, d8
 801a57e:	f7e5 fea3 	bl	80002c8 <__aeabi_dsub>
 801a582:	a30b      	add	r3, pc, #44	; (adr r3, 801a5b0 <__kernel_sin+0x148>)
 801a584:	e9d3 2300 	ldrd	r2, r3, [r3]
 801a588:	4606      	mov	r6, r0
 801a58a:	460f      	mov	r7, r1
 801a58c:	4640      	mov	r0, r8
 801a58e:	4649      	mov	r1, r9
 801a590:	f7e6 f852 	bl	8000638 <__aeabi_dmul>
 801a594:	4602      	mov	r2, r0
 801a596:	460b      	mov	r3, r1
 801a598:	4630      	mov	r0, r6
 801a59a:	4639      	mov	r1, r7
 801a59c:	f7e5 fe96 	bl	80002cc <__adddf3>
 801a5a0:	4602      	mov	r2, r0
 801a5a2:	460b      	mov	r3, r1
 801a5a4:	4620      	mov	r0, r4
 801a5a6:	4629      	mov	r1, r5
 801a5a8:	f7e5 fe8e 	bl	80002c8 <__aeabi_dsub>
 801a5ac:	e7c4      	b.n	801a538 <__kernel_sin+0xd0>
 801a5ae:	bf00      	nop
 801a5b0:	55555549 	.word	0x55555549
 801a5b4:	3fc55555 	.word	0x3fc55555
 801a5b8:	3fe00000 	.word	0x3fe00000
 801a5bc:	5acfd57c 	.word	0x5acfd57c
 801a5c0:	3de5d93a 	.word	0x3de5d93a
 801a5c4:	8a2b9ceb 	.word	0x8a2b9ceb
 801a5c8:	3e5ae5e6 	.word	0x3e5ae5e6
 801a5cc:	57b1fe7d 	.word	0x57b1fe7d
 801a5d0:	3ec71de3 	.word	0x3ec71de3
 801a5d4:	19c161d5 	.word	0x19c161d5
 801a5d8:	3f2a01a0 	.word	0x3f2a01a0
 801a5dc:	1110f8a6 	.word	0x1110f8a6
 801a5e0:	3f811111 	.word	0x3f811111

0801a5e4 <__kernel_cosf>:
 801a5e4:	ee10 3a10 	vmov	r3, s0
 801a5e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801a5ec:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801a5f0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 801a5f4:	da05      	bge.n	801a602 <__kernel_cosf+0x1e>
 801a5f6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801a5fa:	ee17 2a90 	vmov	r2, s15
 801a5fe:	2a00      	cmp	r2, #0
 801a600:	d03d      	beq.n	801a67e <__kernel_cosf+0x9a>
 801a602:	ee60 5a00 	vmul.f32	s11, s0, s0
 801a606:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801a684 <__kernel_cosf+0xa0>
 801a60a:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 801a688 <__kernel_cosf+0xa4>
 801a60e:	eddf 6a1f 	vldr	s13, [pc, #124]	; 801a68c <__kernel_cosf+0xa8>
 801a612:	4a1f      	ldr	r2, [pc, #124]	; (801a690 <__kernel_cosf+0xac>)
 801a614:	eea5 7aa7 	vfma.f32	s14, s11, s15
 801a618:	4293      	cmp	r3, r2
 801a61a:	eddf 7a1e 	vldr	s15, [pc, #120]	; 801a694 <__kernel_cosf+0xb0>
 801a61e:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a622:	ed9f 7a1d 	vldr	s14, [pc, #116]	; 801a698 <__kernel_cosf+0xb4>
 801a626:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801a62a:	eddf 7a1c 	vldr	s15, [pc, #112]	; 801a69c <__kernel_cosf+0xb8>
 801a62e:	eee7 7a25 	vfma.f32	s15, s14, s11
 801a632:	eeb0 7a66 	vmov.f32	s14, s13
 801a636:	eea7 7aa5 	vfma.f32	s14, s15, s11
 801a63a:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 801a63e:	ee65 7aa6 	vmul.f32	s15, s11, s13
 801a642:	ee67 6a25 	vmul.f32	s13, s14, s11
 801a646:	ee20 7ac0 	vnmul.f32	s14, s1, s0
 801a64a:	eea5 7aa6 	vfma.f32	s14, s11, s13
 801a64e:	dc04      	bgt.n	801a65a <__kernel_cosf+0x76>
 801a650:	ee37 7ac7 	vsub.f32	s14, s15, s14
 801a654:	ee36 0a47 	vsub.f32	s0, s12, s14
 801a658:	4770      	bx	lr
 801a65a:	4a11      	ldr	r2, [pc, #68]	; (801a6a0 <__kernel_cosf+0xbc>)
 801a65c:	4293      	cmp	r3, r2
 801a65e:	bfda      	itte	le
 801a660:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 801a664:	ee06 3a90 	vmovle	s13, r3
 801a668:	eef5 6a02 	vmovgt.f32	s13, #82	; 0x3e900000  0.2812500
 801a66c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801a670:	ee36 0a66 	vsub.f32	s0, s12, s13
 801a674:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801a678:	ee30 0a67 	vsub.f32	s0, s0, s15
 801a67c:	4770      	bx	lr
 801a67e:	eeb0 0a46 	vmov.f32	s0, s12
 801a682:	4770      	bx	lr
 801a684:	ad47d74e 	.word	0xad47d74e
 801a688:	310f74f6 	.word	0x310f74f6
 801a68c:	3d2aaaab 	.word	0x3d2aaaab
 801a690:	3e999999 	.word	0x3e999999
 801a694:	b493f27c 	.word	0xb493f27c
 801a698:	37d00d01 	.word	0x37d00d01
 801a69c:	bab60b61 	.word	0xbab60b61
 801a6a0:	3f480000 	.word	0x3f480000

0801a6a4 <__kernel_rem_pio2f>:
 801a6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a6a8:	ed2d 8b04 	vpush	{d8-d9}
 801a6ac:	b0d7      	sub	sp, #348	; 0x15c
 801a6ae:	4616      	mov	r6, r2
 801a6b0:	4698      	mov	r8, r3
 801a6b2:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801a6b4:	4bbb      	ldr	r3, [pc, #748]	; (801a9a4 <__kernel_rem_pio2f+0x300>)
 801a6b6:	9001      	str	r0, [sp, #4]
 801a6b8:	f853 7022 	ldr.w	r7, [r3, r2, lsl #2]
 801a6bc:	1d33      	adds	r3, r6, #4
 801a6be:	460d      	mov	r5, r1
 801a6c0:	f108 39ff 	add.w	r9, r8, #4294967295
 801a6c4:	db29      	blt.n	801a71a <__kernel_rem_pio2f+0x76>
 801a6c6:	1ef1      	subs	r1, r6, #3
 801a6c8:	bf48      	it	mi
 801a6ca:	1d31      	addmi	r1, r6, #4
 801a6cc:	10c9      	asrs	r1, r1, #3
 801a6ce:	1c4c      	adds	r4, r1, #1
 801a6d0:	00e3      	lsls	r3, r4, #3
 801a6d2:	9302      	str	r3, [sp, #8]
 801a6d4:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801a6d6:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 801a9b4 <__kernel_rem_pio2f+0x310>
 801a6da:	eba1 0009 	sub.w	r0, r1, r9
 801a6de:	eb03 0e80 	add.w	lr, r3, r0, lsl #2
 801a6e2:	eba6 04c4 	sub.w	r4, r6, r4, lsl #3
 801a6e6:	eb07 0c09 	add.w	ip, r7, r9
 801a6ea:	f10d 0a68 	add.w	sl, sp, #104	; 0x68
 801a6ee:	2300      	movs	r3, #0
 801a6f0:	4563      	cmp	r3, ip
 801a6f2:	dd14      	ble.n	801a71e <__kernel_rem_pio2f+0x7a>
 801a6f4:	ab1a      	add	r3, sp, #104	; 0x68
 801a6f6:	eb03 0388 	add.w	r3, r3, r8, lsl #2
 801a6fa:	46cc      	mov	ip, r9
 801a6fc:	f50d 7a84 	add.w	sl, sp, #264	; 0x108
 801a700:	f1c8 0b01 	rsb	fp, r8, #1
 801a704:	eb0b 020c 	add.w	r2, fp, ip
 801a708:	4297      	cmp	r7, r2
 801a70a:	db27      	blt.n	801a75c <__kernel_rem_pio2f+0xb8>
 801a70c:	f8dd e004 	ldr.w	lr, [sp, #4]
 801a710:	eddf 7aa8 	vldr	s15, [pc, #672]	; 801a9b4 <__kernel_rem_pio2f+0x310>
 801a714:	4618      	mov	r0, r3
 801a716:	2200      	movs	r2, #0
 801a718:	e016      	b.n	801a748 <__kernel_rem_pio2f+0xa4>
 801a71a:	2100      	movs	r1, #0
 801a71c:	e7d7      	b.n	801a6ce <__kernel_rem_pio2f+0x2a>
 801a71e:	42d8      	cmn	r0, r3
 801a720:	bf5d      	ittte	pl
 801a722:	f85e 2023 	ldrpl.w	r2, [lr, r3, lsl #2]
 801a726:	ee07 2a90 	vmovpl	s15, r2
 801a72a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 801a72e:	eef0 7a47 	vmovmi.f32	s15, s14
 801a732:	ecea 7a01 	vstmia	sl!, {s15}
 801a736:	3301      	adds	r3, #1
 801a738:	e7da      	b.n	801a6f0 <__kernel_rem_pio2f+0x4c>
 801a73a:	ecfe 6a01 	vldmia	lr!, {s13}
 801a73e:	ed90 7a00 	vldr	s14, [r0]
 801a742:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a746:	3201      	adds	r2, #1
 801a748:	454a      	cmp	r2, r9
 801a74a:	f1a0 0004 	sub.w	r0, r0, #4
 801a74e:	ddf4      	ble.n	801a73a <__kernel_rem_pio2f+0x96>
 801a750:	ecea 7a01 	vstmia	sl!, {s15}
 801a754:	3304      	adds	r3, #4
 801a756:	f10c 0c01 	add.w	ip, ip, #1
 801a75a:	e7d3      	b.n	801a704 <__kernel_rem_pio2f+0x60>
 801a75c:	ab06      	add	r3, sp, #24
 801a75e:	eb03 0387 	add.w	r3, r3, r7, lsl #2
 801a762:	9304      	str	r3, [sp, #16]
 801a764:	9b65      	ldr	r3, [sp, #404]	; 0x194
 801a766:	eddf 8a92 	vldr	s17, [pc, #584]	; 801a9b0 <__kernel_rem_pio2f+0x30c>
 801a76a:	ed9f 9a90 	vldr	s18, [pc, #576]	; 801a9ac <__kernel_rem_pio2f+0x308>
 801a76e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801a772:	9303      	str	r3, [sp, #12]
 801a774:	46ba      	mov	sl, r7
 801a776:	ab56      	add	r3, sp, #344	; 0x158
 801a778:	eb03 038a 	add.w	r3, r3, sl, lsl #2
 801a77c:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 801a780:	ab06      	add	r3, sp, #24
 801a782:	4618      	mov	r0, r3
 801a784:	4652      	mov	r2, sl
 801a786:	2a00      	cmp	r2, #0
 801a788:	dc51      	bgt.n	801a82e <__kernel_rem_pio2f+0x18a>
 801a78a:	4620      	mov	r0, r4
 801a78c:	9305      	str	r3, [sp, #20]
 801a78e:	f000 fb9d 	bl	801aecc <scalbnf>
 801a792:	eeb0 8a40 	vmov.f32	s16, s0
 801a796:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 801a79a:	ee28 0a00 	vmul.f32	s0, s16, s0
 801a79e:	f7fd fe4d 	bl	801843c <floorf>
 801a7a2:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 801a7a6:	eea0 8a67 	vfms.f32	s16, s0, s15
 801a7aa:	2c00      	cmp	r4, #0
 801a7ac:	9b05      	ldr	r3, [sp, #20]
 801a7ae:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 801a7b2:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 801a7b6:	edcd 7a00 	vstr	s15, [sp]
 801a7ba:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a7be:	dd4b      	ble.n	801a858 <__kernel_rem_pio2f+0x1b4>
 801a7c0:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a7c4:	aa06      	add	r2, sp, #24
 801a7c6:	f1c4 0e08 	rsb	lr, r4, #8
 801a7ca:	f852 202c 	ldr.w	r2, [r2, ip, lsl #2]
 801a7ce:	ee17 1a90 	vmov	r1, s15
 801a7d2:	fa42 f00e 	asr.w	r0, r2, lr
 801a7d6:	4401      	add	r1, r0
 801a7d8:	9100      	str	r1, [sp, #0]
 801a7da:	fa00 f00e 	lsl.w	r0, r0, lr
 801a7de:	a906      	add	r1, sp, #24
 801a7e0:	1a12      	subs	r2, r2, r0
 801a7e2:	f841 202c 	str.w	r2, [r1, ip, lsl #2]
 801a7e6:	f1c4 0007 	rsb	r0, r4, #7
 801a7ea:	fa42 fb00 	asr.w	fp, r2, r0
 801a7ee:	f1bb 0f00 	cmp.w	fp, #0
 801a7f2:	dd43      	ble.n	801a87c <__kernel_rem_pio2f+0x1d8>
 801a7f4:	9a00      	ldr	r2, [sp, #0]
 801a7f6:	f04f 0e00 	mov.w	lr, #0
 801a7fa:	3201      	adds	r2, #1
 801a7fc:	9200      	str	r2, [sp, #0]
 801a7fe:	4670      	mov	r0, lr
 801a800:	45f2      	cmp	sl, lr
 801a802:	dc6c      	bgt.n	801a8de <__kernel_rem_pio2f+0x23a>
 801a804:	2c00      	cmp	r4, #0
 801a806:	dd04      	ble.n	801a812 <__kernel_rem_pio2f+0x16e>
 801a808:	2c01      	cmp	r4, #1
 801a80a:	d079      	beq.n	801a900 <__kernel_rem_pio2f+0x25c>
 801a80c:	2c02      	cmp	r4, #2
 801a80e:	f000 8082 	beq.w	801a916 <__kernel_rem_pio2f+0x272>
 801a812:	f1bb 0f02 	cmp.w	fp, #2
 801a816:	d131      	bne.n	801a87c <__kernel_rem_pio2f+0x1d8>
 801a818:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a81c:	ee30 8a48 	vsub.f32	s16, s0, s16
 801a820:	b360      	cbz	r0, 801a87c <__kernel_rem_pio2f+0x1d8>
 801a822:	4620      	mov	r0, r4
 801a824:	f000 fb52 	bl	801aecc <scalbnf>
 801a828:	ee38 8a40 	vsub.f32	s16, s16, s0
 801a82c:	e026      	b.n	801a87c <__kernel_rem_pio2f+0x1d8>
 801a82e:	ee60 7a28 	vmul.f32	s15, s0, s17
 801a832:	3a01      	subs	r2, #1
 801a834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a838:	a942      	add	r1, sp, #264	; 0x108
 801a83a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a83e:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 801a842:	eea7 0ac9 	vfms.f32	s0, s15, s18
 801a846:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a84a:	eca0 0a01 	vstmia	r0!, {s0}
 801a84e:	ed9c 0a00 	vldr	s0, [ip]
 801a852:	ee37 0a80 	vadd.f32	s0, s15, s0
 801a856:	e796      	b.n	801a786 <__kernel_rem_pio2f+0xe2>
 801a858:	d107      	bne.n	801a86a <__kernel_rem_pio2f+0x1c6>
 801a85a:	f10a 32ff 	add.w	r2, sl, #4294967295
 801a85e:	a906      	add	r1, sp, #24
 801a860:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a864:	ea4f 2b22 	mov.w	fp, r2, asr #8
 801a868:	e7c1      	b.n	801a7ee <__kernel_rem_pio2f+0x14a>
 801a86a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 801a86e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 801a872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a876:	da2f      	bge.n	801a8d8 <__kernel_rem_pio2f+0x234>
 801a878:	f04f 0b00 	mov.w	fp, #0
 801a87c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 801a880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a884:	f040 8098 	bne.w	801a9b8 <__kernel_rem_pio2f+0x314>
 801a888:	f10a 33ff 	add.w	r3, sl, #4294967295
 801a88c:	469c      	mov	ip, r3
 801a88e:	2200      	movs	r2, #0
 801a890:	45bc      	cmp	ip, r7
 801a892:	da48      	bge.n	801a926 <__kernel_rem_pio2f+0x282>
 801a894:	2a00      	cmp	r2, #0
 801a896:	d05f      	beq.n	801a958 <__kernel_rem_pio2f+0x2b4>
 801a898:	aa06      	add	r2, sp, #24
 801a89a:	3c08      	subs	r4, #8
 801a89c:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 801a8a0:	2900      	cmp	r1, #0
 801a8a2:	d07d      	beq.n	801a9a0 <__kernel_rem_pio2f+0x2fc>
 801a8a4:	4620      	mov	r0, r4
 801a8a6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 801a8aa:	9301      	str	r3, [sp, #4]
 801a8ac:	f000 fb0e 	bl	801aecc <scalbnf>
 801a8b0:	9b01      	ldr	r3, [sp, #4]
 801a8b2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 801a9b0 <__kernel_rem_pio2f+0x30c>
 801a8b6:	4619      	mov	r1, r3
 801a8b8:	2900      	cmp	r1, #0
 801a8ba:	f280 80af 	bge.w	801aa1c <__kernel_rem_pio2f+0x378>
 801a8be:	4618      	mov	r0, r3
 801a8c0:	2400      	movs	r4, #0
 801a8c2:	2800      	cmp	r0, #0
 801a8c4:	f2c0 80d0 	blt.w	801aa68 <__kernel_rem_pio2f+0x3c4>
 801a8c8:	a942      	add	r1, sp, #264	; 0x108
 801a8ca:	eb01 0680 	add.w	r6, r1, r0, lsl #2
 801a8ce:	4a36      	ldr	r2, [pc, #216]	; (801a9a8 <__kernel_rem_pio2f+0x304>)
 801a8d0:	eddf 7a38 	vldr	s15, [pc, #224]	; 801a9b4 <__kernel_rem_pio2f+0x310>
 801a8d4:	2100      	movs	r1, #0
 801a8d6:	e0bb      	b.n	801aa50 <__kernel_rem_pio2f+0x3ac>
 801a8d8:	f04f 0b02 	mov.w	fp, #2
 801a8dc:	e78a      	b.n	801a7f4 <__kernel_rem_pio2f+0x150>
 801a8de:	681a      	ldr	r2, [r3, #0]
 801a8e0:	b948      	cbnz	r0, 801a8f6 <__kernel_rem_pio2f+0x252>
 801a8e2:	b11a      	cbz	r2, 801a8ec <__kernel_rem_pio2f+0x248>
 801a8e4:	f5c2 7280 	rsb	r2, r2, #256	; 0x100
 801a8e8:	601a      	str	r2, [r3, #0]
 801a8ea:	2201      	movs	r2, #1
 801a8ec:	f10e 0e01 	add.w	lr, lr, #1
 801a8f0:	3304      	adds	r3, #4
 801a8f2:	4610      	mov	r0, r2
 801a8f4:	e784      	b.n	801a800 <__kernel_rem_pio2f+0x15c>
 801a8f6:	f1c2 02ff 	rsb	r2, r2, #255	; 0xff
 801a8fa:	601a      	str	r2, [r3, #0]
 801a8fc:	4602      	mov	r2, r0
 801a8fe:	e7f5      	b.n	801a8ec <__kernel_rem_pio2f+0x248>
 801a900:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a904:	ab06      	add	r3, sp, #24
 801a906:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a90a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a90e:	aa06      	add	r2, sp, #24
 801a910:	f842 302c 	str.w	r3, [r2, ip, lsl #2]
 801a914:	e77d      	b.n	801a812 <__kernel_rem_pio2f+0x16e>
 801a916:	f10a 3cff 	add.w	ip, sl, #4294967295
 801a91a:	ab06      	add	r3, sp, #24
 801a91c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801a920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801a924:	e7f3      	b.n	801a90e <__kernel_rem_pio2f+0x26a>
 801a926:	a906      	add	r1, sp, #24
 801a928:	f851 002c 	ldr.w	r0, [r1, ip, lsl #2]
 801a92c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801a930:	4302      	orrs	r2, r0
 801a932:	e7ad      	b.n	801a890 <__kernel_rem_pio2f+0x1ec>
 801a934:	3001      	adds	r0, #1
 801a936:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801a93a:	2a00      	cmp	r2, #0
 801a93c:	d0fa      	beq.n	801a934 <__kernel_rem_pio2f+0x290>
 801a93e:	a91a      	add	r1, sp, #104	; 0x68
 801a940:	eb0a 0208 	add.w	r2, sl, r8
 801a944:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801a948:	f10a 0301 	add.w	r3, sl, #1
 801a94c:	eb0a 0100 	add.w	r1, sl, r0
 801a950:	4299      	cmp	r1, r3
 801a952:	da04      	bge.n	801a95e <__kernel_rem_pio2f+0x2ba>
 801a954:	468a      	mov	sl, r1
 801a956:	e70e      	b.n	801a776 <__kernel_rem_pio2f+0xd2>
 801a958:	9b04      	ldr	r3, [sp, #16]
 801a95a:	2001      	movs	r0, #1
 801a95c:	e7eb      	b.n	801a936 <__kernel_rem_pio2f+0x292>
 801a95e:	9803      	ldr	r0, [sp, #12]
 801a960:	f8dd c004 	ldr.w	ip, [sp, #4]
 801a964:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
 801a968:	9000      	str	r0, [sp, #0]
 801a96a:	ee07 0a90 	vmov	s15, r0
 801a96e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a972:	2000      	movs	r0, #0
 801a974:	ece2 7a01 	vstmia	r2!, {s15}
 801a978:	eddf 7a0e 	vldr	s15, [pc, #56]	; 801a9b4 <__kernel_rem_pio2f+0x310>
 801a97c:	4696      	mov	lr, r2
 801a97e:	4548      	cmp	r0, r9
 801a980:	dd06      	ble.n	801a990 <__kernel_rem_pio2f+0x2ec>
 801a982:	a842      	add	r0, sp, #264	; 0x108
 801a984:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801a988:	edc0 7a00 	vstr	s15, [r0]
 801a98c:	3301      	adds	r3, #1
 801a98e:	e7df      	b.n	801a950 <__kernel_rem_pio2f+0x2ac>
 801a990:	ecfc 6a01 	vldmia	ip!, {s13}
 801a994:	ed3e 7a01 	vldmdb	lr!, {s14}
 801a998:	3001      	adds	r0, #1
 801a99a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801a99e:	e7ee      	b.n	801a97e <__kernel_rem_pio2f+0x2da>
 801a9a0:	3b01      	subs	r3, #1
 801a9a2:	e779      	b.n	801a898 <__kernel_rem_pio2f+0x1f4>
 801a9a4:	0803eefc 	.word	0x0803eefc
 801a9a8:	0803eed0 	.word	0x0803eed0
 801a9ac:	43800000 	.word	0x43800000
 801a9b0:	3b800000 	.word	0x3b800000
 801a9b4:	00000000 	.word	0x00000000
 801a9b8:	9b02      	ldr	r3, [sp, #8]
 801a9ba:	eeb0 0a48 	vmov.f32	s0, s16
 801a9be:	1b98      	subs	r0, r3, r6
 801a9c0:	f000 fa84 	bl	801aecc <scalbnf>
 801a9c4:	ed1f 7a07 	vldr	s14, [pc, #-28]	; 801a9ac <__kernel_rem_pio2f+0x308>
 801a9c8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 801a9cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801a9d0:	db1b      	blt.n	801aa0a <__kernel_rem_pio2f+0x366>
 801a9d2:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 801a9b0 <__kernel_rem_pio2f+0x30c>
 801a9d6:	ee60 7a27 	vmul.f32	s15, s0, s15
 801a9da:	aa06      	add	r2, sp, #24
 801a9dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a9e0:	a906      	add	r1, sp, #24
 801a9e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801a9e6:	3408      	adds	r4, #8
 801a9e8:	eea7 0ac7 	vfms.f32	s0, s15, s14
 801a9ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 801a9f0:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801a9f4:	ee10 3a10 	vmov	r3, s0
 801a9f8:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801a9fc:	ee17 2a90 	vmov	r2, s15
 801aa00:	f10a 0301 	add.w	r3, sl, #1
 801aa04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801aa08:	e74c      	b.n	801a8a4 <__kernel_rem_pio2f+0x200>
 801aa0a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 801aa0e:	aa06      	add	r2, sp, #24
 801aa10:	ee10 3a10 	vmov	r3, s0
 801aa14:	f842 302a 	str.w	r3, [r2, sl, lsl #2]
 801aa18:	4653      	mov	r3, sl
 801aa1a:	e743      	b.n	801a8a4 <__kernel_rem_pio2f+0x200>
 801aa1c:	aa42      	add	r2, sp, #264	; 0x108
 801aa1e:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801aa22:	aa06      	add	r2, sp, #24
 801aa24:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 801aa28:	9201      	str	r2, [sp, #4]
 801aa2a:	ee07 2a90 	vmov	s15, r2
 801aa2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801aa32:	3901      	subs	r1, #1
 801aa34:	ee67 7a80 	vmul.f32	s15, s15, s0
 801aa38:	ee20 0a07 	vmul.f32	s0, s0, s14
 801aa3c:	edc0 7a00 	vstr	s15, [r0]
 801aa40:	e73a      	b.n	801a8b8 <__kernel_rem_pio2f+0x214>
 801aa42:	ecf2 6a01 	vldmia	r2!, {s13}
 801aa46:	ecb6 7a01 	vldmia	r6!, {s14}
 801aa4a:	eee6 7a87 	vfma.f32	s15, s13, s14
 801aa4e:	3101      	adds	r1, #1
 801aa50:	42b9      	cmp	r1, r7
 801aa52:	dc01      	bgt.n	801aa58 <__kernel_rem_pio2f+0x3b4>
 801aa54:	428c      	cmp	r4, r1
 801aa56:	daf4      	bge.n	801aa42 <__kernel_rem_pio2f+0x39e>
 801aa58:	aa56      	add	r2, sp, #344	; 0x158
 801aa5a:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 801aa5e:	ed41 7a28 	vstr	s15, [r1, #-160]	; 0xffffff60
 801aa62:	3801      	subs	r0, #1
 801aa64:	3401      	adds	r4, #1
 801aa66:	e72c      	b.n	801a8c2 <__kernel_rem_pio2f+0x21e>
 801aa68:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801aa6a:	2a02      	cmp	r2, #2
 801aa6c:	dc0a      	bgt.n	801aa84 <__kernel_rem_pio2f+0x3e0>
 801aa6e:	2a00      	cmp	r2, #0
 801aa70:	dc61      	bgt.n	801ab36 <__kernel_rem_pio2f+0x492>
 801aa72:	d03c      	beq.n	801aaee <__kernel_rem_pio2f+0x44a>
 801aa74:	9b00      	ldr	r3, [sp, #0]
 801aa76:	f003 0007 	and.w	r0, r3, #7
 801aa7a:	b057      	add	sp, #348	; 0x15c
 801aa7c:	ecbd 8b04 	vpop	{d8-d9}
 801aa80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aa84:	9a64      	ldr	r2, [sp, #400]	; 0x190
 801aa86:	2a03      	cmp	r2, #3
 801aa88:	d1f4      	bne.n	801aa74 <__kernel_rem_pio2f+0x3d0>
 801aa8a:	aa2e      	add	r2, sp, #184	; 0xb8
 801aa8c:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801aa90:	4608      	mov	r0, r1
 801aa92:	461c      	mov	r4, r3
 801aa94:	2c00      	cmp	r4, #0
 801aa96:	f1a0 0004 	sub.w	r0, r0, #4
 801aa9a:	dc59      	bgt.n	801ab50 <__kernel_rem_pio2f+0x4ac>
 801aa9c:	4618      	mov	r0, r3
 801aa9e:	2801      	cmp	r0, #1
 801aaa0:	f1a1 0104 	sub.w	r1, r1, #4
 801aaa4:	dc64      	bgt.n	801ab70 <__kernel_rem_pio2f+0x4cc>
 801aaa6:	ed5f 7a3d 	vldr	s15, [pc, #-244]	; 801a9b4 <__kernel_rem_pio2f+0x310>
 801aaaa:	2b01      	cmp	r3, #1
 801aaac:	dc70      	bgt.n	801ab90 <__kernel_rem_pio2f+0x4ec>
 801aaae:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 801aab2:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 801aab6:	f1bb 0f00 	cmp.w	fp, #0
 801aaba:	d172      	bne.n	801aba2 <__kernel_rem_pio2f+0x4fe>
 801aabc:	edc5 6a00 	vstr	s13, [r5]
 801aac0:	ed85 7a01 	vstr	s14, [r5, #4]
 801aac4:	edc5 7a02 	vstr	s15, [r5, #8]
 801aac8:	e7d4      	b.n	801aa74 <__kernel_rem_pio2f+0x3d0>
 801aaca:	aa2e      	add	r2, sp, #184	; 0xb8
 801aacc:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801aad0:	ed91 7a00 	vldr	s14, [r1]
 801aad4:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aad8:	3b01      	subs	r3, #1
 801aada:	2b00      	cmp	r3, #0
 801aadc:	daf5      	bge.n	801aaca <__kernel_rem_pio2f+0x426>
 801aade:	f1bb 0f00 	cmp.w	fp, #0
 801aae2:	d001      	beq.n	801aae8 <__kernel_rem_pio2f+0x444>
 801aae4:	eef1 7a67 	vneg.f32	s15, s15
 801aae8:	edc5 7a00 	vstr	s15, [r5]
 801aaec:	e7c2      	b.n	801aa74 <__kernel_rem_pio2f+0x3d0>
 801aaee:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 801a9b4 <__kernel_rem_pio2f+0x310>
 801aaf2:	e7f2      	b.n	801aada <__kernel_rem_pio2f+0x436>
 801aaf4:	aa2e      	add	r2, sp, #184	; 0xb8
 801aaf6:	eb02 0081 	add.w	r0, r2, r1, lsl #2
 801aafa:	edd0 7a00 	vldr	s15, [r0]
 801aafe:	ee37 7a27 	vadd.f32	s14, s14, s15
 801ab02:	3901      	subs	r1, #1
 801ab04:	2900      	cmp	r1, #0
 801ab06:	daf5      	bge.n	801aaf4 <__kernel_rem_pio2f+0x450>
 801ab08:	f1bb 0f00 	cmp.w	fp, #0
 801ab0c:	d017      	beq.n	801ab3e <__kernel_rem_pio2f+0x49a>
 801ab0e:	eef1 7a47 	vneg.f32	s15, s14
 801ab12:	edc5 7a00 	vstr	s15, [r5]
 801ab16:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 801ab1a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab1e:	a82f      	add	r0, sp, #188	; 0xbc
 801ab20:	2101      	movs	r1, #1
 801ab22:	428b      	cmp	r3, r1
 801ab24:	da0e      	bge.n	801ab44 <__kernel_rem_pio2f+0x4a0>
 801ab26:	f1bb 0f00 	cmp.w	fp, #0
 801ab2a:	d001      	beq.n	801ab30 <__kernel_rem_pio2f+0x48c>
 801ab2c:	eef1 7a67 	vneg.f32	s15, s15
 801ab30:	edc5 7a01 	vstr	s15, [r5, #4]
 801ab34:	e79e      	b.n	801aa74 <__kernel_rem_pio2f+0x3d0>
 801ab36:	ed1f 7a61 	vldr	s14, [pc, #-388]	; 801a9b4 <__kernel_rem_pio2f+0x310>
 801ab3a:	4619      	mov	r1, r3
 801ab3c:	e7e2      	b.n	801ab04 <__kernel_rem_pio2f+0x460>
 801ab3e:	eef0 7a47 	vmov.f32	s15, s14
 801ab42:	e7e6      	b.n	801ab12 <__kernel_rem_pio2f+0x46e>
 801ab44:	ecb0 7a01 	vldmia	r0!, {s14}
 801ab48:	3101      	adds	r1, #1
 801ab4a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801ab4e:	e7e8      	b.n	801ab22 <__kernel_rem_pio2f+0x47e>
 801ab50:	edd0 7a00 	vldr	s15, [r0]
 801ab54:	edd0 6a01 	vldr	s13, [r0, #4]
 801ab58:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ab5c:	3c01      	subs	r4, #1
 801ab5e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab62:	ed80 7a00 	vstr	s14, [r0]
 801ab66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab6a:	edc0 7a01 	vstr	s15, [r0, #4]
 801ab6e:	e791      	b.n	801aa94 <__kernel_rem_pio2f+0x3f0>
 801ab70:	edd1 7a00 	vldr	s15, [r1]
 801ab74:	edd1 6a01 	vldr	s13, [r1, #4]
 801ab78:	ee37 7aa6 	vadd.f32	s14, s15, s13
 801ab7c:	3801      	subs	r0, #1
 801ab7e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 801ab82:	ed81 7a00 	vstr	s14, [r1]
 801ab86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801ab8a:	edc1 7a01 	vstr	s15, [r1, #4]
 801ab8e:	e786      	b.n	801aa9e <__kernel_rem_pio2f+0x3fa>
 801ab90:	aa2e      	add	r2, sp, #184	; 0xb8
 801ab92:	eb02 0183 	add.w	r1, r2, r3, lsl #2
 801ab96:	ed91 7a00 	vldr	s14, [r1]
 801ab9a:	3b01      	subs	r3, #1
 801ab9c:	ee77 7a87 	vadd.f32	s15, s15, s14
 801aba0:	e783      	b.n	801aaaa <__kernel_rem_pio2f+0x406>
 801aba2:	eef1 6a66 	vneg.f32	s13, s13
 801aba6:	eeb1 7a47 	vneg.f32	s14, s14
 801abaa:	edc5 6a00 	vstr	s13, [r5]
 801abae:	ed85 7a01 	vstr	s14, [r5, #4]
 801abb2:	eef1 7a67 	vneg.f32	s15, s15
 801abb6:	e785      	b.n	801aac4 <__kernel_rem_pio2f+0x420>

0801abb8 <__kernel_sinf>:
 801abb8:	ee10 3a10 	vmov	r3, s0
 801abbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801abc0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 801abc4:	da04      	bge.n	801abd0 <__kernel_sinf+0x18>
 801abc6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 801abca:	ee17 3a90 	vmov	r3, s15
 801abce:	b35b      	cbz	r3, 801ac28 <__kernel_sinf+0x70>
 801abd0:	ee20 7a00 	vmul.f32	s14, s0, s0
 801abd4:	eddf 7a15 	vldr	s15, [pc, #84]	; 801ac2c <__kernel_sinf+0x74>
 801abd8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 801ac30 <__kernel_sinf+0x78>
 801abdc:	eea7 6a27 	vfma.f32	s12, s14, s15
 801abe0:	eddf 7a14 	vldr	s15, [pc, #80]	; 801ac34 <__kernel_sinf+0x7c>
 801abe4:	eee6 7a07 	vfma.f32	s15, s12, s14
 801abe8:	ed9f 6a13 	vldr	s12, [pc, #76]	; 801ac38 <__kernel_sinf+0x80>
 801abec:	eea7 6a87 	vfma.f32	s12, s15, s14
 801abf0:	eddf 7a12 	vldr	s15, [pc, #72]	; 801ac3c <__kernel_sinf+0x84>
 801abf4:	ee60 6a07 	vmul.f32	s13, s0, s14
 801abf8:	eee6 7a07 	vfma.f32	s15, s12, s14
 801abfc:	b930      	cbnz	r0, 801ac0c <__kernel_sinf+0x54>
 801abfe:	ed9f 6a10 	vldr	s12, [pc, #64]	; 801ac40 <__kernel_sinf+0x88>
 801ac02:	eea7 6a27 	vfma.f32	s12, s14, s15
 801ac06:	eea6 0a26 	vfma.f32	s0, s12, s13
 801ac0a:	4770      	bx	lr
 801ac0c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 801ac10:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 801ac14:	eee0 7a86 	vfma.f32	s15, s1, s12
 801ac18:	eed7 0a87 	vfnms.f32	s1, s15, s14
 801ac1c:	eddf 7a09 	vldr	s15, [pc, #36]	; 801ac44 <__kernel_sinf+0x8c>
 801ac20:	eee6 0aa7 	vfma.f32	s1, s13, s15
 801ac24:	ee30 0a60 	vsub.f32	s0, s0, s1
 801ac28:	4770      	bx	lr
 801ac2a:	bf00      	nop
 801ac2c:	2f2ec9d3 	.word	0x2f2ec9d3
 801ac30:	b2d72f34 	.word	0xb2d72f34
 801ac34:	3638ef1b 	.word	0x3638ef1b
 801ac38:	b9500d01 	.word	0xb9500d01
 801ac3c:	3c088889 	.word	0x3c088889
 801ac40:	be2aaaab 	.word	0xbe2aaaab
 801ac44:	3e2aaaab 	.word	0x3e2aaaab

0801ac48 <fabs>:
 801ac48:	ec51 0b10 	vmov	r0, r1, d0
 801ac4c:	ee10 2a10 	vmov	r2, s0
 801ac50:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801ac54:	ec43 2b10 	vmov	d0, r2, r3
 801ac58:	4770      	bx	lr

0801ac5a <finite>:
 801ac5a:	b082      	sub	sp, #8
 801ac5c:	ed8d 0b00 	vstr	d0, [sp]
 801ac60:	9801      	ldr	r0, [sp, #4]
 801ac62:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 801ac66:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 801ac6a:	0fc0      	lsrs	r0, r0, #31
 801ac6c:	b002      	add	sp, #8
 801ac6e:	4770      	bx	lr

0801ac70 <nan>:
 801ac70:	ed9f 0b01 	vldr	d0, [pc, #4]	; 801ac78 <nan+0x8>
 801ac74:	4770      	bx	lr
 801ac76:	bf00      	nop
 801ac78:	00000000 	.word	0x00000000
 801ac7c:	7ff80000 	.word	0x7ff80000

0801ac80 <rint>:
 801ac80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ac82:	ec51 0b10 	vmov	r0, r1, d0
 801ac86:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801ac8a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 801ac8e:	2e13      	cmp	r6, #19
 801ac90:	ee10 4a10 	vmov	r4, s0
 801ac94:	460b      	mov	r3, r1
 801ac96:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 801ac9a:	dc58      	bgt.n	801ad4e <rint+0xce>
 801ac9c:	2e00      	cmp	r6, #0
 801ac9e:	da2b      	bge.n	801acf8 <rint+0x78>
 801aca0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 801aca4:	4302      	orrs	r2, r0
 801aca6:	d023      	beq.n	801acf0 <rint+0x70>
 801aca8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 801acac:	4302      	orrs	r2, r0
 801acae:	4254      	negs	r4, r2
 801acb0:	4314      	orrs	r4, r2
 801acb2:	0c4b      	lsrs	r3, r1, #17
 801acb4:	0b24      	lsrs	r4, r4, #12
 801acb6:	045b      	lsls	r3, r3, #17
 801acb8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 801acbc:	ea44 0103 	orr.w	r1, r4, r3
 801acc0:	4b32      	ldr	r3, [pc, #200]	; (801ad8c <rint+0x10c>)
 801acc2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 801acc6:	e9d3 6700 	ldrd	r6, r7, [r3]
 801acca:	4602      	mov	r2, r0
 801accc:	460b      	mov	r3, r1
 801acce:	4630      	mov	r0, r6
 801acd0:	4639      	mov	r1, r7
 801acd2:	f7e5 fafb 	bl	80002cc <__adddf3>
 801acd6:	e9cd 0100 	strd	r0, r1, [sp]
 801acda:	463b      	mov	r3, r7
 801acdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ace0:	4632      	mov	r2, r6
 801ace2:	f7e5 faf1 	bl	80002c8 <__aeabi_dsub>
 801ace6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 801acea:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 801acee:	4639      	mov	r1, r7
 801acf0:	ec41 0b10 	vmov	d0, r0, r1
 801acf4:	b003      	add	sp, #12
 801acf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801acf8:	4a25      	ldr	r2, [pc, #148]	; (801ad90 <rint+0x110>)
 801acfa:	4132      	asrs	r2, r6
 801acfc:	ea01 0702 	and.w	r7, r1, r2
 801ad00:	4307      	orrs	r7, r0
 801ad02:	d0f5      	beq.n	801acf0 <rint+0x70>
 801ad04:	0851      	lsrs	r1, r2, #1
 801ad06:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 801ad0a:	4314      	orrs	r4, r2
 801ad0c:	d00c      	beq.n	801ad28 <rint+0xa8>
 801ad0e:	ea23 0201 	bic.w	r2, r3, r1
 801ad12:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 801ad16:	2e13      	cmp	r6, #19
 801ad18:	fa43 f606 	asr.w	r6, r3, r6
 801ad1c:	bf0c      	ite	eq
 801ad1e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 801ad22:	2400      	movne	r4, #0
 801ad24:	ea42 0306 	orr.w	r3, r2, r6
 801ad28:	4918      	ldr	r1, [pc, #96]	; (801ad8c <rint+0x10c>)
 801ad2a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 801ad2e:	4622      	mov	r2, r4
 801ad30:	e9d5 4500 	ldrd	r4, r5, [r5]
 801ad34:	4620      	mov	r0, r4
 801ad36:	4629      	mov	r1, r5
 801ad38:	f7e5 fac8 	bl	80002cc <__adddf3>
 801ad3c:	e9cd 0100 	strd	r0, r1, [sp]
 801ad40:	e9dd 0100 	ldrd	r0, r1, [sp]
 801ad44:	4622      	mov	r2, r4
 801ad46:	462b      	mov	r3, r5
 801ad48:	f7e5 fabe 	bl	80002c8 <__aeabi_dsub>
 801ad4c:	e7d0      	b.n	801acf0 <rint+0x70>
 801ad4e:	2e33      	cmp	r6, #51	; 0x33
 801ad50:	dd07      	ble.n	801ad62 <rint+0xe2>
 801ad52:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 801ad56:	d1cb      	bne.n	801acf0 <rint+0x70>
 801ad58:	ee10 2a10 	vmov	r2, s0
 801ad5c:	f7e5 fab6 	bl	80002cc <__adddf3>
 801ad60:	e7c6      	b.n	801acf0 <rint+0x70>
 801ad62:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 801ad66:	f04f 36ff 	mov.w	r6, #4294967295
 801ad6a:	40d6      	lsrs	r6, r2
 801ad6c:	4230      	tst	r0, r6
 801ad6e:	d0bf      	beq.n	801acf0 <rint+0x70>
 801ad70:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 801ad74:	ea4f 0156 	mov.w	r1, r6, lsr #1
 801ad78:	bf1f      	itttt	ne
 801ad7a:	ea24 0101 	bicne.w	r1, r4, r1
 801ad7e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 801ad82:	fa44 f202 	asrne.w	r2, r4, r2
 801ad86:	ea41 0402 	orrne.w	r4, r1, r2
 801ad8a:	e7cd      	b.n	801ad28 <rint+0xa8>
 801ad8c:	0803ef08 	.word	0x0803ef08
 801ad90:	000fffff 	.word	0x000fffff
 801ad94:	00000000 	.word	0x00000000

0801ad98 <scalbn>:
 801ad98:	b570      	push	{r4, r5, r6, lr}
 801ad9a:	ec55 4b10 	vmov	r4, r5, d0
 801ad9e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 801ada2:	4606      	mov	r6, r0
 801ada4:	462b      	mov	r3, r5
 801ada6:	b99a      	cbnz	r2, 801add0 <scalbn+0x38>
 801ada8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801adac:	4323      	orrs	r3, r4
 801adae:	d036      	beq.n	801ae1e <scalbn+0x86>
 801adb0:	4b39      	ldr	r3, [pc, #228]	; (801ae98 <scalbn+0x100>)
 801adb2:	4629      	mov	r1, r5
 801adb4:	ee10 0a10 	vmov	r0, s0
 801adb8:	2200      	movs	r2, #0
 801adba:	f7e5 fc3d 	bl	8000638 <__aeabi_dmul>
 801adbe:	4b37      	ldr	r3, [pc, #220]	; (801ae9c <scalbn+0x104>)
 801adc0:	429e      	cmp	r6, r3
 801adc2:	4604      	mov	r4, r0
 801adc4:	460d      	mov	r5, r1
 801adc6:	da10      	bge.n	801adea <scalbn+0x52>
 801adc8:	a32b      	add	r3, pc, #172	; (adr r3, 801ae78 <scalbn+0xe0>)
 801adca:	e9d3 2300 	ldrd	r2, r3, [r3]
 801adce:	e03a      	b.n	801ae46 <scalbn+0xae>
 801add0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 801add4:	428a      	cmp	r2, r1
 801add6:	d10c      	bne.n	801adf2 <scalbn+0x5a>
 801add8:	ee10 2a10 	vmov	r2, s0
 801addc:	4620      	mov	r0, r4
 801adde:	4629      	mov	r1, r5
 801ade0:	f7e5 fa74 	bl	80002cc <__adddf3>
 801ade4:	4604      	mov	r4, r0
 801ade6:	460d      	mov	r5, r1
 801ade8:	e019      	b.n	801ae1e <scalbn+0x86>
 801adea:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801adee:	460b      	mov	r3, r1
 801adf0:	3a36      	subs	r2, #54	; 0x36
 801adf2:	4432      	add	r2, r6
 801adf4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 801adf8:	428a      	cmp	r2, r1
 801adfa:	dd08      	ble.n	801ae0e <scalbn+0x76>
 801adfc:	2d00      	cmp	r5, #0
 801adfe:	a120      	add	r1, pc, #128	; (adr r1, 801ae80 <scalbn+0xe8>)
 801ae00:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae04:	da1c      	bge.n	801ae40 <scalbn+0xa8>
 801ae06:	a120      	add	r1, pc, #128	; (adr r1, 801ae88 <scalbn+0xf0>)
 801ae08:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae0c:	e018      	b.n	801ae40 <scalbn+0xa8>
 801ae0e:	2a00      	cmp	r2, #0
 801ae10:	dd08      	ble.n	801ae24 <scalbn+0x8c>
 801ae12:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ae16:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ae1a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801ae1e:	ec45 4b10 	vmov	d0, r4, r5
 801ae22:	bd70      	pop	{r4, r5, r6, pc}
 801ae24:	f112 0f35 	cmn.w	r2, #53	; 0x35
 801ae28:	da19      	bge.n	801ae5e <scalbn+0xc6>
 801ae2a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801ae2e:	429e      	cmp	r6, r3
 801ae30:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 801ae34:	dd0a      	ble.n	801ae4c <scalbn+0xb4>
 801ae36:	a112      	add	r1, pc, #72	; (adr r1, 801ae80 <scalbn+0xe8>)
 801ae38:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae3c:	2b00      	cmp	r3, #0
 801ae3e:	d1e2      	bne.n	801ae06 <scalbn+0x6e>
 801ae40:	a30f      	add	r3, pc, #60	; (adr r3, 801ae80 <scalbn+0xe8>)
 801ae42:	e9d3 2300 	ldrd	r2, r3, [r3]
 801ae46:	f7e5 fbf7 	bl	8000638 <__aeabi_dmul>
 801ae4a:	e7cb      	b.n	801ade4 <scalbn+0x4c>
 801ae4c:	a10a      	add	r1, pc, #40	; (adr r1, 801ae78 <scalbn+0xe0>)
 801ae4e:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	d0b8      	beq.n	801adc8 <scalbn+0x30>
 801ae56:	a10e      	add	r1, pc, #56	; (adr r1, 801ae90 <scalbn+0xf8>)
 801ae58:	e9d1 0100 	ldrd	r0, r1, [r1]
 801ae5c:	e7b4      	b.n	801adc8 <scalbn+0x30>
 801ae5e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801ae62:	3236      	adds	r2, #54	; 0x36
 801ae64:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801ae68:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801ae6c:	4620      	mov	r0, r4
 801ae6e:	4b0c      	ldr	r3, [pc, #48]	; (801aea0 <scalbn+0x108>)
 801ae70:	2200      	movs	r2, #0
 801ae72:	e7e8      	b.n	801ae46 <scalbn+0xae>
 801ae74:	f3af 8000 	nop.w
 801ae78:	c2f8f359 	.word	0xc2f8f359
 801ae7c:	01a56e1f 	.word	0x01a56e1f
 801ae80:	8800759c 	.word	0x8800759c
 801ae84:	7e37e43c 	.word	0x7e37e43c
 801ae88:	8800759c 	.word	0x8800759c
 801ae8c:	fe37e43c 	.word	0xfe37e43c
 801ae90:	c2f8f359 	.word	0xc2f8f359
 801ae94:	81a56e1f 	.word	0x81a56e1f
 801ae98:	43500000 	.word	0x43500000
 801ae9c:	ffff3cb0 	.word	0xffff3cb0
 801aea0:	3c900000 	.word	0x3c900000

0801aea4 <fabsf>:
 801aea4:	ee10 3a10 	vmov	r3, s0
 801aea8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 801aeac:	ee00 3a10 	vmov	s0, r3
 801aeb0:	4770      	bx	lr

0801aeb2 <finitef>:
 801aeb2:	b082      	sub	sp, #8
 801aeb4:	ed8d 0a01 	vstr	s0, [sp, #4]
 801aeb8:	9801      	ldr	r0, [sp, #4]
 801aeba:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801aebe:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 801aec2:	bfac      	ite	ge
 801aec4:	2000      	movge	r0, #0
 801aec6:	2001      	movlt	r0, #1
 801aec8:	b002      	add	sp, #8
 801aeca:	4770      	bx	lr

0801aecc <scalbnf>:
 801aecc:	ee10 3a10 	vmov	r3, s0
 801aed0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 801aed4:	d025      	beq.n	801af22 <scalbnf+0x56>
 801aed6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 801aeda:	d302      	bcc.n	801aee2 <scalbnf+0x16>
 801aedc:	ee30 0a00 	vadd.f32	s0, s0, s0
 801aee0:	4770      	bx	lr
 801aee2:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 801aee6:	d122      	bne.n	801af2e <scalbnf+0x62>
 801aee8:	4b2a      	ldr	r3, [pc, #168]	; (801af94 <scalbnf+0xc8>)
 801aeea:	eddf 7a2b 	vldr	s15, [pc, #172]	; 801af98 <scalbnf+0xcc>
 801aeee:	4298      	cmp	r0, r3
 801aef0:	ee20 0a27 	vmul.f32	s0, s0, s15
 801aef4:	db16      	blt.n	801af24 <scalbnf+0x58>
 801aef6:	ee10 3a10 	vmov	r3, s0
 801aefa:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 801aefe:	3a19      	subs	r2, #25
 801af00:	4402      	add	r2, r0
 801af02:	2afe      	cmp	r2, #254	; 0xfe
 801af04:	dd15      	ble.n	801af32 <scalbnf+0x66>
 801af06:	ee10 3a10 	vmov	r3, s0
 801af0a:	eddf 7a24 	vldr	s15, [pc, #144]	; 801af9c <scalbnf+0xd0>
 801af0e:	eddf 6a24 	vldr	s13, [pc, #144]	; 801afa0 <scalbnf+0xd4>
 801af12:	2b00      	cmp	r3, #0
 801af14:	eeb0 7a67 	vmov.f32	s14, s15
 801af18:	bfb8      	it	lt
 801af1a:	eef0 7a66 	vmovlt.f32	s15, s13
 801af1e:	ee27 0a27 	vmul.f32	s0, s14, s15
 801af22:	4770      	bx	lr
 801af24:	eddf 7a1f 	vldr	s15, [pc, #124]	; 801afa4 <scalbnf+0xd8>
 801af28:	ee20 0a27 	vmul.f32	s0, s0, s15
 801af2c:	4770      	bx	lr
 801af2e:	0dd2      	lsrs	r2, r2, #23
 801af30:	e7e6      	b.n	801af00 <scalbnf+0x34>
 801af32:	2a00      	cmp	r2, #0
 801af34:	dd06      	ble.n	801af44 <scalbnf+0x78>
 801af36:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af3a:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801af3e:	ee00 3a10 	vmov	s0, r3
 801af42:	4770      	bx	lr
 801af44:	f112 0f16 	cmn.w	r2, #22
 801af48:	da1a      	bge.n	801af80 <scalbnf+0xb4>
 801af4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801af4e:	4298      	cmp	r0, r3
 801af50:	ee10 3a10 	vmov	r3, s0
 801af54:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801af58:	dd0a      	ble.n	801af70 <scalbnf+0xa4>
 801af5a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 801af9c <scalbnf+0xd0>
 801af5e:	ed9f 7a10 	vldr	s14, [pc, #64]	; 801afa0 <scalbnf+0xd4>
 801af62:	eef0 7a40 	vmov.f32	s15, s0
 801af66:	2b00      	cmp	r3, #0
 801af68:	bf18      	it	ne
 801af6a:	eeb0 0a47 	vmovne.f32	s0, s14
 801af6e:	e7db      	b.n	801af28 <scalbnf+0x5c>
 801af70:	ed9f 0a0c 	vldr	s0, [pc, #48]	; 801afa4 <scalbnf+0xd8>
 801af74:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 801afa8 <scalbnf+0xdc>
 801af78:	eef0 7a40 	vmov.f32	s15, s0
 801af7c:	2b00      	cmp	r3, #0
 801af7e:	e7f3      	b.n	801af68 <scalbnf+0x9c>
 801af80:	3219      	adds	r2, #25
 801af82:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 801af86:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 801af8a:	eddf 7a08 	vldr	s15, [pc, #32]	; 801afac <scalbnf+0xe0>
 801af8e:	ee07 3a10 	vmov	s14, r3
 801af92:	e7c4      	b.n	801af1e <scalbnf+0x52>
 801af94:	ffff3cb0 	.word	0xffff3cb0
 801af98:	4c000000 	.word	0x4c000000
 801af9c:	7149f2ca 	.word	0x7149f2ca
 801afa0:	f149f2ca 	.word	0xf149f2ca
 801afa4:	0da24260 	.word	0x0da24260
 801afa8:	8da24260 	.word	0x8da24260
 801afac:	33000000 	.word	0x33000000

0801afb0 <abort>:
 801afb0:	b508      	push	{r3, lr}
 801afb2:	2006      	movs	r0, #6
 801afb4:	f000 fdae 	bl	801bb14 <raise>
 801afb8:	2001      	movs	r0, #1
 801afba:	f7eb fc6b 	bl	8006894 <_exit>
	...

0801afc0 <__assert_func>:
 801afc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801afc2:	4614      	mov	r4, r2
 801afc4:	461a      	mov	r2, r3
 801afc6:	4b09      	ldr	r3, [pc, #36]	; (801afec <__assert_func+0x2c>)
 801afc8:	681b      	ldr	r3, [r3, #0]
 801afca:	4605      	mov	r5, r0
 801afcc:	68d8      	ldr	r0, [r3, #12]
 801afce:	b14c      	cbz	r4, 801afe4 <__assert_func+0x24>
 801afd0:	4b07      	ldr	r3, [pc, #28]	; (801aff0 <__assert_func+0x30>)
 801afd2:	9100      	str	r1, [sp, #0]
 801afd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801afd8:	4906      	ldr	r1, [pc, #24]	; (801aff4 <__assert_func+0x34>)
 801afda:	462b      	mov	r3, r5
 801afdc:	f000 f836 	bl	801b04c <fiprintf>
 801afe0:	f7ff ffe6 	bl	801afb0 <abort>
 801afe4:	4b04      	ldr	r3, [pc, #16]	; (801aff8 <__assert_func+0x38>)
 801afe6:	461c      	mov	r4, r3
 801afe8:	e7f3      	b.n	801afd2 <__assert_func+0x12>
 801afea:	bf00      	nop
 801afec:	20000518 	.word	0x20000518
 801aff0:	0803ef18 	.word	0x0803ef18
 801aff4:	0803ef25 	.word	0x0803ef25
 801aff8:	0803ef53 	.word	0x0803ef53

0801affc <atexit>:
 801affc:	2300      	movs	r3, #0
 801affe:	4601      	mov	r1, r0
 801b000:	461a      	mov	r2, r3
 801b002:	4618      	mov	r0, r3
 801b004:	f000 be82 	b.w	801bd0c <__register_exitproc>

0801b008 <calloc>:
 801b008:	4b02      	ldr	r3, [pc, #8]	; (801b014 <calloc+0xc>)
 801b00a:	460a      	mov	r2, r1
 801b00c:	4601      	mov	r1, r0
 801b00e:	6818      	ldr	r0, [r3, #0]
 801b010:	f000 b912 	b.w	801b238 <_calloc_r>
 801b014:	20000518 	.word	0x20000518

0801b018 <__errno>:
 801b018:	4b01      	ldr	r3, [pc, #4]	; (801b020 <__errno+0x8>)
 801b01a:	6818      	ldr	r0, [r3, #0]
 801b01c:	4770      	bx	lr
 801b01e:	bf00      	nop
 801b020:	20000518 	.word	0x20000518

0801b024 <exit>:
 801b024:	b508      	push	{r3, lr}
 801b026:	4b07      	ldr	r3, [pc, #28]	; (801b044 <exit+0x20>)
 801b028:	4604      	mov	r4, r0
 801b02a:	b113      	cbz	r3, 801b032 <exit+0xe>
 801b02c:	2100      	movs	r1, #0
 801b02e:	f000 fecf 	bl	801bdd0 <__call_exitprocs>
 801b032:	4b05      	ldr	r3, [pc, #20]	; (801b048 <exit+0x24>)
 801b034:	6818      	ldr	r0, [r3, #0]
 801b036:	6a83      	ldr	r3, [r0, #40]	; 0x28
 801b038:	b103      	cbz	r3, 801b03c <exit+0x18>
 801b03a:	4798      	blx	r3
 801b03c:	4620      	mov	r0, r4
 801b03e:	f7eb fc29 	bl	8006894 <_exit>
 801b042:	bf00      	nop
 801b044:	0801bdd1 	.word	0x0801bdd1
 801b048:	0803ef54 	.word	0x0803ef54

0801b04c <fiprintf>:
 801b04c:	b40e      	push	{r1, r2, r3}
 801b04e:	b503      	push	{r0, r1, lr}
 801b050:	4601      	mov	r1, r0
 801b052:	ab03      	add	r3, sp, #12
 801b054:	4805      	ldr	r0, [pc, #20]	; (801b06c <fiprintf+0x20>)
 801b056:	f853 2b04 	ldr.w	r2, [r3], #4
 801b05a:	6800      	ldr	r0, [r0, #0]
 801b05c:	9301      	str	r3, [sp, #4]
 801b05e:	f000 f9cf 	bl	801b400 <_vfiprintf_r>
 801b062:	b002      	add	sp, #8
 801b064:	f85d eb04 	ldr.w	lr, [sp], #4
 801b068:	b003      	add	sp, #12
 801b06a:	4770      	bx	lr
 801b06c:	20000518 	.word	0x20000518

0801b070 <_fwrite_r>:
 801b070:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801b074:	9c08      	ldr	r4, [sp, #32]
 801b076:	4689      	mov	r9, r1
 801b078:	4617      	mov	r7, r2
 801b07a:	fb02 f803 	mul.w	r8, r2, r3
 801b07e:	4605      	mov	r5, r0
 801b080:	b118      	cbz	r0, 801b08a <_fwrite_r+0x1a>
 801b082:	6983      	ldr	r3, [r0, #24]
 801b084:	b90b      	cbnz	r3, 801b08a <_fwrite_r+0x1a>
 801b086:	f001 f81b 	bl	801c0c0 <__sinit>
 801b08a:	4b26      	ldr	r3, [pc, #152]	; (801b124 <_fwrite_r+0xb4>)
 801b08c:	429c      	cmp	r4, r3
 801b08e:	d123      	bne.n	801b0d8 <_fwrite_r+0x68>
 801b090:	686c      	ldr	r4, [r5, #4]
 801b092:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b094:	07de      	lsls	r6, r3, #31
 801b096:	d405      	bmi.n	801b0a4 <_fwrite_r+0x34>
 801b098:	89a3      	ldrh	r3, [r4, #12]
 801b09a:	0598      	lsls	r0, r3, #22
 801b09c:	d402      	bmi.n	801b0a4 <_fwrite_r+0x34>
 801b09e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b0a0:	f000 f879 	bl	801b196 <__retarget_lock_acquire_recursive>
 801b0a4:	89a3      	ldrh	r3, [r4, #12]
 801b0a6:	0719      	lsls	r1, r3, #28
 801b0a8:	d520      	bpl.n	801b0ec <_fwrite_r+0x7c>
 801b0aa:	6923      	ldr	r3, [r4, #16]
 801b0ac:	b1f3      	cbz	r3, 801b0ec <_fwrite_r+0x7c>
 801b0ae:	2600      	movs	r6, #0
 801b0b0:	4546      	cmp	r6, r8
 801b0b2:	d029      	beq.n	801b108 <_fwrite_r+0x98>
 801b0b4:	68a0      	ldr	r0, [r4, #8]
 801b0b6:	f819 1006 	ldrb.w	r1, [r9, r6]
 801b0ba:	3801      	subs	r0, #1
 801b0bc:	2800      	cmp	r0, #0
 801b0be:	60a0      	str	r0, [r4, #8]
 801b0c0:	da04      	bge.n	801b0cc <_fwrite_r+0x5c>
 801b0c2:	69a3      	ldr	r3, [r4, #24]
 801b0c4:	4298      	cmp	r0, r3
 801b0c6:	db19      	blt.n	801b0fc <_fwrite_r+0x8c>
 801b0c8:	290a      	cmp	r1, #10
 801b0ca:	d017      	beq.n	801b0fc <_fwrite_r+0x8c>
 801b0cc:	6823      	ldr	r3, [r4, #0]
 801b0ce:	1c5a      	adds	r2, r3, #1
 801b0d0:	6022      	str	r2, [r4, #0]
 801b0d2:	7019      	strb	r1, [r3, #0]
 801b0d4:	3601      	adds	r6, #1
 801b0d6:	e7eb      	b.n	801b0b0 <_fwrite_r+0x40>
 801b0d8:	4b13      	ldr	r3, [pc, #76]	; (801b128 <_fwrite_r+0xb8>)
 801b0da:	429c      	cmp	r4, r3
 801b0dc:	d101      	bne.n	801b0e2 <_fwrite_r+0x72>
 801b0de:	68ac      	ldr	r4, [r5, #8]
 801b0e0:	e7d7      	b.n	801b092 <_fwrite_r+0x22>
 801b0e2:	4b12      	ldr	r3, [pc, #72]	; (801b12c <_fwrite_r+0xbc>)
 801b0e4:	429c      	cmp	r4, r3
 801b0e6:	bf08      	it	eq
 801b0e8:	68ec      	ldreq	r4, [r5, #12]
 801b0ea:	e7d2      	b.n	801b092 <_fwrite_r+0x22>
 801b0ec:	4621      	mov	r1, r4
 801b0ee:	4628      	mov	r0, r5
 801b0f0:	f000 fd9e 	bl	801bc30 <__swsetup_r>
 801b0f4:	2800      	cmp	r0, #0
 801b0f6:	d0da      	beq.n	801b0ae <_fwrite_r+0x3e>
 801b0f8:	2600      	movs	r6, #0
 801b0fa:	e005      	b.n	801b108 <_fwrite_r+0x98>
 801b0fc:	4622      	mov	r2, r4
 801b0fe:	4628      	mov	r0, r5
 801b100:	f000 fd44 	bl	801bb8c <__swbuf_r>
 801b104:	3001      	adds	r0, #1
 801b106:	d1e5      	bne.n	801b0d4 <_fwrite_r+0x64>
 801b108:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b10a:	07da      	lsls	r2, r3, #31
 801b10c:	d405      	bmi.n	801b11a <_fwrite_r+0xaa>
 801b10e:	89a3      	ldrh	r3, [r4, #12]
 801b110:	059b      	lsls	r3, r3, #22
 801b112:	d402      	bmi.n	801b11a <_fwrite_r+0xaa>
 801b114:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b116:	f000 f840 	bl	801b19a <__retarget_lock_release_recursive>
 801b11a:	fbb6 f0f7 	udiv	r0, r6, r7
 801b11e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801b122:	bf00      	nop
 801b124:	0803efac 	.word	0x0803efac
 801b128:	0803efcc 	.word	0x0803efcc
 801b12c:	0803ef8c 	.word	0x0803ef8c

0801b130 <fwrite>:
 801b130:	b507      	push	{r0, r1, r2, lr}
 801b132:	9300      	str	r3, [sp, #0]
 801b134:	4613      	mov	r3, r2
 801b136:	460a      	mov	r2, r1
 801b138:	4601      	mov	r1, r0
 801b13a:	4803      	ldr	r0, [pc, #12]	; (801b148 <fwrite+0x18>)
 801b13c:	6800      	ldr	r0, [r0, #0]
 801b13e:	f7ff ff97 	bl	801b070 <_fwrite_r>
 801b142:	b003      	add	sp, #12
 801b144:	f85d fb04 	ldr.w	pc, [sp], #4
 801b148:	20000518 	.word	0x20000518

0801b14c <__libc_init_array>:
 801b14c:	b570      	push	{r4, r5, r6, lr}
 801b14e:	4d0d      	ldr	r5, [pc, #52]	; (801b184 <__libc_init_array+0x38>)
 801b150:	4c0d      	ldr	r4, [pc, #52]	; (801b188 <__libc_init_array+0x3c>)
 801b152:	1b64      	subs	r4, r4, r5
 801b154:	10a4      	asrs	r4, r4, #2
 801b156:	2600      	movs	r6, #0
 801b158:	42a6      	cmp	r6, r4
 801b15a:	d109      	bne.n	801b170 <__libc_init_array+0x24>
 801b15c:	4d0b      	ldr	r5, [pc, #44]	; (801b18c <__libc_init_array+0x40>)
 801b15e:	4c0c      	ldr	r4, [pc, #48]	; (801b190 <__libc_init_array+0x44>)
 801b160:	f001 faf2 	bl	801c748 <_init>
 801b164:	1b64      	subs	r4, r4, r5
 801b166:	10a4      	asrs	r4, r4, #2
 801b168:	2600      	movs	r6, #0
 801b16a:	42a6      	cmp	r6, r4
 801b16c:	d105      	bne.n	801b17a <__libc_init_array+0x2e>
 801b16e:	bd70      	pop	{r4, r5, r6, pc}
 801b170:	f855 3b04 	ldr.w	r3, [r5], #4
 801b174:	4798      	blx	r3
 801b176:	3601      	adds	r6, #1
 801b178:	e7ee      	b.n	801b158 <__libc_init_array+0xc>
 801b17a:	f855 3b04 	ldr.w	r3, [r5], #4
 801b17e:	4798      	blx	r3
 801b180:	3601      	adds	r6, #1
 801b182:	e7f2      	b.n	801b16a <__libc_init_array+0x1e>
 801b184:	0803eff4 	.word	0x0803eff4
 801b188:	0803eff4 	.word	0x0803eff4
 801b18c:	0803eff4 	.word	0x0803eff4
 801b190:	0803effc 	.word	0x0803effc

0801b194 <__retarget_lock_init_recursive>:
 801b194:	4770      	bx	lr

0801b196 <__retarget_lock_acquire_recursive>:
 801b196:	4770      	bx	lr

0801b198 <__retarget_lock_release>:
 801b198:	4770      	bx	lr

0801b19a <__retarget_lock_release_recursive>:
 801b19a:	4770      	bx	lr

0801b19c <malloc>:
 801b19c:	4b02      	ldr	r3, [pc, #8]	; (801b1a8 <malloc+0xc>)
 801b19e:	4601      	mov	r1, r0
 801b1a0:	6818      	ldr	r0, [r3, #0]
 801b1a2:	f000 b8a9 	b.w	801b2f8 <_malloc_r>
 801b1a6:	bf00      	nop
 801b1a8:	20000518 	.word	0x20000518

0801b1ac <free>:
 801b1ac:	4b02      	ldr	r3, [pc, #8]	; (801b1b8 <free+0xc>)
 801b1ae:	4601      	mov	r1, r0
 801b1b0:	6818      	ldr	r0, [r3, #0]
 801b1b2:	f000 b851 	b.w	801b258 <_free_r>
 801b1b6:	bf00      	nop
 801b1b8:	20000518 	.word	0x20000518

0801b1bc <memcmp>:
 801b1bc:	b530      	push	{r4, r5, lr}
 801b1be:	3901      	subs	r1, #1
 801b1c0:	2400      	movs	r4, #0
 801b1c2:	42a2      	cmp	r2, r4
 801b1c4:	d101      	bne.n	801b1ca <memcmp+0xe>
 801b1c6:	2000      	movs	r0, #0
 801b1c8:	e005      	b.n	801b1d6 <memcmp+0x1a>
 801b1ca:	5d03      	ldrb	r3, [r0, r4]
 801b1cc:	3401      	adds	r4, #1
 801b1ce:	5d0d      	ldrb	r5, [r1, r4]
 801b1d0:	42ab      	cmp	r3, r5
 801b1d2:	d0f6      	beq.n	801b1c2 <memcmp+0x6>
 801b1d4:	1b58      	subs	r0, r3, r5
 801b1d6:	bd30      	pop	{r4, r5, pc}

0801b1d8 <memcpy>:
 801b1d8:	440a      	add	r2, r1
 801b1da:	4291      	cmp	r1, r2
 801b1dc:	f100 33ff 	add.w	r3, r0, #4294967295
 801b1e0:	d100      	bne.n	801b1e4 <memcpy+0xc>
 801b1e2:	4770      	bx	lr
 801b1e4:	b510      	push	{r4, lr}
 801b1e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 801b1ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 801b1ee:	4291      	cmp	r1, r2
 801b1f0:	d1f9      	bne.n	801b1e6 <memcpy+0xe>
 801b1f2:	bd10      	pop	{r4, pc}

0801b1f4 <memmove>:
 801b1f4:	4288      	cmp	r0, r1
 801b1f6:	b510      	push	{r4, lr}
 801b1f8:	eb01 0402 	add.w	r4, r1, r2
 801b1fc:	d902      	bls.n	801b204 <memmove+0x10>
 801b1fe:	4284      	cmp	r4, r0
 801b200:	4623      	mov	r3, r4
 801b202:	d807      	bhi.n	801b214 <memmove+0x20>
 801b204:	1e43      	subs	r3, r0, #1
 801b206:	42a1      	cmp	r1, r4
 801b208:	d008      	beq.n	801b21c <memmove+0x28>
 801b20a:	f811 2b01 	ldrb.w	r2, [r1], #1
 801b20e:	f803 2f01 	strb.w	r2, [r3, #1]!
 801b212:	e7f8      	b.n	801b206 <memmove+0x12>
 801b214:	4402      	add	r2, r0
 801b216:	4601      	mov	r1, r0
 801b218:	428a      	cmp	r2, r1
 801b21a:	d100      	bne.n	801b21e <memmove+0x2a>
 801b21c:	bd10      	pop	{r4, pc}
 801b21e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801b222:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801b226:	e7f7      	b.n	801b218 <memmove+0x24>

0801b228 <memset>:
 801b228:	4402      	add	r2, r0
 801b22a:	4603      	mov	r3, r0
 801b22c:	4293      	cmp	r3, r2
 801b22e:	d100      	bne.n	801b232 <memset+0xa>
 801b230:	4770      	bx	lr
 801b232:	f803 1b01 	strb.w	r1, [r3], #1
 801b236:	e7f9      	b.n	801b22c <memset+0x4>

0801b238 <_calloc_r>:
 801b238:	b513      	push	{r0, r1, r4, lr}
 801b23a:	434a      	muls	r2, r1
 801b23c:	4611      	mov	r1, r2
 801b23e:	9201      	str	r2, [sp, #4]
 801b240:	f000 f85a 	bl	801b2f8 <_malloc_r>
 801b244:	4604      	mov	r4, r0
 801b246:	b118      	cbz	r0, 801b250 <_calloc_r+0x18>
 801b248:	9a01      	ldr	r2, [sp, #4]
 801b24a:	2100      	movs	r1, #0
 801b24c:	f7ff ffec 	bl	801b228 <memset>
 801b250:	4620      	mov	r0, r4
 801b252:	b002      	add	sp, #8
 801b254:	bd10      	pop	{r4, pc}
	...

0801b258 <_free_r>:
 801b258:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801b25a:	2900      	cmp	r1, #0
 801b25c:	d048      	beq.n	801b2f0 <_free_r+0x98>
 801b25e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801b262:	9001      	str	r0, [sp, #4]
 801b264:	2b00      	cmp	r3, #0
 801b266:	f1a1 0404 	sub.w	r4, r1, #4
 801b26a:	bfb8      	it	lt
 801b26c:	18e4      	addlt	r4, r4, r3
 801b26e:	f001 f829 	bl	801c2c4 <__malloc_lock>
 801b272:	4a20      	ldr	r2, [pc, #128]	; (801b2f4 <_free_r+0x9c>)
 801b274:	9801      	ldr	r0, [sp, #4]
 801b276:	6813      	ldr	r3, [r2, #0]
 801b278:	4615      	mov	r5, r2
 801b27a:	b933      	cbnz	r3, 801b28a <_free_r+0x32>
 801b27c:	6063      	str	r3, [r4, #4]
 801b27e:	6014      	str	r4, [r2, #0]
 801b280:	b003      	add	sp, #12
 801b282:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801b286:	f001 b823 	b.w	801c2d0 <__malloc_unlock>
 801b28a:	42a3      	cmp	r3, r4
 801b28c:	d90b      	bls.n	801b2a6 <_free_r+0x4e>
 801b28e:	6821      	ldr	r1, [r4, #0]
 801b290:	1862      	adds	r2, r4, r1
 801b292:	4293      	cmp	r3, r2
 801b294:	bf04      	itt	eq
 801b296:	681a      	ldreq	r2, [r3, #0]
 801b298:	685b      	ldreq	r3, [r3, #4]
 801b29a:	6063      	str	r3, [r4, #4]
 801b29c:	bf04      	itt	eq
 801b29e:	1852      	addeq	r2, r2, r1
 801b2a0:	6022      	streq	r2, [r4, #0]
 801b2a2:	602c      	str	r4, [r5, #0]
 801b2a4:	e7ec      	b.n	801b280 <_free_r+0x28>
 801b2a6:	461a      	mov	r2, r3
 801b2a8:	685b      	ldr	r3, [r3, #4]
 801b2aa:	b10b      	cbz	r3, 801b2b0 <_free_r+0x58>
 801b2ac:	42a3      	cmp	r3, r4
 801b2ae:	d9fa      	bls.n	801b2a6 <_free_r+0x4e>
 801b2b0:	6811      	ldr	r1, [r2, #0]
 801b2b2:	1855      	adds	r5, r2, r1
 801b2b4:	42a5      	cmp	r5, r4
 801b2b6:	d10b      	bne.n	801b2d0 <_free_r+0x78>
 801b2b8:	6824      	ldr	r4, [r4, #0]
 801b2ba:	4421      	add	r1, r4
 801b2bc:	1854      	adds	r4, r2, r1
 801b2be:	42a3      	cmp	r3, r4
 801b2c0:	6011      	str	r1, [r2, #0]
 801b2c2:	d1dd      	bne.n	801b280 <_free_r+0x28>
 801b2c4:	681c      	ldr	r4, [r3, #0]
 801b2c6:	685b      	ldr	r3, [r3, #4]
 801b2c8:	6053      	str	r3, [r2, #4]
 801b2ca:	4421      	add	r1, r4
 801b2cc:	6011      	str	r1, [r2, #0]
 801b2ce:	e7d7      	b.n	801b280 <_free_r+0x28>
 801b2d0:	d902      	bls.n	801b2d8 <_free_r+0x80>
 801b2d2:	230c      	movs	r3, #12
 801b2d4:	6003      	str	r3, [r0, #0]
 801b2d6:	e7d3      	b.n	801b280 <_free_r+0x28>
 801b2d8:	6825      	ldr	r5, [r4, #0]
 801b2da:	1961      	adds	r1, r4, r5
 801b2dc:	428b      	cmp	r3, r1
 801b2de:	bf04      	itt	eq
 801b2e0:	6819      	ldreq	r1, [r3, #0]
 801b2e2:	685b      	ldreq	r3, [r3, #4]
 801b2e4:	6063      	str	r3, [r4, #4]
 801b2e6:	bf04      	itt	eq
 801b2e8:	1949      	addeq	r1, r1, r5
 801b2ea:	6021      	streq	r1, [r4, #0]
 801b2ec:	6054      	str	r4, [r2, #4]
 801b2ee:	e7c7      	b.n	801b280 <_free_r+0x28>
 801b2f0:	b003      	add	sp, #12
 801b2f2:	bd30      	pop	{r4, r5, pc}
 801b2f4:	20007a24 	.word	0x20007a24

0801b2f8 <_malloc_r>:
 801b2f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b2fa:	1ccd      	adds	r5, r1, #3
 801b2fc:	f025 0503 	bic.w	r5, r5, #3
 801b300:	3508      	adds	r5, #8
 801b302:	2d0c      	cmp	r5, #12
 801b304:	bf38      	it	cc
 801b306:	250c      	movcc	r5, #12
 801b308:	2d00      	cmp	r5, #0
 801b30a:	4606      	mov	r6, r0
 801b30c:	db01      	blt.n	801b312 <_malloc_r+0x1a>
 801b30e:	42a9      	cmp	r1, r5
 801b310:	d903      	bls.n	801b31a <_malloc_r+0x22>
 801b312:	230c      	movs	r3, #12
 801b314:	6033      	str	r3, [r6, #0]
 801b316:	2000      	movs	r0, #0
 801b318:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801b31a:	f000 ffd3 	bl	801c2c4 <__malloc_lock>
 801b31e:	4921      	ldr	r1, [pc, #132]	; (801b3a4 <_malloc_r+0xac>)
 801b320:	680a      	ldr	r2, [r1, #0]
 801b322:	4614      	mov	r4, r2
 801b324:	b99c      	cbnz	r4, 801b34e <_malloc_r+0x56>
 801b326:	4f20      	ldr	r7, [pc, #128]	; (801b3a8 <_malloc_r+0xb0>)
 801b328:	683b      	ldr	r3, [r7, #0]
 801b32a:	b923      	cbnz	r3, 801b336 <_malloc_r+0x3e>
 801b32c:	4621      	mov	r1, r4
 801b32e:	4630      	mov	r0, r6
 801b330:	f000 fbb8 	bl	801baa4 <_sbrk_r>
 801b334:	6038      	str	r0, [r7, #0]
 801b336:	4629      	mov	r1, r5
 801b338:	4630      	mov	r0, r6
 801b33a:	f000 fbb3 	bl	801baa4 <_sbrk_r>
 801b33e:	1c43      	adds	r3, r0, #1
 801b340:	d123      	bne.n	801b38a <_malloc_r+0x92>
 801b342:	230c      	movs	r3, #12
 801b344:	6033      	str	r3, [r6, #0]
 801b346:	4630      	mov	r0, r6
 801b348:	f000 ffc2 	bl	801c2d0 <__malloc_unlock>
 801b34c:	e7e3      	b.n	801b316 <_malloc_r+0x1e>
 801b34e:	6823      	ldr	r3, [r4, #0]
 801b350:	1b5b      	subs	r3, r3, r5
 801b352:	d417      	bmi.n	801b384 <_malloc_r+0x8c>
 801b354:	2b0b      	cmp	r3, #11
 801b356:	d903      	bls.n	801b360 <_malloc_r+0x68>
 801b358:	6023      	str	r3, [r4, #0]
 801b35a:	441c      	add	r4, r3
 801b35c:	6025      	str	r5, [r4, #0]
 801b35e:	e004      	b.n	801b36a <_malloc_r+0x72>
 801b360:	6863      	ldr	r3, [r4, #4]
 801b362:	42a2      	cmp	r2, r4
 801b364:	bf0c      	ite	eq
 801b366:	600b      	streq	r3, [r1, #0]
 801b368:	6053      	strne	r3, [r2, #4]
 801b36a:	4630      	mov	r0, r6
 801b36c:	f000 ffb0 	bl	801c2d0 <__malloc_unlock>
 801b370:	f104 000b 	add.w	r0, r4, #11
 801b374:	1d23      	adds	r3, r4, #4
 801b376:	f020 0007 	bic.w	r0, r0, #7
 801b37a:	1ac2      	subs	r2, r0, r3
 801b37c:	d0cc      	beq.n	801b318 <_malloc_r+0x20>
 801b37e:	1a1b      	subs	r3, r3, r0
 801b380:	50a3      	str	r3, [r4, r2]
 801b382:	e7c9      	b.n	801b318 <_malloc_r+0x20>
 801b384:	4622      	mov	r2, r4
 801b386:	6864      	ldr	r4, [r4, #4]
 801b388:	e7cc      	b.n	801b324 <_malloc_r+0x2c>
 801b38a:	1cc4      	adds	r4, r0, #3
 801b38c:	f024 0403 	bic.w	r4, r4, #3
 801b390:	42a0      	cmp	r0, r4
 801b392:	d0e3      	beq.n	801b35c <_malloc_r+0x64>
 801b394:	1a21      	subs	r1, r4, r0
 801b396:	4630      	mov	r0, r6
 801b398:	f000 fb84 	bl	801baa4 <_sbrk_r>
 801b39c:	3001      	adds	r0, #1
 801b39e:	d1dd      	bne.n	801b35c <_malloc_r+0x64>
 801b3a0:	e7cf      	b.n	801b342 <_malloc_r+0x4a>
 801b3a2:	bf00      	nop
 801b3a4:	20007a24 	.word	0x20007a24
 801b3a8:	20007a28 	.word	0x20007a28

0801b3ac <__sfputc_r>:
 801b3ac:	6893      	ldr	r3, [r2, #8]
 801b3ae:	3b01      	subs	r3, #1
 801b3b0:	2b00      	cmp	r3, #0
 801b3b2:	b410      	push	{r4}
 801b3b4:	6093      	str	r3, [r2, #8]
 801b3b6:	da08      	bge.n	801b3ca <__sfputc_r+0x1e>
 801b3b8:	6994      	ldr	r4, [r2, #24]
 801b3ba:	42a3      	cmp	r3, r4
 801b3bc:	db01      	blt.n	801b3c2 <__sfputc_r+0x16>
 801b3be:	290a      	cmp	r1, #10
 801b3c0:	d103      	bne.n	801b3ca <__sfputc_r+0x1e>
 801b3c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3c6:	f000 bbe1 	b.w	801bb8c <__swbuf_r>
 801b3ca:	6813      	ldr	r3, [r2, #0]
 801b3cc:	1c58      	adds	r0, r3, #1
 801b3ce:	6010      	str	r0, [r2, #0]
 801b3d0:	7019      	strb	r1, [r3, #0]
 801b3d2:	4608      	mov	r0, r1
 801b3d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 801b3d8:	4770      	bx	lr

0801b3da <__sfputs_r>:
 801b3da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801b3dc:	4606      	mov	r6, r0
 801b3de:	460f      	mov	r7, r1
 801b3e0:	4614      	mov	r4, r2
 801b3e2:	18d5      	adds	r5, r2, r3
 801b3e4:	42ac      	cmp	r4, r5
 801b3e6:	d101      	bne.n	801b3ec <__sfputs_r+0x12>
 801b3e8:	2000      	movs	r0, #0
 801b3ea:	e007      	b.n	801b3fc <__sfputs_r+0x22>
 801b3ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b3f0:	463a      	mov	r2, r7
 801b3f2:	4630      	mov	r0, r6
 801b3f4:	f7ff ffda 	bl	801b3ac <__sfputc_r>
 801b3f8:	1c43      	adds	r3, r0, #1
 801b3fa:	d1f3      	bne.n	801b3e4 <__sfputs_r+0xa>
 801b3fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801b400 <_vfiprintf_r>:
 801b400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b404:	460d      	mov	r5, r1
 801b406:	b09d      	sub	sp, #116	; 0x74
 801b408:	4614      	mov	r4, r2
 801b40a:	4698      	mov	r8, r3
 801b40c:	4606      	mov	r6, r0
 801b40e:	b118      	cbz	r0, 801b418 <_vfiprintf_r+0x18>
 801b410:	6983      	ldr	r3, [r0, #24]
 801b412:	b90b      	cbnz	r3, 801b418 <_vfiprintf_r+0x18>
 801b414:	f000 fe54 	bl	801c0c0 <__sinit>
 801b418:	4b89      	ldr	r3, [pc, #548]	; (801b640 <_vfiprintf_r+0x240>)
 801b41a:	429d      	cmp	r5, r3
 801b41c:	d11b      	bne.n	801b456 <_vfiprintf_r+0x56>
 801b41e:	6875      	ldr	r5, [r6, #4]
 801b420:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b422:	07d9      	lsls	r1, r3, #31
 801b424:	d405      	bmi.n	801b432 <_vfiprintf_r+0x32>
 801b426:	89ab      	ldrh	r3, [r5, #12]
 801b428:	059a      	lsls	r2, r3, #22
 801b42a:	d402      	bmi.n	801b432 <_vfiprintf_r+0x32>
 801b42c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b42e:	f7ff feb2 	bl	801b196 <__retarget_lock_acquire_recursive>
 801b432:	89ab      	ldrh	r3, [r5, #12]
 801b434:	071b      	lsls	r3, r3, #28
 801b436:	d501      	bpl.n	801b43c <_vfiprintf_r+0x3c>
 801b438:	692b      	ldr	r3, [r5, #16]
 801b43a:	b9eb      	cbnz	r3, 801b478 <_vfiprintf_r+0x78>
 801b43c:	4629      	mov	r1, r5
 801b43e:	4630      	mov	r0, r6
 801b440:	f000 fbf6 	bl	801bc30 <__swsetup_r>
 801b444:	b1c0      	cbz	r0, 801b478 <_vfiprintf_r+0x78>
 801b446:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b448:	07dc      	lsls	r4, r3, #31
 801b44a:	d50e      	bpl.n	801b46a <_vfiprintf_r+0x6a>
 801b44c:	f04f 30ff 	mov.w	r0, #4294967295
 801b450:	b01d      	add	sp, #116	; 0x74
 801b452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b456:	4b7b      	ldr	r3, [pc, #492]	; (801b644 <_vfiprintf_r+0x244>)
 801b458:	429d      	cmp	r5, r3
 801b45a:	d101      	bne.n	801b460 <_vfiprintf_r+0x60>
 801b45c:	68b5      	ldr	r5, [r6, #8]
 801b45e:	e7df      	b.n	801b420 <_vfiprintf_r+0x20>
 801b460:	4b79      	ldr	r3, [pc, #484]	; (801b648 <_vfiprintf_r+0x248>)
 801b462:	429d      	cmp	r5, r3
 801b464:	bf08      	it	eq
 801b466:	68f5      	ldreq	r5, [r6, #12]
 801b468:	e7da      	b.n	801b420 <_vfiprintf_r+0x20>
 801b46a:	89ab      	ldrh	r3, [r5, #12]
 801b46c:	0598      	lsls	r0, r3, #22
 801b46e:	d4ed      	bmi.n	801b44c <_vfiprintf_r+0x4c>
 801b470:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b472:	f7ff fe92 	bl	801b19a <__retarget_lock_release_recursive>
 801b476:	e7e9      	b.n	801b44c <_vfiprintf_r+0x4c>
 801b478:	2300      	movs	r3, #0
 801b47a:	9309      	str	r3, [sp, #36]	; 0x24
 801b47c:	2320      	movs	r3, #32
 801b47e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801b482:	f8cd 800c 	str.w	r8, [sp, #12]
 801b486:	2330      	movs	r3, #48	; 0x30
 801b488:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801b64c <_vfiprintf_r+0x24c>
 801b48c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801b490:	f04f 0901 	mov.w	r9, #1
 801b494:	4623      	mov	r3, r4
 801b496:	469a      	mov	sl, r3
 801b498:	f813 2b01 	ldrb.w	r2, [r3], #1
 801b49c:	b10a      	cbz	r2, 801b4a2 <_vfiprintf_r+0xa2>
 801b49e:	2a25      	cmp	r2, #37	; 0x25
 801b4a0:	d1f9      	bne.n	801b496 <_vfiprintf_r+0x96>
 801b4a2:	ebba 0b04 	subs.w	fp, sl, r4
 801b4a6:	d00b      	beq.n	801b4c0 <_vfiprintf_r+0xc0>
 801b4a8:	465b      	mov	r3, fp
 801b4aa:	4622      	mov	r2, r4
 801b4ac:	4629      	mov	r1, r5
 801b4ae:	4630      	mov	r0, r6
 801b4b0:	f7ff ff93 	bl	801b3da <__sfputs_r>
 801b4b4:	3001      	adds	r0, #1
 801b4b6:	f000 80aa 	beq.w	801b60e <_vfiprintf_r+0x20e>
 801b4ba:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801b4bc:	445a      	add	r2, fp
 801b4be:	9209      	str	r2, [sp, #36]	; 0x24
 801b4c0:	f89a 3000 	ldrb.w	r3, [sl]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	f000 80a2 	beq.w	801b60e <_vfiprintf_r+0x20e>
 801b4ca:	2300      	movs	r3, #0
 801b4cc:	f04f 32ff 	mov.w	r2, #4294967295
 801b4d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801b4d4:	f10a 0a01 	add.w	sl, sl, #1
 801b4d8:	9304      	str	r3, [sp, #16]
 801b4da:	9307      	str	r3, [sp, #28]
 801b4dc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801b4e0:	931a      	str	r3, [sp, #104]	; 0x68
 801b4e2:	4654      	mov	r4, sl
 801b4e4:	2205      	movs	r2, #5
 801b4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b4ea:	4858      	ldr	r0, [pc, #352]	; (801b64c <_vfiprintf_r+0x24c>)
 801b4ec:	f7e4 fe98 	bl	8000220 <memchr>
 801b4f0:	9a04      	ldr	r2, [sp, #16]
 801b4f2:	b9d8      	cbnz	r0, 801b52c <_vfiprintf_r+0x12c>
 801b4f4:	06d1      	lsls	r1, r2, #27
 801b4f6:	bf44      	itt	mi
 801b4f8:	2320      	movmi	r3, #32
 801b4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b4fe:	0713      	lsls	r3, r2, #28
 801b500:	bf44      	itt	mi
 801b502:	232b      	movmi	r3, #43	; 0x2b
 801b504:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801b508:	f89a 3000 	ldrb.w	r3, [sl]
 801b50c:	2b2a      	cmp	r3, #42	; 0x2a
 801b50e:	d015      	beq.n	801b53c <_vfiprintf_r+0x13c>
 801b510:	9a07      	ldr	r2, [sp, #28]
 801b512:	4654      	mov	r4, sl
 801b514:	2000      	movs	r0, #0
 801b516:	f04f 0c0a 	mov.w	ip, #10
 801b51a:	4621      	mov	r1, r4
 801b51c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801b520:	3b30      	subs	r3, #48	; 0x30
 801b522:	2b09      	cmp	r3, #9
 801b524:	d94e      	bls.n	801b5c4 <_vfiprintf_r+0x1c4>
 801b526:	b1b0      	cbz	r0, 801b556 <_vfiprintf_r+0x156>
 801b528:	9207      	str	r2, [sp, #28]
 801b52a:	e014      	b.n	801b556 <_vfiprintf_r+0x156>
 801b52c:	eba0 0308 	sub.w	r3, r0, r8
 801b530:	fa09 f303 	lsl.w	r3, r9, r3
 801b534:	4313      	orrs	r3, r2
 801b536:	9304      	str	r3, [sp, #16]
 801b538:	46a2      	mov	sl, r4
 801b53a:	e7d2      	b.n	801b4e2 <_vfiprintf_r+0xe2>
 801b53c:	9b03      	ldr	r3, [sp, #12]
 801b53e:	1d19      	adds	r1, r3, #4
 801b540:	681b      	ldr	r3, [r3, #0]
 801b542:	9103      	str	r1, [sp, #12]
 801b544:	2b00      	cmp	r3, #0
 801b546:	bfbb      	ittet	lt
 801b548:	425b      	neglt	r3, r3
 801b54a:	f042 0202 	orrlt.w	r2, r2, #2
 801b54e:	9307      	strge	r3, [sp, #28]
 801b550:	9307      	strlt	r3, [sp, #28]
 801b552:	bfb8      	it	lt
 801b554:	9204      	strlt	r2, [sp, #16]
 801b556:	7823      	ldrb	r3, [r4, #0]
 801b558:	2b2e      	cmp	r3, #46	; 0x2e
 801b55a:	d10c      	bne.n	801b576 <_vfiprintf_r+0x176>
 801b55c:	7863      	ldrb	r3, [r4, #1]
 801b55e:	2b2a      	cmp	r3, #42	; 0x2a
 801b560:	d135      	bne.n	801b5ce <_vfiprintf_r+0x1ce>
 801b562:	9b03      	ldr	r3, [sp, #12]
 801b564:	1d1a      	adds	r2, r3, #4
 801b566:	681b      	ldr	r3, [r3, #0]
 801b568:	9203      	str	r2, [sp, #12]
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	bfb8      	it	lt
 801b56e:	f04f 33ff 	movlt.w	r3, #4294967295
 801b572:	3402      	adds	r4, #2
 801b574:	9305      	str	r3, [sp, #20]
 801b576:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801b65c <_vfiprintf_r+0x25c>
 801b57a:	7821      	ldrb	r1, [r4, #0]
 801b57c:	2203      	movs	r2, #3
 801b57e:	4650      	mov	r0, sl
 801b580:	f7e4 fe4e 	bl	8000220 <memchr>
 801b584:	b140      	cbz	r0, 801b598 <_vfiprintf_r+0x198>
 801b586:	2340      	movs	r3, #64	; 0x40
 801b588:	eba0 000a 	sub.w	r0, r0, sl
 801b58c:	fa03 f000 	lsl.w	r0, r3, r0
 801b590:	9b04      	ldr	r3, [sp, #16]
 801b592:	4303      	orrs	r3, r0
 801b594:	3401      	adds	r4, #1
 801b596:	9304      	str	r3, [sp, #16]
 801b598:	f814 1b01 	ldrb.w	r1, [r4], #1
 801b59c:	482c      	ldr	r0, [pc, #176]	; (801b650 <_vfiprintf_r+0x250>)
 801b59e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801b5a2:	2206      	movs	r2, #6
 801b5a4:	f7e4 fe3c 	bl	8000220 <memchr>
 801b5a8:	2800      	cmp	r0, #0
 801b5aa:	d03f      	beq.n	801b62c <_vfiprintf_r+0x22c>
 801b5ac:	4b29      	ldr	r3, [pc, #164]	; (801b654 <_vfiprintf_r+0x254>)
 801b5ae:	bb1b      	cbnz	r3, 801b5f8 <_vfiprintf_r+0x1f8>
 801b5b0:	9b03      	ldr	r3, [sp, #12]
 801b5b2:	3307      	adds	r3, #7
 801b5b4:	f023 0307 	bic.w	r3, r3, #7
 801b5b8:	3308      	adds	r3, #8
 801b5ba:	9303      	str	r3, [sp, #12]
 801b5bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801b5be:	443b      	add	r3, r7
 801b5c0:	9309      	str	r3, [sp, #36]	; 0x24
 801b5c2:	e767      	b.n	801b494 <_vfiprintf_r+0x94>
 801b5c4:	fb0c 3202 	mla	r2, ip, r2, r3
 801b5c8:	460c      	mov	r4, r1
 801b5ca:	2001      	movs	r0, #1
 801b5cc:	e7a5      	b.n	801b51a <_vfiprintf_r+0x11a>
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	3401      	adds	r4, #1
 801b5d2:	9305      	str	r3, [sp, #20]
 801b5d4:	4619      	mov	r1, r3
 801b5d6:	f04f 0c0a 	mov.w	ip, #10
 801b5da:	4620      	mov	r0, r4
 801b5dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 801b5e0:	3a30      	subs	r2, #48	; 0x30
 801b5e2:	2a09      	cmp	r2, #9
 801b5e4:	d903      	bls.n	801b5ee <_vfiprintf_r+0x1ee>
 801b5e6:	2b00      	cmp	r3, #0
 801b5e8:	d0c5      	beq.n	801b576 <_vfiprintf_r+0x176>
 801b5ea:	9105      	str	r1, [sp, #20]
 801b5ec:	e7c3      	b.n	801b576 <_vfiprintf_r+0x176>
 801b5ee:	fb0c 2101 	mla	r1, ip, r1, r2
 801b5f2:	4604      	mov	r4, r0
 801b5f4:	2301      	movs	r3, #1
 801b5f6:	e7f0      	b.n	801b5da <_vfiprintf_r+0x1da>
 801b5f8:	ab03      	add	r3, sp, #12
 801b5fa:	9300      	str	r3, [sp, #0]
 801b5fc:	462a      	mov	r2, r5
 801b5fe:	4b16      	ldr	r3, [pc, #88]	; (801b658 <_vfiprintf_r+0x258>)
 801b600:	a904      	add	r1, sp, #16
 801b602:	4630      	mov	r0, r6
 801b604:	f3af 8000 	nop.w
 801b608:	4607      	mov	r7, r0
 801b60a:	1c78      	adds	r0, r7, #1
 801b60c:	d1d6      	bne.n	801b5bc <_vfiprintf_r+0x1bc>
 801b60e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801b610:	07d9      	lsls	r1, r3, #31
 801b612:	d405      	bmi.n	801b620 <_vfiprintf_r+0x220>
 801b614:	89ab      	ldrh	r3, [r5, #12]
 801b616:	059a      	lsls	r2, r3, #22
 801b618:	d402      	bmi.n	801b620 <_vfiprintf_r+0x220>
 801b61a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801b61c:	f7ff fdbd 	bl	801b19a <__retarget_lock_release_recursive>
 801b620:	89ab      	ldrh	r3, [r5, #12]
 801b622:	065b      	lsls	r3, r3, #25
 801b624:	f53f af12 	bmi.w	801b44c <_vfiprintf_r+0x4c>
 801b628:	9809      	ldr	r0, [sp, #36]	; 0x24
 801b62a:	e711      	b.n	801b450 <_vfiprintf_r+0x50>
 801b62c:	ab03      	add	r3, sp, #12
 801b62e:	9300      	str	r3, [sp, #0]
 801b630:	462a      	mov	r2, r5
 801b632:	4b09      	ldr	r3, [pc, #36]	; (801b658 <_vfiprintf_r+0x258>)
 801b634:	a904      	add	r1, sp, #16
 801b636:	4630      	mov	r0, r6
 801b638:	f000 f880 	bl	801b73c <_printf_i>
 801b63c:	e7e4      	b.n	801b608 <_vfiprintf_r+0x208>
 801b63e:	bf00      	nop
 801b640:	0803efac 	.word	0x0803efac
 801b644:	0803efcc 	.word	0x0803efcc
 801b648:	0803ef8c 	.word	0x0803ef8c
 801b64c:	0803ef58 	.word	0x0803ef58
 801b650:	0803ef62 	.word	0x0803ef62
 801b654:	00000000 	.word	0x00000000
 801b658:	0801b3db 	.word	0x0801b3db
 801b65c:	0803ef5e 	.word	0x0803ef5e

0801b660 <_printf_common>:
 801b660:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801b664:	4616      	mov	r6, r2
 801b666:	4699      	mov	r9, r3
 801b668:	688a      	ldr	r2, [r1, #8]
 801b66a:	690b      	ldr	r3, [r1, #16]
 801b66c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801b670:	4293      	cmp	r3, r2
 801b672:	bfb8      	it	lt
 801b674:	4613      	movlt	r3, r2
 801b676:	6033      	str	r3, [r6, #0]
 801b678:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801b67c:	4607      	mov	r7, r0
 801b67e:	460c      	mov	r4, r1
 801b680:	b10a      	cbz	r2, 801b686 <_printf_common+0x26>
 801b682:	3301      	adds	r3, #1
 801b684:	6033      	str	r3, [r6, #0]
 801b686:	6823      	ldr	r3, [r4, #0]
 801b688:	0699      	lsls	r1, r3, #26
 801b68a:	bf42      	ittt	mi
 801b68c:	6833      	ldrmi	r3, [r6, #0]
 801b68e:	3302      	addmi	r3, #2
 801b690:	6033      	strmi	r3, [r6, #0]
 801b692:	6825      	ldr	r5, [r4, #0]
 801b694:	f015 0506 	ands.w	r5, r5, #6
 801b698:	d106      	bne.n	801b6a8 <_printf_common+0x48>
 801b69a:	f104 0a19 	add.w	sl, r4, #25
 801b69e:	68e3      	ldr	r3, [r4, #12]
 801b6a0:	6832      	ldr	r2, [r6, #0]
 801b6a2:	1a9b      	subs	r3, r3, r2
 801b6a4:	42ab      	cmp	r3, r5
 801b6a6:	dc26      	bgt.n	801b6f6 <_printf_common+0x96>
 801b6a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801b6ac:	1e13      	subs	r3, r2, #0
 801b6ae:	6822      	ldr	r2, [r4, #0]
 801b6b0:	bf18      	it	ne
 801b6b2:	2301      	movne	r3, #1
 801b6b4:	0692      	lsls	r2, r2, #26
 801b6b6:	d42b      	bmi.n	801b710 <_printf_common+0xb0>
 801b6b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b6bc:	4649      	mov	r1, r9
 801b6be:	4638      	mov	r0, r7
 801b6c0:	47c0      	blx	r8
 801b6c2:	3001      	adds	r0, #1
 801b6c4:	d01e      	beq.n	801b704 <_printf_common+0xa4>
 801b6c6:	6823      	ldr	r3, [r4, #0]
 801b6c8:	68e5      	ldr	r5, [r4, #12]
 801b6ca:	6832      	ldr	r2, [r6, #0]
 801b6cc:	f003 0306 	and.w	r3, r3, #6
 801b6d0:	2b04      	cmp	r3, #4
 801b6d2:	bf08      	it	eq
 801b6d4:	1aad      	subeq	r5, r5, r2
 801b6d6:	68a3      	ldr	r3, [r4, #8]
 801b6d8:	6922      	ldr	r2, [r4, #16]
 801b6da:	bf0c      	ite	eq
 801b6dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801b6e0:	2500      	movne	r5, #0
 801b6e2:	4293      	cmp	r3, r2
 801b6e4:	bfc4      	itt	gt
 801b6e6:	1a9b      	subgt	r3, r3, r2
 801b6e8:	18ed      	addgt	r5, r5, r3
 801b6ea:	2600      	movs	r6, #0
 801b6ec:	341a      	adds	r4, #26
 801b6ee:	42b5      	cmp	r5, r6
 801b6f0:	d11a      	bne.n	801b728 <_printf_common+0xc8>
 801b6f2:	2000      	movs	r0, #0
 801b6f4:	e008      	b.n	801b708 <_printf_common+0xa8>
 801b6f6:	2301      	movs	r3, #1
 801b6f8:	4652      	mov	r2, sl
 801b6fa:	4649      	mov	r1, r9
 801b6fc:	4638      	mov	r0, r7
 801b6fe:	47c0      	blx	r8
 801b700:	3001      	adds	r0, #1
 801b702:	d103      	bne.n	801b70c <_printf_common+0xac>
 801b704:	f04f 30ff 	mov.w	r0, #4294967295
 801b708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b70c:	3501      	adds	r5, #1
 801b70e:	e7c6      	b.n	801b69e <_printf_common+0x3e>
 801b710:	18e1      	adds	r1, r4, r3
 801b712:	1c5a      	adds	r2, r3, #1
 801b714:	2030      	movs	r0, #48	; 0x30
 801b716:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801b71a:	4422      	add	r2, r4
 801b71c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801b720:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801b724:	3302      	adds	r3, #2
 801b726:	e7c7      	b.n	801b6b8 <_printf_common+0x58>
 801b728:	2301      	movs	r3, #1
 801b72a:	4622      	mov	r2, r4
 801b72c:	4649      	mov	r1, r9
 801b72e:	4638      	mov	r0, r7
 801b730:	47c0      	blx	r8
 801b732:	3001      	adds	r0, #1
 801b734:	d0e6      	beq.n	801b704 <_printf_common+0xa4>
 801b736:	3601      	adds	r6, #1
 801b738:	e7d9      	b.n	801b6ee <_printf_common+0x8e>
	...

0801b73c <_printf_i>:
 801b73c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801b740:	460c      	mov	r4, r1
 801b742:	4691      	mov	r9, r2
 801b744:	7e27      	ldrb	r7, [r4, #24]
 801b746:	990c      	ldr	r1, [sp, #48]	; 0x30
 801b748:	2f78      	cmp	r7, #120	; 0x78
 801b74a:	4680      	mov	r8, r0
 801b74c:	469a      	mov	sl, r3
 801b74e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801b752:	d807      	bhi.n	801b764 <_printf_i+0x28>
 801b754:	2f62      	cmp	r7, #98	; 0x62
 801b756:	d80a      	bhi.n	801b76e <_printf_i+0x32>
 801b758:	2f00      	cmp	r7, #0
 801b75a:	f000 80d8 	beq.w	801b90e <_printf_i+0x1d2>
 801b75e:	2f58      	cmp	r7, #88	; 0x58
 801b760:	f000 80a3 	beq.w	801b8aa <_printf_i+0x16e>
 801b764:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b768:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801b76c:	e03a      	b.n	801b7e4 <_printf_i+0xa8>
 801b76e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801b772:	2b15      	cmp	r3, #21
 801b774:	d8f6      	bhi.n	801b764 <_printf_i+0x28>
 801b776:	a001      	add	r0, pc, #4	; (adr r0, 801b77c <_printf_i+0x40>)
 801b778:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 801b77c:	0801b7d5 	.word	0x0801b7d5
 801b780:	0801b7e9 	.word	0x0801b7e9
 801b784:	0801b765 	.word	0x0801b765
 801b788:	0801b765 	.word	0x0801b765
 801b78c:	0801b765 	.word	0x0801b765
 801b790:	0801b765 	.word	0x0801b765
 801b794:	0801b7e9 	.word	0x0801b7e9
 801b798:	0801b765 	.word	0x0801b765
 801b79c:	0801b765 	.word	0x0801b765
 801b7a0:	0801b765 	.word	0x0801b765
 801b7a4:	0801b765 	.word	0x0801b765
 801b7a8:	0801b8f5 	.word	0x0801b8f5
 801b7ac:	0801b819 	.word	0x0801b819
 801b7b0:	0801b8d7 	.word	0x0801b8d7
 801b7b4:	0801b765 	.word	0x0801b765
 801b7b8:	0801b765 	.word	0x0801b765
 801b7bc:	0801b917 	.word	0x0801b917
 801b7c0:	0801b765 	.word	0x0801b765
 801b7c4:	0801b819 	.word	0x0801b819
 801b7c8:	0801b765 	.word	0x0801b765
 801b7cc:	0801b765 	.word	0x0801b765
 801b7d0:	0801b8df 	.word	0x0801b8df
 801b7d4:	680b      	ldr	r3, [r1, #0]
 801b7d6:	1d1a      	adds	r2, r3, #4
 801b7d8:	681b      	ldr	r3, [r3, #0]
 801b7da:	600a      	str	r2, [r1, #0]
 801b7dc:	f104 0642 	add.w	r6, r4, #66	; 0x42
 801b7e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801b7e4:	2301      	movs	r3, #1
 801b7e6:	e0a3      	b.n	801b930 <_printf_i+0x1f4>
 801b7e8:	6825      	ldr	r5, [r4, #0]
 801b7ea:	6808      	ldr	r0, [r1, #0]
 801b7ec:	062e      	lsls	r6, r5, #24
 801b7ee:	f100 0304 	add.w	r3, r0, #4
 801b7f2:	d50a      	bpl.n	801b80a <_printf_i+0xce>
 801b7f4:	6805      	ldr	r5, [r0, #0]
 801b7f6:	600b      	str	r3, [r1, #0]
 801b7f8:	2d00      	cmp	r5, #0
 801b7fa:	da03      	bge.n	801b804 <_printf_i+0xc8>
 801b7fc:	232d      	movs	r3, #45	; 0x2d
 801b7fe:	426d      	negs	r5, r5
 801b800:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b804:	485e      	ldr	r0, [pc, #376]	; (801b980 <_printf_i+0x244>)
 801b806:	230a      	movs	r3, #10
 801b808:	e019      	b.n	801b83e <_printf_i+0x102>
 801b80a:	f015 0f40 	tst.w	r5, #64	; 0x40
 801b80e:	6805      	ldr	r5, [r0, #0]
 801b810:	600b      	str	r3, [r1, #0]
 801b812:	bf18      	it	ne
 801b814:	b22d      	sxthne	r5, r5
 801b816:	e7ef      	b.n	801b7f8 <_printf_i+0xbc>
 801b818:	680b      	ldr	r3, [r1, #0]
 801b81a:	6825      	ldr	r5, [r4, #0]
 801b81c:	1d18      	adds	r0, r3, #4
 801b81e:	6008      	str	r0, [r1, #0]
 801b820:	0628      	lsls	r0, r5, #24
 801b822:	d501      	bpl.n	801b828 <_printf_i+0xec>
 801b824:	681d      	ldr	r5, [r3, #0]
 801b826:	e002      	b.n	801b82e <_printf_i+0xf2>
 801b828:	0669      	lsls	r1, r5, #25
 801b82a:	d5fb      	bpl.n	801b824 <_printf_i+0xe8>
 801b82c:	881d      	ldrh	r5, [r3, #0]
 801b82e:	4854      	ldr	r0, [pc, #336]	; (801b980 <_printf_i+0x244>)
 801b830:	2f6f      	cmp	r7, #111	; 0x6f
 801b832:	bf0c      	ite	eq
 801b834:	2308      	moveq	r3, #8
 801b836:	230a      	movne	r3, #10
 801b838:	2100      	movs	r1, #0
 801b83a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801b83e:	6866      	ldr	r6, [r4, #4]
 801b840:	60a6      	str	r6, [r4, #8]
 801b842:	2e00      	cmp	r6, #0
 801b844:	bfa2      	ittt	ge
 801b846:	6821      	ldrge	r1, [r4, #0]
 801b848:	f021 0104 	bicge.w	r1, r1, #4
 801b84c:	6021      	strge	r1, [r4, #0]
 801b84e:	b90d      	cbnz	r5, 801b854 <_printf_i+0x118>
 801b850:	2e00      	cmp	r6, #0
 801b852:	d04d      	beq.n	801b8f0 <_printf_i+0x1b4>
 801b854:	4616      	mov	r6, r2
 801b856:	fbb5 f1f3 	udiv	r1, r5, r3
 801b85a:	fb03 5711 	mls	r7, r3, r1, r5
 801b85e:	5dc7      	ldrb	r7, [r0, r7]
 801b860:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801b864:	462f      	mov	r7, r5
 801b866:	42bb      	cmp	r3, r7
 801b868:	460d      	mov	r5, r1
 801b86a:	d9f4      	bls.n	801b856 <_printf_i+0x11a>
 801b86c:	2b08      	cmp	r3, #8
 801b86e:	d10b      	bne.n	801b888 <_printf_i+0x14c>
 801b870:	6823      	ldr	r3, [r4, #0]
 801b872:	07df      	lsls	r7, r3, #31
 801b874:	d508      	bpl.n	801b888 <_printf_i+0x14c>
 801b876:	6923      	ldr	r3, [r4, #16]
 801b878:	6861      	ldr	r1, [r4, #4]
 801b87a:	4299      	cmp	r1, r3
 801b87c:	bfde      	ittt	le
 801b87e:	2330      	movle	r3, #48	; 0x30
 801b880:	f806 3c01 	strble.w	r3, [r6, #-1]
 801b884:	f106 36ff 	addle.w	r6, r6, #4294967295
 801b888:	1b92      	subs	r2, r2, r6
 801b88a:	6122      	str	r2, [r4, #16]
 801b88c:	f8cd a000 	str.w	sl, [sp]
 801b890:	464b      	mov	r3, r9
 801b892:	aa03      	add	r2, sp, #12
 801b894:	4621      	mov	r1, r4
 801b896:	4640      	mov	r0, r8
 801b898:	f7ff fee2 	bl	801b660 <_printf_common>
 801b89c:	3001      	adds	r0, #1
 801b89e:	d14c      	bne.n	801b93a <_printf_i+0x1fe>
 801b8a0:	f04f 30ff 	mov.w	r0, #4294967295
 801b8a4:	b004      	add	sp, #16
 801b8a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801b8aa:	4835      	ldr	r0, [pc, #212]	; (801b980 <_printf_i+0x244>)
 801b8ac:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801b8b0:	6823      	ldr	r3, [r4, #0]
 801b8b2:	680e      	ldr	r6, [r1, #0]
 801b8b4:	061f      	lsls	r7, r3, #24
 801b8b6:	f856 5b04 	ldr.w	r5, [r6], #4
 801b8ba:	600e      	str	r6, [r1, #0]
 801b8bc:	d514      	bpl.n	801b8e8 <_printf_i+0x1ac>
 801b8be:	07d9      	lsls	r1, r3, #31
 801b8c0:	bf44      	itt	mi
 801b8c2:	f043 0320 	orrmi.w	r3, r3, #32
 801b8c6:	6023      	strmi	r3, [r4, #0]
 801b8c8:	b91d      	cbnz	r5, 801b8d2 <_printf_i+0x196>
 801b8ca:	6823      	ldr	r3, [r4, #0]
 801b8cc:	f023 0320 	bic.w	r3, r3, #32
 801b8d0:	6023      	str	r3, [r4, #0]
 801b8d2:	2310      	movs	r3, #16
 801b8d4:	e7b0      	b.n	801b838 <_printf_i+0xfc>
 801b8d6:	6823      	ldr	r3, [r4, #0]
 801b8d8:	f043 0320 	orr.w	r3, r3, #32
 801b8dc:	6023      	str	r3, [r4, #0]
 801b8de:	2378      	movs	r3, #120	; 0x78
 801b8e0:	4828      	ldr	r0, [pc, #160]	; (801b984 <_printf_i+0x248>)
 801b8e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 801b8e6:	e7e3      	b.n	801b8b0 <_printf_i+0x174>
 801b8e8:	065e      	lsls	r6, r3, #25
 801b8ea:	bf48      	it	mi
 801b8ec:	b2ad      	uxthmi	r5, r5
 801b8ee:	e7e6      	b.n	801b8be <_printf_i+0x182>
 801b8f0:	4616      	mov	r6, r2
 801b8f2:	e7bb      	b.n	801b86c <_printf_i+0x130>
 801b8f4:	680b      	ldr	r3, [r1, #0]
 801b8f6:	6826      	ldr	r6, [r4, #0]
 801b8f8:	6960      	ldr	r0, [r4, #20]
 801b8fa:	1d1d      	adds	r5, r3, #4
 801b8fc:	600d      	str	r5, [r1, #0]
 801b8fe:	0635      	lsls	r5, r6, #24
 801b900:	681b      	ldr	r3, [r3, #0]
 801b902:	d501      	bpl.n	801b908 <_printf_i+0x1cc>
 801b904:	6018      	str	r0, [r3, #0]
 801b906:	e002      	b.n	801b90e <_printf_i+0x1d2>
 801b908:	0671      	lsls	r1, r6, #25
 801b90a:	d5fb      	bpl.n	801b904 <_printf_i+0x1c8>
 801b90c:	8018      	strh	r0, [r3, #0]
 801b90e:	2300      	movs	r3, #0
 801b910:	6123      	str	r3, [r4, #16]
 801b912:	4616      	mov	r6, r2
 801b914:	e7ba      	b.n	801b88c <_printf_i+0x150>
 801b916:	680b      	ldr	r3, [r1, #0]
 801b918:	1d1a      	adds	r2, r3, #4
 801b91a:	600a      	str	r2, [r1, #0]
 801b91c:	681e      	ldr	r6, [r3, #0]
 801b91e:	6862      	ldr	r2, [r4, #4]
 801b920:	2100      	movs	r1, #0
 801b922:	4630      	mov	r0, r6
 801b924:	f7e4 fc7c 	bl	8000220 <memchr>
 801b928:	b108      	cbz	r0, 801b92e <_printf_i+0x1f2>
 801b92a:	1b80      	subs	r0, r0, r6
 801b92c:	6060      	str	r0, [r4, #4]
 801b92e:	6863      	ldr	r3, [r4, #4]
 801b930:	6123      	str	r3, [r4, #16]
 801b932:	2300      	movs	r3, #0
 801b934:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801b938:	e7a8      	b.n	801b88c <_printf_i+0x150>
 801b93a:	6923      	ldr	r3, [r4, #16]
 801b93c:	4632      	mov	r2, r6
 801b93e:	4649      	mov	r1, r9
 801b940:	4640      	mov	r0, r8
 801b942:	47d0      	blx	sl
 801b944:	3001      	adds	r0, #1
 801b946:	d0ab      	beq.n	801b8a0 <_printf_i+0x164>
 801b948:	6823      	ldr	r3, [r4, #0]
 801b94a:	079b      	lsls	r3, r3, #30
 801b94c:	d413      	bmi.n	801b976 <_printf_i+0x23a>
 801b94e:	68e0      	ldr	r0, [r4, #12]
 801b950:	9b03      	ldr	r3, [sp, #12]
 801b952:	4298      	cmp	r0, r3
 801b954:	bfb8      	it	lt
 801b956:	4618      	movlt	r0, r3
 801b958:	e7a4      	b.n	801b8a4 <_printf_i+0x168>
 801b95a:	2301      	movs	r3, #1
 801b95c:	4632      	mov	r2, r6
 801b95e:	4649      	mov	r1, r9
 801b960:	4640      	mov	r0, r8
 801b962:	47d0      	blx	sl
 801b964:	3001      	adds	r0, #1
 801b966:	d09b      	beq.n	801b8a0 <_printf_i+0x164>
 801b968:	3501      	adds	r5, #1
 801b96a:	68e3      	ldr	r3, [r4, #12]
 801b96c:	9903      	ldr	r1, [sp, #12]
 801b96e:	1a5b      	subs	r3, r3, r1
 801b970:	42ab      	cmp	r3, r5
 801b972:	dcf2      	bgt.n	801b95a <_printf_i+0x21e>
 801b974:	e7eb      	b.n	801b94e <_printf_i+0x212>
 801b976:	2500      	movs	r5, #0
 801b978:	f104 0619 	add.w	r6, r4, #25
 801b97c:	e7f5      	b.n	801b96a <_printf_i+0x22e>
 801b97e:	bf00      	nop
 801b980:	0803ef69 	.word	0x0803ef69
 801b984:	0803ef7a 	.word	0x0803ef7a

0801b988 <iprintf>:
 801b988:	b40f      	push	{r0, r1, r2, r3}
 801b98a:	4b0a      	ldr	r3, [pc, #40]	; (801b9b4 <iprintf+0x2c>)
 801b98c:	b513      	push	{r0, r1, r4, lr}
 801b98e:	681c      	ldr	r4, [r3, #0]
 801b990:	b124      	cbz	r4, 801b99c <iprintf+0x14>
 801b992:	69a3      	ldr	r3, [r4, #24]
 801b994:	b913      	cbnz	r3, 801b99c <iprintf+0x14>
 801b996:	4620      	mov	r0, r4
 801b998:	f000 fb92 	bl	801c0c0 <__sinit>
 801b99c:	ab05      	add	r3, sp, #20
 801b99e:	9a04      	ldr	r2, [sp, #16]
 801b9a0:	68a1      	ldr	r1, [r4, #8]
 801b9a2:	9301      	str	r3, [sp, #4]
 801b9a4:	4620      	mov	r0, r4
 801b9a6:	f7ff fd2b 	bl	801b400 <_vfiprintf_r>
 801b9aa:	b002      	add	sp, #8
 801b9ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b9b0:	b004      	add	sp, #16
 801b9b2:	4770      	bx	lr
 801b9b4:	20000518 	.word	0x20000518

0801b9b8 <_puts_r>:
 801b9b8:	b570      	push	{r4, r5, r6, lr}
 801b9ba:	460e      	mov	r6, r1
 801b9bc:	4605      	mov	r5, r0
 801b9be:	b118      	cbz	r0, 801b9c8 <_puts_r+0x10>
 801b9c0:	6983      	ldr	r3, [r0, #24]
 801b9c2:	b90b      	cbnz	r3, 801b9c8 <_puts_r+0x10>
 801b9c4:	f000 fb7c 	bl	801c0c0 <__sinit>
 801b9c8:	69ab      	ldr	r3, [r5, #24]
 801b9ca:	68ac      	ldr	r4, [r5, #8]
 801b9cc:	b913      	cbnz	r3, 801b9d4 <_puts_r+0x1c>
 801b9ce:	4628      	mov	r0, r5
 801b9d0:	f000 fb76 	bl	801c0c0 <__sinit>
 801b9d4:	4b2c      	ldr	r3, [pc, #176]	; (801ba88 <_puts_r+0xd0>)
 801b9d6:	429c      	cmp	r4, r3
 801b9d8:	d120      	bne.n	801ba1c <_puts_r+0x64>
 801b9da:	686c      	ldr	r4, [r5, #4]
 801b9dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801b9de:	07db      	lsls	r3, r3, #31
 801b9e0:	d405      	bmi.n	801b9ee <_puts_r+0x36>
 801b9e2:	89a3      	ldrh	r3, [r4, #12]
 801b9e4:	0598      	lsls	r0, r3, #22
 801b9e6:	d402      	bmi.n	801b9ee <_puts_r+0x36>
 801b9e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801b9ea:	f7ff fbd4 	bl	801b196 <__retarget_lock_acquire_recursive>
 801b9ee:	89a3      	ldrh	r3, [r4, #12]
 801b9f0:	0719      	lsls	r1, r3, #28
 801b9f2:	d51d      	bpl.n	801ba30 <_puts_r+0x78>
 801b9f4:	6923      	ldr	r3, [r4, #16]
 801b9f6:	b1db      	cbz	r3, 801ba30 <_puts_r+0x78>
 801b9f8:	3e01      	subs	r6, #1
 801b9fa:	68a3      	ldr	r3, [r4, #8]
 801b9fc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ba00:	3b01      	subs	r3, #1
 801ba02:	60a3      	str	r3, [r4, #8]
 801ba04:	bb39      	cbnz	r1, 801ba56 <_puts_r+0x9e>
 801ba06:	2b00      	cmp	r3, #0
 801ba08:	da38      	bge.n	801ba7c <_puts_r+0xc4>
 801ba0a:	4622      	mov	r2, r4
 801ba0c:	210a      	movs	r1, #10
 801ba0e:	4628      	mov	r0, r5
 801ba10:	f000 f8bc 	bl	801bb8c <__swbuf_r>
 801ba14:	3001      	adds	r0, #1
 801ba16:	d011      	beq.n	801ba3c <_puts_r+0x84>
 801ba18:	250a      	movs	r5, #10
 801ba1a:	e011      	b.n	801ba40 <_puts_r+0x88>
 801ba1c:	4b1b      	ldr	r3, [pc, #108]	; (801ba8c <_puts_r+0xd4>)
 801ba1e:	429c      	cmp	r4, r3
 801ba20:	d101      	bne.n	801ba26 <_puts_r+0x6e>
 801ba22:	68ac      	ldr	r4, [r5, #8]
 801ba24:	e7da      	b.n	801b9dc <_puts_r+0x24>
 801ba26:	4b1a      	ldr	r3, [pc, #104]	; (801ba90 <_puts_r+0xd8>)
 801ba28:	429c      	cmp	r4, r3
 801ba2a:	bf08      	it	eq
 801ba2c:	68ec      	ldreq	r4, [r5, #12]
 801ba2e:	e7d5      	b.n	801b9dc <_puts_r+0x24>
 801ba30:	4621      	mov	r1, r4
 801ba32:	4628      	mov	r0, r5
 801ba34:	f000 f8fc 	bl	801bc30 <__swsetup_r>
 801ba38:	2800      	cmp	r0, #0
 801ba3a:	d0dd      	beq.n	801b9f8 <_puts_r+0x40>
 801ba3c:	f04f 35ff 	mov.w	r5, #4294967295
 801ba40:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801ba42:	07da      	lsls	r2, r3, #31
 801ba44:	d405      	bmi.n	801ba52 <_puts_r+0x9a>
 801ba46:	89a3      	ldrh	r3, [r4, #12]
 801ba48:	059b      	lsls	r3, r3, #22
 801ba4a:	d402      	bmi.n	801ba52 <_puts_r+0x9a>
 801ba4c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801ba4e:	f7ff fba4 	bl	801b19a <__retarget_lock_release_recursive>
 801ba52:	4628      	mov	r0, r5
 801ba54:	bd70      	pop	{r4, r5, r6, pc}
 801ba56:	2b00      	cmp	r3, #0
 801ba58:	da04      	bge.n	801ba64 <_puts_r+0xac>
 801ba5a:	69a2      	ldr	r2, [r4, #24]
 801ba5c:	429a      	cmp	r2, r3
 801ba5e:	dc06      	bgt.n	801ba6e <_puts_r+0xb6>
 801ba60:	290a      	cmp	r1, #10
 801ba62:	d004      	beq.n	801ba6e <_puts_r+0xb6>
 801ba64:	6823      	ldr	r3, [r4, #0]
 801ba66:	1c5a      	adds	r2, r3, #1
 801ba68:	6022      	str	r2, [r4, #0]
 801ba6a:	7019      	strb	r1, [r3, #0]
 801ba6c:	e7c5      	b.n	801b9fa <_puts_r+0x42>
 801ba6e:	4622      	mov	r2, r4
 801ba70:	4628      	mov	r0, r5
 801ba72:	f000 f88b 	bl	801bb8c <__swbuf_r>
 801ba76:	3001      	adds	r0, #1
 801ba78:	d1bf      	bne.n	801b9fa <_puts_r+0x42>
 801ba7a:	e7df      	b.n	801ba3c <_puts_r+0x84>
 801ba7c:	6823      	ldr	r3, [r4, #0]
 801ba7e:	250a      	movs	r5, #10
 801ba80:	1c5a      	adds	r2, r3, #1
 801ba82:	6022      	str	r2, [r4, #0]
 801ba84:	701d      	strb	r5, [r3, #0]
 801ba86:	e7db      	b.n	801ba40 <_puts_r+0x88>
 801ba88:	0803efac 	.word	0x0803efac
 801ba8c:	0803efcc 	.word	0x0803efcc
 801ba90:	0803ef8c 	.word	0x0803ef8c

0801ba94 <puts>:
 801ba94:	4b02      	ldr	r3, [pc, #8]	; (801baa0 <puts+0xc>)
 801ba96:	4601      	mov	r1, r0
 801ba98:	6818      	ldr	r0, [r3, #0]
 801ba9a:	f7ff bf8d 	b.w	801b9b8 <_puts_r>
 801ba9e:	bf00      	nop
 801baa0:	20000518 	.word	0x20000518

0801baa4 <_sbrk_r>:
 801baa4:	b538      	push	{r3, r4, r5, lr}
 801baa6:	4d06      	ldr	r5, [pc, #24]	; (801bac0 <_sbrk_r+0x1c>)
 801baa8:	2300      	movs	r3, #0
 801baaa:	4604      	mov	r4, r0
 801baac:	4608      	mov	r0, r1
 801baae:	602b      	str	r3, [r5, #0]
 801bab0:	f7ea ff68 	bl	8006984 <_sbrk>
 801bab4:	1c43      	adds	r3, r0, #1
 801bab6:	d102      	bne.n	801babe <_sbrk_r+0x1a>
 801bab8:	682b      	ldr	r3, [r5, #0]
 801baba:	b103      	cbz	r3, 801babe <_sbrk_r+0x1a>
 801babc:	6023      	str	r3, [r4, #0]
 801babe:	bd38      	pop	{r3, r4, r5, pc}
 801bac0:	20007acc 	.word	0x20007acc

0801bac4 <_raise_r>:
 801bac4:	291f      	cmp	r1, #31
 801bac6:	b538      	push	{r3, r4, r5, lr}
 801bac8:	4604      	mov	r4, r0
 801baca:	460d      	mov	r5, r1
 801bacc:	d904      	bls.n	801bad8 <_raise_r+0x14>
 801bace:	2316      	movs	r3, #22
 801bad0:	6003      	str	r3, [r0, #0]
 801bad2:	f04f 30ff 	mov.w	r0, #4294967295
 801bad6:	bd38      	pop	{r3, r4, r5, pc}
 801bad8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 801bada:	b112      	cbz	r2, 801bae2 <_raise_r+0x1e>
 801badc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801bae0:	b94b      	cbnz	r3, 801baf6 <_raise_r+0x32>
 801bae2:	4620      	mov	r0, r4
 801bae4:	f000 f830 	bl	801bb48 <_getpid_r>
 801bae8:	462a      	mov	r2, r5
 801baea:	4601      	mov	r1, r0
 801baec:	4620      	mov	r0, r4
 801baee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801baf2:	f000 b817 	b.w	801bb24 <_kill_r>
 801baf6:	2b01      	cmp	r3, #1
 801baf8:	d00a      	beq.n	801bb10 <_raise_r+0x4c>
 801bafa:	1c59      	adds	r1, r3, #1
 801bafc:	d103      	bne.n	801bb06 <_raise_r+0x42>
 801bafe:	2316      	movs	r3, #22
 801bb00:	6003      	str	r3, [r0, #0]
 801bb02:	2001      	movs	r0, #1
 801bb04:	e7e7      	b.n	801bad6 <_raise_r+0x12>
 801bb06:	2400      	movs	r4, #0
 801bb08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801bb0c:	4628      	mov	r0, r5
 801bb0e:	4798      	blx	r3
 801bb10:	2000      	movs	r0, #0
 801bb12:	e7e0      	b.n	801bad6 <_raise_r+0x12>

0801bb14 <raise>:
 801bb14:	4b02      	ldr	r3, [pc, #8]	; (801bb20 <raise+0xc>)
 801bb16:	4601      	mov	r1, r0
 801bb18:	6818      	ldr	r0, [r3, #0]
 801bb1a:	f7ff bfd3 	b.w	801bac4 <_raise_r>
 801bb1e:	bf00      	nop
 801bb20:	20000518 	.word	0x20000518

0801bb24 <_kill_r>:
 801bb24:	b538      	push	{r3, r4, r5, lr}
 801bb26:	4d07      	ldr	r5, [pc, #28]	; (801bb44 <_kill_r+0x20>)
 801bb28:	2300      	movs	r3, #0
 801bb2a:	4604      	mov	r4, r0
 801bb2c:	4608      	mov	r0, r1
 801bb2e:	4611      	mov	r1, r2
 801bb30:	602b      	str	r3, [r5, #0]
 801bb32:	f7ea fe9f 	bl	8006874 <_kill>
 801bb36:	1c43      	adds	r3, r0, #1
 801bb38:	d102      	bne.n	801bb40 <_kill_r+0x1c>
 801bb3a:	682b      	ldr	r3, [r5, #0]
 801bb3c:	b103      	cbz	r3, 801bb40 <_kill_r+0x1c>
 801bb3e:	6023      	str	r3, [r4, #0]
 801bb40:	bd38      	pop	{r3, r4, r5, pc}
 801bb42:	bf00      	nop
 801bb44:	20007acc 	.word	0x20007acc

0801bb48 <_getpid_r>:
 801bb48:	f7ea be8c 	b.w	8006864 <_getpid>

0801bb4c <_vsiprintf_r>:
 801bb4c:	b500      	push	{lr}
 801bb4e:	b09b      	sub	sp, #108	; 0x6c
 801bb50:	9100      	str	r1, [sp, #0]
 801bb52:	9104      	str	r1, [sp, #16]
 801bb54:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 801bb58:	9105      	str	r1, [sp, #20]
 801bb5a:	9102      	str	r1, [sp, #8]
 801bb5c:	4905      	ldr	r1, [pc, #20]	; (801bb74 <_vsiprintf_r+0x28>)
 801bb5e:	9103      	str	r1, [sp, #12]
 801bb60:	4669      	mov	r1, sp
 801bb62:	f000 fc3d 	bl	801c3e0 <_svfiprintf_r>
 801bb66:	9b00      	ldr	r3, [sp, #0]
 801bb68:	2200      	movs	r2, #0
 801bb6a:	701a      	strb	r2, [r3, #0]
 801bb6c:	b01b      	add	sp, #108	; 0x6c
 801bb6e:	f85d fb04 	ldr.w	pc, [sp], #4
 801bb72:	bf00      	nop
 801bb74:	ffff0208 	.word	0xffff0208

0801bb78 <vsiprintf>:
 801bb78:	4613      	mov	r3, r2
 801bb7a:	460a      	mov	r2, r1
 801bb7c:	4601      	mov	r1, r0
 801bb7e:	4802      	ldr	r0, [pc, #8]	; (801bb88 <vsiprintf+0x10>)
 801bb80:	6800      	ldr	r0, [r0, #0]
 801bb82:	f7ff bfe3 	b.w	801bb4c <_vsiprintf_r>
 801bb86:	bf00      	nop
 801bb88:	20000518 	.word	0x20000518

0801bb8c <__swbuf_r>:
 801bb8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801bb8e:	460e      	mov	r6, r1
 801bb90:	4614      	mov	r4, r2
 801bb92:	4605      	mov	r5, r0
 801bb94:	b118      	cbz	r0, 801bb9e <__swbuf_r+0x12>
 801bb96:	6983      	ldr	r3, [r0, #24]
 801bb98:	b90b      	cbnz	r3, 801bb9e <__swbuf_r+0x12>
 801bb9a:	f000 fa91 	bl	801c0c0 <__sinit>
 801bb9e:	4b21      	ldr	r3, [pc, #132]	; (801bc24 <__swbuf_r+0x98>)
 801bba0:	429c      	cmp	r4, r3
 801bba2:	d12b      	bne.n	801bbfc <__swbuf_r+0x70>
 801bba4:	686c      	ldr	r4, [r5, #4]
 801bba6:	69a3      	ldr	r3, [r4, #24]
 801bba8:	60a3      	str	r3, [r4, #8]
 801bbaa:	89a3      	ldrh	r3, [r4, #12]
 801bbac:	071a      	lsls	r2, r3, #28
 801bbae:	d52f      	bpl.n	801bc10 <__swbuf_r+0x84>
 801bbb0:	6923      	ldr	r3, [r4, #16]
 801bbb2:	b36b      	cbz	r3, 801bc10 <__swbuf_r+0x84>
 801bbb4:	6923      	ldr	r3, [r4, #16]
 801bbb6:	6820      	ldr	r0, [r4, #0]
 801bbb8:	1ac0      	subs	r0, r0, r3
 801bbba:	6963      	ldr	r3, [r4, #20]
 801bbbc:	b2f6      	uxtb	r6, r6
 801bbbe:	4283      	cmp	r3, r0
 801bbc0:	4637      	mov	r7, r6
 801bbc2:	dc04      	bgt.n	801bbce <__swbuf_r+0x42>
 801bbc4:	4621      	mov	r1, r4
 801bbc6:	4628      	mov	r0, r5
 801bbc8:	f000 f9e6 	bl	801bf98 <_fflush_r>
 801bbcc:	bb30      	cbnz	r0, 801bc1c <__swbuf_r+0x90>
 801bbce:	68a3      	ldr	r3, [r4, #8]
 801bbd0:	3b01      	subs	r3, #1
 801bbd2:	60a3      	str	r3, [r4, #8]
 801bbd4:	6823      	ldr	r3, [r4, #0]
 801bbd6:	1c5a      	adds	r2, r3, #1
 801bbd8:	6022      	str	r2, [r4, #0]
 801bbda:	701e      	strb	r6, [r3, #0]
 801bbdc:	6963      	ldr	r3, [r4, #20]
 801bbde:	3001      	adds	r0, #1
 801bbe0:	4283      	cmp	r3, r0
 801bbe2:	d004      	beq.n	801bbee <__swbuf_r+0x62>
 801bbe4:	89a3      	ldrh	r3, [r4, #12]
 801bbe6:	07db      	lsls	r3, r3, #31
 801bbe8:	d506      	bpl.n	801bbf8 <__swbuf_r+0x6c>
 801bbea:	2e0a      	cmp	r6, #10
 801bbec:	d104      	bne.n	801bbf8 <__swbuf_r+0x6c>
 801bbee:	4621      	mov	r1, r4
 801bbf0:	4628      	mov	r0, r5
 801bbf2:	f000 f9d1 	bl	801bf98 <_fflush_r>
 801bbf6:	b988      	cbnz	r0, 801bc1c <__swbuf_r+0x90>
 801bbf8:	4638      	mov	r0, r7
 801bbfa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801bbfc:	4b0a      	ldr	r3, [pc, #40]	; (801bc28 <__swbuf_r+0x9c>)
 801bbfe:	429c      	cmp	r4, r3
 801bc00:	d101      	bne.n	801bc06 <__swbuf_r+0x7a>
 801bc02:	68ac      	ldr	r4, [r5, #8]
 801bc04:	e7cf      	b.n	801bba6 <__swbuf_r+0x1a>
 801bc06:	4b09      	ldr	r3, [pc, #36]	; (801bc2c <__swbuf_r+0xa0>)
 801bc08:	429c      	cmp	r4, r3
 801bc0a:	bf08      	it	eq
 801bc0c:	68ec      	ldreq	r4, [r5, #12]
 801bc0e:	e7ca      	b.n	801bba6 <__swbuf_r+0x1a>
 801bc10:	4621      	mov	r1, r4
 801bc12:	4628      	mov	r0, r5
 801bc14:	f000 f80c 	bl	801bc30 <__swsetup_r>
 801bc18:	2800      	cmp	r0, #0
 801bc1a:	d0cb      	beq.n	801bbb4 <__swbuf_r+0x28>
 801bc1c:	f04f 37ff 	mov.w	r7, #4294967295
 801bc20:	e7ea      	b.n	801bbf8 <__swbuf_r+0x6c>
 801bc22:	bf00      	nop
 801bc24:	0803efac 	.word	0x0803efac
 801bc28:	0803efcc 	.word	0x0803efcc
 801bc2c:	0803ef8c 	.word	0x0803ef8c

0801bc30 <__swsetup_r>:
 801bc30:	4b32      	ldr	r3, [pc, #200]	; (801bcfc <__swsetup_r+0xcc>)
 801bc32:	b570      	push	{r4, r5, r6, lr}
 801bc34:	681d      	ldr	r5, [r3, #0]
 801bc36:	4606      	mov	r6, r0
 801bc38:	460c      	mov	r4, r1
 801bc3a:	b125      	cbz	r5, 801bc46 <__swsetup_r+0x16>
 801bc3c:	69ab      	ldr	r3, [r5, #24]
 801bc3e:	b913      	cbnz	r3, 801bc46 <__swsetup_r+0x16>
 801bc40:	4628      	mov	r0, r5
 801bc42:	f000 fa3d 	bl	801c0c0 <__sinit>
 801bc46:	4b2e      	ldr	r3, [pc, #184]	; (801bd00 <__swsetup_r+0xd0>)
 801bc48:	429c      	cmp	r4, r3
 801bc4a:	d10f      	bne.n	801bc6c <__swsetup_r+0x3c>
 801bc4c:	686c      	ldr	r4, [r5, #4]
 801bc4e:	89a3      	ldrh	r3, [r4, #12]
 801bc50:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bc54:	0719      	lsls	r1, r3, #28
 801bc56:	d42c      	bmi.n	801bcb2 <__swsetup_r+0x82>
 801bc58:	06dd      	lsls	r5, r3, #27
 801bc5a:	d411      	bmi.n	801bc80 <__swsetup_r+0x50>
 801bc5c:	2309      	movs	r3, #9
 801bc5e:	6033      	str	r3, [r6, #0]
 801bc60:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801bc64:	81a3      	strh	r3, [r4, #12]
 801bc66:	f04f 30ff 	mov.w	r0, #4294967295
 801bc6a:	e03e      	b.n	801bcea <__swsetup_r+0xba>
 801bc6c:	4b25      	ldr	r3, [pc, #148]	; (801bd04 <__swsetup_r+0xd4>)
 801bc6e:	429c      	cmp	r4, r3
 801bc70:	d101      	bne.n	801bc76 <__swsetup_r+0x46>
 801bc72:	68ac      	ldr	r4, [r5, #8]
 801bc74:	e7eb      	b.n	801bc4e <__swsetup_r+0x1e>
 801bc76:	4b24      	ldr	r3, [pc, #144]	; (801bd08 <__swsetup_r+0xd8>)
 801bc78:	429c      	cmp	r4, r3
 801bc7a:	bf08      	it	eq
 801bc7c:	68ec      	ldreq	r4, [r5, #12]
 801bc7e:	e7e6      	b.n	801bc4e <__swsetup_r+0x1e>
 801bc80:	0758      	lsls	r0, r3, #29
 801bc82:	d512      	bpl.n	801bcaa <__swsetup_r+0x7a>
 801bc84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bc86:	b141      	cbz	r1, 801bc9a <__swsetup_r+0x6a>
 801bc88:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bc8c:	4299      	cmp	r1, r3
 801bc8e:	d002      	beq.n	801bc96 <__swsetup_r+0x66>
 801bc90:	4630      	mov	r0, r6
 801bc92:	f7ff fae1 	bl	801b258 <_free_r>
 801bc96:	2300      	movs	r3, #0
 801bc98:	6363      	str	r3, [r4, #52]	; 0x34
 801bc9a:	89a3      	ldrh	r3, [r4, #12]
 801bc9c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801bca0:	81a3      	strh	r3, [r4, #12]
 801bca2:	2300      	movs	r3, #0
 801bca4:	6063      	str	r3, [r4, #4]
 801bca6:	6923      	ldr	r3, [r4, #16]
 801bca8:	6023      	str	r3, [r4, #0]
 801bcaa:	89a3      	ldrh	r3, [r4, #12]
 801bcac:	f043 0308 	orr.w	r3, r3, #8
 801bcb0:	81a3      	strh	r3, [r4, #12]
 801bcb2:	6923      	ldr	r3, [r4, #16]
 801bcb4:	b94b      	cbnz	r3, 801bcca <__swsetup_r+0x9a>
 801bcb6:	89a3      	ldrh	r3, [r4, #12]
 801bcb8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801bcbc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801bcc0:	d003      	beq.n	801bcca <__swsetup_r+0x9a>
 801bcc2:	4621      	mov	r1, r4
 801bcc4:	4630      	mov	r0, r6
 801bcc6:	f000 fabd 	bl	801c244 <__smakebuf_r>
 801bcca:	89a0      	ldrh	r0, [r4, #12]
 801bccc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801bcd0:	f010 0301 	ands.w	r3, r0, #1
 801bcd4:	d00a      	beq.n	801bcec <__swsetup_r+0xbc>
 801bcd6:	2300      	movs	r3, #0
 801bcd8:	60a3      	str	r3, [r4, #8]
 801bcda:	6963      	ldr	r3, [r4, #20]
 801bcdc:	425b      	negs	r3, r3
 801bcde:	61a3      	str	r3, [r4, #24]
 801bce0:	6923      	ldr	r3, [r4, #16]
 801bce2:	b943      	cbnz	r3, 801bcf6 <__swsetup_r+0xc6>
 801bce4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801bce8:	d1ba      	bne.n	801bc60 <__swsetup_r+0x30>
 801bcea:	bd70      	pop	{r4, r5, r6, pc}
 801bcec:	0781      	lsls	r1, r0, #30
 801bcee:	bf58      	it	pl
 801bcf0:	6963      	ldrpl	r3, [r4, #20]
 801bcf2:	60a3      	str	r3, [r4, #8]
 801bcf4:	e7f4      	b.n	801bce0 <__swsetup_r+0xb0>
 801bcf6:	2000      	movs	r0, #0
 801bcf8:	e7f7      	b.n	801bcea <__swsetup_r+0xba>
 801bcfa:	bf00      	nop
 801bcfc:	20000518 	.word	0x20000518
 801bd00:	0803efac 	.word	0x0803efac
 801bd04:	0803efcc 	.word	0x0803efcc
 801bd08:	0803ef8c 	.word	0x0803ef8c

0801bd0c <__register_exitproc>:
 801bd0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801bd10:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 801bdcc <__register_exitproc+0xc0>
 801bd14:	4606      	mov	r6, r0
 801bd16:	f8d8 0000 	ldr.w	r0, [r8]
 801bd1a:	461f      	mov	r7, r3
 801bd1c:	460d      	mov	r5, r1
 801bd1e:	4691      	mov	r9, r2
 801bd20:	f7ff fa39 	bl	801b196 <__retarget_lock_acquire_recursive>
 801bd24:	4b25      	ldr	r3, [pc, #148]	; (801bdbc <__register_exitproc+0xb0>)
 801bd26:	681c      	ldr	r4, [r3, #0]
 801bd28:	b934      	cbnz	r4, 801bd38 <__register_exitproc+0x2c>
 801bd2a:	4c25      	ldr	r4, [pc, #148]	; (801bdc0 <__register_exitproc+0xb4>)
 801bd2c:	601c      	str	r4, [r3, #0]
 801bd2e:	4b25      	ldr	r3, [pc, #148]	; (801bdc4 <__register_exitproc+0xb8>)
 801bd30:	b113      	cbz	r3, 801bd38 <__register_exitproc+0x2c>
 801bd32:	681b      	ldr	r3, [r3, #0]
 801bd34:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
 801bd38:	6863      	ldr	r3, [r4, #4]
 801bd3a:	2b1f      	cmp	r3, #31
 801bd3c:	dd07      	ble.n	801bd4e <__register_exitproc+0x42>
 801bd3e:	f8d8 0000 	ldr.w	r0, [r8]
 801bd42:	f7ff fa2a 	bl	801b19a <__retarget_lock_release_recursive>
 801bd46:	f04f 30ff 	mov.w	r0, #4294967295
 801bd4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801bd4e:	b34e      	cbz	r6, 801bda4 <__register_exitproc+0x98>
 801bd50:	f8d4 0088 	ldr.w	r0, [r4, #136]	; 0x88
 801bd54:	b988      	cbnz	r0, 801bd7a <__register_exitproc+0x6e>
 801bd56:	4b1c      	ldr	r3, [pc, #112]	; (801bdc8 <__register_exitproc+0xbc>)
 801bd58:	b923      	cbnz	r3, 801bd64 <__register_exitproc+0x58>
 801bd5a:	f8d8 0000 	ldr.w	r0, [r8]
 801bd5e:	f7ff fa1b 	bl	801b198 <__retarget_lock_release>
 801bd62:	e7f0      	b.n	801bd46 <__register_exitproc+0x3a>
 801bd64:	f44f 7084 	mov.w	r0, #264	; 0x108
 801bd68:	f7ff fa18 	bl	801b19c <malloc>
 801bd6c:	2800      	cmp	r0, #0
 801bd6e:	d0f4      	beq.n	801bd5a <__register_exitproc+0x4e>
 801bd70:	2300      	movs	r3, #0
 801bd72:	e9c0 3340 	strd	r3, r3, [r0, #256]	; 0x100
 801bd76:	f8c4 0088 	str.w	r0, [r4, #136]	; 0x88
 801bd7a:	6863      	ldr	r3, [r4, #4]
 801bd7c:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 801bd80:	2201      	movs	r2, #1
 801bd82:	409a      	lsls	r2, r3
 801bd84:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 801bd88:	f8d0 3100 	ldr.w	r3, [r0, #256]	; 0x100
 801bd8c:	4313      	orrs	r3, r2
 801bd8e:	2e02      	cmp	r6, #2
 801bd90:	f8c0 3100 	str.w	r3, [r0, #256]	; 0x100
 801bd94:	f8c1 7080 	str.w	r7, [r1, #128]	; 0x80
 801bd98:	bf02      	ittt	eq
 801bd9a:	f8d0 3104 	ldreq.w	r3, [r0, #260]	; 0x104
 801bd9e:	431a      	orreq	r2, r3
 801bda0:	f8c0 2104 	streq.w	r2, [r0, #260]	; 0x104
 801bda4:	6863      	ldr	r3, [r4, #4]
 801bda6:	f8d8 0000 	ldr.w	r0, [r8]
 801bdaa:	1c5a      	adds	r2, r3, #1
 801bdac:	3302      	adds	r3, #2
 801bdae:	6062      	str	r2, [r4, #4]
 801bdb0:	f844 5023 	str.w	r5, [r4, r3, lsl #2]
 801bdb4:	f7ff f9f1 	bl	801b19a <__retarget_lock_release_recursive>
 801bdb8:	2000      	movs	r0, #0
 801bdba:	e7c6      	b.n	801bd4a <__register_exitproc+0x3e>
 801bdbc:	20007ab8 	.word	0x20007ab8
 801bdc0:	20007a2c 	.word	0x20007a2c
 801bdc4:	00000000 	.word	0x00000000
 801bdc8:	0801b19d 	.word	0x0801b19d
 801bdcc:	2000057c 	.word	0x2000057c

0801bdd0 <__call_exitprocs>:
 801bdd0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdd4:	4c2b      	ldr	r4, [pc, #172]	; (801be84 <__call_exitprocs+0xb4>)
 801bdd6:	f8df 80b0 	ldr.w	r8, [pc, #176]	; 801be88 <__call_exitprocs+0xb8>
 801bdda:	4607      	mov	r7, r0
 801bddc:	6820      	ldr	r0, [r4, #0]
 801bdde:	460e      	mov	r6, r1
 801bde0:	f7ff f9d9 	bl	801b196 <__retarget_lock_acquire_recursive>
 801bde4:	46a3      	mov	fp, r4
 801bde6:	f8d8 5000 	ldr.w	r5, [r8]
 801bdea:	b935      	cbnz	r5, 801bdfa <__call_exitprocs+0x2a>
 801bdec:	f8db 0000 	ldr.w	r0, [fp]
 801bdf0:	b003      	add	sp, #12
 801bdf2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bdf6:	f7ff b9d0 	b.w	801b19a <__retarget_lock_release_recursive>
 801bdfa:	686c      	ldr	r4, [r5, #4]
 801bdfc:	f8d5 a088 	ldr.w	sl, [r5, #136]	; 0x88
 801be00:	3c01      	subs	r4, #1
 801be02:	f105 0908 	add.w	r9, r5, #8
 801be06:	2c00      	cmp	r4, #0
 801be08:	dbf0      	blt.n	801bdec <__call_exitprocs+0x1c>
 801be0a:	b156      	cbz	r6, 801be22 <__call_exitprocs+0x52>
 801be0c:	f1ba 0f00 	cmp.w	sl, #0
 801be10:	d101      	bne.n	801be16 <__call_exitprocs+0x46>
 801be12:	3c01      	subs	r4, #1
 801be14:	e7f7      	b.n	801be06 <__call_exitprocs+0x36>
 801be16:	f10a 0280 	add.w	r2, sl, #128	; 0x80
 801be1a:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 801be1e:	42b2      	cmp	r2, r6
 801be20:	d1f7      	bne.n	801be12 <__call_exitprocs+0x42>
 801be22:	6869      	ldr	r1, [r5, #4]
 801be24:	f859 2024 	ldr.w	r2, [r9, r4, lsl #2]
 801be28:	3901      	subs	r1, #1
 801be2a:	42a1      	cmp	r1, r4
 801be2c:	bf1a      	itte	ne
 801be2e:	2300      	movne	r3, #0
 801be30:	f849 3024 	strne.w	r3, [r9, r4, lsl #2]
 801be34:	606c      	streq	r4, [r5, #4]
 801be36:	2a00      	cmp	r2, #0
 801be38:	d0eb      	beq.n	801be12 <__call_exitprocs+0x42>
 801be3a:	686b      	ldr	r3, [r5, #4]
 801be3c:	9301      	str	r3, [sp, #4]
 801be3e:	f1ba 0f00 	cmp.w	sl, #0
 801be42:	d007      	beq.n	801be54 <__call_exitprocs+0x84>
 801be44:	f8da 1100 	ldr.w	r1, [sl, #256]	; 0x100
 801be48:	2301      	movs	r3, #1
 801be4a:	fa03 fc04 	lsl.w	ip, r3, r4
 801be4e:	ea1c 0f01 	tst.w	ip, r1
 801be52:	d109      	bne.n	801be68 <__call_exitprocs+0x98>
 801be54:	4790      	blx	r2
 801be56:	4b0c      	ldr	r3, [pc, #48]	; (801be88 <__call_exitprocs+0xb8>)
 801be58:	6869      	ldr	r1, [r5, #4]
 801be5a:	681a      	ldr	r2, [r3, #0]
 801be5c:	9b01      	ldr	r3, [sp, #4]
 801be5e:	4299      	cmp	r1, r3
 801be60:	d1c1      	bne.n	801bde6 <__call_exitprocs+0x16>
 801be62:	4295      	cmp	r5, r2
 801be64:	d0d5      	beq.n	801be12 <__call_exitprocs+0x42>
 801be66:	e7be      	b.n	801bde6 <__call_exitprocs+0x16>
 801be68:	f8da 0104 	ldr.w	r0, [sl, #260]	; 0x104
 801be6c:	f85a 1024 	ldr.w	r1, [sl, r4, lsl #2]
 801be70:	ea1c 0f00 	tst.w	ip, r0
 801be74:	d102      	bne.n	801be7c <__call_exitprocs+0xac>
 801be76:	4638      	mov	r0, r7
 801be78:	4790      	blx	r2
 801be7a:	e7ec      	b.n	801be56 <__call_exitprocs+0x86>
 801be7c:	4608      	mov	r0, r1
 801be7e:	4790      	blx	r2
 801be80:	e7e9      	b.n	801be56 <__call_exitprocs+0x86>
 801be82:	bf00      	nop
 801be84:	2000057c 	.word	0x2000057c
 801be88:	20007ab8 	.word	0x20007ab8

0801be8c <__sflush_r>:
 801be8c:	898a      	ldrh	r2, [r1, #12]
 801be8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801be92:	4605      	mov	r5, r0
 801be94:	0710      	lsls	r0, r2, #28
 801be96:	460c      	mov	r4, r1
 801be98:	d458      	bmi.n	801bf4c <__sflush_r+0xc0>
 801be9a:	684b      	ldr	r3, [r1, #4]
 801be9c:	2b00      	cmp	r3, #0
 801be9e:	dc05      	bgt.n	801beac <__sflush_r+0x20>
 801bea0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801bea2:	2b00      	cmp	r3, #0
 801bea4:	dc02      	bgt.n	801beac <__sflush_r+0x20>
 801bea6:	2000      	movs	r0, #0
 801bea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801beac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801beae:	2e00      	cmp	r6, #0
 801beb0:	d0f9      	beq.n	801bea6 <__sflush_r+0x1a>
 801beb2:	2300      	movs	r3, #0
 801beb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801beb8:	682f      	ldr	r7, [r5, #0]
 801beba:	602b      	str	r3, [r5, #0]
 801bebc:	d032      	beq.n	801bf24 <__sflush_r+0x98>
 801bebe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801bec0:	89a3      	ldrh	r3, [r4, #12]
 801bec2:	075a      	lsls	r2, r3, #29
 801bec4:	d505      	bpl.n	801bed2 <__sflush_r+0x46>
 801bec6:	6863      	ldr	r3, [r4, #4]
 801bec8:	1ac0      	subs	r0, r0, r3
 801beca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801becc:	b10b      	cbz	r3, 801bed2 <__sflush_r+0x46>
 801bece:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801bed0:	1ac0      	subs	r0, r0, r3
 801bed2:	2300      	movs	r3, #0
 801bed4:	4602      	mov	r2, r0
 801bed6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801bed8:	6a21      	ldr	r1, [r4, #32]
 801beda:	4628      	mov	r0, r5
 801bedc:	47b0      	blx	r6
 801bede:	1c43      	adds	r3, r0, #1
 801bee0:	89a3      	ldrh	r3, [r4, #12]
 801bee2:	d106      	bne.n	801bef2 <__sflush_r+0x66>
 801bee4:	6829      	ldr	r1, [r5, #0]
 801bee6:	291d      	cmp	r1, #29
 801bee8:	d82c      	bhi.n	801bf44 <__sflush_r+0xb8>
 801beea:	4a2a      	ldr	r2, [pc, #168]	; (801bf94 <__sflush_r+0x108>)
 801beec:	40ca      	lsrs	r2, r1
 801beee:	07d6      	lsls	r6, r2, #31
 801bef0:	d528      	bpl.n	801bf44 <__sflush_r+0xb8>
 801bef2:	2200      	movs	r2, #0
 801bef4:	6062      	str	r2, [r4, #4]
 801bef6:	04d9      	lsls	r1, r3, #19
 801bef8:	6922      	ldr	r2, [r4, #16]
 801befa:	6022      	str	r2, [r4, #0]
 801befc:	d504      	bpl.n	801bf08 <__sflush_r+0x7c>
 801befe:	1c42      	adds	r2, r0, #1
 801bf00:	d101      	bne.n	801bf06 <__sflush_r+0x7a>
 801bf02:	682b      	ldr	r3, [r5, #0]
 801bf04:	b903      	cbnz	r3, 801bf08 <__sflush_r+0x7c>
 801bf06:	6560      	str	r0, [r4, #84]	; 0x54
 801bf08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801bf0a:	602f      	str	r7, [r5, #0]
 801bf0c:	2900      	cmp	r1, #0
 801bf0e:	d0ca      	beq.n	801bea6 <__sflush_r+0x1a>
 801bf10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801bf14:	4299      	cmp	r1, r3
 801bf16:	d002      	beq.n	801bf1e <__sflush_r+0x92>
 801bf18:	4628      	mov	r0, r5
 801bf1a:	f7ff f99d 	bl	801b258 <_free_r>
 801bf1e:	2000      	movs	r0, #0
 801bf20:	6360      	str	r0, [r4, #52]	; 0x34
 801bf22:	e7c1      	b.n	801bea8 <__sflush_r+0x1c>
 801bf24:	6a21      	ldr	r1, [r4, #32]
 801bf26:	2301      	movs	r3, #1
 801bf28:	4628      	mov	r0, r5
 801bf2a:	47b0      	blx	r6
 801bf2c:	1c41      	adds	r1, r0, #1
 801bf2e:	d1c7      	bne.n	801bec0 <__sflush_r+0x34>
 801bf30:	682b      	ldr	r3, [r5, #0]
 801bf32:	2b00      	cmp	r3, #0
 801bf34:	d0c4      	beq.n	801bec0 <__sflush_r+0x34>
 801bf36:	2b1d      	cmp	r3, #29
 801bf38:	d001      	beq.n	801bf3e <__sflush_r+0xb2>
 801bf3a:	2b16      	cmp	r3, #22
 801bf3c:	d101      	bne.n	801bf42 <__sflush_r+0xb6>
 801bf3e:	602f      	str	r7, [r5, #0]
 801bf40:	e7b1      	b.n	801bea6 <__sflush_r+0x1a>
 801bf42:	89a3      	ldrh	r3, [r4, #12]
 801bf44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf48:	81a3      	strh	r3, [r4, #12]
 801bf4a:	e7ad      	b.n	801bea8 <__sflush_r+0x1c>
 801bf4c:	690f      	ldr	r7, [r1, #16]
 801bf4e:	2f00      	cmp	r7, #0
 801bf50:	d0a9      	beq.n	801bea6 <__sflush_r+0x1a>
 801bf52:	0793      	lsls	r3, r2, #30
 801bf54:	680e      	ldr	r6, [r1, #0]
 801bf56:	bf08      	it	eq
 801bf58:	694b      	ldreq	r3, [r1, #20]
 801bf5a:	600f      	str	r7, [r1, #0]
 801bf5c:	bf18      	it	ne
 801bf5e:	2300      	movne	r3, #0
 801bf60:	eba6 0807 	sub.w	r8, r6, r7
 801bf64:	608b      	str	r3, [r1, #8]
 801bf66:	f1b8 0f00 	cmp.w	r8, #0
 801bf6a:	dd9c      	ble.n	801bea6 <__sflush_r+0x1a>
 801bf6c:	6a21      	ldr	r1, [r4, #32]
 801bf6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801bf70:	4643      	mov	r3, r8
 801bf72:	463a      	mov	r2, r7
 801bf74:	4628      	mov	r0, r5
 801bf76:	47b0      	blx	r6
 801bf78:	2800      	cmp	r0, #0
 801bf7a:	dc06      	bgt.n	801bf8a <__sflush_r+0xfe>
 801bf7c:	89a3      	ldrh	r3, [r4, #12]
 801bf7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801bf82:	81a3      	strh	r3, [r4, #12]
 801bf84:	f04f 30ff 	mov.w	r0, #4294967295
 801bf88:	e78e      	b.n	801bea8 <__sflush_r+0x1c>
 801bf8a:	4407      	add	r7, r0
 801bf8c:	eba8 0800 	sub.w	r8, r8, r0
 801bf90:	e7e9      	b.n	801bf66 <__sflush_r+0xda>
 801bf92:	bf00      	nop
 801bf94:	20400001 	.word	0x20400001

0801bf98 <_fflush_r>:
 801bf98:	b538      	push	{r3, r4, r5, lr}
 801bf9a:	690b      	ldr	r3, [r1, #16]
 801bf9c:	4605      	mov	r5, r0
 801bf9e:	460c      	mov	r4, r1
 801bfa0:	b913      	cbnz	r3, 801bfa8 <_fflush_r+0x10>
 801bfa2:	2500      	movs	r5, #0
 801bfa4:	4628      	mov	r0, r5
 801bfa6:	bd38      	pop	{r3, r4, r5, pc}
 801bfa8:	b118      	cbz	r0, 801bfb2 <_fflush_r+0x1a>
 801bfaa:	6983      	ldr	r3, [r0, #24]
 801bfac:	b90b      	cbnz	r3, 801bfb2 <_fflush_r+0x1a>
 801bfae:	f000 f887 	bl	801c0c0 <__sinit>
 801bfb2:	4b14      	ldr	r3, [pc, #80]	; (801c004 <_fflush_r+0x6c>)
 801bfb4:	429c      	cmp	r4, r3
 801bfb6:	d11b      	bne.n	801bff0 <_fflush_r+0x58>
 801bfb8:	686c      	ldr	r4, [r5, #4]
 801bfba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801bfbe:	2b00      	cmp	r3, #0
 801bfc0:	d0ef      	beq.n	801bfa2 <_fflush_r+0xa>
 801bfc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801bfc4:	07d0      	lsls	r0, r2, #31
 801bfc6:	d404      	bmi.n	801bfd2 <_fflush_r+0x3a>
 801bfc8:	0599      	lsls	r1, r3, #22
 801bfca:	d402      	bmi.n	801bfd2 <_fflush_r+0x3a>
 801bfcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfce:	f7ff f8e2 	bl	801b196 <__retarget_lock_acquire_recursive>
 801bfd2:	4628      	mov	r0, r5
 801bfd4:	4621      	mov	r1, r4
 801bfd6:	f7ff ff59 	bl	801be8c <__sflush_r>
 801bfda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801bfdc:	07da      	lsls	r2, r3, #31
 801bfde:	4605      	mov	r5, r0
 801bfe0:	d4e0      	bmi.n	801bfa4 <_fflush_r+0xc>
 801bfe2:	89a3      	ldrh	r3, [r4, #12]
 801bfe4:	059b      	lsls	r3, r3, #22
 801bfe6:	d4dd      	bmi.n	801bfa4 <_fflush_r+0xc>
 801bfe8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801bfea:	f7ff f8d6 	bl	801b19a <__retarget_lock_release_recursive>
 801bfee:	e7d9      	b.n	801bfa4 <_fflush_r+0xc>
 801bff0:	4b05      	ldr	r3, [pc, #20]	; (801c008 <_fflush_r+0x70>)
 801bff2:	429c      	cmp	r4, r3
 801bff4:	d101      	bne.n	801bffa <_fflush_r+0x62>
 801bff6:	68ac      	ldr	r4, [r5, #8]
 801bff8:	e7df      	b.n	801bfba <_fflush_r+0x22>
 801bffa:	4b04      	ldr	r3, [pc, #16]	; (801c00c <_fflush_r+0x74>)
 801bffc:	429c      	cmp	r4, r3
 801bffe:	bf08      	it	eq
 801c000:	68ec      	ldreq	r4, [r5, #12]
 801c002:	e7da      	b.n	801bfba <_fflush_r+0x22>
 801c004:	0803efac 	.word	0x0803efac
 801c008:	0803efcc 	.word	0x0803efcc
 801c00c:	0803ef8c 	.word	0x0803ef8c

0801c010 <std>:
 801c010:	2300      	movs	r3, #0
 801c012:	b510      	push	{r4, lr}
 801c014:	4604      	mov	r4, r0
 801c016:	e9c0 3300 	strd	r3, r3, [r0]
 801c01a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c01e:	6083      	str	r3, [r0, #8]
 801c020:	8181      	strh	r1, [r0, #12]
 801c022:	6643      	str	r3, [r0, #100]	; 0x64
 801c024:	81c2      	strh	r2, [r0, #14]
 801c026:	6183      	str	r3, [r0, #24]
 801c028:	4619      	mov	r1, r3
 801c02a:	2208      	movs	r2, #8
 801c02c:	305c      	adds	r0, #92	; 0x5c
 801c02e:	f7ff f8fb 	bl	801b228 <memset>
 801c032:	4b05      	ldr	r3, [pc, #20]	; (801c048 <std+0x38>)
 801c034:	6263      	str	r3, [r4, #36]	; 0x24
 801c036:	4b05      	ldr	r3, [pc, #20]	; (801c04c <std+0x3c>)
 801c038:	62a3      	str	r3, [r4, #40]	; 0x28
 801c03a:	4b05      	ldr	r3, [pc, #20]	; (801c050 <std+0x40>)
 801c03c:	62e3      	str	r3, [r4, #44]	; 0x2c
 801c03e:	4b05      	ldr	r3, [pc, #20]	; (801c054 <std+0x44>)
 801c040:	6224      	str	r4, [r4, #32]
 801c042:	6323      	str	r3, [r4, #48]	; 0x30
 801c044:	bd10      	pop	{r4, pc}
 801c046:	bf00      	nop
 801c048:	0801c5e1 	.word	0x0801c5e1
 801c04c:	0801c603 	.word	0x0801c603
 801c050:	0801c63b 	.word	0x0801c63b
 801c054:	0801c65f 	.word	0x0801c65f

0801c058 <_cleanup_r>:
 801c058:	4901      	ldr	r1, [pc, #4]	; (801c060 <_cleanup_r+0x8>)
 801c05a:	f000 b8af 	b.w	801c1bc <_fwalk_reent>
 801c05e:	bf00      	nop
 801c060:	0801bf99 	.word	0x0801bf99

0801c064 <__sfmoreglue>:
 801c064:	b570      	push	{r4, r5, r6, lr}
 801c066:	1e4a      	subs	r2, r1, #1
 801c068:	2568      	movs	r5, #104	; 0x68
 801c06a:	4355      	muls	r5, r2
 801c06c:	460e      	mov	r6, r1
 801c06e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 801c072:	f7ff f941 	bl	801b2f8 <_malloc_r>
 801c076:	4604      	mov	r4, r0
 801c078:	b140      	cbz	r0, 801c08c <__sfmoreglue+0x28>
 801c07a:	2100      	movs	r1, #0
 801c07c:	e9c0 1600 	strd	r1, r6, [r0]
 801c080:	300c      	adds	r0, #12
 801c082:	60a0      	str	r0, [r4, #8]
 801c084:	f105 0268 	add.w	r2, r5, #104	; 0x68
 801c088:	f7ff f8ce 	bl	801b228 <memset>
 801c08c:	4620      	mov	r0, r4
 801c08e:	bd70      	pop	{r4, r5, r6, pc}

0801c090 <__sfp_lock_acquire>:
 801c090:	4801      	ldr	r0, [pc, #4]	; (801c098 <__sfp_lock_acquire+0x8>)
 801c092:	f7ff b880 	b.w	801b196 <__retarget_lock_acquire_recursive>
 801c096:	bf00      	nop
 801c098:	20007ac4 	.word	0x20007ac4

0801c09c <__sfp_lock_release>:
 801c09c:	4801      	ldr	r0, [pc, #4]	; (801c0a4 <__sfp_lock_release+0x8>)
 801c09e:	f7ff b87c 	b.w	801b19a <__retarget_lock_release_recursive>
 801c0a2:	bf00      	nop
 801c0a4:	20007ac4 	.word	0x20007ac4

0801c0a8 <__sinit_lock_acquire>:
 801c0a8:	4801      	ldr	r0, [pc, #4]	; (801c0b0 <__sinit_lock_acquire+0x8>)
 801c0aa:	f7ff b874 	b.w	801b196 <__retarget_lock_acquire_recursive>
 801c0ae:	bf00      	nop
 801c0b0:	20007ac3 	.word	0x20007ac3

0801c0b4 <__sinit_lock_release>:
 801c0b4:	4801      	ldr	r0, [pc, #4]	; (801c0bc <__sinit_lock_release+0x8>)
 801c0b6:	f7ff b870 	b.w	801b19a <__retarget_lock_release_recursive>
 801c0ba:	bf00      	nop
 801c0bc:	20007ac3 	.word	0x20007ac3

0801c0c0 <__sinit>:
 801c0c0:	b510      	push	{r4, lr}
 801c0c2:	4604      	mov	r4, r0
 801c0c4:	f7ff fff0 	bl	801c0a8 <__sinit_lock_acquire>
 801c0c8:	69a3      	ldr	r3, [r4, #24]
 801c0ca:	b11b      	cbz	r3, 801c0d4 <__sinit+0x14>
 801c0cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c0d0:	f7ff bff0 	b.w	801c0b4 <__sinit_lock_release>
 801c0d4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 801c0d8:	6523      	str	r3, [r4, #80]	; 0x50
 801c0da:	4b13      	ldr	r3, [pc, #76]	; (801c128 <__sinit+0x68>)
 801c0dc:	4a13      	ldr	r2, [pc, #76]	; (801c12c <__sinit+0x6c>)
 801c0de:	681b      	ldr	r3, [r3, #0]
 801c0e0:	62a2      	str	r2, [r4, #40]	; 0x28
 801c0e2:	42a3      	cmp	r3, r4
 801c0e4:	bf04      	itt	eq
 801c0e6:	2301      	moveq	r3, #1
 801c0e8:	61a3      	streq	r3, [r4, #24]
 801c0ea:	4620      	mov	r0, r4
 801c0ec:	f000 f820 	bl	801c130 <__sfp>
 801c0f0:	6060      	str	r0, [r4, #4]
 801c0f2:	4620      	mov	r0, r4
 801c0f4:	f000 f81c 	bl	801c130 <__sfp>
 801c0f8:	60a0      	str	r0, [r4, #8]
 801c0fa:	4620      	mov	r0, r4
 801c0fc:	f000 f818 	bl	801c130 <__sfp>
 801c100:	2200      	movs	r2, #0
 801c102:	60e0      	str	r0, [r4, #12]
 801c104:	2104      	movs	r1, #4
 801c106:	6860      	ldr	r0, [r4, #4]
 801c108:	f7ff ff82 	bl	801c010 <std>
 801c10c:	68a0      	ldr	r0, [r4, #8]
 801c10e:	2201      	movs	r2, #1
 801c110:	2109      	movs	r1, #9
 801c112:	f7ff ff7d 	bl	801c010 <std>
 801c116:	68e0      	ldr	r0, [r4, #12]
 801c118:	2202      	movs	r2, #2
 801c11a:	2112      	movs	r1, #18
 801c11c:	f7ff ff78 	bl	801c010 <std>
 801c120:	2301      	movs	r3, #1
 801c122:	61a3      	str	r3, [r4, #24]
 801c124:	e7d2      	b.n	801c0cc <__sinit+0xc>
 801c126:	bf00      	nop
 801c128:	0803ef54 	.word	0x0803ef54
 801c12c:	0801c059 	.word	0x0801c059

0801c130 <__sfp>:
 801c130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c132:	4607      	mov	r7, r0
 801c134:	f7ff ffac 	bl	801c090 <__sfp_lock_acquire>
 801c138:	4b1e      	ldr	r3, [pc, #120]	; (801c1b4 <__sfp+0x84>)
 801c13a:	681e      	ldr	r6, [r3, #0]
 801c13c:	69b3      	ldr	r3, [r6, #24]
 801c13e:	b913      	cbnz	r3, 801c146 <__sfp+0x16>
 801c140:	4630      	mov	r0, r6
 801c142:	f7ff ffbd 	bl	801c0c0 <__sinit>
 801c146:	3648      	adds	r6, #72	; 0x48
 801c148:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 801c14c:	3b01      	subs	r3, #1
 801c14e:	d503      	bpl.n	801c158 <__sfp+0x28>
 801c150:	6833      	ldr	r3, [r6, #0]
 801c152:	b30b      	cbz	r3, 801c198 <__sfp+0x68>
 801c154:	6836      	ldr	r6, [r6, #0]
 801c156:	e7f7      	b.n	801c148 <__sfp+0x18>
 801c158:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 801c15c:	b9d5      	cbnz	r5, 801c194 <__sfp+0x64>
 801c15e:	4b16      	ldr	r3, [pc, #88]	; (801c1b8 <__sfp+0x88>)
 801c160:	60e3      	str	r3, [r4, #12]
 801c162:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801c166:	6665      	str	r5, [r4, #100]	; 0x64
 801c168:	f7ff f814 	bl	801b194 <__retarget_lock_init_recursive>
 801c16c:	f7ff ff96 	bl	801c09c <__sfp_lock_release>
 801c170:	e9c4 5501 	strd	r5, r5, [r4, #4]
 801c174:	e9c4 5504 	strd	r5, r5, [r4, #16]
 801c178:	6025      	str	r5, [r4, #0]
 801c17a:	61a5      	str	r5, [r4, #24]
 801c17c:	2208      	movs	r2, #8
 801c17e:	4629      	mov	r1, r5
 801c180:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 801c184:	f7ff f850 	bl	801b228 <memset>
 801c188:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 801c18c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 801c190:	4620      	mov	r0, r4
 801c192:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c194:	3468      	adds	r4, #104	; 0x68
 801c196:	e7d9      	b.n	801c14c <__sfp+0x1c>
 801c198:	2104      	movs	r1, #4
 801c19a:	4638      	mov	r0, r7
 801c19c:	f7ff ff62 	bl	801c064 <__sfmoreglue>
 801c1a0:	4604      	mov	r4, r0
 801c1a2:	6030      	str	r0, [r6, #0]
 801c1a4:	2800      	cmp	r0, #0
 801c1a6:	d1d5      	bne.n	801c154 <__sfp+0x24>
 801c1a8:	f7ff ff78 	bl	801c09c <__sfp_lock_release>
 801c1ac:	230c      	movs	r3, #12
 801c1ae:	603b      	str	r3, [r7, #0]
 801c1b0:	e7ee      	b.n	801c190 <__sfp+0x60>
 801c1b2:	bf00      	nop
 801c1b4:	0803ef54 	.word	0x0803ef54
 801c1b8:	ffff0001 	.word	0xffff0001

0801c1bc <_fwalk_reent>:
 801c1bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c1c0:	4606      	mov	r6, r0
 801c1c2:	4688      	mov	r8, r1
 801c1c4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 801c1c8:	2700      	movs	r7, #0
 801c1ca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c1ce:	f1b9 0901 	subs.w	r9, r9, #1
 801c1d2:	d505      	bpl.n	801c1e0 <_fwalk_reent+0x24>
 801c1d4:	6824      	ldr	r4, [r4, #0]
 801c1d6:	2c00      	cmp	r4, #0
 801c1d8:	d1f7      	bne.n	801c1ca <_fwalk_reent+0xe>
 801c1da:	4638      	mov	r0, r7
 801c1dc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c1e0:	89ab      	ldrh	r3, [r5, #12]
 801c1e2:	2b01      	cmp	r3, #1
 801c1e4:	d907      	bls.n	801c1f6 <_fwalk_reent+0x3a>
 801c1e6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c1ea:	3301      	adds	r3, #1
 801c1ec:	d003      	beq.n	801c1f6 <_fwalk_reent+0x3a>
 801c1ee:	4629      	mov	r1, r5
 801c1f0:	4630      	mov	r0, r6
 801c1f2:	47c0      	blx	r8
 801c1f4:	4307      	orrs	r7, r0
 801c1f6:	3568      	adds	r5, #104	; 0x68
 801c1f8:	e7e9      	b.n	801c1ce <_fwalk_reent+0x12>

0801c1fa <__swhatbuf_r>:
 801c1fa:	b570      	push	{r4, r5, r6, lr}
 801c1fc:	460e      	mov	r6, r1
 801c1fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c202:	2900      	cmp	r1, #0
 801c204:	b096      	sub	sp, #88	; 0x58
 801c206:	4614      	mov	r4, r2
 801c208:	461d      	mov	r5, r3
 801c20a:	da07      	bge.n	801c21c <__swhatbuf_r+0x22>
 801c20c:	2300      	movs	r3, #0
 801c20e:	602b      	str	r3, [r5, #0]
 801c210:	89b3      	ldrh	r3, [r6, #12]
 801c212:	061a      	lsls	r2, r3, #24
 801c214:	d410      	bmi.n	801c238 <__swhatbuf_r+0x3e>
 801c216:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801c21a:	e00e      	b.n	801c23a <__swhatbuf_r+0x40>
 801c21c:	466a      	mov	r2, sp
 801c21e:	f000 fa45 	bl	801c6ac <_fstat_r>
 801c222:	2800      	cmp	r0, #0
 801c224:	dbf2      	blt.n	801c20c <__swhatbuf_r+0x12>
 801c226:	9a01      	ldr	r2, [sp, #4]
 801c228:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 801c22c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 801c230:	425a      	negs	r2, r3
 801c232:	415a      	adcs	r2, r3
 801c234:	602a      	str	r2, [r5, #0]
 801c236:	e7ee      	b.n	801c216 <__swhatbuf_r+0x1c>
 801c238:	2340      	movs	r3, #64	; 0x40
 801c23a:	2000      	movs	r0, #0
 801c23c:	6023      	str	r3, [r4, #0]
 801c23e:	b016      	add	sp, #88	; 0x58
 801c240:	bd70      	pop	{r4, r5, r6, pc}
	...

0801c244 <__smakebuf_r>:
 801c244:	898b      	ldrh	r3, [r1, #12]
 801c246:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801c248:	079d      	lsls	r5, r3, #30
 801c24a:	4606      	mov	r6, r0
 801c24c:	460c      	mov	r4, r1
 801c24e:	d507      	bpl.n	801c260 <__smakebuf_r+0x1c>
 801c250:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801c254:	6023      	str	r3, [r4, #0]
 801c256:	6123      	str	r3, [r4, #16]
 801c258:	2301      	movs	r3, #1
 801c25a:	6163      	str	r3, [r4, #20]
 801c25c:	b002      	add	sp, #8
 801c25e:	bd70      	pop	{r4, r5, r6, pc}
 801c260:	ab01      	add	r3, sp, #4
 801c262:	466a      	mov	r2, sp
 801c264:	f7ff ffc9 	bl	801c1fa <__swhatbuf_r>
 801c268:	9900      	ldr	r1, [sp, #0]
 801c26a:	4605      	mov	r5, r0
 801c26c:	4630      	mov	r0, r6
 801c26e:	f7ff f843 	bl	801b2f8 <_malloc_r>
 801c272:	b948      	cbnz	r0, 801c288 <__smakebuf_r+0x44>
 801c274:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c278:	059a      	lsls	r2, r3, #22
 801c27a:	d4ef      	bmi.n	801c25c <__smakebuf_r+0x18>
 801c27c:	f023 0303 	bic.w	r3, r3, #3
 801c280:	f043 0302 	orr.w	r3, r3, #2
 801c284:	81a3      	strh	r3, [r4, #12]
 801c286:	e7e3      	b.n	801c250 <__smakebuf_r+0xc>
 801c288:	4b0d      	ldr	r3, [pc, #52]	; (801c2c0 <__smakebuf_r+0x7c>)
 801c28a:	62b3      	str	r3, [r6, #40]	; 0x28
 801c28c:	89a3      	ldrh	r3, [r4, #12]
 801c28e:	6020      	str	r0, [r4, #0]
 801c290:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c294:	81a3      	strh	r3, [r4, #12]
 801c296:	9b00      	ldr	r3, [sp, #0]
 801c298:	6163      	str	r3, [r4, #20]
 801c29a:	9b01      	ldr	r3, [sp, #4]
 801c29c:	6120      	str	r0, [r4, #16]
 801c29e:	b15b      	cbz	r3, 801c2b8 <__smakebuf_r+0x74>
 801c2a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c2a4:	4630      	mov	r0, r6
 801c2a6:	f000 fa13 	bl	801c6d0 <_isatty_r>
 801c2aa:	b128      	cbz	r0, 801c2b8 <__smakebuf_r+0x74>
 801c2ac:	89a3      	ldrh	r3, [r4, #12]
 801c2ae:	f023 0303 	bic.w	r3, r3, #3
 801c2b2:	f043 0301 	orr.w	r3, r3, #1
 801c2b6:	81a3      	strh	r3, [r4, #12]
 801c2b8:	89a0      	ldrh	r0, [r4, #12]
 801c2ba:	4305      	orrs	r5, r0
 801c2bc:	81a5      	strh	r5, [r4, #12]
 801c2be:	e7cd      	b.n	801c25c <__smakebuf_r+0x18>
 801c2c0:	0801c059 	.word	0x0801c059

0801c2c4 <__malloc_lock>:
 801c2c4:	4801      	ldr	r0, [pc, #4]	; (801c2cc <__malloc_lock+0x8>)
 801c2c6:	f7fe bf66 	b.w	801b196 <__retarget_lock_acquire_recursive>
 801c2ca:	bf00      	nop
 801c2cc:	20007ac0 	.word	0x20007ac0

0801c2d0 <__malloc_unlock>:
 801c2d0:	4801      	ldr	r0, [pc, #4]	; (801c2d8 <__malloc_unlock+0x8>)
 801c2d2:	f7fe bf62 	b.w	801b19a <__retarget_lock_release_recursive>
 801c2d6:	bf00      	nop
 801c2d8:	20007ac0 	.word	0x20007ac0

0801c2dc <_realloc_r>:
 801c2dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c2de:	4607      	mov	r7, r0
 801c2e0:	4614      	mov	r4, r2
 801c2e2:	460e      	mov	r6, r1
 801c2e4:	b921      	cbnz	r1, 801c2f0 <_realloc_r+0x14>
 801c2e6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 801c2ea:	4611      	mov	r1, r2
 801c2ec:	f7ff b804 	b.w	801b2f8 <_malloc_r>
 801c2f0:	b922      	cbnz	r2, 801c2fc <_realloc_r+0x20>
 801c2f2:	f7fe ffb1 	bl	801b258 <_free_r>
 801c2f6:	4625      	mov	r5, r4
 801c2f8:	4628      	mov	r0, r5
 801c2fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c2fc:	f000 fa0a 	bl	801c714 <_malloc_usable_size_r>
 801c300:	42a0      	cmp	r0, r4
 801c302:	d20f      	bcs.n	801c324 <_realloc_r+0x48>
 801c304:	4621      	mov	r1, r4
 801c306:	4638      	mov	r0, r7
 801c308:	f7fe fff6 	bl	801b2f8 <_malloc_r>
 801c30c:	4605      	mov	r5, r0
 801c30e:	2800      	cmp	r0, #0
 801c310:	d0f2      	beq.n	801c2f8 <_realloc_r+0x1c>
 801c312:	4631      	mov	r1, r6
 801c314:	4622      	mov	r2, r4
 801c316:	f7fe ff5f 	bl	801b1d8 <memcpy>
 801c31a:	4631      	mov	r1, r6
 801c31c:	4638      	mov	r0, r7
 801c31e:	f7fe ff9b 	bl	801b258 <_free_r>
 801c322:	e7e9      	b.n	801c2f8 <_realloc_r+0x1c>
 801c324:	4635      	mov	r5, r6
 801c326:	e7e7      	b.n	801c2f8 <_realloc_r+0x1c>

0801c328 <__ssputs_r>:
 801c328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c32c:	688e      	ldr	r6, [r1, #8]
 801c32e:	429e      	cmp	r6, r3
 801c330:	4682      	mov	sl, r0
 801c332:	460c      	mov	r4, r1
 801c334:	4690      	mov	r8, r2
 801c336:	461f      	mov	r7, r3
 801c338:	d838      	bhi.n	801c3ac <__ssputs_r+0x84>
 801c33a:	898a      	ldrh	r2, [r1, #12]
 801c33c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801c340:	d032      	beq.n	801c3a8 <__ssputs_r+0x80>
 801c342:	6825      	ldr	r5, [r4, #0]
 801c344:	6909      	ldr	r1, [r1, #16]
 801c346:	eba5 0901 	sub.w	r9, r5, r1
 801c34a:	6965      	ldr	r5, [r4, #20]
 801c34c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801c350:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801c354:	3301      	adds	r3, #1
 801c356:	444b      	add	r3, r9
 801c358:	106d      	asrs	r5, r5, #1
 801c35a:	429d      	cmp	r5, r3
 801c35c:	bf38      	it	cc
 801c35e:	461d      	movcc	r5, r3
 801c360:	0553      	lsls	r3, r2, #21
 801c362:	d531      	bpl.n	801c3c8 <__ssputs_r+0xa0>
 801c364:	4629      	mov	r1, r5
 801c366:	f7fe ffc7 	bl	801b2f8 <_malloc_r>
 801c36a:	4606      	mov	r6, r0
 801c36c:	b950      	cbnz	r0, 801c384 <__ssputs_r+0x5c>
 801c36e:	230c      	movs	r3, #12
 801c370:	f8ca 3000 	str.w	r3, [sl]
 801c374:	89a3      	ldrh	r3, [r4, #12]
 801c376:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801c37a:	81a3      	strh	r3, [r4, #12]
 801c37c:	f04f 30ff 	mov.w	r0, #4294967295
 801c380:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c384:	6921      	ldr	r1, [r4, #16]
 801c386:	464a      	mov	r2, r9
 801c388:	f7fe ff26 	bl	801b1d8 <memcpy>
 801c38c:	89a3      	ldrh	r3, [r4, #12]
 801c38e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801c392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801c396:	81a3      	strh	r3, [r4, #12]
 801c398:	6126      	str	r6, [r4, #16]
 801c39a:	6165      	str	r5, [r4, #20]
 801c39c:	444e      	add	r6, r9
 801c39e:	eba5 0509 	sub.w	r5, r5, r9
 801c3a2:	6026      	str	r6, [r4, #0]
 801c3a4:	60a5      	str	r5, [r4, #8]
 801c3a6:	463e      	mov	r6, r7
 801c3a8:	42be      	cmp	r6, r7
 801c3aa:	d900      	bls.n	801c3ae <__ssputs_r+0x86>
 801c3ac:	463e      	mov	r6, r7
 801c3ae:	4632      	mov	r2, r6
 801c3b0:	6820      	ldr	r0, [r4, #0]
 801c3b2:	4641      	mov	r1, r8
 801c3b4:	f7fe ff1e 	bl	801b1f4 <memmove>
 801c3b8:	68a3      	ldr	r3, [r4, #8]
 801c3ba:	6822      	ldr	r2, [r4, #0]
 801c3bc:	1b9b      	subs	r3, r3, r6
 801c3be:	4432      	add	r2, r6
 801c3c0:	60a3      	str	r3, [r4, #8]
 801c3c2:	6022      	str	r2, [r4, #0]
 801c3c4:	2000      	movs	r0, #0
 801c3c6:	e7db      	b.n	801c380 <__ssputs_r+0x58>
 801c3c8:	462a      	mov	r2, r5
 801c3ca:	f7ff ff87 	bl	801c2dc <_realloc_r>
 801c3ce:	4606      	mov	r6, r0
 801c3d0:	2800      	cmp	r0, #0
 801c3d2:	d1e1      	bne.n	801c398 <__ssputs_r+0x70>
 801c3d4:	6921      	ldr	r1, [r4, #16]
 801c3d6:	4650      	mov	r0, sl
 801c3d8:	f7fe ff3e 	bl	801b258 <_free_r>
 801c3dc:	e7c7      	b.n	801c36e <__ssputs_r+0x46>
	...

0801c3e0 <_svfiprintf_r>:
 801c3e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c3e4:	4698      	mov	r8, r3
 801c3e6:	898b      	ldrh	r3, [r1, #12]
 801c3e8:	061b      	lsls	r3, r3, #24
 801c3ea:	b09d      	sub	sp, #116	; 0x74
 801c3ec:	4607      	mov	r7, r0
 801c3ee:	460d      	mov	r5, r1
 801c3f0:	4614      	mov	r4, r2
 801c3f2:	d50e      	bpl.n	801c412 <_svfiprintf_r+0x32>
 801c3f4:	690b      	ldr	r3, [r1, #16]
 801c3f6:	b963      	cbnz	r3, 801c412 <_svfiprintf_r+0x32>
 801c3f8:	2140      	movs	r1, #64	; 0x40
 801c3fa:	f7fe ff7d 	bl	801b2f8 <_malloc_r>
 801c3fe:	6028      	str	r0, [r5, #0]
 801c400:	6128      	str	r0, [r5, #16]
 801c402:	b920      	cbnz	r0, 801c40e <_svfiprintf_r+0x2e>
 801c404:	230c      	movs	r3, #12
 801c406:	603b      	str	r3, [r7, #0]
 801c408:	f04f 30ff 	mov.w	r0, #4294967295
 801c40c:	e0d1      	b.n	801c5b2 <_svfiprintf_r+0x1d2>
 801c40e:	2340      	movs	r3, #64	; 0x40
 801c410:	616b      	str	r3, [r5, #20]
 801c412:	2300      	movs	r3, #0
 801c414:	9309      	str	r3, [sp, #36]	; 0x24
 801c416:	2320      	movs	r3, #32
 801c418:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801c41c:	f8cd 800c 	str.w	r8, [sp, #12]
 801c420:	2330      	movs	r3, #48	; 0x30
 801c422:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 801c5cc <_svfiprintf_r+0x1ec>
 801c426:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801c42a:	f04f 0901 	mov.w	r9, #1
 801c42e:	4623      	mov	r3, r4
 801c430:	469a      	mov	sl, r3
 801c432:	f813 2b01 	ldrb.w	r2, [r3], #1
 801c436:	b10a      	cbz	r2, 801c43c <_svfiprintf_r+0x5c>
 801c438:	2a25      	cmp	r2, #37	; 0x25
 801c43a:	d1f9      	bne.n	801c430 <_svfiprintf_r+0x50>
 801c43c:	ebba 0b04 	subs.w	fp, sl, r4
 801c440:	d00b      	beq.n	801c45a <_svfiprintf_r+0x7a>
 801c442:	465b      	mov	r3, fp
 801c444:	4622      	mov	r2, r4
 801c446:	4629      	mov	r1, r5
 801c448:	4638      	mov	r0, r7
 801c44a:	f7ff ff6d 	bl	801c328 <__ssputs_r>
 801c44e:	3001      	adds	r0, #1
 801c450:	f000 80aa 	beq.w	801c5a8 <_svfiprintf_r+0x1c8>
 801c454:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801c456:	445a      	add	r2, fp
 801c458:	9209      	str	r2, [sp, #36]	; 0x24
 801c45a:	f89a 3000 	ldrb.w	r3, [sl]
 801c45e:	2b00      	cmp	r3, #0
 801c460:	f000 80a2 	beq.w	801c5a8 <_svfiprintf_r+0x1c8>
 801c464:	2300      	movs	r3, #0
 801c466:	f04f 32ff 	mov.w	r2, #4294967295
 801c46a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801c46e:	f10a 0a01 	add.w	sl, sl, #1
 801c472:	9304      	str	r3, [sp, #16]
 801c474:	9307      	str	r3, [sp, #28]
 801c476:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801c47a:	931a      	str	r3, [sp, #104]	; 0x68
 801c47c:	4654      	mov	r4, sl
 801c47e:	2205      	movs	r2, #5
 801c480:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c484:	4851      	ldr	r0, [pc, #324]	; (801c5cc <_svfiprintf_r+0x1ec>)
 801c486:	f7e3 fecb 	bl	8000220 <memchr>
 801c48a:	9a04      	ldr	r2, [sp, #16]
 801c48c:	b9d8      	cbnz	r0, 801c4c6 <_svfiprintf_r+0xe6>
 801c48e:	06d0      	lsls	r0, r2, #27
 801c490:	bf44      	itt	mi
 801c492:	2320      	movmi	r3, #32
 801c494:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c498:	0711      	lsls	r1, r2, #28
 801c49a:	bf44      	itt	mi
 801c49c:	232b      	movmi	r3, #43	; 0x2b
 801c49e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801c4a2:	f89a 3000 	ldrb.w	r3, [sl]
 801c4a6:	2b2a      	cmp	r3, #42	; 0x2a
 801c4a8:	d015      	beq.n	801c4d6 <_svfiprintf_r+0xf6>
 801c4aa:	9a07      	ldr	r2, [sp, #28]
 801c4ac:	4654      	mov	r4, sl
 801c4ae:	2000      	movs	r0, #0
 801c4b0:	f04f 0c0a 	mov.w	ip, #10
 801c4b4:	4621      	mov	r1, r4
 801c4b6:	f811 3b01 	ldrb.w	r3, [r1], #1
 801c4ba:	3b30      	subs	r3, #48	; 0x30
 801c4bc:	2b09      	cmp	r3, #9
 801c4be:	d94e      	bls.n	801c55e <_svfiprintf_r+0x17e>
 801c4c0:	b1b0      	cbz	r0, 801c4f0 <_svfiprintf_r+0x110>
 801c4c2:	9207      	str	r2, [sp, #28]
 801c4c4:	e014      	b.n	801c4f0 <_svfiprintf_r+0x110>
 801c4c6:	eba0 0308 	sub.w	r3, r0, r8
 801c4ca:	fa09 f303 	lsl.w	r3, r9, r3
 801c4ce:	4313      	orrs	r3, r2
 801c4d0:	9304      	str	r3, [sp, #16]
 801c4d2:	46a2      	mov	sl, r4
 801c4d4:	e7d2      	b.n	801c47c <_svfiprintf_r+0x9c>
 801c4d6:	9b03      	ldr	r3, [sp, #12]
 801c4d8:	1d19      	adds	r1, r3, #4
 801c4da:	681b      	ldr	r3, [r3, #0]
 801c4dc:	9103      	str	r1, [sp, #12]
 801c4de:	2b00      	cmp	r3, #0
 801c4e0:	bfbb      	ittet	lt
 801c4e2:	425b      	neglt	r3, r3
 801c4e4:	f042 0202 	orrlt.w	r2, r2, #2
 801c4e8:	9307      	strge	r3, [sp, #28]
 801c4ea:	9307      	strlt	r3, [sp, #28]
 801c4ec:	bfb8      	it	lt
 801c4ee:	9204      	strlt	r2, [sp, #16]
 801c4f0:	7823      	ldrb	r3, [r4, #0]
 801c4f2:	2b2e      	cmp	r3, #46	; 0x2e
 801c4f4:	d10c      	bne.n	801c510 <_svfiprintf_r+0x130>
 801c4f6:	7863      	ldrb	r3, [r4, #1]
 801c4f8:	2b2a      	cmp	r3, #42	; 0x2a
 801c4fa:	d135      	bne.n	801c568 <_svfiprintf_r+0x188>
 801c4fc:	9b03      	ldr	r3, [sp, #12]
 801c4fe:	1d1a      	adds	r2, r3, #4
 801c500:	681b      	ldr	r3, [r3, #0]
 801c502:	9203      	str	r2, [sp, #12]
 801c504:	2b00      	cmp	r3, #0
 801c506:	bfb8      	it	lt
 801c508:	f04f 33ff 	movlt.w	r3, #4294967295
 801c50c:	3402      	adds	r4, #2
 801c50e:	9305      	str	r3, [sp, #20]
 801c510:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 801c5dc <_svfiprintf_r+0x1fc>
 801c514:	7821      	ldrb	r1, [r4, #0]
 801c516:	2203      	movs	r2, #3
 801c518:	4650      	mov	r0, sl
 801c51a:	f7e3 fe81 	bl	8000220 <memchr>
 801c51e:	b140      	cbz	r0, 801c532 <_svfiprintf_r+0x152>
 801c520:	2340      	movs	r3, #64	; 0x40
 801c522:	eba0 000a 	sub.w	r0, r0, sl
 801c526:	fa03 f000 	lsl.w	r0, r3, r0
 801c52a:	9b04      	ldr	r3, [sp, #16]
 801c52c:	4303      	orrs	r3, r0
 801c52e:	3401      	adds	r4, #1
 801c530:	9304      	str	r3, [sp, #16]
 801c532:	f814 1b01 	ldrb.w	r1, [r4], #1
 801c536:	4826      	ldr	r0, [pc, #152]	; (801c5d0 <_svfiprintf_r+0x1f0>)
 801c538:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801c53c:	2206      	movs	r2, #6
 801c53e:	f7e3 fe6f 	bl	8000220 <memchr>
 801c542:	2800      	cmp	r0, #0
 801c544:	d038      	beq.n	801c5b8 <_svfiprintf_r+0x1d8>
 801c546:	4b23      	ldr	r3, [pc, #140]	; (801c5d4 <_svfiprintf_r+0x1f4>)
 801c548:	bb1b      	cbnz	r3, 801c592 <_svfiprintf_r+0x1b2>
 801c54a:	9b03      	ldr	r3, [sp, #12]
 801c54c:	3307      	adds	r3, #7
 801c54e:	f023 0307 	bic.w	r3, r3, #7
 801c552:	3308      	adds	r3, #8
 801c554:	9303      	str	r3, [sp, #12]
 801c556:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801c558:	4433      	add	r3, r6
 801c55a:	9309      	str	r3, [sp, #36]	; 0x24
 801c55c:	e767      	b.n	801c42e <_svfiprintf_r+0x4e>
 801c55e:	fb0c 3202 	mla	r2, ip, r2, r3
 801c562:	460c      	mov	r4, r1
 801c564:	2001      	movs	r0, #1
 801c566:	e7a5      	b.n	801c4b4 <_svfiprintf_r+0xd4>
 801c568:	2300      	movs	r3, #0
 801c56a:	3401      	adds	r4, #1
 801c56c:	9305      	str	r3, [sp, #20]
 801c56e:	4619      	mov	r1, r3
 801c570:	f04f 0c0a 	mov.w	ip, #10
 801c574:	4620      	mov	r0, r4
 801c576:	f810 2b01 	ldrb.w	r2, [r0], #1
 801c57a:	3a30      	subs	r2, #48	; 0x30
 801c57c:	2a09      	cmp	r2, #9
 801c57e:	d903      	bls.n	801c588 <_svfiprintf_r+0x1a8>
 801c580:	2b00      	cmp	r3, #0
 801c582:	d0c5      	beq.n	801c510 <_svfiprintf_r+0x130>
 801c584:	9105      	str	r1, [sp, #20]
 801c586:	e7c3      	b.n	801c510 <_svfiprintf_r+0x130>
 801c588:	fb0c 2101 	mla	r1, ip, r1, r2
 801c58c:	4604      	mov	r4, r0
 801c58e:	2301      	movs	r3, #1
 801c590:	e7f0      	b.n	801c574 <_svfiprintf_r+0x194>
 801c592:	ab03      	add	r3, sp, #12
 801c594:	9300      	str	r3, [sp, #0]
 801c596:	462a      	mov	r2, r5
 801c598:	4b0f      	ldr	r3, [pc, #60]	; (801c5d8 <_svfiprintf_r+0x1f8>)
 801c59a:	a904      	add	r1, sp, #16
 801c59c:	4638      	mov	r0, r7
 801c59e:	f3af 8000 	nop.w
 801c5a2:	1c42      	adds	r2, r0, #1
 801c5a4:	4606      	mov	r6, r0
 801c5a6:	d1d6      	bne.n	801c556 <_svfiprintf_r+0x176>
 801c5a8:	89ab      	ldrh	r3, [r5, #12]
 801c5aa:	065b      	lsls	r3, r3, #25
 801c5ac:	f53f af2c 	bmi.w	801c408 <_svfiprintf_r+0x28>
 801c5b0:	9809      	ldr	r0, [sp, #36]	; 0x24
 801c5b2:	b01d      	add	sp, #116	; 0x74
 801c5b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c5b8:	ab03      	add	r3, sp, #12
 801c5ba:	9300      	str	r3, [sp, #0]
 801c5bc:	462a      	mov	r2, r5
 801c5be:	4b06      	ldr	r3, [pc, #24]	; (801c5d8 <_svfiprintf_r+0x1f8>)
 801c5c0:	a904      	add	r1, sp, #16
 801c5c2:	4638      	mov	r0, r7
 801c5c4:	f7ff f8ba 	bl	801b73c <_printf_i>
 801c5c8:	e7eb      	b.n	801c5a2 <_svfiprintf_r+0x1c2>
 801c5ca:	bf00      	nop
 801c5cc:	0803ef58 	.word	0x0803ef58
 801c5d0:	0803ef62 	.word	0x0803ef62
 801c5d4:	00000000 	.word	0x00000000
 801c5d8:	0801c329 	.word	0x0801c329
 801c5dc:	0803ef5e 	.word	0x0803ef5e

0801c5e0 <__sread>:
 801c5e0:	b510      	push	{r4, lr}
 801c5e2:	460c      	mov	r4, r1
 801c5e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c5e8:	f000 f89c 	bl	801c724 <_read_r>
 801c5ec:	2800      	cmp	r0, #0
 801c5ee:	bfab      	itete	ge
 801c5f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801c5f2:	89a3      	ldrhlt	r3, [r4, #12]
 801c5f4:	181b      	addge	r3, r3, r0
 801c5f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801c5fa:	bfac      	ite	ge
 801c5fc:	6563      	strge	r3, [r4, #84]	; 0x54
 801c5fe:	81a3      	strhlt	r3, [r4, #12]
 801c600:	bd10      	pop	{r4, pc}

0801c602 <__swrite>:
 801c602:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c606:	461f      	mov	r7, r3
 801c608:	898b      	ldrh	r3, [r1, #12]
 801c60a:	05db      	lsls	r3, r3, #23
 801c60c:	4605      	mov	r5, r0
 801c60e:	460c      	mov	r4, r1
 801c610:	4616      	mov	r6, r2
 801c612:	d505      	bpl.n	801c620 <__swrite+0x1e>
 801c614:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c618:	2302      	movs	r3, #2
 801c61a:	2200      	movs	r2, #0
 801c61c:	f000 f868 	bl	801c6f0 <_lseek_r>
 801c620:	89a3      	ldrh	r3, [r4, #12]
 801c622:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c626:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801c62a:	81a3      	strh	r3, [r4, #12]
 801c62c:	4632      	mov	r2, r6
 801c62e:	463b      	mov	r3, r7
 801c630:	4628      	mov	r0, r5
 801c632:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c636:	f000 b817 	b.w	801c668 <_write_r>

0801c63a <__sseek>:
 801c63a:	b510      	push	{r4, lr}
 801c63c:	460c      	mov	r4, r1
 801c63e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c642:	f000 f855 	bl	801c6f0 <_lseek_r>
 801c646:	1c43      	adds	r3, r0, #1
 801c648:	89a3      	ldrh	r3, [r4, #12]
 801c64a:	bf15      	itete	ne
 801c64c:	6560      	strne	r0, [r4, #84]	; 0x54
 801c64e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801c652:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801c656:	81a3      	strheq	r3, [r4, #12]
 801c658:	bf18      	it	ne
 801c65a:	81a3      	strhne	r3, [r4, #12]
 801c65c:	bd10      	pop	{r4, pc}

0801c65e <__sclose>:
 801c65e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c662:	f000 b813 	b.w	801c68c <_close_r>
	...

0801c668 <_write_r>:
 801c668:	b538      	push	{r3, r4, r5, lr}
 801c66a:	4d07      	ldr	r5, [pc, #28]	; (801c688 <_write_r+0x20>)
 801c66c:	4604      	mov	r4, r0
 801c66e:	4608      	mov	r0, r1
 801c670:	4611      	mov	r1, r2
 801c672:	2200      	movs	r2, #0
 801c674:	602a      	str	r2, [r5, #0]
 801c676:	461a      	mov	r2, r3
 801c678:	f7ea f933 	bl	80068e2 <_write>
 801c67c:	1c43      	adds	r3, r0, #1
 801c67e:	d102      	bne.n	801c686 <_write_r+0x1e>
 801c680:	682b      	ldr	r3, [r5, #0]
 801c682:	b103      	cbz	r3, 801c686 <_write_r+0x1e>
 801c684:	6023      	str	r3, [r4, #0]
 801c686:	bd38      	pop	{r3, r4, r5, pc}
 801c688:	20007acc 	.word	0x20007acc

0801c68c <_close_r>:
 801c68c:	b538      	push	{r3, r4, r5, lr}
 801c68e:	4d06      	ldr	r5, [pc, #24]	; (801c6a8 <_close_r+0x1c>)
 801c690:	2300      	movs	r3, #0
 801c692:	4604      	mov	r4, r0
 801c694:	4608      	mov	r0, r1
 801c696:	602b      	str	r3, [r5, #0]
 801c698:	f7ea f93f 	bl	800691a <_close>
 801c69c:	1c43      	adds	r3, r0, #1
 801c69e:	d102      	bne.n	801c6a6 <_close_r+0x1a>
 801c6a0:	682b      	ldr	r3, [r5, #0]
 801c6a2:	b103      	cbz	r3, 801c6a6 <_close_r+0x1a>
 801c6a4:	6023      	str	r3, [r4, #0]
 801c6a6:	bd38      	pop	{r3, r4, r5, pc}
 801c6a8:	20007acc 	.word	0x20007acc

0801c6ac <_fstat_r>:
 801c6ac:	b538      	push	{r3, r4, r5, lr}
 801c6ae:	4d07      	ldr	r5, [pc, #28]	; (801c6cc <_fstat_r+0x20>)
 801c6b0:	2300      	movs	r3, #0
 801c6b2:	4604      	mov	r4, r0
 801c6b4:	4608      	mov	r0, r1
 801c6b6:	4611      	mov	r1, r2
 801c6b8:	602b      	str	r3, [r5, #0]
 801c6ba:	f7ea f93a 	bl	8006932 <_fstat>
 801c6be:	1c43      	adds	r3, r0, #1
 801c6c0:	d102      	bne.n	801c6c8 <_fstat_r+0x1c>
 801c6c2:	682b      	ldr	r3, [r5, #0]
 801c6c4:	b103      	cbz	r3, 801c6c8 <_fstat_r+0x1c>
 801c6c6:	6023      	str	r3, [r4, #0]
 801c6c8:	bd38      	pop	{r3, r4, r5, pc}
 801c6ca:	bf00      	nop
 801c6cc:	20007acc 	.word	0x20007acc

0801c6d0 <_isatty_r>:
 801c6d0:	b538      	push	{r3, r4, r5, lr}
 801c6d2:	4d06      	ldr	r5, [pc, #24]	; (801c6ec <_isatty_r+0x1c>)
 801c6d4:	2300      	movs	r3, #0
 801c6d6:	4604      	mov	r4, r0
 801c6d8:	4608      	mov	r0, r1
 801c6da:	602b      	str	r3, [r5, #0]
 801c6dc:	f7ea f939 	bl	8006952 <_isatty>
 801c6e0:	1c43      	adds	r3, r0, #1
 801c6e2:	d102      	bne.n	801c6ea <_isatty_r+0x1a>
 801c6e4:	682b      	ldr	r3, [r5, #0]
 801c6e6:	b103      	cbz	r3, 801c6ea <_isatty_r+0x1a>
 801c6e8:	6023      	str	r3, [r4, #0]
 801c6ea:	bd38      	pop	{r3, r4, r5, pc}
 801c6ec:	20007acc 	.word	0x20007acc

0801c6f0 <_lseek_r>:
 801c6f0:	b538      	push	{r3, r4, r5, lr}
 801c6f2:	4d07      	ldr	r5, [pc, #28]	; (801c710 <_lseek_r+0x20>)
 801c6f4:	4604      	mov	r4, r0
 801c6f6:	4608      	mov	r0, r1
 801c6f8:	4611      	mov	r1, r2
 801c6fa:	2200      	movs	r2, #0
 801c6fc:	602a      	str	r2, [r5, #0]
 801c6fe:	461a      	mov	r2, r3
 801c700:	f7ea f932 	bl	8006968 <_lseek>
 801c704:	1c43      	adds	r3, r0, #1
 801c706:	d102      	bne.n	801c70e <_lseek_r+0x1e>
 801c708:	682b      	ldr	r3, [r5, #0]
 801c70a:	b103      	cbz	r3, 801c70e <_lseek_r+0x1e>
 801c70c:	6023      	str	r3, [r4, #0]
 801c70e:	bd38      	pop	{r3, r4, r5, pc}
 801c710:	20007acc 	.word	0x20007acc

0801c714 <_malloc_usable_size_r>:
 801c714:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801c718:	1f18      	subs	r0, r3, #4
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	bfbc      	itt	lt
 801c71e:	580b      	ldrlt	r3, [r1, r0]
 801c720:	18c0      	addlt	r0, r0, r3
 801c722:	4770      	bx	lr

0801c724 <_read_r>:
 801c724:	b538      	push	{r3, r4, r5, lr}
 801c726:	4d07      	ldr	r5, [pc, #28]	; (801c744 <_read_r+0x20>)
 801c728:	4604      	mov	r4, r0
 801c72a:	4608      	mov	r0, r1
 801c72c:	4611      	mov	r1, r2
 801c72e:	2200      	movs	r2, #0
 801c730:	602a      	str	r2, [r5, #0]
 801c732:	461a      	mov	r2, r3
 801c734:	f7ea f8b8 	bl	80068a8 <_read>
 801c738:	1c43      	adds	r3, r0, #1
 801c73a:	d102      	bne.n	801c742 <_read_r+0x1e>
 801c73c:	682b      	ldr	r3, [r5, #0]
 801c73e:	b103      	cbz	r3, 801c742 <_read_r+0x1e>
 801c740:	6023      	str	r3, [r4, #0]
 801c742:	bd38      	pop	{r3, r4, r5, pc}
 801c744:	20007acc 	.word	0x20007acc

0801c748 <_init>:
 801c748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c74a:	bf00      	nop
 801c74c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c74e:	bc08      	pop	{r3}
 801c750:	469e      	mov	lr, r3
 801c752:	4770      	bx	lr

0801c754 <_fini>:
 801c754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c756:	bf00      	nop
 801c758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801c75a:	bc08      	pop	{r3}
 801c75c:	469e      	mov	lr, r3
 801c75e:	4770      	bx	lr
