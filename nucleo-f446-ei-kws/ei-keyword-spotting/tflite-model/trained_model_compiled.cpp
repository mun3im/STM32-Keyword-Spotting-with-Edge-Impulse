/* Generated by Edge Impulse
*
* Permission is hereby granted, free of charge, to any person obtaining a copy
* of this software and associated documentation files (the "Software"), to deal
* in the Software without restriction, including without limitation the rights
* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the Software is
* furnished to do so, subject to the following conditions:
*
* The above copyright notice and this permission notice shall be included in
* all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
* SOFTWARE.
*/
// Generated on: 02.05.2021 13:00:28

#include <stdio.h>
#include <stdlib.h>
#include <vector>
#include "edge-impulse-sdk/tensorflow/lite/c/builtin_op_data.h"
#include "edge-impulse-sdk/tensorflow/lite/c/common.h"
#include "edge-impulse-sdk/tensorflow/lite/micro/kernels/micro_ops.h"

#if EI_CLASSIFIER_PRINT_STATE
#if defined(__cplusplus) && EI_C_LINKAGE == 1
extern "C" {
    extern void ei_printf(const char *format, ...);
}
#else
extern void ei_printf(const char *format, ...);
#endif
#endif

#if defined __GNUC__
#define ALIGN(X) __attribute__((aligned(X)))
#elif defined _MSC_VER
#define ALIGN(X) __declspec(align(X))
#elif defined __TASKING__
#define ALIGN(X) __align(X)
#endif

namespace {

constexpr int kTensorArenaSize = 2288;

#if defined(EI_CLASSIFIER_ALLOCATION_STATIC)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX)
#pragma Bss(".tensor_arena")
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16);
#pragma Bss()
#elif defined(EI_CLASSIFIER_ALLOCATION_STATIC_HIMAX_GNU)
uint8_t tensor_arena[kTensorArenaSize] ALIGN(16) __attribute__((section(".tensor_arena")));
#else
#define EI_CLASSIFIER_ALLOCATION_HEAP 1
uint8_t* tensor_arena = NULL;
#endif

static uint8_t* tensor_boundary;
static uint8_t* current_location;

template <int SZ, class T> struct TfArray {
  int sz; T elem[SZ];
};
enum used_operators_e {
  OP_RESHAPE, OP_CONV_2D, OP_ADD, OP_MAX_POOL_2D, OP_FULLY_CONNECTED, OP_SOFTMAX,  OP_LAST
};
struct TensorInfo_t { // subset of TfLiteTensor used for initialization from constant memory
  TfLiteAllocationType allocation_type;
  TfLiteType type;
  void* data;
  TfLiteIntArray* dims;
  size_t bytes;
  TfLiteQuantization quantization;
};
struct NodeInfo_t { // subset of TfLiteNode used for initialization from constant memory
  struct TfLiteIntArray* inputs;
  struct TfLiteIntArray* outputs;
  void* builtin_data;
  used_operators_e used_op_index;
};

TfLiteContext ctx{};
TfLiteTensor tflTensors[42];
TfLiteRegistration registrations[OP_LAST];
TfLiteNode tflNodes[21];

const TfArray<2, int> tensor_dimension0 = { 2, { 1,650 } };
const TfArray<1, float> quant0_scale = { 1, { 0.042748555541038513, } };
const TfArray<1, int> quant0_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant0 = { (TfLiteFloatArray*)&quant0_scale, (TfLiteIntArray*)&quant0_zero, 0 };
const ALIGN(8) int32_t tensor_data1[2] = { -1, 224, };
const TfArray<1, int> tensor_dimension1 = { 1, { 2 } };
const ALIGN(8) int8_t tensor_data2[16] = { 13, 0, -110, -41, -97, -125, -64, -83, -87, -113, 20, -127, -92, -100, -32, -63, };
const TfArray<1, int> tensor_dimension2 = { 1, { 16 } };
const TfArray<1, float> quant2_scale = { 1, { 0.013265695422887802, } };
const TfArray<1, int> quant2_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant2 = { (TfLiteFloatArray*)&quant2_scale, (TfLiteIntArray*)&quant2_zero, 0 };
const ALIGN(8) int8_t tensor_data3[16] = { -53, 87, -24, 28, -117, 19, 50, -58, -69, 118, 123, 127, 20, 55, 50, 7, };
const TfArray<1, int> tensor_dimension3 = { 1, { 16 } };
const TfArray<1, float> quant3_scale = { 1, { 0.0041788322851061821, } };
const TfArray<1, int> quant3_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant3 = { (TfLiteFloatArray*)&quant3_scale, (TfLiteIntArray*)&quant3_zero, 0 };
const ALIGN(8) int8_t tensor_data4[32] = { -113, 18, -127, 84, 46, -119, -91, 14, 3, 85, -21, -82, 2, -16, -11, -90, -102, -75, 44, -13, 64, 6, -49, -66, -59, 60, 40, 56, 34, -46, -50, -12, };
const TfArray<1, int> tensor_dimension4 = { 1, { 32 } };
const TfArray<1, float> quant4_scale = { 1, { 0.0044738342985510826, } };
const TfArray<1, int> quant4_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant4 = { (TfLiteFloatArray*)&quant4_scale, (TfLiteIntArray*)&quant4_zero, 0 };
const ALIGN(8) int32_t tensor_data5[6] = { 6286, -1247, -829, 44, -1530, -348, };
const TfArray<1, int> tensor_dimension5 = { 1, { 6 } };
const TfArray<1, float> quant5_scale = { 1, { 0.00037583211087621748, } };
const TfArray<1, int> quant5_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant5 = { (TfLiteFloatArray*)&quant5_scale, (TfLiteIntArray*)&quant5_zero, 0 };
const ALIGN(8) int8_t tensor_data6[6*224] = { 
  -7, 3, -46, 2, 26, -33, -26, 16, 4, -1, 1, -51, -2, -22, 2, -17, 4, -4, 8, -25, 10, -11, -12, -22, -33, -21, 5, 16, -2, -14, -11, -24, -22, -1, -55, 6, 8, -36, -59, 12, -2, 5, 4, -79, -6, -72, 10, -13, -40, -24, 14, -19, 3, -13, -60, -4, -61, 17, 15, 10, -24, 3, -7, -18, -21, -25, -49, -6, 3, -32, -54, 6, -9, 24, 1, -64, 1, -95, -8, -24, -27, -14, 14, -20, 9, -26, -79, 16, -73, 1, 24, 23, -4, -12, -9, -13, -10, -16, -41, -1, 13, -36, -29, 0, -31, 36, 12, -36, -1, -63, -6, -10, -5, -4, 10, -22, 17, -33, -127, -15, -85, -8, 8, 31, -28, -26, 4, -30, -20, -12, -39, 6, 10, -20, -28, 6, -29, 25, -1, -46, 4, -53, -5, -14, -3, -22, 18, -18, 14, -47, -117, -2, -83, -9, 22, -5, -23, -8, -10, -35, -16, 0, -29, 6, 6, -45, -36, 2, -14, 8, -10, -69, 13, -45, 2, -17, -28, -26, 12, 7, 0, -39, -49, -9, -49, -32, 1, 12, -9, -3, -31, -8, 9, 15, -34, 5, 11, -77, -8, 30, -42, 2, -48, -93, 10, 17, 3, -24, -108, 7, 9, -10, 10, 19, -46, -20, -102, 16, -9, -6, -5, -22, -33, 10, 
  5, -9, -6, -6, -5, 10, -1, 2, -6, 16, 15, -1, -16, -24, -2, -1, 7, -7, -1, -12, -5, 11, -21, -45, -12, -3, 4, -2, -5, 10, 6, 6, 7, 0, 6, -1, -6, 0, 6, 9, -9, 13, 6, -5, -20, -16, 12, 4, 9, -3, -8, -2, -10, 16, -6, -7, 3, 6, 4, -7, -7, 13, 7, 10, 6, -6, 8, 5, -14, 7, 2, 8, -2, 8, 3, -2, -16, -17, 10, 3, 6, -6, -12, -9, -11, 9, 6, 3, 2, 12, 18, -2, -1, 8, 10, 5, 14, -4, 5, 1, -8, 7, 4, 4, -4, 2, 6, -11, -8, -13, 9, 0, 5, -1, -6, 2, -5, 10, -4, 3, 4, 16, 5, -3, -5, 7, 8, 8, 11, -1, 3, -2, -12, 7, 3, 2, -2, 5, 7, 1, -19, -12, -5, -10, 9, -39, -2, 1, -4, 7, 1, 0, 2, 11, -10, 1, -1, 3, 10, 2, 4, -2, 14, -8, -10, 2, -1, -3, -6, 5, 9, -11, -1, -20, -1, 6, 3, -7, 0, -11, -16, 8, 3, 2, 9, 17, -1, -9, -5, 10, -3, -21, 2, -16, 3, 0, 4, 6, -6, -15, 0, 1, 10, -6, 3, -2, 0, -3, -57, 4, -6, 3, -13, 3, 1, -7, 0, -1, 0, -4, 17, -4, -3, -14, 
  16, -29, -31, -13, 0, 2, -3, 1, 11, -3, 7, -20, -20, 6, -22, 7, 5, -16, 11, -1, 10, -21, 10, 12, 10, 2, -1, -7, -1, 12, -30, -15, 3, -27, -26, -14, 4, -2, 1, 1, 7, -6, 8, -4, -15, 12, 1, 14, -15, -22, 21, -1, 6, -11, 1, -10, 6, 0, 12, -21, -11, 12, -20, -7, 1, -40, -26, -12, 4, 7, 2, 7, 12, -9, 2, 1, -2, 4, -4, 12, -19, -19, 8, -2, 11, -1, 11, 3, 0, -5, 19, -25, -5, 7, -33, -20, 14, -25, -36, -20, 9, 5, 5, 4, 9, 8, 5, 0, -22, -1, 8, 17, -14, -40, -6, 1, 7, -5, 5, -6, 7, -8, 8, -8, -6, 4, -21, -1, 10, -38, -25, -41, 9, 7, 7, 2, 13, -10, 7, -6, -32, 2, -3, 6, -15, 25, -13, -9, 13, 0, 4, -8, 6, -12, 5, -8, -8, 5, -17, -11, 3, 0, -16, -19, 4, 5, -2, 4, 14, 3, 20, -18, -16, -2, 5, 11, -13, 1, -2, -12, 9, 10, 6, -10, 5, -13, 10, 0, 1, -10, -11, -9, -3, -24, -33, -9, 7, 3, 0, -18, 16, 6, 12, 13, 4, -31, 3, -3, -49, -8, 2, 14, 10, 3, 5, -2, -9, -18, 9, 3, 11, -11, 6, -45, 
  -2, -3, -4, -16, -25, 5, -17, 3, -14, -16, 6, 14, 15, -21, 19, 17, -4, 13, -3, -60, 7, -56, -22, -4, 3, -5, -28, -32, -13, -35, -10, -30, -7, 16, 5, -14, -9, 0, 13, 4, -13, -16, -11, 10, 11, -15, -25, 9, 13, 16, 8, -63, 11, -17, 0, -9, 4, -15, -24, -7, 22, -36, -8, -20, -7, 18, 8, -21, -3, 7, 4, 12, -5, -23, -15, 9, 5, -12, -30, 8, 0, 19, 6, -39, 9, 1, 5, -30, -2, -17, -20, -31, 36, -21, -12, -24, 6, 19, 4, -25, 12, 9, 7, 6, -6, -19, -19, 4, 11, -19, -23, 4, 15, 15, -22, -51, 6, -8, -5, -15, 1, -17, -29, -10, 37, -23, -12, -26, 5, 12, 1, -33, 14, 7, 10, 16, -1, -29, -1, 9, 14, -13, -23, 8, 7, 21, -22, -24, 1, -9, -4, -23, -1, -20, -31, -4, 33, -12, -6, -30, 1, 0, 13, -19, 8, 9, -1, 16, 6, -7, 5, 8, -7, -23, -11, 3, -1, 38, -37, -37, 5, -7, 2, -11, 6, -19, -7, -4, 7, -9, 0, -12, -7, -4, 13, -21, -9, 11, -6, 9, 10, -8, 26, 33, -14, -2, 10, 11, 6, 7, -27, 6, 12, -2, -1, 8, -2, -7, -19, -3, -5, -5, 4, 26, 
  -14, 10, 2, 3, 15, -15, -7, -5, -28, -9, -18, 9, 5, 12, -24, -22, -10, -10, -5, 9, -13, 14, 0, 16, 0, 2, -9, 5, 5, -2, 9, 4, -11, 8, 7, 13, 2, -20, -17, -8, -10, 6, -1, 8, 7, 15, 31, -22, -14, 6, -3, 9, -22, 12, -2, 19, 7, 6, -8, 1, -11, 14, -2, 3, -7, 6, 8, 15, -1, -18, -32, -7, -6, 10, -19, 3, 3, 6, 24, -12, -18, 8, -2, 9, -24, 15, 9, -14, 4, 10, -27, -2, 3, 10, 6, 5, -5, 10, 7, 12, 6, -23, -33, -11, -13, 6, -22, 3, 2, 10, 29, -14, -15, 6, 22, 9, -12, 14, 2, -16, 5, 9, -19, 0, -16, -3, 6, 5, -12, 3, 5, 12, -1, -16, -28, -8, -7, 8, -6, 2, 3, 7, 12, -19, -18, -9, 24, 6, -1, 17, 2, -8, 7, 11, 0, -2, -9, -5, 12, -6, -20, 7, 9, 11, 6, -7, -22, -3, -5, 4, -5, 6, -4, 6, 13, -29, -49, -16, 21, 19, -18, 13, -3, -19, 6, 16, -2, -17, -3, 2, 7, 6, -11, 5, 4, 5, 13, -20, 0, -13, -33, 0, -26, 0, 6, -2, -14, -4, -3, -4, 14, 1, -7, -3, 3, -10, 5, 15, -3, -5, -2, -19, -6, -16, 
  -33, 12, 1, 5, 2, -5, -10, -20, -19, -15, -28, 9, 9, 8, 1, -44, -1, -7, -11, 8, -18, -4, 4, 15, 5, -6, -5, 6, 0, -14, 12, 10, -18, -5, 4, 12, -11, -1, 8, -23, -15, -11, -26, 9, 4, 15, -38, -31, 15, -2, -15, 11, -8, -24, 1, -2, 4, -19, 5, 12, -20, -16, 1, 14, -17, -5, 8, 14, -2, 5, 2, -21, -4, -18, -32, 7, 7, 8, -11, -35, 11, -7, -17, 10, -16, -13, 10, 10, 2, -28, -6, 6, -17, -29, 7, 12, -8, 2, 5, 7, -6, 6, 9, -24, -11, -14, -25, 5, 5, 12, -28, -21, 18, 7, -5, 7, -17, -17, 2, 15, 5, -31, -11, 23, -12, -25, 10, 11, -13, -8, 4, 4, -12, 8, 12, -33, -10, -13, -18, 11, 2, 10, -12, -13, 15, -22, -2, 5, -9, -6, 5, 8, 5, -14, 18, 12, -19, -1, 5, 7, 0, -16, 10, 1, -8, 6, 2, -20, 4, -7, -17, 16, 5, 10, -21, -13, 14, -4, 2, 28, -10, -11, -8, 16, 6, -6, 3, 7, -20, -15, 7, -3, -22, 1, 10, -6, -6, -10, -6, -7, -2, 0, -3, 13, -9, -4, -13, 3, 17, -3, 1, -2, -9, -11, -4, 18, -1, -2, -9, 9, -14, 9, 8, 10, 
};
const TfArray<2, int> tensor_dimension6 = { 2, { 6,224 } };
const TfArray<1, float> quant6_scale = { 1, { 0.015795581042766571, } };
const TfArray<1, int> quant6_zero = { 1, { 0 } };
const TfLiteAffineQuantization quant6 = { (TfLiteFloatArray*)&quant6_scale, (TfLiteIntArray*)&quant6_zero, 0 };
const ALIGN(8) int8_t tensor_data7[16*1*3*13] = { 
  /* [0][0][][] */ -125,-89,37,13,-1,-32,-2,-43,14,-11,-8,55,-24, -122,-55,-54,-9,5,-50,-37,9,-10,-12,-19,-32,-13, -127,-25,-69,0,47,27,2,10,-2,0,-16,18,-1, 
  /* [1][0][][] */ -106,-92,-7,24,-63,-13,10,-9,-28,-1,13,-28,24, 34,-102,1,36,11,-24,-4,-17,26,-15,13,8,-11, -56,-127,-66,-12,43,-29,-14,26,-32,-34,21,-23,26, 
  /* [2][0][][] */ 25,-71,-52,110,10,-70,27,1,-39,20,-16,-51,16, 50,61,-54,56,-89,-124,80,-38,-88,75,5,-127,126, 86,52,-47,69,-104,-68,72,11,-81,75,-45,-100,91, 
  /* [3][0][][] */ 30,-127,67,20,-12,-9,31,-34,29,24,-20,-1,-13, 79,-98,73,8,-29,-37,2,-13,4,-2,-15,16,-22, 95,-75,74,12,-63,-7,-8,-10,40,-39,32,22,-48, 
  /* [4][0][][] */ -43,26,127,31,6,-39,-112,-77,-31,-22,16,30,-2, -2,43,124,39,-59,-6,-119,-55,-17,10,-13,56,-17, 0,67,72,-1,-102,-14,-92,-46,-23,-48,25,37,34, 
  /* [5][0][][] */ 47,40,62,19,-117,-52,-7,71,20,29,13,-50,26, 82,57,58,-43,-127,-31,-11,62,32,-6,0,-14,27, 102,28,42,-12,-95,14,23,75,-31,24,-5,-20,33, 
  /* [6][0][][] */ -48,68,64,127,52,16,-16,-10,3,-8,11,-12,-28, -21,22,9,-23,25,8,16,-4,2,0,6,9,-12, -50,-39,-34,-42,35,32,-5,-25,11,-2,8,1,-11, 
  /* [7][0][][] */ -66,21,71,112,30,45,-22,36,2,7,21,28,2, -29,107,84,127,38,-3,-10,-26,-24,-33,18,-53,-2, -35,123,83,86,-8,37,-17,28,17,-14,-19,-31,-3, 
  /* [8][0][][] */ 80,40,-69,-25,81,-37,-50,26,42,-39,-51,-3,55, 95,26,-74,-12,127,-41,-48,95,47,-80,-50,86,-14, 4,-18,-59,15,127,-79,-61,92,3,-17,-20,22,6, 
  /* [9][0][][] */ 8,33,14,-127,110,-96,23,-17,40,6,-10,-1,-28, 75,89,26,-106,77,15,-23,-22,-32,33,16,13,-30, 66,65,65,-71,71,-19,3,6,-34,36,-3,-27,-28, 
  /* [10][0][][] */ -95,27,-11,21,51,7,5,-3,15,22,-25,8,-11, -99,-4,29,-16,6,12,21,1,27,-1,4,-14,19, -34,-127,-27,37,-20,-48,-14,-10,19,-6,25,-16,-24, 
  /* [11][0][][] */ 30,127,25,-89,16,32,-79,57,18,-60,62,-43,49, 75,118,-13,-113,39,13,-51,21,16,-50,58,11,4, -111,95,42,-72,24,56,-26,41,-5,30,31,-2,6, 
  /* [12][0][][] */ 72,29,-41,-127,-97,80,78,-33,-17,1,-109,51,17, 48,53,-50,-92,-69,94,65,-30,-21,10,-101,99,6, 21,21,93,-80,-77,65,102,-21,27,37,-125,113,-34, 
  /* [13][0][][] */ 32,18,-98,30,-5,28,45,26,-27,-6,4,16,-7, 33,-9,-119,77,53,-42,47,57,-24,-45,34,34,-57, -20,-11,-127,54,21,-104,52,27,-22,-30,45,5,-24, 
  /* [14][0][][] */ -89,75,1,48,24,-77,-10,25,32,15,-7,-18,21, -82,95,43,21,-27,-104,-13,40,31,-43,-5,22,-20, -57,124,127,24,-98,-88,-29,29,62,0,30,-11,9, 
  /* [15][0][][] */ -113,44,-16,-54,38,3,18,26,16,-29,72,-12,-26, -1,72,-71,-127,91,108,10,7,25,33,-8,-57,-45, 13,43,-44,-57,103,0,20,1,31,76,-54,-4,5, 
};
const TfArray<4, int> tensor_dimension7 = { 4, { 16,1,3,13 } };
const TfArray<16, float> quant7_scale = { 16, { 0.0039468500763177872, 0.0041411435231566429, 0.0022542092483490705, 0.0036907738540321589, 0.0032090605236589909, 0.0028111324645578861, 0.0055413385853171349, 0.0034858144354075193, 0.0026016396004706621, 0.0029269843362271786, 0.0055341408587992191, 0.0022764375898987055, 0.0019873804412782192, 0.0034088946413248777, 0.003104290459305048, 0.0027674557641148567, } };
const TfArray<16, int> quant7_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant7 = { (TfLiteFloatArray*)&quant7_scale, (TfLiteIntArray*)&quant7_zero, 0 };
const ALIGN(8) int32_t tensor_data8[16] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension8 = { 1, { 16 } };
const TfArray<16, float> quant8_scale = { 16, { 0.00016872213745955378, 0.00017702790501061827, 9.636418690206483e-05, 0.00015777525550220162, 0.00013718270929530263, 0.00012017185508739203, 0.0002368842251598835, 0.00014901353279128671, 0.00011121633724542335, 0.00012512435205280781, 0.00023657652491237968, 9.7314419690519571e-05, 8.4957646322436631e-05, 0.00014572532381862402, 0.00013270393537823111, 0.00011830473522422835, } };
const TfArray<16, int> quant8_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant8 = { (TfLiteFloatArray*)&quant8_scale, (TfLiteIntArray*)&quant8_zero, 0 };
const ALIGN(8) int8_t tensor_data9[16*1*3*16] = { 
  /* [0][0][][] */ -44,-101,-75,-4,40,2,43,33,-26,4,-74,-12,16,-81,-21,9, -70,-55,-26,-89,-73,-8,33,-71,4,7,-104,-10,11,-8,-127,12, -49,-42,55,-65,-48,-17,-41,-64,16,-6,-57,-30,-1,43,55,-5, 
  /* [1][0][][] */ 9,11,-55,3,-12,-41,-19,-45,-22,-94,7,-87,-22,-23,-20,-2, 1,3,-63,-3,-17,-64,-6,-33,-11,-63,3,-38,-24,-13,-23,5, 5,20,-21,1,-11,-127,-1,-50,3,-23,7,-44,-27,-1,-17,-12, 
  /* [2][0][][] */ -45,-9,-32,-41,59,14,-7,0,92,76,-41,79,-12,70,4,60, -49,-11,-3,-28,-10,4,-22,1,32,31,-61,34,-16,12,0,48, -30,-19,-9,-66,44,-21,-13,0,98,10,-9,127,-17,76,-16,64, 
  /* [3][0][][] */ -2,-7,3,-4,-9,66,2,-6,-66,-42,-2,-15,45,-9,8,-14, 0,-11,17,-4,1,-22,-10,-5,-90,-36,-2,3,-13,-8,12,-17, -6,-12,30,0,2,49,-3,-3,-127,-34,-1,-15,51,-24,1,-41, 
  /* [4][0][][] */ -15,1,-12,7,51,-11,-22,1,21,32,-38,24,-9,22,-10,-12, -99,-15,4,6,-7,-2,-32,9,-10,3,-127,-9,1,-7,0,-17, -39,-24,1,16,45,11,-28,9,-17,7,-62,46,-2,-17,0,-13, 
  /* [5][0][][] */ -19,-18,19,9,14,-29,15,96,-29,-65,-40,-74,0,-44,-12,-21, -38,-93,-79,-21,46,-39,47,6,-42,1,-21,-18,-1,-127,24,-5, -12,-8,-102,-31,-9,-42,23,61,20,5,20,-6,6,14,-12,17, 
  /* [6][0][][] */ -7,-5,21,24,28,-22,-24,-1,-27,-95,0,-100,-20,19,9,-94, 0,2,-4,13,12,-38,-41,-14,20,-88,-2,-127,-78,13,20,-99, 4,-1,-33,6,22,-38,-29,-11,36,-31,5,-87,-123,-7,10,-38, 
  /* [7][0][][] */ -32,-39,127,8,16,9,-49,18,79,-28,-24,-24,58,25,40,-17, -59,-30,35,17,10,17,-39,6,-15,-75,-51,-61,12,86,3,-89, -10,-34,58,13,25,-2,-30,28,-25,-99,-7,-44,90,18,31,-91, 
  /* [8][0][][] */ -51,-84,7,14,20,2,23,86,-11,-8,-53,-21,1,-3,44,9, -116,-127,106,-39,42,-6,-1,4,-4,-16,-46,-8,0,40,6,5, 1,-39,41,-37,-11,-4,26,23,36,-10,-9,-9,11,39,65,13, 
  /* [9][0][][] */ -8,-11,-18,44,18,22,-10,-6,-55,7,8,-31,-57,-64,9,-44, -67,-17,43,22,21,24,-69,-35,-9,0,-26,-2,-32,-4,6,-32, -127,-25,-4,50,-5,16,-105,-38,16,-3,-102,6,-11,35,-18,-7, 
  /* [10][0][][] */ -23,-55,-92,-27,6,-86,7,20,17,-43,-15,92,40,8,-10,0, -33,-23,-67,-12,0,-112,21,-1,-3,-15,-24,-33,-30,-3,-24,6, -18,-2,-10,-13,-109,-87,16,-100,-4,16,-14,18,46,33,-127,24, 
  /* [11][0][][] */ -13,-1,-3,-4,-42,-127,-6,-26,19,22,-10,-20,-12,16,-82,10, -20,-2,11,5,-18,-94,-56,-12,-2,5,-11,-33,-15,8,-48,-8, -13,9,28,12,-11,-34,-24,2,28,15,-9,-28,-19,9,-14,0, 
  /* [12][0][][] */ 19,6,-32,-22,-50,3,0,-51,5,35,7,-18,7,-27,-10,13, -7,0,-38,-55,-92,10,-23,-127,1,-3,-21,3,6,-27,-39,11, -34,-35,-25,-49,-58,21,-30,-31,-3,27,-41,-2,1,-31,-12,13, 
  /* [13][0][][] */ 0,-5,11,-13,5,4,10,8,21,-11,-4,-27,-22,6,10,-31, -4,-13,-15,-9,3,-10,7,10,-26,-71,0,-52,-27,-22,7,-38, -6,-13,13,-8,20,50,15,15,-51,-127,-3,-104,31,-24,9,-42, 
  /* [14][0][][] */ 10,-23,12,-50,-50,17,-8,-39,-29,27,-22,35,35,1,-19,12, -56,-127,24,-31,-2,29,-20,-8,-16,6,-114,16,13,-33,-6,5, -18,-120,-9,-26,-4,24,-6,14,-16,30,-19,22,13,-91,2,3, 
  /* [15][0][][] */ 16,6,-64,-19,10,-90,31,19,-15,-113,2,-127,-71,-43,13,-4, 2,-12,-30,-25,24,-121,29,17,12,-95,1,-114,-31,-2,-1,7, 9,5,-11,-25,-3,-105,58,42,5,5,6,-10,-49,-4,-11,12, 
};
const TfArray<4, int> tensor_dimension9 = { 4, { 16,1,3,16 } };
const TfArray<16, float> quant9_scale = { 16, { 0.0089175337925553322, 0.010278154164552689, 0.0040951534174382687, 0.0086417440325021744, 0.011719800531864166, 0.0050657922402024269, 0.0086548095569014549, 0.0046627321280539036, 0.0049562114290893078, 0.0066636307165026665, 0.0063478588126599789, 0.012113144621253014, 0.011642290279269218, 0.0092514660209417343, 0.0085530746728181839, 0.0063757761381566525, } };
const TfArray<16, int> quant9_zero = { 16, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant9 = { (TfLiteFloatArray*)&quant9_scale, (TfLiteIntArray*)&quant9_zero, 0 };
const ALIGN(8) int32_t tensor_data10[32] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, };
const TfArray<1, int> tensor_dimension10 = { 1, { 32 } };
const TfArray<32, float> quant10_scale = { 32, { 0.00021410921181086451, 0.00029423451633192599, 0.00016306368343066424, 0.00033777827047742903, 0.00050797284347936511, 0.00014660813030786812, 0.00042282746289856732, 0.00049444829346612096, 0.00023511612380389124, 0.00040893664117902517, 0.00033711644937284291, 0.00042903638677671552, 0.00032131857005879283, 0.00030495761893689632, 0.00051314686425030231, 0.00071400107117369771, 0.00034538726322352886, 0.00039961395668797195, 0.00036419069510884583, 0.00055511115351691842, 0.00050840433686971664, 0.00033332192106172442, 0.00020025169942528009, 0.00046116855810396373, 0.00034640313242562115, 0.00059829826932400465, 0.00039876665687188506, 0.00036242915666662157, 0.00074721738928928971, 0.00032634212402626872, 0.00026343215722590685, 0.00033858092501759529, } };
const TfArray<32, int> quant10_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant10 = { (TfLiteFloatArray*)&quant10_scale, (TfLiteIntArray*)&quant10_zero, 0 };
const ALIGN(8) int8_t tensor_data11[32*1*3*16] = { 
  /* [0][0][][] */ 46,-8,-12,48,46,14,6,16,-20,69,-88,-8,-107,3,-11,2, 19,-90,13,-24,1,12,-19,-8,28,48,-16,-23,-11,-2,-7,0, 28,-127,6,-3,26,3,-68,8,26,61,22,-4,-4,-28,5,-69, 
  /* [1][0][][] */ 32,-6,12,-13,9,7,-31,-3,-3,-8,44,40,3,-40,3,-11, 11,-13,2,-16,-47,-67,34,5,11,2,-1,13,-15,-29,-18,-84, -126,-5,2,0,-78,-127,21,0,-6,9,-67,-32,-13,14,-57,-119, 
  /* [2][0][][] */ 28,-38,127,1,-18,1,52,7,-4,20,-15,-12,2,15,-16,5, 39,-32,-70,2,26,12,16,0,3,0,0,61,51,4,-35,-1, 13,-5,120,-21,-9,6,13,1,-6,-9,7,41,-10,1,-15,5, 
  /* [3][0][][] */ -58,-7,-7,-10,2,-28,14,-4,-127,-1,11,4,23,-15,14,-6, -42,-5,4,-16,-14,-42,14,-37,-120,-9,10,10,17,-30,-33,-8, -8,-4,6,-16,-4,-22,16,-26,-32,12,11,25,-15,-40,43,-17, 
  /* [4][0][][] */ 2,-10,-21,8,-15,-15,12,-5,-11,16,2,-22,7,-6,-4,-1, 3,-11,-49,10,-11,-2,3,9,-6,6,5,-48,0,19,24,-2, -37,-10,-127,-7,-35,5,5,-3,-4,-14,-8,-51,-34,-1,3,8, 
  /* [5][0][][] */ 43,80,4,2,9,7,-12,127,-15,3,16,2,5,-1,14,-9, 31,6,4,5,11,-26,-1,-70,88,16,-5,-32,-6,0,-5,-20, 113,28,17,-5,-12,-4,-14,123,42,-24,-53,-39,-23,18,-2,-5, 
  /* [6][0][][] */ 32,-20,1,2,0,-18,-4,29,8,-5,13,17,7,6,4,-51, -25,-72,-5,-1,8,7,8,3,3,0,-51,-1,-31,7,4,-6, -6,-30,-26,23,9,5,5,7,2,-18,-15,-127,-63,10,-20,1, 
  /* [7][0][][] */ -127,2,-71,7,-18,-14,-1,-6,-14,23,-18,-27,-75,6,-49,-5, 0,-7,-16,12,15,4,1,-5,2,13,22,-5,-30,0,-37,0, 33,-12,1,-12,1,12,1,-4,7,12,-7,0,-13,2,-15,5, 
  /* [8][0][][] */ -9,-7,-16,54,-11,6,-26,8,5,4,18,-98,-29,16,20,-8, -20,-5,-85,-67,-46,0,-63,14,-5,1,16,-112,-62,1,24,-16, 5,-2,-102,69,-33,1,-27,22,-1,-21,21,-127,-35,1,3,3, 
  /* [9][0][][] */ -15,-2,13,-12,-15,-13,-18,-13,-63,-1,18,4,10,-18,17,10, -17,-11,-16,4,-5,2,-16,-51,-49,4,3,-6,2,1,-14,9, -113,-6,-28,-55,-8,-2,-10,-77,-45,20,0,13,-5,-19,-127,-6, 
  /* [10][0][][] */ -41,7,-127,40,-114,-8,-26,-13,-29,-18,-7,-43,-18,-32,-66,15, -70,11,-120,-33,-44,-1,-17,-14,-13,9,-17,16,8,-11,-110,7, -51,-5,-50,7,57,-3,-8,10,8,11,-34,17,-33,26,-39,3, 
  /* [11][0][][] */ -55,21,-18,-23,-19,-9,0,-39,-39,-52,13,-127,9,-8,4,-3, 24,-3,-2,-12,-11,3,13,-57,-8,-36,13,-21,-9,-9,-33,1, 18,3,13,-15,-27,1,4,-6,0,-8,22,-8,18,-38,49,-6, 
  /* [12][0][][] */ 8,1,-8,-53,-26,10,-12,-127,-3,-67,29,-46,-14,-7,-30,1, 42,-15,-6,-21,-8,18,-21,-75,-12,-100,2,18,17,7,23,10, 14,-62,2,-9,-45,6,-51,-24,0,-39,37,28,24,-17,3,-8, 
  /* [13][0][][] */ -2,-7,-14,-14,-116,-19,18,-14,-119,-53,10,-42,37,-9,3,-3, -4,-19,0,24,-35,-24,8,16,-77,-33,8,26,-23,-16,34,-3, -3,-48,-4,23,0,-8,-127,-3,-38,-13,22,13,64,-63,-22,-12, 
  /* [14][0][][] */ -2,-54,2,11,31,-20,-96,-3,0,-12,5,-3,2,-14,13,-127, -1,1,-3,13,-8,-32,-9,-1,-14,11,4,-12,0,-15,0,-34, -86,17,-26,0,-37,-72,14,-9,-81,9,-6,9,-57,-39,-58,-27, 
  /* [15][0][][] */ 7,-5,1,-1,-18,6,-3,-39,4,-21,8,-65,-37,10,-25,12, 4,-110,4,0,-11,10,-18,7,10,11,-1,-8,-4,-6,-3,-10, 4,-127,2,-3,-1,-28,-15,6,-3,11,7,5,1,7,0,-69, 
  /* [16][0][][] */ 43,-122,3,-31,-22,-13,-51,-23,11,-10,13,14,13,-107,7,-127, 21,-82,3,-30,21,-12,2,11,7,-13,-14,16,-12,19,-5,-13, -4,-105,-4,8,28,8,9,14,-3,-11,-61,-65,-75,26,-9,18, 
  /* [17][0][][] */ 11,16,-31,-127,-8,-2,3,-53,-8,-76,-33,-63,-83,1,-69,5, 9,-53,5,-21,31,11,7,-25,9,-17,28,-60,-45,-11,-32,8, 13,-68,8,-40,-5,3,-28,7,-1,-23,5,44,2,-69,-4,-20, 
  /* [18][0][][] */ -43,-1,3,-34,4,-16,17,-4,-33,16,-12,40,2,-22,2,-8, -30,-1,-33,-86,-127,-10,5,-23,-43,-24,-3,9,-5,-11,-110,0, -56,-4,-70,-69,-70,9,1,-51,-1,-68,-31,-30,-65,15,-115,13, 
  /* [19][0][][] */ -58,0,-47,-45,-83,-33,18,-127,-125,-50,-35,-83,-20,-15,-43,3, -19,-2,2,13,-3,-35,-25,-6,-21,2,-4,-5,16,-2,9,-3, -16,-8,-1,17,7,-59,-37,1,-9,14,1,-7,7,6,7,-16, 
  /* [20][0][][] */ -41,-2,-127,37,-27,-3,-27,-7,-13,-9,7,-16,-35,-11,-9,-4, -1,-13,-27,-2,-21,14,-33,-2,-2,9,15,-68,-29,7,-9,3, 28,-5,-5,4,-16,2,-17,7,4,-3,28,4,-6,-5,-1,-2, 
  /* [21][0][][] */ 11,-80,14,15,26,-18,-16,21,4,3,-1,-5,10,-5,8,-112, -26,-14,-2,5,25,-36,8,3,-2,1,10,-12,-3,-62,-5,-88, -126,2,11,-38,-41,-77,19,-31,-93,-2,45,-3,-18,-127,-16,-25, 
  /* [22][0][][] */ -19,-106,-26,25,-55,-10,-30,42,1,10,38,34,35,-2,8,-11, -3,-38,0,21,9,-87,-4,5,12,-3,48,23,48,-35,81,-127, -15,-33,-3,21,-1,7,-2,18,-8,2,5,38,-22,7,22,-28, 
  /* [23][0][][] */ -10,-53,9,-23,10,5,-19,8,7,-50,4,20,-6,9,14,2, 1,-9,-13,-23,9,9,0,-2,10,-86,-20,-42,-52,3,-2,3, -20,4,-46,-104,-19,5,9,-17,1,-107,5,-127,-89,1,-114,5, 
  /* [24][0][][] */ -4,-4,22,44,12,2,-25,-22,-6,-4,25,-38,9,-3,10,1, -9,-127,25,-17,13,4,-25,-8,2,3,-5,-39,1,-2,35,-2, 1,-14,5,38,18,7,2,-20,-1,-2,19,12,-7,-9,25,-6, 
  /* [25][0][][] */ -6,-5,-3,-3,-3,-50,-8,19,-4,6,13,10,7,-20,0,-25, -37,-4,12,-6,-1,-49,-23,-17,-31,5,5,0,-1,-37,1,-2, -127,0,-5,-7,-26,-26,-1,-83,-69,-17,-2,-14,-5,-25,6,8, 
  /* [26][0][][] */ -2,2,-73,-50,-17,-2,-18,-103,-12,-45,-21,-127,-34,1,-62,-4, -6,-2,-62,-5,-18,7,-6,-7,6,-19,-32,-26,-8,1,-19,14, -25,-6,-16,13,-26,-10,-5,18,-7,46,-44,2,-27,7,-27,-11, 
  /* [27][0][][] */ 14,-7,-7,-13,-5,14,6,9,12,5,18,-28,-79,18,-73,6, -32,-6,-92,-43,-53,0,2,-35,-6,9,11,-37,-11,-7,-127,-8, -44,-4,-12,-14,-60,-14,13,-102,-48,7,-8,15,26,-16,-75,-7, 
  /* [28][0][][] */ 5,-127,5,1,-2,-30,10,10,9,-9,1,9,1,-7,13,-62, -72,-17,-3,-7,-32,-15,8,-8,-9,-13,-18,-14,-20,6,-16,-18, -14,-64,-17,8,6,-11,-3,-3,-4,16,2,-39,9,11,0,-57, 
  /* [29][0][][] */ -127,6,-91,-48,-21,19,11,-65,-16,32,-80,-16,-35,5,-102,5, -9,-4,-6,3,13,-3,2,-1,13,-6,-125,-17,-15,1,4,-21, -19,-72,14,11,30,-12,-12,17,9,24,-45,-40,-30,13,-5,-74, 
  /* [30][0][][] */ -2,32,-3,11,30,-19,19,10,18,23,-119,-15,-86,-8,-18,-4, -24,8,17,-30,-60,-68,22,-8,6,4,-52,30,9,-127,-21,-30, -19,-15,22,-67,41,-28,-2,-21,2,8,24,31,13,-38,12,-51, 
  /* [31][0][][] */ -47,6,-2,-44,-42,-119,-6,-16,-86,27,-17,20,7,-127,-4,-17, 8,6,-2,-11,-12,-111,-4,-11,-13,5,8,13,-11,-45,-1,-51, 17,-32,3,11,44,-65,-12,7,6,7,4,31,20,-5,23,-41, 
};
const TfArray<4, int> tensor_dimension11 = { 4, { 32,1,3,16 } };
const TfArray<32, float> quant11_scale = { 32, { 0.006150656845420599, 0.0084523940458893776, 0.0046842857263982296, 0.0097032636404037476, 0.014592396095395088, 0.0042115715332329273, 0.012146448716521263, 0.014203879982233047, 0.0067541166208684444, 0.011747410520911217, 0.0096842516213655472, 0.012324810959398746, 0.0092304302379488945, 0.0087604336440563202, 0.014741029590368271, 0.02051091380417347, 0.0099218450486660004, 0.011479600332677364, 0.01046200655400753, 0.015946526080369949, 0.014604792930185795, 0.0095752477645874023, 0.00575257558375597, 0.013247862458229065, 0.0099510280415415764, 0.017187150195240974, 0.011455260217189789, 0.010411403141915798, 0.021465109661221504, 0.0093747405335307121, 0.0075675430707633495, 0.0097263213247060776, } };
const TfArray<32, int> quant11_zero = { 32, { 0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0 } };
const TfLiteAffineQuantization quant11 = { (TfLiteFloatArray*)&quant11_scale, (TfLiteIntArray*)&quant11_zero, 0 };
const ALIGN(8) int32_t tensor_data12[4] = { 1, 1, 50, 13, };
const TfArray<1, int> tensor_dimension12 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data13[3] = { 1, 50, 16, };
const TfArray<1, int> tensor_dimension13 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data14[4] = { 1, 50, 1, 16, };
const TfArray<1, int> tensor_dimension14 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data15[4] = { 1, 1, 25, 16, };
const TfArray<1, int> tensor_dimension15 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data16[3] = { 1, 25, 16, };
const TfArray<1, int> tensor_dimension16 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data17[4] = { 1, 25, 1, 16, };
const TfArray<1, int> tensor_dimension17 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data18[4] = { 1, 1, 13, 16, };
const TfArray<1, int> tensor_dimension18 = { 1, { 4 } };
const ALIGN(8) int32_t tensor_data19[3] = { 1, 13, 32, };
const TfArray<1, int> tensor_dimension19 = { 1, { 3 } };
const ALIGN(8) int32_t tensor_data20[4] = { 1, 13, 1, 32, };
const TfArray<1, int> tensor_dimension20 = { 1, { 4 } };
const TfArray<4, int> tensor_dimension21 = { 4, { 1,1,50,13 } };
const TfArray<1, float> quant21_scale = { 1, { 0.042748555541038513, } };
const TfArray<1, int> quant21_zero = { 1, { -19 } };
const TfLiteAffineQuantization quant21 = { (TfLiteFloatArray*)&quant21_scale, (TfLiteIntArray*)&quant21_zero, 0 };
const TfArray<4, int> tensor_dimension22 = { 4, { 1,1,50,16 } };
const TfArray<1, float> quant22_scale = { 1, { 0.069141954183578491, } };
const TfArray<1, int> quant22_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant22 = { (TfLiteFloatArray*)&quant22_scale, (TfLiteIntArray*)&quant22_zero, 0 };
const TfArray<3, int> tensor_dimension23 = { 3, { 1,50,16 } };
const TfArray<1, float> quant23_scale = { 1, { 0.069141954183578491, } };
const TfArray<1, int> quant23_zero = { 1, { 2 } };
const TfLiteAffineQuantization quant23 = { (TfLiteFloatArray*)&quant23_scale, (TfLiteIntArray*)&quant23_zero, 0 };
const TfArray<3, int> tensor_dimension24 = { 3, { 1,50,16 } };
const TfArray<1, float> quant24_scale = { 1, { 0.029544305056333542, } };
const TfArray<1, int> quant24_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant24 = { (TfLiteFloatArray*)&quant24_scale, (TfLiteIntArray*)&quant24_zero, 0 };
const TfArray<4, int> tensor_dimension25 = { 4, { 1,50,1,16 } };
const TfArray<1, float> quant25_scale = { 1, { 0.029544305056333542, } };
const TfArray<1, int> quant25_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant25 = { (TfLiteFloatArray*)&quant25_scale, (TfLiteIntArray*)&quant25_zero, 0 };
const TfArray<4, int> tensor_dimension26 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant26_scale = { 1, { 0.029544305056333542, } };
const TfArray<1, int> quant26_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant26 = { (TfLiteFloatArray*)&quant26_scale, (TfLiteIntArray*)&quant26_zero, 0 };
const TfArray<4, int> tensor_dimension27 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant27_scale = { 1, { 0.029544305056333542, } };
const TfArray<1, int> quant27_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant27 = { (TfLiteFloatArray*)&quant27_scale, (TfLiteIntArray*)&quant27_zero, 0 };
const TfArray<4, int> tensor_dimension28 = { 4, { 1,1,25,16 } };
const TfArray<1, float> quant28_scale = { 1, { 0.15571554005146027, } };
const TfArray<1, int> quant28_zero = { 1, { 69 } };
const TfLiteAffineQuantization quant28 = { (TfLiteFloatArray*)&quant28_scale, (TfLiteIntArray*)&quant28_zero, 0 };
const TfArray<3, int> tensor_dimension29 = { 3, { 1,25,16 } };
const TfArray<1, float> quant29_scale = { 1, { 0.15571554005146027, } };
const TfArray<1, int> quant29_zero = { 1, { 69 } };
const TfLiteAffineQuantization quant29 = { (TfLiteFloatArray*)&quant29_scale, (TfLiteIntArray*)&quant29_zero, 0 };
const TfArray<3, int> tensor_dimension30 = { 3, { 1,25,16 } };
const TfArray<1, float> quant30_scale = { 1, { 0.034810788929462433, } };
const TfArray<1, int> quant30_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant30 = { (TfLiteFloatArray*)&quant30_scale, (TfLiteIntArray*)&quant30_zero, 0 };
const TfArray<4, int> tensor_dimension31 = { 4, { 1,25,1,16 } };
const TfArray<1, float> quant31_scale = { 1, { 0.034810788929462433, } };
const TfArray<1, int> quant31_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant31 = { (TfLiteFloatArray*)&quant31_scale, (TfLiteIntArray*)&quant31_zero, 0 };
const TfArray<4, int> tensor_dimension32 = { 4, { 1,13,1,16 } };
const TfArray<1, float> quant32_scale = { 1, { 0.034810788929462433, } };
const TfArray<1, int> quant32_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant32 = { (TfLiteFloatArray*)&quant32_scale, (TfLiteIntArray*)&quant32_zero, 0 };
const TfArray<4, int> tensor_dimension33 = { 4, { 1,1,13,16 } };
const TfArray<1, float> quant33_scale = { 1, { 0.034810788929462433, } };
const TfArray<1, int> quant33_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant33 = { (TfLiteFloatArray*)&quant33_scale, (TfLiteIntArray*)&quant33_zero, 0 };
const TfArray<4, int> tensor_dimension34 = { 4, { 1,1,13,32 } };
const TfArray<1, float> quant34_scale = { 1, { 0.16978344321250916, } };
const TfArray<1, int> quant34_zero = { 1, { 89 } };
const TfLiteAffineQuantization quant34 = { (TfLiteFloatArray*)&quant34_scale, (TfLiteIntArray*)&quant34_zero, 0 };
const TfArray<3, int> tensor_dimension35 = { 3, { 1,13,32 } };
const TfArray<1, float> quant35_scale = { 1, { 0.16978344321250916, } };
const TfArray<1, int> quant35_zero = { 1, { 89 } };
const TfLiteAffineQuantization quant35 = { (TfLiteFloatArray*)&quant35_scale, (TfLiteIntArray*)&quant35_zero, 0 };
const TfArray<3, int> tensor_dimension36 = { 3, { 1,13,32 } };
const TfArray<1, float> quant36_scale = { 1, { 0.023793496191501617, } };
const TfArray<1, int> quant36_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant36 = { (TfLiteFloatArray*)&quant36_scale, (TfLiteIntArray*)&quant36_zero, 0 };
const TfArray<4, int> tensor_dimension37 = { 4, { 1,13,1,32 } };
const TfArray<1, float> quant37_scale = { 1, { 0.023793496191501617, } };
const TfArray<1, int> quant37_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant37 = { (TfLiteFloatArray*)&quant37_scale, (TfLiteIntArray*)&quant37_zero, 0 };
const TfArray<4, int> tensor_dimension38 = { 4, { 1,7,1,32 } };
const TfArray<1, float> quant38_scale = { 1, { 0.023793496191501617, } };
const TfArray<1, int> quant38_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant38 = { (TfLiteFloatArray*)&quant38_scale, (TfLiteIntArray*)&quant38_zero, 0 };
const TfArray<2, int> tensor_dimension39 = { 2, { 1,224 } };
const TfArray<1, float> quant39_scale = { 1, { 0.023793496191501617, } };
const TfArray<1, int> quant39_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant39 = { (TfLiteFloatArray*)&quant39_scale, (TfLiteIntArray*)&quant39_zero, 0 };
const TfArray<2, int> tensor_dimension40 = { 2, { 1,6 } };
const TfArray<1, float> quant40_scale = { 1, { 0.17599225044250488, } };
const TfArray<1, int> quant40_zero = { 1, { 68 } };
const TfLiteAffineQuantization quant40 = { (TfLiteFloatArray*)&quant40_scale, (TfLiteIntArray*)&quant40_zero, 0 };
const TfArray<2, int> tensor_dimension41 = { 2, { 1,6 } };
const TfArray<1, float> quant41_scale = { 1, { 0.00390625, } };
const TfArray<1, int> quant41_zero = { 1, { -128 } };
const TfLiteAffineQuantization quant41 = { (TfLiteFloatArray*)&quant41_scale, (TfLiteIntArray*)&quant41_zero, 0 };
const TfLiteReshapeParams opdata0 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs0 = { 2, { 0,12 } };
const TfArray<1, int> outputs0 = { 1, { 21 } };
const TfLiteConvParams opdata1 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs1 = { 3, { 21,7,8 } };
const TfArray<1, int> outputs1 = { 1, { 22 } };
const TfLiteReshapeParams opdata2 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs2 = { 2, { 22,13 } };
const TfArray<1, int> outputs2 = { 1, { 23 } };
const TfLiteAddParams opdata3 = { kTfLiteActRelu };
const TfArray<2, int> inputs3 = { 2, { 23,2 } };
const TfArray<1, int> outputs3 = { 1, { 24 } };
const TfLiteReshapeParams opdata4 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs4 = { 2, { 24,14 } };
const TfArray<1, int> outputs4 = { 1, { 25 } };
const TfLitePoolParams opdata5 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs5 = { 1, { 25 } };
const TfArray<1, int> outputs5 = { 1, { 26 } };
const TfLiteReshapeParams opdata6 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs6 = { 2, { 26,15 } };
const TfArray<1, int> outputs6 = { 1, { 27 } };
const TfLiteConvParams opdata7 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs7 = { 3, { 27,9,8 } };
const TfArray<1, int> outputs7 = { 1, { 28 } };
const TfLiteReshapeParams opdata8 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs8 = { 2, { 28,16 } };
const TfArray<1, int> outputs8 = { 1, { 29 } };
const TfLiteAddParams opdata9 = { kTfLiteActRelu };
const TfArray<2, int> inputs9 = { 2, { 29,3 } };
const TfArray<1, int> outputs9 = { 1, { 30 } };
const TfLiteReshapeParams opdata10 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs10 = { 2, { 30,17 } };
const TfArray<1, int> outputs10 = { 1, { 31 } };
const TfLitePoolParams opdata11 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs11 = { 1, { 31 } };
const TfArray<1, int> outputs11 = { 1, { 32 } };
const TfLiteReshapeParams opdata12 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs12 = { 2, { 32,18 } };
const TfArray<1, int> outputs12 = { 1, { 33 } };
const TfLiteConvParams opdata13 = { kTfLitePaddingSame, 1,1, kTfLiteActNone, 1,1 };
const TfArray<3, int> inputs13 = { 3, { 33,11,10 } };
const TfArray<1, int> outputs13 = { 1, { 34 } };
const TfLiteReshapeParams opdata14 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs14 = { 2, { 34,19 } };
const TfArray<1, int> outputs14 = { 1, { 35 } };
const TfLiteAddParams opdata15 = { kTfLiteActRelu };
const TfArray<2, int> inputs15 = { 2, { 35,4 } };
const TfArray<1, int> outputs15 = { 1, { 36 } };
const TfLiteReshapeParams opdata16 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs16 = { 2, { 36,20 } };
const TfArray<1, int> outputs16 = { 1, { 37 } };
const TfLitePoolParams opdata17 = { kTfLitePaddingSame, 1,2, 1,2, kTfLiteActNone, { { 0,0, 0, 0 } } };
const TfArray<1, int> inputs17 = { 1, { 37 } };
const TfArray<1, int> outputs17 = { 1, { 38 } };
const TfLiteReshapeParams opdata18 = { { 0, 0, 0, 0, 0, 0, 0, 0, }, 0 };
const TfArray<2, int> inputs18 = { 2, { 38,1 } };
const TfArray<1, int> outputs18 = { 1, { 39 } };
const TfLiteFullyConnectedParams opdata19 = { kTfLiteActNone, kTfLiteFullyConnectedWeightsFormatDefault, false, false };
const TfArray<3, int> inputs19 = { 3, { 39,6,5 } };
const TfArray<1, int> outputs19 = { 1, { 40 } };
const TfLiteSoftmaxParams opdata20 = { 1 };
const TfArray<1, int> inputs20 = { 1, { 40 } };
const TfArray<1, int> outputs20 = { 1, { 41 } };
const TensorInfo_t tensorData[] = {
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 656, (TfLiteIntArray*)&tensor_dimension0, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant0))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data1, (TfLiteIntArray*)&tensor_dimension1, 8, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data2, (TfLiteIntArray*)&tensor_dimension2, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant2))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data3, (TfLiteIntArray*)&tensor_dimension3, 16, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant3))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data4, (TfLiteIntArray*)&tensor_dimension4, 32, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant4))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data5, (TfLiteIntArray*)&tensor_dimension5, 24, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant5))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data6, (TfLiteIntArray*)&tensor_dimension6, 1344, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant6))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data7, (TfLiteIntArray*)&tensor_dimension7, 624, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant7))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data8, (TfLiteIntArray*)&tensor_dimension8, 64, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant8))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data9, (TfLiteIntArray*)&tensor_dimension9, 768, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant9))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data10, (TfLiteIntArray*)&tensor_dimension10, 128, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant10))}, },
  { kTfLiteMmapRo, kTfLiteInt8, (void*)tensor_data11, (TfLiteIntArray*)&tensor_dimension11, 1536, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant11))}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data12, (TfLiteIntArray*)&tensor_dimension12, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data13, (TfLiteIntArray*)&tensor_dimension13, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data14, (TfLiteIntArray*)&tensor_dimension14, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data15, (TfLiteIntArray*)&tensor_dimension15, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data16, (TfLiteIntArray*)&tensor_dimension16, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data17, (TfLiteIntArray*)&tensor_dimension17, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data18, (TfLiteIntArray*)&tensor_dimension18, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data19, (TfLiteIntArray*)&tensor_dimension19, 12, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteMmapRo, kTfLiteInt32, (void*)tensor_data20, (TfLiteIntArray*)&tensor_dimension20, 16, {kTfLiteNoQuantization, nullptr}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension21, 650, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant21))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension22, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant22))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension23, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant23))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension24, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant24))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension25, 800, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant25))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 800, (TfLiteIntArray*)&tensor_dimension26, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant26))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension27, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant27))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension28, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant28))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension29, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant29))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension30, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant30))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension31, 400, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant31))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 400, (TfLiteIntArray*)&tensor_dimension32, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant32))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension33, 208, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant33))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension34, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant34))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension35, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant35))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension36, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant36))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension37, 416, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant37))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 416, (TfLiteIntArray*)&tensor_dimension38, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant38))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension39, 224, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant39))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 224, (TfLiteIntArray*)&tensor_dimension40, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant40))}, },
  { kTfLiteArenaRw, kTfLiteInt8, tensor_arena + 0, (TfLiteIntArray*)&tensor_dimension41, 6, {kTfLiteAffineQuantization, const_cast<void*>(static_cast<const void*>(&quant41))}, },
};const NodeInfo_t nodeData[] = {
  { (TfLiteIntArray*)&inputs0, (TfLiteIntArray*)&outputs0, const_cast<void*>(static_cast<const void*>(&opdata0)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs1, (TfLiteIntArray*)&outputs1, const_cast<void*>(static_cast<const void*>(&opdata1)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs2, (TfLiteIntArray*)&outputs2, const_cast<void*>(static_cast<const void*>(&opdata2)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs3, (TfLiteIntArray*)&outputs3, const_cast<void*>(static_cast<const void*>(&opdata3)), OP_ADD, },
  { (TfLiteIntArray*)&inputs4, (TfLiteIntArray*)&outputs4, const_cast<void*>(static_cast<const void*>(&opdata4)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs5, (TfLiteIntArray*)&outputs5, const_cast<void*>(static_cast<const void*>(&opdata5)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs6, (TfLiteIntArray*)&outputs6, const_cast<void*>(static_cast<const void*>(&opdata6)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs7, (TfLiteIntArray*)&outputs7, const_cast<void*>(static_cast<const void*>(&opdata7)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs8, (TfLiteIntArray*)&outputs8, const_cast<void*>(static_cast<const void*>(&opdata8)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs9, (TfLiteIntArray*)&outputs9, const_cast<void*>(static_cast<const void*>(&opdata9)), OP_ADD, },
  { (TfLiteIntArray*)&inputs10, (TfLiteIntArray*)&outputs10, const_cast<void*>(static_cast<const void*>(&opdata10)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs11, (TfLiteIntArray*)&outputs11, const_cast<void*>(static_cast<const void*>(&opdata11)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs12, (TfLiteIntArray*)&outputs12, const_cast<void*>(static_cast<const void*>(&opdata12)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs13, (TfLiteIntArray*)&outputs13, const_cast<void*>(static_cast<const void*>(&opdata13)), OP_CONV_2D, },
  { (TfLiteIntArray*)&inputs14, (TfLiteIntArray*)&outputs14, const_cast<void*>(static_cast<const void*>(&opdata14)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs15, (TfLiteIntArray*)&outputs15, const_cast<void*>(static_cast<const void*>(&opdata15)), OP_ADD, },
  { (TfLiteIntArray*)&inputs16, (TfLiteIntArray*)&outputs16, const_cast<void*>(static_cast<const void*>(&opdata16)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs17, (TfLiteIntArray*)&outputs17, const_cast<void*>(static_cast<const void*>(&opdata17)), OP_MAX_POOL_2D, },
  { (TfLiteIntArray*)&inputs18, (TfLiteIntArray*)&outputs18, const_cast<void*>(static_cast<const void*>(&opdata18)), OP_RESHAPE, },
  { (TfLiteIntArray*)&inputs19, (TfLiteIntArray*)&outputs19, const_cast<void*>(static_cast<const void*>(&opdata19)), OP_FULLY_CONNECTED, },
  { (TfLiteIntArray*)&inputs20, (TfLiteIntArray*)&outputs20, const_cast<void*>(static_cast<const void*>(&opdata20)), OP_SOFTMAX, },
};
static std::vector<void*> overflow_buffers;
static TfLiteStatus AllocatePersistentBuffer(struct TfLiteContext* ctx,
                                                 size_t bytes, void** ptr) {
  if (current_location - bytes < tensor_boundary) {
    // OK, this will look super weird, but.... we have CMSIS-NN buffers which
    // we cannot calculate beforehand easily.
    *ptr = malloc(bytes);
    if (*ptr == NULL) {
      printf("ERR: Failed to allocate persistent buffer of size %d\n", (int)bytes);
      return kTfLiteError;
    }
    overflow_buffers.push_back(*ptr);
    return kTfLiteOk;
  }

  current_location -= bytes;

  *ptr = current_location;
  return kTfLiteOk;
}
typedef struct {
  size_t bytes;
  void *ptr;
} scratch_buffer_t;
static std::vector<scratch_buffer_t> scratch_buffers;

static TfLiteStatus RequestScratchBufferInArena(struct TfLiteContext* ctx, size_t bytes,
                                                int* buffer_idx) {
  scratch_buffer_t b;
  b.bytes = bytes;

  TfLiteStatus s = AllocatePersistentBuffer(ctx, b.bytes, &b.ptr);
  if (s != kTfLiteOk) {
    return s;
  }

  scratch_buffers.push_back(b);

  *buffer_idx = scratch_buffers.size() - 1;

  return kTfLiteOk;
}

static void* GetScratchBuffer(struct TfLiteContext* ctx, int buffer_idx) {
  if (buffer_idx > static_cast<int>(scratch_buffers.size()) - 1) {
    return NULL;
  }
  return scratch_buffers[buffer_idx].ptr;
}
} // namespace

  TfLiteStatus trained_model_init( void*(*alloc_fnc)(size_t,size_t) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  tensor_arena = (uint8_t*) alloc_fnc(16, kTensorArenaSize);
  if (!tensor_arena) {
    printf("ERR: failed to allocate tensor arena\n");
    return kTfLiteError;
  }
#endif
  tensor_boundary = tensor_arena;
  current_location = tensor_arena + kTensorArenaSize;
  ctx.AllocatePersistentBuffer = &AllocatePersistentBuffer;
  ctx.RequestScratchBufferInArena = &RequestScratchBufferInArena;
  ctx.GetScratchBuffer = &GetScratchBuffer;
  ctx.tensors = tflTensors;
  ctx.tensors_size = 42;
  for(size_t i = 0; i < 42; ++i) {
    tflTensors[i].type = tensorData[i].type;
    tflTensors[i].is_variable = 0;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    tflTensors[i].allocation_type = tensorData[i].allocation_type;
#else
    tflTensors[i].allocation_type = (tensor_arena <= tensorData[i].data && tensorData[i].data < tensor_arena + kTensorArenaSize) ? kTfLiteArenaRw : kTfLiteMmapRo;
#endif
    tflTensors[i].bytes = tensorData[i].bytes;
    tflTensors[i].dims = tensorData[i].dims;

#if defined(EI_CLASSIFIER_ALLOCATION_HEAP)
    if(tflTensors[i].allocation_type == kTfLiteArenaRw){
      uint8_t* start = (uint8_t*) ((uintptr_t)tensorData[i].data + (uintptr_t) tensor_arena);

     tflTensors[i].data.data =  start;
    }
    else{
       tflTensors[i].data.data = tensorData[i].data;
    }
#else
    tflTensors[i].data.data = tensorData[i].data;
#endif // EI_CLASSIFIER_ALLOCATION_HEAP
    tflTensors[i].quantization = tensorData[i].quantization;
    if (tflTensors[i].quantization.type == kTfLiteAffineQuantization) {
      TfLiteAffineQuantization const* quant = ((TfLiteAffineQuantization const*)(tensorData[i].quantization.params));
      tflTensors[i].params.scale = quant->scale->data[0];
      tflTensors[i].params.zero_point = quant->zero_point->data[0];
    }
    if (tflTensors[i].allocation_type == kTfLiteArenaRw) {
      auto data_end_ptr = (uint8_t*)tflTensors[i].data.data + tensorData[i].bytes;
      if (data_end_ptr > tensor_boundary) {
        tensor_boundary = data_end_ptr;
      }
    }
  }
  if (tensor_boundary > current_location /* end of arena size */) {
    printf("ERR: tensor arena is too small, does not fit model - even without scratch buffers\n");
    return kTfLiteError;
  }
  registrations[OP_RESHAPE] = *tflite::ops::micro::Register_RESHAPE();
  registrations[OP_CONV_2D] = *tflite::ops::micro::Register_CONV_2D();
  registrations[OP_ADD] = *tflite::ops::micro::Register_ADD();
  registrations[OP_MAX_POOL_2D] = *tflite::ops::micro::Register_MAX_POOL_2D();
  registrations[OP_FULLY_CONNECTED] = *tflite::ops::micro::Register_FULLY_CONNECTED();
  registrations[OP_SOFTMAX] = *tflite::ops::micro::Register_SOFTMAX();

  for(size_t i = 0; i < 21; ++i) {
    tflNodes[i].inputs = nodeData[i].inputs;
    tflNodes[i].outputs = nodeData[i].outputs;
    tflNodes[i].builtin_data = nodeData[i].builtin_data;
    tflNodes[i].custom_initial_data = nullptr;
    tflNodes[i].custom_initial_data_size = 0;
    if (registrations[nodeData[i].used_op_index].init) {
      tflNodes[i].user_data = registrations[nodeData[i].used_op_index].init(&ctx, (const char*)tflNodes[i].builtin_data, 0);
    }
  }
  for(size_t i = 0; i < 21; ++i) {
    if (registrations[nodeData[i].used_op_index].prepare) {
      TfLiteStatus status = registrations[nodeData[i].used_op_index].prepare(&ctx, &tflNodes[i]);
      if (status != kTfLiteOk) {
        return status;
      }
    }
  }
  return kTfLiteOk;
}

static const int inTensorIndices[] = {
  0, 
};
TfLiteTensor* trained_model_input(int index) {
  return &ctx.tensors[inTensorIndices[index]];
}

static const int outTensorIndices[] = {
  41, 
};
TfLiteTensor* trained_model_output(int index) {
  return &ctx.tensors[outTensorIndices[index]];
}

TfLiteStatus trained_model_invoke() {
  for(size_t i = 0; i < 21; ++i) {
    TfLiteStatus status = registrations[nodeData[i].used_op_index].invoke(&ctx, &tflNodes[i]);

#if EI_CLASSIFIER_PRINT_STATE
    ei_printf("layer %lu\n", i);
    ei_printf("    inputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].inputs->size; ix++) {
      auto d = tensorData[tflNodes[i].inputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");

    ei_printf("    outputs:\n");
    for (size_t ix = 0; ix < tflNodes[i].outputs->size; ix++) {
      auto d = tensorData[tflNodes[i].outputs->data[ix]];

      size_t data_ptr = (size_t)d.data;

      if (d.allocation_type == kTfLiteArenaRw) {
        data_ptr = (size_t)tensor_arena + data_ptr;
      }

      if (d.type == TfLiteType::kTfLiteInt8) {
        int8_t* data = (int8_t*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes; jx++) {
          ei_printf("%d ", data[jx]);
        }
      }
      else {
        float* data = (float*)data_ptr;
        ei_printf("        %lu (%zu bytes, ptr=%p, alloc_type=%d, type=%d): ", ix, d.bytes, data, (int)d.allocation_type, (int)d.type);
        for (size_t jx = 0; jx < d.bytes / 4; jx++) {
          ei_printf("%f ", data[jx]);
        }
      }
      ei_printf("\n");
    }
    ei_printf("\n");
#endif // EI_CLASSIFIER_PRINT_STATE

    if (status != kTfLiteOk) {
      return status;
    }
  }
  return kTfLiteOk;
}

TfLiteStatus trained_model_reset( void (*free_fnc)(void* ptr) ) {
#ifdef EI_CLASSIFIER_ALLOCATION_HEAP
  free_fnc(tensor_arena);
#endif
  scratch_buffers.clear();
  for (size_t ix = 0; ix < overflow_buffers.size(); ix++) {
    free(overflow_buffers[ix]);
  }
  overflow_buffers.clear();
  return kTfLiteOk;
}
